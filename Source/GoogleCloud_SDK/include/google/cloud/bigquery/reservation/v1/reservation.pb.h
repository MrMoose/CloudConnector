// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/bigquery/reservation/v1/reservation.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fbigquery_2freservation_2fv1_2freservation_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fbigquery_2freservation_2fv1_2freservation_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include "google/api/field_behavior.pb.h"
#include "google/api/resource.pb.h"
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/field_mask.pb.h>
#include <google/protobuf/timestamp.pb.h>
#include "google/rpc/status.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fcloud_2fbigquery_2freservation_2fv1_2freservation_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fcloud_2fbigquery_2freservation_2fv1_2freservation_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fcloud_2fbigquery_2freservation_2fv1_2freservation_2eproto;
namespace google {
namespace cloud {
namespace bigquery {
namespace reservation {
namespace v1 {
class Assignment;
struct AssignmentDefaultTypeInternal;
extern AssignmentDefaultTypeInternal _Assignment_default_instance_;
class BiReservation;
struct BiReservationDefaultTypeInternal;
extern BiReservationDefaultTypeInternal _BiReservation_default_instance_;
class CapacityCommitment;
struct CapacityCommitmentDefaultTypeInternal;
extern CapacityCommitmentDefaultTypeInternal _CapacityCommitment_default_instance_;
class CreateAssignmentRequest;
struct CreateAssignmentRequestDefaultTypeInternal;
extern CreateAssignmentRequestDefaultTypeInternal _CreateAssignmentRequest_default_instance_;
class CreateCapacityCommitmentRequest;
struct CreateCapacityCommitmentRequestDefaultTypeInternal;
extern CreateCapacityCommitmentRequestDefaultTypeInternal _CreateCapacityCommitmentRequest_default_instance_;
class CreateReservationRequest;
struct CreateReservationRequestDefaultTypeInternal;
extern CreateReservationRequestDefaultTypeInternal _CreateReservationRequest_default_instance_;
class DeleteAssignmentRequest;
struct DeleteAssignmentRequestDefaultTypeInternal;
extern DeleteAssignmentRequestDefaultTypeInternal _DeleteAssignmentRequest_default_instance_;
class DeleteCapacityCommitmentRequest;
struct DeleteCapacityCommitmentRequestDefaultTypeInternal;
extern DeleteCapacityCommitmentRequestDefaultTypeInternal _DeleteCapacityCommitmentRequest_default_instance_;
class DeleteReservationRequest;
struct DeleteReservationRequestDefaultTypeInternal;
extern DeleteReservationRequestDefaultTypeInternal _DeleteReservationRequest_default_instance_;
class GetBiReservationRequest;
struct GetBiReservationRequestDefaultTypeInternal;
extern GetBiReservationRequestDefaultTypeInternal _GetBiReservationRequest_default_instance_;
class GetCapacityCommitmentRequest;
struct GetCapacityCommitmentRequestDefaultTypeInternal;
extern GetCapacityCommitmentRequestDefaultTypeInternal _GetCapacityCommitmentRequest_default_instance_;
class GetReservationRequest;
struct GetReservationRequestDefaultTypeInternal;
extern GetReservationRequestDefaultTypeInternal _GetReservationRequest_default_instance_;
class ListAssignmentsRequest;
struct ListAssignmentsRequestDefaultTypeInternal;
extern ListAssignmentsRequestDefaultTypeInternal _ListAssignmentsRequest_default_instance_;
class ListAssignmentsResponse;
struct ListAssignmentsResponseDefaultTypeInternal;
extern ListAssignmentsResponseDefaultTypeInternal _ListAssignmentsResponse_default_instance_;
class ListCapacityCommitmentsRequest;
struct ListCapacityCommitmentsRequestDefaultTypeInternal;
extern ListCapacityCommitmentsRequestDefaultTypeInternal _ListCapacityCommitmentsRequest_default_instance_;
class ListCapacityCommitmentsResponse;
struct ListCapacityCommitmentsResponseDefaultTypeInternal;
extern ListCapacityCommitmentsResponseDefaultTypeInternal _ListCapacityCommitmentsResponse_default_instance_;
class ListReservationsRequest;
struct ListReservationsRequestDefaultTypeInternal;
extern ListReservationsRequestDefaultTypeInternal _ListReservationsRequest_default_instance_;
class ListReservationsResponse;
struct ListReservationsResponseDefaultTypeInternal;
extern ListReservationsResponseDefaultTypeInternal _ListReservationsResponse_default_instance_;
class MergeCapacityCommitmentsRequest;
struct MergeCapacityCommitmentsRequestDefaultTypeInternal;
extern MergeCapacityCommitmentsRequestDefaultTypeInternal _MergeCapacityCommitmentsRequest_default_instance_;
class MoveAssignmentRequest;
struct MoveAssignmentRequestDefaultTypeInternal;
extern MoveAssignmentRequestDefaultTypeInternal _MoveAssignmentRequest_default_instance_;
class Reservation;
struct ReservationDefaultTypeInternal;
extern ReservationDefaultTypeInternal _Reservation_default_instance_;
class SearchAllAssignmentsRequest;
struct SearchAllAssignmentsRequestDefaultTypeInternal;
extern SearchAllAssignmentsRequestDefaultTypeInternal _SearchAllAssignmentsRequest_default_instance_;
class SearchAllAssignmentsResponse;
struct SearchAllAssignmentsResponseDefaultTypeInternal;
extern SearchAllAssignmentsResponseDefaultTypeInternal _SearchAllAssignmentsResponse_default_instance_;
class SearchAssignmentsRequest;
struct SearchAssignmentsRequestDefaultTypeInternal;
extern SearchAssignmentsRequestDefaultTypeInternal _SearchAssignmentsRequest_default_instance_;
class SearchAssignmentsResponse;
struct SearchAssignmentsResponseDefaultTypeInternal;
extern SearchAssignmentsResponseDefaultTypeInternal _SearchAssignmentsResponse_default_instance_;
class SplitCapacityCommitmentRequest;
struct SplitCapacityCommitmentRequestDefaultTypeInternal;
extern SplitCapacityCommitmentRequestDefaultTypeInternal _SplitCapacityCommitmentRequest_default_instance_;
class SplitCapacityCommitmentResponse;
struct SplitCapacityCommitmentResponseDefaultTypeInternal;
extern SplitCapacityCommitmentResponseDefaultTypeInternal _SplitCapacityCommitmentResponse_default_instance_;
class TableReference;
struct TableReferenceDefaultTypeInternal;
extern TableReferenceDefaultTypeInternal _TableReference_default_instance_;
class UpdateAssignmentRequest;
struct UpdateAssignmentRequestDefaultTypeInternal;
extern UpdateAssignmentRequestDefaultTypeInternal _UpdateAssignmentRequest_default_instance_;
class UpdateBiReservationRequest;
struct UpdateBiReservationRequestDefaultTypeInternal;
extern UpdateBiReservationRequestDefaultTypeInternal _UpdateBiReservationRequest_default_instance_;
class UpdateCapacityCommitmentRequest;
struct UpdateCapacityCommitmentRequestDefaultTypeInternal;
extern UpdateCapacityCommitmentRequestDefaultTypeInternal _UpdateCapacityCommitmentRequest_default_instance_;
class UpdateReservationRequest;
struct UpdateReservationRequestDefaultTypeInternal;
extern UpdateReservationRequestDefaultTypeInternal _UpdateReservationRequest_default_instance_;
}  // namespace v1
}  // namespace reservation
}  // namespace bigquery
}  // namespace cloud
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::cloud::bigquery::reservation::v1::Assignment* Arena::CreateMaybeMessage<::google::cloud::bigquery::reservation::v1::Assignment>(Arena*);
template<> ::google::cloud::bigquery::reservation::v1::BiReservation* Arena::CreateMaybeMessage<::google::cloud::bigquery::reservation::v1::BiReservation>(Arena*);
template<> ::google::cloud::bigquery::reservation::v1::CapacityCommitment* Arena::CreateMaybeMessage<::google::cloud::bigquery::reservation::v1::CapacityCommitment>(Arena*);
template<> ::google::cloud::bigquery::reservation::v1::CreateAssignmentRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::reservation::v1::CreateAssignmentRequest>(Arena*);
template<> ::google::cloud::bigquery::reservation::v1::CreateCapacityCommitmentRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::reservation::v1::CreateCapacityCommitmentRequest>(Arena*);
template<> ::google::cloud::bigquery::reservation::v1::CreateReservationRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::reservation::v1::CreateReservationRequest>(Arena*);
template<> ::google::cloud::bigquery::reservation::v1::DeleteAssignmentRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::reservation::v1::DeleteAssignmentRequest>(Arena*);
template<> ::google::cloud::bigquery::reservation::v1::DeleteCapacityCommitmentRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::reservation::v1::DeleteCapacityCommitmentRequest>(Arena*);
template<> ::google::cloud::bigquery::reservation::v1::DeleteReservationRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::reservation::v1::DeleteReservationRequest>(Arena*);
template<> ::google::cloud::bigquery::reservation::v1::GetBiReservationRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::reservation::v1::GetBiReservationRequest>(Arena*);
template<> ::google::cloud::bigquery::reservation::v1::GetCapacityCommitmentRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::reservation::v1::GetCapacityCommitmentRequest>(Arena*);
template<> ::google::cloud::bigquery::reservation::v1::GetReservationRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::reservation::v1::GetReservationRequest>(Arena*);
template<> ::google::cloud::bigquery::reservation::v1::ListAssignmentsRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::reservation::v1::ListAssignmentsRequest>(Arena*);
template<> ::google::cloud::bigquery::reservation::v1::ListAssignmentsResponse* Arena::CreateMaybeMessage<::google::cloud::bigquery::reservation::v1::ListAssignmentsResponse>(Arena*);
template<> ::google::cloud::bigquery::reservation::v1::ListCapacityCommitmentsRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::reservation::v1::ListCapacityCommitmentsRequest>(Arena*);
template<> ::google::cloud::bigquery::reservation::v1::ListCapacityCommitmentsResponse* Arena::CreateMaybeMessage<::google::cloud::bigquery::reservation::v1::ListCapacityCommitmentsResponse>(Arena*);
template<> ::google::cloud::bigquery::reservation::v1::ListReservationsRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::reservation::v1::ListReservationsRequest>(Arena*);
template<> ::google::cloud::bigquery::reservation::v1::ListReservationsResponse* Arena::CreateMaybeMessage<::google::cloud::bigquery::reservation::v1::ListReservationsResponse>(Arena*);
template<> ::google::cloud::bigquery::reservation::v1::MergeCapacityCommitmentsRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::reservation::v1::MergeCapacityCommitmentsRequest>(Arena*);
template<> ::google::cloud::bigquery::reservation::v1::MoveAssignmentRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::reservation::v1::MoveAssignmentRequest>(Arena*);
template<> ::google::cloud::bigquery::reservation::v1::Reservation* Arena::CreateMaybeMessage<::google::cloud::bigquery::reservation::v1::Reservation>(Arena*);
template<> ::google::cloud::bigquery::reservation::v1::SearchAllAssignmentsRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::reservation::v1::SearchAllAssignmentsRequest>(Arena*);
template<> ::google::cloud::bigquery::reservation::v1::SearchAllAssignmentsResponse* Arena::CreateMaybeMessage<::google::cloud::bigquery::reservation::v1::SearchAllAssignmentsResponse>(Arena*);
template<> ::google::cloud::bigquery::reservation::v1::SearchAssignmentsRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::reservation::v1::SearchAssignmentsRequest>(Arena*);
template<> ::google::cloud::bigquery::reservation::v1::SearchAssignmentsResponse* Arena::CreateMaybeMessage<::google::cloud::bigquery::reservation::v1::SearchAssignmentsResponse>(Arena*);
template<> ::google::cloud::bigquery::reservation::v1::SplitCapacityCommitmentRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::reservation::v1::SplitCapacityCommitmentRequest>(Arena*);
template<> ::google::cloud::bigquery::reservation::v1::SplitCapacityCommitmentResponse* Arena::CreateMaybeMessage<::google::cloud::bigquery::reservation::v1::SplitCapacityCommitmentResponse>(Arena*);
template<> ::google::cloud::bigquery::reservation::v1::TableReference* Arena::CreateMaybeMessage<::google::cloud::bigquery::reservation::v1::TableReference>(Arena*);
template<> ::google::cloud::bigquery::reservation::v1::UpdateAssignmentRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::reservation::v1::UpdateAssignmentRequest>(Arena*);
template<> ::google::cloud::bigquery::reservation::v1::UpdateBiReservationRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::reservation::v1::UpdateBiReservationRequest>(Arena*);
template<> ::google::cloud::bigquery::reservation::v1::UpdateCapacityCommitmentRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::reservation::v1::UpdateCapacityCommitmentRequest>(Arena*);
template<> ::google::cloud::bigquery::reservation::v1::UpdateReservationRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::reservation::v1::UpdateReservationRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace cloud {
namespace bigquery {
namespace reservation {
namespace v1 {

enum CapacityCommitment_CommitmentPlan : int {
  CapacityCommitment_CommitmentPlan_COMMITMENT_PLAN_UNSPECIFIED = 0,
  CapacityCommitment_CommitmentPlan_FLEX = 3,
  CapacityCommitment_CommitmentPlan_TRIAL = 5,
  CapacityCommitment_CommitmentPlan_MONTHLY = 2,
  CapacityCommitment_CommitmentPlan_ANNUAL = 4,
  CapacityCommitment_CommitmentPlan_CapacityCommitment_CommitmentPlan_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CapacityCommitment_CommitmentPlan_CapacityCommitment_CommitmentPlan_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CapacityCommitment_CommitmentPlan_IsValid(int value);
constexpr CapacityCommitment_CommitmentPlan CapacityCommitment_CommitmentPlan_CommitmentPlan_MIN = CapacityCommitment_CommitmentPlan_COMMITMENT_PLAN_UNSPECIFIED;
constexpr CapacityCommitment_CommitmentPlan CapacityCommitment_CommitmentPlan_CommitmentPlan_MAX = CapacityCommitment_CommitmentPlan_TRIAL;
constexpr int CapacityCommitment_CommitmentPlan_CommitmentPlan_ARRAYSIZE = CapacityCommitment_CommitmentPlan_CommitmentPlan_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CapacityCommitment_CommitmentPlan_descriptor();
template<typename T>
inline const std::string& CapacityCommitment_CommitmentPlan_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CapacityCommitment_CommitmentPlan>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CapacityCommitment_CommitmentPlan_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CapacityCommitment_CommitmentPlan_descriptor(), enum_t_value);
}
inline bool CapacityCommitment_CommitmentPlan_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CapacityCommitment_CommitmentPlan* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CapacityCommitment_CommitmentPlan>(
    CapacityCommitment_CommitmentPlan_descriptor(), name, value);
}
enum CapacityCommitment_State : int {
  CapacityCommitment_State_STATE_UNSPECIFIED = 0,
  CapacityCommitment_State_PENDING = 1,
  CapacityCommitment_State_ACTIVE = 2,
  CapacityCommitment_State_FAILED = 3,
  CapacityCommitment_State_CapacityCommitment_State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CapacityCommitment_State_CapacityCommitment_State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CapacityCommitment_State_IsValid(int value);
constexpr CapacityCommitment_State CapacityCommitment_State_State_MIN = CapacityCommitment_State_STATE_UNSPECIFIED;
constexpr CapacityCommitment_State CapacityCommitment_State_State_MAX = CapacityCommitment_State_FAILED;
constexpr int CapacityCommitment_State_State_ARRAYSIZE = CapacityCommitment_State_State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CapacityCommitment_State_descriptor();
template<typename T>
inline const std::string& CapacityCommitment_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CapacityCommitment_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CapacityCommitment_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CapacityCommitment_State_descriptor(), enum_t_value);
}
inline bool CapacityCommitment_State_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CapacityCommitment_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CapacityCommitment_State>(
    CapacityCommitment_State_descriptor(), name, value);
}
enum Assignment_JobType : int {
  Assignment_JobType_JOB_TYPE_UNSPECIFIED = 0,
  Assignment_JobType_PIPELINE = 1,
  Assignment_JobType_QUERY = 2,
  Assignment_JobType_ML_EXTERNAL = 3,
  Assignment_JobType_Assignment_JobType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Assignment_JobType_Assignment_JobType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Assignment_JobType_IsValid(int value);
constexpr Assignment_JobType Assignment_JobType_JobType_MIN = Assignment_JobType_JOB_TYPE_UNSPECIFIED;
constexpr Assignment_JobType Assignment_JobType_JobType_MAX = Assignment_JobType_ML_EXTERNAL;
constexpr int Assignment_JobType_JobType_ARRAYSIZE = Assignment_JobType_JobType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Assignment_JobType_descriptor();
template<typename T>
inline const std::string& Assignment_JobType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Assignment_JobType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Assignment_JobType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Assignment_JobType_descriptor(), enum_t_value);
}
inline bool Assignment_JobType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Assignment_JobType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Assignment_JobType>(
    Assignment_JobType_descriptor(), name, value);
}
enum Assignment_State : int {
  Assignment_State_STATE_UNSPECIFIED = 0,
  Assignment_State_PENDING = 1,
  Assignment_State_ACTIVE = 2,
  Assignment_State_Assignment_State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Assignment_State_Assignment_State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Assignment_State_IsValid(int value);
constexpr Assignment_State Assignment_State_State_MIN = Assignment_State_STATE_UNSPECIFIED;
constexpr Assignment_State Assignment_State_State_MAX = Assignment_State_ACTIVE;
constexpr int Assignment_State_State_ARRAYSIZE = Assignment_State_State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Assignment_State_descriptor();
template<typename T>
inline const std::string& Assignment_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Assignment_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Assignment_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Assignment_State_descriptor(), enum_t_value);
}
inline bool Assignment_State_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Assignment_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Assignment_State>(
    Assignment_State_descriptor(), name, value);
}
// ===================================================================

class Reservation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.reservation.v1.Reservation) */ {
 public:
  inline Reservation() : Reservation(nullptr) {}
  ~Reservation() override;
  explicit PROTOBUF_CONSTEXPR Reservation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Reservation(const Reservation& from);
  Reservation(Reservation&& from) noexcept
    : Reservation() {
    *this = ::std::move(from);
  }

  inline Reservation& operator=(const Reservation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Reservation& operator=(Reservation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Reservation& default_instance() {
    return *internal_default_instance();
  }
  static inline const Reservation* internal_default_instance() {
    return reinterpret_cast<const Reservation*>(
               &_Reservation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Reservation& a, Reservation& b) {
    a.Swap(&b);
  }
  inline void Swap(Reservation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Reservation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Reservation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Reservation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Reservation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Reservation& from) {
    Reservation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Reservation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.reservation.v1.Reservation";
  }
  protected:
  explicit Reservation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kCreationTimeFieldNumber = 8,
    kUpdateTimeFieldNumber = 9,
    kSlotCapacityFieldNumber = 2,
    kConcurrencyFieldNumber = 16,
    kIgnoreIdleSlotsFieldNumber = 4,
    kMultiRegionAuxiliaryFieldNumber = 14,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.protobuf.Timestamp creation_time = 8 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_creation_time() const;
  private:
  bool _internal_has_creation_time() const;
  public:
  void clear_creation_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& creation_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_creation_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_creation_time();
  void set_allocated_creation_time(::PROTOBUF_NAMESPACE_ID::Timestamp* creation_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_creation_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_creation_time();
  public:
  void unsafe_arena_set_allocated_creation_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* creation_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_creation_time();

  // .google.protobuf.Timestamp update_time = 9 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_update_time() const;
  private:
  bool _internal_has_update_time() const;
  public:
  void clear_update_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& update_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_update_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_update_time();
  void set_allocated_update_time(::PROTOBUF_NAMESPACE_ID::Timestamp* update_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_update_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_update_time();
  public:
  void unsafe_arena_set_allocated_update_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* update_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_update_time();

  // int64 slot_capacity = 2;
  void clear_slot_capacity();
  int64_t slot_capacity() const;
  void set_slot_capacity(int64_t value);
  private:
  int64_t _internal_slot_capacity() const;
  void _internal_set_slot_capacity(int64_t value);
  public:

  // int64 concurrency = 16;
  void clear_concurrency();
  int64_t concurrency() const;
  void set_concurrency(int64_t value);
  private:
  int64_t _internal_concurrency() const;
  void _internal_set_concurrency(int64_t value);
  public:

  // bool ignore_idle_slots = 4;
  void clear_ignore_idle_slots();
  bool ignore_idle_slots() const;
  void set_ignore_idle_slots(bool value);
  private:
  bool _internal_ignore_idle_slots() const;
  void _internal_set_ignore_idle_slots(bool value);
  public:

  // bool multi_region_auxiliary = 14;
  void clear_multi_region_auxiliary();
  bool multi_region_auxiliary() const;
  void set_multi_region_auxiliary(bool value);
  private:
  bool _internal_multi_region_auxiliary() const;
  void _internal_set_multi_region_auxiliary(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.reservation.v1.Reservation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* creation_time_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* update_time_;
    int64_t slot_capacity_;
    int64_t concurrency_;
    bool ignore_idle_slots_;
    bool multi_region_auxiliary_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2freservation_2fv1_2freservation_2eproto;
};
// -------------------------------------------------------------------

class CapacityCommitment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.reservation.v1.CapacityCommitment) */ {
 public:
  inline CapacityCommitment() : CapacityCommitment(nullptr) {}
  ~CapacityCommitment() override;
  explicit PROTOBUF_CONSTEXPR CapacityCommitment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CapacityCommitment(const CapacityCommitment& from);
  CapacityCommitment(CapacityCommitment&& from) noexcept
    : CapacityCommitment() {
    *this = ::std::move(from);
  }

  inline CapacityCommitment& operator=(const CapacityCommitment& from) {
    CopyFrom(from);
    return *this;
  }
  inline CapacityCommitment& operator=(CapacityCommitment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CapacityCommitment& default_instance() {
    return *internal_default_instance();
  }
  static inline const CapacityCommitment* internal_default_instance() {
    return reinterpret_cast<const CapacityCommitment*>(
               &_CapacityCommitment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CapacityCommitment& a, CapacityCommitment& b) {
    a.Swap(&b);
  }
  inline void Swap(CapacityCommitment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CapacityCommitment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CapacityCommitment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CapacityCommitment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CapacityCommitment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CapacityCommitment& from) {
    CapacityCommitment::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CapacityCommitment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.reservation.v1.CapacityCommitment";
  }
  protected:
  explicit CapacityCommitment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CapacityCommitment_CommitmentPlan CommitmentPlan;
  static constexpr CommitmentPlan COMMITMENT_PLAN_UNSPECIFIED =
    CapacityCommitment_CommitmentPlan_COMMITMENT_PLAN_UNSPECIFIED;
  static constexpr CommitmentPlan FLEX =
    CapacityCommitment_CommitmentPlan_FLEX;
  static constexpr CommitmentPlan TRIAL =
    CapacityCommitment_CommitmentPlan_TRIAL;
  static constexpr CommitmentPlan MONTHLY =
    CapacityCommitment_CommitmentPlan_MONTHLY;
  static constexpr CommitmentPlan ANNUAL =
    CapacityCommitment_CommitmentPlan_ANNUAL;
  static inline bool CommitmentPlan_IsValid(int value) {
    return CapacityCommitment_CommitmentPlan_IsValid(value);
  }
  static constexpr CommitmentPlan CommitmentPlan_MIN =
    CapacityCommitment_CommitmentPlan_CommitmentPlan_MIN;
  static constexpr CommitmentPlan CommitmentPlan_MAX =
    CapacityCommitment_CommitmentPlan_CommitmentPlan_MAX;
  static constexpr int CommitmentPlan_ARRAYSIZE =
    CapacityCommitment_CommitmentPlan_CommitmentPlan_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CommitmentPlan_descriptor() {
    return CapacityCommitment_CommitmentPlan_descriptor();
  }
  template<typename T>
  static inline const std::string& CommitmentPlan_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CommitmentPlan>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CommitmentPlan_Name.");
    return CapacityCommitment_CommitmentPlan_Name(enum_t_value);
  }
  static inline bool CommitmentPlan_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      CommitmentPlan* value) {
    return CapacityCommitment_CommitmentPlan_Parse(name, value);
  }

  typedef CapacityCommitment_State State;
  static constexpr State STATE_UNSPECIFIED =
    CapacityCommitment_State_STATE_UNSPECIFIED;
  static constexpr State PENDING =
    CapacityCommitment_State_PENDING;
  static constexpr State ACTIVE =
    CapacityCommitment_State_ACTIVE;
  static constexpr State FAILED =
    CapacityCommitment_State_FAILED;
  static inline bool State_IsValid(int value) {
    return CapacityCommitment_State_IsValid(value);
  }
  static constexpr State State_MIN =
    CapacityCommitment_State_State_MIN;
  static constexpr State State_MAX =
    CapacityCommitment_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    CapacityCommitment_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return CapacityCommitment_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return CapacityCommitment_State_Name(enum_t_value);
  }
  static inline bool State_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      State* value) {
    return CapacityCommitment_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kCommitmentEndTimeFieldNumber = 5,
    kFailureStatusFieldNumber = 7,
    kCommitmentStartTimeFieldNumber = 9,
    kSlotCountFieldNumber = 2,
    kPlanFieldNumber = 3,
    kStateFieldNumber = 4,
    kRenewalPlanFieldNumber = 8,
    kMultiRegionAuxiliaryFieldNumber = 10,
  };
  // string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.protobuf.Timestamp commitment_end_time = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_commitment_end_time() const;
  private:
  bool _internal_has_commitment_end_time() const;
  public:
  void clear_commitment_end_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& commitment_end_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_commitment_end_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_commitment_end_time();
  void set_allocated_commitment_end_time(::PROTOBUF_NAMESPACE_ID::Timestamp* commitment_end_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_commitment_end_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_commitment_end_time();
  public:
  void unsafe_arena_set_allocated_commitment_end_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* commitment_end_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_commitment_end_time();

  // .google.rpc.Status failure_status = 7 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_failure_status() const;
  private:
  bool _internal_has_failure_status() const;
  public:
  void clear_failure_status();
  const ::google::rpc::Status& failure_status() const;
  PROTOBUF_NODISCARD ::google::rpc::Status* release_failure_status();
  ::google::rpc::Status* mutable_failure_status();
  void set_allocated_failure_status(::google::rpc::Status* failure_status);
  private:
  const ::google::rpc::Status& _internal_failure_status() const;
  ::google::rpc::Status* _internal_mutable_failure_status();
  public:
  void unsafe_arena_set_allocated_failure_status(
      ::google::rpc::Status* failure_status);
  ::google::rpc::Status* unsafe_arena_release_failure_status();

  // .google.protobuf.Timestamp commitment_start_time = 9 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_commitment_start_time() const;
  private:
  bool _internal_has_commitment_start_time() const;
  public:
  void clear_commitment_start_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& commitment_start_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_commitment_start_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_commitment_start_time();
  void set_allocated_commitment_start_time(::PROTOBUF_NAMESPACE_ID::Timestamp* commitment_start_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_commitment_start_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_commitment_start_time();
  public:
  void unsafe_arena_set_allocated_commitment_start_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* commitment_start_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_commitment_start_time();

  // int64 slot_count = 2;
  void clear_slot_count();
  int64_t slot_count() const;
  void set_slot_count(int64_t value);
  private:
  int64_t _internal_slot_count() const;
  void _internal_set_slot_count(int64_t value);
  public:

  // .google.cloud.bigquery.reservation.v1.CapacityCommitment.CommitmentPlan plan = 3;
  void clear_plan();
  ::google::cloud::bigquery::reservation::v1::CapacityCommitment_CommitmentPlan plan() const;
  void set_plan(::google::cloud::bigquery::reservation::v1::CapacityCommitment_CommitmentPlan value);
  private:
  ::google::cloud::bigquery::reservation::v1::CapacityCommitment_CommitmentPlan _internal_plan() const;
  void _internal_set_plan(::google::cloud::bigquery::reservation::v1::CapacityCommitment_CommitmentPlan value);
  public:

  // .google.cloud.bigquery.reservation.v1.CapacityCommitment.State state = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_state();
  ::google::cloud::bigquery::reservation::v1::CapacityCommitment_State state() const;
  void set_state(::google::cloud::bigquery::reservation::v1::CapacityCommitment_State value);
  private:
  ::google::cloud::bigquery::reservation::v1::CapacityCommitment_State _internal_state() const;
  void _internal_set_state(::google::cloud::bigquery::reservation::v1::CapacityCommitment_State value);
  public:

  // .google.cloud.bigquery.reservation.v1.CapacityCommitment.CommitmentPlan renewal_plan = 8;
  void clear_renewal_plan();
  ::google::cloud::bigquery::reservation::v1::CapacityCommitment_CommitmentPlan renewal_plan() const;
  void set_renewal_plan(::google::cloud::bigquery::reservation::v1::CapacityCommitment_CommitmentPlan value);
  private:
  ::google::cloud::bigquery::reservation::v1::CapacityCommitment_CommitmentPlan _internal_renewal_plan() const;
  void _internal_set_renewal_plan(::google::cloud::bigquery::reservation::v1::CapacityCommitment_CommitmentPlan value);
  public:

  // bool multi_region_auxiliary = 10;
  void clear_multi_region_auxiliary();
  bool multi_region_auxiliary() const;
  void set_multi_region_auxiliary(bool value);
  private:
  bool _internal_multi_region_auxiliary() const;
  void _internal_set_multi_region_auxiliary(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.reservation.v1.CapacityCommitment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* commitment_end_time_;
    ::google::rpc::Status* failure_status_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* commitment_start_time_;
    int64_t slot_count_;
    int plan_;
    int state_;
    int renewal_plan_;
    bool multi_region_auxiliary_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2freservation_2fv1_2freservation_2eproto;
};
// -------------------------------------------------------------------

class CreateReservationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.reservation.v1.CreateReservationRequest) */ {
 public:
  inline CreateReservationRequest() : CreateReservationRequest(nullptr) {}
  ~CreateReservationRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateReservationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateReservationRequest(const CreateReservationRequest& from);
  CreateReservationRequest(CreateReservationRequest&& from) noexcept
    : CreateReservationRequest() {
    *this = ::std::move(from);
  }

  inline CreateReservationRequest& operator=(const CreateReservationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateReservationRequest& operator=(CreateReservationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateReservationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateReservationRequest* internal_default_instance() {
    return reinterpret_cast<const CreateReservationRequest*>(
               &_CreateReservationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CreateReservationRequest& a, CreateReservationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateReservationRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateReservationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateReservationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateReservationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateReservationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateReservationRequest& from) {
    CreateReservationRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateReservationRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.reservation.v1.CreateReservationRequest";
  }
  protected:
  explicit CreateReservationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kReservationIdFieldNumber = 2,
    kReservationFieldNumber = 3,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string reservation_id = 2;
  void clear_reservation_id();
  const std::string& reservation_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reservation_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reservation_id();
  PROTOBUF_NODISCARD std::string* release_reservation_id();
  void set_allocated_reservation_id(std::string* reservation_id);
  private:
  const std::string& _internal_reservation_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reservation_id(const std::string& value);
  std::string* _internal_mutable_reservation_id();
  public:

  // .google.cloud.bigquery.reservation.v1.Reservation reservation = 3;
  bool has_reservation() const;
  private:
  bool _internal_has_reservation() const;
  public:
  void clear_reservation();
  const ::google::cloud::bigquery::reservation::v1::Reservation& reservation() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::reservation::v1::Reservation* release_reservation();
  ::google::cloud::bigquery::reservation::v1::Reservation* mutable_reservation();
  void set_allocated_reservation(::google::cloud::bigquery::reservation::v1::Reservation* reservation);
  private:
  const ::google::cloud::bigquery::reservation::v1::Reservation& _internal_reservation() const;
  ::google::cloud::bigquery::reservation::v1::Reservation* _internal_mutable_reservation();
  public:
  void unsafe_arena_set_allocated_reservation(
      ::google::cloud::bigquery::reservation::v1::Reservation* reservation);
  ::google::cloud::bigquery::reservation::v1::Reservation* unsafe_arena_release_reservation();

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.reservation.v1.CreateReservationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reservation_id_;
    ::google::cloud::bigquery::reservation::v1::Reservation* reservation_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2freservation_2fv1_2freservation_2eproto;
};
// -------------------------------------------------------------------

class ListReservationsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.reservation.v1.ListReservationsRequest) */ {
 public:
  inline ListReservationsRequest() : ListReservationsRequest(nullptr) {}
  ~ListReservationsRequest() override;
  explicit PROTOBUF_CONSTEXPR ListReservationsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListReservationsRequest(const ListReservationsRequest& from);
  ListReservationsRequest(ListReservationsRequest&& from) noexcept
    : ListReservationsRequest() {
    *this = ::std::move(from);
  }

  inline ListReservationsRequest& operator=(const ListReservationsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListReservationsRequest& operator=(ListReservationsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListReservationsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListReservationsRequest* internal_default_instance() {
    return reinterpret_cast<const ListReservationsRequest*>(
               &_ListReservationsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ListReservationsRequest& a, ListReservationsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListReservationsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListReservationsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListReservationsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListReservationsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListReservationsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListReservationsRequest& from) {
    ListReservationsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListReservationsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.reservation.v1.ListReservationsRequest";
  }
  protected:
  explicit ListReservationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kPageSizeFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 3;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 2;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.reservation.v1.ListReservationsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
    int32_t page_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2freservation_2fv1_2freservation_2eproto;
};
// -------------------------------------------------------------------

class ListReservationsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.reservation.v1.ListReservationsResponse) */ {
 public:
  inline ListReservationsResponse() : ListReservationsResponse(nullptr) {}
  ~ListReservationsResponse() override;
  explicit PROTOBUF_CONSTEXPR ListReservationsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListReservationsResponse(const ListReservationsResponse& from);
  ListReservationsResponse(ListReservationsResponse&& from) noexcept
    : ListReservationsResponse() {
    *this = ::std::move(from);
  }

  inline ListReservationsResponse& operator=(const ListReservationsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListReservationsResponse& operator=(ListReservationsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListReservationsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListReservationsResponse* internal_default_instance() {
    return reinterpret_cast<const ListReservationsResponse*>(
               &_ListReservationsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ListReservationsResponse& a, ListReservationsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListReservationsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListReservationsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListReservationsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListReservationsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListReservationsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListReservationsResponse& from) {
    ListReservationsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListReservationsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.reservation.v1.ListReservationsResponse";
  }
  protected:
  explicit ListReservationsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReservationsFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .google.cloud.bigquery.reservation.v1.Reservation reservations = 1;
  int reservations_size() const;
  private:
  int _internal_reservations_size() const;
  public:
  void clear_reservations();
  ::google::cloud::bigquery::reservation::v1::Reservation* mutable_reservations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::reservation::v1::Reservation >*
      mutable_reservations();
  private:
  const ::google::cloud::bigquery::reservation::v1::Reservation& _internal_reservations(int index) const;
  ::google::cloud::bigquery::reservation::v1::Reservation* _internal_add_reservations();
  public:
  const ::google::cloud::bigquery::reservation::v1::Reservation& reservations(int index) const;
  ::google::cloud::bigquery::reservation::v1::Reservation* add_reservations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::reservation::v1::Reservation >&
      reservations() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.reservation.v1.ListReservationsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::reservation::v1::Reservation > reservations_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2freservation_2fv1_2freservation_2eproto;
};
// -------------------------------------------------------------------

class GetReservationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.reservation.v1.GetReservationRequest) */ {
 public:
  inline GetReservationRequest() : GetReservationRequest(nullptr) {}
  ~GetReservationRequest() override;
  explicit PROTOBUF_CONSTEXPR GetReservationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetReservationRequest(const GetReservationRequest& from);
  GetReservationRequest(GetReservationRequest&& from) noexcept
    : GetReservationRequest() {
    *this = ::std::move(from);
  }

  inline GetReservationRequest& operator=(const GetReservationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetReservationRequest& operator=(GetReservationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetReservationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetReservationRequest* internal_default_instance() {
    return reinterpret_cast<const GetReservationRequest*>(
               &_GetReservationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetReservationRequest& a, GetReservationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetReservationRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetReservationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetReservationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetReservationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetReservationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetReservationRequest& from) {
    GetReservationRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetReservationRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.reservation.v1.GetReservationRequest";
  }
  protected:
  explicit GetReservationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.reservation.v1.GetReservationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2freservation_2fv1_2freservation_2eproto;
};
// -------------------------------------------------------------------

class DeleteReservationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.reservation.v1.DeleteReservationRequest) */ {
 public:
  inline DeleteReservationRequest() : DeleteReservationRequest(nullptr) {}
  ~DeleteReservationRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteReservationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteReservationRequest(const DeleteReservationRequest& from);
  DeleteReservationRequest(DeleteReservationRequest&& from) noexcept
    : DeleteReservationRequest() {
    *this = ::std::move(from);
  }

  inline DeleteReservationRequest& operator=(const DeleteReservationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteReservationRequest& operator=(DeleteReservationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteReservationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteReservationRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteReservationRequest*>(
               &_DeleteReservationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DeleteReservationRequest& a, DeleteReservationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteReservationRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteReservationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteReservationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteReservationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteReservationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteReservationRequest& from) {
    DeleteReservationRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteReservationRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.reservation.v1.DeleteReservationRequest";
  }
  protected:
  explicit DeleteReservationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.reservation.v1.DeleteReservationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2freservation_2fv1_2freservation_2eproto;
};
// -------------------------------------------------------------------

class UpdateReservationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.reservation.v1.UpdateReservationRequest) */ {
 public:
  inline UpdateReservationRequest() : UpdateReservationRequest(nullptr) {}
  ~UpdateReservationRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateReservationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateReservationRequest(const UpdateReservationRequest& from);
  UpdateReservationRequest(UpdateReservationRequest&& from) noexcept
    : UpdateReservationRequest() {
    *this = ::std::move(from);
  }

  inline UpdateReservationRequest& operator=(const UpdateReservationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateReservationRequest& operator=(UpdateReservationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateReservationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateReservationRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateReservationRequest*>(
               &_UpdateReservationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UpdateReservationRequest& a, UpdateReservationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateReservationRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateReservationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateReservationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateReservationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateReservationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateReservationRequest& from) {
    UpdateReservationRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateReservationRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.reservation.v1.UpdateReservationRequest";
  }
  protected:
  explicit UpdateReservationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReservationFieldNumber = 1,
    kUpdateMaskFieldNumber = 2,
  };
  // .google.cloud.bigquery.reservation.v1.Reservation reservation = 1;
  bool has_reservation() const;
  private:
  bool _internal_has_reservation() const;
  public:
  void clear_reservation();
  const ::google::cloud::bigquery::reservation::v1::Reservation& reservation() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::reservation::v1::Reservation* release_reservation();
  ::google::cloud::bigquery::reservation::v1::Reservation* mutable_reservation();
  void set_allocated_reservation(::google::cloud::bigquery::reservation::v1::Reservation* reservation);
  private:
  const ::google::cloud::bigquery::reservation::v1::Reservation& _internal_reservation() const;
  ::google::cloud::bigquery::reservation::v1::Reservation* _internal_mutable_reservation();
  public:
  void unsafe_arena_set_allocated_reservation(
      ::google::cloud::bigquery::reservation::v1::Reservation* reservation);
  ::google::cloud::bigquery::reservation::v1::Reservation* unsafe_arena_release_reservation();

  // .google.protobuf.FieldMask update_mask = 2;
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.reservation.v1.UpdateReservationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::cloud::bigquery::reservation::v1::Reservation* reservation_;
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2freservation_2fv1_2freservation_2eproto;
};
// -------------------------------------------------------------------

class CreateCapacityCommitmentRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.reservation.v1.CreateCapacityCommitmentRequest) */ {
 public:
  inline CreateCapacityCommitmentRequest() : CreateCapacityCommitmentRequest(nullptr) {}
  ~CreateCapacityCommitmentRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateCapacityCommitmentRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateCapacityCommitmentRequest(const CreateCapacityCommitmentRequest& from);
  CreateCapacityCommitmentRequest(CreateCapacityCommitmentRequest&& from) noexcept
    : CreateCapacityCommitmentRequest() {
    *this = ::std::move(from);
  }

  inline CreateCapacityCommitmentRequest& operator=(const CreateCapacityCommitmentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateCapacityCommitmentRequest& operator=(CreateCapacityCommitmentRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateCapacityCommitmentRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateCapacityCommitmentRequest* internal_default_instance() {
    return reinterpret_cast<const CreateCapacityCommitmentRequest*>(
               &_CreateCapacityCommitmentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CreateCapacityCommitmentRequest& a, CreateCapacityCommitmentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateCapacityCommitmentRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateCapacityCommitmentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateCapacityCommitmentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateCapacityCommitmentRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateCapacityCommitmentRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateCapacityCommitmentRequest& from) {
    CreateCapacityCommitmentRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateCapacityCommitmentRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.reservation.v1.CreateCapacityCommitmentRequest";
  }
  protected:
  explicit CreateCapacityCommitmentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kCapacityCommitmentIdFieldNumber = 5,
    kCapacityCommitmentFieldNumber = 2,
    kEnforceSingleAdminProjectPerOrgFieldNumber = 4,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string capacity_commitment_id = 5;
  void clear_capacity_commitment_id();
  const std::string& capacity_commitment_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_capacity_commitment_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_capacity_commitment_id();
  PROTOBUF_NODISCARD std::string* release_capacity_commitment_id();
  void set_allocated_capacity_commitment_id(std::string* capacity_commitment_id);
  private:
  const std::string& _internal_capacity_commitment_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_capacity_commitment_id(const std::string& value);
  std::string* _internal_mutable_capacity_commitment_id();
  public:

  // .google.cloud.bigquery.reservation.v1.CapacityCommitment capacity_commitment = 2;
  bool has_capacity_commitment() const;
  private:
  bool _internal_has_capacity_commitment() const;
  public:
  void clear_capacity_commitment();
  const ::google::cloud::bigquery::reservation::v1::CapacityCommitment& capacity_commitment() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::reservation::v1::CapacityCommitment* release_capacity_commitment();
  ::google::cloud::bigquery::reservation::v1::CapacityCommitment* mutable_capacity_commitment();
  void set_allocated_capacity_commitment(::google::cloud::bigquery::reservation::v1::CapacityCommitment* capacity_commitment);
  private:
  const ::google::cloud::bigquery::reservation::v1::CapacityCommitment& _internal_capacity_commitment() const;
  ::google::cloud::bigquery::reservation::v1::CapacityCommitment* _internal_mutable_capacity_commitment();
  public:
  void unsafe_arena_set_allocated_capacity_commitment(
      ::google::cloud::bigquery::reservation::v1::CapacityCommitment* capacity_commitment);
  ::google::cloud::bigquery::reservation::v1::CapacityCommitment* unsafe_arena_release_capacity_commitment();

  // bool enforce_single_admin_project_per_org = 4;
  void clear_enforce_single_admin_project_per_org();
  bool enforce_single_admin_project_per_org() const;
  void set_enforce_single_admin_project_per_org(bool value);
  private:
  bool _internal_enforce_single_admin_project_per_org() const;
  void _internal_set_enforce_single_admin_project_per_org(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.reservation.v1.CreateCapacityCommitmentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr capacity_commitment_id_;
    ::google::cloud::bigquery::reservation::v1::CapacityCommitment* capacity_commitment_;
    bool enforce_single_admin_project_per_org_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2freservation_2fv1_2freservation_2eproto;
};
// -------------------------------------------------------------------

class ListCapacityCommitmentsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.reservation.v1.ListCapacityCommitmentsRequest) */ {
 public:
  inline ListCapacityCommitmentsRequest() : ListCapacityCommitmentsRequest(nullptr) {}
  ~ListCapacityCommitmentsRequest() override;
  explicit PROTOBUF_CONSTEXPR ListCapacityCommitmentsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListCapacityCommitmentsRequest(const ListCapacityCommitmentsRequest& from);
  ListCapacityCommitmentsRequest(ListCapacityCommitmentsRequest&& from) noexcept
    : ListCapacityCommitmentsRequest() {
    *this = ::std::move(from);
  }

  inline ListCapacityCommitmentsRequest& operator=(const ListCapacityCommitmentsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListCapacityCommitmentsRequest& operator=(ListCapacityCommitmentsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListCapacityCommitmentsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListCapacityCommitmentsRequest* internal_default_instance() {
    return reinterpret_cast<const ListCapacityCommitmentsRequest*>(
               &_ListCapacityCommitmentsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ListCapacityCommitmentsRequest& a, ListCapacityCommitmentsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListCapacityCommitmentsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListCapacityCommitmentsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListCapacityCommitmentsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListCapacityCommitmentsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListCapacityCommitmentsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListCapacityCommitmentsRequest& from) {
    ListCapacityCommitmentsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListCapacityCommitmentsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.reservation.v1.ListCapacityCommitmentsRequest";
  }
  protected:
  explicit ListCapacityCommitmentsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kPageSizeFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 3;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 2;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.reservation.v1.ListCapacityCommitmentsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
    int32_t page_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2freservation_2fv1_2freservation_2eproto;
};
// -------------------------------------------------------------------

class ListCapacityCommitmentsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.reservation.v1.ListCapacityCommitmentsResponse) */ {
 public:
  inline ListCapacityCommitmentsResponse() : ListCapacityCommitmentsResponse(nullptr) {}
  ~ListCapacityCommitmentsResponse() override;
  explicit PROTOBUF_CONSTEXPR ListCapacityCommitmentsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListCapacityCommitmentsResponse(const ListCapacityCommitmentsResponse& from);
  ListCapacityCommitmentsResponse(ListCapacityCommitmentsResponse&& from) noexcept
    : ListCapacityCommitmentsResponse() {
    *this = ::std::move(from);
  }

  inline ListCapacityCommitmentsResponse& operator=(const ListCapacityCommitmentsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListCapacityCommitmentsResponse& operator=(ListCapacityCommitmentsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListCapacityCommitmentsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListCapacityCommitmentsResponse* internal_default_instance() {
    return reinterpret_cast<const ListCapacityCommitmentsResponse*>(
               &_ListCapacityCommitmentsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ListCapacityCommitmentsResponse& a, ListCapacityCommitmentsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListCapacityCommitmentsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListCapacityCommitmentsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListCapacityCommitmentsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListCapacityCommitmentsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListCapacityCommitmentsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListCapacityCommitmentsResponse& from) {
    ListCapacityCommitmentsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListCapacityCommitmentsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.reservation.v1.ListCapacityCommitmentsResponse";
  }
  protected:
  explicit ListCapacityCommitmentsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCapacityCommitmentsFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .google.cloud.bigquery.reservation.v1.CapacityCommitment capacity_commitments = 1;
  int capacity_commitments_size() const;
  private:
  int _internal_capacity_commitments_size() const;
  public:
  void clear_capacity_commitments();
  ::google::cloud::bigquery::reservation::v1::CapacityCommitment* mutable_capacity_commitments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::reservation::v1::CapacityCommitment >*
      mutable_capacity_commitments();
  private:
  const ::google::cloud::bigquery::reservation::v1::CapacityCommitment& _internal_capacity_commitments(int index) const;
  ::google::cloud::bigquery::reservation::v1::CapacityCommitment* _internal_add_capacity_commitments();
  public:
  const ::google::cloud::bigquery::reservation::v1::CapacityCommitment& capacity_commitments(int index) const;
  ::google::cloud::bigquery::reservation::v1::CapacityCommitment* add_capacity_commitments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::reservation::v1::CapacityCommitment >&
      capacity_commitments() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.reservation.v1.ListCapacityCommitmentsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::reservation::v1::CapacityCommitment > capacity_commitments_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2freservation_2fv1_2freservation_2eproto;
};
// -------------------------------------------------------------------

class GetCapacityCommitmentRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.reservation.v1.GetCapacityCommitmentRequest) */ {
 public:
  inline GetCapacityCommitmentRequest() : GetCapacityCommitmentRequest(nullptr) {}
  ~GetCapacityCommitmentRequest() override;
  explicit PROTOBUF_CONSTEXPR GetCapacityCommitmentRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCapacityCommitmentRequest(const GetCapacityCommitmentRequest& from);
  GetCapacityCommitmentRequest(GetCapacityCommitmentRequest&& from) noexcept
    : GetCapacityCommitmentRequest() {
    *this = ::std::move(from);
  }

  inline GetCapacityCommitmentRequest& operator=(const GetCapacityCommitmentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCapacityCommitmentRequest& operator=(GetCapacityCommitmentRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCapacityCommitmentRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCapacityCommitmentRequest* internal_default_instance() {
    return reinterpret_cast<const GetCapacityCommitmentRequest*>(
               &_GetCapacityCommitmentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GetCapacityCommitmentRequest& a, GetCapacityCommitmentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCapacityCommitmentRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCapacityCommitmentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetCapacityCommitmentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetCapacityCommitmentRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetCapacityCommitmentRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetCapacityCommitmentRequest& from) {
    GetCapacityCommitmentRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCapacityCommitmentRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.reservation.v1.GetCapacityCommitmentRequest";
  }
  protected:
  explicit GetCapacityCommitmentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.reservation.v1.GetCapacityCommitmentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2freservation_2fv1_2freservation_2eproto;
};
// -------------------------------------------------------------------

class DeleteCapacityCommitmentRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.reservation.v1.DeleteCapacityCommitmentRequest) */ {
 public:
  inline DeleteCapacityCommitmentRequest() : DeleteCapacityCommitmentRequest(nullptr) {}
  ~DeleteCapacityCommitmentRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteCapacityCommitmentRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteCapacityCommitmentRequest(const DeleteCapacityCommitmentRequest& from);
  DeleteCapacityCommitmentRequest(DeleteCapacityCommitmentRequest&& from) noexcept
    : DeleteCapacityCommitmentRequest() {
    *this = ::std::move(from);
  }

  inline DeleteCapacityCommitmentRequest& operator=(const DeleteCapacityCommitmentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteCapacityCommitmentRequest& operator=(DeleteCapacityCommitmentRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteCapacityCommitmentRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteCapacityCommitmentRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteCapacityCommitmentRequest*>(
               &_DeleteCapacityCommitmentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(DeleteCapacityCommitmentRequest& a, DeleteCapacityCommitmentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteCapacityCommitmentRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteCapacityCommitmentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteCapacityCommitmentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteCapacityCommitmentRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteCapacityCommitmentRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteCapacityCommitmentRequest& from) {
    DeleteCapacityCommitmentRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteCapacityCommitmentRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.reservation.v1.DeleteCapacityCommitmentRequest";
  }
  protected:
  explicit DeleteCapacityCommitmentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kForceFieldNumber = 3,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bool force = 3;
  void clear_force();
  bool force() const;
  void set_force(bool value);
  private:
  bool _internal_force() const;
  void _internal_set_force(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.reservation.v1.DeleteCapacityCommitmentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    bool force_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2freservation_2fv1_2freservation_2eproto;
};
// -------------------------------------------------------------------

class UpdateCapacityCommitmentRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.reservation.v1.UpdateCapacityCommitmentRequest) */ {
 public:
  inline UpdateCapacityCommitmentRequest() : UpdateCapacityCommitmentRequest(nullptr) {}
  ~UpdateCapacityCommitmentRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateCapacityCommitmentRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateCapacityCommitmentRequest(const UpdateCapacityCommitmentRequest& from);
  UpdateCapacityCommitmentRequest(UpdateCapacityCommitmentRequest&& from) noexcept
    : UpdateCapacityCommitmentRequest() {
    *this = ::std::move(from);
  }

  inline UpdateCapacityCommitmentRequest& operator=(const UpdateCapacityCommitmentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateCapacityCommitmentRequest& operator=(UpdateCapacityCommitmentRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateCapacityCommitmentRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateCapacityCommitmentRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateCapacityCommitmentRequest*>(
               &_UpdateCapacityCommitmentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(UpdateCapacityCommitmentRequest& a, UpdateCapacityCommitmentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateCapacityCommitmentRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateCapacityCommitmentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateCapacityCommitmentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateCapacityCommitmentRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateCapacityCommitmentRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateCapacityCommitmentRequest& from) {
    UpdateCapacityCommitmentRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateCapacityCommitmentRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.reservation.v1.UpdateCapacityCommitmentRequest";
  }
  protected:
  explicit UpdateCapacityCommitmentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCapacityCommitmentFieldNumber = 1,
    kUpdateMaskFieldNumber = 2,
  };
  // .google.cloud.bigquery.reservation.v1.CapacityCommitment capacity_commitment = 1;
  bool has_capacity_commitment() const;
  private:
  bool _internal_has_capacity_commitment() const;
  public:
  void clear_capacity_commitment();
  const ::google::cloud::bigquery::reservation::v1::CapacityCommitment& capacity_commitment() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::reservation::v1::CapacityCommitment* release_capacity_commitment();
  ::google::cloud::bigquery::reservation::v1::CapacityCommitment* mutable_capacity_commitment();
  void set_allocated_capacity_commitment(::google::cloud::bigquery::reservation::v1::CapacityCommitment* capacity_commitment);
  private:
  const ::google::cloud::bigquery::reservation::v1::CapacityCommitment& _internal_capacity_commitment() const;
  ::google::cloud::bigquery::reservation::v1::CapacityCommitment* _internal_mutable_capacity_commitment();
  public:
  void unsafe_arena_set_allocated_capacity_commitment(
      ::google::cloud::bigquery::reservation::v1::CapacityCommitment* capacity_commitment);
  ::google::cloud::bigquery::reservation::v1::CapacityCommitment* unsafe_arena_release_capacity_commitment();

  // .google.protobuf.FieldMask update_mask = 2;
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.reservation.v1.UpdateCapacityCommitmentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::cloud::bigquery::reservation::v1::CapacityCommitment* capacity_commitment_;
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2freservation_2fv1_2freservation_2eproto;
};
// -------------------------------------------------------------------

class SplitCapacityCommitmentRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.reservation.v1.SplitCapacityCommitmentRequest) */ {
 public:
  inline SplitCapacityCommitmentRequest() : SplitCapacityCommitmentRequest(nullptr) {}
  ~SplitCapacityCommitmentRequest() override;
  explicit PROTOBUF_CONSTEXPR SplitCapacityCommitmentRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SplitCapacityCommitmentRequest(const SplitCapacityCommitmentRequest& from);
  SplitCapacityCommitmentRequest(SplitCapacityCommitmentRequest&& from) noexcept
    : SplitCapacityCommitmentRequest() {
    *this = ::std::move(from);
  }

  inline SplitCapacityCommitmentRequest& operator=(const SplitCapacityCommitmentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SplitCapacityCommitmentRequest& operator=(SplitCapacityCommitmentRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SplitCapacityCommitmentRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SplitCapacityCommitmentRequest* internal_default_instance() {
    return reinterpret_cast<const SplitCapacityCommitmentRequest*>(
               &_SplitCapacityCommitmentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SplitCapacityCommitmentRequest& a, SplitCapacityCommitmentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SplitCapacityCommitmentRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SplitCapacityCommitmentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SplitCapacityCommitmentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SplitCapacityCommitmentRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SplitCapacityCommitmentRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SplitCapacityCommitmentRequest& from) {
    SplitCapacityCommitmentRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SplitCapacityCommitmentRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.reservation.v1.SplitCapacityCommitmentRequest";
  }
  protected:
  explicit SplitCapacityCommitmentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kSlotCountFieldNumber = 2,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int64 slot_count = 2;
  void clear_slot_count();
  int64_t slot_count() const;
  void set_slot_count(int64_t value);
  private:
  int64_t _internal_slot_count() const;
  void _internal_set_slot_count(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.reservation.v1.SplitCapacityCommitmentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int64_t slot_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2freservation_2fv1_2freservation_2eproto;
};
// -------------------------------------------------------------------

class SplitCapacityCommitmentResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.reservation.v1.SplitCapacityCommitmentResponse) */ {
 public:
  inline SplitCapacityCommitmentResponse() : SplitCapacityCommitmentResponse(nullptr) {}
  ~SplitCapacityCommitmentResponse() override;
  explicit PROTOBUF_CONSTEXPR SplitCapacityCommitmentResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SplitCapacityCommitmentResponse(const SplitCapacityCommitmentResponse& from);
  SplitCapacityCommitmentResponse(SplitCapacityCommitmentResponse&& from) noexcept
    : SplitCapacityCommitmentResponse() {
    *this = ::std::move(from);
  }

  inline SplitCapacityCommitmentResponse& operator=(const SplitCapacityCommitmentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SplitCapacityCommitmentResponse& operator=(SplitCapacityCommitmentResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SplitCapacityCommitmentResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SplitCapacityCommitmentResponse* internal_default_instance() {
    return reinterpret_cast<const SplitCapacityCommitmentResponse*>(
               &_SplitCapacityCommitmentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SplitCapacityCommitmentResponse& a, SplitCapacityCommitmentResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SplitCapacityCommitmentResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SplitCapacityCommitmentResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SplitCapacityCommitmentResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SplitCapacityCommitmentResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SplitCapacityCommitmentResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SplitCapacityCommitmentResponse& from) {
    SplitCapacityCommitmentResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SplitCapacityCommitmentResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.reservation.v1.SplitCapacityCommitmentResponse";
  }
  protected:
  explicit SplitCapacityCommitmentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFirstFieldNumber = 1,
    kSecondFieldNumber = 2,
  };
  // .google.cloud.bigquery.reservation.v1.CapacityCommitment first = 1;
  bool has_first() const;
  private:
  bool _internal_has_first() const;
  public:
  void clear_first();
  const ::google::cloud::bigquery::reservation::v1::CapacityCommitment& first() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::reservation::v1::CapacityCommitment* release_first();
  ::google::cloud::bigquery::reservation::v1::CapacityCommitment* mutable_first();
  void set_allocated_first(::google::cloud::bigquery::reservation::v1::CapacityCommitment* first);
  private:
  const ::google::cloud::bigquery::reservation::v1::CapacityCommitment& _internal_first() const;
  ::google::cloud::bigquery::reservation::v1::CapacityCommitment* _internal_mutable_first();
  public:
  void unsafe_arena_set_allocated_first(
      ::google::cloud::bigquery::reservation::v1::CapacityCommitment* first);
  ::google::cloud::bigquery::reservation::v1::CapacityCommitment* unsafe_arena_release_first();

  // .google.cloud.bigquery.reservation.v1.CapacityCommitment second = 2;
  bool has_second() const;
  private:
  bool _internal_has_second() const;
  public:
  void clear_second();
  const ::google::cloud::bigquery::reservation::v1::CapacityCommitment& second() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::reservation::v1::CapacityCommitment* release_second();
  ::google::cloud::bigquery::reservation::v1::CapacityCommitment* mutable_second();
  void set_allocated_second(::google::cloud::bigquery::reservation::v1::CapacityCommitment* second);
  private:
  const ::google::cloud::bigquery::reservation::v1::CapacityCommitment& _internal_second() const;
  ::google::cloud::bigquery::reservation::v1::CapacityCommitment* _internal_mutable_second();
  public:
  void unsafe_arena_set_allocated_second(
      ::google::cloud::bigquery::reservation::v1::CapacityCommitment* second);
  ::google::cloud::bigquery::reservation::v1::CapacityCommitment* unsafe_arena_release_second();

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.reservation.v1.SplitCapacityCommitmentResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::cloud::bigquery::reservation::v1::CapacityCommitment* first_;
    ::google::cloud::bigquery::reservation::v1::CapacityCommitment* second_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2freservation_2fv1_2freservation_2eproto;
};
// -------------------------------------------------------------------

class MergeCapacityCommitmentsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.reservation.v1.MergeCapacityCommitmentsRequest) */ {
 public:
  inline MergeCapacityCommitmentsRequest() : MergeCapacityCommitmentsRequest(nullptr) {}
  ~MergeCapacityCommitmentsRequest() override;
  explicit PROTOBUF_CONSTEXPR MergeCapacityCommitmentsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MergeCapacityCommitmentsRequest(const MergeCapacityCommitmentsRequest& from);
  MergeCapacityCommitmentsRequest(MergeCapacityCommitmentsRequest&& from) noexcept
    : MergeCapacityCommitmentsRequest() {
    *this = ::std::move(from);
  }

  inline MergeCapacityCommitmentsRequest& operator=(const MergeCapacityCommitmentsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MergeCapacityCommitmentsRequest& operator=(MergeCapacityCommitmentsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MergeCapacityCommitmentsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MergeCapacityCommitmentsRequest* internal_default_instance() {
    return reinterpret_cast<const MergeCapacityCommitmentsRequest*>(
               &_MergeCapacityCommitmentsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(MergeCapacityCommitmentsRequest& a, MergeCapacityCommitmentsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MergeCapacityCommitmentsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MergeCapacityCommitmentsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MergeCapacityCommitmentsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MergeCapacityCommitmentsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MergeCapacityCommitmentsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MergeCapacityCommitmentsRequest& from) {
    MergeCapacityCommitmentsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MergeCapacityCommitmentsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.reservation.v1.MergeCapacityCommitmentsRequest";
  }
  protected:
  explicit MergeCapacityCommitmentsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCapacityCommitmentIdsFieldNumber = 2,
    kParentFieldNumber = 1,
  };
  // repeated string capacity_commitment_ids = 2;
  int capacity_commitment_ids_size() const;
  private:
  int _internal_capacity_commitment_ids_size() const;
  public:
  void clear_capacity_commitment_ids();
  const std::string& capacity_commitment_ids(int index) const;
  std::string* mutable_capacity_commitment_ids(int index);
  void set_capacity_commitment_ids(int index, const std::string& value);
  void set_capacity_commitment_ids(int index, std::string&& value);
  void set_capacity_commitment_ids(int index, const char* value);
  void set_capacity_commitment_ids(int index, const char* value, size_t size);
  std::string* add_capacity_commitment_ids();
  void add_capacity_commitment_ids(const std::string& value);
  void add_capacity_commitment_ids(std::string&& value);
  void add_capacity_commitment_ids(const char* value);
  void add_capacity_commitment_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& capacity_commitment_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_capacity_commitment_ids();
  private:
  const std::string& _internal_capacity_commitment_ids(int index) const;
  std::string* _internal_add_capacity_commitment_ids();
  public:

  // string parent = 1 [(.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.reservation.v1.MergeCapacityCommitmentsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> capacity_commitment_ids_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2freservation_2fv1_2freservation_2eproto;
};
// -------------------------------------------------------------------

class Assignment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.reservation.v1.Assignment) */ {
 public:
  inline Assignment() : Assignment(nullptr) {}
  ~Assignment() override;
  explicit PROTOBUF_CONSTEXPR Assignment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Assignment(const Assignment& from);
  Assignment(Assignment&& from) noexcept
    : Assignment() {
    *this = ::std::move(from);
  }

  inline Assignment& operator=(const Assignment& from) {
    CopyFrom(from);
    return *this;
  }
  inline Assignment& operator=(Assignment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Assignment& default_instance() {
    return *internal_default_instance();
  }
  static inline const Assignment* internal_default_instance() {
    return reinterpret_cast<const Assignment*>(
               &_Assignment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(Assignment& a, Assignment& b) {
    a.Swap(&b);
  }
  inline void Swap(Assignment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Assignment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Assignment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Assignment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Assignment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Assignment& from) {
    Assignment::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Assignment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.reservation.v1.Assignment";
  }
  protected:
  explicit Assignment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Assignment_JobType JobType;
  static constexpr JobType JOB_TYPE_UNSPECIFIED =
    Assignment_JobType_JOB_TYPE_UNSPECIFIED;
  static constexpr JobType PIPELINE =
    Assignment_JobType_PIPELINE;
  static constexpr JobType QUERY =
    Assignment_JobType_QUERY;
  static constexpr JobType ML_EXTERNAL =
    Assignment_JobType_ML_EXTERNAL;
  static inline bool JobType_IsValid(int value) {
    return Assignment_JobType_IsValid(value);
  }
  static constexpr JobType JobType_MIN =
    Assignment_JobType_JobType_MIN;
  static constexpr JobType JobType_MAX =
    Assignment_JobType_JobType_MAX;
  static constexpr int JobType_ARRAYSIZE =
    Assignment_JobType_JobType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  JobType_descriptor() {
    return Assignment_JobType_descriptor();
  }
  template<typename T>
  static inline const std::string& JobType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, JobType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function JobType_Name.");
    return Assignment_JobType_Name(enum_t_value);
  }
  static inline bool JobType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      JobType* value) {
    return Assignment_JobType_Parse(name, value);
  }

  typedef Assignment_State State;
  static constexpr State STATE_UNSPECIFIED =
    Assignment_State_STATE_UNSPECIFIED;
  static constexpr State PENDING =
    Assignment_State_PENDING;
  static constexpr State ACTIVE =
    Assignment_State_ACTIVE;
  static inline bool State_IsValid(int value) {
    return Assignment_State_IsValid(value);
  }
  static constexpr State State_MIN =
    Assignment_State_State_MIN;
  static constexpr State State_MAX =
    Assignment_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    Assignment_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return Assignment_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return Assignment_State_Name(enum_t_value);
  }
  static inline bool State_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      State* value) {
    return Assignment_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kAssigneeFieldNumber = 4,
    kJobTypeFieldNumber = 3,
    kStateFieldNumber = 6,
  };
  // string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string assignee = 4;
  void clear_assignee();
  const std::string& assignee() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_assignee(ArgT0&& arg0, ArgT... args);
  std::string* mutable_assignee();
  PROTOBUF_NODISCARD std::string* release_assignee();
  void set_allocated_assignee(std::string* assignee);
  private:
  const std::string& _internal_assignee() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_assignee(const std::string& value);
  std::string* _internal_mutable_assignee();
  public:

  // .google.cloud.bigquery.reservation.v1.Assignment.JobType job_type = 3;
  void clear_job_type();
  ::google::cloud::bigquery::reservation::v1::Assignment_JobType job_type() const;
  void set_job_type(::google::cloud::bigquery::reservation::v1::Assignment_JobType value);
  private:
  ::google::cloud::bigquery::reservation::v1::Assignment_JobType _internal_job_type() const;
  void _internal_set_job_type(::google::cloud::bigquery::reservation::v1::Assignment_JobType value);
  public:

  // .google.cloud.bigquery.reservation.v1.Assignment.State state = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_state();
  ::google::cloud::bigquery::reservation::v1::Assignment_State state() const;
  void set_state(::google::cloud::bigquery::reservation::v1::Assignment_State value);
  private:
  ::google::cloud::bigquery::reservation::v1::Assignment_State _internal_state() const;
  void _internal_set_state(::google::cloud::bigquery::reservation::v1::Assignment_State value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.reservation.v1.Assignment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr assignee_;
    int job_type_;
    int state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2freservation_2fv1_2freservation_2eproto;
};
// -------------------------------------------------------------------

class CreateAssignmentRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.reservation.v1.CreateAssignmentRequest) */ {
 public:
  inline CreateAssignmentRequest() : CreateAssignmentRequest(nullptr) {}
  ~CreateAssignmentRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateAssignmentRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateAssignmentRequest(const CreateAssignmentRequest& from);
  CreateAssignmentRequest(CreateAssignmentRequest&& from) noexcept
    : CreateAssignmentRequest() {
    *this = ::std::move(from);
  }

  inline CreateAssignmentRequest& operator=(const CreateAssignmentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateAssignmentRequest& operator=(CreateAssignmentRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateAssignmentRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateAssignmentRequest* internal_default_instance() {
    return reinterpret_cast<const CreateAssignmentRequest*>(
               &_CreateAssignmentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CreateAssignmentRequest& a, CreateAssignmentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateAssignmentRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateAssignmentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateAssignmentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateAssignmentRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateAssignmentRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateAssignmentRequest& from) {
    CreateAssignmentRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateAssignmentRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.reservation.v1.CreateAssignmentRequest";
  }
  protected:
  explicit CreateAssignmentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kAssignmentIdFieldNumber = 4,
    kAssignmentFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string assignment_id = 4;
  void clear_assignment_id();
  const std::string& assignment_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_assignment_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_assignment_id();
  PROTOBUF_NODISCARD std::string* release_assignment_id();
  void set_allocated_assignment_id(std::string* assignment_id);
  private:
  const std::string& _internal_assignment_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_assignment_id(const std::string& value);
  std::string* _internal_mutable_assignment_id();
  public:

  // .google.cloud.bigquery.reservation.v1.Assignment assignment = 2;
  bool has_assignment() const;
  private:
  bool _internal_has_assignment() const;
  public:
  void clear_assignment();
  const ::google::cloud::bigquery::reservation::v1::Assignment& assignment() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::reservation::v1::Assignment* release_assignment();
  ::google::cloud::bigquery::reservation::v1::Assignment* mutable_assignment();
  void set_allocated_assignment(::google::cloud::bigquery::reservation::v1::Assignment* assignment);
  private:
  const ::google::cloud::bigquery::reservation::v1::Assignment& _internal_assignment() const;
  ::google::cloud::bigquery::reservation::v1::Assignment* _internal_mutable_assignment();
  public:
  void unsafe_arena_set_allocated_assignment(
      ::google::cloud::bigquery::reservation::v1::Assignment* assignment);
  ::google::cloud::bigquery::reservation::v1::Assignment* unsafe_arena_release_assignment();

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.reservation.v1.CreateAssignmentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr assignment_id_;
    ::google::cloud::bigquery::reservation::v1::Assignment* assignment_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2freservation_2fv1_2freservation_2eproto;
};
// -------------------------------------------------------------------

class ListAssignmentsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.reservation.v1.ListAssignmentsRequest) */ {
 public:
  inline ListAssignmentsRequest() : ListAssignmentsRequest(nullptr) {}
  ~ListAssignmentsRequest() override;
  explicit PROTOBUF_CONSTEXPR ListAssignmentsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListAssignmentsRequest(const ListAssignmentsRequest& from);
  ListAssignmentsRequest(ListAssignmentsRequest&& from) noexcept
    : ListAssignmentsRequest() {
    *this = ::std::move(from);
  }

  inline ListAssignmentsRequest& operator=(const ListAssignmentsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListAssignmentsRequest& operator=(ListAssignmentsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListAssignmentsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListAssignmentsRequest* internal_default_instance() {
    return reinterpret_cast<const ListAssignmentsRequest*>(
               &_ListAssignmentsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(ListAssignmentsRequest& a, ListAssignmentsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListAssignmentsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListAssignmentsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListAssignmentsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListAssignmentsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListAssignmentsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListAssignmentsRequest& from) {
    ListAssignmentsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListAssignmentsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.reservation.v1.ListAssignmentsRequest";
  }
  protected:
  explicit ListAssignmentsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kPageSizeFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 3;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 2;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.reservation.v1.ListAssignmentsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
    int32_t page_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2freservation_2fv1_2freservation_2eproto;
};
// -------------------------------------------------------------------

class ListAssignmentsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.reservation.v1.ListAssignmentsResponse) */ {
 public:
  inline ListAssignmentsResponse() : ListAssignmentsResponse(nullptr) {}
  ~ListAssignmentsResponse() override;
  explicit PROTOBUF_CONSTEXPR ListAssignmentsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListAssignmentsResponse(const ListAssignmentsResponse& from);
  ListAssignmentsResponse(ListAssignmentsResponse&& from) noexcept
    : ListAssignmentsResponse() {
    *this = ::std::move(from);
  }

  inline ListAssignmentsResponse& operator=(const ListAssignmentsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListAssignmentsResponse& operator=(ListAssignmentsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListAssignmentsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListAssignmentsResponse* internal_default_instance() {
    return reinterpret_cast<const ListAssignmentsResponse*>(
               &_ListAssignmentsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(ListAssignmentsResponse& a, ListAssignmentsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListAssignmentsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListAssignmentsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListAssignmentsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListAssignmentsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListAssignmentsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListAssignmentsResponse& from) {
    ListAssignmentsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListAssignmentsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.reservation.v1.ListAssignmentsResponse";
  }
  protected:
  explicit ListAssignmentsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssignmentsFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .google.cloud.bigquery.reservation.v1.Assignment assignments = 1;
  int assignments_size() const;
  private:
  int _internal_assignments_size() const;
  public:
  void clear_assignments();
  ::google::cloud::bigquery::reservation::v1::Assignment* mutable_assignments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::reservation::v1::Assignment >*
      mutable_assignments();
  private:
  const ::google::cloud::bigquery::reservation::v1::Assignment& _internal_assignments(int index) const;
  ::google::cloud::bigquery::reservation::v1::Assignment* _internal_add_assignments();
  public:
  const ::google::cloud::bigquery::reservation::v1::Assignment& assignments(int index) const;
  ::google::cloud::bigquery::reservation::v1::Assignment* add_assignments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::reservation::v1::Assignment >&
      assignments() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.reservation.v1.ListAssignmentsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::reservation::v1::Assignment > assignments_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2freservation_2fv1_2freservation_2eproto;
};
// -------------------------------------------------------------------

class DeleteAssignmentRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.reservation.v1.DeleteAssignmentRequest) */ {
 public:
  inline DeleteAssignmentRequest() : DeleteAssignmentRequest(nullptr) {}
  ~DeleteAssignmentRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteAssignmentRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteAssignmentRequest(const DeleteAssignmentRequest& from);
  DeleteAssignmentRequest(DeleteAssignmentRequest&& from) noexcept
    : DeleteAssignmentRequest() {
    *this = ::std::move(from);
  }

  inline DeleteAssignmentRequest& operator=(const DeleteAssignmentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteAssignmentRequest& operator=(DeleteAssignmentRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteAssignmentRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteAssignmentRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteAssignmentRequest*>(
               &_DeleteAssignmentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(DeleteAssignmentRequest& a, DeleteAssignmentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteAssignmentRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteAssignmentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteAssignmentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteAssignmentRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteAssignmentRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteAssignmentRequest& from) {
    DeleteAssignmentRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteAssignmentRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.reservation.v1.DeleteAssignmentRequest";
  }
  protected:
  explicit DeleteAssignmentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.reservation.v1.DeleteAssignmentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2freservation_2fv1_2freservation_2eproto;
};
// -------------------------------------------------------------------

class SearchAssignmentsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.reservation.v1.SearchAssignmentsRequest) */ {
 public:
  inline SearchAssignmentsRequest() : SearchAssignmentsRequest(nullptr) {}
  ~SearchAssignmentsRequest() override;
  explicit PROTOBUF_CONSTEXPR SearchAssignmentsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchAssignmentsRequest(const SearchAssignmentsRequest& from);
  SearchAssignmentsRequest(SearchAssignmentsRequest&& from) noexcept
    : SearchAssignmentsRequest() {
    *this = ::std::move(from);
  }

  inline SearchAssignmentsRequest& operator=(const SearchAssignmentsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchAssignmentsRequest& operator=(SearchAssignmentsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchAssignmentsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchAssignmentsRequest* internal_default_instance() {
    return reinterpret_cast<const SearchAssignmentsRequest*>(
               &_SearchAssignmentsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(SearchAssignmentsRequest& a, SearchAssignmentsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchAssignmentsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchAssignmentsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchAssignmentsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchAssignmentsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchAssignmentsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SearchAssignmentsRequest& from) {
    SearchAssignmentsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchAssignmentsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.reservation.v1.SearchAssignmentsRequest";
  }
  protected:
  explicit SearchAssignmentsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kQueryFieldNumber = 2,
    kPageTokenFieldNumber = 4,
    kPageSizeFieldNumber = 3,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string query = 2;
  void clear_query();
  const std::string& query() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_query(ArgT0&& arg0, ArgT... args);
  std::string* mutable_query();
  PROTOBUF_NODISCARD std::string* release_query();
  void set_allocated_query(std::string* query);
  private:
  const std::string& _internal_query() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_query(const std::string& value);
  std::string* _internal_mutable_query();
  public:

  // string page_token = 4;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 3;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.reservation.v1.SearchAssignmentsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
    int32_t page_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2freservation_2fv1_2freservation_2eproto;
};
// -------------------------------------------------------------------

class SearchAllAssignmentsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.reservation.v1.SearchAllAssignmentsRequest) */ {
 public:
  inline SearchAllAssignmentsRequest() : SearchAllAssignmentsRequest(nullptr) {}
  ~SearchAllAssignmentsRequest() override;
  explicit PROTOBUF_CONSTEXPR SearchAllAssignmentsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchAllAssignmentsRequest(const SearchAllAssignmentsRequest& from);
  SearchAllAssignmentsRequest(SearchAllAssignmentsRequest&& from) noexcept
    : SearchAllAssignmentsRequest() {
    *this = ::std::move(from);
  }

  inline SearchAllAssignmentsRequest& operator=(const SearchAllAssignmentsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchAllAssignmentsRequest& operator=(SearchAllAssignmentsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchAllAssignmentsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchAllAssignmentsRequest* internal_default_instance() {
    return reinterpret_cast<const SearchAllAssignmentsRequest*>(
               &_SearchAllAssignmentsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(SearchAllAssignmentsRequest& a, SearchAllAssignmentsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchAllAssignmentsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchAllAssignmentsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchAllAssignmentsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchAllAssignmentsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchAllAssignmentsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SearchAllAssignmentsRequest& from) {
    SearchAllAssignmentsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchAllAssignmentsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.reservation.v1.SearchAllAssignmentsRequest";
  }
  protected:
  explicit SearchAllAssignmentsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kQueryFieldNumber = 2,
    kPageTokenFieldNumber = 4,
    kPageSizeFieldNumber = 3,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string query = 2;
  void clear_query();
  const std::string& query() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_query(ArgT0&& arg0, ArgT... args);
  std::string* mutable_query();
  PROTOBUF_NODISCARD std::string* release_query();
  void set_allocated_query(std::string* query);
  private:
  const std::string& _internal_query() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_query(const std::string& value);
  std::string* _internal_mutable_query();
  public:

  // string page_token = 4;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 3;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.reservation.v1.SearchAllAssignmentsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
    int32_t page_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2freservation_2fv1_2freservation_2eproto;
};
// -------------------------------------------------------------------

class SearchAssignmentsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.reservation.v1.SearchAssignmentsResponse) */ {
 public:
  inline SearchAssignmentsResponse() : SearchAssignmentsResponse(nullptr) {}
  ~SearchAssignmentsResponse() override;
  explicit PROTOBUF_CONSTEXPR SearchAssignmentsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchAssignmentsResponse(const SearchAssignmentsResponse& from);
  SearchAssignmentsResponse(SearchAssignmentsResponse&& from) noexcept
    : SearchAssignmentsResponse() {
    *this = ::std::move(from);
  }

  inline SearchAssignmentsResponse& operator=(const SearchAssignmentsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchAssignmentsResponse& operator=(SearchAssignmentsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchAssignmentsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchAssignmentsResponse* internal_default_instance() {
    return reinterpret_cast<const SearchAssignmentsResponse*>(
               &_SearchAssignmentsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(SearchAssignmentsResponse& a, SearchAssignmentsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchAssignmentsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchAssignmentsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchAssignmentsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchAssignmentsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchAssignmentsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SearchAssignmentsResponse& from) {
    SearchAssignmentsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchAssignmentsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.reservation.v1.SearchAssignmentsResponse";
  }
  protected:
  explicit SearchAssignmentsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssignmentsFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .google.cloud.bigquery.reservation.v1.Assignment assignments = 1;
  int assignments_size() const;
  private:
  int _internal_assignments_size() const;
  public:
  void clear_assignments();
  ::google::cloud::bigquery::reservation::v1::Assignment* mutable_assignments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::reservation::v1::Assignment >*
      mutable_assignments();
  private:
  const ::google::cloud::bigquery::reservation::v1::Assignment& _internal_assignments(int index) const;
  ::google::cloud::bigquery::reservation::v1::Assignment* _internal_add_assignments();
  public:
  const ::google::cloud::bigquery::reservation::v1::Assignment& assignments(int index) const;
  ::google::cloud::bigquery::reservation::v1::Assignment* add_assignments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::reservation::v1::Assignment >&
      assignments() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.reservation.v1.SearchAssignmentsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::reservation::v1::Assignment > assignments_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2freservation_2fv1_2freservation_2eproto;
};
// -------------------------------------------------------------------

class SearchAllAssignmentsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.reservation.v1.SearchAllAssignmentsResponse) */ {
 public:
  inline SearchAllAssignmentsResponse() : SearchAllAssignmentsResponse(nullptr) {}
  ~SearchAllAssignmentsResponse() override;
  explicit PROTOBUF_CONSTEXPR SearchAllAssignmentsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchAllAssignmentsResponse(const SearchAllAssignmentsResponse& from);
  SearchAllAssignmentsResponse(SearchAllAssignmentsResponse&& from) noexcept
    : SearchAllAssignmentsResponse() {
    *this = ::std::move(from);
  }

  inline SearchAllAssignmentsResponse& operator=(const SearchAllAssignmentsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchAllAssignmentsResponse& operator=(SearchAllAssignmentsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchAllAssignmentsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchAllAssignmentsResponse* internal_default_instance() {
    return reinterpret_cast<const SearchAllAssignmentsResponse*>(
               &_SearchAllAssignmentsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(SearchAllAssignmentsResponse& a, SearchAllAssignmentsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchAllAssignmentsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchAllAssignmentsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchAllAssignmentsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchAllAssignmentsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchAllAssignmentsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SearchAllAssignmentsResponse& from) {
    SearchAllAssignmentsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchAllAssignmentsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.reservation.v1.SearchAllAssignmentsResponse";
  }
  protected:
  explicit SearchAllAssignmentsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssignmentsFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .google.cloud.bigquery.reservation.v1.Assignment assignments = 1;
  int assignments_size() const;
  private:
  int _internal_assignments_size() const;
  public:
  void clear_assignments();
  ::google::cloud::bigquery::reservation::v1::Assignment* mutable_assignments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::reservation::v1::Assignment >*
      mutable_assignments();
  private:
  const ::google::cloud::bigquery::reservation::v1::Assignment& _internal_assignments(int index) const;
  ::google::cloud::bigquery::reservation::v1::Assignment* _internal_add_assignments();
  public:
  const ::google::cloud::bigquery::reservation::v1::Assignment& assignments(int index) const;
  ::google::cloud::bigquery::reservation::v1::Assignment* add_assignments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::reservation::v1::Assignment >&
      assignments() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.reservation.v1.SearchAllAssignmentsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::reservation::v1::Assignment > assignments_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2freservation_2fv1_2freservation_2eproto;
};
// -------------------------------------------------------------------

class MoveAssignmentRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.reservation.v1.MoveAssignmentRequest) */ {
 public:
  inline MoveAssignmentRequest() : MoveAssignmentRequest(nullptr) {}
  ~MoveAssignmentRequest() override;
  explicit PROTOBUF_CONSTEXPR MoveAssignmentRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MoveAssignmentRequest(const MoveAssignmentRequest& from);
  MoveAssignmentRequest(MoveAssignmentRequest&& from) noexcept
    : MoveAssignmentRequest() {
    *this = ::std::move(from);
  }

  inline MoveAssignmentRequest& operator=(const MoveAssignmentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveAssignmentRequest& operator=(MoveAssignmentRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MoveAssignmentRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MoveAssignmentRequest* internal_default_instance() {
    return reinterpret_cast<const MoveAssignmentRequest*>(
               &_MoveAssignmentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(MoveAssignmentRequest& a, MoveAssignmentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveAssignmentRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveAssignmentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MoveAssignmentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MoveAssignmentRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MoveAssignmentRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MoveAssignmentRequest& from) {
    MoveAssignmentRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveAssignmentRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.reservation.v1.MoveAssignmentRequest";
  }
  protected:
  explicit MoveAssignmentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDestinationIdFieldNumber = 3,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string destination_id = 3 [(.google.api.resource_reference) = {
  void clear_destination_id();
  const std::string& destination_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_destination_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_destination_id();
  PROTOBUF_NODISCARD std::string* release_destination_id();
  void set_allocated_destination_id(std::string* destination_id);
  private:
  const std::string& _internal_destination_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_destination_id(const std::string& value);
  std::string* _internal_mutable_destination_id();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.reservation.v1.MoveAssignmentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr destination_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2freservation_2fv1_2freservation_2eproto;
};
// -------------------------------------------------------------------

class UpdateAssignmentRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.reservation.v1.UpdateAssignmentRequest) */ {
 public:
  inline UpdateAssignmentRequest() : UpdateAssignmentRequest(nullptr) {}
  ~UpdateAssignmentRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateAssignmentRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateAssignmentRequest(const UpdateAssignmentRequest& from);
  UpdateAssignmentRequest(UpdateAssignmentRequest&& from) noexcept
    : UpdateAssignmentRequest() {
    *this = ::std::move(from);
  }

  inline UpdateAssignmentRequest& operator=(const UpdateAssignmentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateAssignmentRequest& operator=(UpdateAssignmentRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateAssignmentRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateAssignmentRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateAssignmentRequest*>(
               &_UpdateAssignmentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(UpdateAssignmentRequest& a, UpdateAssignmentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateAssignmentRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateAssignmentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateAssignmentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateAssignmentRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateAssignmentRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateAssignmentRequest& from) {
    UpdateAssignmentRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateAssignmentRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.reservation.v1.UpdateAssignmentRequest";
  }
  protected:
  explicit UpdateAssignmentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssignmentFieldNumber = 1,
    kUpdateMaskFieldNumber = 2,
  };
  // .google.cloud.bigquery.reservation.v1.Assignment assignment = 1;
  bool has_assignment() const;
  private:
  bool _internal_has_assignment() const;
  public:
  void clear_assignment();
  const ::google::cloud::bigquery::reservation::v1::Assignment& assignment() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::reservation::v1::Assignment* release_assignment();
  ::google::cloud::bigquery::reservation::v1::Assignment* mutable_assignment();
  void set_allocated_assignment(::google::cloud::bigquery::reservation::v1::Assignment* assignment);
  private:
  const ::google::cloud::bigquery::reservation::v1::Assignment& _internal_assignment() const;
  ::google::cloud::bigquery::reservation::v1::Assignment* _internal_mutable_assignment();
  public:
  void unsafe_arena_set_allocated_assignment(
      ::google::cloud::bigquery::reservation::v1::Assignment* assignment);
  ::google::cloud::bigquery::reservation::v1::Assignment* unsafe_arena_release_assignment();

  // .google.protobuf.FieldMask update_mask = 2;
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.reservation.v1.UpdateAssignmentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::cloud::bigquery::reservation::v1::Assignment* assignment_;
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2freservation_2fv1_2freservation_2eproto;
};
// -------------------------------------------------------------------

class TableReference final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.reservation.v1.TableReference) */ {
 public:
  inline TableReference() : TableReference(nullptr) {}
  ~TableReference() override;
  explicit PROTOBUF_CONSTEXPR TableReference(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TableReference(const TableReference& from);
  TableReference(TableReference&& from) noexcept
    : TableReference() {
    *this = ::std::move(from);
  }

  inline TableReference& operator=(const TableReference& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableReference& operator=(TableReference&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TableReference& default_instance() {
    return *internal_default_instance();
  }
  static inline const TableReference* internal_default_instance() {
    return reinterpret_cast<const TableReference*>(
               &_TableReference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(TableReference& a, TableReference& b) {
    a.Swap(&b);
  }
  inline void Swap(TableReference* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TableReference* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TableReference* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TableReference>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TableReference& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TableReference& from) {
    TableReference::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableReference* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.reservation.v1.TableReference";
  }
  protected:
  explicit TableReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjectIdFieldNumber = 1,
    kDatasetIdFieldNumber = 2,
    kTableIdFieldNumber = 3,
  };
  // string project_id = 1;
  void clear_project_id();
  const std::string& project_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_project_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_project_id();
  PROTOBUF_NODISCARD std::string* release_project_id();
  void set_allocated_project_id(std::string* project_id);
  private:
  const std::string& _internal_project_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_project_id(const std::string& value);
  std::string* _internal_mutable_project_id();
  public:

  // string dataset_id = 2;
  void clear_dataset_id();
  const std::string& dataset_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dataset_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dataset_id();
  PROTOBUF_NODISCARD std::string* release_dataset_id();
  void set_allocated_dataset_id(std::string* dataset_id);
  private:
  const std::string& _internal_dataset_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dataset_id(const std::string& value);
  std::string* _internal_mutable_dataset_id();
  public:

  // string table_id = 3;
  void clear_table_id();
  const std::string& table_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_table_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_table_id();
  PROTOBUF_NODISCARD std::string* release_table_id();
  void set_allocated_table_id(std::string* table_id);
  private:
  const std::string& _internal_table_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_table_id(const std::string& value);
  std::string* _internal_mutable_table_id();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.reservation.v1.TableReference)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr project_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dataset_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2freservation_2fv1_2freservation_2eproto;
};
// -------------------------------------------------------------------

class BiReservation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.reservation.v1.BiReservation) */ {
 public:
  inline BiReservation() : BiReservation(nullptr) {}
  ~BiReservation() override;
  explicit PROTOBUF_CONSTEXPR BiReservation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BiReservation(const BiReservation& from);
  BiReservation(BiReservation&& from) noexcept
    : BiReservation() {
    *this = ::std::move(from);
  }

  inline BiReservation& operator=(const BiReservation& from) {
    CopyFrom(from);
    return *this;
  }
  inline BiReservation& operator=(BiReservation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BiReservation& default_instance() {
    return *internal_default_instance();
  }
  static inline const BiReservation* internal_default_instance() {
    return reinterpret_cast<const BiReservation*>(
               &_BiReservation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(BiReservation& a, BiReservation& b) {
    a.Swap(&b);
  }
  inline void Swap(BiReservation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BiReservation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BiReservation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BiReservation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BiReservation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BiReservation& from) {
    BiReservation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BiReservation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.reservation.v1.BiReservation";
  }
  protected:
  explicit BiReservation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPreferredTablesFieldNumber = 5,
    kNameFieldNumber = 1,
    kUpdateTimeFieldNumber = 3,
    kSizeFieldNumber = 4,
  };
  // repeated .google.cloud.bigquery.reservation.v1.TableReference preferred_tables = 5;
  int preferred_tables_size() const;
  private:
  int _internal_preferred_tables_size() const;
  public:
  void clear_preferred_tables();
  ::google::cloud::bigquery::reservation::v1::TableReference* mutable_preferred_tables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::reservation::v1::TableReference >*
      mutable_preferred_tables();
  private:
  const ::google::cloud::bigquery::reservation::v1::TableReference& _internal_preferred_tables(int index) const;
  ::google::cloud::bigquery::reservation::v1::TableReference* _internal_add_preferred_tables();
  public:
  const ::google::cloud::bigquery::reservation::v1::TableReference& preferred_tables(int index) const;
  ::google::cloud::bigquery::reservation::v1::TableReference* add_preferred_tables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::reservation::v1::TableReference >&
      preferred_tables() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.protobuf.Timestamp update_time = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_update_time() const;
  private:
  bool _internal_has_update_time() const;
  public:
  void clear_update_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& update_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_update_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_update_time();
  void set_allocated_update_time(::PROTOBUF_NAMESPACE_ID::Timestamp* update_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_update_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_update_time();
  public:
  void unsafe_arena_set_allocated_update_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* update_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_update_time();

  // int64 size = 4;
  void clear_size();
  int64_t size() const;
  void set_size(int64_t value);
  private:
  int64_t _internal_size() const;
  void _internal_set_size(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.reservation.v1.BiReservation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::reservation::v1::TableReference > preferred_tables_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* update_time_;
    int64_t size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2freservation_2fv1_2freservation_2eproto;
};
// -------------------------------------------------------------------

class GetBiReservationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.reservation.v1.GetBiReservationRequest) */ {
 public:
  inline GetBiReservationRequest() : GetBiReservationRequest(nullptr) {}
  ~GetBiReservationRequest() override;
  explicit PROTOBUF_CONSTEXPR GetBiReservationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetBiReservationRequest(const GetBiReservationRequest& from);
  GetBiReservationRequest(GetBiReservationRequest&& from) noexcept
    : GetBiReservationRequest() {
    *this = ::std::move(from);
  }

  inline GetBiReservationRequest& operator=(const GetBiReservationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBiReservationRequest& operator=(GetBiReservationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBiReservationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBiReservationRequest* internal_default_instance() {
    return reinterpret_cast<const GetBiReservationRequest*>(
               &_GetBiReservationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(GetBiReservationRequest& a, GetBiReservationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBiReservationRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBiReservationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetBiReservationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetBiReservationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetBiReservationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetBiReservationRequest& from) {
    GetBiReservationRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBiReservationRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.reservation.v1.GetBiReservationRequest";
  }
  protected:
  explicit GetBiReservationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.reservation.v1.GetBiReservationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2freservation_2fv1_2freservation_2eproto;
};
// -------------------------------------------------------------------

class UpdateBiReservationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.reservation.v1.UpdateBiReservationRequest) */ {
 public:
  inline UpdateBiReservationRequest() : UpdateBiReservationRequest(nullptr) {}
  ~UpdateBiReservationRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateBiReservationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateBiReservationRequest(const UpdateBiReservationRequest& from);
  UpdateBiReservationRequest(UpdateBiReservationRequest&& from) noexcept
    : UpdateBiReservationRequest() {
    *this = ::std::move(from);
  }

  inline UpdateBiReservationRequest& operator=(const UpdateBiReservationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateBiReservationRequest& operator=(UpdateBiReservationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateBiReservationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateBiReservationRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateBiReservationRequest*>(
               &_UpdateBiReservationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(UpdateBiReservationRequest& a, UpdateBiReservationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateBiReservationRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateBiReservationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateBiReservationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateBiReservationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateBiReservationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateBiReservationRequest& from) {
    UpdateBiReservationRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateBiReservationRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.reservation.v1.UpdateBiReservationRequest";
  }
  protected:
  explicit UpdateBiReservationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBiReservationFieldNumber = 1,
    kUpdateMaskFieldNumber = 2,
  };
  // .google.cloud.bigquery.reservation.v1.BiReservation bi_reservation = 1;
  bool has_bi_reservation() const;
  private:
  bool _internal_has_bi_reservation() const;
  public:
  void clear_bi_reservation();
  const ::google::cloud::bigquery::reservation::v1::BiReservation& bi_reservation() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::reservation::v1::BiReservation* release_bi_reservation();
  ::google::cloud::bigquery::reservation::v1::BiReservation* mutable_bi_reservation();
  void set_allocated_bi_reservation(::google::cloud::bigquery::reservation::v1::BiReservation* bi_reservation);
  private:
  const ::google::cloud::bigquery::reservation::v1::BiReservation& _internal_bi_reservation() const;
  ::google::cloud::bigquery::reservation::v1::BiReservation* _internal_mutable_bi_reservation();
  public:
  void unsafe_arena_set_allocated_bi_reservation(
      ::google::cloud::bigquery::reservation::v1::BiReservation* bi_reservation);
  ::google::cloud::bigquery::reservation::v1::BiReservation* unsafe_arena_release_bi_reservation();

  // .google.protobuf.FieldMask update_mask = 2;
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.reservation.v1.UpdateBiReservationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::cloud::bigquery::reservation::v1::BiReservation* bi_reservation_;
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2freservation_2fv1_2freservation_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Reservation

// string name = 1;
inline void Reservation::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Reservation::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.Reservation.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Reservation::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.reservation.v1.Reservation.name)
}
inline std::string* Reservation::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.reservation.v1.Reservation.name)
  return _s;
}
inline const std::string& Reservation::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Reservation::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Reservation::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Reservation::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.reservation.v1.Reservation.name)
  return _impl_.name_.Release();
}
inline void Reservation::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.reservation.v1.Reservation.name)
}

// int64 slot_capacity = 2;
inline void Reservation::clear_slot_capacity() {
  _impl_.slot_capacity_ = int64_t{0};
}
inline int64_t Reservation::_internal_slot_capacity() const {
  return _impl_.slot_capacity_;
}
inline int64_t Reservation::slot_capacity() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.Reservation.slot_capacity)
  return _internal_slot_capacity();
}
inline void Reservation::_internal_set_slot_capacity(int64_t value) {
  
  _impl_.slot_capacity_ = value;
}
inline void Reservation::set_slot_capacity(int64_t value) {
  _internal_set_slot_capacity(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.reservation.v1.Reservation.slot_capacity)
}

// bool ignore_idle_slots = 4;
inline void Reservation::clear_ignore_idle_slots() {
  _impl_.ignore_idle_slots_ = false;
}
inline bool Reservation::_internal_ignore_idle_slots() const {
  return _impl_.ignore_idle_slots_;
}
inline bool Reservation::ignore_idle_slots() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.Reservation.ignore_idle_slots)
  return _internal_ignore_idle_slots();
}
inline void Reservation::_internal_set_ignore_idle_slots(bool value) {
  
  _impl_.ignore_idle_slots_ = value;
}
inline void Reservation::set_ignore_idle_slots(bool value) {
  _internal_set_ignore_idle_slots(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.reservation.v1.Reservation.ignore_idle_slots)
}

// int64 concurrency = 16;
inline void Reservation::clear_concurrency() {
  _impl_.concurrency_ = int64_t{0};
}
inline int64_t Reservation::_internal_concurrency() const {
  return _impl_.concurrency_;
}
inline int64_t Reservation::concurrency() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.Reservation.concurrency)
  return _internal_concurrency();
}
inline void Reservation::_internal_set_concurrency(int64_t value) {
  
  _impl_.concurrency_ = value;
}
inline void Reservation::set_concurrency(int64_t value) {
  _internal_set_concurrency(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.reservation.v1.Reservation.concurrency)
}

// .google.protobuf.Timestamp creation_time = 8 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool Reservation::_internal_has_creation_time() const {
  return this != internal_default_instance() && _impl_.creation_time_ != nullptr;
}
inline bool Reservation::has_creation_time() const {
  return _internal_has_creation_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Reservation::_internal_creation_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.creation_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Reservation::creation_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.Reservation.creation_time)
  return _internal_creation_time();
}
inline void Reservation::unsafe_arena_set_allocated_creation_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* creation_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.creation_time_);
  }
  _impl_.creation_time_ = creation_time;
  if (creation_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.reservation.v1.Reservation.creation_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Reservation::release_creation_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.creation_time_;
  _impl_.creation_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Reservation::unsafe_arena_release_creation_time() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.reservation.v1.Reservation.creation_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.creation_time_;
  _impl_.creation_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Reservation::_internal_mutable_creation_time() {
  
  if (_impl_.creation_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.creation_time_ = p;
  }
  return _impl_.creation_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Reservation::mutable_creation_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_creation_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.reservation.v1.Reservation.creation_time)
  return _msg;
}
inline void Reservation::set_allocated_creation_time(::PROTOBUF_NAMESPACE_ID::Timestamp* creation_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.creation_time_);
  }
  if (creation_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(creation_time));
    if (message_arena != submessage_arena) {
      creation_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, creation_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.creation_time_ = creation_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.reservation.v1.Reservation.creation_time)
}

// .google.protobuf.Timestamp update_time = 9 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool Reservation::_internal_has_update_time() const {
  return this != internal_default_instance() && _impl_.update_time_ != nullptr;
}
inline bool Reservation::has_update_time() const {
  return _internal_has_update_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Reservation::_internal_update_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.update_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Reservation::update_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.Reservation.update_time)
  return _internal_update_time();
}
inline void Reservation::unsafe_arena_set_allocated_update_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* update_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_time_);
  }
  _impl_.update_time_ = update_time;
  if (update_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.reservation.v1.Reservation.update_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Reservation::release_update_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.update_time_;
  _impl_.update_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Reservation::unsafe_arena_release_update_time() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.reservation.v1.Reservation.update_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.update_time_;
  _impl_.update_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Reservation::_internal_mutable_update_time() {
  
  if (_impl_.update_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.update_time_ = p;
  }
  return _impl_.update_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Reservation::mutable_update_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_update_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.reservation.v1.Reservation.update_time)
  return _msg;
}
inline void Reservation::set_allocated_update_time(::PROTOBUF_NAMESPACE_ID::Timestamp* update_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_time_);
  }
  if (update_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_time));
    if (message_arena != submessage_arena) {
      update_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.update_time_ = update_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.reservation.v1.Reservation.update_time)
}

// bool multi_region_auxiliary = 14;
inline void Reservation::clear_multi_region_auxiliary() {
  _impl_.multi_region_auxiliary_ = false;
}
inline bool Reservation::_internal_multi_region_auxiliary() const {
  return _impl_.multi_region_auxiliary_;
}
inline bool Reservation::multi_region_auxiliary() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.Reservation.multi_region_auxiliary)
  return _internal_multi_region_auxiliary();
}
inline void Reservation::_internal_set_multi_region_auxiliary(bool value) {
  
  _impl_.multi_region_auxiliary_ = value;
}
inline void Reservation::set_multi_region_auxiliary(bool value) {
  _internal_set_multi_region_auxiliary(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.reservation.v1.Reservation.multi_region_auxiliary)
}

// -------------------------------------------------------------------

// CapacityCommitment

// string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void CapacityCommitment::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& CapacityCommitment::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.CapacityCommitment.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CapacityCommitment::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.reservation.v1.CapacityCommitment.name)
}
inline std::string* CapacityCommitment::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.reservation.v1.CapacityCommitment.name)
  return _s;
}
inline const std::string& CapacityCommitment::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CapacityCommitment::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CapacityCommitment::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CapacityCommitment::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.reservation.v1.CapacityCommitment.name)
  return _impl_.name_.Release();
}
inline void CapacityCommitment::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.reservation.v1.CapacityCommitment.name)
}

// int64 slot_count = 2;
inline void CapacityCommitment::clear_slot_count() {
  _impl_.slot_count_ = int64_t{0};
}
inline int64_t CapacityCommitment::_internal_slot_count() const {
  return _impl_.slot_count_;
}
inline int64_t CapacityCommitment::slot_count() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.CapacityCommitment.slot_count)
  return _internal_slot_count();
}
inline void CapacityCommitment::_internal_set_slot_count(int64_t value) {
  
  _impl_.slot_count_ = value;
}
inline void CapacityCommitment::set_slot_count(int64_t value) {
  _internal_set_slot_count(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.reservation.v1.CapacityCommitment.slot_count)
}

// .google.cloud.bigquery.reservation.v1.CapacityCommitment.CommitmentPlan plan = 3;
inline void CapacityCommitment::clear_plan() {
  _impl_.plan_ = 0;
}
inline ::google::cloud::bigquery::reservation::v1::CapacityCommitment_CommitmentPlan CapacityCommitment::_internal_plan() const {
  return static_cast< ::google::cloud::bigquery::reservation::v1::CapacityCommitment_CommitmentPlan >(_impl_.plan_);
}
inline ::google::cloud::bigquery::reservation::v1::CapacityCommitment_CommitmentPlan CapacityCommitment::plan() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.CapacityCommitment.plan)
  return _internal_plan();
}
inline void CapacityCommitment::_internal_set_plan(::google::cloud::bigquery::reservation::v1::CapacityCommitment_CommitmentPlan value) {
  
  _impl_.plan_ = value;
}
inline void CapacityCommitment::set_plan(::google::cloud::bigquery::reservation::v1::CapacityCommitment_CommitmentPlan value) {
  _internal_set_plan(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.reservation.v1.CapacityCommitment.plan)
}

// .google.cloud.bigquery.reservation.v1.CapacityCommitment.State state = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void CapacityCommitment::clear_state() {
  _impl_.state_ = 0;
}
inline ::google::cloud::bigquery::reservation::v1::CapacityCommitment_State CapacityCommitment::_internal_state() const {
  return static_cast< ::google::cloud::bigquery::reservation::v1::CapacityCommitment_State >(_impl_.state_);
}
inline ::google::cloud::bigquery::reservation::v1::CapacityCommitment_State CapacityCommitment::state() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.CapacityCommitment.state)
  return _internal_state();
}
inline void CapacityCommitment::_internal_set_state(::google::cloud::bigquery::reservation::v1::CapacityCommitment_State value) {
  
  _impl_.state_ = value;
}
inline void CapacityCommitment::set_state(::google::cloud::bigquery::reservation::v1::CapacityCommitment_State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.reservation.v1.CapacityCommitment.state)
}

// .google.protobuf.Timestamp commitment_start_time = 9 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool CapacityCommitment::_internal_has_commitment_start_time() const {
  return this != internal_default_instance() && _impl_.commitment_start_time_ != nullptr;
}
inline bool CapacityCommitment::has_commitment_start_time() const {
  return _internal_has_commitment_start_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& CapacityCommitment::_internal_commitment_start_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.commitment_start_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& CapacityCommitment::commitment_start_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.CapacityCommitment.commitment_start_time)
  return _internal_commitment_start_time();
}
inline void CapacityCommitment::unsafe_arena_set_allocated_commitment_start_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* commitment_start_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.commitment_start_time_);
  }
  _impl_.commitment_start_time_ = commitment_start_time;
  if (commitment_start_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.reservation.v1.CapacityCommitment.commitment_start_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CapacityCommitment::release_commitment_start_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.commitment_start_time_;
  _impl_.commitment_start_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CapacityCommitment::unsafe_arena_release_commitment_start_time() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.reservation.v1.CapacityCommitment.commitment_start_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.commitment_start_time_;
  _impl_.commitment_start_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CapacityCommitment::_internal_mutable_commitment_start_time() {
  
  if (_impl_.commitment_start_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.commitment_start_time_ = p;
  }
  return _impl_.commitment_start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CapacityCommitment::mutable_commitment_start_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_commitment_start_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.reservation.v1.CapacityCommitment.commitment_start_time)
  return _msg;
}
inline void CapacityCommitment::set_allocated_commitment_start_time(::PROTOBUF_NAMESPACE_ID::Timestamp* commitment_start_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.commitment_start_time_);
  }
  if (commitment_start_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(commitment_start_time));
    if (message_arena != submessage_arena) {
      commitment_start_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, commitment_start_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.commitment_start_time_ = commitment_start_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.reservation.v1.CapacityCommitment.commitment_start_time)
}

// .google.protobuf.Timestamp commitment_end_time = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool CapacityCommitment::_internal_has_commitment_end_time() const {
  return this != internal_default_instance() && _impl_.commitment_end_time_ != nullptr;
}
inline bool CapacityCommitment::has_commitment_end_time() const {
  return _internal_has_commitment_end_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& CapacityCommitment::_internal_commitment_end_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.commitment_end_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& CapacityCommitment::commitment_end_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.CapacityCommitment.commitment_end_time)
  return _internal_commitment_end_time();
}
inline void CapacityCommitment::unsafe_arena_set_allocated_commitment_end_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* commitment_end_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.commitment_end_time_);
  }
  _impl_.commitment_end_time_ = commitment_end_time;
  if (commitment_end_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.reservation.v1.CapacityCommitment.commitment_end_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CapacityCommitment::release_commitment_end_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.commitment_end_time_;
  _impl_.commitment_end_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CapacityCommitment::unsafe_arena_release_commitment_end_time() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.reservation.v1.CapacityCommitment.commitment_end_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.commitment_end_time_;
  _impl_.commitment_end_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CapacityCommitment::_internal_mutable_commitment_end_time() {
  
  if (_impl_.commitment_end_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.commitment_end_time_ = p;
  }
  return _impl_.commitment_end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CapacityCommitment::mutable_commitment_end_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_commitment_end_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.reservation.v1.CapacityCommitment.commitment_end_time)
  return _msg;
}
inline void CapacityCommitment::set_allocated_commitment_end_time(::PROTOBUF_NAMESPACE_ID::Timestamp* commitment_end_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.commitment_end_time_);
  }
  if (commitment_end_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(commitment_end_time));
    if (message_arena != submessage_arena) {
      commitment_end_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, commitment_end_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.commitment_end_time_ = commitment_end_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.reservation.v1.CapacityCommitment.commitment_end_time)
}

// .google.rpc.Status failure_status = 7 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool CapacityCommitment::_internal_has_failure_status() const {
  return this != internal_default_instance() && _impl_.failure_status_ != nullptr;
}
inline bool CapacityCommitment::has_failure_status() const {
  return _internal_has_failure_status();
}
inline const ::google::rpc::Status& CapacityCommitment::_internal_failure_status() const {
  const ::google::rpc::Status* p = _impl_.failure_status_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::rpc::Status&>(
      ::google::rpc::_Status_default_instance_);
}
inline const ::google::rpc::Status& CapacityCommitment::failure_status() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.CapacityCommitment.failure_status)
  return _internal_failure_status();
}
inline void CapacityCommitment::unsafe_arena_set_allocated_failure_status(
    ::google::rpc::Status* failure_status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.failure_status_);
  }
  _impl_.failure_status_ = failure_status;
  if (failure_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.reservation.v1.CapacityCommitment.failure_status)
}
inline ::google::rpc::Status* CapacityCommitment::release_failure_status() {
  
  ::google::rpc::Status* temp = _impl_.failure_status_;
  _impl_.failure_status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::rpc::Status* CapacityCommitment::unsafe_arena_release_failure_status() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.reservation.v1.CapacityCommitment.failure_status)
  
  ::google::rpc::Status* temp = _impl_.failure_status_;
  _impl_.failure_status_ = nullptr;
  return temp;
}
inline ::google::rpc::Status* CapacityCommitment::_internal_mutable_failure_status() {
  
  if (_impl_.failure_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::rpc::Status>(GetArenaForAllocation());
    _impl_.failure_status_ = p;
  }
  return _impl_.failure_status_;
}
inline ::google::rpc::Status* CapacityCommitment::mutable_failure_status() {
  ::google::rpc::Status* _msg = _internal_mutable_failure_status();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.reservation.v1.CapacityCommitment.failure_status)
  return _msg;
}
inline void CapacityCommitment::set_allocated_failure_status(::google::rpc::Status* failure_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.failure_status_);
  }
  if (failure_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(failure_status));
    if (message_arena != submessage_arena) {
      failure_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, failure_status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.failure_status_ = failure_status;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.reservation.v1.CapacityCommitment.failure_status)
}

// .google.cloud.bigquery.reservation.v1.CapacityCommitment.CommitmentPlan renewal_plan = 8;
inline void CapacityCommitment::clear_renewal_plan() {
  _impl_.renewal_plan_ = 0;
}
inline ::google::cloud::bigquery::reservation::v1::CapacityCommitment_CommitmentPlan CapacityCommitment::_internal_renewal_plan() const {
  return static_cast< ::google::cloud::bigquery::reservation::v1::CapacityCommitment_CommitmentPlan >(_impl_.renewal_plan_);
}
inline ::google::cloud::bigquery::reservation::v1::CapacityCommitment_CommitmentPlan CapacityCommitment::renewal_plan() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.CapacityCommitment.renewal_plan)
  return _internal_renewal_plan();
}
inline void CapacityCommitment::_internal_set_renewal_plan(::google::cloud::bigquery::reservation::v1::CapacityCommitment_CommitmentPlan value) {
  
  _impl_.renewal_plan_ = value;
}
inline void CapacityCommitment::set_renewal_plan(::google::cloud::bigquery::reservation::v1::CapacityCommitment_CommitmentPlan value) {
  _internal_set_renewal_plan(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.reservation.v1.CapacityCommitment.renewal_plan)
}

// bool multi_region_auxiliary = 10;
inline void CapacityCommitment::clear_multi_region_auxiliary() {
  _impl_.multi_region_auxiliary_ = false;
}
inline bool CapacityCommitment::_internal_multi_region_auxiliary() const {
  return _impl_.multi_region_auxiliary_;
}
inline bool CapacityCommitment::multi_region_auxiliary() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.CapacityCommitment.multi_region_auxiliary)
  return _internal_multi_region_auxiliary();
}
inline void CapacityCommitment::_internal_set_multi_region_auxiliary(bool value) {
  
  _impl_.multi_region_auxiliary_ = value;
}
inline void CapacityCommitment::set_multi_region_auxiliary(bool value) {
  _internal_set_multi_region_auxiliary(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.reservation.v1.CapacityCommitment.multi_region_auxiliary)
}

// -------------------------------------------------------------------

// CreateReservationRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreateReservationRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& CreateReservationRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.CreateReservationRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateReservationRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.reservation.v1.CreateReservationRequest.parent)
}
inline std::string* CreateReservationRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.reservation.v1.CreateReservationRequest.parent)
  return _s;
}
inline const std::string& CreateReservationRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void CreateReservationRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateReservationRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateReservationRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.reservation.v1.CreateReservationRequest.parent)
  return _impl_.parent_.Release();
}
inline void CreateReservationRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.reservation.v1.CreateReservationRequest.parent)
}

// string reservation_id = 2;
inline void CreateReservationRequest::clear_reservation_id() {
  _impl_.reservation_id_.ClearToEmpty();
}
inline const std::string& CreateReservationRequest::reservation_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.CreateReservationRequest.reservation_id)
  return _internal_reservation_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateReservationRequest::set_reservation_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.reservation_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.reservation.v1.CreateReservationRequest.reservation_id)
}
inline std::string* CreateReservationRequest::mutable_reservation_id() {
  std::string* _s = _internal_mutable_reservation_id();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.reservation.v1.CreateReservationRequest.reservation_id)
  return _s;
}
inline const std::string& CreateReservationRequest::_internal_reservation_id() const {
  return _impl_.reservation_id_.Get();
}
inline void CreateReservationRequest::_internal_set_reservation_id(const std::string& value) {
  
  _impl_.reservation_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateReservationRequest::_internal_mutable_reservation_id() {
  
  return _impl_.reservation_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateReservationRequest::release_reservation_id() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.reservation.v1.CreateReservationRequest.reservation_id)
  return _impl_.reservation_id_.Release();
}
inline void CreateReservationRequest::set_allocated_reservation_id(std::string* reservation_id) {
  if (reservation_id != nullptr) {
    
  } else {
    
  }
  _impl_.reservation_id_.SetAllocated(reservation_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.reservation_id_.IsDefault()) {
    _impl_.reservation_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.reservation.v1.CreateReservationRequest.reservation_id)
}

// .google.cloud.bigquery.reservation.v1.Reservation reservation = 3;
inline bool CreateReservationRequest::_internal_has_reservation() const {
  return this != internal_default_instance() && _impl_.reservation_ != nullptr;
}
inline bool CreateReservationRequest::has_reservation() const {
  return _internal_has_reservation();
}
inline void CreateReservationRequest::clear_reservation() {
  if (GetArenaForAllocation() == nullptr && _impl_.reservation_ != nullptr) {
    delete _impl_.reservation_;
  }
  _impl_.reservation_ = nullptr;
}
inline const ::google::cloud::bigquery::reservation::v1::Reservation& CreateReservationRequest::_internal_reservation() const {
  const ::google::cloud::bigquery::reservation::v1::Reservation* p = _impl_.reservation_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::reservation::v1::Reservation&>(
      ::google::cloud::bigquery::reservation::v1::_Reservation_default_instance_);
}
inline const ::google::cloud::bigquery::reservation::v1::Reservation& CreateReservationRequest::reservation() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.CreateReservationRequest.reservation)
  return _internal_reservation();
}
inline void CreateReservationRequest::unsafe_arena_set_allocated_reservation(
    ::google::cloud::bigquery::reservation::v1::Reservation* reservation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reservation_);
  }
  _impl_.reservation_ = reservation;
  if (reservation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.reservation.v1.CreateReservationRequest.reservation)
}
inline ::google::cloud::bigquery::reservation::v1::Reservation* CreateReservationRequest::release_reservation() {
  
  ::google::cloud::bigquery::reservation::v1::Reservation* temp = _impl_.reservation_;
  _impl_.reservation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::reservation::v1::Reservation* CreateReservationRequest::unsafe_arena_release_reservation() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.reservation.v1.CreateReservationRequest.reservation)
  
  ::google::cloud::bigquery::reservation::v1::Reservation* temp = _impl_.reservation_;
  _impl_.reservation_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::reservation::v1::Reservation* CreateReservationRequest::_internal_mutable_reservation() {
  
  if (_impl_.reservation_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::reservation::v1::Reservation>(GetArenaForAllocation());
    _impl_.reservation_ = p;
  }
  return _impl_.reservation_;
}
inline ::google::cloud::bigquery::reservation::v1::Reservation* CreateReservationRequest::mutable_reservation() {
  ::google::cloud::bigquery::reservation::v1::Reservation* _msg = _internal_mutable_reservation();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.reservation.v1.CreateReservationRequest.reservation)
  return _msg;
}
inline void CreateReservationRequest::set_allocated_reservation(::google::cloud::bigquery::reservation::v1::Reservation* reservation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.reservation_;
  }
  if (reservation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(reservation);
    if (message_arena != submessage_arena) {
      reservation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reservation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.reservation_ = reservation;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.reservation.v1.CreateReservationRequest.reservation)
}

// -------------------------------------------------------------------

// ListReservationsRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListReservationsRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& ListReservationsRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.ListReservationsRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListReservationsRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.reservation.v1.ListReservationsRequest.parent)
}
inline std::string* ListReservationsRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.reservation.v1.ListReservationsRequest.parent)
  return _s;
}
inline const std::string& ListReservationsRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void ListReservationsRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* ListReservationsRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* ListReservationsRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.reservation.v1.ListReservationsRequest.parent)
  return _impl_.parent_.Release();
}
inline void ListReservationsRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.reservation.v1.ListReservationsRequest.parent)
}

// int32 page_size = 2;
inline void ListReservationsRequest::clear_page_size() {
  _impl_.page_size_ = 0;
}
inline int32_t ListReservationsRequest::_internal_page_size() const {
  return _impl_.page_size_;
}
inline int32_t ListReservationsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.ListReservationsRequest.page_size)
  return _internal_page_size();
}
inline void ListReservationsRequest::_internal_set_page_size(int32_t value) {
  
  _impl_.page_size_ = value;
}
inline void ListReservationsRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.reservation.v1.ListReservationsRequest.page_size)
}

// string page_token = 3;
inline void ListReservationsRequest::clear_page_token() {
  _impl_.page_token_.ClearToEmpty();
}
inline const std::string& ListReservationsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.ListReservationsRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListReservationsRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.reservation.v1.ListReservationsRequest.page_token)
}
inline std::string* ListReservationsRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.reservation.v1.ListReservationsRequest.page_token)
  return _s;
}
inline const std::string& ListReservationsRequest::_internal_page_token() const {
  return _impl_.page_token_.Get();
}
inline void ListReservationsRequest::_internal_set_page_token(const std::string& value) {
  
  _impl_.page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListReservationsRequest::_internal_mutable_page_token() {
  
  return _impl_.page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListReservationsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.reservation.v1.ListReservationsRequest.page_token)
  return _impl_.page_token_.Release();
}
inline void ListReservationsRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  _impl_.page_token_.SetAllocated(page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.page_token_.IsDefault()) {
    _impl_.page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.reservation.v1.ListReservationsRequest.page_token)
}

// -------------------------------------------------------------------

// ListReservationsResponse

// repeated .google.cloud.bigquery.reservation.v1.Reservation reservations = 1;
inline int ListReservationsResponse::_internal_reservations_size() const {
  return _impl_.reservations_.size();
}
inline int ListReservationsResponse::reservations_size() const {
  return _internal_reservations_size();
}
inline void ListReservationsResponse::clear_reservations() {
  _impl_.reservations_.Clear();
}
inline ::google::cloud::bigquery::reservation::v1::Reservation* ListReservationsResponse::mutable_reservations(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.reservation.v1.ListReservationsResponse.reservations)
  return _impl_.reservations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::reservation::v1::Reservation >*
ListReservationsResponse::mutable_reservations() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.bigquery.reservation.v1.ListReservationsResponse.reservations)
  return &_impl_.reservations_;
}
inline const ::google::cloud::bigquery::reservation::v1::Reservation& ListReservationsResponse::_internal_reservations(int index) const {
  return _impl_.reservations_.Get(index);
}
inline const ::google::cloud::bigquery::reservation::v1::Reservation& ListReservationsResponse::reservations(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.ListReservationsResponse.reservations)
  return _internal_reservations(index);
}
inline ::google::cloud::bigquery::reservation::v1::Reservation* ListReservationsResponse::_internal_add_reservations() {
  return _impl_.reservations_.Add();
}
inline ::google::cloud::bigquery::reservation::v1::Reservation* ListReservationsResponse::add_reservations() {
  ::google::cloud::bigquery::reservation::v1::Reservation* _add = _internal_add_reservations();
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.reservation.v1.ListReservationsResponse.reservations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::reservation::v1::Reservation >&
ListReservationsResponse::reservations() const {
  // @@protoc_insertion_point(field_list:google.cloud.bigquery.reservation.v1.ListReservationsResponse.reservations)
  return _impl_.reservations_;
}

// string next_page_token = 2;
inline void ListReservationsResponse::clear_next_page_token() {
  _impl_.next_page_token_.ClearToEmpty();
}
inline const std::string& ListReservationsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.ListReservationsResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListReservationsResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.next_page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.reservation.v1.ListReservationsResponse.next_page_token)
}
inline std::string* ListReservationsResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.reservation.v1.ListReservationsResponse.next_page_token)
  return _s;
}
inline const std::string& ListReservationsResponse::_internal_next_page_token() const {
  return _impl_.next_page_token_.Get();
}
inline void ListReservationsResponse::_internal_set_next_page_token(const std::string& value) {
  
  _impl_.next_page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListReservationsResponse::_internal_mutable_next_page_token() {
  
  return _impl_.next_page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListReservationsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.reservation.v1.ListReservationsResponse.next_page_token)
  return _impl_.next_page_token_.Release();
}
inline void ListReservationsResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  _impl_.next_page_token_.SetAllocated(next_page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.next_page_token_.IsDefault()) {
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.reservation.v1.ListReservationsResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetReservationRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetReservationRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GetReservationRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.GetReservationRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetReservationRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.reservation.v1.GetReservationRequest.name)
}
inline std::string* GetReservationRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.reservation.v1.GetReservationRequest.name)
  return _s;
}
inline const std::string& GetReservationRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GetReservationRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetReservationRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetReservationRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.reservation.v1.GetReservationRequest.name)
  return _impl_.name_.Release();
}
inline void GetReservationRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.reservation.v1.GetReservationRequest.name)
}

// -------------------------------------------------------------------

// DeleteReservationRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteReservationRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DeleteReservationRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.DeleteReservationRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteReservationRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.reservation.v1.DeleteReservationRequest.name)
}
inline std::string* DeleteReservationRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.reservation.v1.DeleteReservationRequest.name)
  return _s;
}
inline const std::string& DeleteReservationRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DeleteReservationRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteReservationRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteReservationRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.reservation.v1.DeleteReservationRequest.name)
  return _impl_.name_.Release();
}
inline void DeleteReservationRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.reservation.v1.DeleteReservationRequest.name)
}

// -------------------------------------------------------------------

// UpdateReservationRequest

// .google.cloud.bigquery.reservation.v1.Reservation reservation = 1;
inline bool UpdateReservationRequest::_internal_has_reservation() const {
  return this != internal_default_instance() && _impl_.reservation_ != nullptr;
}
inline bool UpdateReservationRequest::has_reservation() const {
  return _internal_has_reservation();
}
inline void UpdateReservationRequest::clear_reservation() {
  if (GetArenaForAllocation() == nullptr && _impl_.reservation_ != nullptr) {
    delete _impl_.reservation_;
  }
  _impl_.reservation_ = nullptr;
}
inline const ::google::cloud::bigquery::reservation::v1::Reservation& UpdateReservationRequest::_internal_reservation() const {
  const ::google::cloud::bigquery::reservation::v1::Reservation* p = _impl_.reservation_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::reservation::v1::Reservation&>(
      ::google::cloud::bigquery::reservation::v1::_Reservation_default_instance_);
}
inline const ::google::cloud::bigquery::reservation::v1::Reservation& UpdateReservationRequest::reservation() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.UpdateReservationRequest.reservation)
  return _internal_reservation();
}
inline void UpdateReservationRequest::unsafe_arena_set_allocated_reservation(
    ::google::cloud::bigquery::reservation::v1::Reservation* reservation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reservation_);
  }
  _impl_.reservation_ = reservation;
  if (reservation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.reservation.v1.UpdateReservationRequest.reservation)
}
inline ::google::cloud::bigquery::reservation::v1::Reservation* UpdateReservationRequest::release_reservation() {
  
  ::google::cloud::bigquery::reservation::v1::Reservation* temp = _impl_.reservation_;
  _impl_.reservation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::reservation::v1::Reservation* UpdateReservationRequest::unsafe_arena_release_reservation() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.reservation.v1.UpdateReservationRequest.reservation)
  
  ::google::cloud::bigquery::reservation::v1::Reservation* temp = _impl_.reservation_;
  _impl_.reservation_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::reservation::v1::Reservation* UpdateReservationRequest::_internal_mutable_reservation() {
  
  if (_impl_.reservation_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::reservation::v1::Reservation>(GetArenaForAllocation());
    _impl_.reservation_ = p;
  }
  return _impl_.reservation_;
}
inline ::google::cloud::bigquery::reservation::v1::Reservation* UpdateReservationRequest::mutable_reservation() {
  ::google::cloud::bigquery::reservation::v1::Reservation* _msg = _internal_mutable_reservation();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.reservation.v1.UpdateReservationRequest.reservation)
  return _msg;
}
inline void UpdateReservationRequest::set_allocated_reservation(::google::cloud::bigquery::reservation::v1::Reservation* reservation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.reservation_;
  }
  if (reservation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(reservation);
    if (message_arena != submessage_arena) {
      reservation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reservation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.reservation_ = reservation;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.reservation.v1.UpdateReservationRequest.reservation)
}

// .google.protobuf.FieldMask update_mask = 2;
inline bool UpdateReservationRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && _impl_.update_mask_ != nullptr;
}
inline bool UpdateReservationRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateReservationRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = _impl_.update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateReservationRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.UpdateReservationRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateReservationRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  _impl_.update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.reservation.v1.UpdateReservationRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateReservationRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateReservationRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.reservation.v1.UpdateReservationRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateReservationRequest::_internal_mutable_update_mask() {
  
  if (_impl_.update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    _impl_.update_mask_ = p;
  }
  return _impl_.update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateReservationRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.reservation.v1.UpdateReservationRequest.update_mask)
  return _msg;
}
inline void UpdateReservationRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.reservation.v1.UpdateReservationRequest.update_mask)
}

// -------------------------------------------------------------------

// CreateCapacityCommitmentRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreateCapacityCommitmentRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& CreateCapacityCommitmentRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.CreateCapacityCommitmentRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateCapacityCommitmentRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.reservation.v1.CreateCapacityCommitmentRequest.parent)
}
inline std::string* CreateCapacityCommitmentRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.reservation.v1.CreateCapacityCommitmentRequest.parent)
  return _s;
}
inline const std::string& CreateCapacityCommitmentRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void CreateCapacityCommitmentRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateCapacityCommitmentRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateCapacityCommitmentRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.reservation.v1.CreateCapacityCommitmentRequest.parent)
  return _impl_.parent_.Release();
}
inline void CreateCapacityCommitmentRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.reservation.v1.CreateCapacityCommitmentRequest.parent)
}

// .google.cloud.bigquery.reservation.v1.CapacityCommitment capacity_commitment = 2;
inline bool CreateCapacityCommitmentRequest::_internal_has_capacity_commitment() const {
  return this != internal_default_instance() && _impl_.capacity_commitment_ != nullptr;
}
inline bool CreateCapacityCommitmentRequest::has_capacity_commitment() const {
  return _internal_has_capacity_commitment();
}
inline void CreateCapacityCommitmentRequest::clear_capacity_commitment() {
  if (GetArenaForAllocation() == nullptr && _impl_.capacity_commitment_ != nullptr) {
    delete _impl_.capacity_commitment_;
  }
  _impl_.capacity_commitment_ = nullptr;
}
inline const ::google::cloud::bigquery::reservation::v1::CapacityCommitment& CreateCapacityCommitmentRequest::_internal_capacity_commitment() const {
  const ::google::cloud::bigquery::reservation::v1::CapacityCommitment* p = _impl_.capacity_commitment_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::reservation::v1::CapacityCommitment&>(
      ::google::cloud::bigquery::reservation::v1::_CapacityCommitment_default_instance_);
}
inline const ::google::cloud::bigquery::reservation::v1::CapacityCommitment& CreateCapacityCommitmentRequest::capacity_commitment() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.CreateCapacityCommitmentRequest.capacity_commitment)
  return _internal_capacity_commitment();
}
inline void CreateCapacityCommitmentRequest::unsafe_arena_set_allocated_capacity_commitment(
    ::google::cloud::bigquery::reservation::v1::CapacityCommitment* capacity_commitment) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.capacity_commitment_);
  }
  _impl_.capacity_commitment_ = capacity_commitment;
  if (capacity_commitment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.reservation.v1.CreateCapacityCommitmentRequest.capacity_commitment)
}
inline ::google::cloud::bigquery::reservation::v1::CapacityCommitment* CreateCapacityCommitmentRequest::release_capacity_commitment() {
  
  ::google::cloud::bigquery::reservation::v1::CapacityCommitment* temp = _impl_.capacity_commitment_;
  _impl_.capacity_commitment_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::reservation::v1::CapacityCommitment* CreateCapacityCommitmentRequest::unsafe_arena_release_capacity_commitment() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.reservation.v1.CreateCapacityCommitmentRequest.capacity_commitment)
  
  ::google::cloud::bigquery::reservation::v1::CapacityCommitment* temp = _impl_.capacity_commitment_;
  _impl_.capacity_commitment_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::reservation::v1::CapacityCommitment* CreateCapacityCommitmentRequest::_internal_mutable_capacity_commitment() {
  
  if (_impl_.capacity_commitment_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::reservation::v1::CapacityCommitment>(GetArenaForAllocation());
    _impl_.capacity_commitment_ = p;
  }
  return _impl_.capacity_commitment_;
}
inline ::google::cloud::bigquery::reservation::v1::CapacityCommitment* CreateCapacityCommitmentRequest::mutable_capacity_commitment() {
  ::google::cloud::bigquery::reservation::v1::CapacityCommitment* _msg = _internal_mutable_capacity_commitment();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.reservation.v1.CreateCapacityCommitmentRequest.capacity_commitment)
  return _msg;
}
inline void CreateCapacityCommitmentRequest::set_allocated_capacity_commitment(::google::cloud::bigquery::reservation::v1::CapacityCommitment* capacity_commitment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.capacity_commitment_;
  }
  if (capacity_commitment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(capacity_commitment);
    if (message_arena != submessage_arena) {
      capacity_commitment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, capacity_commitment, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.capacity_commitment_ = capacity_commitment;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.reservation.v1.CreateCapacityCommitmentRequest.capacity_commitment)
}

// bool enforce_single_admin_project_per_org = 4;
inline void CreateCapacityCommitmentRequest::clear_enforce_single_admin_project_per_org() {
  _impl_.enforce_single_admin_project_per_org_ = false;
}
inline bool CreateCapacityCommitmentRequest::_internal_enforce_single_admin_project_per_org() const {
  return _impl_.enforce_single_admin_project_per_org_;
}
inline bool CreateCapacityCommitmentRequest::enforce_single_admin_project_per_org() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.CreateCapacityCommitmentRequest.enforce_single_admin_project_per_org)
  return _internal_enforce_single_admin_project_per_org();
}
inline void CreateCapacityCommitmentRequest::_internal_set_enforce_single_admin_project_per_org(bool value) {
  
  _impl_.enforce_single_admin_project_per_org_ = value;
}
inline void CreateCapacityCommitmentRequest::set_enforce_single_admin_project_per_org(bool value) {
  _internal_set_enforce_single_admin_project_per_org(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.reservation.v1.CreateCapacityCommitmentRequest.enforce_single_admin_project_per_org)
}

// string capacity_commitment_id = 5;
inline void CreateCapacityCommitmentRequest::clear_capacity_commitment_id() {
  _impl_.capacity_commitment_id_.ClearToEmpty();
}
inline const std::string& CreateCapacityCommitmentRequest::capacity_commitment_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.CreateCapacityCommitmentRequest.capacity_commitment_id)
  return _internal_capacity_commitment_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateCapacityCommitmentRequest::set_capacity_commitment_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.capacity_commitment_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.reservation.v1.CreateCapacityCommitmentRequest.capacity_commitment_id)
}
inline std::string* CreateCapacityCommitmentRequest::mutable_capacity_commitment_id() {
  std::string* _s = _internal_mutable_capacity_commitment_id();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.reservation.v1.CreateCapacityCommitmentRequest.capacity_commitment_id)
  return _s;
}
inline const std::string& CreateCapacityCommitmentRequest::_internal_capacity_commitment_id() const {
  return _impl_.capacity_commitment_id_.Get();
}
inline void CreateCapacityCommitmentRequest::_internal_set_capacity_commitment_id(const std::string& value) {
  
  _impl_.capacity_commitment_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateCapacityCommitmentRequest::_internal_mutable_capacity_commitment_id() {
  
  return _impl_.capacity_commitment_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateCapacityCommitmentRequest::release_capacity_commitment_id() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.reservation.v1.CreateCapacityCommitmentRequest.capacity_commitment_id)
  return _impl_.capacity_commitment_id_.Release();
}
inline void CreateCapacityCommitmentRequest::set_allocated_capacity_commitment_id(std::string* capacity_commitment_id) {
  if (capacity_commitment_id != nullptr) {
    
  } else {
    
  }
  _impl_.capacity_commitment_id_.SetAllocated(capacity_commitment_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.capacity_commitment_id_.IsDefault()) {
    _impl_.capacity_commitment_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.reservation.v1.CreateCapacityCommitmentRequest.capacity_commitment_id)
}

// -------------------------------------------------------------------

// ListCapacityCommitmentsRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListCapacityCommitmentsRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& ListCapacityCommitmentsRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.ListCapacityCommitmentsRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListCapacityCommitmentsRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.reservation.v1.ListCapacityCommitmentsRequest.parent)
}
inline std::string* ListCapacityCommitmentsRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.reservation.v1.ListCapacityCommitmentsRequest.parent)
  return _s;
}
inline const std::string& ListCapacityCommitmentsRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void ListCapacityCommitmentsRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* ListCapacityCommitmentsRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* ListCapacityCommitmentsRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.reservation.v1.ListCapacityCommitmentsRequest.parent)
  return _impl_.parent_.Release();
}
inline void ListCapacityCommitmentsRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.reservation.v1.ListCapacityCommitmentsRequest.parent)
}

// int32 page_size = 2;
inline void ListCapacityCommitmentsRequest::clear_page_size() {
  _impl_.page_size_ = 0;
}
inline int32_t ListCapacityCommitmentsRequest::_internal_page_size() const {
  return _impl_.page_size_;
}
inline int32_t ListCapacityCommitmentsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.ListCapacityCommitmentsRequest.page_size)
  return _internal_page_size();
}
inline void ListCapacityCommitmentsRequest::_internal_set_page_size(int32_t value) {
  
  _impl_.page_size_ = value;
}
inline void ListCapacityCommitmentsRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.reservation.v1.ListCapacityCommitmentsRequest.page_size)
}

// string page_token = 3;
inline void ListCapacityCommitmentsRequest::clear_page_token() {
  _impl_.page_token_.ClearToEmpty();
}
inline const std::string& ListCapacityCommitmentsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.ListCapacityCommitmentsRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListCapacityCommitmentsRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.reservation.v1.ListCapacityCommitmentsRequest.page_token)
}
inline std::string* ListCapacityCommitmentsRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.reservation.v1.ListCapacityCommitmentsRequest.page_token)
  return _s;
}
inline const std::string& ListCapacityCommitmentsRequest::_internal_page_token() const {
  return _impl_.page_token_.Get();
}
inline void ListCapacityCommitmentsRequest::_internal_set_page_token(const std::string& value) {
  
  _impl_.page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListCapacityCommitmentsRequest::_internal_mutable_page_token() {
  
  return _impl_.page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListCapacityCommitmentsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.reservation.v1.ListCapacityCommitmentsRequest.page_token)
  return _impl_.page_token_.Release();
}
inline void ListCapacityCommitmentsRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  _impl_.page_token_.SetAllocated(page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.page_token_.IsDefault()) {
    _impl_.page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.reservation.v1.ListCapacityCommitmentsRequest.page_token)
}

// -------------------------------------------------------------------

// ListCapacityCommitmentsResponse

// repeated .google.cloud.bigquery.reservation.v1.CapacityCommitment capacity_commitments = 1;
inline int ListCapacityCommitmentsResponse::_internal_capacity_commitments_size() const {
  return _impl_.capacity_commitments_.size();
}
inline int ListCapacityCommitmentsResponse::capacity_commitments_size() const {
  return _internal_capacity_commitments_size();
}
inline void ListCapacityCommitmentsResponse::clear_capacity_commitments() {
  _impl_.capacity_commitments_.Clear();
}
inline ::google::cloud::bigquery::reservation::v1::CapacityCommitment* ListCapacityCommitmentsResponse::mutable_capacity_commitments(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.reservation.v1.ListCapacityCommitmentsResponse.capacity_commitments)
  return _impl_.capacity_commitments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::reservation::v1::CapacityCommitment >*
ListCapacityCommitmentsResponse::mutable_capacity_commitments() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.bigquery.reservation.v1.ListCapacityCommitmentsResponse.capacity_commitments)
  return &_impl_.capacity_commitments_;
}
inline const ::google::cloud::bigquery::reservation::v1::CapacityCommitment& ListCapacityCommitmentsResponse::_internal_capacity_commitments(int index) const {
  return _impl_.capacity_commitments_.Get(index);
}
inline const ::google::cloud::bigquery::reservation::v1::CapacityCommitment& ListCapacityCommitmentsResponse::capacity_commitments(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.ListCapacityCommitmentsResponse.capacity_commitments)
  return _internal_capacity_commitments(index);
}
inline ::google::cloud::bigquery::reservation::v1::CapacityCommitment* ListCapacityCommitmentsResponse::_internal_add_capacity_commitments() {
  return _impl_.capacity_commitments_.Add();
}
inline ::google::cloud::bigquery::reservation::v1::CapacityCommitment* ListCapacityCommitmentsResponse::add_capacity_commitments() {
  ::google::cloud::bigquery::reservation::v1::CapacityCommitment* _add = _internal_add_capacity_commitments();
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.reservation.v1.ListCapacityCommitmentsResponse.capacity_commitments)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::reservation::v1::CapacityCommitment >&
ListCapacityCommitmentsResponse::capacity_commitments() const {
  // @@protoc_insertion_point(field_list:google.cloud.bigquery.reservation.v1.ListCapacityCommitmentsResponse.capacity_commitments)
  return _impl_.capacity_commitments_;
}

// string next_page_token = 2;
inline void ListCapacityCommitmentsResponse::clear_next_page_token() {
  _impl_.next_page_token_.ClearToEmpty();
}
inline const std::string& ListCapacityCommitmentsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.ListCapacityCommitmentsResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListCapacityCommitmentsResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.next_page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.reservation.v1.ListCapacityCommitmentsResponse.next_page_token)
}
inline std::string* ListCapacityCommitmentsResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.reservation.v1.ListCapacityCommitmentsResponse.next_page_token)
  return _s;
}
inline const std::string& ListCapacityCommitmentsResponse::_internal_next_page_token() const {
  return _impl_.next_page_token_.Get();
}
inline void ListCapacityCommitmentsResponse::_internal_set_next_page_token(const std::string& value) {
  
  _impl_.next_page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListCapacityCommitmentsResponse::_internal_mutable_next_page_token() {
  
  return _impl_.next_page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListCapacityCommitmentsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.reservation.v1.ListCapacityCommitmentsResponse.next_page_token)
  return _impl_.next_page_token_.Release();
}
inline void ListCapacityCommitmentsResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  _impl_.next_page_token_.SetAllocated(next_page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.next_page_token_.IsDefault()) {
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.reservation.v1.ListCapacityCommitmentsResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetCapacityCommitmentRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetCapacityCommitmentRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GetCapacityCommitmentRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.GetCapacityCommitmentRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetCapacityCommitmentRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.reservation.v1.GetCapacityCommitmentRequest.name)
}
inline std::string* GetCapacityCommitmentRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.reservation.v1.GetCapacityCommitmentRequest.name)
  return _s;
}
inline const std::string& GetCapacityCommitmentRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GetCapacityCommitmentRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetCapacityCommitmentRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetCapacityCommitmentRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.reservation.v1.GetCapacityCommitmentRequest.name)
  return _impl_.name_.Release();
}
inline void GetCapacityCommitmentRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.reservation.v1.GetCapacityCommitmentRequest.name)
}

// -------------------------------------------------------------------

// DeleteCapacityCommitmentRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteCapacityCommitmentRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DeleteCapacityCommitmentRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.DeleteCapacityCommitmentRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteCapacityCommitmentRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.reservation.v1.DeleteCapacityCommitmentRequest.name)
}
inline std::string* DeleteCapacityCommitmentRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.reservation.v1.DeleteCapacityCommitmentRequest.name)
  return _s;
}
inline const std::string& DeleteCapacityCommitmentRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DeleteCapacityCommitmentRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteCapacityCommitmentRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteCapacityCommitmentRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.reservation.v1.DeleteCapacityCommitmentRequest.name)
  return _impl_.name_.Release();
}
inline void DeleteCapacityCommitmentRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.reservation.v1.DeleteCapacityCommitmentRequest.name)
}

// bool force = 3;
inline void DeleteCapacityCommitmentRequest::clear_force() {
  _impl_.force_ = false;
}
inline bool DeleteCapacityCommitmentRequest::_internal_force() const {
  return _impl_.force_;
}
inline bool DeleteCapacityCommitmentRequest::force() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.DeleteCapacityCommitmentRequest.force)
  return _internal_force();
}
inline void DeleteCapacityCommitmentRequest::_internal_set_force(bool value) {
  
  _impl_.force_ = value;
}
inline void DeleteCapacityCommitmentRequest::set_force(bool value) {
  _internal_set_force(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.reservation.v1.DeleteCapacityCommitmentRequest.force)
}

// -------------------------------------------------------------------

// UpdateCapacityCommitmentRequest

// .google.cloud.bigquery.reservation.v1.CapacityCommitment capacity_commitment = 1;
inline bool UpdateCapacityCommitmentRequest::_internal_has_capacity_commitment() const {
  return this != internal_default_instance() && _impl_.capacity_commitment_ != nullptr;
}
inline bool UpdateCapacityCommitmentRequest::has_capacity_commitment() const {
  return _internal_has_capacity_commitment();
}
inline void UpdateCapacityCommitmentRequest::clear_capacity_commitment() {
  if (GetArenaForAllocation() == nullptr && _impl_.capacity_commitment_ != nullptr) {
    delete _impl_.capacity_commitment_;
  }
  _impl_.capacity_commitment_ = nullptr;
}
inline const ::google::cloud::bigquery::reservation::v1::CapacityCommitment& UpdateCapacityCommitmentRequest::_internal_capacity_commitment() const {
  const ::google::cloud::bigquery::reservation::v1::CapacityCommitment* p = _impl_.capacity_commitment_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::reservation::v1::CapacityCommitment&>(
      ::google::cloud::bigquery::reservation::v1::_CapacityCommitment_default_instance_);
}
inline const ::google::cloud::bigquery::reservation::v1::CapacityCommitment& UpdateCapacityCommitmentRequest::capacity_commitment() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.UpdateCapacityCommitmentRequest.capacity_commitment)
  return _internal_capacity_commitment();
}
inline void UpdateCapacityCommitmentRequest::unsafe_arena_set_allocated_capacity_commitment(
    ::google::cloud::bigquery::reservation::v1::CapacityCommitment* capacity_commitment) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.capacity_commitment_);
  }
  _impl_.capacity_commitment_ = capacity_commitment;
  if (capacity_commitment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.reservation.v1.UpdateCapacityCommitmentRequest.capacity_commitment)
}
inline ::google::cloud::bigquery::reservation::v1::CapacityCommitment* UpdateCapacityCommitmentRequest::release_capacity_commitment() {
  
  ::google::cloud::bigquery::reservation::v1::CapacityCommitment* temp = _impl_.capacity_commitment_;
  _impl_.capacity_commitment_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::reservation::v1::CapacityCommitment* UpdateCapacityCommitmentRequest::unsafe_arena_release_capacity_commitment() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.reservation.v1.UpdateCapacityCommitmentRequest.capacity_commitment)
  
  ::google::cloud::bigquery::reservation::v1::CapacityCommitment* temp = _impl_.capacity_commitment_;
  _impl_.capacity_commitment_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::reservation::v1::CapacityCommitment* UpdateCapacityCommitmentRequest::_internal_mutable_capacity_commitment() {
  
  if (_impl_.capacity_commitment_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::reservation::v1::CapacityCommitment>(GetArenaForAllocation());
    _impl_.capacity_commitment_ = p;
  }
  return _impl_.capacity_commitment_;
}
inline ::google::cloud::bigquery::reservation::v1::CapacityCommitment* UpdateCapacityCommitmentRequest::mutable_capacity_commitment() {
  ::google::cloud::bigquery::reservation::v1::CapacityCommitment* _msg = _internal_mutable_capacity_commitment();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.reservation.v1.UpdateCapacityCommitmentRequest.capacity_commitment)
  return _msg;
}
inline void UpdateCapacityCommitmentRequest::set_allocated_capacity_commitment(::google::cloud::bigquery::reservation::v1::CapacityCommitment* capacity_commitment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.capacity_commitment_;
  }
  if (capacity_commitment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(capacity_commitment);
    if (message_arena != submessage_arena) {
      capacity_commitment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, capacity_commitment, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.capacity_commitment_ = capacity_commitment;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.reservation.v1.UpdateCapacityCommitmentRequest.capacity_commitment)
}

// .google.protobuf.FieldMask update_mask = 2;
inline bool UpdateCapacityCommitmentRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && _impl_.update_mask_ != nullptr;
}
inline bool UpdateCapacityCommitmentRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateCapacityCommitmentRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = _impl_.update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateCapacityCommitmentRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.UpdateCapacityCommitmentRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateCapacityCommitmentRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  _impl_.update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.reservation.v1.UpdateCapacityCommitmentRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateCapacityCommitmentRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateCapacityCommitmentRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.reservation.v1.UpdateCapacityCommitmentRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateCapacityCommitmentRequest::_internal_mutable_update_mask() {
  
  if (_impl_.update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    _impl_.update_mask_ = p;
  }
  return _impl_.update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateCapacityCommitmentRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.reservation.v1.UpdateCapacityCommitmentRequest.update_mask)
  return _msg;
}
inline void UpdateCapacityCommitmentRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.reservation.v1.UpdateCapacityCommitmentRequest.update_mask)
}

// -------------------------------------------------------------------

// SplitCapacityCommitmentRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void SplitCapacityCommitmentRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& SplitCapacityCommitmentRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.SplitCapacityCommitmentRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SplitCapacityCommitmentRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.reservation.v1.SplitCapacityCommitmentRequest.name)
}
inline std::string* SplitCapacityCommitmentRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.reservation.v1.SplitCapacityCommitmentRequest.name)
  return _s;
}
inline const std::string& SplitCapacityCommitmentRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void SplitCapacityCommitmentRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* SplitCapacityCommitmentRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* SplitCapacityCommitmentRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.reservation.v1.SplitCapacityCommitmentRequest.name)
  return _impl_.name_.Release();
}
inline void SplitCapacityCommitmentRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.reservation.v1.SplitCapacityCommitmentRequest.name)
}

// int64 slot_count = 2;
inline void SplitCapacityCommitmentRequest::clear_slot_count() {
  _impl_.slot_count_ = int64_t{0};
}
inline int64_t SplitCapacityCommitmentRequest::_internal_slot_count() const {
  return _impl_.slot_count_;
}
inline int64_t SplitCapacityCommitmentRequest::slot_count() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.SplitCapacityCommitmentRequest.slot_count)
  return _internal_slot_count();
}
inline void SplitCapacityCommitmentRequest::_internal_set_slot_count(int64_t value) {
  
  _impl_.slot_count_ = value;
}
inline void SplitCapacityCommitmentRequest::set_slot_count(int64_t value) {
  _internal_set_slot_count(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.reservation.v1.SplitCapacityCommitmentRequest.slot_count)
}

// -------------------------------------------------------------------

// SplitCapacityCommitmentResponse

// .google.cloud.bigquery.reservation.v1.CapacityCommitment first = 1;
inline bool SplitCapacityCommitmentResponse::_internal_has_first() const {
  return this != internal_default_instance() && _impl_.first_ != nullptr;
}
inline bool SplitCapacityCommitmentResponse::has_first() const {
  return _internal_has_first();
}
inline void SplitCapacityCommitmentResponse::clear_first() {
  if (GetArenaForAllocation() == nullptr && _impl_.first_ != nullptr) {
    delete _impl_.first_;
  }
  _impl_.first_ = nullptr;
}
inline const ::google::cloud::bigquery::reservation::v1::CapacityCommitment& SplitCapacityCommitmentResponse::_internal_first() const {
  const ::google::cloud::bigquery::reservation::v1::CapacityCommitment* p = _impl_.first_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::reservation::v1::CapacityCommitment&>(
      ::google::cloud::bigquery::reservation::v1::_CapacityCommitment_default_instance_);
}
inline const ::google::cloud::bigquery::reservation::v1::CapacityCommitment& SplitCapacityCommitmentResponse::first() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.SplitCapacityCommitmentResponse.first)
  return _internal_first();
}
inline void SplitCapacityCommitmentResponse::unsafe_arena_set_allocated_first(
    ::google::cloud::bigquery::reservation::v1::CapacityCommitment* first) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.first_);
  }
  _impl_.first_ = first;
  if (first) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.reservation.v1.SplitCapacityCommitmentResponse.first)
}
inline ::google::cloud::bigquery::reservation::v1::CapacityCommitment* SplitCapacityCommitmentResponse::release_first() {
  
  ::google::cloud::bigquery::reservation::v1::CapacityCommitment* temp = _impl_.first_;
  _impl_.first_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::reservation::v1::CapacityCommitment* SplitCapacityCommitmentResponse::unsafe_arena_release_first() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.reservation.v1.SplitCapacityCommitmentResponse.first)
  
  ::google::cloud::bigquery::reservation::v1::CapacityCommitment* temp = _impl_.first_;
  _impl_.first_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::reservation::v1::CapacityCommitment* SplitCapacityCommitmentResponse::_internal_mutable_first() {
  
  if (_impl_.first_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::reservation::v1::CapacityCommitment>(GetArenaForAllocation());
    _impl_.first_ = p;
  }
  return _impl_.first_;
}
inline ::google::cloud::bigquery::reservation::v1::CapacityCommitment* SplitCapacityCommitmentResponse::mutable_first() {
  ::google::cloud::bigquery::reservation::v1::CapacityCommitment* _msg = _internal_mutable_first();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.reservation.v1.SplitCapacityCommitmentResponse.first)
  return _msg;
}
inline void SplitCapacityCommitmentResponse::set_allocated_first(::google::cloud::bigquery::reservation::v1::CapacityCommitment* first) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.first_;
  }
  if (first) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(first);
    if (message_arena != submessage_arena) {
      first = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, first, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.first_ = first;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.reservation.v1.SplitCapacityCommitmentResponse.first)
}

// .google.cloud.bigquery.reservation.v1.CapacityCommitment second = 2;
inline bool SplitCapacityCommitmentResponse::_internal_has_second() const {
  return this != internal_default_instance() && _impl_.second_ != nullptr;
}
inline bool SplitCapacityCommitmentResponse::has_second() const {
  return _internal_has_second();
}
inline void SplitCapacityCommitmentResponse::clear_second() {
  if (GetArenaForAllocation() == nullptr && _impl_.second_ != nullptr) {
    delete _impl_.second_;
  }
  _impl_.second_ = nullptr;
}
inline const ::google::cloud::bigquery::reservation::v1::CapacityCommitment& SplitCapacityCommitmentResponse::_internal_second() const {
  const ::google::cloud::bigquery::reservation::v1::CapacityCommitment* p = _impl_.second_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::reservation::v1::CapacityCommitment&>(
      ::google::cloud::bigquery::reservation::v1::_CapacityCommitment_default_instance_);
}
inline const ::google::cloud::bigquery::reservation::v1::CapacityCommitment& SplitCapacityCommitmentResponse::second() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.SplitCapacityCommitmentResponse.second)
  return _internal_second();
}
inline void SplitCapacityCommitmentResponse::unsafe_arena_set_allocated_second(
    ::google::cloud::bigquery::reservation::v1::CapacityCommitment* second) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.second_);
  }
  _impl_.second_ = second;
  if (second) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.reservation.v1.SplitCapacityCommitmentResponse.second)
}
inline ::google::cloud::bigquery::reservation::v1::CapacityCommitment* SplitCapacityCommitmentResponse::release_second() {
  
  ::google::cloud::bigquery::reservation::v1::CapacityCommitment* temp = _impl_.second_;
  _impl_.second_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::reservation::v1::CapacityCommitment* SplitCapacityCommitmentResponse::unsafe_arena_release_second() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.reservation.v1.SplitCapacityCommitmentResponse.second)
  
  ::google::cloud::bigquery::reservation::v1::CapacityCommitment* temp = _impl_.second_;
  _impl_.second_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::reservation::v1::CapacityCommitment* SplitCapacityCommitmentResponse::_internal_mutable_second() {
  
  if (_impl_.second_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::reservation::v1::CapacityCommitment>(GetArenaForAllocation());
    _impl_.second_ = p;
  }
  return _impl_.second_;
}
inline ::google::cloud::bigquery::reservation::v1::CapacityCommitment* SplitCapacityCommitmentResponse::mutable_second() {
  ::google::cloud::bigquery::reservation::v1::CapacityCommitment* _msg = _internal_mutable_second();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.reservation.v1.SplitCapacityCommitmentResponse.second)
  return _msg;
}
inline void SplitCapacityCommitmentResponse::set_allocated_second(::google::cloud::bigquery::reservation::v1::CapacityCommitment* second) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.second_;
  }
  if (second) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(second);
    if (message_arena != submessage_arena) {
      second = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, second, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.second_ = second;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.reservation.v1.SplitCapacityCommitmentResponse.second)
}

// -------------------------------------------------------------------

// MergeCapacityCommitmentsRequest

// string parent = 1 [(.google.api.resource_reference) = {
inline void MergeCapacityCommitmentsRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& MergeCapacityCommitmentsRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.MergeCapacityCommitmentsRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MergeCapacityCommitmentsRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.reservation.v1.MergeCapacityCommitmentsRequest.parent)
}
inline std::string* MergeCapacityCommitmentsRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.reservation.v1.MergeCapacityCommitmentsRequest.parent)
  return _s;
}
inline const std::string& MergeCapacityCommitmentsRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void MergeCapacityCommitmentsRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* MergeCapacityCommitmentsRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* MergeCapacityCommitmentsRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.reservation.v1.MergeCapacityCommitmentsRequest.parent)
  return _impl_.parent_.Release();
}
inline void MergeCapacityCommitmentsRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.reservation.v1.MergeCapacityCommitmentsRequest.parent)
}

// repeated string capacity_commitment_ids = 2;
inline int MergeCapacityCommitmentsRequest::_internal_capacity_commitment_ids_size() const {
  return _impl_.capacity_commitment_ids_.size();
}
inline int MergeCapacityCommitmentsRequest::capacity_commitment_ids_size() const {
  return _internal_capacity_commitment_ids_size();
}
inline void MergeCapacityCommitmentsRequest::clear_capacity_commitment_ids() {
  _impl_.capacity_commitment_ids_.Clear();
}
inline std::string* MergeCapacityCommitmentsRequest::add_capacity_commitment_ids() {
  std::string* _s = _internal_add_capacity_commitment_ids();
  // @@protoc_insertion_point(field_add_mutable:google.cloud.bigquery.reservation.v1.MergeCapacityCommitmentsRequest.capacity_commitment_ids)
  return _s;
}
inline const std::string& MergeCapacityCommitmentsRequest::_internal_capacity_commitment_ids(int index) const {
  return _impl_.capacity_commitment_ids_.Get(index);
}
inline const std::string& MergeCapacityCommitmentsRequest::capacity_commitment_ids(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.MergeCapacityCommitmentsRequest.capacity_commitment_ids)
  return _internal_capacity_commitment_ids(index);
}
inline std::string* MergeCapacityCommitmentsRequest::mutable_capacity_commitment_ids(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.reservation.v1.MergeCapacityCommitmentsRequest.capacity_commitment_ids)
  return _impl_.capacity_commitment_ids_.Mutable(index);
}
inline void MergeCapacityCommitmentsRequest::set_capacity_commitment_ids(int index, const std::string& value) {
  _impl_.capacity_commitment_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.reservation.v1.MergeCapacityCommitmentsRequest.capacity_commitment_ids)
}
inline void MergeCapacityCommitmentsRequest::set_capacity_commitment_ids(int index, std::string&& value) {
  _impl_.capacity_commitment_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.reservation.v1.MergeCapacityCommitmentsRequest.capacity_commitment_ids)
}
inline void MergeCapacityCommitmentsRequest::set_capacity_commitment_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.capacity_commitment_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.reservation.v1.MergeCapacityCommitmentsRequest.capacity_commitment_ids)
}
inline void MergeCapacityCommitmentsRequest::set_capacity_commitment_ids(int index, const char* value, size_t size) {
  _impl_.capacity_commitment_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.reservation.v1.MergeCapacityCommitmentsRequest.capacity_commitment_ids)
}
inline std::string* MergeCapacityCommitmentsRequest::_internal_add_capacity_commitment_ids() {
  return _impl_.capacity_commitment_ids_.Add();
}
inline void MergeCapacityCommitmentsRequest::add_capacity_commitment_ids(const std::string& value) {
  _impl_.capacity_commitment_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.reservation.v1.MergeCapacityCommitmentsRequest.capacity_commitment_ids)
}
inline void MergeCapacityCommitmentsRequest::add_capacity_commitment_ids(std::string&& value) {
  _impl_.capacity_commitment_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.reservation.v1.MergeCapacityCommitmentsRequest.capacity_commitment_ids)
}
inline void MergeCapacityCommitmentsRequest::add_capacity_commitment_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.capacity_commitment_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.bigquery.reservation.v1.MergeCapacityCommitmentsRequest.capacity_commitment_ids)
}
inline void MergeCapacityCommitmentsRequest::add_capacity_commitment_ids(const char* value, size_t size) {
  _impl_.capacity_commitment_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.bigquery.reservation.v1.MergeCapacityCommitmentsRequest.capacity_commitment_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MergeCapacityCommitmentsRequest::capacity_commitment_ids() const {
  // @@protoc_insertion_point(field_list:google.cloud.bigquery.reservation.v1.MergeCapacityCommitmentsRequest.capacity_commitment_ids)
  return _impl_.capacity_commitment_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MergeCapacityCommitmentsRequest::mutable_capacity_commitment_ids() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.bigquery.reservation.v1.MergeCapacityCommitmentsRequest.capacity_commitment_ids)
  return &_impl_.capacity_commitment_ids_;
}

// -------------------------------------------------------------------

// Assignment

// string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void Assignment::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Assignment::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.Assignment.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Assignment::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.reservation.v1.Assignment.name)
}
inline std::string* Assignment::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.reservation.v1.Assignment.name)
  return _s;
}
inline const std::string& Assignment::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Assignment::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Assignment::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Assignment::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.reservation.v1.Assignment.name)
  return _impl_.name_.Release();
}
inline void Assignment::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.reservation.v1.Assignment.name)
}

// string assignee = 4;
inline void Assignment::clear_assignee() {
  _impl_.assignee_.ClearToEmpty();
}
inline const std::string& Assignment::assignee() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.Assignment.assignee)
  return _internal_assignee();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Assignment::set_assignee(ArgT0&& arg0, ArgT... args) {
 
 _impl_.assignee_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.reservation.v1.Assignment.assignee)
}
inline std::string* Assignment::mutable_assignee() {
  std::string* _s = _internal_mutable_assignee();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.reservation.v1.Assignment.assignee)
  return _s;
}
inline const std::string& Assignment::_internal_assignee() const {
  return _impl_.assignee_.Get();
}
inline void Assignment::_internal_set_assignee(const std::string& value) {
  
  _impl_.assignee_.Set(value, GetArenaForAllocation());
}
inline std::string* Assignment::_internal_mutable_assignee() {
  
  return _impl_.assignee_.Mutable(GetArenaForAllocation());
}
inline std::string* Assignment::release_assignee() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.reservation.v1.Assignment.assignee)
  return _impl_.assignee_.Release();
}
inline void Assignment::set_allocated_assignee(std::string* assignee) {
  if (assignee != nullptr) {
    
  } else {
    
  }
  _impl_.assignee_.SetAllocated(assignee, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.assignee_.IsDefault()) {
    _impl_.assignee_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.reservation.v1.Assignment.assignee)
}

// .google.cloud.bigquery.reservation.v1.Assignment.JobType job_type = 3;
inline void Assignment::clear_job_type() {
  _impl_.job_type_ = 0;
}
inline ::google::cloud::bigquery::reservation::v1::Assignment_JobType Assignment::_internal_job_type() const {
  return static_cast< ::google::cloud::bigquery::reservation::v1::Assignment_JobType >(_impl_.job_type_);
}
inline ::google::cloud::bigquery::reservation::v1::Assignment_JobType Assignment::job_type() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.Assignment.job_type)
  return _internal_job_type();
}
inline void Assignment::_internal_set_job_type(::google::cloud::bigquery::reservation::v1::Assignment_JobType value) {
  
  _impl_.job_type_ = value;
}
inline void Assignment::set_job_type(::google::cloud::bigquery::reservation::v1::Assignment_JobType value) {
  _internal_set_job_type(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.reservation.v1.Assignment.job_type)
}

// .google.cloud.bigquery.reservation.v1.Assignment.State state = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void Assignment::clear_state() {
  _impl_.state_ = 0;
}
inline ::google::cloud::bigquery::reservation::v1::Assignment_State Assignment::_internal_state() const {
  return static_cast< ::google::cloud::bigquery::reservation::v1::Assignment_State >(_impl_.state_);
}
inline ::google::cloud::bigquery::reservation::v1::Assignment_State Assignment::state() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.Assignment.state)
  return _internal_state();
}
inline void Assignment::_internal_set_state(::google::cloud::bigquery::reservation::v1::Assignment_State value) {
  
  _impl_.state_ = value;
}
inline void Assignment::set_state(::google::cloud::bigquery::reservation::v1::Assignment_State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.reservation.v1.Assignment.state)
}

// -------------------------------------------------------------------

// CreateAssignmentRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreateAssignmentRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& CreateAssignmentRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.CreateAssignmentRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateAssignmentRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.reservation.v1.CreateAssignmentRequest.parent)
}
inline std::string* CreateAssignmentRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.reservation.v1.CreateAssignmentRequest.parent)
  return _s;
}
inline const std::string& CreateAssignmentRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void CreateAssignmentRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateAssignmentRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateAssignmentRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.reservation.v1.CreateAssignmentRequest.parent)
  return _impl_.parent_.Release();
}
inline void CreateAssignmentRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.reservation.v1.CreateAssignmentRequest.parent)
}

// .google.cloud.bigquery.reservation.v1.Assignment assignment = 2;
inline bool CreateAssignmentRequest::_internal_has_assignment() const {
  return this != internal_default_instance() && _impl_.assignment_ != nullptr;
}
inline bool CreateAssignmentRequest::has_assignment() const {
  return _internal_has_assignment();
}
inline void CreateAssignmentRequest::clear_assignment() {
  if (GetArenaForAllocation() == nullptr && _impl_.assignment_ != nullptr) {
    delete _impl_.assignment_;
  }
  _impl_.assignment_ = nullptr;
}
inline const ::google::cloud::bigquery::reservation::v1::Assignment& CreateAssignmentRequest::_internal_assignment() const {
  const ::google::cloud::bigquery::reservation::v1::Assignment* p = _impl_.assignment_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::reservation::v1::Assignment&>(
      ::google::cloud::bigquery::reservation::v1::_Assignment_default_instance_);
}
inline const ::google::cloud::bigquery::reservation::v1::Assignment& CreateAssignmentRequest::assignment() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.CreateAssignmentRequest.assignment)
  return _internal_assignment();
}
inline void CreateAssignmentRequest::unsafe_arena_set_allocated_assignment(
    ::google::cloud::bigquery::reservation::v1::Assignment* assignment) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.assignment_);
  }
  _impl_.assignment_ = assignment;
  if (assignment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.reservation.v1.CreateAssignmentRequest.assignment)
}
inline ::google::cloud::bigquery::reservation::v1::Assignment* CreateAssignmentRequest::release_assignment() {
  
  ::google::cloud::bigquery::reservation::v1::Assignment* temp = _impl_.assignment_;
  _impl_.assignment_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::reservation::v1::Assignment* CreateAssignmentRequest::unsafe_arena_release_assignment() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.reservation.v1.CreateAssignmentRequest.assignment)
  
  ::google::cloud::bigquery::reservation::v1::Assignment* temp = _impl_.assignment_;
  _impl_.assignment_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::reservation::v1::Assignment* CreateAssignmentRequest::_internal_mutable_assignment() {
  
  if (_impl_.assignment_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::reservation::v1::Assignment>(GetArenaForAllocation());
    _impl_.assignment_ = p;
  }
  return _impl_.assignment_;
}
inline ::google::cloud::bigquery::reservation::v1::Assignment* CreateAssignmentRequest::mutable_assignment() {
  ::google::cloud::bigquery::reservation::v1::Assignment* _msg = _internal_mutable_assignment();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.reservation.v1.CreateAssignmentRequest.assignment)
  return _msg;
}
inline void CreateAssignmentRequest::set_allocated_assignment(::google::cloud::bigquery::reservation::v1::Assignment* assignment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.assignment_;
  }
  if (assignment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(assignment);
    if (message_arena != submessage_arena) {
      assignment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, assignment, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.assignment_ = assignment;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.reservation.v1.CreateAssignmentRequest.assignment)
}

// string assignment_id = 4;
inline void CreateAssignmentRequest::clear_assignment_id() {
  _impl_.assignment_id_.ClearToEmpty();
}
inline const std::string& CreateAssignmentRequest::assignment_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.CreateAssignmentRequest.assignment_id)
  return _internal_assignment_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateAssignmentRequest::set_assignment_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.assignment_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.reservation.v1.CreateAssignmentRequest.assignment_id)
}
inline std::string* CreateAssignmentRequest::mutable_assignment_id() {
  std::string* _s = _internal_mutable_assignment_id();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.reservation.v1.CreateAssignmentRequest.assignment_id)
  return _s;
}
inline const std::string& CreateAssignmentRequest::_internal_assignment_id() const {
  return _impl_.assignment_id_.Get();
}
inline void CreateAssignmentRequest::_internal_set_assignment_id(const std::string& value) {
  
  _impl_.assignment_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateAssignmentRequest::_internal_mutable_assignment_id() {
  
  return _impl_.assignment_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateAssignmentRequest::release_assignment_id() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.reservation.v1.CreateAssignmentRequest.assignment_id)
  return _impl_.assignment_id_.Release();
}
inline void CreateAssignmentRequest::set_allocated_assignment_id(std::string* assignment_id) {
  if (assignment_id != nullptr) {
    
  } else {
    
  }
  _impl_.assignment_id_.SetAllocated(assignment_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.assignment_id_.IsDefault()) {
    _impl_.assignment_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.reservation.v1.CreateAssignmentRequest.assignment_id)
}

// -------------------------------------------------------------------

// ListAssignmentsRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListAssignmentsRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& ListAssignmentsRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.ListAssignmentsRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListAssignmentsRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.reservation.v1.ListAssignmentsRequest.parent)
}
inline std::string* ListAssignmentsRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.reservation.v1.ListAssignmentsRequest.parent)
  return _s;
}
inline const std::string& ListAssignmentsRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void ListAssignmentsRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* ListAssignmentsRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* ListAssignmentsRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.reservation.v1.ListAssignmentsRequest.parent)
  return _impl_.parent_.Release();
}
inline void ListAssignmentsRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.reservation.v1.ListAssignmentsRequest.parent)
}

// int32 page_size = 2;
inline void ListAssignmentsRequest::clear_page_size() {
  _impl_.page_size_ = 0;
}
inline int32_t ListAssignmentsRequest::_internal_page_size() const {
  return _impl_.page_size_;
}
inline int32_t ListAssignmentsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.ListAssignmentsRequest.page_size)
  return _internal_page_size();
}
inline void ListAssignmentsRequest::_internal_set_page_size(int32_t value) {
  
  _impl_.page_size_ = value;
}
inline void ListAssignmentsRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.reservation.v1.ListAssignmentsRequest.page_size)
}

// string page_token = 3;
inline void ListAssignmentsRequest::clear_page_token() {
  _impl_.page_token_.ClearToEmpty();
}
inline const std::string& ListAssignmentsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.ListAssignmentsRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListAssignmentsRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.reservation.v1.ListAssignmentsRequest.page_token)
}
inline std::string* ListAssignmentsRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.reservation.v1.ListAssignmentsRequest.page_token)
  return _s;
}
inline const std::string& ListAssignmentsRequest::_internal_page_token() const {
  return _impl_.page_token_.Get();
}
inline void ListAssignmentsRequest::_internal_set_page_token(const std::string& value) {
  
  _impl_.page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListAssignmentsRequest::_internal_mutable_page_token() {
  
  return _impl_.page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListAssignmentsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.reservation.v1.ListAssignmentsRequest.page_token)
  return _impl_.page_token_.Release();
}
inline void ListAssignmentsRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  _impl_.page_token_.SetAllocated(page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.page_token_.IsDefault()) {
    _impl_.page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.reservation.v1.ListAssignmentsRequest.page_token)
}

// -------------------------------------------------------------------

// ListAssignmentsResponse

// repeated .google.cloud.bigquery.reservation.v1.Assignment assignments = 1;
inline int ListAssignmentsResponse::_internal_assignments_size() const {
  return _impl_.assignments_.size();
}
inline int ListAssignmentsResponse::assignments_size() const {
  return _internal_assignments_size();
}
inline void ListAssignmentsResponse::clear_assignments() {
  _impl_.assignments_.Clear();
}
inline ::google::cloud::bigquery::reservation::v1::Assignment* ListAssignmentsResponse::mutable_assignments(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.reservation.v1.ListAssignmentsResponse.assignments)
  return _impl_.assignments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::reservation::v1::Assignment >*
ListAssignmentsResponse::mutable_assignments() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.bigquery.reservation.v1.ListAssignmentsResponse.assignments)
  return &_impl_.assignments_;
}
inline const ::google::cloud::bigquery::reservation::v1::Assignment& ListAssignmentsResponse::_internal_assignments(int index) const {
  return _impl_.assignments_.Get(index);
}
inline const ::google::cloud::bigquery::reservation::v1::Assignment& ListAssignmentsResponse::assignments(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.ListAssignmentsResponse.assignments)
  return _internal_assignments(index);
}
inline ::google::cloud::bigquery::reservation::v1::Assignment* ListAssignmentsResponse::_internal_add_assignments() {
  return _impl_.assignments_.Add();
}
inline ::google::cloud::bigquery::reservation::v1::Assignment* ListAssignmentsResponse::add_assignments() {
  ::google::cloud::bigquery::reservation::v1::Assignment* _add = _internal_add_assignments();
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.reservation.v1.ListAssignmentsResponse.assignments)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::reservation::v1::Assignment >&
ListAssignmentsResponse::assignments() const {
  // @@protoc_insertion_point(field_list:google.cloud.bigquery.reservation.v1.ListAssignmentsResponse.assignments)
  return _impl_.assignments_;
}

// string next_page_token = 2;
inline void ListAssignmentsResponse::clear_next_page_token() {
  _impl_.next_page_token_.ClearToEmpty();
}
inline const std::string& ListAssignmentsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.ListAssignmentsResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListAssignmentsResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.next_page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.reservation.v1.ListAssignmentsResponse.next_page_token)
}
inline std::string* ListAssignmentsResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.reservation.v1.ListAssignmentsResponse.next_page_token)
  return _s;
}
inline const std::string& ListAssignmentsResponse::_internal_next_page_token() const {
  return _impl_.next_page_token_.Get();
}
inline void ListAssignmentsResponse::_internal_set_next_page_token(const std::string& value) {
  
  _impl_.next_page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListAssignmentsResponse::_internal_mutable_next_page_token() {
  
  return _impl_.next_page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListAssignmentsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.reservation.v1.ListAssignmentsResponse.next_page_token)
  return _impl_.next_page_token_.Release();
}
inline void ListAssignmentsResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  _impl_.next_page_token_.SetAllocated(next_page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.next_page_token_.IsDefault()) {
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.reservation.v1.ListAssignmentsResponse.next_page_token)
}

// -------------------------------------------------------------------

// DeleteAssignmentRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteAssignmentRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DeleteAssignmentRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.DeleteAssignmentRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteAssignmentRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.reservation.v1.DeleteAssignmentRequest.name)
}
inline std::string* DeleteAssignmentRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.reservation.v1.DeleteAssignmentRequest.name)
  return _s;
}
inline const std::string& DeleteAssignmentRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DeleteAssignmentRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteAssignmentRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteAssignmentRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.reservation.v1.DeleteAssignmentRequest.name)
  return _impl_.name_.Release();
}
inline void DeleteAssignmentRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.reservation.v1.DeleteAssignmentRequest.name)
}

// -------------------------------------------------------------------

// SearchAssignmentsRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void SearchAssignmentsRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& SearchAssignmentsRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.SearchAssignmentsRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchAssignmentsRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.reservation.v1.SearchAssignmentsRequest.parent)
}
inline std::string* SearchAssignmentsRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.reservation.v1.SearchAssignmentsRequest.parent)
  return _s;
}
inline const std::string& SearchAssignmentsRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void SearchAssignmentsRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchAssignmentsRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* SearchAssignmentsRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.reservation.v1.SearchAssignmentsRequest.parent)
  return _impl_.parent_.Release();
}
inline void SearchAssignmentsRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.reservation.v1.SearchAssignmentsRequest.parent)
}

// string query = 2;
inline void SearchAssignmentsRequest::clear_query() {
  _impl_.query_.ClearToEmpty();
}
inline const std::string& SearchAssignmentsRequest::query() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.SearchAssignmentsRequest.query)
  return _internal_query();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchAssignmentsRequest::set_query(ArgT0&& arg0, ArgT... args) {
 
 _impl_.query_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.reservation.v1.SearchAssignmentsRequest.query)
}
inline std::string* SearchAssignmentsRequest::mutable_query() {
  std::string* _s = _internal_mutable_query();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.reservation.v1.SearchAssignmentsRequest.query)
  return _s;
}
inline const std::string& SearchAssignmentsRequest::_internal_query() const {
  return _impl_.query_.Get();
}
inline void SearchAssignmentsRequest::_internal_set_query(const std::string& value) {
  
  _impl_.query_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchAssignmentsRequest::_internal_mutable_query() {
  
  return _impl_.query_.Mutable(GetArenaForAllocation());
}
inline std::string* SearchAssignmentsRequest::release_query() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.reservation.v1.SearchAssignmentsRequest.query)
  return _impl_.query_.Release();
}
inline void SearchAssignmentsRequest::set_allocated_query(std::string* query) {
  if (query != nullptr) {
    
  } else {
    
  }
  _impl_.query_.SetAllocated(query, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.query_.IsDefault()) {
    _impl_.query_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.reservation.v1.SearchAssignmentsRequest.query)
}

// int32 page_size = 3;
inline void SearchAssignmentsRequest::clear_page_size() {
  _impl_.page_size_ = 0;
}
inline int32_t SearchAssignmentsRequest::_internal_page_size() const {
  return _impl_.page_size_;
}
inline int32_t SearchAssignmentsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.SearchAssignmentsRequest.page_size)
  return _internal_page_size();
}
inline void SearchAssignmentsRequest::_internal_set_page_size(int32_t value) {
  
  _impl_.page_size_ = value;
}
inline void SearchAssignmentsRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.reservation.v1.SearchAssignmentsRequest.page_size)
}

// string page_token = 4;
inline void SearchAssignmentsRequest::clear_page_token() {
  _impl_.page_token_.ClearToEmpty();
}
inline const std::string& SearchAssignmentsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.SearchAssignmentsRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchAssignmentsRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.reservation.v1.SearchAssignmentsRequest.page_token)
}
inline std::string* SearchAssignmentsRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.reservation.v1.SearchAssignmentsRequest.page_token)
  return _s;
}
inline const std::string& SearchAssignmentsRequest::_internal_page_token() const {
  return _impl_.page_token_.Get();
}
inline void SearchAssignmentsRequest::_internal_set_page_token(const std::string& value) {
  
  _impl_.page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchAssignmentsRequest::_internal_mutable_page_token() {
  
  return _impl_.page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* SearchAssignmentsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.reservation.v1.SearchAssignmentsRequest.page_token)
  return _impl_.page_token_.Release();
}
inline void SearchAssignmentsRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  _impl_.page_token_.SetAllocated(page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.page_token_.IsDefault()) {
    _impl_.page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.reservation.v1.SearchAssignmentsRequest.page_token)
}

// -------------------------------------------------------------------

// SearchAllAssignmentsRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void SearchAllAssignmentsRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& SearchAllAssignmentsRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.SearchAllAssignmentsRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchAllAssignmentsRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.reservation.v1.SearchAllAssignmentsRequest.parent)
}
inline std::string* SearchAllAssignmentsRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.reservation.v1.SearchAllAssignmentsRequest.parent)
  return _s;
}
inline const std::string& SearchAllAssignmentsRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void SearchAllAssignmentsRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchAllAssignmentsRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* SearchAllAssignmentsRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.reservation.v1.SearchAllAssignmentsRequest.parent)
  return _impl_.parent_.Release();
}
inline void SearchAllAssignmentsRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.reservation.v1.SearchAllAssignmentsRequest.parent)
}

// string query = 2;
inline void SearchAllAssignmentsRequest::clear_query() {
  _impl_.query_.ClearToEmpty();
}
inline const std::string& SearchAllAssignmentsRequest::query() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.SearchAllAssignmentsRequest.query)
  return _internal_query();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchAllAssignmentsRequest::set_query(ArgT0&& arg0, ArgT... args) {
 
 _impl_.query_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.reservation.v1.SearchAllAssignmentsRequest.query)
}
inline std::string* SearchAllAssignmentsRequest::mutable_query() {
  std::string* _s = _internal_mutable_query();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.reservation.v1.SearchAllAssignmentsRequest.query)
  return _s;
}
inline const std::string& SearchAllAssignmentsRequest::_internal_query() const {
  return _impl_.query_.Get();
}
inline void SearchAllAssignmentsRequest::_internal_set_query(const std::string& value) {
  
  _impl_.query_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchAllAssignmentsRequest::_internal_mutable_query() {
  
  return _impl_.query_.Mutable(GetArenaForAllocation());
}
inline std::string* SearchAllAssignmentsRequest::release_query() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.reservation.v1.SearchAllAssignmentsRequest.query)
  return _impl_.query_.Release();
}
inline void SearchAllAssignmentsRequest::set_allocated_query(std::string* query) {
  if (query != nullptr) {
    
  } else {
    
  }
  _impl_.query_.SetAllocated(query, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.query_.IsDefault()) {
    _impl_.query_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.reservation.v1.SearchAllAssignmentsRequest.query)
}

// int32 page_size = 3;
inline void SearchAllAssignmentsRequest::clear_page_size() {
  _impl_.page_size_ = 0;
}
inline int32_t SearchAllAssignmentsRequest::_internal_page_size() const {
  return _impl_.page_size_;
}
inline int32_t SearchAllAssignmentsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.SearchAllAssignmentsRequest.page_size)
  return _internal_page_size();
}
inline void SearchAllAssignmentsRequest::_internal_set_page_size(int32_t value) {
  
  _impl_.page_size_ = value;
}
inline void SearchAllAssignmentsRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.reservation.v1.SearchAllAssignmentsRequest.page_size)
}

// string page_token = 4;
inline void SearchAllAssignmentsRequest::clear_page_token() {
  _impl_.page_token_.ClearToEmpty();
}
inline const std::string& SearchAllAssignmentsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.SearchAllAssignmentsRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchAllAssignmentsRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.reservation.v1.SearchAllAssignmentsRequest.page_token)
}
inline std::string* SearchAllAssignmentsRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.reservation.v1.SearchAllAssignmentsRequest.page_token)
  return _s;
}
inline const std::string& SearchAllAssignmentsRequest::_internal_page_token() const {
  return _impl_.page_token_.Get();
}
inline void SearchAllAssignmentsRequest::_internal_set_page_token(const std::string& value) {
  
  _impl_.page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchAllAssignmentsRequest::_internal_mutable_page_token() {
  
  return _impl_.page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* SearchAllAssignmentsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.reservation.v1.SearchAllAssignmentsRequest.page_token)
  return _impl_.page_token_.Release();
}
inline void SearchAllAssignmentsRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  _impl_.page_token_.SetAllocated(page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.page_token_.IsDefault()) {
    _impl_.page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.reservation.v1.SearchAllAssignmentsRequest.page_token)
}

// -------------------------------------------------------------------

// SearchAssignmentsResponse

// repeated .google.cloud.bigquery.reservation.v1.Assignment assignments = 1;
inline int SearchAssignmentsResponse::_internal_assignments_size() const {
  return _impl_.assignments_.size();
}
inline int SearchAssignmentsResponse::assignments_size() const {
  return _internal_assignments_size();
}
inline void SearchAssignmentsResponse::clear_assignments() {
  _impl_.assignments_.Clear();
}
inline ::google::cloud::bigquery::reservation::v1::Assignment* SearchAssignmentsResponse::mutable_assignments(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.reservation.v1.SearchAssignmentsResponse.assignments)
  return _impl_.assignments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::reservation::v1::Assignment >*
SearchAssignmentsResponse::mutable_assignments() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.bigquery.reservation.v1.SearchAssignmentsResponse.assignments)
  return &_impl_.assignments_;
}
inline const ::google::cloud::bigquery::reservation::v1::Assignment& SearchAssignmentsResponse::_internal_assignments(int index) const {
  return _impl_.assignments_.Get(index);
}
inline const ::google::cloud::bigquery::reservation::v1::Assignment& SearchAssignmentsResponse::assignments(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.SearchAssignmentsResponse.assignments)
  return _internal_assignments(index);
}
inline ::google::cloud::bigquery::reservation::v1::Assignment* SearchAssignmentsResponse::_internal_add_assignments() {
  return _impl_.assignments_.Add();
}
inline ::google::cloud::bigquery::reservation::v1::Assignment* SearchAssignmentsResponse::add_assignments() {
  ::google::cloud::bigquery::reservation::v1::Assignment* _add = _internal_add_assignments();
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.reservation.v1.SearchAssignmentsResponse.assignments)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::reservation::v1::Assignment >&
SearchAssignmentsResponse::assignments() const {
  // @@protoc_insertion_point(field_list:google.cloud.bigquery.reservation.v1.SearchAssignmentsResponse.assignments)
  return _impl_.assignments_;
}

// string next_page_token = 2;
inline void SearchAssignmentsResponse::clear_next_page_token() {
  _impl_.next_page_token_.ClearToEmpty();
}
inline const std::string& SearchAssignmentsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.SearchAssignmentsResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchAssignmentsResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.next_page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.reservation.v1.SearchAssignmentsResponse.next_page_token)
}
inline std::string* SearchAssignmentsResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.reservation.v1.SearchAssignmentsResponse.next_page_token)
  return _s;
}
inline const std::string& SearchAssignmentsResponse::_internal_next_page_token() const {
  return _impl_.next_page_token_.Get();
}
inline void SearchAssignmentsResponse::_internal_set_next_page_token(const std::string& value) {
  
  _impl_.next_page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchAssignmentsResponse::_internal_mutable_next_page_token() {
  
  return _impl_.next_page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* SearchAssignmentsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.reservation.v1.SearchAssignmentsResponse.next_page_token)
  return _impl_.next_page_token_.Release();
}
inline void SearchAssignmentsResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  _impl_.next_page_token_.SetAllocated(next_page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.next_page_token_.IsDefault()) {
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.reservation.v1.SearchAssignmentsResponse.next_page_token)
}

// -------------------------------------------------------------------

// SearchAllAssignmentsResponse

// repeated .google.cloud.bigquery.reservation.v1.Assignment assignments = 1;
inline int SearchAllAssignmentsResponse::_internal_assignments_size() const {
  return _impl_.assignments_.size();
}
inline int SearchAllAssignmentsResponse::assignments_size() const {
  return _internal_assignments_size();
}
inline void SearchAllAssignmentsResponse::clear_assignments() {
  _impl_.assignments_.Clear();
}
inline ::google::cloud::bigquery::reservation::v1::Assignment* SearchAllAssignmentsResponse::mutable_assignments(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.reservation.v1.SearchAllAssignmentsResponse.assignments)
  return _impl_.assignments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::reservation::v1::Assignment >*
SearchAllAssignmentsResponse::mutable_assignments() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.bigquery.reservation.v1.SearchAllAssignmentsResponse.assignments)
  return &_impl_.assignments_;
}
inline const ::google::cloud::bigquery::reservation::v1::Assignment& SearchAllAssignmentsResponse::_internal_assignments(int index) const {
  return _impl_.assignments_.Get(index);
}
inline const ::google::cloud::bigquery::reservation::v1::Assignment& SearchAllAssignmentsResponse::assignments(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.SearchAllAssignmentsResponse.assignments)
  return _internal_assignments(index);
}
inline ::google::cloud::bigquery::reservation::v1::Assignment* SearchAllAssignmentsResponse::_internal_add_assignments() {
  return _impl_.assignments_.Add();
}
inline ::google::cloud::bigquery::reservation::v1::Assignment* SearchAllAssignmentsResponse::add_assignments() {
  ::google::cloud::bigquery::reservation::v1::Assignment* _add = _internal_add_assignments();
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.reservation.v1.SearchAllAssignmentsResponse.assignments)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::reservation::v1::Assignment >&
SearchAllAssignmentsResponse::assignments() const {
  // @@protoc_insertion_point(field_list:google.cloud.bigquery.reservation.v1.SearchAllAssignmentsResponse.assignments)
  return _impl_.assignments_;
}

// string next_page_token = 2;
inline void SearchAllAssignmentsResponse::clear_next_page_token() {
  _impl_.next_page_token_.ClearToEmpty();
}
inline const std::string& SearchAllAssignmentsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.SearchAllAssignmentsResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchAllAssignmentsResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.next_page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.reservation.v1.SearchAllAssignmentsResponse.next_page_token)
}
inline std::string* SearchAllAssignmentsResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.reservation.v1.SearchAllAssignmentsResponse.next_page_token)
  return _s;
}
inline const std::string& SearchAllAssignmentsResponse::_internal_next_page_token() const {
  return _impl_.next_page_token_.Get();
}
inline void SearchAllAssignmentsResponse::_internal_set_next_page_token(const std::string& value) {
  
  _impl_.next_page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchAllAssignmentsResponse::_internal_mutable_next_page_token() {
  
  return _impl_.next_page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* SearchAllAssignmentsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.reservation.v1.SearchAllAssignmentsResponse.next_page_token)
  return _impl_.next_page_token_.Release();
}
inline void SearchAllAssignmentsResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  _impl_.next_page_token_.SetAllocated(next_page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.next_page_token_.IsDefault()) {
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.reservation.v1.SearchAllAssignmentsResponse.next_page_token)
}

// -------------------------------------------------------------------

// MoveAssignmentRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void MoveAssignmentRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& MoveAssignmentRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.MoveAssignmentRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MoveAssignmentRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.reservation.v1.MoveAssignmentRequest.name)
}
inline std::string* MoveAssignmentRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.reservation.v1.MoveAssignmentRequest.name)
  return _s;
}
inline const std::string& MoveAssignmentRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void MoveAssignmentRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* MoveAssignmentRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* MoveAssignmentRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.reservation.v1.MoveAssignmentRequest.name)
  return _impl_.name_.Release();
}
inline void MoveAssignmentRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.reservation.v1.MoveAssignmentRequest.name)
}

// string destination_id = 3 [(.google.api.resource_reference) = {
inline void MoveAssignmentRequest::clear_destination_id() {
  _impl_.destination_id_.ClearToEmpty();
}
inline const std::string& MoveAssignmentRequest::destination_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.MoveAssignmentRequest.destination_id)
  return _internal_destination_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MoveAssignmentRequest::set_destination_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.destination_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.reservation.v1.MoveAssignmentRequest.destination_id)
}
inline std::string* MoveAssignmentRequest::mutable_destination_id() {
  std::string* _s = _internal_mutable_destination_id();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.reservation.v1.MoveAssignmentRequest.destination_id)
  return _s;
}
inline const std::string& MoveAssignmentRequest::_internal_destination_id() const {
  return _impl_.destination_id_.Get();
}
inline void MoveAssignmentRequest::_internal_set_destination_id(const std::string& value) {
  
  _impl_.destination_id_.Set(value, GetArenaForAllocation());
}
inline std::string* MoveAssignmentRequest::_internal_mutable_destination_id() {
  
  return _impl_.destination_id_.Mutable(GetArenaForAllocation());
}
inline std::string* MoveAssignmentRequest::release_destination_id() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.reservation.v1.MoveAssignmentRequest.destination_id)
  return _impl_.destination_id_.Release();
}
inline void MoveAssignmentRequest::set_allocated_destination_id(std::string* destination_id) {
  if (destination_id != nullptr) {
    
  } else {
    
  }
  _impl_.destination_id_.SetAllocated(destination_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.destination_id_.IsDefault()) {
    _impl_.destination_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.reservation.v1.MoveAssignmentRequest.destination_id)
}

// -------------------------------------------------------------------

// UpdateAssignmentRequest

// .google.cloud.bigquery.reservation.v1.Assignment assignment = 1;
inline bool UpdateAssignmentRequest::_internal_has_assignment() const {
  return this != internal_default_instance() && _impl_.assignment_ != nullptr;
}
inline bool UpdateAssignmentRequest::has_assignment() const {
  return _internal_has_assignment();
}
inline void UpdateAssignmentRequest::clear_assignment() {
  if (GetArenaForAllocation() == nullptr && _impl_.assignment_ != nullptr) {
    delete _impl_.assignment_;
  }
  _impl_.assignment_ = nullptr;
}
inline const ::google::cloud::bigquery::reservation::v1::Assignment& UpdateAssignmentRequest::_internal_assignment() const {
  const ::google::cloud::bigquery::reservation::v1::Assignment* p = _impl_.assignment_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::reservation::v1::Assignment&>(
      ::google::cloud::bigquery::reservation::v1::_Assignment_default_instance_);
}
inline const ::google::cloud::bigquery::reservation::v1::Assignment& UpdateAssignmentRequest::assignment() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.UpdateAssignmentRequest.assignment)
  return _internal_assignment();
}
inline void UpdateAssignmentRequest::unsafe_arena_set_allocated_assignment(
    ::google::cloud::bigquery::reservation::v1::Assignment* assignment) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.assignment_);
  }
  _impl_.assignment_ = assignment;
  if (assignment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.reservation.v1.UpdateAssignmentRequest.assignment)
}
inline ::google::cloud::bigquery::reservation::v1::Assignment* UpdateAssignmentRequest::release_assignment() {
  
  ::google::cloud::bigquery::reservation::v1::Assignment* temp = _impl_.assignment_;
  _impl_.assignment_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::reservation::v1::Assignment* UpdateAssignmentRequest::unsafe_arena_release_assignment() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.reservation.v1.UpdateAssignmentRequest.assignment)
  
  ::google::cloud::bigquery::reservation::v1::Assignment* temp = _impl_.assignment_;
  _impl_.assignment_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::reservation::v1::Assignment* UpdateAssignmentRequest::_internal_mutable_assignment() {
  
  if (_impl_.assignment_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::reservation::v1::Assignment>(GetArenaForAllocation());
    _impl_.assignment_ = p;
  }
  return _impl_.assignment_;
}
inline ::google::cloud::bigquery::reservation::v1::Assignment* UpdateAssignmentRequest::mutable_assignment() {
  ::google::cloud::bigquery::reservation::v1::Assignment* _msg = _internal_mutable_assignment();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.reservation.v1.UpdateAssignmentRequest.assignment)
  return _msg;
}
inline void UpdateAssignmentRequest::set_allocated_assignment(::google::cloud::bigquery::reservation::v1::Assignment* assignment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.assignment_;
  }
  if (assignment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(assignment);
    if (message_arena != submessage_arena) {
      assignment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, assignment, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.assignment_ = assignment;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.reservation.v1.UpdateAssignmentRequest.assignment)
}

// .google.protobuf.FieldMask update_mask = 2;
inline bool UpdateAssignmentRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && _impl_.update_mask_ != nullptr;
}
inline bool UpdateAssignmentRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateAssignmentRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = _impl_.update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateAssignmentRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.UpdateAssignmentRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateAssignmentRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  _impl_.update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.reservation.v1.UpdateAssignmentRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateAssignmentRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateAssignmentRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.reservation.v1.UpdateAssignmentRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateAssignmentRequest::_internal_mutable_update_mask() {
  
  if (_impl_.update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    _impl_.update_mask_ = p;
  }
  return _impl_.update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateAssignmentRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.reservation.v1.UpdateAssignmentRequest.update_mask)
  return _msg;
}
inline void UpdateAssignmentRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.reservation.v1.UpdateAssignmentRequest.update_mask)
}

// -------------------------------------------------------------------

// TableReference

// string project_id = 1;
inline void TableReference::clear_project_id() {
  _impl_.project_id_.ClearToEmpty();
}
inline const std::string& TableReference::project_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.TableReference.project_id)
  return _internal_project_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TableReference::set_project_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.project_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.reservation.v1.TableReference.project_id)
}
inline std::string* TableReference::mutable_project_id() {
  std::string* _s = _internal_mutable_project_id();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.reservation.v1.TableReference.project_id)
  return _s;
}
inline const std::string& TableReference::_internal_project_id() const {
  return _impl_.project_id_.Get();
}
inline void TableReference::_internal_set_project_id(const std::string& value) {
  
  _impl_.project_id_.Set(value, GetArenaForAllocation());
}
inline std::string* TableReference::_internal_mutable_project_id() {
  
  return _impl_.project_id_.Mutable(GetArenaForAllocation());
}
inline std::string* TableReference::release_project_id() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.reservation.v1.TableReference.project_id)
  return _impl_.project_id_.Release();
}
inline void TableReference::set_allocated_project_id(std::string* project_id) {
  if (project_id != nullptr) {
    
  } else {
    
  }
  _impl_.project_id_.SetAllocated(project_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.project_id_.IsDefault()) {
    _impl_.project_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.reservation.v1.TableReference.project_id)
}

// string dataset_id = 2;
inline void TableReference::clear_dataset_id() {
  _impl_.dataset_id_.ClearToEmpty();
}
inline const std::string& TableReference::dataset_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.TableReference.dataset_id)
  return _internal_dataset_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TableReference::set_dataset_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.dataset_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.reservation.v1.TableReference.dataset_id)
}
inline std::string* TableReference::mutable_dataset_id() {
  std::string* _s = _internal_mutable_dataset_id();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.reservation.v1.TableReference.dataset_id)
  return _s;
}
inline const std::string& TableReference::_internal_dataset_id() const {
  return _impl_.dataset_id_.Get();
}
inline void TableReference::_internal_set_dataset_id(const std::string& value) {
  
  _impl_.dataset_id_.Set(value, GetArenaForAllocation());
}
inline std::string* TableReference::_internal_mutable_dataset_id() {
  
  return _impl_.dataset_id_.Mutable(GetArenaForAllocation());
}
inline std::string* TableReference::release_dataset_id() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.reservation.v1.TableReference.dataset_id)
  return _impl_.dataset_id_.Release();
}
inline void TableReference::set_allocated_dataset_id(std::string* dataset_id) {
  if (dataset_id != nullptr) {
    
  } else {
    
  }
  _impl_.dataset_id_.SetAllocated(dataset_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dataset_id_.IsDefault()) {
    _impl_.dataset_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.reservation.v1.TableReference.dataset_id)
}

// string table_id = 3;
inline void TableReference::clear_table_id() {
  _impl_.table_id_.ClearToEmpty();
}
inline const std::string& TableReference::table_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.TableReference.table_id)
  return _internal_table_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TableReference::set_table_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.table_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.reservation.v1.TableReference.table_id)
}
inline std::string* TableReference::mutable_table_id() {
  std::string* _s = _internal_mutable_table_id();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.reservation.v1.TableReference.table_id)
  return _s;
}
inline const std::string& TableReference::_internal_table_id() const {
  return _impl_.table_id_.Get();
}
inline void TableReference::_internal_set_table_id(const std::string& value) {
  
  _impl_.table_id_.Set(value, GetArenaForAllocation());
}
inline std::string* TableReference::_internal_mutable_table_id() {
  
  return _impl_.table_id_.Mutable(GetArenaForAllocation());
}
inline std::string* TableReference::release_table_id() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.reservation.v1.TableReference.table_id)
  return _impl_.table_id_.Release();
}
inline void TableReference::set_allocated_table_id(std::string* table_id) {
  if (table_id != nullptr) {
    
  } else {
    
  }
  _impl_.table_id_.SetAllocated(table_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.table_id_.IsDefault()) {
    _impl_.table_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.reservation.v1.TableReference.table_id)
}

// -------------------------------------------------------------------

// BiReservation

// string name = 1;
inline void BiReservation::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& BiReservation::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.BiReservation.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BiReservation::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.reservation.v1.BiReservation.name)
}
inline std::string* BiReservation::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.reservation.v1.BiReservation.name)
  return _s;
}
inline const std::string& BiReservation::_internal_name() const {
  return _impl_.name_.Get();
}
inline void BiReservation::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* BiReservation::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* BiReservation::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.reservation.v1.BiReservation.name)
  return _impl_.name_.Release();
}
inline void BiReservation::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.reservation.v1.BiReservation.name)
}

// .google.protobuf.Timestamp update_time = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool BiReservation::_internal_has_update_time() const {
  return this != internal_default_instance() && _impl_.update_time_ != nullptr;
}
inline bool BiReservation::has_update_time() const {
  return _internal_has_update_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& BiReservation::_internal_update_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.update_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& BiReservation::update_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.BiReservation.update_time)
  return _internal_update_time();
}
inline void BiReservation::unsafe_arena_set_allocated_update_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* update_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_time_);
  }
  _impl_.update_time_ = update_time;
  if (update_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.reservation.v1.BiReservation.update_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* BiReservation::release_update_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.update_time_;
  _impl_.update_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* BiReservation::unsafe_arena_release_update_time() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.reservation.v1.BiReservation.update_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.update_time_;
  _impl_.update_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* BiReservation::_internal_mutable_update_time() {
  
  if (_impl_.update_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.update_time_ = p;
  }
  return _impl_.update_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* BiReservation::mutable_update_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_update_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.reservation.v1.BiReservation.update_time)
  return _msg;
}
inline void BiReservation::set_allocated_update_time(::PROTOBUF_NAMESPACE_ID::Timestamp* update_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_time_);
  }
  if (update_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_time));
    if (message_arena != submessage_arena) {
      update_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.update_time_ = update_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.reservation.v1.BiReservation.update_time)
}

// int64 size = 4;
inline void BiReservation::clear_size() {
  _impl_.size_ = int64_t{0};
}
inline int64_t BiReservation::_internal_size() const {
  return _impl_.size_;
}
inline int64_t BiReservation::size() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.BiReservation.size)
  return _internal_size();
}
inline void BiReservation::_internal_set_size(int64_t value) {
  
  _impl_.size_ = value;
}
inline void BiReservation::set_size(int64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.reservation.v1.BiReservation.size)
}

// repeated .google.cloud.bigquery.reservation.v1.TableReference preferred_tables = 5;
inline int BiReservation::_internal_preferred_tables_size() const {
  return _impl_.preferred_tables_.size();
}
inline int BiReservation::preferred_tables_size() const {
  return _internal_preferred_tables_size();
}
inline void BiReservation::clear_preferred_tables() {
  _impl_.preferred_tables_.Clear();
}
inline ::google::cloud::bigquery::reservation::v1::TableReference* BiReservation::mutable_preferred_tables(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.reservation.v1.BiReservation.preferred_tables)
  return _impl_.preferred_tables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::reservation::v1::TableReference >*
BiReservation::mutable_preferred_tables() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.bigquery.reservation.v1.BiReservation.preferred_tables)
  return &_impl_.preferred_tables_;
}
inline const ::google::cloud::bigquery::reservation::v1::TableReference& BiReservation::_internal_preferred_tables(int index) const {
  return _impl_.preferred_tables_.Get(index);
}
inline const ::google::cloud::bigquery::reservation::v1::TableReference& BiReservation::preferred_tables(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.BiReservation.preferred_tables)
  return _internal_preferred_tables(index);
}
inline ::google::cloud::bigquery::reservation::v1::TableReference* BiReservation::_internal_add_preferred_tables() {
  return _impl_.preferred_tables_.Add();
}
inline ::google::cloud::bigquery::reservation::v1::TableReference* BiReservation::add_preferred_tables() {
  ::google::cloud::bigquery::reservation::v1::TableReference* _add = _internal_add_preferred_tables();
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.reservation.v1.BiReservation.preferred_tables)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::reservation::v1::TableReference >&
BiReservation::preferred_tables() const {
  // @@protoc_insertion_point(field_list:google.cloud.bigquery.reservation.v1.BiReservation.preferred_tables)
  return _impl_.preferred_tables_;
}

// -------------------------------------------------------------------

// GetBiReservationRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetBiReservationRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GetBiReservationRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.GetBiReservationRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetBiReservationRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.reservation.v1.GetBiReservationRequest.name)
}
inline std::string* GetBiReservationRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.reservation.v1.GetBiReservationRequest.name)
  return _s;
}
inline const std::string& GetBiReservationRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GetBiReservationRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetBiReservationRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetBiReservationRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.reservation.v1.GetBiReservationRequest.name)
  return _impl_.name_.Release();
}
inline void GetBiReservationRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.reservation.v1.GetBiReservationRequest.name)
}

// -------------------------------------------------------------------

// UpdateBiReservationRequest

// .google.cloud.bigquery.reservation.v1.BiReservation bi_reservation = 1;
inline bool UpdateBiReservationRequest::_internal_has_bi_reservation() const {
  return this != internal_default_instance() && _impl_.bi_reservation_ != nullptr;
}
inline bool UpdateBiReservationRequest::has_bi_reservation() const {
  return _internal_has_bi_reservation();
}
inline void UpdateBiReservationRequest::clear_bi_reservation() {
  if (GetArenaForAllocation() == nullptr && _impl_.bi_reservation_ != nullptr) {
    delete _impl_.bi_reservation_;
  }
  _impl_.bi_reservation_ = nullptr;
}
inline const ::google::cloud::bigquery::reservation::v1::BiReservation& UpdateBiReservationRequest::_internal_bi_reservation() const {
  const ::google::cloud::bigquery::reservation::v1::BiReservation* p = _impl_.bi_reservation_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::reservation::v1::BiReservation&>(
      ::google::cloud::bigquery::reservation::v1::_BiReservation_default_instance_);
}
inline const ::google::cloud::bigquery::reservation::v1::BiReservation& UpdateBiReservationRequest::bi_reservation() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.UpdateBiReservationRequest.bi_reservation)
  return _internal_bi_reservation();
}
inline void UpdateBiReservationRequest::unsafe_arena_set_allocated_bi_reservation(
    ::google::cloud::bigquery::reservation::v1::BiReservation* bi_reservation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bi_reservation_);
  }
  _impl_.bi_reservation_ = bi_reservation;
  if (bi_reservation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.reservation.v1.UpdateBiReservationRequest.bi_reservation)
}
inline ::google::cloud::bigquery::reservation::v1::BiReservation* UpdateBiReservationRequest::release_bi_reservation() {
  
  ::google::cloud::bigquery::reservation::v1::BiReservation* temp = _impl_.bi_reservation_;
  _impl_.bi_reservation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::reservation::v1::BiReservation* UpdateBiReservationRequest::unsafe_arena_release_bi_reservation() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.reservation.v1.UpdateBiReservationRequest.bi_reservation)
  
  ::google::cloud::bigquery::reservation::v1::BiReservation* temp = _impl_.bi_reservation_;
  _impl_.bi_reservation_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::reservation::v1::BiReservation* UpdateBiReservationRequest::_internal_mutable_bi_reservation() {
  
  if (_impl_.bi_reservation_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::reservation::v1::BiReservation>(GetArenaForAllocation());
    _impl_.bi_reservation_ = p;
  }
  return _impl_.bi_reservation_;
}
inline ::google::cloud::bigquery::reservation::v1::BiReservation* UpdateBiReservationRequest::mutable_bi_reservation() {
  ::google::cloud::bigquery::reservation::v1::BiReservation* _msg = _internal_mutable_bi_reservation();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.reservation.v1.UpdateBiReservationRequest.bi_reservation)
  return _msg;
}
inline void UpdateBiReservationRequest::set_allocated_bi_reservation(::google::cloud::bigquery::reservation::v1::BiReservation* bi_reservation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.bi_reservation_;
  }
  if (bi_reservation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bi_reservation);
    if (message_arena != submessage_arena) {
      bi_reservation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bi_reservation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.bi_reservation_ = bi_reservation;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.reservation.v1.UpdateBiReservationRequest.bi_reservation)
}

// .google.protobuf.FieldMask update_mask = 2;
inline bool UpdateBiReservationRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && _impl_.update_mask_ != nullptr;
}
inline bool UpdateBiReservationRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateBiReservationRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = _impl_.update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateBiReservationRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.reservation.v1.UpdateBiReservationRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateBiReservationRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  _impl_.update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.reservation.v1.UpdateBiReservationRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateBiReservationRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateBiReservationRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.reservation.v1.UpdateBiReservationRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateBiReservationRequest::_internal_mutable_update_mask() {
  
  if (_impl_.update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    _impl_.update_mask_ = p;
  }
  return _impl_.update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateBiReservationRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.reservation.v1.UpdateBiReservationRequest.update_mask)
  return _msg;
}
inline void UpdateBiReservationRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.reservation.v1.UpdateBiReservationRequest.update_mask)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace reservation
}  // namespace bigquery
}  // namespace cloud
}  // namespace google

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::google::cloud::bigquery::reservation::v1::CapacityCommitment_CommitmentPlan> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::bigquery::reservation::v1::CapacityCommitment_CommitmentPlan>() {
  return ::google::cloud::bigquery::reservation::v1::CapacityCommitment_CommitmentPlan_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::bigquery::reservation::v1::CapacityCommitment_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::bigquery::reservation::v1::CapacityCommitment_State>() {
  return ::google::cloud::bigquery::reservation::v1::CapacityCommitment_State_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::bigquery::reservation::v1::Assignment_JobType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::bigquery::reservation::v1::Assignment_JobType>() {
  return ::google::cloud::bigquery::reservation::v1::Assignment_JobType_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::bigquery::reservation::v1::Assignment_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::bigquery::reservation::v1::Assignment_State>() {
  return ::google::cloud::bigquery::reservation::v1::Assignment_State_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fbigquery_2freservation_2fv1_2freservation_2eproto
