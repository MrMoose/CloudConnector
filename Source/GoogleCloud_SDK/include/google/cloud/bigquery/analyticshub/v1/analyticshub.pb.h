// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/bigquery/analyticshub/v1/analyticshub.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fbigquery_2fanalyticshub_2fv1_2fanalyticshub_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fbigquery_2fanalyticshub_2fv1_2fanalyticshub_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include "google/api/field_behavior.pb.h"
#include "google/api/resource.pb.h"
#include "google/iam/v1/iam_policy.pb.h"
#include "google/iam/v1/policy.pb.h"
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/field_mask.pb.h>
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fcloud_2fbigquery_2fanalyticshub_2fv1_2fanalyticshub_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fcloud_2fbigquery_2fanalyticshub_2fv1_2fanalyticshub_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fcloud_2fbigquery_2fanalyticshub_2fv1_2fanalyticshub_2eproto;
namespace google {
namespace cloud {
namespace bigquery {
namespace analyticshub {
namespace v1 {
class CreateDataExchangeRequest;
struct CreateDataExchangeRequestDefaultTypeInternal;
extern CreateDataExchangeRequestDefaultTypeInternal _CreateDataExchangeRequest_default_instance_;
class CreateListingRequest;
struct CreateListingRequestDefaultTypeInternal;
extern CreateListingRequestDefaultTypeInternal _CreateListingRequest_default_instance_;
class DataExchange;
struct DataExchangeDefaultTypeInternal;
extern DataExchangeDefaultTypeInternal _DataExchange_default_instance_;
class DataProvider;
struct DataProviderDefaultTypeInternal;
extern DataProviderDefaultTypeInternal _DataProvider_default_instance_;
class DeleteDataExchangeRequest;
struct DeleteDataExchangeRequestDefaultTypeInternal;
extern DeleteDataExchangeRequestDefaultTypeInternal _DeleteDataExchangeRequest_default_instance_;
class DeleteListingRequest;
struct DeleteListingRequestDefaultTypeInternal;
extern DeleteListingRequestDefaultTypeInternal _DeleteListingRequest_default_instance_;
class DestinationDataset;
struct DestinationDatasetDefaultTypeInternal;
extern DestinationDatasetDefaultTypeInternal _DestinationDataset_default_instance_;
class DestinationDatasetReference;
struct DestinationDatasetReferenceDefaultTypeInternal;
extern DestinationDatasetReferenceDefaultTypeInternal _DestinationDatasetReference_default_instance_;
class DestinationDataset_LabelsEntry_DoNotUse;
struct DestinationDataset_LabelsEntry_DoNotUseDefaultTypeInternal;
extern DestinationDataset_LabelsEntry_DoNotUseDefaultTypeInternal _DestinationDataset_LabelsEntry_DoNotUse_default_instance_;
class GetDataExchangeRequest;
struct GetDataExchangeRequestDefaultTypeInternal;
extern GetDataExchangeRequestDefaultTypeInternal _GetDataExchangeRequest_default_instance_;
class GetListingRequest;
struct GetListingRequestDefaultTypeInternal;
extern GetListingRequestDefaultTypeInternal _GetListingRequest_default_instance_;
class ListDataExchangesRequest;
struct ListDataExchangesRequestDefaultTypeInternal;
extern ListDataExchangesRequestDefaultTypeInternal _ListDataExchangesRequest_default_instance_;
class ListDataExchangesResponse;
struct ListDataExchangesResponseDefaultTypeInternal;
extern ListDataExchangesResponseDefaultTypeInternal _ListDataExchangesResponse_default_instance_;
class ListListingsRequest;
struct ListListingsRequestDefaultTypeInternal;
extern ListListingsRequestDefaultTypeInternal _ListListingsRequest_default_instance_;
class ListListingsResponse;
struct ListListingsResponseDefaultTypeInternal;
extern ListListingsResponseDefaultTypeInternal _ListListingsResponse_default_instance_;
class ListOrgDataExchangesRequest;
struct ListOrgDataExchangesRequestDefaultTypeInternal;
extern ListOrgDataExchangesRequestDefaultTypeInternal _ListOrgDataExchangesRequest_default_instance_;
class ListOrgDataExchangesResponse;
struct ListOrgDataExchangesResponseDefaultTypeInternal;
extern ListOrgDataExchangesResponseDefaultTypeInternal _ListOrgDataExchangesResponse_default_instance_;
class Listing;
struct ListingDefaultTypeInternal;
extern ListingDefaultTypeInternal _Listing_default_instance_;
class Listing_BigQueryDatasetSource;
struct Listing_BigQueryDatasetSourceDefaultTypeInternal;
extern Listing_BigQueryDatasetSourceDefaultTypeInternal _Listing_BigQueryDatasetSource_default_instance_;
class Publisher;
struct PublisherDefaultTypeInternal;
extern PublisherDefaultTypeInternal _Publisher_default_instance_;
class SubscribeListingRequest;
struct SubscribeListingRequestDefaultTypeInternal;
extern SubscribeListingRequestDefaultTypeInternal _SubscribeListingRequest_default_instance_;
class SubscribeListingResponse;
struct SubscribeListingResponseDefaultTypeInternal;
extern SubscribeListingResponseDefaultTypeInternal _SubscribeListingResponse_default_instance_;
class UpdateDataExchangeRequest;
struct UpdateDataExchangeRequestDefaultTypeInternal;
extern UpdateDataExchangeRequestDefaultTypeInternal _UpdateDataExchangeRequest_default_instance_;
class UpdateListingRequest;
struct UpdateListingRequestDefaultTypeInternal;
extern UpdateListingRequestDefaultTypeInternal _UpdateListingRequest_default_instance_;
}  // namespace v1
}  // namespace analyticshub
}  // namespace bigquery
}  // namespace cloud
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::cloud::bigquery::analyticshub::v1::CreateDataExchangeRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::analyticshub::v1::CreateDataExchangeRequest>(Arena*);
template<> ::google::cloud::bigquery::analyticshub::v1::CreateListingRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::analyticshub::v1::CreateListingRequest>(Arena*);
template<> ::google::cloud::bigquery::analyticshub::v1::DataExchange* Arena::CreateMaybeMessage<::google::cloud::bigquery::analyticshub::v1::DataExchange>(Arena*);
template<> ::google::cloud::bigquery::analyticshub::v1::DataProvider* Arena::CreateMaybeMessage<::google::cloud::bigquery::analyticshub::v1::DataProvider>(Arena*);
template<> ::google::cloud::bigquery::analyticshub::v1::DeleteDataExchangeRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::analyticshub::v1::DeleteDataExchangeRequest>(Arena*);
template<> ::google::cloud::bigquery::analyticshub::v1::DeleteListingRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::analyticshub::v1::DeleteListingRequest>(Arena*);
template<> ::google::cloud::bigquery::analyticshub::v1::DestinationDataset* Arena::CreateMaybeMessage<::google::cloud::bigquery::analyticshub::v1::DestinationDataset>(Arena*);
template<> ::google::cloud::bigquery::analyticshub::v1::DestinationDatasetReference* Arena::CreateMaybeMessage<::google::cloud::bigquery::analyticshub::v1::DestinationDatasetReference>(Arena*);
template<> ::google::cloud::bigquery::analyticshub::v1::DestinationDataset_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage<::google::cloud::bigquery::analyticshub::v1::DestinationDataset_LabelsEntry_DoNotUse>(Arena*);
template<> ::google::cloud::bigquery::analyticshub::v1::GetDataExchangeRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::analyticshub::v1::GetDataExchangeRequest>(Arena*);
template<> ::google::cloud::bigquery::analyticshub::v1::GetListingRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::analyticshub::v1::GetListingRequest>(Arena*);
template<> ::google::cloud::bigquery::analyticshub::v1::ListDataExchangesRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::analyticshub::v1::ListDataExchangesRequest>(Arena*);
template<> ::google::cloud::bigquery::analyticshub::v1::ListDataExchangesResponse* Arena::CreateMaybeMessage<::google::cloud::bigquery::analyticshub::v1::ListDataExchangesResponse>(Arena*);
template<> ::google::cloud::bigquery::analyticshub::v1::ListListingsRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::analyticshub::v1::ListListingsRequest>(Arena*);
template<> ::google::cloud::bigquery::analyticshub::v1::ListListingsResponse* Arena::CreateMaybeMessage<::google::cloud::bigquery::analyticshub::v1::ListListingsResponse>(Arena*);
template<> ::google::cloud::bigquery::analyticshub::v1::ListOrgDataExchangesRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::analyticshub::v1::ListOrgDataExchangesRequest>(Arena*);
template<> ::google::cloud::bigquery::analyticshub::v1::ListOrgDataExchangesResponse* Arena::CreateMaybeMessage<::google::cloud::bigquery::analyticshub::v1::ListOrgDataExchangesResponse>(Arena*);
template<> ::google::cloud::bigquery::analyticshub::v1::Listing* Arena::CreateMaybeMessage<::google::cloud::bigquery::analyticshub::v1::Listing>(Arena*);
template<> ::google::cloud::bigquery::analyticshub::v1::Listing_BigQueryDatasetSource* Arena::CreateMaybeMessage<::google::cloud::bigquery::analyticshub::v1::Listing_BigQueryDatasetSource>(Arena*);
template<> ::google::cloud::bigquery::analyticshub::v1::Publisher* Arena::CreateMaybeMessage<::google::cloud::bigquery::analyticshub::v1::Publisher>(Arena*);
template<> ::google::cloud::bigquery::analyticshub::v1::SubscribeListingRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::analyticshub::v1::SubscribeListingRequest>(Arena*);
template<> ::google::cloud::bigquery::analyticshub::v1::SubscribeListingResponse* Arena::CreateMaybeMessage<::google::cloud::bigquery::analyticshub::v1::SubscribeListingResponse>(Arena*);
template<> ::google::cloud::bigquery::analyticshub::v1::UpdateDataExchangeRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::analyticshub::v1::UpdateDataExchangeRequest>(Arena*);
template<> ::google::cloud::bigquery::analyticshub::v1::UpdateListingRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::analyticshub::v1::UpdateListingRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace cloud {
namespace bigquery {
namespace analyticshub {
namespace v1 {

enum Listing_State : int {
  Listing_State_STATE_UNSPECIFIED = 0,
  Listing_State_ACTIVE = 1,
  Listing_State_Listing_State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Listing_State_Listing_State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Listing_State_IsValid(int value);
constexpr Listing_State Listing_State_State_MIN = Listing_State_STATE_UNSPECIFIED;
constexpr Listing_State Listing_State_State_MAX = Listing_State_ACTIVE;
constexpr int Listing_State_State_ARRAYSIZE = Listing_State_State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Listing_State_descriptor();
template<typename T>
inline const std::string& Listing_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Listing_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Listing_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Listing_State_descriptor(), enum_t_value);
}
inline bool Listing_State_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Listing_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Listing_State>(
    Listing_State_descriptor(), name, value);
}
enum Listing_Category : int {
  Listing_Category_CATEGORY_UNSPECIFIED = 0,
  Listing_Category_CATEGORY_OTHERS = 1,
  Listing_Category_CATEGORY_ADVERTISING_AND_MARKETING = 2,
  Listing_Category_CATEGORY_COMMERCE = 3,
  Listing_Category_CATEGORY_CLIMATE_AND_ENVIRONMENT = 4,
  Listing_Category_CATEGORY_DEMOGRAPHICS = 5,
  Listing_Category_CATEGORY_ECONOMICS = 6,
  Listing_Category_CATEGORY_EDUCATION = 7,
  Listing_Category_CATEGORY_ENERGY = 8,
  Listing_Category_CATEGORY_FINANCIAL = 9,
  Listing_Category_CATEGORY_GAMING = 10,
  Listing_Category_CATEGORY_GEOSPATIAL = 11,
  Listing_Category_CATEGORY_HEALTHCARE_AND_LIFE_SCIENCE = 12,
  Listing_Category_CATEGORY_MEDIA = 13,
  Listing_Category_CATEGORY_PUBLIC_SECTOR = 14,
  Listing_Category_CATEGORY_RETAIL = 15,
  Listing_Category_CATEGORY_SPORTS = 16,
  Listing_Category_CATEGORY_SCIENCE_AND_RESEARCH = 17,
  Listing_Category_CATEGORY_TRANSPORTATION_AND_LOGISTICS = 18,
  Listing_Category_CATEGORY_TRAVEL_AND_TOURISM = 19,
  Listing_Category_Listing_Category_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Listing_Category_Listing_Category_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Listing_Category_IsValid(int value);
constexpr Listing_Category Listing_Category_Category_MIN = Listing_Category_CATEGORY_UNSPECIFIED;
constexpr Listing_Category Listing_Category_Category_MAX = Listing_Category_CATEGORY_TRAVEL_AND_TOURISM;
constexpr int Listing_Category_Category_ARRAYSIZE = Listing_Category_Category_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Listing_Category_descriptor();
template<typename T>
inline const std::string& Listing_Category_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Listing_Category>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Listing_Category_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Listing_Category_descriptor(), enum_t_value);
}
inline bool Listing_Category_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Listing_Category* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Listing_Category>(
    Listing_Category_descriptor(), name, value);
}
// ===================================================================

class DataExchange final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.analyticshub.v1.DataExchange) */ {
 public:
  inline DataExchange() : DataExchange(nullptr) {}
  ~DataExchange() override;
  explicit PROTOBUF_CONSTEXPR DataExchange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DataExchange(const DataExchange& from);
  DataExchange(DataExchange&& from) noexcept
    : DataExchange() {
    *this = ::std::move(from);
  }

  inline DataExchange& operator=(const DataExchange& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataExchange& operator=(DataExchange&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DataExchange& default_instance() {
    return *internal_default_instance();
  }
  static inline const DataExchange* internal_default_instance() {
    return reinterpret_cast<const DataExchange*>(
               &_DataExchange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DataExchange& a, DataExchange& b) {
    a.Swap(&b);
  }
  inline void Swap(DataExchange* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataExchange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DataExchange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DataExchange>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DataExchange& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DataExchange& from) {
    DataExchange::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataExchange* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.analyticshub.v1.DataExchange";
  }
  protected:
  explicit DataExchange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDisplayNameFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kPrimaryContactFieldNumber = 4,
    kDocumentationFieldNumber = 5,
    kIconFieldNumber = 7,
    kListingCountFieldNumber = 6,
  };
  // string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string display_name = 2 [(.google.api.field_behavior) = REQUIRED];
  void clear_display_name();
  const std::string& display_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_display_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_display_name();
  PROTOBUF_NODISCARD std::string* release_display_name();
  void set_allocated_display_name(std::string* display_name);
  private:
  const std::string& _internal_display_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_display_name(const std::string& value);
  std::string* _internal_mutable_display_name();
  public:

  // string description = 3 [(.google.api.field_behavior) = OPTIONAL];
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string primary_contact = 4 [(.google.api.field_behavior) = OPTIONAL];
  void clear_primary_contact();
  const std::string& primary_contact() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_primary_contact(ArgT0&& arg0, ArgT... args);
  std::string* mutable_primary_contact();
  PROTOBUF_NODISCARD std::string* release_primary_contact();
  void set_allocated_primary_contact(std::string* primary_contact);
  private:
  const std::string& _internal_primary_contact() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_primary_contact(const std::string& value);
  std::string* _internal_mutable_primary_contact();
  public:

  // string documentation = 5 [(.google.api.field_behavior) = OPTIONAL];
  void clear_documentation();
  const std::string& documentation() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_documentation(ArgT0&& arg0, ArgT... args);
  std::string* mutable_documentation();
  PROTOBUF_NODISCARD std::string* release_documentation();
  void set_allocated_documentation(std::string* documentation);
  private:
  const std::string& _internal_documentation() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_documentation(const std::string& value);
  std::string* _internal_mutable_documentation();
  public:

  // bytes icon = 7 [(.google.api.field_behavior) = OPTIONAL];
  void clear_icon();
  const std::string& icon() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_icon(ArgT0&& arg0, ArgT... args);
  std::string* mutable_icon();
  PROTOBUF_NODISCARD std::string* release_icon();
  void set_allocated_icon(std::string* icon);
  private:
  const std::string& _internal_icon() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_icon(const std::string& value);
  std::string* _internal_mutable_icon();
  public:

  // int32 listing_count = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_listing_count();
  int32_t listing_count() const;
  void set_listing_count(int32_t value);
  private:
  int32_t _internal_listing_count() const;
  void _internal_set_listing_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.analyticshub.v1.DataExchange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr primary_contact_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr documentation_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr icon_;
    int32_t listing_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fanalyticshub_2fv1_2fanalyticshub_2eproto;
};
// -------------------------------------------------------------------

class DataProvider final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.analyticshub.v1.DataProvider) */ {
 public:
  inline DataProvider() : DataProvider(nullptr) {}
  ~DataProvider() override;
  explicit PROTOBUF_CONSTEXPR DataProvider(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DataProvider(const DataProvider& from);
  DataProvider(DataProvider&& from) noexcept
    : DataProvider() {
    *this = ::std::move(from);
  }

  inline DataProvider& operator=(const DataProvider& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataProvider& operator=(DataProvider&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DataProvider& default_instance() {
    return *internal_default_instance();
  }
  static inline const DataProvider* internal_default_instance() {
    return reinterpret_cast<const DataProvider*>(
               &_DataProvider_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DataProvider& a, DataProvider& b) {
    a.Swap(&b);
  }
  inline void Swap(DataProvider* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataProvider* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DataProvider* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DataProvider>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DataProvider& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DataProvider& from) {
    DataProvider::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataProvider* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.analyticshub.v1.DataProvider";
  }
  protected:
  explicit DataProvider(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPrimaryContactFieldNumber = 2,
  };
  // string name = 1 [(.google.api.field_behavior) = OPTIONAL];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string primary_contact = 2 [(.google.api.field_behavior) = OPTIONAL];
  void clear_primary_contact();
  const std::string& primary_contact() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_primary_contact(ArgT0&& arg0, ArgT... args);
  std::string* mutable_primary_contact();
  PROTOBUF_NODISCARD std::string* release_primary_contact();
  void set_allocated_primary_contact(std::string* primary_contact);
  private:
  const std::string& _internal_primary_contact() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_primary_contact(const std::string& value);
  std::string* _internal_mutable_primary_contact();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.analyticshub.v1.DataProvider)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr primary_contact_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fanalyticshub_2fv1_2fanalyticshub_2eproto;
};
// -------------------------------------------------------------------

class Publisher final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.analyticshub.v1.Publisher) */ {
 public:
  inline Publisher() : Publisher(nullptr) {}
  ~Publisher() override;
  explicit PROTOBUF_CONSTEXPR Publisher(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Publisher(const Publisher& from);
  Publisher(Publisher&& from) noexcept
    : Publisher() {
    *this = ::std::move(from);
  }

  inline Publisher& operator=(const Publisher& from) {
    CopyFrom(from);
    return *this;
  }
  inline Publisher& operator=(Publisher&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Publisher& default_instance() {
    return *internal_default_instance();
  }
  static inline const Publisher* internal_default_instance() {
    return reinterpret_cast<const Publisher*>(
               &_Publisher_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Publisher& a, Publisher& b) {
    a.Swap(&b);
  }
  inline void Swap(Publisher* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Publisher* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Publisher* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Publisher>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Publisher& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Publisher& from) {
    Publisher::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Publisher* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.analyticshub.v1.Publisher";
  }
  protected:
  explicit Publisher(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPrimaryContactFieldNumber = 2,
  };
  // string name = 1 [(.google.api.field_behavior) = OPTIONAL];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string primary_contact = 2 [(.google.api.field_behavior) = OPTIONAL];
  void clear_primary_contact();
  const std::string& primary_contact() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_primary_contact(ArgT0&& arg0, ArgT... args);
  std::string* mutable_primary_contact();
  PROTOBUF_NODISCARD std::string* release_primary_contact();
  void set_allocated_primary_contact(std::string* primary_contact);
  private:
  const std::string& _internal_primary_contact() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_primary_contact(const std::string& value);
  std::string* _internal_mutable_primary_contact();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.analyticshub.v1.Publisher)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr primary_contact_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fanalyticshub_2fv1_2fanalyticshub_2eproto;
};
// -------------------------------------------------------------------

class DestinationDatasetReference final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.analyticshub.v1.DestinationDatasetReference) */ {
 public:
  inline DestinationDatasetReference() : DestinationDatasetReference(nullptr) {}
  ~DestinationDatasetReference() override;
  explicit PROTOBUF_CONSTEXPR DestinationDatasetReference(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DestinationDatasetReference(const DestinationDatasetReference& from);
  DestinationDatasetReference(DestinationDatasetReference&& from) noexcept
    : DestinationDatasetReference() {
    *this = ::std::move(from);
  }

  inline DestinationDatasetReference& operator=(const DestinationDatasetReference& from) {
    CopyFrom(from);
    return *this;
  }
  inline DestinationDatasetReference& operator=(DestinationDatasetReference&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DestinationDatasetReference& default_instance() {
    return *internal_default_instance();
  }
  static inline const DestinationDatasetReference* internal_default_instance() {
    return reinterpret_cast<const DestinationDatasetReference*>(
               &_DestinationDatasetReference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DestinationDatasetReference& a, DestinationDatasetReference& b) {
    a.Swap(&b);
  }
  inline void Swap(DestinationDatasetReference* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DestinationDatasetReference* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DestinationDatasetReference* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DestinationDatasetReference>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DestinationDatasetReference& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DestinationDatasetReference& from) {
    DestinationDatasetReference::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DestinationDatasetReference* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.analyticshub.v1.DestinationDatasetReference";
  }
  protected:
  explicit DestinationDatasetReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatasetIdFieldNumber = 1,
    kProjectIdFieldNumber = 2,
  };
  // string dataset_id = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_dataset_id();
  const std::string& dataset_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dataset_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dataset_id();
  PROTOBUF_NODISCARD std::string* release_dataset_id();
  void set_allocated_dataset_id(std::string* dataset_id);
  private:
  const std::string& _internal_dataset_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dataset_id(const std::string& value);
  std::string* _internal_mutable_dataset_id();
  public:

  // string project_id = 2 [(.google.api.field_behavior) = REQUIRED];
  void clear_project_id();
  const std::string& project_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_project_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_project_id();
  PROTOBUF_NODISCARD std::string* release_project_id();
  void set_allocated_project_id(std::string* project_id);
  private:
  const std::string& _internal_project_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_project_id(const std::string& value);
  std::string* _internal_mutable_project_id();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.analyticshub.v1.DestinationDatasetReference)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dataset_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr project_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fanalyticshub_2fv1_2fanalyticshub_2eproto;
};
// -------------------------------------------------------------------

class DestinationDataset_LabelsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<DestinationDataset_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<DestinationDataset_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  DestinationDataset_LabelsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR DestinationDataset_LabelsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit DestinationDataset_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const DestinationDataset_LabelsEntry_DoNotUse& other);
  static const DestinationDataset_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const DestinationDataset_LabelsEntry_DoNotUse*>(&_DestinationDataset_LabelsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.cloud.bigquery.analyticshub.v1.DestinationDataset.LabelsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.cloud.bigquery.analyticshub.v1.DestinationDataset.LabelsEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fanalyticshub_2fv1_2fanalyticshub_2eproto;
};

// -------------------------------------------------------------------

class DestinationDataset final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.analyticshub.v1.DestinationDataset) */ {
 public:
  inline DestinationDataset() : DestinationDataset(nullptr) {}
  ~DestinationDataset() override;
  explicit PROTOBUF_CONSTEXPR DestinationDataset(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DestinationDataset(const DestinationDataset& from);
  DestinationDataset(DestinationDataset&& from) noexcept
    : DestinationDataset() {
    *this = ::std::move(from);
  }

  inline DestinationDataset& operator=(const DestinationDataset& from) {
    CopyFrom(from);
    return *this;
  }
  inline DestinationDataset& operator=(DestinationDataset&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DestinationDataset& default_instance() {
    return *internal_default_instance();
  }
  static inline const DestinationDataset* internal_default_instance() {
    return reinterpret_cast<const DestinationDataset*>(
               &_DestinationDataset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DestinationDataset& a, DestinationDataset& b) {
    a.Swap(&b);
  }
  inline void Swap(DestinationDataset* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DestinationDataset* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DestinationDataset* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DestinationDataset>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DestinationDataset& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DestinationDataset& from) {
    DestinationDataset::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DestinationDataset* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.analyticshub.v1.DestinationDataset";
  }
  protected:
  explicit DestinationDataset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 4,
    kLocationFieldNumber = 5,
    kDatasetReferenceFieldNumber = 1,
    kFriendlyNameFieldNumber = 2,
    kDescriptionFieldNumber = 3,
  };
  // map<string, string> labels = 4 [(.google.api.field_behavior) = OPTIONAL];
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_labels();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_labels();

  // string location = 5 [(.google.api.field_behavior) = REQUIRED];
  void clear_location();
  const std::string& location() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_location(ArgT0&& arg0, ArgT... args);
  std::string* mutable_location();
  PROTOBUF_NODISCARD std::string* release_location();
  void set_allocated_location(std::string* location);
  private:
  const std::string& _internal_location() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_location(const std::string& value);
  std::string* _internal_mutable_location();
  public:

  // .google.cloud.bigquery.analyticshub.v1.DestinationDatasetReference dataset_reference = 1 [(.google.api.field_behavior) = REQUIRED];
  bool has_dataset_reference() const;
  private:
  bool _internal_has_dataset_reference() const;
  public:
  void clear_dataset_reference();
  const ::google::cloud::bigquery::analyticshub::v1::DestinationDatasetReference& dataset_reference() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::analyticshub::v1::DestinationDatasetReference* release_dataset_reference();
  ::google::cloud::bigquery::analyticshub::v1::DestinationDatasetReference* mutable_dataset_reference();
  void set_allocated_dataset_reference(::google::cloud::bigquery::analyticshub::v1::DestinationDatasetReference* dataset_reference);
  private:
  const ::google::cloud::bigquery::analyticshub::v1::DestinationDatasetReference& _internal_dataset_reference() const;
  ::google::cloud::bigquery::analyticshub::v1::DestinationDatasetReference* _internal_mutable_dataset_reference();
  public:
  void unsafe_arena_set_allocated_dataset_reference(
      ::google::cloud::bigquery::analyticshub::v1::DestinationDatasetReference* dataset_reference);
  ::google::cloud::bigquery::analyticshub::v1::DestinationDatasetReference* unsafe_arena_release_dataset_reference();

  // .google.protobuf.StringValue friendly_name = 2 [(.google.api.field_behavior) = OPTIONAL];
  bool has_friendly_name() const;
  private:
  bool _internal_has_friendly_name() const;
  public:
  void clear_friendly_name();
  const ::PROTOBUF_NAMESPACE_ID::StringValue& friendly_name() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::StringValue* release_friendly_name();
  ::PROTOBUF_NAMESPACE_ID::StringValue* mutable_friendly_name();
  void set_allocated_friendly_name(::PROTOBUF_NAMESPACE_ID::StringValue* friendly_name);
  private:
  const ::PROTOBUF_NAMESPACE_ID::StringValue& _internal_friendly_name() const;
  ::PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_friendly_name();
  public:
  void unsafe_arena_set_allocated_friendly_name(
      ::PROTOBUF_NAMESPACE_ID::StringValue* friendly_name);
  ::PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_friendly_name();

  // .google.protobuf.StringValue description = 3 [(.google.api.field_behavior) = OPTIONAL];
  bool has_description() const;
  private:
  bool _internal_has_description() const;
  public:
  void clear_description();
  const ::PROTOBUF_NAMESPACE_ID::StringValue& description() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::StringValue* release_description();
  ::PROTOBUF_NAMESPACE_ID::StringValue* mutable_description();
  void set_allocated_description(::PROTOBUF_NAMESPACE_ID::StringValue* description);
  private:
  const ::PROTOBUF_NAMESPACE_ID::StringValue& _internal_description() const;
  ::PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_description();
  public:
  void unsafe_arena_set_allocated_description(
      ::PROTOBUF_NAMESPACE_ID::StringValue* description);
  ::PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_description();

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.analyticshub.v1.DestinationDataset)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        DestinationDataset_LabelsEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> labels_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr location_;
    ::google::cloud::bigquery::analyticshub::v1::DestinationDatasetReference* dataset_reference_;
    ::PROTOBUF_NAMESPACE_ID::StringValue* friendly_name_;
    ::PROTOBUF_NAMESPACE_ID::StringValue* description_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fanalyticshub_2fv1_2fanalyticshub_2eproto;
};
// -------------------------------------------------------------------

class Listing_BigQueryDatasetSource final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.analyticshub.v1.Listing.BigQueryDatasetSource) */ {
 public:
  inline Listing_BigQueryDatasetSource() : Listing_BigQueryDatasetSource(nullptr) {}
  ~Listing_BigQueryDatasetSource() override;
  explicit PROTOBUF_CONSTEXPR Listing_BigQueryDatasetSource(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Listing_BigQueryDatasetSource(const Listing_BigQueryDatasetSource& from);
  Listing_BigQueryDatasetSource(Listing_BigQueryDatasetSource&& from) noexcept
    : Listing_BigQueryDatasetSource() {
    *this = ::std::move(from);
  }

  inline Listing_BigQueryDatasetSource& operator=(const Listing_BigQueryDatasetSource& from) {
    CopyFrom(from);
    return *this;
  }
  inline Listing_BigQueryDatasetSource& operator=(Listing_BigQueryDatasetSource&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Listing_BigQueryDatasetSource& default_instance() {
    return *internal_default_instance();
  }
  static inline const Listing_BigQueryDatasetSource* internal_default_instance() {
    return reinterpret_cast<const Listing_BigQueryDatasetSource*>(
               &_Listing_BigQueryDatasetSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Listing_BigQueryDatasetSource& a, Listing_BigQueryDatasetSource& b) {
    a.Swap(&b);
  }
  inline void Swap(Listing_BigQueryDatasetSource* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Listing_BigQueryDatasetSource* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Listing_BigQueryDatasetSource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Listing_BigQueryDatasetSource>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Listing_BigQueryDatasetSource& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Listing_BigQueryDatasetSource& from) {
    Listing_BigQueryDatasetSource::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Listing_BigQueryDatasetSource* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.analyticshub.v1.Listing.BigQueryDatasetSource";
  }
  protected:
  explicit Listing_BigQueryDatasetSource(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatasetFieldNumber = 1,
  };
  // string dataset = 1 [(.google.api.resource_reference) = {
  void clear_dataset();
  const std::string& dataset() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dataset(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dataset();
  PROTOBUF_NODISCARD std::string* release_dataset();
  void set_allocated_dataset(std::string* dataset);
  private:
  const std::string& _internal_dataset() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dataset(const std::string& value);
  std::string* _internal_mutable_dataset();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.analyticshub.v1.Listing.BigQueryDatasetSource)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dataset_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fanalyticshub_2fv1_2fanalyticshub_2eproto;
};
// -------------------------------------------------------------------

class Listing final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.analyticshub.v1.Listing) */ {
 public:
  inline Listing() : Listing(nullptr) {}
  ~Listing() override;
  explicit PROTOBUF_CONSTEXPR Listing(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Listing(const Listing& from);
  Listing(Listing&& from) noexcept
    : Listing() {
    *this = ::std::move(from);
  }

  inline Listing& operator=(const Listing& from) {
    CopyFrom(from);
    return *this;
  }
  inline Listing& operator=(Listing&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Listing& default_instance() {
    return *internal_default_instance();
  }
  enum SourceCase {
    kBigqueryDataset = 6,
    SOURCE_NOT_SET = 0,
  };

  static inline const Listing* internal_default_instance() {
    return reinterpret_cast<const Listing*>(
               &_Listing_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Listing& a, Listing& b) {
    a.Swap(&b);
  }
  inline void Swap(Listing* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Listing* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Listing* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Listing>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Listing& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Listing& from) {
    Listing::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Listing* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.analyticshub.v1.Listing";
  }
  protected:
  explicit Listing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Listing_BigQueryDatasetSource BigQueryDatasetSource;

  typedef Listing_State State;
  static constexpr State STATE_UNSPECIFIED =
    Listing_State_STATE_UNSPECIFIED;
  static constexpr State ACTIVE =
    Listing_State_ACTIVE;
  static inline bool State_IsValid(int value) {
    return Listing_State_IsValid(value);
  }
  static constexpr State State_MIN =
    Listing_State_State_MIN;
  static constexpr State State_MAX =
    Listing_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    Listing_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return Listing_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return Listing_State_Name(enum_t_value);
  }
  static inline bool State_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      State* value) {
    return Listing_State_Parse(name, value);
  }

  typedef Listing_Category Category;
  static constexpr Category CATEGORY_UNSPECIFIED =
    Listing_Category_CATEGORY_UNSPECIFIED;
  static constexpr Category CATEGORY_OTHERS =
    Listing_Category_CATEGORY_OTHERS;
  static constexpr Category CATEGORY_ADVERTISING_AND_MARKETING =
    Listing_Category_CATEGORY_ADVERTISING_AND_MARKETING;
  static constexpr Category CATEGORY_COMMERCE =
    Listing_Category_CATEGORY_COMMERCE;
  static constexpr Category CATEGORY_CLIMATE_AND_ENVIRONMENT =
    Listing_Category_CATEGORY_CLIMATE_AND_ENVIRONMENT;
  static constexpr Category CATEGORY_DEMOGRAPHICS =
    Listing_Category_CATEGORY_DEMOGRAPHICS;
  static constexpr Category CATEGORY_ECONOMICS =
    Listing_Category_CATEGORY_ECONOMICS;
  static constexpr Category CATEGORY_EDUCATION =
    Listing_Category_CATEGORY_EDUCATION;
  static constexpr Category CATEGORY_ENERGY =
    Listing_Category_CATEGORY_ENERGY;
  static constexpr Category CATEGORY_FINANCIAL =
    Listing_Category_CATEGORY_FINANCIAL;
  static constexpr Category CATEGORY_GAMING =
    Listing_Category_CATEGORY_GAMING;
  static constexpr Category CATEGORY_GEOSPATIAL =
    Listing_Category_CATEGORY_GEOSPATIAL;
  static constexpr Category CATEGORY_HEALTHCARE_AND_LIFE_SCIENCE =
    Listing_Category_CATEGORY_HEALTHCARE_AND_LIFE_SCIENCE;
  static constexpr Category CATEGORY_MEDIA =
    Listing_Category_CATEGORY_MEDIA;
  static constexpr Category CATEGORY_PUBLIC_SECTOR =
    Listing_Category_CATEGORY_PUBLIC_SECTOR;
  static constexpr Category CATEGORY_RETAIL =
    Listing_Category_CATEGORY_RETAIL;
  static constexpr Category CATEGORY_SPORTS =
    Listing_Category_CATEGORY_SPORTS;
  static constexpr Category CATEGORY_SCIENCE_AND_RESEARCH =
    Listing_Category_CATEGORY_SCIENCE_AND_RESEARCH;
  static constexpr Category CATEGORY_TRANSPORTATION_AND_LOGISTICS =
    Listing_Category_CATEGORY_TRANSPORTATION_AND_LOGISTICS;
  static constexpr Category CATEGORY_TRAVEL_AND_TOURISM =
    Listing_Category_CATEGORY_TRAVEL_AND_TOURISM;
  static inline bool Category_IsValid(int value) {
    return Listing_Category_IsValid(value);
  }
  static constexpr Category Category_MIN =
    Listing_Category_Category_MIN;
  static constexpr Category Category_MAX =
    Listing_Category_Category_MAX;
  static constexpr int Category_ARRAYSIZE =
    Listing_Category_Category_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Category_descriptor() {
    return Listing_Category_descriptor();
  }
  template<typename T>
  static inline const std::string& Category_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Category>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Category_Name.");
    return Listing_Category_Name(enum_t_value);
  }
  static inline bool Category_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Category* value) {
    return Listing_Category_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCategoriesFieldNumber = 10,
    kNameFieldNumber = 1,
    kDisplayNameFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kPrimaryContactFieldNumber = 4,
    kDocumentationFieldNumber = 5,
    kIconFieldNumber = 8,
    kRequestAccessFieldNumber = 12,
    kDataProviderFieldNumber = 9,
    kPublisherFieldNumber = 11,
    kStateFieldNumber = 7,
    kBigqueryDatasetFieldNumber = 6,
  };
  // repeated .google.cloud.bigquery.analyticshub.v1.Listing.Category categories = 10 [(.google.api.field_behavior) = OPTIONAL];
  int categories_size() const;
  private:
  int _internal_categories_size() const;
  public:
  void clear_categories();
  private:
  ::google::cloud::bigquery::analyticshub::v1::Listing_Category _internal_categories(int index) const;
  void _internal_add_categories(::google::cloud::bigquery::analyticshub::v1::Listing_Category value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_categories();
  public:
  ::google::cloud::bigquery::analyticshub::v1::Listing_Category categories(int index) const;
  void set_categories(int index, ::google::cloud::bigquery::analyticshub::v1::Listing_Category value);
  void add_categories(::google::cloud::bigquery::analyticshub::v1::Listing_Category value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& categories() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_categories();

  // string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string display_name = 2 [(.google.api.field_behavior) = REQUIRED];
  void clear_display_name();
  const std::string& display_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_display_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_display_name();
  PROTOBUF_NODISCARD std::string* release_display_name();
  void set_allocated_display_name(std::string* display_name);
  private:
  const std::string& _internal_display_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_display_name(const std::string& value);
  std::string* _internal_mutable_display_name();
  public:

  // string description = 3 [(.google.api.field_behavior) = OPTIONAL];
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string primary_contact = 4 [(.google.api.field_behavior) = OPTIONAL];
  void clear_primary_contact();
  const std::string& primary_contact() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_primary_contact(ArgT0&& arg0, ArgT... args);
  std::string* mutable_primary_contact();
  PROTOBUF_NODISCARD std::string* release_primary_contact();
  void set_allocated_primary_contact(std::string* primary_contact);
  private:
  const std::string& _internal_primary_contact() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_primary_contact(const std::string& value);
  std::string* _internal_mutable_primary_contact();
  public:

  // string documentation = 5 [(.google.api.field_behavior) = OPTIONAL];
  void clear_documentation();
  const std::string& documentation() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_documentation(ArgT0&& arg0, ArgT... args);
  std::string* mutable_documentation();
  PROTOBUF_NODISCARD std::string* release_documentation();
  void set_allocated_documentation(std::string* documentation);
  private:
  const std::string& _internal_documentation() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_documentation(const std::string& value);
  std::string* _internal_mutable_documentation();
  public:

  // bytes icon = 8 [(.google.api.field_behavior) = OPTIONAL];
  void clear_icon();
  const std::string& icon() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_icon(ArgT0&& arg0, ArgT... args);
  std::string* mutable_icon();
  PROTOBUF_NODISCARD std::string* release_icon();
  void set_allocated_icon(std::string* icon);
  private:
  const std::string& _internal_icon() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_icon(const std::string& value);
  std::string* _internal_mutable_icon();
  public:

  // string request_access = 12 [(.google.api.field_behavior) = OPTIONAL];
  void clear_request_access();
  const std::string& request_access() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request_access(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request_access();
  PROTOBUF_NODISCARD std::string* release_request_access();
  void set_allocated_request_access(std::string* request_access);
  private:
  const std::string& _internal_request_access() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_access(const std::string& value);
  std::string* _internal_mutable_request_access();
  public:

  // .google.cloud.bigquery.analyticshub.v1.DataProvider data_provider = 9 [(.google.api.field_behavior) = OPTIONAL];
  bool has_data_provider() const;
  private:
  bool _internal_has_data_provider() const;
  public:
  void clear_data_provider();
  const ::google::cloud::bigquery::analyticshub::v1::DataProvider& data_provider() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::analyticshub::v1::DataProvider* release_data_provider();
  ::google::cloud::bigquery::analyticshub::v1::DataProvider* mutable_data_provider();
  void set_allocated_data_provider(::google::cloud::bigquery::analyticshub::v1::DataProvider* data_provider);
  private:
  const ::google::cloud::bigquery::analyticshub::v1::DataProvider& _internal_data_provider() const;
  ::google::cloud::bigquery::analyticshub::v1::DataProvider* _internal_mutable_data_provider();
  public:
  void unsafe_arena_set_allocated_data_provider(
      ::google::cloud::bigquery::analyticshub::v1::DataProvider* data_provider);
  ::google::cloud::bigquery::analyticshub::v1::DataProvider* unsafe_arena_release_data_provider();

  // .google.cloud.bigquery.analyticshub.v1.Publisher publisher = 11 [(.google.api.field_behavior) = OPTIONAL];
  bool has_publisher() const;
  private:
  bool _internal_has_publisher() const;
  public:
  void clear_publisher();
  const ::google::cloud::bigquery::analyticshub::v1::Publisher& publisher() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::analyticshub::v1::Publisher* release_publisher();
  ::google::cloud::bigquery::analyticshub::v1::Publisher* mutable_publisher();
  void set_allocated_publisher(::google::cloud::bigquery::analyticshub::v1::Publisher* publisher);
  private:
  const ::google::cloud::bigquery::analyticshub::v1::Publisher& _internal_publisher() const;
  ::google::cloud::bigquery::analyticshub::v1::Publisher* _internal_mutable_publisher();
  public:
  void unsafe_arena_set_allocated_publisher(
      ::google::cloud::bigquery::analyticshub::v1::Publisher* publisher);
  ::google::cloud::bigquery::analyticshub::v1::Publisher* unsafe_arena_release_publisher();

  // .google.cloud.bigquery.analyticshub.v1.Listing.State state = 7 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_state();
  ::google::cloud::bigquery::analyticshub::v1::Listing_State state() const;
  void set_state(::google::cloud::bigquery::analyticshub::v1::Listing_State value);
  private:
  ::google::cloud::bigquery::analyticshub::v1::Listing_State _internal_state() const;
  void _internal_set_state(::google::cloud::bigquery::analyticshub::v1::Listing_State value);
  public:

  // .google.cloud.bigquery.analyticshub.v1.Listing.BigQueryDatasetSource bigquery_dataset = 6 [(.google.api.field_behavior) = REQUIRED];
  bool has_bigquery_dataset() const;
  private:
  bool _internal_has_bigquery_dataset() const;
  public:
  void clear_bigquery_dataset();
  const ::google::cloud::bigquery::analyticshub::v1::Listing_BigQueryDatasetSource& bigquery_dataset() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::analyticshub::v1::Listing_BigQueryDatasetSource* release_bigquery_dataset();
  ::google::cloud::bigquery::analyticshub::v1::Listing_BigQueryDatasetSource* mutable_bigquery_dataset();
  void set_allocated_bigquery_dataset(::google::cloud::bigquery::analyticshub::v1::Listing_BigQueryDatasetSource* bigquery_dataset);
  private:
  const ::google::cloud::bigquery::analyticshub::v1::Listing_BigQueryDatasetSource& _internal_bigquery_dataset() const;
  ::google::cloud::bigquery::analyticshub::v1::Listing_BigQueryDatasetSource* _internal_mutable_bigquery_dataset();
  public:
  void unsafe_arena_set_allocated_bigquery_dataset(
      ::google::cloud::bigquery::analyticshub::v1::Listing_BigQueryDatasetSource* bigquery_dataset);
  ::google::cloud::bigquery::analyticshub::v1::Listing_BigQueryDatasetSource* unsafe_arena_release_bigquery_dataset();

  void clear_source();
  SourceCase source_case() const;
  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.analyticshub.v1.Listing)
 private:
  class _Internal;
  void set_has_bigquery_dataset();

  inline bool has_source() const;
  inline void clear_has_source();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> categories_;
    mutable std::atomic<int> _categories_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr primary_contact_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr documentation_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr icon_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_access_;
    ::google::cloud::bigquery::analyticshub::v1::DataProvider* data_provider_;
    ::google::cloud::bigquery::analyticshub::v1::Publisher* publisher_;
    int state_;
    union SourceUnion {
      constexpr SourceUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::google::cloud::bigquery::analyticshub::v1::Listing_BigQueryDatasetSource* bigquery_dataset_;
    } source_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fanalyticshub_2fv1_2fanalyticshub_2eproto;
};
// -------------------------------------------------------------------

class ListDataExchangesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.analyticshub.v1.ListDataExchangesRequest) */ {
 public:
  inline ListDataExchangesRequest() : ListDataExchangesRequest(nullptr) {}
  ~ListDataExchangesRequest() override;
  explicit PROTOBUF_CONSTEXPR ListDataExchangesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListDataExchangesRequest(const ListDataExchangesRequest& from);
  ListDataExchangesRequest(ListDataExchangesRequest&& from) noexcept
    : ListDataExchangesRequest() {
    *this = ::std::move(from);
  }

  inline ListDataExchangesRequest& operator=(const ListDataExchangesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListDataExchangesRequest& operator=(ListDataExchangesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListDataExchangesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListDataExchangesRequest* internal_default_instance() {
    return reinterpret_cast<const ListDataExchangesRequest*>(
               &_ListDataExchangesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ListDataExchangesRequest& a, ListDataExchangesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListDataExchangesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListDataExchangesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListDataExchangesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListDataExchangesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListDataExchangesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListDataExchangesRequest& from) {
    ListDataExchangesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListDataExchangesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.analyticshub.v1.ListDataExchangesRequest";
  }
  protected:
  explicit ListDataExchangesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kPageSizeFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 3;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 2;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.analyticshub.v1.ListDataExchangesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
    int32_t page_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fanalyticshub_2fv1_2fanalyticshub_2eproto;
};
// -------------------------------------------------------------------

class ListDataExchangesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.analyticshub.v1.ListDataExchangesResponse) */ {
 public:
  inline ListDataExchangesResponse() : ListDataExchangesResponse(nullptr) {}
  ~ListDataExchangesResponse() override;
  explicit PROTOBUF_CONSTEXPR ListDataExchangesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListDataExchangesResponse(const ListDataExchangesResponse& from);
  ListDataExchangesResponse(ListDataExchangesResponse&& from) noexcept
    : ListDataExchangesResponse() {
    *this = ::std::move(from);
  }

  inline ListDataExchangesResponse& operator=(const ListDataExchangesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListDataExchangesResponse& operator=(ListDataExchangesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListDataExchangesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListDataExchangesResponse* internal_default_instance() {
    return reinterpret_cast<const ListDataExchangesResponse*>(
               &_ListDataExchangesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ListDataExchangesResponse& a, ListDataExchangesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListDataExchangesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListDataExchangesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListDataExchangesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListDataExchangesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListDataExchangesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListDataExchangesResponse& from) {
    ListDataExchangesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListDataExchangesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.analyticshub.v1.ListDataExchangesResponse";
  }
  protected:
  explicit ListDataExchangesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataExchangesFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .google.cloud.bigquery.analyticshub.v1.DataExchange data_exchanges = 1;
  int data_exchanges_size() const;
  private:
  int _internal_data_exchanges_size() const;
  public:
  void clear_data_exchanges();
  ::google::cloud::bigquery::analyticshub::v1::DataExchange* mutable_data_exchanges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::analyticshub::v1::DataExchange >*
      mutable_data_exchanges();
  private:
  const ::google::cloud::bigquery::analyticshub::v1::DataExchange& _internal_data_exchanges(int index) const;
  ::google::cloud::bigquery::analyticshub::v1::DataExchange* _internal_add_data_exchanges();
  public:
  const ::google::cloud::bigquery::analyticshub::v1::DataExchange& data_exchanges(int index) const;
  ::google::cloud::bigquery::analyticshub::v1::DataExchange* add_data_exchanges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::analyticshub::v1::DataExchange >&
      data_exchanges() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.analyticshub.v1.ListDataExchangesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::analyticshub::v1::DataExchange > data_exchanges_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fanalyticshub_2fv1_2fanalyticshub_2eproto;
};
// -------------------------------------------------------------------

class ListOrgDataExchangesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.analyticshub.v1.ListOrgDataExchangesRequest) */ {
 public:
  inline ListOrgDataExchangesRequest() : ListOrgDataExchangesRequest(nullptr) {}
  ~ListOrgDataExchangesRequest() override;
  explicit PROTOBUF_CONSTEXPR ListOrgDataExchangesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListOrgDataExchangesRequest(const ListOrgDataExchangesRequest& from);
  ListOrgDataExchangesRequest(ListOrgDataExchangesRequest&& from) noexcept
    : ListOrgDataExchangesRequest() {
    *this = ::std::move(from);
  }

  inline ListOrgDataExchangesRequest& operator=(const ListOrgDataExchangesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListOrgDataExchangesRequest& operator=(ListOrgDataExchangesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListOrgDataExchangesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListOrgDataExchangesRequest* internal_default_instance() {
    return reinterpret_cast<const ListOrgDataExchangesRequest*>(
               &_ListOrgDataExchangesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ListOrgDataExchangesRequest& a, ListOrgDataExchangesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListOrgDataExchangesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListOrgDataExchangesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListOrgDataExchangesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListOrgDataExchangesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListOrgDataExchangesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListOrgDataExchangesRequest& from) {
    ListOrgDataExchangesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListOrgDataExchangesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.analyticshub.v1.ListOrgDataExchangesRequest";
  }
  protected:
  explicit ListOrgDataExchangesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrganizationFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kPageSizeFieldNumber = 2,
  };
  // string organization = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_organization();
  const std::string& organization() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_organization(ArgT0&& arg0, ArgT... args);
  std::string* mutable_organization();
  PROTOBUF_NODISCARD std::string* release_organization();
  void set_allocated_organization(std::string* organization);
  private:
  const std::string& _internal_organization() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_organization(const std::string& value);
  std::string* _internal_mutable_organization();
  public:

  // string page_token = 3;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 2;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.analyticshub.v1.ListOrgDataExchangesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr organization_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
    int32_t page_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fanalyticshub_2fv1_2fanalyticshub_2eproto;
};
// -------------------------------------------------------------------

class ListOrgDataExchangesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.analyticshub.v1.ListOrgDataExchangesResponse) */ {
 public:
  inline ListOrgDataExchangesResponse() : ListOrgDataExchangesResponse(nullptr) {}
  ~ListOrgDataExchangesResponse() override;
  explicit PROTOBUF_CONSTEXPR ListOrgDataExchangesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListOrgDataExchangesResponse(const ListOrgDataExchangesResponse& from);
  ListOrgDataExchangesResponse(ListOrgDataExchangesResponse&& from) noexcept
    : ListOrgDataExchangesResponse() {
    *this = ::std::move(from);
  }

  inline ListOrgDataExchangesResponse& operator=(const ListOrgDataExchangesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListOrgDataExchangesResponse& operator=(ListOrgDataExchangesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListOrgDataExchangesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListOrgDataExchangesResponse* internal_default_instance() {
    return reinterpret_cast<const ListOrgDataExchangesResponse*>(
               &_ListOrgDataExchangesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ListOrgDataExchangesResponse& a, ListOrgDataExchangesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListOrgDataExchangesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListOrgDataExchangesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListOrgDataExchangesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListOrgDataExchangesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListOrgDataExchangesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListOrgDataExchangesResponse& from) {
    ListOrgDataExchangesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListOrgDataExchangesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.analyticshub.v1.ListOrgDataExchangesResponse";
  }
  protected:
  explicit ListOrgDataExchangesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataExchangesFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .google.cloud.bigquery.analyticshub.v1.DataExchange data_exchanges = 1;
  int data_exchanges_size() const;
  private:
  int _internal_data_exchanges_size() const;
  public:
  void clear_data_exchanges();
  ::google::cloud::bigquery::analyticshub::v1::DataExchange* mutable_data_exchanges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::analyticshub::v1::DataExchange >*
      mutable_data_exchanges();
  private:
  const ::google::cloud::bigquery::analyticshub::v1::DataExchange& _internal_data_exchanges(int index) const;
  ::google::cloud::bigquery::analyticshub::v1::DataExchange* _internal_add_data_exchanges();
  public:
  const ::google::cloud::bigquery::analyticshub::v1::DataExchange& data_exchanges(int index) const;
  ::google::cloud::bigquery::analyticshub::v1::DataExchange* add_data_exchanges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::analyticshub::v1::DataExchange >&
      data_exchanges() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.analyticshub.v1.ListOrgDataExchangesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::analyticshub::v1::DataExchange > data_exchanges_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fanalyticshub_2fv1_2fanalyticshub_2eproto;
};
// -------------------------------------------------------------------

class GetDataExchangeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.analyticshub.v1.GetDataExchangeRequest) */ {
 public:
  inline GetDataExchangeRequest() : GetDataExchangeRequest(nullptr) {}
  ~GetDataExchangeRequest() override;
  explicit PROTOBUF_CONSTEXPR GetDataExchangeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetDataExchangeRequest(const GetDataExchangeRequest& from);
  GetDataExchangeRequest(GetDataExchangeRequest&& from) noexcept
    : GetDataExchangeRequest() {
    *this = ::std::move(from);
  }

  inline GetDataExchangeRequest& operator=(const GetDataExchangeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDataExchangeRequest& operator=(GetDataExchangeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetDataExchangeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetDataExchangeRequest* internal_default_instance() {
    return reinterpret_cast<const GetDataExchangeRequest*>(
               &_GetDataExchangeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GetDataExchangeRequest& a, GetDataExchangeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDataExchangeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDataExchangeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetDataExchangeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetDataExchangeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetDataExchangeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetDataExchangeRequest& from) {
    GetDataExchangeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDataExchangeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.analyticshub.v1.GetDataExchangeRequest";
  }
  protected:
  explicit GetDataExchangeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.analyticshub.v1.GetDataExchangeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fanalyticshub_2fv1_2fanalyticshub_2eproto;
};
// -------------------------------------------------------------------

class CreateDataExchangeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.analyticshub.v1.CreateDataExchangeRequest) */ {
 public:
  inline CreateDataExchangeRequest() : CreateDataExchangeRequest(nullptr) {}
  ~CreateDataExchangeRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateDataExchangeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateDataExchangeRequest(const CreateDataExchangeRequest& from);
  CreateDataExchangeRequest(CreateDataExchangeRequest&& from) noexcept
    : CreateDataExchangeRequest() {
    *this = ::std::move(from);
  }

  inline CreateDataExchangeRequest& operator=(const CreateDataExchangeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateDataExchangeRequest& operator=(CreateDataExchangeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateDataExchangeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateDataExchangeRequest* internal_default_instance() {
    return reinterpret_cast<const CreateDataExchangeRequest*>(
               &_CreateDataExchangeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CreateDataExchangeRequest& a, CreateDataExchangeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateDataExchangeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateDataExchangeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateDataExchangeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateDataExchangeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateDataExchangeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateDataExchangeRequest& from) {
    CreateDataExchangeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateDataExchangeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.analyticshub.v1.CreateDataExchangeRequest";
  }
  protected:
  explicit CreateDataExchangeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kDataExchangeIdFieldNumber = 2,
    kDataExchangeFieldNumber = 3,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string data_exchange_id = 2 [(.google.api.field_behavior) = REQUIRED];
  void clear_data_exchange_id();
  const std::string& data_exchange_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data_exchange_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data_exchange_id();
  PROTOBUF_NODISCARD std::string* release_data_exchange_id();
  void set_allocated_data_exchange_id(std::string* data_exchange_id);
  private:
  const std::string& _internal_data_exchange_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data_exchange_id(const std::string& value);
  std::string* _internal_mutable_data_exchange_id();
  public:

  // .google.cloud.bigquery.analyticshub.v1.DataExchange data_exchange = 3 [(.google.api.field_behavior) = REQUIRED];
  bool has_data_exchange() const;
  private:
  bool _internal_has_data_exchange() const;
  public:
  void clear_data_exchange();
  const ::google::cloud::bigquery::analyticshub::v1::DataExchange& data_exchange() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::analyticshub::v1::DataExchange* release_data_exchange();
  ::google::cloud::bigquery::analyticshub::v1::DataExchange* mutable_data_exchange();
  void set_allocated_data_exchange(::google::cloud::bigquery::analyticshub::v1::DataExchange* data_exchange);
  private:
  const ::google::cloud::bigquery::analyticshub::v1::DataExchange& _internal_data_exchange() const;
  ::google::cloud::bigquery::analyticshub::v1::DataExchange* _internal_mutable_data_exchange();
  public:
  void unsafe_arena_set_allocated_data_exchange(
      ::google::cloud::bigquery::analyticshub::v1::DataExchange* data_exchange);
  ::google::cloud::bigquery::analyticshub::v1::DataExchange* unsafe_arena_release_data_exchange();

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.analyticshub.v1.CreateDataExchangeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_exchange_id_;
    ::google::cloud::bigquery::analyticshub::v1::DataExchange* data_exchange_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fanalyticshub_2fv1_2fanalyticshub_2eproto;
};
// -------------------------------------------------------------------

class UpdateDataExchangeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.analyticshub.v1.UpdateDataExchangeRequest) */ {
 public:
  inline UpdateDataExchangeRequest() : UpdateDataExchangeRequest(nullptr) {}
  ~UpdateDataExchangeRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateDataExchangeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateDataExchangeRequest(const UpdateDataExchangeRequest& from);
  UpdateDataExchangeRequest(UpdateDataExchangeRequest&& from) noexcept
    : UpdateDataExchangeRequest() {
    *this = ::std::move(from);
  }

  inline UpdateDataExchangeRequest& operator=(const UpdateDataExchangeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateDataExchangeRequest& operator=(UpdateDataExchangeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateDataExchangeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateDataExchangeRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateDataExchangeRequest*>(
               &_UpdateDataExchangeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(UpdateDataExchangeRequest& a, UpdateDataExchangeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateDataExchangeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateDataExchangeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateDataExchangeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateDataExchangeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateDataExchangeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateDataExchangeRequest& from) {
    UpdateDataExchangeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateDataExchangeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.analyticshub.v1.UpdateDataExchangeRequest";
  }
  protected:
  explicit UpdateDataExchangeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdateMaskFieldNumber = 1,
    kDataExchangeFieldNumber = 2,
  };
  // .google.protobuf.FieldMask update_mask = 1 [(.google.api.field_behavior) = REQUIRED];
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // .google.cloud.bigquery.analyticshub.v1.DataExchange data_exchange = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_data_exchange() const;
  private:
  bool _internal_has_data_exchange() const;
  public:
  void clear_data_exchange();
  const ::google::cloud::bigquery::analyticshub::v1::DataExchange& data_exchange() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::analyticshub::v1::DataExchange* release_data_exchange();
  ::google::cloud::bigquery::analyticshub::v1::DataExchange* mutable_data_exchange();
  void set_allocated_data_exchange(::google::cloud::bigquery::analyticshub::v1::DataExchange* data_exchange);
  private:
  const ::google::cloud::bigquery::analyticshub::v1::DataExchange& _internal_data_exchange() const;
  ::google::cloud::bigquery::analyticshub::v1::DataExchange* _internal_mutable_data_exchange();
  public:
  void unsafe_arena_set_allocated_data_exchange(
      ::google::cloud::bigquery::analyticshub::v1::DataExchange* data_exchange);
  ::google::cloud::bigquery::analyticshub::v1::DataExchange* unsafe_arena_release_data_exchange();

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.analyticshub.v1.UpdateDataExchangeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
    ::google::cloud::bigquery::analyticshub::v1::DataExchange* data_exchange_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fanalyticshub_2fv1_2fanalyticshub_2eproto;
};
// -------------------------------------------------------------------

class DeleteDataExchangeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.analyticshub.v1.DeleteDataExchangeRequest) */ {
 public:
  inline DeleteDataExchangeRequest() : DeleteDataExchangeRequest(nullptr) {}
  ~DeleteDataExchangeRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteDataExchangeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteDataExchangeRequest(const DeleteDataExchangeRequest& from);
  DeleteDataExchangeRequest(DeleteDataExchangeRequest&& from) noexcept
    : DeleteDataExchangeRequest() {
    *this = ::std::move(from);
  }

  inline DeleteDataExchangeRequest& operator=(const DeleteDataExchangeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteDataExchangeRequest& operator=(DeleteDataExchangeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteDataExchangeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteDataExchangeRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteDataExchangeRequest*>(
               &_DeleteDataExchangeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(DeleteDataExchangeRequest& a, DeleteDataExchangeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteDataExchangeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteDataExchangeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteDataExchangeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteDataExchangeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteDataExchangeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteDataExchangeRequest& from) {
    DeleteDataExchangeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteDataExchangeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.analyticshub.v1.DeleteDataExchangeRequest";
  }
  protected:
  explicit DeleteDataExchangeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.analyticshub.v1.DeleteDataExchangeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fanalyticshub_2fv1_2fanalyticshub_2eproto;
};
// -------------------------------------------------------------------

class ListListingsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.analyticshub.v1.ListListingsRequest) */ {
 public:
  inline ListListingsRequest() : ListListingsRequest(nullptr) {}
  ~ListListingsRequest() override;
  explicit PROTOBUF_CONSTEXPR ListListingsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListListingsRequest(const ListListingsRequest& from);
  ListListingsRequest(ListListingsRequest&& from) noexcept
    : ListListingsRequest() {
    *this = ::std::move(from);
  }

  inline ListListingsRequest& operator=(const ListListingsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListListingsRequest& operator=(ListListingsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListListingsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListListingsRequest* internal_default_instance() {
    return reinterpret_cast<const ListListingsRequest*>(
               &_ListListingsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ListListingsRequest& a, ListListingsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListListingsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListListingsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListListingsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListListingsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListListingsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListListingsRequest& from) {
    ListListingsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListListingsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.analyticshub.v1.ListListingsRequest";
  }
  protected:
  explicit ListListingsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kPageSizeFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 3;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 2;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.analyticshub.v1.ListListingsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
    int32_t page_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fanalyticshub_2fv1_2fanalyticshub_2eproto;
};
// -------------------------------------------------------------------

class ListListingsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.analyticshub.v1.ListListingsResponse) */ {
 public:
  inline ListListingsResponse() : ListListingsResponse(nullptr) {}
  ~ListListingsResponse() override;
  explicit PROTOBUF_CONSTEXPR ListListingsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListListingsResponse(const ListListingsResponse& from);
  ListListingsResponse(ListListingsResponse&& from) noexcept
    : ListListingsResponse() {
    *this = ::std::move(from);
  }

  inline ListListingsResponse& operator=(const ListListingsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListListingsResponse& operator=(ListListingsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListListingsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListListingsResponse* internal_default_instance() {
    return reinterpret_cast<const ListListingsResponse*>(
               &_ListListingsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ListListingsResponse& a, ListListingsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListListingsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListListingsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListListingsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListListingsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListListingsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListListingsResponse& from) {
    ListListingsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListListingsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.analyticshub.v1.ListListingsResponse";
  }
  protected:
  explicit ListListingsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListingsFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .google.cloud.bigquery.analyticshub.v1.Listing listings = 1;
  int listings_size() const;
  private:
  int _internal_listings_size() const;
  public:
  void clear_listings();
  ::google::cloud::bigquery::analyticshub::v1::Listing* mutable_listings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::analyticshub::v1::Listing >*
      mutable_listings();
  private:
  const ::google::cloud::bigquery::analyticshub::v1::Listing& _internal_listings(int index) const;
  ::google::cloud::bigquery::analyticshub::v1::Listing* _internal_add_listings();
  public:
  const ::google::cloud::bigquery::analyticshub::v1::Listing& listings(int index) const;
  ::google::cloud::bigquery::analyticshub::v1::Listing* add_listings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::analyticshub::v1::Listing >&
      listings() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.analyticshub.v1.ListListingsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::analyticshub::v1::Listing > listings_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fanalyticshub_2fv1_2fanalyticshub_2eproto;
};
// -------------------------------------------------------------------

class GetListingRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.analyticshub.v1.GetListingRequest) */ {
 public:
  inline GetListingRequest() : GetListingRequest(nullptr) {}
  ~GetListingRequest() override;
  explicit PROTOBUF_CONSTEXPR GetListingRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetListingRequest(const GetListingRequest& from);
  GetListingRequest(GetListingRequest&& from) noexcept
    : GetListingRequest() {
    *this = ::std::move(from);
  }

  inline GetListingRequest& operator=(const GetListingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetListingRequest& operator=(GetListingRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetListingRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetListingRequest* internal_default_instance() {
    return reinterpret_cast<const GetListingRequest*>(
               &_GetListingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(GetListingRequest& a, GetListingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetListingRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetListingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetListingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetListingRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetListingRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetListingRequest& from) {
    GetListingRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetListingRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.analyticshub.v1.GetListingRequest";
  }
  protected:
  explicit GetListingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.analyticshub.v1.GetListingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fanalyticshub_2fv1_2fanalyticshub_2eproto;
};
// -------------------------------------------------------------------

class CreateListingRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.analyticshub.v1.CreateListingRequest) */ {
 public:
  inline CreateListingRequest() : CreateListingRequest(nullptr) {}
  ~CreateListingRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateListingRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateListingRequest(const CreateListingRequest& from);
  CreateListingRequest(CreateListingRequest&& from) noexcept
    : CreateListingRequest() {
    *this = ::std::move(from);
  }

  inline CreateListingRequest& operator=(const CreateListingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateListingRequest& operator=(CreateListingRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateListingRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateListingRequest* internal_default_instance() {
    return reinterpret_cast<const CreateListingRequest*>(
               &_CreateListingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CreateListingRequest& a, CreateListingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateListingRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateListingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateListingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateListingRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateListingRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateListingRequest& from) {
    CreateListingRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateListingRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.analyticshub.v1.CreateListingRequest";
  }
  protected:
  explicit CreateListingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kListingIdFieldNumber = 2,
    kListingFieldNumber = 3,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string listing_id = 2 [(.google.api.field_behavior) = REQUIRED];
  void clear_listing_id();
  const std::string& listing_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_listing_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_listing_id();
  PROTOBUF_NODISCARD std::string* release_listing_id();
  void set_allocated_listing_id(std::string* listing_id);
  private:
  const std::string& _internal_listing_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_listing_id(const std::string& value);
  std::string* _internal_mutable_listing_id();
  public:

  // .google.cloud.bigquery.analyticshub.v1.Listing listing = 3 [(.google.api.field_behavior) = REQUIRED];
  bool has_listing() const;
  private:
  bool _internal_has_listing() const;
  public:
  void clear_listing();
  const ::google::cloud::bigquery::analyticshub::v1::Listing& listing() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::analyticshub::v1::Listing* release_listing();
  ::google::cloud::bigquery::analyticshub::v1::Listing* mutable_listing();
  void set_allocated_listing(::google::cloud::bigquery::analyticshub::v1::Listing* listing);
  private:
  const ::google::cloud::bigquery::analyticshub::v1::Listing& _internal_listing() const;
  ::google::cloud::bigquery::analyticshub::v1::Listing* _internal_mutable_listing();
  public:
  void unsafe_arena_set_allocated_listing(
      ::google::cloud::bigquery::analyticshub::v1::Listing* listing);
  ::google::cloud::bigquery::analyticshub::v1::Listing* unsafe_arena_release_listing();

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.analyticshub.v1.CreateListingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr listing_id_;
    ::google::cloud::bigquery::analyticshub::v1::Listing* listing_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fanalyticshub_2fv1_2fanalyticshub_2eproto;
};
// -------------------------------------------------------------------

class UpdateListingRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.analyticshub.v1.UpdateListingRequest) */ {
 public:
  inline UpdateListingRequest() : UpdateListingRequest(nullptr) {}
  ~UpdateListingRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateListingRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateListingRequest(const UpdateListingRequest& from);
  UpdateListingRequest(UpdateListingRequest&& from) noexcept
    : UpdateListingRequest() {
    *this = ::std::move(from);
  }

  inline UpdateListingRequest& operator=(const UpdateListingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateListingRequest& operator=(UpdateListingRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateListingRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateListingRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateListingRequest*>(
               &_UpdateListingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(UpdateListingRequest& a, UpdateListingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateListingRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateListingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateListingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateListingRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateListingRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateListingRequest& from) {
    UpdateListingRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateListingRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.analyticshub.v1.UpdateListingRequest";
  }
  protected:
  explicit UpdateListingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdateMaskFieldNumber = 1,
    kListingFieldNumber = 2,
  };
  // .google.protobuf.FieldMask update_mask = 1 [(.google.api.field_behavior) = REQUIRED];
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // .google.cloud.bigquery.analyticshub.v1.Listing listing = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_listing() const;
  private:
  bool _internal_has_listing() const;
  public:
  void clear_listing();
  const ::google::cloud::bigquery::analyticshub::v1::Listing& listing() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::analyticshub::v1::Listing* release_listing();
  ::google::cloud::bigquery::analyticshub::v1::Listing* mutable_listing();
  void set_allocated_listing(::google::cloud::bigquery::analyticshub::v1::Listing* listing);
  private:
  const ::google::cloud::bigquery::analyticshub::v1::Listing& _internal_listing() const;
  ::google::cloud::bigquery::analyticshub::v1::Listing* _internal_mutable_listing();
  public:
  void unsafe_arena_set_allocated_listing(
      ::google::cloud::bigquery::analyticshub::v1::Listing* listing);
  ::google::cloud::bigquery::analyticshub::v1::Listing* unsafe_arena_release_listing();

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.analyticshub.v1.UpdateListingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
    ::google::cloud::bigquery::analyticshub::v1::Listing* listing_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fanalyticshub_2fv1_2fanalyticshub_2eproto;
};
// -------------------------------------------------------------------

class DeleteListingRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.analyticshub.v1.DeleteListingRequest) */ {
 public:
  inline DeleteListingRequest() : DeleteListingRequest(nullptr) {}
  ~DeleteListingRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteListingRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteListingRequest(const DeleteListingRequest& from);
  DeleteListingRequest(DeleteListingRequest&& from) noexcept
    : DeleteListingRequest() {
    *this = ::std::move(from);
  }

  inline DeleteListingRequest& operator=(const DeleteListingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteListingRequest& operator=(DeleteListingRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteListingRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteListingRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteListingRequest*>(
               &_DeleteListingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(DeleteListingRequest& a, DeleteListingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteListingRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteListingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteListingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteListingRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteListingRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteListingRequest& from) {
    DeleteListingRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteListingRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.analyticshub.v1.DeleteListingRequest";
  }
  protected:
  explicit DeleteListingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.analyticshub.v1.DeleteListingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fanalyticshub_2fv1_2fanalyticshub_2eproto;
};
// -------------------------------------------------------------------

class SubscribeListingRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.analyticshub.v1.SubscribeListingRequest) */ {
 public:
  inline SubscribeListingRequest() : SubscribeListingRequest(nullptr) {}
  ~SubscribeListingRequest() override;
  explicit PROTOBUF_CONSTEXPR SubscribeListingRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeListingRequest(const SubscribeListingRequest& from);
  SubscribeListingRequest(SubscribeListingRequest&& from) noexcept
    : SubscribeListingRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeListingRequest& operator=(const SubscribeListingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeListingRequest& operator=(SubscribeListingRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeListingRequest& default_instance() {
    return *internal_default_instance();
  }
  enum DestinationCase {
    kDestinationDataset = 3,
    DESTINATION_NOT_SET = 0,
  };

  static inline const SubscribeListingRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeListingRequest*>(
               &_SubscribeListingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(SubscribeListingRequest& a, SubscribeListingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeListingRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeListingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeListingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeListingRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SubscribeListingRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SubscribeListingRequest& from) {
    SubscribeListingRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeListingRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.analyticshub.v1.SubscribeListingRequest";
  }
  protected:
  explicit SubscribeListingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDestinationDatasetFieldNumber = 3,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.cloud.bigquery.analyticshub.v1.DestinationDataset destination_dataset = 3;
  bool has_destination_dataset() const;
  private:
  bool _internal_has_destination_dataset() const;
  public:
  void clear_destination_dataset();
  const ::google::cloud::bigquery::analyticshub::v1::DestinationDataset& destination_dataset() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::analyticshub::v1::DestinationDataset* release_destination_dataset();
  ::google::cloud::bigquery::analyticshub::v1::DestinationDataset* mutable_destination_dataset();
  void set_allocated_destination_dataset(::google::cloud::bigquery::analyticshub::v1::DestinationDataset* destination_dataset);
  private:
  const ::google::cloud::bigquery::analyticshub::v1::DestinationDataset& _internal_destination_dataset() const;
  ::google::cloud::bigquery::analyticshub::v1::DestinationDataset* _internal_mutable_destination_dataset();
  public:
  void unsafe_arena_set_allocated_destination_dataset(
      ::google::cloud::bigquery::analyticshub::v1::DestinationDataset* destination_dataset);
  ::google::cloud::bigquery::analyticshub::v1::DestinationDataset* unsafe_arena_release_destination_dataset();

  void clear_destination();
  DestinationCase destination_case() const;
  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.analyticshub.v1.SubscribeListingRequest)
 private:
  class _Internal;
  void set_has_destination_dataset();

  inline bool has_destination() const;
  inline void clear_has_destination();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    union DestinationUnion {
      constexpr DestinationUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::google::cloud::bigquery::analyticshub::v1::DestinationDataset* destination_dataset_;
    } destination_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fanalyticshub_2fv1_2fanalyticshub_2eproto;
};
// -------------------------------------------------------------------

class SubscribeListingResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.analyticshub.v1.SubscribeListingResponse) */ {
 public:
  inline SubscribeListingResponse() : SubscribeListingResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SubscribeListingResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeListingResponse(const SubscribeListingResponse& from);
  SubscribeListingResponse(SubscribeListingResponse&& from) noexcept
    : SubscribeListingResponse() {
    *this = ::std::move(from);
  }

  inline SubscribeListingResponse& operator=(const SubscribeListingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeListingResponse& operator=(SubscribeListingResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeListingResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeListingResponse* internal_default_instance() {
    return reinterpret_cast<const SubscribeListingResponse*>(
               &_SubscribeListingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(SubscribeListingResponse& a, SubscribeListingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeListingResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeListingResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeListingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeListingResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeListingResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeListingResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.analyticshub.v1.SubscribeListingResponse";
  }
  protected:
  explicit SubscribeListingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.analyticshub.v1.SubscribeListingResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fanalyticshub_2fv1_2fanalyticshub_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DataExchange

// string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void DataExchange::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DataExchange::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.analyticshub.v1.DataExchange.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DataExchange::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.analyticshub.v1.DataExchange.name)
}
inline std::string* DataExchange::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.analyticshub.v1.DataExchange.name)
  return _s;
}
inline const std::string& DataExchange::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DataExchange::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DataExchange::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* DataExchange::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.analyticshub.v1.DataExchange.name)
  return _impl_.name_.Release();
}
inline void DataExchange::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.analyticshub.v1.DataExchange.name)
}

// string display_name = 2 [(.google.api.field_behavior) = REQUIRED];
inline void DataExchange::clear_display_name() {
  _impl_.display_name_.ClearToEmpty();
}
inline const std::string& DataExchange::display_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.analyticshub.v1.DataExchange.display_name)
  return _internal_display_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DataExchange::set_display_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.display_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.analyticshub.v1.DataExchange.display_name)
}
inline std::string* DataExchange::mutable_display_name() {
  std::string* _s = _internal_mutable_display_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.analyticshub.v1.DataExchange.display_name)
  return _s;
}
inline const std::string& DataExchange::_internal_display_name() const {
  return _impl_.display_name_.Get();
}
inline void DataExchange::_internal_set_display_name(const std::string& value) {
  
  _impl_.display_name_.Set(value, GetArenaForAllocation());
}
inline std::string* DataExchange::_internal_mutable_display_name() {
  
  return _impl_.display_name_.Mutable(GetArenaForAllocation());
}
inline std::string* DataExchange::release_display_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.analyticshub.v1.DataExchange.display_name)
  return _impl_.display_name_.Release();
}
inline void DataExchange::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    
  } else {
    
  }
  _impl_.display_name_.SetAllocated(display_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.display_name_.IsDefault()) {
    _impl_.display_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.analyticshub.v1.DataExchange.display_name)
}

// string description = 3 [(.google.api.field_behavior) = OPTIONAL];
inline void DataExchange::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& DataExchange::description() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.analyticshub.v1.DataExchange.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DataExchange::set_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.analyticshub.v1.DataExchange.description)
}
inline std::string* DataExchange::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.analyticshub.v1.DataExchange.description)
  return _s;
}
inline const std::string& DataExchange::_internal_description() const {
  return _impl_.description_.Get();
}
inline void DataExchange::_internal_set_description(const std::string& value) {
  
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* DataExchange::_internal_mutable_description() {
  
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* DataExchange::release_description() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.analyticshub.v1.DataExchange.description)
  return _impl_.description_.Release();
}
inline void DataExchange::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.analyticshub.v1.DataExchange.description)
}

// string primary_contact = 4 [(.google.api.field_behavior) = OPTIONAL];
inline void DataExchange::clear_primary_contact() {
  _impl_.primary_contact_.ClearToEmpty();
}
inline const std::string& DataExchange::primary_contact() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.analyticshub.v1.DataExchange.primary_contact)
  return _internal_primary_contact();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DataExchange::set_primary_contact(ArgT0&& arg0, ArgT... args) {
 
 _impl_.primary_contact_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.analyticshub.v1.DataExchange.primary_contact)
}
inline std::string* DataExchange::mutable_primary_contact() {
  std::string* _s = _internal_mutable_primary_contact();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.analyticshub.v1.DataExchange.primary_contact)
  return _s;
}
inline const std::string& DataExchange::_internal_primary_contact() const {
  return _impl_.primary_contact_.Get();
}
inline void DataExchange::_internal_set_primary_contact(const std::string& value) {
  
  _impl_.primary_contact_.Set(value, GetArenaForAllocation());
}
inline std::string* DataExchange::_internal_mutable_primary_contact() {
  
  return _impl_.primary_contact_.Mutable(GetArenaForAllocation());
}
inline std::string* DataExchange::release_primary_contact() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.analyticshub.v1.DataExchange.primary_contact)
  return _impl_.primary_contact_.Release();
}
inline void DataExchange::set_allocated_primary_contact(std::string* primary_contact) {
  if (primary_contact != nullptr) {
    
  } else {
    
  }
  _impl_.primary_contact_.SetAllocated(primary_contact, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.primary_contact_.IsDefault()) {
    _impl_.primary_contact_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.analyticshub.v1.DataExchange.primary_contact)
}

// string documentation = 5 [(.google.api.field_behavior) = OPTIONAL];
inline void DataExchange::clear_documentation() {
  _impl_.documentation_.ClearToEmpty();
}
inline const std::string& DataExchange::documentation() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.analyticshub.v1.DataExchange.documentation)
  return _internal_documentation();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DataExchange::set_documentation(ArgT0&& arg0, ArgT... args) {
 
 _impl_.documentation_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.analyticshub.v1.DataExchange.documentation)
}
inline std::string* DataExchange::mutable_documentation() {
  std::string* _s = _internal_mutable_documentation();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.analyticshub.v1.DataExchange.documentation)
  return _s;
}
inline const std::string& DataExchange::_internal_documentation() const {
  return _impl_.documentation_.Get();
}
inline void DataExchange::_internal_set_documentation(const std::string& value) {
  
  _impl_.documentation_.Set(value, GetArenaForAllocation());
}
inline std::string* DataExchange::_internal_mutable_documentation() {
  
  return _impl_.documentation_.Mutable(GetArenaForAllocation());
}
inline std::string* DataExchange::release_documentation() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.analyticshub.v1.DataExchange.documentation)
  return _impl_.documentation_.Release();
}
inline void DataExchange::set_allocated_documentation(std::string* documentation) {
  if (documentation != nullptr) {
    
  } else {
    
  }
  _impl_.documentation_.SetAllocated(documentation, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.documentation_.IsDefault()) {
    _impl_.documentation_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.analyticshub.v1.DataExchange.documentation)
}

// int32 listing_count = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void DataExchange::clear_listing_count() {
  _impl_.listing_count_ = 0;
}
inline int32_t DataExchange::_internal_listing_count() const {
  return _impl_.listing_count_;
}
inline int32_t DataExchange::listing_count() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.analyticshub.v1.DataExchange.listing_count)
  return _internal_listing_count();
}
inline void DataExchange::_internal_set_listing_count(int32_t value) {
  
  _impl_.listing_count_ = value;
}
inline void DataExchange::set_listing_count(int32_t value) {
  _internal_set_listing_count(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.analyticshub.v1.DataExchange.listing_count)
}

// bytes icon = 7 [(.google.api.field_behavior) = OPTIONAL];
inline void DataExchange::clear_icon() {
  _impl_.icon_.ClearToEmpty();
}
inline const std::string& DataExchange::icon() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.analyticshub.v1.DataExchange.icon)
  return _internal_icon();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DataExchange::set_icon(ArgT0&& arg0, ArgT... args) {
 
 _impl_.icon_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.analyticshub.v1.DataExchange.icon)
}
inline std::string* DataExchange::mutable_icon() {
  std::string* _s = _internal_mutable_icon();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.analyticshub.v1.DataExchange.icon)
  return _s;
}
inline const std::string& DataExchange::_internal_icon() const {
  return _impl_.icon_.Get();
}
inline void DataExchange::_internal_set_icon(const std::string& value) {
  
  _impl_.icon_.Set(value, GetArenaForAllocation());
}
inline std::string* DataExchange::_internal_mutable_icon() {
  
  return _impl_.icon_.Mutable(GetArenaForAllocation());
}
inline std::string* DataExchange::release_icon() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.analyticshub.v1.DataExchange.icon)
  return _impl_.icon_.Release();
}
inline void DataExchange::set_allocated_icon(std::string* icon) {
  if (icon != nullptr) {
    
  } else {
    
  }
  _impl_.icon_.SetAllocated(icon, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.icon_.IsDefault()) {
    _impl_.icon_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.analyticshub.v1.DataExchange.icon)
}

// -------------------------------------------------------------------

// DataProvider

// string name = 1 [(.google.api.field_behavior) = OPTIONAL];
inline void DataProvider::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DataProvider::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.analyticshub.v1.DataProvider.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DataProvider::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.analyticshub.v1.DataProvider.name)
}
inline std::string* DataProvider::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.analyticshub.v1.DataProvider.name)
  return _s;
}
inline const std::string& DataProvider::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DataProvider::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DataProvider::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* DataProvider::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.analyticshub.v1.DataProvider.name)
  return _impl_.name_.Release();
}
inline void DataProvider::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.analyticshub.v1.DataProvider.name)
}

// string primary_contact = 2 [(.google.api.field_behavior) = OPTIONAL];
inline void DataProvider::clear_primary_contact() {
  _impl_.primary_contact_.ClearToEmpty();
}
inline const std::string& DataProvider::primary_contact() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.analyticshub.v1.DataProvider.primary_contact)
  return _internal_primary_contact();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DataProvider::set_primary_contact(ArgT0&& arg0, ArgT... args) {
 
 _impl_.primary_contact_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.analyticshub.v1.DataProvider.primary_contact)
}
inline std::string* DataProvider::mutable_primary_contact() {
  std::string* _s = _internal_mutable_primary_contact();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.analyticshub.v1.DataProvider.primary_contact)
  return _s;
}
inline const std::string& DataProvider::_internal_primary_contact() const {
  return _impl_.primary_contact_.Get();
}
inline void DataProvider::_internal_set_primary_contact(const std::string& value) {
  
  _impl_.primary_contact_.Set(value, GetArenaForAllocation());
}
inline std::string* DataProvider::_internal_mutable_primary_contact() {
  
  return _impl_.primary_contact_.Mutable(GetArenaForAllocation());
}
inline std::string* DataProvider::release_primary_contact() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.analyticshub.v1.DataProvider.primary_contact)
  return _impl_.primary_contact_.Release();
}
inline void DataProvider::set_allocated_primary_contact(std::string* primary_contact) {
  if (primary_contact != nullptr) {
    
  } else {
    
  }
  _impl_.primary_contact_.SetAllocated(primary_contact, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.primary_contact_.IsDefault()) {
    _impl_.primary_contact_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.analyticshub.v1.DataProvider.primary_contact)
}

// -------------------------------------------------------------------

// Publisher

// string name = 1 [(.google.api.field_behavior) = OPTIONAL];
inline void Publisher::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Publisher::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.analyticshub.v1.Publisher.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Publisher::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.analyticshub.v1.Publisher.name)
}
inline std::string* Publisher::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.analyticshub.v1.Publisher.name)
  return _s;
}
inline const std::string& Publisher::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Publisher::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Publisher::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Publisher::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.analyticshub.v1.Publisher.name)
  return _impl_.name_.Release();
}
inline void Publisher::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.analyticshub.v1.Publisher.name)
}

// string primary_contact = 2 [(.google.api.field_behavior) = OPTIONAL];
inline void Publisher::clear_primary_contact() {
  _impl_.primary_contact_.ClearToEmpty();
}
inline const std::string& Publisher::primary_contact() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.analyticshub.v1.Publisher.primary_contact)
  return _internal_primary_contact();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Publisher::set_primary_contact(ArgT0&& arg0, ArgT... args) {
 
 _impl_.primary_contact_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.analyticshub.v1.Publisher.primary_contact)
}
inline std::string* Publisher::mutable_primary_contact() {
  std::string* _s = _internal_mutable_primary_contact();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.analyticshub.v1.Publisher.primary_contact)
  return _s;
}
inline const std::string& Publisher::_internal_primary_contact() const {
  return _impl_.primary_contact_.Get();
}
inline void Publisher::_internal_set_primary_contact(const std::string& value) {
  
  _impl_.primary_contact_.Set(value, GetArenaForAllocation());
}
inline std::string* Publisher::_internal_mutable_primary_contact() {
  
  return _impl_.primary_contact_.Mutable(GetArenaForAllocation());
}
inline std::string* Publisher::release_primary_contact() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.analyticshub.v1.Publisher.primary_contact)
  return _impl_.primary_contact_.Release();
}
inline void Publisher::set_allocated_primary_contact(std::string* primary_contact) {
  if (primary_contact != nullptr) {
    
  } else {
    
  }
  _impl_.primary_contact_.SetAllocated(primary_contact, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.primary_contact_.IsDefault()) {
    _impl_.primary_contact_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.analyticshub.v1.Publisher.primary_contact)
}

// -------------------------------------------------------------------

// DestinationDatasetReference

// string dataset_id = 1 [(.google.api.field_behavior) = REQUIRED];
inline void DestinationDatasetReference::clear_dataset_id() {
  _impl_.dataset_id_.ClearToEmpty();
}
inline const std::string& DestinationDatasetReference::dataset_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.analyticshub.v1.DestinationDatasetReference.dataset_id)
  return _internal_dataset_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DestinationDatasetReference::set_dataset_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.dataset_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.analyticshub.v1.DestinationDatasetReference.dataset_id)
}
inline std::string* DestinationDatasetReference::mutable_dataset_id() {
  std::string* _s = _internal_mutable_dataset_id();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.analyticshub.v1.DestinationDatasetReference.dataset_id)
  return _s;
}
inline const std::string& DestinationDatasetReference::_internal_dataset_id() const {
  return _impl_.dataset_id_.Get();
}
inline void DestinationDatasetReference::_internal_set_dataset_id(const std::string& value) {
  
  _impl_.dataset_id_.Set(value, GetArenaForAllocation());
}
inline std::string* DestinationDatasetReference::_internal_mutable_dataset_id() {
  
  return _impl_.dataset_id_.Mutable(GetArenaForAllocation());
}
inline std::string* DestinationDatasetReference::release_dataset_id() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.analyticshub.v1.DestinationDatasetReference.dataset_id)
  return _impl_.dataset_id_.Release();
}
inline void DestinationDatasetReference::set_allocated_dataset_id(std::string* dataset_id) {
  if (dataset_id != nullptr) {
    
  } else {
    
  }
  _impl_.dataset_id_.SetAllocated(dataset_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dataset_id_.IsDefault()) {
    _impl_.dataset_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.analyticshub.v1.DestinationDatasetReference.dataset_id)
}

// string project_id = 2 [(.google.api.field_behavior) = REQUIRED];
inline void DestinationDatasetReference::clear_project_id() {
  _impl_.project_id_.ClearToEmpty();
}
inline const std::string& DestinationDatasetReference::project_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.analyticshub.v1.DestinationDatasetReference.project_id)
  return _internal_project_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DestinationDatasetReference::set_project_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.project_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.analyticshub.v1.DestinationDatasetReference.project_id)
}
inline std::string* DestinationDatasetReference::mutable_project_id() {
  std::string* _s = _internal_mutable_project_id();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.analyticshub.v1.DestinationDatasetReference.project_id)
  return _s;
}
inline const std::string& DestinationDatasetReference::_internal_project_id() const {
  return _impl_.project_id_.Get();
}
inline void DestinationDatasetReference::_internal_set_project_id(const std::string& value) {
  
  _impl_.project_id_.Set(value, GetArenaForAllocation());
}
inline std::string* DestinationDatasetReference::_internal_mutable_project_id() {
  
  return _impl_.project_id_.Mutable(GetArenaForAllocation());
}
inline std::string* DestinationDatasetReference::release_project_id() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.analyticshub.v1.DestinationDatasetReference.project_id)
  return _impl_.project_id_.Release();
}
inline void DestinationDatasetReference::set_allocated_project_id(std::string* project_id) {
  if (project_id != nullptr) {
    
  } else {
    
  }
  _impl_.project_id_.SetAllocated(project_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.project_id_.IsDefault()) {
    _impl_.project_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.analyticshub.v1.DestinationDatasetReference.project_id)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// DestinationDataset

// .google.cloud.bigquery.analyticshub.v1.DestinationDatasetReference dataset_reference = 1 [(.google.api.field_behavior) = REQUIRED];
inline bool DestinationDataset::_internal_has_dataset_reference() const {
  return this != internal_default_instance() && _impl_.dataset_reference_ != nullptr;
}
inline bool DestinationDataset::has_dataset_reference() const {
  return _internal_has_dataset_reference();
}
inline void DestinationDataset::clear_dataset_reference() {
  if (GetArenaForAllocation() == nullptr && _impl_.dataset_reference_ != nullptr) {
    delete _impl_.dataset_reference_;
  }
  _impl_.dataset_reference_ = nullptr;
}
inline const ::google::cloud::bigquery::analyticshub::v1::DestinationDatasetReference& DestinationDataset::_internal_dataset_reference() const {
  const ::google::cloud::bigquery::analyticshub::v1::DestinationDatasetReference* p = _impl_.dataset_reference_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::analyticshub::v1::DestinationDatasetReference&>(
      ::google::cloud::bigquery::analyticshub::v1::_DestinationDatasetReference_default_instance_);
}
inline const ::google::cloud::bigquery::analyticshub::v1::DestinationDatasetReference& DestinationDataset::dataset_reference() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.analyticshub.v1.DestinationDataset.dataset_reference)
  return _internal_dataset_reference();
}
inline void DestinationDataset::unsafe_arena_set_allocated_dataset_reference(
    ::google::cloud::bigquery::analyticshub::v1::DestinationDatasetReference* dataset_reference) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dataset_reference_);
  }
  _impl_.dataset_reference_ = dataset_reference;
  if (dataset_reference) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.analyticshub.v1.DestinationDataset.dataset_reference)
}
inline ::google::cloud::bigquery::analyticshub::v1::DestinationDatasetReference* DestinationDataset::release_dataset_reference() {
  
  ::google::cloud::bigquery::analyticshub::v1::DestinationDatasetReference* temp = _impl_.dataset_reference_;
  _impl_.dataset_reference_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::analyticshub::v1::DestinationDatasetReference* DestinationDataset::unsafe_arena_release_dataset_reference() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.analyticshub.v1.DestinationDataset.dataset_reference)
  
  ::google::cloud::bigquery::analyticshub::v1::DestinationDatasetReference* temp = _impl_.dataset_reference_;
  _impl_.dataset_reference_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::analyticshub::v1::DestinationDatasetReference* DestinationDataset::_internal_mutable_dataset_reference() {
  
  if (_impl_.dataset_reference_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::analyticshub::v1::DestinationDatasetReference>(GetArenaForAllocation());
    _impl_.dataset_reference_ = p;
  }
  return _impl_.dataset_reference_;
}
inline ::google::cloud::bigquery::analyticshub::v1::DestinationDatasetReference* DestinationDataset::mutable_dataset_reference() {
  ::google::cloud::bigquery::analyticshub::v1::DestinationDatasetReference* _msg = _internal_mutable_dataset_reference();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.analyticshub.v1.DestinationDataset.dataset_reference)
  return _msg;
}
inline void DestinationDataset::set_allocated_dataset_reference(::google::cloud::bigquery::analyticshub::v1::DestinationDatasetReference* dataset_reference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.dataset_reference_;
  }
  if (dataset_reference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(dataset_reference);
    if (message_arena != submessage_arena) {
      dataset_reference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dataset_reference, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.dataset_reference_ = dataset_reference;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.analyticshub.v1.DestinationDataset.dataset_reference)
}

// .google.protobuf.StringValue friendly_name = 2 [(.google.api.field_behavior) = OPTIONAL];
inline bool DestinationDataset::_internal_has_friendly_name() const {
  return this != internal_default_instance() && _impl_.friendly_name_ != nullptr;
}
inline bool DestinationDataset::has_friendly_name() const {
  return _internal_has_friendly_name();
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& DestinationDataset::_internal_friendly_name() const {
  const ::PROTOBUF_NAMESPACE_ID::StringValue* p = _impl_.friendly_name_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::StringValue&>(
      ::PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& DestinationDataset::friendly_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.analyticshub.v1.DestinationDataset.friendly_name)
  return _internal_friendly_name();
}
inline void DestinationDataset::unsafe_arena_set_allocated_friendly_name(
    ::PROTOBUF_NAMESPACE_ID::StringValue* friendly_name) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.friendly_name_);
  }
  _impl_.friendly_name_ = friendly_name;
  if (friendly_name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.analyticshub.v1.DestinationDataset.friendly_name)
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* DestinationDataset::release_friendly_name() {
  
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = _impl_.friendly_name_;
  _impl_.friendly_name_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* DestinationDataset::unsafe_arena_release_friendly_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.analyticshub.v1.DestinationDataset.friendly_name)
  
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = _impl_.friendly_name_;
  _impl_.friendly_name_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* DestinationDataset::_internal_mutable_friendly_name() {
  
  if (_impl_.friendly_name_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::StringValue>(GetArenaForAllocation());
    _impl_.friendly_name_ = p;
  }
  return _impl_.friendly_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* DestinationDataset::mutable_friendly_name() {
  ::PROTOBUF_NAMESPACE_ID::StringValue* _msg = _internal_mutable_friendly_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.analyticshub.v1.DestinationDataset.friendly_name)
  return _msg;
}
inline void DestinationDataset::set_allocated_friendly_name(::PROTOBUF_NAMESPACE_ID::StringValue* friendly_name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.friendly_name_);
  }
  if (friendly_name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(friendly_name));
    if (message_arena != submessage_arena) {
      friendly_name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, friendly_name, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.friendly_name_ = friendly_name;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.analyticshub.v1.DestinationDataset.friendly_name)
}

// .google.protobuf.StringValue description = 3 [(.google.api.field_behavior) = OPTIONAL];
inline bool DestinationDataset::_internal_has_description() const {
  return this != internal_default_instance() && _impl_.description_ != nullptr;
}
inline bool DestinationDataset::has_description() const {
  return _internal_has_description();
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& DestinationDataset::_internal_description() const {
  const ::PROTOBUF_NAMESPACE_ID::StringValue* p = _impl_.description_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::StringValue&>(
      ::PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& DestinationDataset::description() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.analyticshub.v1.DestinationDataset.description)
  return _internal_description();
}
inline void DestinationDataset::unsafe_arena_set_allocated_description(
    ::PROTOBUF_NAMESPACE_ID::StringValue* description) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.description_);
  }
  _impl_.description_ = description;
  if (description) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.analyticshub.v1.DestinationDataset.description)
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* DestinationDataset::release_description() {
  
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = _impl_.description_;
  _impl_.description_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* DestinationDataset::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.analyticshub.v1.DestinationDataset.description)
  
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = _impl_.description_;
  _impl_.description_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* DestinationDataset::_internal_mutable_description() {
  
  if (_impl_.description_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::StringValue>(GetArenaForAllocation());
    _impl_.description_ = p;
  }
  return _impl_.description_;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* DestinationDataset::mutable_description() {
  ::PROTOBUF_NAMESPACE_ID::StringValue* _msg = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.analyticshub.v1.DestinationDataset.description)
  return _msg;
}
inline void DestinationDataset::set_allocated_description(::PROTOBUF_NAMESPACE_ID::StringValue* description) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.description_);
  }
  if (description) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(description));
    if (message_arena != submessage_arena) {
      description = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, description, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.description_ = description;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.analyticshub.v1.DestinationDataset.description)
}

// map<string, string> labels = 4 [(.google.api.field_behavior) = OPTIONAL];
inline int DestinationDataset::_internal_labels_size() const {
  return _impl_.labels_.size();
}
inline int DestinationDataset::labels_size() const {
  return _internal_labels_size();
}
inline void DestinationDataset::clear_labels() {
  _impl_.labels_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
DestinationDataset::_internal_labels() const {
  return _impl_.labels_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
DestinationDataset::labels() const {
  // @@protoc_insertion_point(field_map:google.cloud.bigquery.analyticshub.v1.DestinationDataset.labels)
  return _internal_labels();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
DestinationDataset::_internal_mutable_labels() {
  return _impl_.labels_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
DestinationDataset::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:google.cloud.bigquery.analyticshub.v1.DestinationDataset.labels)
  return _internal_mutable_labels();
}

// string location = 5 [(.google.api.field_behavior) = REQUIRED];
inline void DestinationDataset::clear_location() {
  _impl_.location_.ClearToEmpty();
}
inline const std::string& DestinationDataset::location() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.analyticshub.v1.DestinationDataset.location)
  return _internal_location();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DestinationDataset::set_location(ArgT0&& arg0, ArgT... args) {
 
 _impl_.location_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.analyticshub.v1.DestinationDataset.location)
}
inline std::string* DestinationDataset::mutable_location() {
  std::string* _s = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.analyticshub.v1.DestinationDataset.location)
  return _s;
}
inline const std::string& DestinationDataset::_internal_location() const {
  return _impl_.location_.Get();
}
inline void DestinationDataset::_internal_set_location(const std::string& value) {
  
  _impl_.location_.Set(value, GetArenaForAllocation());
}
inline std::string* DestinationDataset::_internal_mutable_location() {
  
  return _impl_.location_.Mutable(GetArenaForAllocation());
}
inline std::string* DestinationDataset::release_location() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.analyticshub.v1.DestinationDataset.location)
  return _impl_.location_.Release();
}
inline void DestinationDataset::set_allocated_location(std::string* location) {
  if (location != nullptr) {
    
  } else {
    
  }
  _impl_.location_.SetAllocated(location, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.location_.IsDefault()) {
    _impl_.location_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.analyticshub.v1.DestinationDataset.location)
}

// -------------------------------------------------------------------

// Listing_BigQueryDatasetSource

// string dataset = 1 [(.google.api.resource_reference) = {
inline void Listing_BigQueryDatasetSource::clear_dataset() {
  _impl_.dataset_.ClearToEmpty();
}
inline const std::string& Listing_BigQueryDatasetSource::dataset() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.analyticshub.v1.Listing.BigQueryDatasetSource.dataset)
  return _internal_dataset();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Listing_BigQueryDatasetSource::set_dataset(ArgT0&& arg0, ArgT... args) {
 
 _impl_.dataset_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.analyticshub.v1.Listing.BigQueryDatasetSource.dataset)
}
inline std::string* Listing_BigQueryDatasetSource::mutable_dataset() {
  std::string* _s = _internal_mutable_dataset();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.analyticshub.v1.Listing.BigQueryDatasetSource.dataset)
  return _s;
}
inline const std::string& Listing_BigQueryDatasetSource::_internal_dataset() const {
  return _impl_.dataset_.Get();
}
inline void Listing_BigQueryDatasetSource::_internal_set_dataset(const std::string& value) {
  
  _impl_.dataset_.Set(value, GetArenaForAllocation());
}
inline std::string* Listing_BigQueryDatasetSource::_internal_mutable_dataset() {
  
  return _impl_.dataset_.Mutable(GetArenaForAllocation());
}
inline std::string* Listing_BigQueryDatasetSource::release_dataset() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.analyticshub.v1.Listing.BigQueryDatasetSource.dataset)
  return _impl_.dataset_.Release();
}
inline void Listing_BigQueryDatasetSource::set_allocated_dataset(std::string* dataset) {
  if (dataset != nullptr) {
    
  } else {
    
  }
  _impl_.dataset_.SetAllocated(dataset, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dataset_.IsDefault()) {
    _impl_.dataset_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.analyticshub.v1.Listing.BigQueryDatasetSource.dataset)
}

// -------------------------------------------------------------------

// Listing

// .google.cloud.bigquery.analyticshub.v1.Listing.BigQueryDatasetSource bigquery_dataset = 6 [(.google.api.field_behavior) = REQUIRED];
inline bool Listing::_internal_has_bigquery_dataset() const {
  return source_case() == kBigqueryDataset;
}
inline bool Listing::has_bigquery_dataset() const {
  return _internal_has_bigquery_dataset();
}
inline void Listing::set_has_bigquery_dataset() {
  _impl_._oneof_case_[0] = kBigqueryDataset;
}
inline void Listing::clear_bigquery_dataset() {
  if (_internal_has_bigquery_dataset()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.source_.bigquery_dataset_;
    }
    clear_has_source();
  }
}
inline ::google::cloud::bigquery::analyticshub::v1::Listing_BigQueryDatasetSource* Listing::release_bigquery_dataset() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.analyticshub.v1.Listing.bigquery_dataset)
  if (_internal_has_bigquery_dataset()) {
    clear_has_source();
    ::google::cloud::bigquery::analyticshub::v1::Listing_BigQueryDatasetSource* temp = _impl_.source_.bigquery_dataset_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.source_.bigquery_dataset_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::bigquery::analyticshub::v1::Listing_BigQueryDatasetSource& Listing::_internal_bigquery_dataset() const {
  return _internal_has_bigquery_dataset()
      ? *_impl_.source_.bigquery_dataset_
      : reinterpret_cast< ::google::cloud::bigquery::analyticshub::v1::Listing_BigQueryDatasetSource&>(::google::cloud::bigquery::analyticshub::v1::_Listing_BigQueryDatasetSource_default_instance_);
}
inline const ::google::cloud::bigquery::analyticshub::v1::Listing_BigQueryDatasetSource& Listing::bigquery_dataset() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.analyticshub.v1.Listing.bigquery_dataset)
  return _internal_bigquery_dataset();
}
inline ::google::cloud::bigquery::analyticshub::v1::Listing_BigQueryDatasetSource* Listing::unsafe_arena_release_bigquery_dataset() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.bigquery.analyticshub.v1.Listing.bigquery_dataset)
  if (_internal_has_bigquery_dataset()) {
    clear_has_source();
    ::google::cloud::bigquery::analyticshub::v1::Listing_BigQueryDatasetSource* temp = _impl_.source_.bigquery_dataset_;
    _impl_.source_.bigquery_dataset_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Listing::unsafe_arena_set_allocated_bigquery_dataset(::google::cloud::bigquery::analyticshub::v1::Listing_BigQueryDatasetSource* bigquery_dataset) {
  clear_source();
  if (bigquery_dataset) {
    set_has_bigquery_dataset();
    _impl_.source_.bigquery_dataset_ = bigquery_dataset;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.analyticshub.v1.Listing.bigquery_dataset)
}
inline ::google::cloud::bigquery::analyticshub::v1::Listing_BigQueryDatasetSource* Listing::_internal_mutable_bigquery_dataset() {
  if (!_internal_has_bigquery_dataset()) {
    clear_source();
    set_has_bigquery_dataset();
    _impl_.source_.bigquery_dataset_ = CreateMaybeMessage< ::google::cloud::bigquery::analyticshub::v1::Listing_BigQueryDatasetSource >(GetArenaForAllocation());
  }
  return _impl_.source_.bigquery_dataset_;
}
inline ::google::cloud::bigquery::analyticshub::v1::Listing_BigQueryDatasetSource* Listing::mutable_bigquery_dataset() {
  ::google::cloud::bigquery::analyticshub::v1::Listing_BigQueryDatasetSource* _msg = _internal_mutable_bigquery_dataset();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.analyticshub.v1.Listing.bigquery_dataset)
  return _msg;
}

// string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void Listing::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Listing::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.analyticshub.v1.Listing.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Listing::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.analyticshub.v1.Listing.name)
}
inline std::string* Listing::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.analyticshub.v1.Listing.name)
  return _s;
}
inline const std::string& Listing::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Listing::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Listing::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Listing::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.analyticshub.v1.Listing.name)
  return _impl_.name_.Release();
}
inline void Listing::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.analyticshub.v1.Listing.name)
}

// string display_name = 2 [(.google.api.field_behavior) = REQUIRED];
inline void Listing::clear_display_name() {
  _impl_.display_name_.ClearToEmpty();
}
inline const std::string& Listing::display_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.analyticshub.v1.Listing.display_name)
  return _internal_display_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Listing::set_display_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.display_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.analyticshub.v1.Listing.display_name)
}
inline std::string* Listing::mutable_display_name() {
  std::string* _s = _internal_mutable_display_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.analyticshub.v1.Listing.display_name)
  return _s;
}
inline const std::string& Listing::_internal_display_name() const {
  return _impl_.display_name_.Get();
}
inline void Listing::_internal_set_display_name(const std::string& value) {
  
  _impl_.display_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Listing::_internal_mutable_display_name() {
  
  return _impl_.display_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Listing::release_display_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.analyticshub.v1.Listing.display_name)
  return _impl_.display_name_.Release();
}
inline void Listing::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    
  } else {
    
  }
  _impl_.display_name_.SetAllocated(display_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.display_name_.IsDefault()) {
    _impl_.display_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.analyticshub.v1.Listing.display_name)
}

// string description = 3 [(.google.api.field_behavior) = OPTIONAL];
inline void Listing::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& Listing::description() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.analyticshub.v1.Listing.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Listing::set_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.analyticshub.v1.Listing.description)
}
inline std::string* Listing::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.analyticshub.v1.Listing.description)
  return _s;
}
inline const std::string& Listing::_internal_description() const {
  return _impl_.description_.Get();
}
inline void Listing::_internal_set_description(const std::string& value) {
  
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* Listing::_internal_mutable_description() {
  
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* Listing::release_description() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.analyticshub.v1.Listing.description)
  return _impl_.description_.Release();
}
inline void Listing::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.analyticshub.v1.Listing.description)
}

// string primary_contact = 4 [(.google.api.field_behavior) = OPTIONAL];
inline void Listing::clear_primary_contact() {
  _impl_.primary_contact_.ClearToEmpty();
}
inline const std::string& Listing::primary_contact() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.analyticshub.v1.Listing.primary_contact)
  return _internal_primary_contact();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Listing::set_primary_contact(ArgT0&& arg0, ArgT... args) {
 
 _impl_.primary_contact_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.analyticshub.v1.Listing.primary_contact)
}
inline std::string* Listing::mutable_primary_contact() {
  std::string* _s = _internal_mutable_primary_contact();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.analyticshub.v1.Listing.primary_contact)
  return _s;
}
inline const std::string& Listing::_internal_primary_contact() const {
  return _impl_.primary_contact_.Get();
}
inline void Listing::_internal_set_primary_contact(const std::string& value) {
  
  _impl_.primary_contact_.Set(value, GetArenaForAllocation());
}
inline std::string* Listing::_internal_mutable_primary_contact() {
  
  return _impl_.primary_contact_.Mutable(GetArenaForAllocation());
}
inline std::string* Listing::release_primary_contact() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.analyticshub.v1.Listing.primary_contact)
  return _impl_.primary_contact_.Release();
}
inline void Listing::set_allocated_primary_contact(std::string* primary_contact) {
  if (primary_contact != nullptr) {
    
  } else {
    
  }
  _impl_.primary_contact_.SetAllocated(primary_contact, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.primary_contact_.IsDefault()) {
    _impl_.primary_contact_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.analyticshub.v1.Listing.primary_contact)
}

// string documentation = 5 [(.google.api.field_behavior) = OPTIONAL];
inline void Listing::clear_documentation() {
  _impl_.documentation_.ClearToEmpty();
}
inline const std::string& Listing::documentation() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.analyticshub.v1.Listing.documentation)
  return _internal_documentation();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Listing::set_documentation(ArgT0&& arg0, ArgT... args) {
 
 _impl_.documentation_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.analyticshub.v1.Listing.documentation)
}
inline std::string* Listing::mutable_documentation() {
  std::string* _s = _internal_mutable_documentation();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.analyticshub.v1.Listing.documentation)
  return _s;
}
inline const std::string& Listing::_internal_documentation() const {
  return _impl_.documentation_.Get();
}
inline void Listing::_internal_set_documentation(const std::string& value) {
  
  _impl_.documentation_.Set(value, GetArenaForAllocation());
}
inline std::string* Listing::_internal_mutable_documentation() {
  
  return _impl_.documentation_.Mutable(GetArenaForAllocation());
}
inline std::string* Listing::release_documentation() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.analyticshub.v1.Listing.documentation)
  return _impl_.documentation_.Release();
}
inline void Listing::set_allocated_documentation(std::string* documentation) {
  if (documentation != nullptr) {
    
  } else {
    
  }
  _impl_.documentation_.SetAllocated(documentation, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.documentation_.IsDefault()) {
    _impl_.documentation_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.analyticshub.v1.Listing.documentation)
}

// .google.cloud.bigquery.analyticshub.v1.Listing.State state = 7 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void Listing::clear_state() {
  _impl_.state_ = 0;
}
inline ::google::cloud::bigquery::analyticshub::v1::Listing_State Listing::_internal_state() const {
  return static_cast< ::google::cloud::bigquery::analyticshub::v1::Listing_State >(_impl_.state_);
}
inline ::google::cloud::bigquery::analyticshub::v1::Listing_State Listing::state() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.analyticshub.v1.Listing.state)
  return _internal_state();
}
inline void Listing::_internal_set_state(::google::cloud::bigquery::analyticshub::v1::Listing_State value) {
  
  _impl_.state_ = value;
}
inline void Listing::set_state(::google::cloud::bigquery::analyticshub::v1::Listing_State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.analyticshub.v1.Listing.state)
}

// bytes icon = 8 [(.google.api.field_behavior) = OPTIONAL];
inline void Listing::clear_icon() {
  _impl_.icon_.ClearToEmpty();
}
inline const std::string& Listing::icon() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.analyticshub.v1.Listing.icon)
  return _internal_icon();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Listing::set_icon(ArgT0&& arg0, ArgT... args) {
 
 _impl_.icon_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.analyticshub.v1.Listing.icon)
}
inline std::string* Listing::mutable_icon() {
  std::string* _s = _internal_mutable_icon();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.analyticshub.v1.Listing.icon)
  return _s;
}
inline const std::string& Listing::_internal_icon() const {
  return _impl_.icon_.Get();
}
inline void Listing::_internal_set_icon(const std::string& value) {
  
  _impl_.icon_.Set(value, GetArenaForAllocation());
}
inline std::string* Listing::_internal_mutable_icon() {
  
  return _impl_.icon_.Mutable(GetArenaForAllocation());
}
inline std::string* Listing::release_icon() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.analyticshub.v1.Listing.icon)
  return _impl_.icon_.Release();
}
inline void Listing::set_allocated_icon(std::string* icon) {
  if (icon != nullptr) {
    
  } else {
    
  }
  _impl_.icon_.SetAllocated(icon, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.icon_.IsDefault()) {
    _impl_.icon_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.analyticshub.v1.Listing.icon)
}

// .google.cloud.bigquery.analyticshub.v1.DataProvider data_provider = 9 [(.google.api.field_behavior) = OPTIONAL];
inline bool Listing::_internal_has_data_provider() const {
  return this != internal_default_instance() && _impl_.data_provider_ != nullptr;
}
inline bool Listing::has_data_provider() const {
  return _internal_has_data_provider();
}
inline void Listing::clear_data_provider() {
  if (GetArenaForAllocation() == nullptr && _impl_.data_provider_ != nullptr) {
    delete _impl_.data_provider_;
  }
  _impl_.data_provider_ = nullptr;
}
inline const ::google::cloud::bigquery::analyticshub::v1::DataProvider& Listing::_internal_data_provider() const {
  const ::google::cloud::bigquery::analyticshub::v1::DataProvider* p = _impl_.data_provider_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::analyticshub::v1::DataProvider&>(
      ::google::cloud::bigquery::analyticshub::v1::_DataProvider_default_instance_);
}
inline const ::google::cloud::bigquery::analyticshub::v1::DataProvider& Listing::data_provider() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.analyticshub.v1.Listing.data_provider)
  return _internal_data_provider();
}
inline void Listing::unsafe_arena_set_allocated_data_provider(
    ::google::cloud::bigquery::analyticshub::v1::DataProvider* data_provider) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_provider_);
  }
  _impl_.data_provider_ = data_provider;
  if (data_provider) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.analyticshub.v1.Listing.data_provider)
}
inline ::google::cloud::bigquery::analyticshub::v1::DataProvider* Listing::release_data_provider() {
  
  ::google::cloud::bigquery::analyticshub::v1::DataProvider* temp = _impl_.data_provider_;
  _impl_.data_provider_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::analyticshub::v1::DataProvider* Listing::unsafe_arena_release_data_provider() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.analyticshub.v1.Listing.data_provider)
  
  ::google::cloud::bigquery::analyticshub::v1::DataProvider* temp = _impl_.data_provider_;
  _impl_.data_provider_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::analyticshub::v1::DataProvider* Listing::_internal_mutable_data_provider() {
  
  if (_impl_.data_provider_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::analyticshub::v1::DataProvider>(GetArenaForAllocation());
    _impl_.data_provider_ = p;
  }
  return _impl_.data_provider_;
}
inline ::google::cloud::bigquery::analyticshub::v1::DataProvider* Listing::mutable_data_provider() {
  ::google::cloud::bigquery::analyticshub::v1::DataProvider* _msg = _internal_mutable_data_provider();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.analyticshub.v1.Listing.data_provider)
  return _msg;
}
inline void Listing::set_allocated_data_provider(::google::cloud::bigquery::analyticshub::v1::DataProvider* data_provider) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.data_provider_;
  }
  if (data_provider) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data_provider);
    if (message_arena != submessage_arena) {
      data_provider = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data_provider, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.data_provider_ = data_provider;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.analyticshub.v1.Listing.data_provider)
}

// repeated .google.cloud.bigquery.analyticshub.v1.Listing.Category categories = 10 [(.google.api.field_behavior) = OPTIONAL];
inline int Listing::_internal_categories_size() const {
  return _impl_.categories_.size();
}
inline int Listing::categories_size() const {
  return _internal_categories_size();
}
inline void Listing::clear_categories() {
  _impl_.categories_.Clear();
}
inline ::google::cloud::bigquery::analyticshub::v1::Listing_Category Listing::_internal_categories(int index) const {
  return static_cast< ::google::cloud::bigquery::analyticshub::v1::Listing_Category >(_impl_.categories_.Get(index));
}
inline ::google::cloud::bigquery::analyticshub::v1::Listing_Category Listing::categories(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.analyticshub.v1.Listing.categories)
  return _internal_categories(index);
}
inline void Listing::set_categories(int index, ::google::cloud::bigquery::analyticshub::v1::Listing_Category value) {
  _impl_.categories_.Set(index, value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.analyticshub.v1.Listing.categories)
}
inline void Listing::_internal_add_categories(::google::cloud::bigquery::analyticshub::v1::Listing_Category value) {
  _impl_.categories_.Add(value);
}
inline void Listing::add_categories(::google::cloud::bigquery::analyticshub::v1::Listing_Category value) {
  _internal_add_categories(value);
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.analyticshub.v1.Listing.categories)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
Listing::categories() const {
  // @@protoc_insertion_point(field_list:google.cloud.bigquery.analyticshub.v1.Listing.categories)
  return _impl_.categories_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Listing::_internal_mutable_categories() {
  return &_impl_.categories_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Listing::mutable_categories() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.bigquery.analyticshub.v1.Listing.categories)
  return _internal_mutable_categories();
}

// .google.cloud.bigquery.analyticshub.v1.Publisher publisher = 11 [(.google.api.field_behavior) = OPTIONAL];
inline bool Listing::_internal_has_publisher() const {
  return this != internal_default_instance() && _impl_.publisher_ != nullptr;
}
inline bool Listing::has_publisher() const {
  return _internal_has_publisher();
}
inline void Listing::clear_publisher() {
  if (GetArenaForAllocation() == nullptr && _impl_.publisher_ != nullptr) {
    delete _impl_.publisher_;
  }
  _impl_.publisher_ = nullptr;
}
inline const ::google::cloud::bigquery::analyticshub::v1::Publisher& Listing::_internal_publisher() const {
  const ::google::cloud::bigquery::analyticshub::v1::Publisher* p = _impl_.publisher_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::analyticshub::v1::Publisher&>(
      ::google::cloud::bigquery::analyticshub::v1::_Publisher_default_instance_);
}
inline const ::google::cloud::bigquery::analyticshub::v1::Publisher& Listing::publisher() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.analyticshub.v1.Listing.publisher)
  return _internal_publisher();
}
inline void Listing::unsafe_arena_set_allocated_publisher(
    ::google::cloud::bigquery::analyticshub::v1::Publisher* publisher) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.publisher_);
  }
  _impl_.publisher_ = publisher;
  if (publisher) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.analyticshub.v1.Listing.publisher)
}
inline ::google::cloud::bigquery::analyticshub::v1::Publisher* Listing::release_publisher() {
  
  ::google::cloud::bigquery::analyticshub::v1::Publisher* temp = _impl_.publisher_;
  _impl_.publisher_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::analyticshub::v1::Publisher* Listing::unsafe_arena_release_publisher() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.analyticshub.v1.Listing.publisher)
  
  ::google::cloud::bigquery::analyticshub::v1::Publisher* temp = _impl_.publisher_;
  _impl_.publisher_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::analyticshub::v1::Publisher* Listing::_internal_mutable_publisher() {
  
  if (_impl_.publisher_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::analyticshub::v1::Publisher>(GetArenaForAllocation());
    _impl_.publisher_ = p;
  }
  return _impl_.publisher_;
}
inline ::google::cloud::bigquery::analyticshub::v1::Publisher* Listing::mutable_publisher() {
  ::google::cloud::bigquery::analyticshub::v1::Publisher* _msg = _internal_mutable_publisher();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.analyticshub.v1.Listing.publisher)
  return _msg;
}
inline void Listing::set_allocated_publisher(::google::cloud::bigquery::analyticshub::v1::Publisher* publisher) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.publisher_;
  }
  if (publisher) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(publisher);
    if (message_arena != submessage_arena) {
      publisher = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, publisher, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.publisher_ = publisher;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.analyticshub.v1.Listing.publisher)
}

// string request_access = 12 [(.google.api.field_behavior) = OPTIONAL];
inline void Listing::clear_request_access() {
  _impl_.request_access_.ClearToEmpty();
}
inline const std::string& Listing::request_access() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.analyticshub.v1.Listing.request_access)
  return _internal_request_access();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Listing::set_request_access(ArgT0&& arg0, ArgT... args) {
 
 _impl_.request_access_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.analyticshub.v1.Listing.request_access)
}
inline std::string* Listing::mutable_request_access() {
  std::string* _s = _internal_mutable_request_access();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.analyticshub.v1.Listing.request_access)
  return _s;
}
inline const std::string& Listing::_internal_request_access() const {
  return _impl_.request_access_.Get();
}
inline void Listing::_internal_set_request_access(const std::string& value) {
  
  _impl_.request_access_.Set(value, GetArenaForAllocation());
}
inline std::string* Listing::_internal_mutable_request_access() {
  
  return _impl_.request_access_.Mutable(GetArenaForAllocation());
}
inline std::string* Listing::release_request_access() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.analyticshub.v1.Listing.request_access)
  return _impl_.request_access_.Release();
}
inline void Listing::set_allocated_request_access(std::string* request_access) {
  if (request_access != nullptr) {
    
  } else {
    
  }
  _impl_.request_access_.SetAllocated(request_access, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.request_access_.IsDefault()) {
    _impl_.request_access_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.analyticshub.v1.Listing.request_access)
}

inline bool Listing::has_source() const {
  return source_case() != SOURCE_NOT_SET;
}
inline void Listing::clear_has_source() {
  _impl_._oneof_case_[0] = SOURCE_NOT_SET;
}
inline Listing::SourceCase Listing::source_case() const {
  return Listing::SourceCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ListDataExchangesRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListDataExchangesRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& ListDataExchangesRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.analyticshub.v1.ListDataExchangesRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListDataExchangesRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.analyticshub.v1.ListDataExchangesRequest.parent)
}
inline std::string* ListDataExchangesRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.analyticshub.v1.ListDataExchangesRequest.parent)
  return _s;
}
inline const std::string& ListDataExchangesRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void ListDataExchangesRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* ListDataExchangesRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* ListDataExchangesRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.analyticshub.v1.ListDataExchangesRequest.parent)
  return _impl_.parent_.Release();
}
inline void ListDataExchangesRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.analyticshub.v1.ListDataExchangesRequest.parent)
}

// int32 page_size = 2;
inline void ListDataExchangesRequest::clear_page_size() {
  _impl_.page_size_ = 0;
}
inline int32_t ListDataExchangesRequest::_internal_page_size() const {
  return _impl_.page_size_;
}
inline int32_t ListDataExchangesRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.analyticshub.v1.ListDataExchangesRequest.page_size)
  return _internal_page_size();
}
inline void ListDataExchangesRequest::_internal_set_page_size(int32_t value) {
  
  _impl_.page_size_ = value;
}
inline void ListDataExchangesRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.analyticshub.v1.ListDataExchangesRequest.page_size)
}

// string page_token = 3;
inline void ListDataExchangesRequest::clear_page_token() {
  _impl_.page_token_.ClearToEmpty();
}
inline const std::string& ListDataExchangesRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.analyticshub.v1.ListDataExchangesRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListDataExchangesRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.analyticshub.v1.ListDataExchangesRequest.page_token)
}
inline std::string* ListDataExchangesRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.analyticshub.v1.ListDataExchangesRequest.page_token)
  return _s;
}
inline const std::string& ListDataExchangesRequest::_internal_page_token() const {
  return _impl_.page_token_.Get();
}
inline void ListDataExchangesRequest::_internal_set_page_token(const std::string& value) {
  
  _impl_.page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListDataExchangesRequest::_internal_mutable_page_token() {
  
  return _impl_.page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListDataExchangesRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.analyticshub.v1.ListDataExchangesRequest.page_token)
  return _impl_.page_token_.Release();
}
inline void ListDataExchangesRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  _impl_.page_token_.SetAllocated(page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.page_token_.IsDefault()) {
    _impl_.page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.analyticshub.v1.ListDataExchangesRequest.page_token)
}

// -------------------------------------------------------------------

// ListDataExchangesResponse

// repeated .google.cloud.bigquery.analyticshub.v1.DataExchange data_exchanges = 1;
inline int ListDataExchangesResponse::_internal_data_exchanges_size() const {
  return _impl_.data_exchanges_.size();
}
inline int ListDataExchangesResponse::data_exchanges_size() const {
  return _internal_data_exchanges_size();
}
inline void ListDataExchangesResponse::clear_data_exchanges() {
  _impl_.data_exchanges_.Clear();
}
inline ::google::cloud::bigquery::analyticshub::v1::DataExchange* ListDataExchangesResponse::mutable_data_exchanges(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.analyticshub.v1.ListDataExchangesResponse.data_exchanges)
  return _impl_.data_exchanges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::analyticshub::v1::DataExchange >*
ListDataExchangesResponse::mutable_data_exchanges() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.bigquery.analyticshub.v1.ListDataExchangesResponse.data_exchanges)
  return &_impl_.data_exchanges_;
}
inline const ::google::cloud::bigquery::analyticshub::v1::DataExchange& ListDataExchangesResponse::_internal_data_exchanges(int index) const {
  return _impl_.data_exchanges_.Get(index);
}
inline const ::google::cloud::bigquery::analyticshub::v1::DataExchange& ListDataExchangesResponse::data_exchanges(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.analyticshub.v1.ListDataExchangesResponse.data_exchanges)
  return _internal_data_exchanges(index);
}
inline ::google::cloud::bigquery::analyticshub::v1::DataExchange* ListDataExchangesResponse::_internal_add_data_exchanges() {
  return _impl_.data_exchanges_.Add();
}
inline ::google::cloud::bigquery::analyticshub::v1::DataExchange* ListDataExchangesResponse::add_data_exchanges() {
  ::google::cloud::bigquery::analyticshub::v1::DataExchange* _add = _internal_add_data_exchanges();
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.analyticshub.v1.ListDataExchangesResponse.data_exchanges)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::analyticshub::v1::DataExchange >&
ListDataExchangesResponse::data_exchanges() const {
  // @@protoc_insertion_point(field_list:google.cloud.bigquery.analyticshub.v1.ListDataExchangesResponse.data_exchanges)
  return _impl_.data_exchanges_;
}

// string next_page_token = 2;
inline void ListDataExchangesResponse::clear_next_page_token() {
  _impl_.next_page_token_.ClearToEmpty();
}
inline const std::string& ListDataExchangesResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.analyticshub.v1.ListDataExchangesResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListDataExchangesResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.next_page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.analyticshub.v1.ListDataExchangesResponse.next_page_token)
}
inline std::string* ListDataExchangesResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.analyticshub.v1.ListDataExchangesResponse.next_page_token)
  return _s;
}
inline const std::string& ListDataExchangesResponse::_internal_next_page_token() const {
  return _impl_.next_page_token_.Get();
}
inline void ListDataExchangesResponse::_internal_set_next_page_token(const std::string& value) {
  
  _impl_.next_page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListDataExchangesResponse::_internal_mutable_next_page_token() {
  
  return _impl_.next_page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListDataExchangesResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.analyticshub.v1.ListDataExchangesResponse.next_page_token)
  return _impl_.next_page_token_.Release();
}
inline void ListDataExchangesResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  _impl_.next_page_token_.SetAllocated(next_page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.next_page_token_.IsDefault()) {
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.analyticshub.v1.ListDataExchangesResponse.next_page_token)
}

// -------------------------------------------------------------------

// ListOrgDataExchangesRequest

// string organization = 1 [(.google.api.field_behavior) = REQUIRED];
inline void ListOrgDataExchangesRequest::clear_organization() {
  _impl_.organization_.ClearToEmpty();
}
inline const std::string& ListOrgDataExchangesRequest::organization() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.analyticshub.v1.ListOrgDataExchangesRequest.organization)
  return _internal_organization();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListOrgDataExchangesRequest::set_organization(ArgT0&& arg0, ArgT... args) {
 
 _impl_.organization_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.analyticshub.v1.ListOrgDataExchangesRequest.organization)
}
inline std::string* ListOrgDataExchangesRequest::mutable_organization() {
  std::string* _s = _internal_mutable_organization();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.analyticshub.v1.ListOrgDataExchangesRequest.organization)
  return _s;
}
inline const std::string& ListOrgDataExchangesRequest::_internal_organization() const {
  return _impl_.organization_.Get();
}
inline void ListOrgDataExchangesRequest::_internal_set_organization(const std::string& value) {
  
  _impl_.organization_.Set(value, GetArenaForAllocation());
}
inline std::string* ListOrgDataExchangesRequest::_internal_mutable_organization() {
  
  return _impl_.organization_.Mutable(GetArenaForAllocation());
}
inline std::string* ListOrgDataExchangesRequest::release_organization() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.analyticshub.v1.ListOrgDataExchangesRequest.organization)
  return _impl_.organization_.Release();
}
inline void ListOrgDataExchangesRequest::set_allocated_organization(std::string* organization) {
  if (organization != nullptr) {
    
  } else {
    
  }
  _impl_.organization_.SetAllocated(organization, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.organization_.IsDefault()) {
    _impl_.organization_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.analyticshub.v1.ListOrgDataExchangesRequest.organization)
}

// int32 page_size = 2;
inline void ListOrgDataExchangesRequest::clear_page_size() {
  _impl_.page_size_ = 0;
}
inline int32_t ListOrgDataExchangesRequest::_internal_page_size() const {
  return _impl_.page_size_;
}
inline int32_t ListOrgDataExchangesRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.analyticshub.v1.ListOrgDataExchangesRequest.page_size)
  return _internal_page_size();
}
inline void ListOrgDataExchangesRequest::_internal_set_page_size(int32_t value) {
  
  _impl_.page_size_ = value;
}
inline void ListOrgDataExchangesRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.analyticshub.v1.ListOrgDataExchangesRequest.page_size)
}

// string page_token = 3;
inline void ListOrgDataExchangesRequest::clear_page_token() {
  _impl_.page_token_.ClearToEmpty();
}
inline const std::string& ListOrgDataExchangesRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.analyticshub.v1.ListOrgDataExchangesRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListOrgDataExchangesRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.analyticshub.v1.ListOrgDataExchangesRequest.page_token)
}
inline std::string* ListOrgDataExchangesRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.analyticshub.v1.ListOrgDataExchangesRequest.page_token)
  return _s;
}
inline const std::string& ListOrgDataExchangesRequest::_internal_page_token() const {
  return _impl_.page_token_.Get();
}
inline void ListOrgDataExchangesRequest::_internal_set_page_token(const std::string& value) {
  
  _impl_.page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListOrgDataExchangesRequest::_internal_mutable_page_token() {
  
  return _impl_.page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListOrgDataExchangesRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.analyticshub.v1.ListOrgDataExchangesRequest.page_token)
  return _impl_.page_token_.Release();
}
inline void ListOrgDataExchangesRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  _impl_.page_token_.SetAllocated(page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.page_token_.IsDefault()) {
    _impl_.page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.analyticshub.v1.ListOrgDataExchangesRequest.page_token)
}

// -------------------------------------------------------------------

// ListOrgDataExchangesResponse

// repeated .google.cloud.bigquery.analyticshub.v1.DataExchange data_exchanges = 1;
inline int ListOrgDataExchangesResponse::_internal_data_exchanges_size() const {
  return _impl_.data_exchanges_.size();
}
inline int ListOrgDataExchangesResponse::data_exchanges_size() const {
  return _internal_data_exchanges_size();
}
inline void ListOrgDataExchangesResponse::clear_data_exchanges() {
  _impl_.data_exchanges_.Clear();
}
inline ::google::cloud::bigquery::analyticshub::v1::DataExchange* ListOrgDataExchangesResponse::mutable_data_exchanges(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.analyticshub.v1.ListOrgDataExchangesResponse.data_exchanges)
  return _impl_.data_exchanges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::analyticshub::v1::DataExchange >*
ListOrgDataExchangesResponse::mutable_data_exchanges() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.bigquery.analyticshub.v1.ListOrgDataExchangesResponse.data_exchanges)
  return &_impl_.data_exchanges_;
}
inline const ::google::cloud::bigquery::analyticshub::v1::DataExchange& ListOrgDataExchangesResponse::_internal_data_exchanges(int index) const {
  return _impl_.data_exchanges_.Get(index);
}
inline const ::google::cloud::bigquery::analyticshub::v1::DataExchange& ListOrgDataExchangesResponse::data_exchanges(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.analyticshub.v1.ListOrgDataExchangesResponse.data_exchanges)
  return _internal_data_exchanges(index);
}
inline ::google::cloud::bigquery::analyticshub::v1::DataExchange* ListOrgDataExchangesResponse::_internal_add_data_exchanges() {
  return _impl_.data_exchanges_.Add();
}
inline ::google::cloud::bigquery::analyticshub::v1::DataExchange* ListOrgDataExchangesResponse::add_data_exchanges() {
  ::google::cloud::bigquery::analyticshub::v1::DataExchange* _add = _internal_add_data_exchanges();
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.analyticshub.v1.ListOrgDataExchangesResponse.data_exchanges)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::analyticshub::v1::DataExchange >&
ListOrgDataExchangesResponse::data_exchanges() const {
  // @@protoc_insertion_point(field_list:google.cloud.bigquery.analyticshub.v1.ListOrgDataExchangesResponse.data_exchanges)
  return _impl_.data_exchanges_;
}

// string next_page_token = 2;
inline void ListOrgDataExchangesResponse::clear_next_page_token() {
  _impl_.next_page_token_.ClearToEmpty();
}
inline const std::string& ListOrgDataExchangesResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.analyticshub.v1.ListOrgDataExchangesResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListOrgDataExchangesResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.next_page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.analyticshub.v1.ListOrgDataExchangesResponse.next_page_token)
}
inline std::string* ListOrgDataExchangesResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.analyticshub.v1.ListOrgDataExchangesResponse.next_page_token)
  return _s;
}
inline const std::string& ListOrgDataExchangesResponse::_internal_next_page_token() const {
  return _impl_.next_page_token_.Get();
}
inline void ListOrgDataExchangesResponse::_internal_set_next_page_token(const std::string& value) {
  
  _impl_.next_page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListOrgDataExchangesResponse::_internal_mutable_next_page_token() {
  
  return _impl_.next_page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListOrgDataExchangesResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.analyticshub.v1.ListOrgDataExchangesResponse.next_page_token)
  return _impl_.next_page_token_.Release();
}
inline void ListOrgDataExchangesResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  _impl_.next_page_token_.SetAllocated(next_page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.next_page_token_.IsDefault()) {
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.analyticshub.v1.ListOrgDataExchangesResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetDataExchangeRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetDataExchangeRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GetDataExchangeRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.analyticshub.v1.GetDataExchangeRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetDataExchangeRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.analyticshub.v1.GetDataExchangeRequest.name)
}
inline std::string* GetDataExchangeRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.analyticshub.v1.GetDataExchangeRequest.name)
  return _s;
}
inline const std::string& GetDataExchangeRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GetDataExchangeRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetDataExchangeRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetDataExchangeRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.analyticshub.v1.GetDataExchangeRequest.name)
  return _impl_.name_.Release();
}
inline void GetDataExchangeRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.analyticshub.v1.GetDataExchangeRequest.name)
}

// -------------------------------------------------------------------

// CreateDataExchangeRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreateDataExchangeRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& CreateDataExchangeRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.analyticshub.v1.CreateDataExchangeRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateDataExchangeRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.analyticshub.v1.CreateDataExchangeRequest.parent)
}
inline std::string* CreateDataExchangeRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.analyticshub.v1.CreateDataExchangeRequest.parent)
  return _s;
}
inline const std::string& CreateDataExchangeRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void CreateDataExchangeRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateDataExchangeRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateDataExchangeRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.analyticshub.v1.CreateDataExchangeRequest.parent)
  return _impl_.parent_.Release();
}
inline void CreateDataExchangeRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.analyticshub.v1.CreateDataExchangeRequest.parent)
}

// string data_exchange_id = 2 [(.google.api.field_behavior) = REQUIRED];
inline void CreateDataExchangeRequest::clear_data_exchange_id() {
  _impl_.data_exchange_id_.ClearToEmpty();
}
inline const std::string& CreateDataExchangeRequest::data_exchange_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.analyticshub.v1.CreateDataExchangeRequest.data_exchange_id)
  return _internal_data_exchange_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateDataExchangeRequest::set_data_exchange_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_exchange_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.analyticshub.v1.CreateDataExchangeRequest.data_exchange_id)
}
inline std::string* CreateDataExchangeRequest::mutable_data_exchange_id() {
  std::string* _s = _internal_mutable_data_exchange_id();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.analyticshub.v1.CreateDataExchangeRequest.data_exchange_id)
  return _s;
}
inline const std::string& CreateDataExchangeRequest::_internal_data_exchange_id() const {
  return _impl_.data_exchange_id_.Get();
}
inline void CreateDataExchangeRequest::_internal_set_data_exchange_id(const std::string& value) {
  
  _impl_.data_exchange_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateDataExchangeRequest::_internal_mutable_data_exchange_id() {
  
  return _impl_.data_exchange_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateDataExchangeRequest::release_data_exchange_id() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.analyticshub.v1.CreateDataExchangeRequest.data_exchange_id)
  return _impl_.data_exchange_id_.Release();
}
inline void CreateDataExchangeRequest::set_allocated_data_exchange_id(std::string* data_exchange_id) {
  if (data_exchange_id != nullptr) {
    
  } else {
    
  }
  _impl_.data_exchange_id_.SetAllocated(data_exchange_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_exchange_id_.IsDefault()) {
    _impl_.data_exchange_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.analyticshub.v1.CreateDataExchangeRequest.data_exchange_id)
}

// .google.cloud.bigquery.analyticshub.v1.DataExchange data_exchange = 3 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateDataExchangeRequest::_internal_has_data_exchange() const {
  return this != internal_default_instance() && _impl_.data_exchange_ != nullptr;
}
inline bool CreateDataExchangeRequest::has_data_exchange() const {
  return _internal_has_data_exchange();
}
inline void CreateDataExchangeRequest::clear_data_exchange() {
  if (GetArenaForAllocation() == nullptr && _impl_.data_exchange_ != nullptr) {
    delete _impl_.data_exchange_;
  }
  _impl_.data_exchange_ = nullptr;
}
inline const ::google::cloud::bigquery::analyticshub::v1::DataExchange& CreateDataExchangeRequest::_internal_data_exchange() const {
  const ::google::cloud::bigquery::analyticshub::v1::DataExchange* p = _impl_.data_exchange_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::analyticshub::v1::DataExchange&>(
      ::google::cloud::bigquery::analyticshub::v1::_DataExchange_default_instance_);
}
inline const ::google::cloud::bigquery::analyticshub::v1::DataExchange& CreateDataExchangeRequest::data_exchange() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.analyticshub.v1.CreateDataExchangeRequest.data_exchange)
  return _internal_data_exchange();
}
inline void CreateDataExchangeRequest::unsafe_arena_set_allocated_data_exchange(
    ::google::cloud::bigquery::analyticshub::v1::DataExchange* data_exchange) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_exchange_);
  }
  _impl_.data_exchange_ = data_exchange;
  if (data_exchange) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.analyticshub.v1.CreateDataExchangeRequest.data_exchange)
}
inline ::google::cloud::bigquery::analyticshub::v1::DataExchange* CreateDataExchangeRequest::release_data_exchange() {
  
  ::google::cloud::bigquery::analyticshub::v1::DataExchange* temp = _impl_.data_exchange_;
  _impl_.data_exchange_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::analyticshub::v1::DataExchange* CreateDataExchangeRequest::unsafe_arena_release_data_exchange() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.analyticshub.v1.CreateDataExchangeRequest.data_exchange)
  
  ::google::cloud::bigquery::analyticshub::v1::DataExchange* temp = _impl_.data_exchange_;
  _impl_.data_exchange_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::analyticshub::v1::DataExchange* CreateDataExchangeRequest::_internal_mutable_data_exchange() {
  
  if (_impl_.data_exchange_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::analyticshub::v1::DataExchange>(GetArenaForAllocation());
    _impl_.data_exchange_ = p;
  }
  return _impl_.data_exchange_;
}
inline ::google::cloud::bigquery::analyticshub::v1::DataExchange* CreateDataExchangeRequest::mutable_data_exchange() {
  ::google::cloud::bigquery::analyticshub::v1::DataExchange* _msg = _internal_mutable_data_exchange();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.analyticshub.v1.CreateDataExchangeRequest.data_exchange)
  return _msg;
}
inline void CreateDataExchangeRequest::set_allocated_data_exchange(::google::cloud::bigquery::analyticshub::v1::DataExchange* data_exchange) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.data_exchange_;
  }
  if (data_exchange) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data_exchange);
    if (message_arena != submessage_arena) {
      data_exchange = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data_exchange, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.data_exchange_ = data_exchange;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.analyticshub.v1.CreateDataExchangeRequest.data_exchange)
}

// -------------------------------------------------------------------

// UpdateDataExchangeRequest

// .google.protobuf.FieldMask update_mask = 1 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateDataExchangeRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && _impl_.update_mask_ != nullptr;
}
inline bool UpdateDataExchangeRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateDataExchangeRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = _impl_.update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateDataExchangeRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.analyticshub.v1.UpdateDataExchangeRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateDataExchangeRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  _impl_.update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.analyticshub.v1.UpdateDataExchangeRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateDataExchangeRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateDataExchangeRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.analyticshub.v1.UpdateDataExchangeRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateDataExchangeRequest::_internal_mutable_update_mask() {
  
  if (_impl_.update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    _impl_.update_mask_ = p;
  }
  return _impl_.update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateDataExchangeRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.analyticshub.v1.UpdateDataExchangeRequest.update_mask)
  return _msg;
}
inline void UpdateDataExchangeRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.analyticshub.v1.UpdateDataExchangeRequest.update_mask)
}

// .google.cloud.bigquery.analyticshub.v1.DataExchange data_exchange = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateDataExchangeRequest::_internal_has_data_exchange() const {
  return this != internal_default_instance() && _impl_.data_exchange_ != nullptr;
}
inline bool UpdateDataExchangeRequest::has_data_exchange() const {
  return _internal_has_data_exchange();
}
inline void UpdateDataExchangeRequest::clear_data_exchange() {
  if (GetArenaForAllocation() == nullptr && _impl_.data_exchange_ != nullptr) {
    delete _impl_.data_exchange_;
  }
  _impl_.data_exchange_ = nullptr;
}
inline const ::google::cloud::bigquery::analyticshub::v1::DataExchange& UpdateDataExchangeRequest::_internal_data_exchange() const {
  const ::google::cloud::bigquery::analyticshub::v1::DataExchange* p = _impl_.data_exchange_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::analyticshub::v1::DataExchange&>(
      ::google::cloud::bigquery::analyticshub::v1::_DataExchange_default_instance_);
}
inline const ::google::cloud::bigquery::analyticshub::v1::DataExchange& UpdateDataExchangeRequest::data_exchange() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.analyticshub.v1.UpdateDataExchangeRequest.data_exchange)
  return _internal_data_exchange();
}
inline void UpdateDataExchangeRequest::unsafe_arena_set_allocated_data_exchange(
    ::google::cloud::bigquery::analyticshub::v1::DataExchange* data_exchange) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_exchange_);
  }
  _impl_.data_exchange_ = data_exchange;
  if (data_exchange) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.analyticshub.v1.UpdateDataExchangeRequest.data_exchange)
}
inline ::google::cloud::bigquery::analyticshub::v1::DataExchange* UpdateDataExchangeRequest::release_data_exchange() {
  
  ::google::cloud::bigquery::analyticshub::v1::DataExchange* temp = _impl_.data_exchange_;
  _impl_.data_exchange_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::analyticshub::v1::DataExchange* UpdateDataExchangeRequest::unsafe_arena_release_data_exchange() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.analyticshub.v1.UpdateDataExchangeRequest.data_exchange)
  
  ::google::cloud::bigquery::analyticshub::v1::DataExchange* temp = _impl_.data_exchange_;
  _impl_.data_exchange_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::analyticshub::v1::DataExchange* UpdateDataExchangeRequest::_internal_mutable_data_exchange() {
  
  if (_impl_.data_exchange_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::analyticshub::v1::DataExchange>(GetArenaForAllocation());
    _impl_.data_exchange_ = p;
  }
  return _impl_.data_exchange_;
}
inline ::google::cloud::bigquery::analyticshub::v1::DataExchange* UpdateDataExchangeRequest::mutable_data_exchange() {
  ::google::cloud::bigquery::analyticshub::v1::DataExchange* _msg = _internal_mutable_data_exchange();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.analyticshub.v1.UpdateDataExchangeRequest.data_exchange)
  return _msg;
}
inline void UpdateDataExchangeRequest::set_allocated_data_exchange(::google::cloud::bigquery::analyticshub::v1::DataExchange* data_exchange) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.data_exchange_;
  }
  if (data_exchange) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data_exchange);
    if (message_arena != submessage_arena) {
      data_exchange = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data_exchange, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.data_exchange_ = data_exchange;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.analyticshub.v1.UpdateDataExchangeRequest.data_exchange)
}

// -------------------------------------------------------------------

// DeleteDataExchangeRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteDataExchangeRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DeleteDataExchangeRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.analyticshub.v1.DeleteDataExchangeRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteDataExchangeRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.analyticshub.v1.DeleteDataExchangeRequest.name)
}
inline std::string* DeleteDataExchangeRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.analyticshub.v1.DeleteDataExchangeRequest.name)
  return _s;
}
inline const std::string& DeleteDataExchangeRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DeleteDataExchangeRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteDataExchangeRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteDataExchangeRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.analyticshub.v1.DeleteDataExchangeRequest.name)
  return _impl_.name_.Release();
}
inline void DeleteDataExchangeRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.analyticshub.v1.DeleteDataExchangeRequest.name)
}

// -------------------------------------------------------------------

// ListListingsRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListListingsRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& ListListingsRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.analyticshub.v1.ListListingsRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListListingsRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.analyticshub.v1.ListListingsRequest.parent)
}
inline std::string* ListListingsRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.analyticshub.v1.ListListingsRequest.parent)
  return _s;
}
inline const std::string& ListListingsRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void ListListingsRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* ListListingsRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* ListListingsRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.analyticshub.v1.ListListingsRequest.parent)
  return _impl_.parent_.Release();
}
inline void ListListingsRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.analyticshub.v1.ListListingsRequest.parent)
}

// int32 page_size = 2;
inline void ListListingsRequest::clear_page_size() {
  _impl_.page_size_ = 0;
}
inline int32_t ListListingsRequest::_internal_page_size() const {
  return _impl_.page_size_;
}
inline int32_t ListListingsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.analyticshub.v1.ListListingsRequest.page_size)
  return _internal_page_size();
}
inline void ListListingsRequest::_internal_set_page_size(int32_t value) {
  
  _impl_.page_size_ = value;
}
inline void ListListingsRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.analyticshub.v1.ListListingsRequest.page_size)
}

// string page_token = 3;
inline void ListListingsRequest::clear_page_token() {
  _impl_.page_token_.ClearToEmpty();
}
inline const std::string& ListListingsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.analyticshub.v1.ListListingsRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListListingsRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.analyticshub.v1.ListListingsRequest.page_token)
}
inline std::string* ListListingsRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.analyticshub.v1.ListListingsRequest.page_token)
  return _s;
}
inline const std::string& ListListingsRequest::_internal_page_token() const {
  return _impl_.page_token_.Get();
}
inline void ListListingsRequest::_internal_set_page_token(const std::string& value) {
  
  _impl_.page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListListingsRequest::_internal_mutable_page_token() {
  
  return _impl_.page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListListingsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.analyticshub.v1.ListListingsRequest.page_token)
  return _impl_.page_token_.Release();
}
inline void ListListingsRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  _impl_.page_token_.SetAllocated(page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.page_token_.IsDefault()) {
    _impl_.page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.analyticshub.v1.ListListingsRequest.page_token)
}

// -------------------------------------------------------------------

// ListListingsResponse

// repeated .google.cloud.bigquery.analyticshub.v1.Listing listings = 1;
inline int ListListingsResponse::_internal_listings_size() const {
  return _impl_.listings_.size();
}
inline int ListListingsResponse::listings_size() const {
  return _internal_listings_size();
}
inline void ListListingsResponse::clear_listings() {
  _impl_.listings_.Clear();
}
inline ::google::cloud::bigquery::analyticshub::v1::Listing* ListListingsResponse::mutable_listings(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.analyticshub.v1.ListListingsResponse.listings)
  return _impl_.listings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::analyticshub::v1::Listing >*
ListListingsResponse::mutable_listings() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.bigquery.analyticshub.v1.ListListingsResponse.listings)
  return &_impl_.listings_;
}
inline const ::google::cloud::bigquery::analyticshub::v1::Listing& ListListingsResponse::_internal_listings(int index) const {
  return _impl_.listings_.Get(index);
}
inline const ::google::cloud::bigquery::analyticshub::v1::Listing& ListListingsResponse::listings(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.analyticshub.v1.ListListingsResponse.listings)
  return _internal_listings(index);
}
inline ::google::cloud::bigquery::analyticshub::v1::Listing* ListListingsResponse::_internal_add_listings() {
  return _impl_.listings_.Add();
}
inline ::google::cloud::bigquery::analyticshub::v1::Listing* ListListingsResponse::add_listings() {
  ::google::cloud::bigquery::analyticshub::v1::Listing* _add = _internal_add_listings();
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.analyticshub.v1.ListListingsResponse.listings)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::analyticshub::v1::Listing >&
ListListingsResponse::listings() const {
  // @@protoc_insertion_point(field_list:google.cloud.bigquery.analyticshub.v1.ListListingsResponse.listings)
  return _impl_.listings_;
}

// string next_page_token = 2;
inline void ListListingsResponse::clear_next_page_token() {
  _impl_.next_page_token_.ClearToEmpty();
}
inline const std::string& ListListingsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.analyticshub.v1.ListListingsResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListListingsResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.next_page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.analyticshub.v1.ListListingsResponse.next_page_token)
}
inline std::string* ListListingsResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.analyticshub.v1.ListListingsResponse.next_page_token)
  return _s;
}
inline const std::string& ListListingsResponse::_internal_next_page_token() const {
  return _impl_.next_page_token_.Get();
}
inline void ListListingsResponse::_internal_set_next_page_token(const std::string& value) {
  
  _impl_.next_page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListListingsResponse::_internal_mutable_next_page_token() {
  
  return _impl_.next_page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListListingsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.analyticshub.v1.ListListingsResponse.next_page_token)
  return _impl_.next_page_token_.Release();
}
inline void ListListingsResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  _impl_.next_page_token_.SetAllocated(next_page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.next_page_token_.IsDefault()) {
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.analyticshub.v1.ListListingsResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetListingRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetListingRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GetListingRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.analyticshub.v1.GetListingRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetListingRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.analyticshub.v1.GetListingRequest.name)
}
inline std::string* GetListingRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.analyticshub.v1.GetListingRequest.name)
  return _s;
}
inline const std::string& GetListingRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GetListingRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetListingRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetListingRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.analyticshub.v1.GetListingRequest.name)
  return _impl_.name_.Release();
}
inline void GetListingRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.analyticshub.v1.GetListingRequest.name)
}

// -------------------------------------------------------------------

// CreateListingRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreateListingRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& CreateListingRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.analyticshub.v1.CreateListingRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateListingRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.analyticshub.v1.CreateListingRequest.parent)
}
inline std::string* CreateListingRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.analyticshub.v1.CreateListingRequest.parent)
  return _s;
}
inline const std::string& CreateListingRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void CreateListingRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateListingRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateListingRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.analyticshub.v1.CreateListingRequest.parent)
  return _impl_.parent_.Release();
}
inline void CreateListingRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.analyticshub.v1.CreateListingRequest.parent)
}

// string listing_id = 2 [(.google.api.field_behavior) = REQUIRED];
inline void CreateListingRequest::clear_listing_id() {
  _impl_.listing_id_.ClearToEmpty();
}
inline const std::string& CreateListingRequest::listing_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.analyticshub.v1.CreateListingRequest.listing_id)
  return _internal_listing_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateListingRequest::set_listing_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.listing_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.analyticshub.v1.CreateListingRequest.listing_id)
}
inline std::string* CreateListingRequest::mutable_listing_id() {
  std::string* _s = _internal_mutable_listing_id();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.analyticshub.v1.CreateListingRequest.listing_id)
  return _s;
}
inline const std::string& CreateListingRequest::_internal_listing_id() const {
  return _impl_.listing_id_.Get();
}
inline void CreateListingRequest::_internal_set_listing_id(const std::string& value) {
  
  _impl_.listing_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateListingRequest::_internal_mutable_listing_id() {
  
  return _impl_.listing_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateListingRequest::release_listing_id() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.analyticshub.v1.CreateListingRequest.listing_id)
  return _impl_.listing_id_.Release();
}
inline void CreateListingRequest::set_allocated_listing_id(std::string* listing_id) {
  if (listing_id != nullptr) {
    
  } else {
    
  }
  _impl_.listing_id_.SetAllocated(listing_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.listing_id_.IsDefault()) {
    _impl_.listing_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.analyticshub.v1.CreateListingRequest.listing_id)
}

// .google.cloud.bigquery.analyticshub.v1.Listing listing = 3 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateListingRequest::_internal_has_listing() const {
  return this != internal_default_instance() && _impl_.listing_ != nullptr;
}
inline bool CreateListingRequest::has_listing() const {
  return _internal_has_listing();
}
inline void CreateListingRequest::clear_listing() {
  if (GetArenaForAllocation() == nullptr && _impl_.listing_ != nullptr) {
    delete _impl_.listing_;
  }
  _impl_.listing_ = nullptr;
}
inline const ::google::cloud::bigquery::analyticshub::v1::Listing& CreateListingRequest::_internal_listing() const {
  const ::google::cloud::bigquery::analyticshub::v1::Listing* p = _impl_.listing_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::analyticshub::v1::Listing&>(
      ::google::cloud::bigquery::analyticshub::v1::_Listing_default_instance_);
}
inline const ::google::cloud::bigquery::analyticshub::v1::Listing& CreateListingRequest::listing() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.analyticshub.v1.CreateListingRequest.listing)
  return _internal_listing();
}
inline void CreateListingRequest::unsafe_arena_set_allocated_listing(
    ::google::cloud::bigquery::analyticshub::v1::Listing* listing) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.listing_);
  }
  _impl_.listing_ = listing;
  if (listing) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.analyticshub.v1.CreateListingRequest.listing)
}
inline ::google::cloud::bigquery::analyticshub::v1::Listing* CreateListingRequest::release_listing() {
  
  ::google::cloud::bigquery::analyticshub::v1::Listing* temp = _impl_.listing_;
  _impl_.listing_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::analyticshub::v1::Listing* CreateListingRequest::unsafe_arena_release_listing() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.analyticshub.v1.CreateListingRequest.listing)
  
  ::google::cloud::bigquery::analyticshub::v1::Listing* temp = _impl_.listing_;
  _impl_.listing_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::analyticshub::v1::Listing* CreateListingRequest::_internal_mutable_listing() {
  
  if (_impl_.listing_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::analyticshub::v1::Listing>(GetArenaForAllocation());
    _impl_.listing_ = p;
  }
  return _impl_.listing_;
}
inline ::google::cloud::bigquery::analyticshub::v1::Listing* CreateListingRequest::mutable_listing() {
  ::google::cloud::bigquery::analyticshub::v1::Listing* _msg = _internal_mutable_listing();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.analyticshub.v1.CreateListingRequest.listing)
  return _msg;
}
inline void CreateListingRequest::set_allocated_listing(::google::cloud::bigquery::analyticshub::v1::Listing* listing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.listing_;
  }
  if (listing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(listing);
    if (message_arena != submessage_arena) {
      listing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, listing, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.listing_ = listing;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.analyticshub.v1.CreateListingRequest.listing)
}

// -------------------------------------------------------------------

// UpdateListingRequest

// .google.protobuf.FieldMask update_mask = 1 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateListingRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && _impl_.update_mask_ != nullptr;
}
inline bool UpdateListingRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateListingRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = _impl_.update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateListingRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.analyticshub.v1.UpdateListingRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateListingRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  _impl_.update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.analyticshub.v1.UpdateListingRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateListingRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateListingRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.analyticshub.v1.UpdateListingRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateListingRequest::_internal_mutable_update_mask() {
  
  if (_impl_.update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    _impl_.update_mask_ = p;
  }
  return _impl_.update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateListingRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.analyticshub.v1.UpdateListingRequest.update_mask)
  return _msg;
}
inline void UpdateListingRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.analyticshub.v1.UpdateListingRequest.update_mask)
}

// .google.cloud.bigquery.analyticshub.v1.Listing listing = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateListingRequest::_internal_has_listing() const {
  return this != internal_default_instance() && _impl_.listing_ != nullptr;
}
inline bool UpdateListingRequest::has_listing() const {
  return _internal_has_listing();
}
inline void UpdateListingRequest::clear_listing() {
  if (GetArenaForAllocation() == nullptr && _impl_.listing_ != nullptr) {
    delete _impl_.listing_;
  }
  _impl_.listing_ = nullptr;
}
inline const ::google::cloud::bigquery::analyticshub::v1::Listing& UpdateListingRequest::_internal_listing() const {
  const ::google::cloud::bigquery::analyticshub::v1::Listing* p = _impl_.listing_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::analyticshub::v1::Listing&>(
      ::google::cloud::bigquery::analyticshub::v1::_Listing_default_instance_);
}
inline const ::google::cloud::bigquery::analyticshub::v1::Listing& UpdateListingRequest::listing() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.analyticshub.v1.UpdateListingRequest.listing)
  return _internal_listing();
}
inline void UpdateListingRequest::unsafe_arena_set_allocated_listing(
    ::google::cloud::bigquery::analyticshub::v1::Listing* listing) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.listing_);
  }
  _impl_.listing_ = listing;
  if (listing) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.analyticshub.v1.UpdateListingRequest.listing)
}
inline ::google::cloud::bigquery::analyticshub::v1::Listing* UpdateListingRequest::release_listing() {
  
  ::google::cloud::bigquery::analyticshub::v1::Listing* temp = _impl_.listing_;
  _impl_.listing_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::analyticshub::v1::Listing* UpdateListingRequest::unsafe_arena_release_listing() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.analyticshub.v1.UpdateListingRequest.listing)
  
  ::google::cloud::bigquery::analyticshub::v1::Listing* temp = _impl_.listing_;
  _impl_.listing_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::analyticshub::v1::Listing* UpdateListingRequest::_internal_mutable_listing() {
  
  if (_impl_.listing_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::analyticshub::v1::Listing>(GetArenaForAllocation());
    _impl_.listing_ = p;
  }
  return _impl_.listing_;
}
inline ::google::cloud::bigquery::analyticshub::v1::Listing* UpdateListingRequest::mutable_listing() {
  ::google::cloud::bigquery::analyticshub::v1::Listing* _msg = _internal_mutable_listing();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.analyticshub.v1.UpdateListingRequest.listing)
  return _msg;
}
inline void UpdateListingRequest::set_allocated_listing(::google::cloud::bigquery::analyticshub::v1::Listing* listing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.listing_;
  }
  if (listing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(listing);
    if (message_arena != submessage_arena) {
      listing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, listing, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.listing_ = listing;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.analyticshub.v1.UpdateListingRequest.listing)
}

// -------------------------------------------------------------------

// DeleteListingRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteListingRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DeleteListingRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.analyticshub.v1.DeleteListingRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteListingRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.analyticshub.v1.DeleteListingRequest.name)
}
inline std::string* DeleteListingRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.analyticshub.v1.DeleteListingRequest.name)
  return _s;
}
inline const std::string& DeleteListingRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DeleteListingRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteListingRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteListingRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.analyticshub.v1.DeleteListingRequest.name)
  return _impl_.name_.Release();
}
inline void DeleteListingRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.analyticshub.v1.DeleteListingRequest.name)
}

// -------------------------------------------------------------------

// SubscribeListingRequest

// .google.cloud.bigquery.analyticshub.v1.DestinationDataset destination_dataset = 3;
inline bool SubscribeListingRequest::_internal_has_destination_dataset() const {
  return destination_case() == kDestinationDataset;
}
inline bool SubscribeListingRequest::has_destination_dataset() const {
  return _internal_has_destination_dataset();
}
inline void SubscribeListingRequest::set_has_destination_dataset() {
  _impl_._oneof_case_[0] = kDestinationDataset;
}
inline void SubscribeListingRequest::clear_destination_dataset() {
  if (_internal_has_destination_dataset()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.destination_.destination_dataset_;
    }
    clear_has_destination();
  }
}
inline ::google::cloud::bigquery::analyticshub::v1::DestinationDataset* SubscribeListingRequest::release_destination_dataset() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.analyticshub.v1.SubscribeListingRequest.destination_dataset)
  if (_internal_has_destination_dataset()) {
    clear_has_destination();
    ::google::cloud::bigquery::analyticshub::v1::DestinationDataset* temp = _impl_.destination_.destination_dataset_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.destination_.destination_dataset_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::bigquery::analyticshub::v1::DestinationDataset& SubscribeListingRequest::_internal_destination_dataset() const {
  return _internal_has_destination_dataset()
      ? *_impl_.destination_.destination_dataset_
      : reinterpret_cast< ::google::cloud::bigquery::analyticshub::v1::DestinationDataset&>(::google::cloud::bigquery::analyticshub::v1::_DestinationDataset_default_instance_);
}
inline const ::google::cloud::bigquery::analyticshub::v1::DestinationDataset& SubscribeListingRequest::destination_dataset() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.analyticshub.v1.SubscribeListingRequest.destination_dataset)
  return _internal_destination_dataset();
}
inline ::google::cloud::bigquery::analyticshub::v1::DestinationDataset* SubscribeListingRequest::unsafe_arena_release_destination_dataset() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.bigquery.analyticshub.v1.SubscribeListingRequest.destination_dataset)
  if (_internal_has_destination_dataset()) {
    clear_has_destination();
    ::google::cloud::bigquery::analyticshub::v1::DestinationDataset* temp = _impl_.destination_.destination_dataset_;
    _impl_.destination_.destination_dataset_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SubscribeListingRequest::unsafe_arena_set_allocated_destination_dataset(::google::cloud::bigquery::analyticshub::v1::DestinationDataset* destination_dataset) {
  clear_destination();
  if (destination_dataset) {
    set_has_destination_dataset();
    _impl_.destination_.destination_dataset_ = destination_dataset;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.analyticshub.v1.SubscribeListingRequest.destination_dataset)
}
inline ::google::cloud::bigquery::analyticshub::v1::DestinationDataset* SubscribeListingRequest::_internal_mutable_destination_dataset() {
  if (!_internal_has_destination_dataset()) {
    clear_destination();
    set_has_destination_dataset();
    _impl_.destination_.destination_dataset_ = CreateMaybeMessage< ::google::cloud::bigquery::analyticshub::v1::DestinationDataset >(GetArenaForAllocation());
  }
  return _impl_.destination_.destination_dataset_;
}
inline ::google::cloud::bigquery::analyticshub::v1::DestinationDataset* SubscribeListingRequest::mutable_destination_dataset() {
  ::google::cloud::bigquery::analyticshub::v1::DestinationDataset* _msg = _internal_mutable_destination_dataset();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.analyticshub.v1.SubscribeListingRequest.destination_dataset)
  return _msg;
}

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void SubscribeListingRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& SubscribeListingRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.analyticshub.v1.SubscribeListingRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SubscribeListingRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.analyticshub.v1.SubscribeListingRequest.name)
}
inline std::string* SubscribeListingRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.analyticshub.v1.SubscribeListingRequest.name)
  return _s;
}
inline const std::string& SubscribeListingRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void SubscribeListingRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* SubscribeListingRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* SubscribeListingRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.analyticshub.v1.SubscribeListingRequest.name)
  return _impl_.name_.Release();
}
inline void SubscribeListingRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.analyticshub.v1.SubscribeListingRequest.name)
}

inline bool SubscribeListingRequest::has_destination() const {
  return destination_case() != DESTINATION_NOT_SET;
}
inline void SubscribeListingRequest::clear_has_destination() {
  _impl_._oneof_case_[0] = DESTINATION_NOT_SET;
}
inline SubscribeListingRequest::DestinationCase SubscribeListingRequest::destination_case() const {
  return SubscribeListingRequest::DestinationCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// SubscribeListingResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace analyticshub
}  // namespace bigquery
}  // namespace cloud
}  // namespace google

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::google::cloud::bigquery::analyticshub::v1::Listing_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::bigquery::analyticshub::v1::Listing_State>() {
  return ::google::cloud::bigquery::analyticshub::v1::Listing_State_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::bigquery::analyticshub::v1::Listing_Category> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::bigquery::analyticshub::v1::Listing_Category>() {
  return ::google::cloud::bigquery::analyticshub::v1::Listing_Category_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fbigquery_2fanalyticshub_2fv1_2fanalyticshub_2eproto
