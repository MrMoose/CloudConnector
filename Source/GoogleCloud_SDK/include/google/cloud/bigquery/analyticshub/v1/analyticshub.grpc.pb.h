// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/cloud/bigquery/analyticshub/v1/analyticshub.proto
// Original file comments:
// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_google_2fcloud_2fbigquery_2fanalyticshub_2fv1_2fanalyticshub_2eproto__INCLUDED
#define GRPC_google_2fcloud_2fbigquery_2fanalyticshub_2fv1_2fanalyticshub_2eproto__INCLUDED

#include "google/cloud/bigquery/analyticshub/v1/analyticshub.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace google {
namespace cloud {
namespace bigquery {
namespace analyticshub {
namespace v1 {

// The `AnalyticsHubService` API facilitates data sharing within and across
// organizations. It allows data providers to publish listings that reference
// shared datasets. With Analytics Hub, users can discover and search for
// listings that they have access to. Subscribers can view and subscribe to
// listings. When you subscribe to a listing, Analytics Hub creates a linked
// dataset in your project.
class AnalyticsHubService final {
 public:
  static constexpr char const* service_full_name() {
    return "google.cloud.bigquery.analyticshub.v1.AnalyticsHubService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Lists all data exchanges in a given project and location.
    virtual ::grpc::Status ListDataExchanges(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::ListDataExchangesRequest& request, ::google::cloud::bigquery::analyticshub::v1::ListDataExchangesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::analyticshub::v1::ListDataExchangesResponse>> AsyncListDataExchanges(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::ListDataExchangesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::analyticshub::v1::ListDataExchangesResponse>>(AsyncListDataExchangesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::analyticshub::v1::ListDataExchangesResponse>> PrepareAsyncListDataExchanges(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::ListDataExchangesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::analyticshub::v1::ListDataExchangesResponse>>(PrepareAsyncListDataExchangesRaw(context, request, cq));
    }
    // Lists all data exchanges from projects in a given organization and
    // location.
    virtual ::grpc::Status ListOrgDataExchanges(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::ListOrgDataExchangesRequest& request, ::google::cloud::bigquery::analyticshub::v1::ListOrgDataExchangesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::analyticshub::v1::ListOrgDataExchangesResponse>> AsyncListOrgDataExchanges(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::ListOrgDataExchangesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::analyticshub::v1::ListOrgDataExchangesResponse>>(AsyncListOrgDataExchangesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::analyticshub::v1::ListOrgDataExchangesResponse>> PrepareAsyncListOrgDataExchanges(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::ListOrgDataExchangesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::analyticshub::v1::ListOrgDataExchangesResponse>>(PrepareAsyncListOrgDataExchangesRaw(context, request, cq));
    }
    // Gets the details of a data exchange.
    virtual ::grpc::Status GetDataExchange(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::GetDataExchangeRequest& request, ::google::cloud::bigquery::analyticshub::v1::DataExchange* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::analyticshub::v1::DataExchange>> AsyncGetDataExchange(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::GetDataExchangeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::analyticshub::v1::DataExchange>>(AsyncGetDataExchangeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::analyticshub::v1::DataExchange>> PrepareAsyncGetDataExchange(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::GetDataExchangeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::analyticshub::v1::DataExchange>>(PrepareAsyncGetDataExchangeRaw(context, request, cq));
    }
    // Creates a new data exchange.
    virtual ::grpc::Status CreateDataExchange(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::CreateDataExchangeRequest& request, ::google::cloud::bigquery::analyticshub::v1::DataExchange* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::analyticshub::v1::DataExchange>> AsyncCreateDataExchange(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::CreateDataExchangeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::analyticshub::v1::DataExchange>>(AsyncCreateDataExchangeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::analyticshub::v1::DataExchange>> PrepareAsyncCreateDataExchange(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::CreateDataExchangeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::analyticshub::v1::DataExchange>>(PrepareAsyncCreateDataExchangeRaw(context, request, cq));
    }
    // Updates an existing data exchange.
    virtual ::grpc::Status UpdateDataExchange(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::UpdateDataExchangeRequest& request, ::google::cloud::bigquery::analyticshub::v1::DataExchange* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::analyticshub::v1::DataExchange>> AsyncUpdateDataExchange(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::UpdateDataExchangeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::analyticshub::v1::DataExchange>>(AsyncUpdateDataExchangeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::analyticshub::v1::DataExchange>> PrepareAsyncUpdateDataExchange(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::UpdateDataExchangeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::analyticshub::v1::DataExchange>>(PrepareAsyncUpdateDataExchangeRaw(context, request, cq));
    }
    // Deletes an existing data exchange.
    virtual ::grpc::Status DeleteDataExchange(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::DeleteDataExchangeRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeleteDataExchange(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::DeleteDataExchangeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteDataExchangeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncDeleteDataExchange(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::DeleteDataExchangeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncDeleteDataExchangeRaw(context, request, cq));
    }
    // Lists all listings in a given project and location.
    virtual ::grpc::Status ListListings(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::ListListingsRequest& request, ::google::cloud::bigquery::analyticshub::v1::ListListingsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::analyticshub::v1::ListListingsResponse>> AsyncListListings(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::ListListingsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::analyticshub::v1::ListListingsResponse>>(AsyncListListingsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::analyticshub::v1::ListListingsResponse>> PrepareAsyncListListings(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::ListListingsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::analyticshub::v1::ListListingsResponse>>(PrepareAsyncListListingsRaw(context, request, cq));
    }
    // Gets the details of a listing.
    virtual ::grpc::Status GetListing(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::GetListingRequest& request, ::google::cloud::bigquery::analyticshub::v1::Listing* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::analyticshub::v1::Listing>> AsyncGetListing(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::GetListingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::analyticshub::v1::Listing>>(AsyncGetListingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::analyticshub::v1::Listing>> PrepareAsyncGetListing(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::GetListingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::analyticshub::v1::Listing>>(PrepareAsyncGetListingRaw(context, request, cq));
    }
    // Creates a new listing.
    virtual ::grpc::Status CreateListing(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::CreateListingRequest& request, ::google::cloud::bigquery::analyticshub::v1::Listing* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::analyticshub::v1::Listing>> AsyncCreateListing(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::CreateListingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::analyticshub::v1::Listing>>(AsyncCreateListingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::analyticshub::v1::Listing>> PrepareAsyncCreateListing(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::CreateListingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::analyticshub::v1::Listing>>(PrepareAsyncCreateListingRaw(context, request, cq));
    }
    // Updates an existing listing.
    virtual ::grpc::Status UpdateListing(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::UpdateListingRequest& request, ::google::cloud::bigquery::analyticshub::v1::Listing* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::analyticshub::v1::Listing>> AsyncUpdateListing(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::UpdateListingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::analyticshub::v1::Listing>>(AsyncUpdateListingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::analyticshub::v1::Listing>> PrepareAsyncUpdateListing(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::UpdateListingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::analyticshub::v1::Listing>>(PrepareAsyncUpdateListingRaw(context, request, cq));
    }
    // Deletes a listing.
    virtual ::grpc::Status DeleteListing(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::DeleteListingRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeleteListing(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::DeleteListingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteListingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncDeleteListing(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::DeleteListingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncDeleteListingRaw(context, request, cq));
    }
    // Subscribes to a listing.
    //
    // Currently, with Analytics Hub, you can create listings that
    // reference only BigQuery datasets.
    // Upon subscription to a listing for a BigQuery dataset, Analytics Hub
    // creates a linked dataset in the subscriber's project.
    virtual ::grpc::Status SubscribeListing(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::SubscribeListingRequest& request, ::google::cloud::bigquery::analyticshub::v1::SubscribeListingResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::analyticshub::v1::SubscribeListingResponse>> AsyncSubscribeListing(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::SubscribeListingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::analyticshub::v1::SubscribeListingResponse>>(AsyncSubscribeListingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::analyticshub::v1::SubscribeListingResponse>> PrepareAsyncSubscribeListing(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::SubscribeListingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::analyticshub::v1::SubscribeListingResponse>>(PrepareAsyncSubscribeListingRaw(context, request, cq));
    }
    // Gets the IAM policy.
    virtual ::grpc::Status GetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::google::iam::v1::Policy* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>> AsyncGetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>>(AsyncGetIamPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>> PrepareAsyncGetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>>(PrepareAsyncGetIamPolicyRaw(context, request, cq));
    }
    // Sets the IAM policy.
    virtual ::grpc::Status SetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::google::iam::v1::Policy* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>> AsyncSetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>>(AsyncSetIamPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>> PrepareAsyncSetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>>(PrepareAsyncSetIamPolicyRaw(context, request, cq));
    }
    // Returns the permissions that a caller has.
    virtual ::grpc::Status TestIamPermissions(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::google::iam::v1::TestIamPermissionsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::TestIamPermissionsResponse>> AsyncTestIamPermissions(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::TestIamPermissionsResponse>>(AsyncTestIamPermissionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::TestIamPermissionsResponse>> PrepareAsyncTestIamPermissions(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::TestIamPermissionsResponse>>(PrepareAsyncTestIamPermissionsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Lists all data exchanges in a given project and location.
      virtual void ListDataExchanges(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::ListDataExchangesRequest* request, ::google::cloud::bigquery::analyticshub::v1::ListDataExchangesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListDataExchanges(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::ListDataExchangesRequest* request, ::google::cloud::bigquery::analyticshub::v1::ListDataExchangesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Lists all data exchanges from projects in a given organization and
      // location.
      virtual void ListOrgDataExchanges(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::ListOrgDataExchangesRequest* request, ::google::cloud::bigquery::analyticshub::v1::ListOrgDataExchangesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListOrgDataExchanges(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::ListOrgDataExchangesRequest* request, ::google::cloud::bigquery::analyticshub::v1::ListOrgDataExchangesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Gets the details of a data exchange.
      virtual void GetDataExchange(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::GetDataExchangeRequest* request, ::google::cloud::bigquery::analyticshub::v1::DataExchange* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetDataExchange(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::GetDataExchangeRequest* request, ::google::cloud::bigquery::analyticshub::v1::DataExchange* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Creates a new data exchange.
      virtual void CreateDataExchange(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::CreateDataExchangeRequest* request, ::google::cloud::bigquery::analyticshub::v1::DataExchange* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateDataExchange(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::CreateDataExchangeRequest* request, ::google::cloud::bigquery::analyticshub::v1::DataExchange* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Updates an existing data exchange.
      virtual void UpdateDataExchange(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::UpdateDataExchangeRequest* request, ::google::cloud::bigquery::analyticshub::v1::DataExchange* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateDataExchange(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::UpdateDataExchangeRequest* request, ::google::cloud::bigquery::analyticshub::v1::DataExchange* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Deletes an existing data exchange.
      virtual void DeleteDataExchange(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::DeleteDataExchangeRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteDataExchange(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::DeleteDataExchangeRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Lists all listings in a given project and location.
      virtual void ListListings(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::ListListingsRequest* request, ::google::cloud::bigquery::analyticshub::v1::ListListingsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListListings(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::ListListingsRequest* request, ::google::cloud::bigquery::analyticshub::v1::ListListingsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Gets the details of a listing.
      virtual void GetListing(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::GetListingRequest* request, ::google::cloud::bigquery::analyticshub::v1::Listing* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetListing(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::GetListingRequest* request, ::google::cloud::bigquery::analyticshub::v1::Listing* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Creates a new listing.
      virtual void CreateListing(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::CreateListingRequest* request, ::google::cloud::bigquery::analyticshub::v1::Listing* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateListing(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::CreateListingRequest* request, ::google::cloud::bigquery::analyticshub::v1::Listing* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Updates an existing listing.
      virtual void UpdateListing(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::UpdateListingRequest* request, ::google::cloud::bigquery::analyticshub::v1::Listing* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateListing(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::UpdateListingRequest* request, ::google::cloud::bigquery::analyticshub::v1::Listing* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Deletes a listing.
      virtual void DeleteListing(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::DeleteListingRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteListing(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::DeleteListingRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Subscribes to a listing.
      //
      // Currently, with Analytics Hub, you can create listings that
      // reference only BigQuery datasets.
      // Upon subscription to a listing for a BigQuery dataset, Analytics Hub
      // creates a linked dataset in the subscriber's project.
      virtual void SubscribeListing(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::SubscribeListingRequest* request, ::google::cloud::bigquery::analyticshub::v1::SubscribeListingResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SubscribeListing(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::SubscribeListingRequest* request, ::google::cloud::bigquery::analyticshub::v1::SubscribeListingResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Gets the IAM policy.
      virtual void GetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest* request, ::google::iam::v1::Policy* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest* request, ::google::iam::v1::Policy* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Sets the IAM policy.
      virtual void SetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest* request, ::google::iam::v1::Policy* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest* request, ::google::iam::v1::Policy* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Returns the permissions that a caller has.
      virtual void TestIamPermissions(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest* request, ::google::iam::v1::TestIamPermissionsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TestIamPermissions(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest* request, ::google::iam::v1::TestIamPermissionsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::analyticshub::v1::ListDataExchangesResponse>* AsyncListDataExchangesRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::ListDataExchangesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::analyticshub::v1::ListDataExchangesResponse>* PrepareAsyncListDataExchangesRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::ListDataExchangesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::analyticshub::v1::ListOrgDataExchangesResponse>* AsyncListOrgDataExchangesRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::ListOrgDataExchangesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::analyticshub::v1::ListOrgDataExchangesResponse>* PrepareAsyncListOrgDataExchangesRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::ListOrgDataExchangesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::analyticshub::v1::DataExchange>* AsyncGetDataExchangeRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::GetDataExchangeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::analyticshub::v1::DataExchange>* PrepareAsyncGetDataExchangeRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::GetDataExchangeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::analyticshub::v1::DataExchange>* AsyncCreateDataExchangeRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::CreateDataExchangeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::analyticshub::v1::DataExchange>* PrepareAsyncCreateDataExchangeRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::CreateDataExchangeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::analyticshub::v1::DataExchange>* AsyncUpdateDataExchangeRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::UpdateDataExchangeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::analyticshub::v1::DataExchange>* PrepareAsyncUpdateDataExchangeRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::UpdateDataExchangeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteDataExchangeRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::DeleteDataExchangeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncDeleteDataExchangeRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::DeleteDataExchangeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::analyticshub::v1::ListListingsResponse>* AsyncListListingsRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::ListListingsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::analyticshub::v1::ListListingsResponse>* PrepareAsyncListListingsRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::ListListingsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::analyticshub::v1::Listing>* AsyncGetListingRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::GetListingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::analyticshub::v1::Listing>* PrepareAsyncGetListingRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::GetListingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::analyticshub::v1::Listing>* AsyncCreateListingRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::CreateListingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::analyticshub::v1::Listing>* PrepareAsyncCreateListingRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::CreateListingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::analyticshub::v1::Listing>* AsyncUpdateListingRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::UpdateListingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::analyticshub::v1::Listing>* PrepareAsyncUpdateListingRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::UpdateListingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteListingRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::DeleteListingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncDeleteListingRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::DeleteListingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::analyticshub::v1::SubscribeListingResponse>* AsyncSubscribeListingRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::SubscribeListingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::analyticshub::v1::SubscribeListingResponse>* PrepareAsyncSubscribeListingRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::SubscribeListingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>* AsyncGetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>* PrepareAsyncGetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>* AsyncSetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>* PrepareAsyncSetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::TestIamPermissionsResponse>* AsyncTestIamPermissionsRaw(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::TestIamPermissionsResponse>* PrepareAsyncTestIamPermissionsRaw(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status ListDataExchanges(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::ListDataExchangesRequest& request, ::google::cloud::bigquery::analyticshub::v1::ListDataExchangesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::analyticshub::v1::ListDataExchangesResponse>> AsyncListDataExchanges(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::ListDataExchangesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::analyticshub::v1::ListDataExchangesResponse>>(AsyncListDataExchangesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::analyticshub::v1::ListDataExchangesResponse>> PrepareAsyncListDataExchanges(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::ListDataExchangesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::analyticshub::v1::ListDataExchangesResponse>>(PrepareAsyncListDataExchangesRaw(context, request, cq));
    }
    ::grpc::Status ListOrgDataExchanges(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::ListOrgDataExchangesRequest& request, ::google::cloud::bigquery::analyticshub::v1::ListOrgDataExchangesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::analyticshub::v1::ListOrgDataExchangesResponse>> AsyncListOrgDataExchanges(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::ListOrgDataExchangesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::analyticshub::v1::ListOrgDataExchangesResponse>>(AsyncListOrgDataExchangesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::analyticshub::v1::ListOrgDataExchangesResponse>> PrepareAsyncListOrgDataExchanges(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::ListOrgDataExchangesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::analyticshub::v1::ListOrgDataExchangesResponse>>(PrepareAsyncListOrgDataExchangesRaw(context, request, cq));
    }
    ::grpc::Status GetDataExchange(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::GetDataExchangeRequest& request, ::google::cloud::bigquery::analyticshub::v1::DataExchange* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::analyticshub::v1::DataExchange>> AsyncGetDataExchange(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::GetDataExchangeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::analyticshub::v1::DataExchange>>(AsyncGetDataExchangeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::analyticshub::v1::DataExchange>> PrepareAsyncGetDataExchange(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::GetDataExchangeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::analyticshub::v1::DataExchange>>(PrepareAsyncGetDataExchangeRaw(context, request, cq));
    }
    ::grpc::Status CreateDataExchange(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::CreateDataExchangeRequest& request, ::google::cloud::bigquery::analyticshub::v1::DataExchange* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::analyticshub::v1::DataExchange>> AsyncCreateDataExchange(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::CreateDataExchangeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::analyticshub::v1::DataExchange>>(AsyncCreateDataExchangeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::analyticshub::v1::DataExchange>> PrepareAsyncCreateDataExchange(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::CreateDataExchangeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::analyticshub::v1::DataExchange>>(PrepareAsyncCreateDataExchangeRaw(context, request, cq));
    }
    ::grpc::Status UpdateDataExchange(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::UpdateDataExchangeRequest& request, ::google::cloud::bigquery::analyticshub::v1::DataExchange* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::analyticshub::v1::DataExchange>> AsyncUpdateDataExchange(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::UpdateDataExchangeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::analyticshub::v1::DataExchange>>(AsyncUpdateDataExchangeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::analyticshub::v1::DataExchange>> PrepareAsyncUpdateDataExchange(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::UpdateDataExchangeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::analyticshub::v1::DataExchange>>(PrepareAsyncUpdateDataExchangeRaw(context, request, cq));
    }
    ::grpc::Status DeleteDataExchange(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::DeleteDataExchangeRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeleteDataExchange(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::DeleteDataExchangeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteDataExchangeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncDeleteDataExchange(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::DeleteDataExchangeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncDeleteDataExchangeRaw(context, request, cq));
    }
    ::grpc::Status ListListings(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::ListListingsRequest& request, ::google::cloud::bigquery::analyticshub::v1::ListListingsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::analyticshub::v1::ListListingsResponse>> AsyncListListings(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::ListListingsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::analyticshub::v1::ListListingsResponse>>(AsyncListListingsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::analyticshub::v1::ListListingsResponse>> PrepareAsyncListListings(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::ListListingsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::analyticshub::v1::ListListingsResponse>>(PrepareAsyncListListingsRaw(context, request, cq));
    }
    ::grpc::Status GetListing(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::GetListingRequest& request, ::google::cloud::bigquery::analyticshub::v1::Listing* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::analyticshub::v1::Listing>> AsyncGetListing(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::GetListingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::analyticshub::v1::Listing>>(AsyncGetListingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::analyticshub::v1::Listing>> PrepareAsyncGetListing(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::GetListingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::analyticshub::v1::Listing>>(PrepareAsyncGetListingRaw(context, request, cq));
    }
    ::grpc::Status CreateListing(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::CreateListingRequest& request, ::google::cloud::bigquery::analyticshub::v1::Listing* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::analyticshub::v1::Listing>> AsyncCreateListing(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::CreateListingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::analyticshub::v1::Listing>>(AsyncCreateListingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::analyticshub::v1::Listing>> PrepareAsyncCreateListing(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::CreateListingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::analyticshub::v1::Listing>>(PrepareAsyncCreateListingRaw(context, request, cq));
    }
    ::grpc::Status UpdateListing(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::UpdateListingRequest& request, ::google::cloud::bigquery::analyticshub::v1::Listing* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::analyticshub::v1::Listing>> AsyncUpdateListing(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::UpdateListingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::analyticshub::v1::Listing>>(AsyncUpdateListingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::analyticshub::v1::Listing>> PrepareAsyncUpdateListing(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::UpdateListingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::analyticshub::v1::Listing>>(PrepareAsyncUpdateListingRaw(context, request, cq));
    }
    ::grpc::Status DeleteListing(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::DeleteListingRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeleteListing(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::DeleteListingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteListingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncDeleteListing(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::DeleteListingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncDeleteListingRaw(context, request, cq));
    }
    ::grpc::Status SubscribeListing(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::SubscribeListingRequest& request, ::google::cloud::bigquery::analyticshub::v1::SubscribeListingResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::analyticshub::v1::SubscribeListingResponse>> AsyncSubscribeListing(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::SubscribeListingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::analyticshub::v1::SubscribeListingResponse>>(AsyncSubscribeListingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::analyticshub::v1::SubscribeListingResponse>> PrepareAsyncSubscribeListing(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::SubscribeListingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::analyticshub::v1::SubscribeListingResponse>>(PrepareAsyncSubscribeListingRaw(context, request, cq));
    }
    ::grpc::Status GetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::google::iam::v1::Policy* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>> AsyncGetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>>(AsyncGetIamPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>> PrepareAsyncGetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>>(PrepareAsyncGetIamPolicyRaw(context, request, cq));
    }
    ::grpc::Status SetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::google::iam::v1::Policy* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>> AsyncSetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>>(AsyncSetIamPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>> PrepareAsyncSetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>>(PrepareAsyncSetIamPolicyRaw(context, request, cq));
    }
    ::grpc::Status TestIamPermissions(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::google::iam::v1::TestIamPermissionsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::TestIamPermissionsResponse>> AsyncTestIamPermissions(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::TestIamPermissionsResponse>>(AsyncTestIamPermissionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::TestIamPermissionsResponse>> PrepareAsyncTestIamPermissions(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::TestIamPermissionsResponse>>(PrepareAsyncTestIamPermissionsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void ListDataExchanges(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::ListDataExchangesRequest* request, ::google::cloud::bigquery::analyticshub::v1::ListDataExchangesResponse* response, std::function<void(::grpc::Status)>) override;
      void ListDataExchanges(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::ListDataExchangesRequest* request, ::google::cloud::bigquery::analyticshub::v1::ListDataExchangesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListOrgDataExchanges(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::ListOrgDataExchangesRequest* request, ::google::cloud::bigquery::analyticshub::v1::ListOrgDataExchangesResponse* response, std::function<void(::grpc::Status)>) override;
      void ListOrgDataExchanges(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::ListOrgDataExchangesRequest* request, ::google::cloud::bigquery::analyticshub::v1::ListOrgDataExchangesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetDataExchange(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::GetDataExchangeRequest* request, ::google::cloud::bigquery::analyticshub::v1::DataExchange* response, std::function<void(::grpc::Status)>) override;
      void GetDataExchange(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::GetDataExchangeRequest* request, ::google::cloud::bigquery::analyticshub::v1::DataExchange* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateDataExchange(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::CreateDataExchangeRequest* request, ::google::cloud::bigquery::analyticshub::v1::DataExchange* response, std::function<void(::grpc::Status)>) override;
      void CreateDataExchange(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::CreateDataExchangeRequest* request, ::google::cloud::bigquery::analyticshub::v1::DataExchange* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateDataExchange(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::UpdateDataExchangeRequest* request, ::google::cloud::bigquery::analyticshub::v1::DataExchange* response, std::function<void(::grpc::Status)>) override;
      void UpdateDataExchange(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::UpdateDataExchangeRequest* request, ::google::cloud::bigquery::analyticshub::v1::DataExchange* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteDataExchange(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::DeleteDataExchangeRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void DeleteDataExchange(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::DeleteDataExchangeRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListListings(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::ListListingsRequest* request, ::google::cloud::bigquery::analyticshub::v1::ListListingsResponse* response, std::function<void(::grpc::Status)>) override;
      void ListListings(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::ListListingsRequest* request, ::google::cloud::bigquery::analyticshub::v1::ListListingsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetListing(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::GetListingRequest* request, ::google::cloud::bigquery::analyticshub::v1::Listing* response, std::function<void(::grpc::Status)>) override;
      void GetListing(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::GetListingRequest* request, ::google::cloud::bigquery::analyticshub::v1::Listing* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateListing(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::CreateListingRequest* request, ::google::cloud::bigquery::analyticshub::v1::Listing* response, std::function<void(::grpc::Status)>) override;
      void CreateListing(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::CreateListingRequest* request, ::google::cloud::bigquery::analyticshub::v1::Listing* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateListing(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::UpdateListingRequest* request, ::google::cloud::bigquery::analyticshub::v1::Listing* response, std::function<void(::grpc::Status)>) override;
      void UpdateListing(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::UpdateListingRequest* request, ::google::cloud::bigquery::analyticshub::v1::Listing* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteListing(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::DeleteListingRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void DeleteListing(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::DeleteListingRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SubscribeListing(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::SubscribeListingRequest* request, ::google::cloud::bigquery::analyticshub::v1::SubscribeListingResponse* response, std::function<void(::grpc::Status)>) override;
      void SubscribeListing(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::SubscribeListingRequest* request, ::google::cloud::bigquery::analyticshub::v1::SubscribeListingResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest* request, ::google::iam::v1::Policy* response, std::function<void(::grpc::Status)>) override;
      void GetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest* request, ::google::iam::v1::Policy* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest* request, ::google::iam::v1::Policy* response, std::function<void(::grpc::Status)>) override;
      void SetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest* request, ::google::iam::v1::Policy* response, ::grpc::ClientUnaryReactor* reactor) override;
      void TestIamPermissions(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest* request, ::google::iam::v1::TestIamPermissionsResponse* response, std::function<void(::grpc::Status)>) override;
      void TestIamPermissions(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest* request, ::google::iam::v1::TestIamPermissionsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::analyticshub::v1::ListDataExchangesResponse>* AsyncListDataExchangesRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::ListDataExchangesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::analyticshub::v1::ListDataExchangesResponse>* PrepareAsyncListDataExchangesRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::ListDataExchangesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::analyticshub::v1::ListOrgDataExchangesResponse>* AsyncListOrgDataExchangesRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::ListOrgDataExchangesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::analyticshub::v1::ListOrgDataExchangesResponse>* PrepareAsyncListOrgDataExchangesRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::ListOrgDataExchangesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::analyticshub::v1::DataExchange>* AsyncGetDataExchangeRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::GetDataExchangeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::analyticshub::v1::DataExchange>* PrepareAsyncGetDataExchangeRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::GetDataExchangeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::analyticshub::v1::DataExchange>* AsyncCreateDataExchangeRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::CreateDataExchangeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::analyticshub::v1::DataExchange>* PrepareAsyncCreateDataExchangeRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::CreateDataExchangeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::analyticshub::v1::DataExchange>* AsyncUpdateDataExchangeRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::UpdateDataExchangeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::analyticshub::v1::DataExchange>* PrepareAsyncUpdateDataExchangeRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::UpdateDataExchangeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteDataExchangeRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::DeleteDataExchangeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncDeleteDataExchangeRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::DeleteDataExchangeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::analyticshub::v1::ListListingsResponse>* AsyncListListingsRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::ListListingsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::analyticshub::v1::ListListingsResponse>* PrepareAsyncListListingsRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::ListListingsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::analyticshub::v1::Listing>* AsyncGetListingRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::GetListingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::analyticshub::v1::Listing>* PrepareAsyncGetListingRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::GetListingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::analyticshub::v1::Listing>* AsyncCreateListingRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::CreateListingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::analyticshub::v1::Listing>* PrepareAsyncCreateListingRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::CreateListingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::analyticshub::v1::Listing>* AsyncUpdateListingRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::UpdateListingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::analyticshub::v1::Listing>* PrepareAsyncUpdateListingRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::UpdateListingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteListingRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::DeleteListingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncDeleteListingRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::DeleteListingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::analyticshub::v1::SubscribeListingResponse>* AsyncSubscribeListingRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::SubscribeListingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::analyticshub::v1::SubscribeListingResponse>* PrepareAsyncSubscribeListingRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::analyticshub::v1::SubscribeListingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>* AsyncGetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>* PrepareAsyncGetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>* AsyncSetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>* PrepareAsyncSetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::v1::TestIamPermissionsResponse>* AsyncTestIamPermissionsRaw(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::v1::TestIamPermissionsResponse>* PrepareAsyncTestIamPermissionsRaw(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ListDataExchanges_;
    const ::grpc::internal::RpcMethod rpcmethod_ListOrgDataExchanges_;
    const ::grpc::internal::RpcMethod rpcmethod_GetDataExchange_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateDataExchange_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateDataExchange_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteDataExchange_;
    const ::grpc::internal::RpcMethod rpcmethod_ListListings_;
    const ::grpc::internal::RpcMethod rpcmethod_GetListing_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateListing_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateListing_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteListing_;
    const ::grpc::internal::RpcMethod rpcmethod_SubscribeListing_;
    const ::grpc::internal::RpcMethod rpcmethod_GetIamPolicy_;
    const ::grpc::internal::RpcMethod rpcmethod_SetIamPolicy_;
    const ::grpc::internal::RpcMethod rpcmethod_TestIamPermissions_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Lists all data exchanges in a given project and location.
    virtual ::grpc::Status ListDataExchanges(::grpc::ServerContext* context, const ::google::cloud::bigquery::analyticshub::v1::ListDataExchangesRequest* request, ::google::cloud::bigquery::analyticshub::v1::ListDataExchangesResponse* response);
    // Lists all data exchanges from projects in a given organization and
    // location.
    virtual ::grpc::Status ListOrgDataExchanges(::grpc::ServerContext* context, const ::google::cloud::bigquery::analyticshub::v1::ListOrgDataExchangesRequest* request, ::google::cloud::bigquery::analyticshub::v1::ListOrgDataExchangesResponse* response);
    // Gets the details of a data exchange.
    virtual ::grpc::Status GetDataExchange(::grpc::ServerContext* context, const ::google::cloud::bigquery::analyticshub::v1::GetDataExchangeRequest* request, ::google::cloud::bigquery::analyticshub::v1::DataExchange* response);
    // Creates a new data exchange.
    virtual ::grpc::Status CreateDataExchange(::grpc::ServerContext* context, const ::google::cloud::bigquery::analyticshub::v1::CreateDataExchangeRequest* request, ::google::cloud::bigquery::analyticshub::v1::DataExchange* response);
    // Updates an existing data exchange.
    virtual ::grpc::Status UpdateDataExchange(::grpc::ServerContext* context, const ::google::cloud::bigquery::analyticshub::v1::UpdateDataExchangeRequest* request, ::google::cloud::bigquery::analyticshub::v1::DataExchange* response);
    // Deletes an existing data exchange.
    virtual ::grpc::Status DeleteDataExchange(::grpc::ServerContext* context, const ::google::cloud::bigquery::analyticshub::v1::DeleteDataExchangeRequest* request, ::google::protobuf::Empty* response);
    // Lists all listings in a given project and location.
    virtual ::grpc::Status ListListings(::grpc::ServerContext* context, const ::google::cloud::bigquery::analyticshub::v1::ListListingsRequest* request, ::google::cloud::bigquery::analyticshub::v1::ListListingsResponse* response);
    // Gets the details of a listing.
    virtual ::grpc::Status GetListing(::grpc::ServerContext* context, const ::google::cloud::bigquery::analyticshub::v1::GetListingRequest* request, ::google::cloud::bigquery::analyticshub::v1::Listing* response);
    // Creates a new listing.
    virtual ::grpc::Status CreateListing(::grpc::ServerContext* context, const ::google::cloud::bigquery::analyticshub::v1::CreateListingRequest* request, ::google::cloud::bigquery::analyticshub::v1::Listing* response);
    // Updates an existing listing.
    virtual ::grpc::Status UpdateListing(::grpc::ServerContext* context, const ::google::cloud::bigquery::analyticshub::v1::UpdateListingRequest* request, ::google::cloud::bigquery::analyticshub::v1::Listing* response);
    // Deletes a listing.
    virtual ::grpc::Status DeleteListing(::grpc::ServerContext* context, const ::google::cloud::bigquery::analyticshub::v1::DeleteListingRequest* request, ::google::protobuf::Empty* response);
    // Subscribes to a listing.
    //
    // Currently, with Analytics Hub, you can create listings that
    // reference only BigQuery datasets.
    // Upon subscription to a listing for a BigQuery dataset, Analytics Hub
    // creates a linked dataset in the subscriber's project.
    virtual ::grpc::Status SubscribeListing(::grpc::ServerContext* context, const ::google::cloud::bigquery::analyticshub::v1::SubscribeListingRequest* request, ::google::cloud::bigquery::analyticshub::v1::SubscribeListingResponse* response);
    // Gets the IAM policy.
    virtual ::grpc::Status GetIamPolicy(::grpc::ServerContext* context, const ::google::iam::v1::GetIamPolicyRequest* request, ::google::iam::v1::Policy* response);
    // Sets the IAM policy.
    virtual ::grpc::Status SetIamPolicy(::grpc::ServerContext* context, const ::google::iam::v1::SetIamPolicyRequest* request, ::google::iam::v1::Policy* response);
    // Returns the permissions that a caller has.
    virtual ::grpc::Status TestIamPermissions(::grpc::ServerContext* context, const ::google::iam::v1::TestIamPermissionsRequest* request, ::google::iam::v1::TestIamPermissionsResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ListDataExchanges : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListDataExchanges() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ListDataExchanges() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDataExchanges(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::ListDataExchangesRequest* /*request*/, ::google::cloud::bigquery::analyticshub::v1::ListDataExchangesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListDataExchanges(::grpc::ServerContext* context, ::google::cloud::bigquery::analyticshub::v1::ListDataExchangesRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::bigquery::analyticshub::v1::ListDataExchangesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListOrgDataExchanges : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListOrgDataExchanges() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ListOrgDataExchanges() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListOrgDataExchanges(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::ListOrgDataExchangesRequest* /*request*/, ::google::cloud::bigquery::analyticshub::v1::ListOrgDataExchangesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListOrgDataExchanges(::grpc::ServerContext* context, ::google::cloud::bigquery::analyticshub::v1::ListOrgDataExchangesRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::bigquery::analyticshub::v1::ListOrgDataExchangesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDataExchange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetDataExchange() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetDataExchange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDataExchange(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::GetDataExchangeRequest* /*request*/, ::google::cloud::bigquery::analyticshub::v1::DataExchange* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDataExchange(::grpc::ServerContext* context, ::google::cloud::bigquery::analyticshub::v1::GetDataExchangeRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::bigquery::analyticshub::v1::DataExchange>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateDataExchange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateDataExchange() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_CreateDataExchange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDataExchange(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::CreateDataExchangeRequest* /*request*/, ::google::cloud::bigquery::analyticshub::v1::DataExchange* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateDataExchange(::grpc::ServerContext* context, ::google::cloud::bigquery::analyticshub::v1::CreateDataExchangeRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::bigquery::analyticshub::v1::DataExchange>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateDataExchange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateDataExchange() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_UpdateDataExchange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateDataExchange(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::UpdateDataExchangeRequest* /*request*/, ::google::cloud::bigquery::analyticshub::v1::DataExchange* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateDataExchange(::grpc::ServerContext* context, ::google::cloud::bigquery::analyticshub::v1::UpdateDataExchangeRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::bigquery::analyticshub::v1::DataExchange>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteDataExchange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteDataExchange() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_DeleteDataExchange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDataExchange(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::DeleteDataExchangeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteDataExchange(::grpc::ServerContext* context, ::google::cloud::bigquery::analyticshub::v1::DeleteDataExchangeRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListListings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListListings() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_ListListings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListListings(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::ListListingsRequest* /*request*/, ::google::cloud::bigquery::analyticshub::v1::ListListingsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListListings(::grpc::ServerContext* context, ::google::cloud::bigquery::analyticshub::v1::ListListingsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::bigquery::analyticshub::v1::ListListingsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetListing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetListing() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_GetListing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetListing(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::GetListingRequest* /*request*/, ::google::cloud::bigquery::analyticshub::v1::Listing* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetListing(::grpc::ServerContext* context, ::google::cloud::bigquery::analyticshub::v1::GetListingRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::bigquery::analyticshub::v1::Listing>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateListing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateListing() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_CreateListing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateListing(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::CreateListingRequest* /*request*/, ::google::cloud::bigquery::analyticshub::v1::Listing* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateListing(::grpc::ServerContext* context, ::google::cloud::bigquery::analyticshub::v1::CreateListingRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::bigquery::analyticshub::v1::Listing>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateListing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateListing() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_UpdateListing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateListing(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::UpdateListingRequest* /*request*/, ::google::cloud::bigquery::analyticshub::v1::Listing* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateListing(::grpc::ServerContext* context, ::google::cloud::bigquery::analyticshub::v1::UpdateListingRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::bigquery::analyticshub::v1::Listing>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteListing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteListing() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_DeleteListing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteListing(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::DeleteListingRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteListing(::grpc::ServerContext* context, ::google::cloud::bigquery::analyticshub::v1::DeleteListingRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubscribeListing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubscribeListing() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_SubscribeListing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeListing(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::SubscribeListingRequest* /*request*/, ::google::cloud::bigquery::analyticshub::v1::SubscribeListingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeListing(::grpc::ServerContext* context, ::google::cloud::bigquery::analyticshub::v1::SubscribeListingRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::bigquery::analyticshub::v1::SubscribeListingResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetIamPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetIamPolicy() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_GetIamPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIamPolicy(::grpc::ServerContext* /*context*/, const ::google::iam::v1::GetIamPolicyRequest* /*request*/, ::google::iam::v1::Policy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetIamPolicy(::grpc::ServerContext* context, ::google::iam::v1::GetIamPolicyRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::iam::v1::Policy>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetIamPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetIamPolicy() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_SetIamPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetIamPolicy(::grpc::ServerContext* /*context*/, const ::google::iam::v1::SetIamPolicyRequest* /*request*/, ::google::iam::v1::Policy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetIamPolicy(::grpc::ServerContext* context, ::google::iam::v1::SetIamPolicyRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::iam::v1::Policy>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TestIamPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TestIamPermissions() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_TestIamPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestIamPermissions(::grpc::ServerContext* /*context*/, const ::google::iam::v1::TestIamPermissionsRequest* /*request*/, ::google::iam::v1::TestIamPermissionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTestIamPermissions(::grpc::ServerContext* context, ::google::iam::v1::TestIamPermissionsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::iam::v1::TestIamPermissionsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ListDataExchanges<WithAsyncMethod_ListOrgDataExchanges<WithAsyncMethod_GetDataExchange<WithAsyncMethod_CreateDataExchange<WithAsyncMethod_UpdateDataExchange<WithAsyncMethod_DeleteDataExchange<WithAsyncMethod_ListListings<WithAsyncMethod_GetListing<WithAsyncMethod_CreateListing<WithAsyncMethod_UpdateListing<WithAsyncMethod_DeleteListing<WithAsyncMethod_SubscribeListing<WithAsyncMethod_GetIamPolicy<WithAsyncMethod_SetIamPolicy<WithAsyncMethod_TestIamPermissions<Service > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_ListDataExchanges : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListDataExchanges() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::google::cloud::bigquery::analyticshub::v1::ListDataExchangesRequest, ::google::cloud::bigquery::analyticshub::v1::ListDataExchangesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::cloud::bigquery::analyticshub::v1::ListDataExchangesRequest* request, ::google::cloud::bigquery::analyticshub::v1::ListDataExchangesResponse* response) { return this->ListDataExchanges(context, request, response); }));}
    void SetMessageAllocatorFor_ListDataExchanges(
        ::grpc::MessageAllocator< ::google::cloud::bigquery::analyticshub::v1::ListDataExchangesRequest, ::google::cloud::bigquery::analyticshub::v1::ListDataExchangesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::cloud::bigquery::analyticshub::v1::ListDataExchangesRequest, ::google::cloud::bigquery::analyticshub::v1::ListDataExchangesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListDataExchanges() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDataExchanges(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::ListDataExchangesRequest* /*request*/, ::google::cloud::bigquery::analyticshub::v1::ListDataExchangesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListDataExchanges(
      ::grpc::CallbackServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::ListDataExchangesRequest* /*request*/, ::google::cloud::bigquery::analyticshub::v1::ListDataExchangesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListOrgDataExchanges : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListOrgDataExchanges() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::google::cloud::bigquery::analyticshub::v1::ListOrgDataExchangesRequest, ::google::cloud::bigquery::analyticshub::v1::ListOrgDataExchangesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::cloud::bigquery::analyticshub::v1::ListOrgDataExchangesRequest* request, ::google::cloud::bigquery::analyticshub::v1::ListOrgDataExchangesResponse* response) { return this->ListOrgDataExchanges(context, request, response); }));}
    void SetMessageAllocatorFor_ListOrgDataExchanges(
        ::grpc::MessageAllocator< ::google::cloud::bigquery::analyticshub::v1::ListOrgDataExchangesRequest, ::google::cloud::bigquery::analyticshub::v1::ListOrgDataExchangesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::cloud::bigquery::analyticshub::v1::ListOrgDataExchangesRequest, ::google::cloud::bigquery::analyticshub::v1::ListOrgDataExchangesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListOrgDataExchanges() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListOrgDataExchanges(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::ListOrgDataExchangesRequest* /*request*/, ::google::cloud::bigquery::analyticshub::v1::ListOrgDataExchangesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListOrgDataExchanges(
      ::grpc::CallbackServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::ListOrgDataExchangesRequest* /*request*/, ::google::cloud::bigquery::analyticshub::v1::ListOrgDataExchangesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetDataExchange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetDataExchange() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::google::cloud::bigquery::analyticshub::v1::GetDataExchangeRequest, ::google::cloud::bigquery::analyticshub::v1::DataExchange>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::cloud::bigquery::analyticshub::v1::GetDataExchangeRequest* request, ::google::cloud::bigquery::analyticshub::v1::DataExchange* response) { return this->GetDataExchange(context, request, response); }));}
    void SetMessageAllocatorFor_GetDataExchange(
        ::grpc::MessageAllocator< ::google::cloud::bigquery::analyticshub::v1::GetDataExchangeRequest, ::google::cloud::bigquery::analyticshub::v1::DataExchange>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::cloud::bigquery::analyticshub::v1::GetDataExchangeRequest, ::google::cloud::bigquery::analyticshub::v1::DataExchange>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetDataExchange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDataExchange(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::GetDataExchangeRequest* /*request*/, ::google::cloud::bigquery::analyticshub::v1::DataExchange* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDataExchange(
      ::grpc::CallbackServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::GetDataExchangeRequest* /*request*/, ::google::cloud::bigquery::analyticshub::v1::DataExchange* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateDataExchange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateDataExchange() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::google::cloud::bigquery::analyticshub::v1::CreateDataExchangeRequest, ::google::cloud::bigquery::analyticshub::v1::DataExchange>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::cloud::bigquery::analyticshub::v1::CreateDataExchangeRequest* request, ::google::cloud::bigquery::analyticshub::v1::DataExchange* response) { return this->CreateDataExchange(context, request, response); }));}
    void SetMessageAllocatorFor_CreateDataExchange(
        ::grpc::MessageAllocator< ::google::cloud::bigquery::analyticshub::v1::CreateDataExchangeRequest, ::google::cloud::bigquery::analyticshub::v1::DataExchange>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::cloud::bigquery::analyticshub::v1::CreateDataExchangeRequest, ::google::cloud::bigquery::analyticshub::v1::DataExchange>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateDataExchange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDataExchange(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::CreateDataExchangeRequest* /*request*/, ::google::cloud::bigquery::analyticshub::v1::DataExchange* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateDataExchange(
      ::grpc::CallbackServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::CreateDataExchangeRequest* /*request*/, ::google::cloud::bigquery::analyticshub::v1::DataExchange* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateDataExchange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateDataExchange() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::google::cloud::bigquery::analyticshub::v1::UpdateDataExchangeRequest, ::google::cloud::bigquery::analyticshub::v1::DataExchange>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::cloud::bigquery::analyticshub::v1::UpdateDataExchangeRequest* request, ::google::cloud::bigquery::analyticshub::v1::DataExchange* response) { return this->UpdateDataExchange(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateDataExchange(
        ::grpc::MessageAllocator< ::google::cloud::bigquery::analyticshub::v1::UpdateDataExchangeRequest, ::google::cloud::bigquery::analyticshub::v1::DataExchange>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::cloud::bigquery::analyticshub::v1::UpdateDataExchangeRequest, ::google::cloud::bigquery::analyticshub::v1::DataExchange>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateDataExchange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateDataExchange(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::UpdateDataExchangeRequest* /*request*/, ::google::cloud::bigquery::analyticshub::v1::DataExchange* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateDataExchange(
      ::grpc::CallbackServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::UpdateDataExchangeRequest* /*request*/, ::google::cloud::bigquery::analyticshub::v1::DataExchange* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteDataExchange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteDataExchange() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::google::cloud::bigquery::analyticshub::v1::DeleteDataExchangeRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::cloud::bigquery::analyticshub::v1::DeleteDataExchangeRequest* request, ::google::protobuf::Empty* response) { return this->DeleteDataExchange(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteDataExchange(
        ::grpc::MessageAllocator< ::google::cloud::bigquery::analyticshub::v1::DeleteDataExchangeRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::cloud::bigquery::analyticshub::v1::DeleteDataExchangeRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteDataExchange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDataExchange(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::DeleteDataExchangeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteDataExchange(
      ::grpc::CallbackServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::DeleteDataExchangeRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListListings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListListings() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::google::cloud::bigquery::analyticshub::v1::ListListingsRequest, ::google::cloud::bigquery::analyticshub::v1::ListListingsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::cloud::bigquery::analyticshub::v1::ListListingsRequest* request, ::google::cloud::bigquery::analyticshub::v1::ListListingsResponse* response) { return this->ListListings(context, request, response); }));}
    void SetMessageAllocatorFor_ListListings(
        ::grpc::MessageAllocator< ::google::cloud::bigquery::analyticshub::v1::ListListingsRequest, ::google::cloud::bigquery::analyticshub::v1::ListListingsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::cloud::bigquery::analyticshub::v1::ListListingsRequest, ::google::cloud::bigquery::analyticshub::v1::ListListingsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListListings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListListings(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::ListListingsRequest* /*request*/, ::google::cloud::bigquery::analyticshub::v1::ListListingsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListListings(
      ::grpc::CallbackServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::ListListingsRequest* /*request*/, ::google::cloud::bigquery::analyticshub::v1::ListListingsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetListing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetListing() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::google::cloud::bigquery::analyticshub::v1::GetListingRequest, ::google::cloud::bigquery::analyticshub::v1::Listing>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::cloud::bigquery::analyticshub::v1::GetListingRequest* request, ::google::cloud::bigquery::analyticshub::v1::Listing* response) { return this->GetListing(context, request, response); }));}
    void SetMessageAllocatorFor_GetListing(
        ::grpc::MessageAllocator< ::google::cloud::bigquery::analyticshub::v1::GetListingRequest, ::google::cloud::bigquery::analyticshub::v1::Listing>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::cloud::bigquery::analyticshub::v1::GetListingRequest, ::google::cloud::bigquery::analyticshub::v1::Listing>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetListing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetListing(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::GetListingRequest* /*request*/, ::google::cloud::bigquery::analyticshub::v1::Listing* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetListing(
      ::grpc::CallbackServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::GetListingRequest* /*request*/, ::google::cloud::bigquery::analyticshub::v1::Listing* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateListing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateListing() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::google::cloud::bigquery::analyticshub::v1::CreateListingRequest, ::google::cloud::bigquery::analyticshub::v1::Listing>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::cloud::bigquery::analyticshub::v1::CreateListingRequest* request, ::google::cloud::bigquery::analyticshub::v1::Listing* response) { return this->CreateListing(context, request, response); }));}
    void SetMessageAllocatorFor_CreateListing(
        ::grpc::MessageAllocator< ::google::cloud::bigquery::analyticshub::v1::CreateListingRequest, ::google::cloud::bigquery::analyticshub::v1::Listing>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::cloud::bigquery::analyticshub::v1::CreateListingRequest, ::google::cloud::bigquery::analyticshub::v1::Listing>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateListing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateListing(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::CreateListingRequest* /*request*/, ::google::cloud::bigquery::analyticshub::v1::Listing* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateListing(
      ::grpc::CallbackServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::CreateListingRequest* /*request*/, ::google::cloud::bigquery::analyticshub::v1::Listing* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateListing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateListing() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::google::cloud::bigquery::analyticshub::v1::UpdateListingRequest, ::google::cloud::bigquery::analyticshub::v1::Listing>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::cloud::bigquery::analyticshub::v1::UpdateListingRequest* request, ::google::cloud::bigquery::analyticshub::v1::Listing* response) { return this->UpdateListing(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateListing(
        ::grpc::MessageAllocator< ::google::cloud::bigquery::analyticshub::v1::UpdateListingRequest, ::google::cloud::bigquery::analyticshub::v1::Listing>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::cloud::bigquery::analyticshub::v1::UpdateListingRequest, ::google::cloud::bigquery::analyticshub::v1::Listing>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateListing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateListing(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::UpdateListingRequest* /*request*/, ::google::cloud::bigquery::analyticshub::v1::Listing* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateListing(
      ::grpc::CallbackServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::UpdateListingRequest* /*request*/, ::google::cloud::bigquery::analyticshub::v1::Listing* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteListing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteListing() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::google::cloud::bigquery::analyticshub::v1::DeleteListingRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::cloud::bigquery::analyticshub::v1::DeleteListingRequest* request, ::google::protobuf::Empty* response) { return this->DeleteListing(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteListing(
        ::grpc::MessageAllocator< ::google::cloud::bigquery::analyticshub::v1::DeleteListingRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::cloud::bigquery::analyticshub::v1::DeleteListingRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteListing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteListing(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::DeleteListingRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteListing(
      ::grpc::CallbackServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::DeleteListingRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SubscribeListing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SubscribeListing() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::google::cloud::bigquery::analyticshub::v1::SubscribeListingRequest, ::google::cloud::bigquery::analyticshub::v1::SubscribeListingResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::cloud::bigquery::analyticshub::v1::SubscribeListingRequest* request, ::google::cloud::bigquery::analyticshub::v1::SubscribeListingResponse* response) { return this->SubscribeListing(context, request, response); }));}
    void SetMessageAllocatorFor_SubscribeListing(
        ::grpc::MessageAllocator< ::google::cloud::bigquery::analyticshub::v1::SubscribeListingRequest, ::google::cloud::bigquery::analyticshub::v1::SubscribeListingResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::cloud::bigquery::analyticshub::v1::SubscribeListingRequest, ::google::cloud::bigquery::analyticshub::v1::SubscribeListingResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SubscribeListing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeListing(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::SubscribeListingRequest* /*request*/, ::google::cloud::bigquery::analyticshub::v1::SubscribeListingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SubscribeListing(
      ::grpc::CallbackServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::SubscribeListingRequest* /*request*/, ::google::cloud::bigquery::analyticshub::v1::SubscribeListingResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetIamPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetIamPolicy() {
      ::grpc::Service::MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::google::iam::v1::GetIamPolicyRequest, ::google::iam::v1::Policy>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::iam::v1::GetIamPolicyRequest* request, ::google::iam::v1::Policy* response) { return this->GetIamPolicy(context, request, response); }));}
    void SetMessageAllocatorFor_GetIamPolicy(
        ::grpc::MessageAllocator< ::google::iam::v1::GetIamPolicyRequest, ::google::iam::v1::Policy>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::iam::v1::GetIamPolicyRequest, ::google::iam::v1::Policy>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetIamPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIamPolicy(::grpc::ServerContext* /*context*/, const ::google::iam::v1::GetIamPolicyRequest* /*request*/, ::google::iam::v1::Policy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetIamPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::google::iam::v1::GetIamPolicyRequest* /*request*/, ::google::iam::v1::Policy* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetIamPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetIamPolicy() {
      ::grpc::Service::MarkMethodCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::google::iam::v1::SetIamPolicyRequest, ::google::iam::v1::Policy>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::iam::v1::SetIamPolicyRequest* request, ::google::iam::v1::Policy* response) { return this->SetIamPolicy(context, request, response); }));}
    void SetMessageAllocatorFor_SetIamPolicy(
        ::grpc::MessageAllocator< ::google::iam::v1::SetIamPolicyRequest, ::google::iam::v1::Policy>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::iam::v1::SetIamPolicyRequest, ::google::iam::v1::Policy>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetIamPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetIamPolicy(::grpc::ServerContext* /*context*/, const ::google::iam::v1::SetIamPolicyRequest* /*request*/, ::google::iam::v1::Policy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetIamPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::google::iam::v1::SetIamPolicyRequest* /*request*/, ::google::iam::v1::Policy* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_TestIamPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_TestIamPermissions() {
      ::grpc::Service::MarkMethodCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::google::iam::v1::TestIamPermissionsRequest, ::google::iam::v1::TestIamPermissionsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::iam::v1::TestIamPermissionsRequest* request, ::google::iam::v1::TestIamPermissionsResponse* response) { return this->TestIamPermissions(context, request, response); }));}
    void SetMessageAllocatorFor_TestIamPermissions(
        ::grpc::MessageAllocator< ::google::iam::v1::TestIamPermissionsRequest, ::google::iam::v1::TestIamPermissionsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(14);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::iam::v1::TestIamPermissionsRequest, ::google::iam::v1::TestIamPermissionsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_TestIamPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestIamPermissions(::grpc::ServerContext* /*context*/, const ::google::iam::v1::TestIamPermissionsRequest* /*request*/, ::google::iam::v1::TestIamPermissionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TestIamPermissions(
      ::grpc::CallbackServerContext* /*context*/, const ::google::iam::v1::TestIamPermissionsRequest* /*request*/, ::google::iam::v1::TestIamPermissionsResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_ListDataExchanges<WithCallbackMethod_ListOrgDataExchanges<WithCallbackMethod_GetDataExchange<WithCallbackMethod_CreateDataExchange<WithCallbackMethod_UpdateDataExchange<WithCallbackMethod_DeleteDataExchange<WithCallbackMethod_ListListings<WithCallbackMethod_GetListing<WithCallbackMethod_CreateListing<WithCallbackMethod_UpdateListing<WithCallbackMethod_DeleteListing<WithCallbackMethod_SubscribeListing<WithCallbackMethod_GetIamPolicy<WithCallbackMethod_SetIamPolicy<WithCallbackMethod_TestIamPermissions<Service > > > > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ListDataExchanges : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListDataExchanges() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ListDataExchanges() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDataExchanges(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::ListDataExchangesRequest* /*request*/, ::google::cloud::bigquery::analyticshub::v1::ListDataExchangesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListOrgDataExchanges : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListOrgDataExchanges() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ListOrgDataExchanges() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListOrgDataExchanges(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::ListOrgDataExchangesRequest* /*request*/, ::google::cloud::bigquery::analyticshub::v1::ListOrgDataExchangesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetDataExchange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetDataExchange() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetDataExchange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDataExchange(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::GetDataExchangeRequest* /*request*/, ::google::cloud::bigquery::analyticshub::v1::DataExchange* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateDataExchange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateDataExchange() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_CreateDataExchange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDataExchange(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::CreateDataExchangeRequest* /*request*/, ::google::cloud::bigquery::analyticshub::v1::DataExchange* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateDataExchange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateDataExchange() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_UpdateDataExchange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateDataExchange(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::UpdateDataExchangeRequest* /*request*/, ::google::cloud::bigquery::analyticshub::v1::DataExchange* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteDataExchange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteDataExchange() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_DeleteDataExchange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDataExchange(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::DeleteDataExchangeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListListings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListListings() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_ListListings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListListings(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::ListListingsRequest* /*request*/, ::google::cloud::bigquery::analyticshub::v1::ListListingsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetListing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetListing() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_GetListing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetListing(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::GetListingRequest* /*request*/, ::google::cloud::bigquery::analyticshub::v1::Listing* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateListing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateListing() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_CreateListing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateListing(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::CreateListingRequest* /*request*/, ::google::cloud::bigquery::analyticshub::v1::Listing* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateListing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateListing() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_UpdateListing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateListing(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::UpdateListingRequest* /*request*/, ::google::cloud::bigquery::analyticshub::v1::Listing* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteListing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteListing() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_DeleteListing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteListing(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::DeleteListingRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubscribeListing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubscribeListing() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_SubscribeListing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeListing(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::SubscribeListingRequest* /*request*/, ::google::cloud::bigquery::analyticshub::v1::SubscribeListingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetIamPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetIamPolicy() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_GetIamPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIamPolicy(::grpc::ServerContext* /*context*/, const ::google::iam::v1::GetIamPolicyRequest* /*request*/, ::google::iam::v1::Policy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetIamPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetIamPolicy() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_SetIamPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetIamPolicy(::grpc::ServerContext* /*context*/, const ::google::iam::v1::SetIamPolicyRequest* /*request*/, ::google::iam::v1::Policy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TestIamPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TestIamPermissions() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_TestIamPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestIamPermissions(::grpc::ServerContext* /*context*/, const ::google::iam::v1::TestIamPermissionsRequest* /*request*/, ::google::iam::v1::TestIamPermissionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListDataExchanges : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListDataExchanges() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ListDataExchanges() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDataExchanges(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::ListDataExchangesRequest* /*request*/, ::google::cloud::bigquery::analyticshub::v1::ListDataExchangesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListDataExchanges(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListOrgDataExchanges : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListOrgDataExchanges() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ListOrgDataExchanges() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListOrgDataExchanges(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::ListOrgDataExchangesRequest* /*request*/, ::google::cloud::bigquery::analyticshub::v1::ListOrgDataExchangesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListOrgDataExchanges(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetDataExchange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetDataExchange() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetDataExchange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDataExchange(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::GetDataExchangeRequest* /*request*/, ::google::cloud::bigquery::analyticshub::v1::DataExchange* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDataExchange(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateDataExchange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateDataExchange() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_CreateDataExchange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDataExchange(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::CreateDataExchangeRequest* /*request*/, ::google::cloud::bigquery::analyticshub::v1::DataExchange* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateDataExchange(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateDataExchange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateDataExchange() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_UpdateDataExchange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateDataExchange(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::UpdateDataExchangeRequest* /*request*/, ::google::cloud::bigquery::analyticshub::v1::DataExchange* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateDataExchange(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteDataExchange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteDataExchange() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_DeleteDataExchange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDataExchange(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::DeleteDataExchangeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteDataExchange(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListListings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListListings() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_ListListings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListListings(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::ListListingsRequest* /*request*/, ::google::cloud::bigquery::analyticshub::v1::ListListingsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListListings(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetListing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetListing() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_GetListing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetListing(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::GetListingRequest* /*request*/, ::google::cloud::bigquery::analyticshub::v1::Listing* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetListing(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateListing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateListing() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_CreateListing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateListing(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::CreateListingRequest* /*request*/, ::google::cloud::bigquery::analyticshub::v1::Listing* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateListing(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateListing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateListing() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_UpdateListing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateListing(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::UpdateListingRequest* /*request*/, ::google::cloud::bigquery::analyticshub::v1::Listing* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateListing(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteListing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteListing() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_DeleteListing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteListing(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::DeleteListingRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteListing(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubscribeListing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubscribeListing() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_SubscribeListing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeListing(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::SubscribeListingRequest* /*request*/, ::google::cloud::bigquery::analyticshub::v1::SubscribeListingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeListing(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetIamPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetIamPolicy() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_GetIamPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIamPolicy(::grpc::ServerContext* /*context*/, const ::google::iam::v1::GetIamPolicyRequest* /*request*/, ::google::iam::v1::Policy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetIamPolicy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetIamPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetIamPolicy() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_SetIamPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetIamPolicy(::grpc::ServerContext* /*context*/, const ::google::iam::v1::SetIamPolicyRequest* /*request*/, ::google::iam::v1::Policy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetIamPolicy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TestIamPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TestIamPermissions() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_TestIamPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestIamPermissions(::grpc::ServerContext* /*context*/, const ::google::iam::v1::TestIamPermissionsRequest* /*request*/, ::google::iam::v1::TestIamPermissionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTestIamPermissions(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListDataExchanges : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListDataExchanges() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListDataExchanges(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListDataExchanges() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDataExchanges(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::ListDataExchangesRequest* /*request*/, ::google::cloud::bigquery::analyticshub::v1::ListDataExchangesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListDataExchanges(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListOrgDataExchanges : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListOrgDataExchanges() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListOrgDataExchanges(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListOrgDataExchanges() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListOrgDataExchanges(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::ListOrgDataExchangesRequest* /*request*/, ::google::cloud::bigquery::analyticshub::v1::ListOrgDataExchangesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListOrgDataExchanges(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetDataExchange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetDataExchange() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetDataExchange(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetDataExchange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDataExchange(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::GetDataExchangeRequest* /*request*/, ::google::cloud::bigquery::analyticshub::v1::DataExchange* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDataExchange(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateDataExchange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateDataExchange() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateDataExchange(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateDataExchange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDataExchange(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::CreateDataExchangeRequest* /*request*/, ::google::cloud::bigquery::analyticshub::v1::DataExchange* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateDataExchange(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateDataExchange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateDataExchange() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateDataExchange(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateDataExchange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateDataExchange(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::UpdateDataExchangeRequest* /*request*/, ::google::cloud::bigquery::analyticshub::v1::DataExchange* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateDataExchange(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteDataExchange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteDataExchange() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteDataExchange(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteDataExchange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDataExchange(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::DeleteDataExchangeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteDataExchange(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListListings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListListings() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListListings(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListListings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListListings(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::ListListingsRequest* /*request*/, ::google::cloud::bigquery::analyticshub::v1::ListListingsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListListings(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetListing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetListing() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetListing(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetListing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetListing(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::GetListingRequest* /*request*/, ::google::cloud::bigquery::analyticshub::v1::Listing* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetListing(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateListing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateListing() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateListing(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateListing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateListing(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::CreateListingRequest* /*request*/, ::google::cloud::bigquery::analyticshub::v1::Listing* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateListing(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateListing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateListing() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateListing(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateListing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateListing(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::UpdateListingRequest* /*request*/, ::google::cloud::bigquery::analyticshub::v1::Listing* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateListing(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteListing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteListing() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteListing(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteListing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteListing(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::DeleteListingRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteListing(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SubscribeListing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SubscribeListing() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SubscribeListing(context, request, response); }));
    }
    ~WithRawCallbackMethod_SubscribeListing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeListing(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::SubscribeListingRequest* /*request*/, ::google::cloud::bigquery::analyticshub::v1::SubscribeListingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SubscribeListing(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetIamPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetIamPolicy() {
      ::grpc::Service::MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetIamPolicy(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetIamPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIamPolicy(::grpc::ServerContext* /*context*/, const ::google::iam::v1::GetIamPolicyRequest* /*request*/, ::google::iam::v1::Policy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetIamPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetIamPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetIamPolicy() {
      ::grpc::Service::MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetIamPolicy(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetIamPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetIamPolicy(::grpc::ServerContext* /*context*/, const ::google::iam::v1::SetIamPolicyRequest* /*request*/, ::google::iam::v1::Policy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetIamPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_TestIamPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_TestIamPermissions() {
      ::grpc::Service::MarkMethodRawCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TestIamPermissions(context, request, response); }));
    }
    ~WithRawCallbackMethod_TestIamPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestIamPermissions(::grpc::ServerContext* /*context*/, const ::google::iam::v1::TestIamPermissionsRequest* /*request*/, ::google::iam::v1::TestIamPermissionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TestIamPermissions(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListDataExchanges : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListDataExchanges() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::cloud::bigquery::analyticshub::v1::ListDataExchangesRequest, ::google::cloud::bigquery::analyticshub::v1::ListDataExchangesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::cloud::bigquery::analyticshub::v1::ListDataExchangesRequest, ::google::cloud::bigquery::analyticshub::v1::ListDataExchangesResponse>* streamer) {
                       return this->StreamedListDataExchanges(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListDataExchanges() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListDataExchanges(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::ListDataExchangesRequest* /*request*/, ::google::cloud::bigquery::analyticshub::v1::ListDataExchangesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListDataExchanges(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::bigquery::analyticshub::v1::ListDataExchangesRequest,::google::cloud::bigquery::analyticshub::v1::ListDataExchangesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListOrgDataExchanges : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListOrgDataExchanges() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::cloud::bigquery::analyticshub::v1::ListOrgDataExchangesRequest, ::google::cloud::bigquery::analyticshub::v1::ListOrgDataExchangesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::cloud::bigquery::analyticshub::v1::ListOrgDataExchangesRequest, ::google::cloud::bigquery::analyticshub::v1::ListOrgDataExchangesResponse>* streamer) {
                       return this->StreamedListOrgDataExchanges(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListOrgDataExchanges() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListOrgDataExchanges(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::ListOrgDataExchangesRequest* /*request*/, ::google::cloud::bigquery::analyticshub::v1::ListOrgDataExchangesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListOrgDataExchanges(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::bigquery::analyticshub::v1::ListOrgDataExchangesRequest,::google::cloud::bigquery::analyticshub::v1::ListOrgDataExchangesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetDataExchange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetDataExchange() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::cloud::bigquery::analyticshub::v1::GetDataExchangeRequest, ::google::cloud::bigquery::analyticshub::v1::DataExchange>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::cloud::bigquery::analyticshub::v1::GetDataExchangeRequest, ::google::cloud::bigquery::analyticshub::v1::DataExchange>* streamer) {
                       return this->StreamedGetDataExchange(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetDataExchange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDataExchange(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::GetDataExchangeRequest* /*request*/, ::google::cloud::bigquery::analyticshub::v1::DataExchange* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetDataExchange(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::bigquery::analyticshub::v1::GetDataExchangeRequest,::google::cloud::bigquery::analyticshub::v1::DataExchange>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateDataExchange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateDataExchange() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::cloud::bigquery::analyticshub::v1::CreateDataExchangeRequest, ::google::cloud::bigquery::analyticshub::v1::DataExchange>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::cloud::bigquery::analyticshub::v1::CreateDataExchangeRequest, ::google::cloud::bigquery::analyticshub::v1::DataExchange>* streamer) {
                       return this->StreamedCreateDataExchange(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateDataExchange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateDataExchange(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::CreateDataExchangeRequest* /*request*/, ::google::cloud::bigquery::analyticshub::v1::DataExchange* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateDataExchange(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::bigquery::analyticshub::v1::CreateDataExchangeRequest,::google::cloud::bigquery::analyticshub::v1::DataExchange>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateDataExchange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateDataExchange() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::cloud::bigquery::analyticshub::v1::UpdateDataExchangeRequest, ::google::cloud::bigquery::analyticshub::v1::DataExchange>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::cloud::bigquery::analyticshub::v1::UpdateDataExchangeRequest, ::google::cloud::bigquery::analyticshub::v1::DataExchange>* streamer) {
                       return this->StreamedUpdateDataExchange(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateDataExchange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateDataExchange(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::UpdateDataExchangeRequest* /*request*/, ::google::cloud::bigquery::analyticshub::v1::DataExchange* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateDataExchange(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::bigquery::analyticshub::v1::UpdateDataExchangeRequest,::google::cloud::bigquery::analyticshub::v1::DataExchange>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteDataExchange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteDataExchange() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::cloud::bigquery::analyticshub::v1::DeleteDataExchangeRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::cloud::bigquery::analyticshub::v1::DeleteDataExchangeRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedDeleteDataExchange(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteDataExchange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteDataExchange(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::DeleteDataExchangeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteDataExchange(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::bigquery::analyticshub::v1::DeleteDataExchangeRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListListings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListListings() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::cloud::bigquery::analyticshub::v1::ListListingsRequest, ::google::cloud::bigquery::analyticshub::v1::ListListingsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::cloud::bigquery::analyticshub::v1::ListListingsRequest, ::google::cloud::bigquery::analyticshub::v1::ListListingsResponse>* streamer) {
                       return this->StreamedListListings(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListListings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListListings(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::ListListingsRequest* /*request*/, ::google::cloud::bigquery::analyticshub::v1::ListListingsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListListings(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::bigquery::analyticshub::v1::ListListingsRequest,::google::cloud::bigquery::analyticshub::v1::ListListingsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetListing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetListing() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::cloud::bigquery::analyticshub::v1::GetListingRequest, ::google::cloud::bigquery::analyticshub::v1::Listing>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::cloud::bigquery::analyticshub::v1::GetListingRequest, ::google::cloud::bigquery::analyticshub::v1::Listing>* streamer) {
                       return this->StreamedGetListing(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetListing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetListing(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::GetListingRequest* /*request*/, ::google::cloud::bigquery::analyticshub::v1::Listing* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetListing(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::bigquery::analyticshub::v1::GetListingRequest,::google::cloud::bigquery::analyticshub::v1::Listing>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateListing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateListing() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::cloud::bigquery::analyticshub::v1::CreateListingRequest, ::google::cloud::bigquery::analyticshub::v1::Listing>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::cloud::bigquery::analyticshub::v1::CreateListingRequest, ::google::cloud::bigquery::analyticshub::v1::Listing>* streamer) {
                       return this->StreamedCreateListing(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateListing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateListing(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::CreateListingRequest* /*request*/, ::google::cloud::bigquery::analyticshub::v1::Listing* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateListing(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::bigquery::analyticshub::v1::CreateListingRequest,::google::cloud::bigquery::analyticshub::v1::Listing>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateListing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateListing() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::cloud::bigquery::analyticshub::v1::UpdateListingRequest, ::google::cloud::bigquery::analyticshub::v1::Listing>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::cloud::bigquery::analyticshub::v1::UpdateListingRequest, ::google::cloud::bigquery::analyticshub::v1::Listing>* streamer) {
                       return this->StreamedUpdateListing(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateListing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateListing(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::UpdateListingRequest* /*request*/, ::google::cloud::bigquery::analyticshub::v1::Listing* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateListing(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::bigquery::analyticshub::v1::UpdateListingRequest,::google::cloud::bigquery::analyticshub::v1::Listing>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteListing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteListing() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::cloud::bigquery::analyticshub::v1::DeleteListingRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::cloud::bigquery::analyticshub::v1::DeleteListingRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedDeleteListing(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteListing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteListing(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::DeleteListingRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteListing(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::bigquery::analyticshub::v1::DeleteListingRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SubscribeListing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SubscribeListing() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::cloud::bigquery::analyticshub::v1::SubscribeListingRequest, ::google::cloud::bigquery::analyticshub::v1::SubscribeListingResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::cloud::bigquery::analyticshub::v1::SubscribeListingRequest, ::google::cloud::bigquery::analyticshub::v1::SubscribeListingResponse>* streamer) {
                       return this->StreamedSubscribeListing(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SubscribeListing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubscribeListing(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::analyticshub::v1::SubscribeListingRequest* /*request*/, ::google::cloud::bigquery::analyticshub::v1::SubscribeListingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSubscribeListing(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::bigquery::analyticshub::v1::SubscribeListingRequest,::google::cloud::bigquery::analyticshub::v1::SubscribeListingResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetIamPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetIamPolicy() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::iam::v1::GetIamPolicyRequest, ::google::iam::v1::Policy>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::iam::v1::GetIamPolicyRequest, ::google::iam::v1::Policy>* streamer) {
                       return this->StreamedGetIamPolicy(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetIamPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetIamPolicy(::grpc::ServerContext* /*context*/, const ::google::iam::v1::GetIamPolicyRequest* /*request*/, ::google::iam::v1::Policy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetIamPolicy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::iam::v1::GetIamPolicyRequest,::google::iam::v1::Policy>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetIamPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetIamPolicy() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::iam::v1::SetIamPolicyRequest, ::google::iam::v1::Policy>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::iam::v1::SetIamPolicyRequest, ::google::iam::v1::Policy>* streamer) {
                       return this->StreamedSetIamPolicy(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetIamPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetIamPolicy(::grpc::ServerContext* /*context*/, const ::google::iam::v1::SetIamPolicyRequest* /*request*/, ::google::iam::v1::Policy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetIamPolicy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::iam::v1::SetIamPolicyRequest,::google::iam::v1::Policy>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TestIamPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TestIamPermissions() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::iam::v1::TestIamPermissionsRequest, ::google::iam::v1::TestIamPermissionsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::iam::v1::TestIamPermissionsRequest, ::google::iam::v1::TestIamPermissionsResponse>* streamer) {
                       return this->StreamedTestIamPermissions(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TestIamPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TestIamPermissions(::grpc::ServerContext* /*context*/, const ::google::iam::v1::TestIamPermissionsRequest* /*request*/, ::google::iam::v1::TestIamPermissionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTestIamPermissions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::iam::v1::TestIamPermissionsRequest,::google::iam::v1::TestIamPermissionsResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ListDataExchanges<WithStreamedUnaryMethod_ListOrgDataExchanges<WithStreamedUnaryMethod_GetDataExchange<WithStreamedUnaryMethod_CreateDataExchange<WithStreamedUnaryMethod_UpdateDataExchange<WithStreamedUnaryMethod_DeleteDataExchange<WithStreamedUnaryMethod_ListListings<WithStreamedUnaryMethod_GetListing<WithStreamedUnaryMethod_CreateListing<WithStreamedUnaryMethod_UpdateListing<WithStreamedUnaryMethod_DeleteListing<WithStreamedUnaryMethod_SubscribeListing<WithStreamedUnaryMethod_GetIamPolicy<WithStreamedUnaryMethod_SetIamPolicy<WithStreamedUnaryMethod_TestIamPermissions<Service > > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ListDataExchanges<WithStreamedUnaryMethod_ListOrgDataExchanges<WithStreamedUnaryMethod_GetDataExchange<WithStreamedUnaryMethod_CreateDataExchange<WithStreamedUnaryMethod_UpdateDataExchange<WithStreamedUnaryMethod_DeleteDataExchange<WithStreamedUnaryMethod_ListListings<WithStreamedUnaryMethod_GetListing<WithStreamedUnaryMethod_CreateListing<WithStreamedUnaryMethod_UpdateListing<WithStreamedUnaryMethod_DeleteListing<WithStreamedUnaryMethod_SubscribeListing<WithStreamedUnaryMethod_GetIamPolicy<WithStreamedUnaryMethod_SetIamPolicy<WithStreamedUnaryMethod_TestIamPermissions<Service > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace v1
}  // namespace analyticshub
}  // namespace bigquery
}  // namespace cloud
}  // namespace google


#endif  // GRPC_google_2fcloud_2fbigquery_2fanalyticshub_2fv1_2fanalyticshub_2eproto__INCLUDED
