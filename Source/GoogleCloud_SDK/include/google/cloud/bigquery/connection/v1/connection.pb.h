// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/bigquery/connection/v1/connection.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fbigquery_2fconnection_2fv1_2fconnection_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fbigquery_2fconnection_2fv1_2fconnection_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include "google/api/field_behavior.pb.h"
#include "google/api/resource.pb.h"
#include "google/iam/v1/iam_policy.pb.h"
#include "google/iam/v1/policy.pb.h"
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/field_mask.pb.h>
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fcloud_2fbigquery_2fconnection_2fv1_2fconnection_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fcloud_2fbigquery_2fconnection_2fv1_2fconnection_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[13]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fcloud_2fbigquery_2fconnection_2fv1_2fconnection_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_google_2fcloud_2fbigquery_2fconnection_2fv1_2fconnection_2eproto_metadata_getter(int index);
namespace google {
namespace cloud {
namespace bigquery {
namespace connection {
namespace v1 {
class AwsAccessRole;
struct AwsAccessRoleDefaultTypeInternal;
extern AwsAccessRoleDefaultTypeInternal _AwsAccessRole_default_instance_;
class AwsCrossAccountRole;
struct AwsCrossAccountRoleDefaultTypeInternal;
extern AwsCrossAccountRoleDefaultTypeInternal _AwsCrossAccountRole_default_instance_;
class AwsProperties;
struct AwsPropertiesDefaultTypeInternal;
extern AwsPropertiesDefaultTypeInternal _AwsProperties_default_instance_;
class CloudSpannerProperties;
struct CloudSpannerPropertiesDefaultTypeInternal;
extern CloudSpannerPropertiesDefaultTypeInternal _CloudSpannerProperties_default_instance_;
class CloudSqlCredential;
struct CloudSqlCredentialDefaultTypeInternal;
extern CloudSqlCredentialDefaultTypeInternal _CloudSqlCredential_default_instance_;
class CloudSqlProperties;
struct CloudSqlPropertiesDefaultTypeInternal;
extern CloudSqlPropertiesDefaultTypeInternal _CloudSqlProperties_default_instance_;
class Connection;
struct ConnectionDefaultTypeInternal;
extern ConnectionDefaultTypeInternal _Connection_default_instance_;
class CreateConnectionRequest;
struct CreateConnectionRequestDefaultTypeInternal;
extern CreateConnectionRequestDefaultTypeInternal _CreateConnectionRequest_default_instance_;
class DeleteConnectionRequest;
struct DeleteConnectionRequestDefaultTypeInternal;
extern DeleteConnectionRequestDefaultTypeInternal _DeleteConnectionRequest_default_instance_;
class GetConnectionRequest;
struct GetConnectionRequestDefaultTypeInternal;
extern GetConnectionRequestDefaultTypeInternal _GetConnectionRequest_default_instance_;
class ListConnectionsRequest;
struct ListConnectionsRequestDefaultTypeInternal;
extern ListConnectionsRequestDefaultTypeInternal _ListConnectionsRequest_default_instance_;
class ListConnectionsResponse;
struct ListConnectionsResponseDefaultTypeInternal;
extern ListConnectionsResponseDefaultTypeInternal _ListConnectionsResponse_default_instance_;
class UpdateConnectionRequest;
struct UpdateConnectionRequestDefaultTypeInternal;
extern UpdateConnectionRequestDefaultTypeInternal _UpdateConnectionRequest_default_instance_;
}  // namespace v1
}  // namespace connection
}  // namespace bigquery
}  // namespace cloud
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::cloud::bigquery::connection::v1::AwsAccessRole* Arena::CreateMaybeMessage<::google::cloud::bigquery::connection::v1::AwsAccessRole>(Arena*);
template<> ::google::cloud::bigquery::connection::v1::AwsCrossAccountRole* Arena::CreateMaybeMessage<::google::cloud::bigquery::connection::v1::AwsCrossAccountRole>(Arena*);
template<> ::google::cloud::bigquery::connection::v1::AwsProperties* Arena::CreateMaybeMessage<::google::cloud::bigquery::connection::v1::AwsProperties>(Arena*);
template<> ::google::cloud::bigquery::connection::v1::CloudSpannerProperties* Arena::CreateMaybeMessage<::google::cloud::bigquery::connection::v1::CloudSpannerProperties>(Arena*);
template<> ::google::cloud::bigquery::connection::v1::CloudSqlCredential* Arena::CreateMaybeMessage<::google::cloud::bigquery::connection::v1::CloudSqlCredential>(Arena*);
template<> ::google::cloud::bigquery::connection::v1::CloudSqlProperties* Arena::CreateMaybeMessage<::google::cloud::bigquery::connection::v1::CloudSqlProperties>(Arena*);
template<> ::google::cloud::bigquery::connection::v1::Connection* Arena::CreateMaybeMessage<::google::cloud::bigquery::connection::v1::Connection>(Arena*);
template<> ::google::cloud::bigquery::connection::v1::CreateConnectionRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::connection::v1::CreateConnectionRequest>(Arena*);
template<> ::google::cloud::bigquery::connection::v1::DeleteConnectionRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::connection::v1::DeleteConnectionRequest>(Arena*);
template<> ::google::cloud::bigquery::connection::v1::GetConnectionRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::connection::v1::GetConnectionRequest>(Arena*);
template<> ::google::cloud::bigquery::connection::v1::ListConnectionsRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::connection::v1::ListConnectionsRequest>(Arena*);
template<> ::google::cloud::bigquery::connection::v1::ListConnectionsResponse* Arena::CreateMaybeMessage<::google::cloud::bigquery::connection::v1::ListConnectionsResponse>(Arena*);
template<> ::google::cloud::bigquery::connection::v1::UpdateConnectionRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::connection::v1::UpdateConnectionRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace cloud {
namespace bigquery {
namespace connection {
namespace v1 {

enum CloudSqlProperties_DatabaseType : int {
  CloudSqlProperties_DatabaseType_DATABASE_TYPE_UNSPECIFIED = 0,
  CloudSqlProperties_DatabaseType_POSTGRES = 1,
  CloudSqlProperties_DatabaseType_MYSQL = 2,
  CloudSqlProperties_DatabaseType_CloudSqlProperties_DatabaseType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CloudSqlProperties_DatabaseType_CloudSqlProperties_DatabaseType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CloudSqlProperties_DatabaseType_IsValid(int value);
constexpr CloudSqlProperties_DatabaseType CloudSqlProperties_DatabaseType_DatabaseType_MIN = CloudSqlProperties_DatabaseType_DATABASE_TYPE_UNSPECIFIED;
constexpr CloudSqlProperties_DatabaseType CloudSqlProperties_DatabaseType_DatabaseType_MAX = CloudSqlProperties_DatabaseType_MYSQL;
constexpr int CloudSqlProperties_DatabaseType_DatabaseType_ARRAYSIZE = CloudSqlProperties_DatabaseType_DatabaseType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CloudSqlProperties_DatabaseType_descriptor();
template<typename T>
inline const std::string& CloudSqlProperties_DatabaseType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CloudSqlProperties_DatabaseType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CloudSqlProperties_DatabaseType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CloudSqlProperties_DatabaseType_descriptor(), enum_t_value);
}
inline bool CloudSqlProperties_DatabaseType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CloudSqlProperties_DatabaseType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CloudSqlProperties_DatabaseType>(
    CloudSqlProperties_DatabaseType_descriptor(), name, value);
}
// ===================================================================

class CreateConnectionRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.connection.v1.CreateConnectionRequest) */ {
 public:
  inline CreateConnectionRequest() : CreateConnectionRequest(nullptr) {}
  virtual ~CreateConnectionRequest();
  explicit constexpr CreateConnectionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateConnectionRequest(const CreateConnectionRequest& from);
  CreateConnectionRequest(CreateConnectionRequest&& from) noexcept
    : CreateConnectionRequest() {
    *this = ::std::move(from);
  }

  inline CreateConnectionRequest& operator=(const CreateConnectionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateConnectionRequest& operator=(CreateConnectionRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateConnectionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateConnectionRequest* internal_default_instance() {
    return reinterpret_cast<const CreateConnectionRequest*>(
               &_CreateConnectionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CreateConnectionRequest& a, CreateConnectionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateConnectionRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateConnectionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateConnectionRequest* New() const final {
    return CreateMaybeMessage<CreateConnectionRequest>(nullptr);
  }

  CreateConnectionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateConnectionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateConnectionRequest& from);
  void MergeFrom(const CreateConnectionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateConnectionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.connection.v1.CreateConnectionRequest";
  }
  protected:
  explicit CreateConnectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fcloud_2fbigquery_2fconnection_2fv1_2fconnection_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kConnectionIdFieldNumber = 2,
    kConnectionFieldNumber = 3,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  void set_parent(const std::string& value);
  void set_parent(std::string&& value);
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  std::string* mutable_parent();
  std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string connection_id = 2 [(.google.api.field_behavior) = OPTIONAL];
  void clear_connection_id();
  const std::string& connection_id() const;
  void set_connection_id(const std::string& value);
  void set_connection_id(std::string&& value);
  void set_connection_id(const char* value);
  void set_connection_id(const char* value, size_t size);
  std::string* mutable_connection_id();
  std::string* release_connection_id();
  void set_allocated_connection_id(std::string* connection_id);
  private:
  const std::string& _internal_connection_id() const;
  void _internal_set_connection_id(const std::string& value);
  std::string* _internal_mutable_connection_id();
  public:

  // .google.cloud.bigquery.connection.v1.Connection connection = 3 [(.google.api.field_behavior) = REQUIRED];
  bool has_connection() const;
  private:
  bool _internal_has_connection() const;
  public:
  void clear_connection();
  const ::google::cloud::bigquery::connection::v1::Connection& connection() const;
  ::google::cloud::bigquery::connection::v1::Connection* release_connection();
  ::google::cloud::bigquery::connection::v1::Connection* mutable_connection();
  void set_allocated_connection(::google::cloud::bigquery::connection::v1::Connection* connection);
  private:
  const ::google::cloud::bigquery::connection::v1::Connection& _internal_connection() const;
  ::google::cloud::bigquery::connection::v1::Connection* _internal_mutable_connection();
  public:
  void unsafe_arena_set_allocated_connection(
      ::google::cloud::bigquery::connection::v1::Connection* connection);
  ::google::cloud::bigquery::connection::v1::Connection* unsafe_arena_release_connection();

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.connection.v1.CreateConnectionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr connection_id_;
  ::google::cloud::bigquery::connection::v1::Connection* connection_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fconnection_2fv1_2fconnection_2eproto;
};
// -------------------------------------------------------------------

class GetConnectionRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.connection.v1.GetConnectionRequest) */ {
 public:
  inline GetConnectionRequest() : GetConnectionRequest(nullptr) {}
  virtual ~GetConnectionRequest();
  explicit constexpr GetConnectionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetConnectionRequest(const GetConnectionRequest& from);
  GetConnectionRequest(GetConnectionRequest&& from) noexcept
    : GetConnectionRequest() {
    *this = ::std::move(from);
  }

  inline GetConnectionRequest& operator=(const GetConnectionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetConnectionRequest& operator=(GetConnectionRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetConnectionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetConnectionRequest* internal_default_instance() {
    return reinterpret_cast<const GetConnectionRequest*>(
               &_GetConnectionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetConnectionRequest& a, GetConnectionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetConnectionRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetConnectionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetConnectionRequest* New() const final {
    return CreateMaybeMessage<GetConnectionRequest>(nullptr);
  }

  GetConnectionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetConnectionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetConnectionRequest& from);
  void MergeFrom(const GetConnectionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetConnectionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.connection.v1.GetConnectionRequest";
  }
  protected:
  explicit GetConnectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fcloud_2fbigquery_2fconnection_2fv1_2fconnection_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.connection.v1.GetConnectionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fconnection_2fv1_2fconnection_2eproto;
};
// -------------------------------------------------------------------

class ListConnectionsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.connection.v1.ListConnectionsRequest) */ {
 public:
  inline ListConnectionsRequest() : ListConnectionsRequest(nullptr) {}
  virtual ~ListConnectionsRequest();
  explicit constexpr ListConnectionsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListConnectionsRequest(const ListConnectionsRequest& from);
  ListConnectionsRequest(ListConnectionsRequest&& from) noexcept
    : ListConnectionsRequest() {
    *this = ::std::move(from);
  }

  inline ListConnectionsRequest& operator=(const ListConnectionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListConnectionsRequest& operator=(ListConnectionsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListConnectionsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListConnectionsRequest* internal_default_instance() {
    return reinterpret_cast<const ListConnectionsRequest*>(
               &_ListConnectionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ListConnectionsRequest& a, ListConnectionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListConnectionsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListConnectionsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListConnectionsRequest* New() const final {
    return CreateMaybeMessage<ListConnectionsRequest>(nullptr);
  }

  ListConnectionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListConnectionsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListConnectionsRequest& from);
  void MergeFrom(const ListConnectionsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListConnectionsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.connection.v1.ListConnectionsRequest";
  }
  protected:
  explicit ListConnectionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fcloud_2fbigquery_2fconnection_2fv1_2fconnection_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kPageSizeFieldNumber = 4,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  void set_parent(const std::string& value);
  void set_parent(std::string&& value);
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  std::string* mutable_parent();
  std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 3;
  void clear_page_token();
  const std::string& page_token() const;
  void set_page_token(const std::string& value);
  void set_page_token(std::string&& value);
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  std::string* mutable_page_token();
  std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 4 [(.google.api.field_behavior) = REQUIRED];
  void clear_page_size();
  ::PROTOBUF_NAMESPACE_ID::int32 page_size() const;
  void set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_page_size() const;
  void _internal_set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.connection.v1.ListConnectionsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
  ::PROTOBUF_NAMESPACE_ID::int32 page_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fconnection_2fv1_2fconnection_2eproto;
};
// -------------------------------------------------------------------

class ListConnectionsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.connection.v1.ListConnectionsResponse) */ {
 public:
  inline ListConnectionsResponse() : ListConnectionsResponse(nullptr) {}
  virtual ~ListConnectionsResponse();
  explicit constexpr ListConnectionsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListConnectionsResponse(const ListConnectionsResponse& from);
  ListConnectionsResponse(ListConnectionsResponse&& from) noexcept
    : ListConnectionsResponse() {
    *this = ::std::move(from);
  }

  inline ListConnectionsResponse& operator=(const ListConnectionsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListConnectionsResponse& operator=(ListConnectionsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListConnectionsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListConnectionsResponse* internal_default_instance() {
    return reinterpret_cast<const ListConnectionsResponse*>(
               &_ListConnectionsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ListConnectionsResponse& a, ListConnectionsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListConnectionsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListConnectionsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListConnectionsResponse* New() const final {
    return CreateMaybeMessage<ListConnectionsResponse>(nullptr);
  }

  ListConnectionsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListConnectionsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListConnectionsResponse& from);
  void MergeFrom(const ListConnectionsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListConnectionsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.connection.v1.ListConnectionsResponse";
  }
  protected:
  explicit ListConnectionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fcloud_2fbigquery_2fconnection_2fv1_2fconnection_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectionsFieldNumber = 2,
    kNextPageTokenFieldNumber = 1,
  };
  // repeated .google.cloud.bigquery.connection.v1.Connection connections = 2;
  int connections_size() const;
  private:
  int _internal_connections_size() const;
  public:
  void clear_connections();
  ::google::cloud::bigquery::connection::v1::Connection* mutable_connections(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::connection::v1::Connection >*
      mutable_connections();
  private:
  const ::google::cloud::bigquery::connection::v1::Connection& _internal_connections(int index) const;
  ::google::cloud::bigquery::connection::v1::Connection* _internal_add_connections();
  public:
  const ::google::cloud::bigquery::connection::v1::Connection& connections(int index) const;
  ::google::cloud::bigquery::connection::v1::Connection* add_connections();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::connection::v1::Connection >&
      connections() const;

  // string next_page_token = 1;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  void set_next_page_token(const std::string& value);
  void set_next_page_token(std::string&& value);
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  std::string* mutable_next_page_token();
  std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.connection.v1.ListConnectionsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::connection::v1::Connection > connections_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fconnection_2fv1_2fconnection_2eproto;
};
// -------------------------------------------------------------------

class UpdateConnectionRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.connection.v1.UpdateConnectionRequest) */ {
 public:
  inline UpdateConnectionRequest() : UpdateConnectionRequest(nullptr) {}
  virtual ~UpdateConnectionRequest();
  explicit constexpr UpdateConnectionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateConnectionRequest(const UpdateConnectionRequest& from);
  UpdateConnectionRequest(UpdateConnectionRequest&& from) noexcept
    : UpdateConnectionRequest() {
    *this = ::std::move(from);
  }

  inline UpdateConnectionRequest& operator=(const UpdateConnectionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateConnectionRequest& operator=(UpdateConnectionRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateConnectionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateConnectionRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateConnectionRequest*>(
               &_UpdateConnectionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UpdateConnectionRequest& a, UpdateConnectionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateConnectionRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateConnectionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateConnectionRequest* New() const final {
    return CreateMaybeMessage<UpdateConnectionRequest>(nullptr);
  }

  UpdateConnectionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateConnectionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateConnectionRequest& from);
  void MergeFrom(const UpdateConnectionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateConnectionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.connection.v1.UpdateConnectionRequest";
  }
  protected:
  explicit UpdateConnectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fcloud_2fbigquery_2fconnection_2fv1_2fconnection_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kConnectionFieldNumber = 2,
    kUpdateMaskFieldNumber = 3,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.cloud.bigquery.connection.v1.Connection connection = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_connection() const;
  private:
  bool _internal_has_connection() const;
  public:
  void clear_connection();
  const ::google::cloud::bigquery::connection::v1::Connection& connection() const;
  ::google::cloud::bigquery::connection::v1::Connection* release_connection();
  ::google::cloud::bigquery::connection::v1::Connection* mutable_connection();
  void set_allocated_connection(::google::cloud::bigquery::connection::v1::Connection* connection);
  private:
  const ::google::cloud::bigquery::connection::v1::Connection& _internal_connection() const;
  ::google::cloud::bigquery::connection::v1::Connection* _internal_mutable_connection();
  public:
  void unsafe_arena_set_allocated_connection(
      ::google::cloud::bigquery::connection::v1::Connection* connection);
  ::google::cloud::bigquery::connection::v1::Connection* unsafe_arena_release_connection();

  // .google.protobuf.FieldMask update_mask = 3 [(.google.api.field_behavior) = REQUIRED];
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.connection.v1.UpdateConnectionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::google::cloud::bigquery::connection::v1::Connection* connection_;
  PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fconnection_2fv1_2fconnection_2eproto;
};
// -------------------------------------------------------------------

class DeleteConnectionRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.connection.v1.DeleteConnectionRequest) */ {
 public:
  inline DeleteConnectionRequest() : DeleteConnectionRequest(nullptr) {}
  virtual ~DeleteConnectionRequest();
  explicit constexpr DeleteConnectionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteConnectionRequest(const DeleteConnectionRequest& from);
  DeleteConnectionRequest(DeleteConnectionRequest&& from) noexcept
    : DeleteConnectionRequest() {
    *this = ::std::move(from);
  }

  inline DeleteConnectionRequest& operator=(const DeleteConnectionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteConnectionRequest& operator=(DeleteConnectionRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteConnectionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteConnectionRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteConnectionRequest*>(
               &_DeleteConnectionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DeleteConnectionRequest& a, DeleteConnectionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteConnectionRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteConnectionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteConnectionRequest* New() const final {
    return CreateMaybeMessage<DeleteConnectionRequest>(nullptr);
  }

  DeleteConnectionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteConnectionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteConnectionRequest& from);
  void MergeFrom(const DeleteConnectionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteConnectionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.connection.v1.DeleteConnectionRequest";
  }
  protected:
  explicit DeleteConnectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fcloud_2fbigquery_2fconnection_2fv1_2fconnection_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.connection.v1.DeleteConnectionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fconnection_2fv1_2fconnection_2eproto;
};
// -------------------------------------------------------------------

class Connection PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.connection.v1.Connection) */ {
 public:
  inline Connection() : Connection(nullptr) {}
  virtual ~Connection();
  explicit constexpr Connection(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Connection(const Connection& from);
  Connection(Connection&& from) noexcept
    : Connection() {
    *this = ::std::move(from);
  }

  inline Connection& operator=(const Connection& from) {
    CopyFrom(from);
    return *this;
  }
  inline Connection& operator=(Connection&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Connection& default_instance() {
    return *internal_default_instance();
  }
  enum PropertiesCase {
    kCloudSql = 4,
    kAws = 8,
    kCloudSpanner = 21,
    PROPERTIES_NOT_SET = 0,
  };

  static inline const Connection* internal_default_instance() {
    return reinterpret_cast<const Connection*>(
               &_Connection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Connection& a, Connection& b) {
    a.Swap(&b);
  }
  inline void Swap(Connection* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Connection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Connection* New() const final {
    return CreateMaybeMessage<Connection>(nullptr);
  }

  Connection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Connection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Connection& from);
  void MergeFrom(const Connection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Connection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.connection.v1.Connection";
  }
  protected:
  explicit Connection(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fcloud_2fbigquery_2fconnection_2fv1_2fconnection_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kFriendlyNameFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kCreationTimeFieldNumber = 5,
    kLastModifiedTimeFieldNumber = 6,
    kHasCredentialFieldNumber = 7,
    kCloudSqlFieldNumber = 4,
    kAwsFieldNumber = 8,
    kCloudSpannerFieldNumber = 21,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string friendly_name = 2;
  void clear_friendly_name();
  const std::string& friendly_name() const;
  void set_friendly_name(const std::string& value);
  void set_friendly_name(std::string&& value);
  void set_friendly_name(const char* value);
  void set_friendly_name(const char* value, size_t size);
  std::string* mutable_friendly_name();
  std::string* release_friendly_name();
  void set_allocated_friendly_name(std::string* friendly_name);
  private:
  const std::string& _internal_friendly_name() const;
  void _internal_set_friendly_name(const std::string& value);
  std::string* _internal_mutable_friendly_name();
  public:

  // string description = 3;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // int64 creation_time = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_creation_time();
  ::PROTOBUF_NAMESPACE_ID::int64 creation_time() const;
  void set_creation_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_creation_time() const;
  void _internal_set_creation_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 last_modified_time = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_last_modified_time();
  ::PROTOBUF_NAMESPACE_ID::int64 last_modified_time() const;
  void set_last_modified_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_last_modified_time() const;
  void _internal_set_last_modified_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool has_credential = 7 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_has_credential();
  bool has_credential() const;
  void set_has_credential(bool value);
  private:
  bool _internal_has_credential() const;
  void _internal_set_has_credential(bool value);
  public:

  // .google.cloud.bigquery.connection.v1.CloudSqlProperties cloud_sql = 4;
  bool has_cloud_sql() const;
  private:
  bool _internal_has_cloud_sql() const;
  public:
  void clear_cloud_sql();
  const ::google::cloud::bigquery::connection::v1::CloudSqlProperties& cloud_sql() const;
  ::google::cloud::bigquery::connection::v1::CloudSqlProperties* release_cloud_sql();
  ::google::cloud::bigquery::connection::v1::CloudSqlProperties* mutable_cloud_sql();
  void set_allocated_cloud_sql(::google::cloud::bigquery::connection::v1::CloudSqlProperties* cloud_sql);
  private:
  const ::google::cloud::bigquery::connection::v1::CloudSqlProperties& _internal_cloud_sql() const;
  ::google::cloud::bigquery::connection::v1::CloudSqlProperties* _internal_mutable_cloud_sql();
  public:
  void unsafe_arena_set_allocated_cloud_sql(
      ::google::cloud::bigquery::connection::v1::CloudSqlProperties* cloud_sql);
  ::google::cloud::bigquery::connection::v1::CloudSqlProperties* unsafe_arena_release_cloud_sql();

  // .google.cloud.bigquery.connection.v1.AwsProperties aws = 8;
  bool has_aws() const;
  private:
  bool _internal_has_aws() const;
  public:
  void clear_aws();
  const ::google::cloud::bigquery::connection::v1::AwsProperties& aws() const;
  ::google::cloud::bigquery::connection::v1::AwsProperties* release_aws();
  ::google::cloud::bigquery::connection::v1::AwsProperties* mutable_aws();
  void set_allocated_aws(::google::cloud::bigquery::connection::v1::AwsProperties* aws);
  private:
  const ::google::cloud::bigquery::connection::v1::AwsProperties& _internal_aws() const;
  ::google::cloud::bigquery::connection::v1::AwsProperties* _internal_mutable_aws();
  public:
  void unsafe_arena_set_allocated_aws(
      ::google::cloud::bigquery::connection::v1::AwsProperties* aws);
  ::google::cloud::bigquery::connection::v1::AwsProperties* unsafe_arena_release_aws();

  // .google.cloud.bigquery.connection.v1.CloudSpannerProperties cloud_spanner = 21;
  bool has_cloud_spanner() const;
  private:
  bool _internal_has_cloud_spanner() const;
  public:
  void clear_cloud_spanner();
  const ::google::cloud::bigquery::connection::v1::CloudSpannerProperties& cloud_spanner() const;
  ::google::cloud::bigquery::connection::v1::CloudSpannerProperties* release_cloud_spanner();
  ::google::cloud::bigquery::connection::v1::CloudSpannerProperties* mutable_cloud_spanner();
  void set_allocated_cloud_spanner(::google::cloud::bigquery::connection::v1::CloudSpannerProperties* cloud_spanner);
  private:
  const ::google::cloud::bigquery::connection::v1::CloudSpannerProperties& _internal_cloud_spanner() const;
  ::google::cloud::bigquery::connection::v1::CloudSpannerProperties* _internal_mutable_cloud_spanner();
  public:
  void unsafe_arena_set_allocated_cloud_spanner(
      ::google::cloud::bigquery::connection::v1::CloudSpannerProperties* cloud_spanner);
  ::google::cloud::bigquery::connection::v1::CloudSpannerProperties* unsafe_arena_release_cloud_spanner();

  void clear_properties();
  PropertiesCase properties_case() const;
  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.connection.v1.Connection)
 private:
  class _Internal;
  void set_has_cloud_sql();
  void set_has_aws();
  void set_has_cloud_spanner();

  inline bool has_properties() const;
  inline void clear_has_properties();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr friendly_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::int64 creation_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_modified_time_;
  bool has_credential_;
  union PropertiesUnion {
    constexpr PropertiesUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::google::cloud::bigquery::connection::v1::CloudSqlProperties* cloud_sql_;
    ::google::cloud::bigquery::connection::v1::AwsProperties* aws_;
    ::google::cloud::bigquery::connection::v1::CloudSpannerProperties* cloud_spanner_;
  } properties_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fconnection_2fv1_2fconnection_2eproto;
};
// -------------------------------------------------------------------

class CloudSqlProperties PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.connection.v1.CloudSqlProperties) */ {
 public:
  inline CloudSqlProperties() : CloudSqlProperties(nullptr) {}
  virtual ~CloudSqlProperties();
  explicit constexpr CloudSqlProperties(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CloudSqlProperties(const CloudSqlProperties& from);
  CloudSqlProperties(CloudSqlProperties&& from) noexcept
    : CloudSqlProperties() {
    *this = ::std::move(from);
  }

  inline CloudSqlProperties& operator=(const CloudSqlProperties& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloudSqlProperties& operator=(CloudSqlProperties&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CloudSqlProperties& default_instance() {
    return *internal_default_instance();
  }
  static inline const CloudSqlProperties* internal_default_instance() {
    return reinterpret_cast<const CloudSqlProperties*>(
               &_CloudSqlProperties_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CloudSqlProperties& a, CloudSqlProperties& b) {
    a.Swap(&b);
  }
  inline void Swap(CloudSqlProperties* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CloudSqlProperties* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CloudSqlProperties* New() const final {
    return CreateMaybeMessage<CloudSqlProperties>(nullptr);
  }

  CloudSqlProperties* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CloudSqlProperties>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CloudSqlProperties& from);
  void MergeFrom(const CloudSqlProperties& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloudSqlProperties* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.connection.v1.CloudSqlProperties";
  }
  protected:
  explicit CloudSqlProperties(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fcloud_2fbigquery_2fconnection_2fv1_2fconnection_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CloudSqlProperties_DatabaseType DatabaseType;
  static constexpr DatabaseType DATABASE_TYPE_UNSPECIFIED =
    CloudSqlProperties_DatabaseType_DATABASE_TYPE_UNSPECIFIED;
  static constexpr DatabaseType POSTGRES =
    CloudSqlProperties_DatabaseType_POSTGRES;
  static constexpr DatabaseType MYSQL =
    CloudSqlProperties_DatabaseType_MYSQL;
  static inline bool DatabaseType_IsValid(int value) {
    return CloudSqlProperties_DatabaseType_IsValid(value);
  }
  static constexpr DatabaseType DatabaseType_MIN =
    CloudSqlProperties_DatabaseType_DatabaseType_MIN;
  static constexpr DatabaseType DatabaseType_MAX =
    CloudSqlProperties_DatabaseType_DatabaseType_MAX;
  static constexpr int DatabaseType_ARRAYSIZE =
    CloudSqlProperties_DatabaseType_DatabaseType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DatabaseType_descriptor() {
    return CloudSqlProperties_DatabaseType_descriptor();
  }
  template<typename T>
  static inline const std::string& DatabaseType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DatabaseType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DatabaseType_Name.");
    return CloudSqlProperties_DatabaseType_Name(enum_t_value);
  }
  static inline bool DatabaseType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DatabaseType* value) {
    return CloudSqlProperties_DatabaseType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kInstanceIdFieldNumber = 1,
    kDatabaseFieldNumber = 2,
    kCredentialFieldNumber = 4,
    kTypeFieldNumber = 3,
  };
  // string instance_id = 1;
  void clear_instance_id();
  const std::string& instance_id() const;
  void set_instance_id(const std::string& value);
  void set_instance_id(std::string&& value);
  void set_instance_id(const char* value);
  void set_instance_id(const char* value, size_t size);
  std::string* mutable_instance_id();
  std::string* release_instance_id();
  void set_allocated_instance_id(std::string* instance_id);
  private:
  const std::string& _internal_instance_id() const;
  void _internal_set_instance_id(const std::string& value);
  std::string* _internal_mutable_instance_id();
  public:

  // string database = 2;
  void clear_database();
  const std::string& database() const;
  void set_database(const std::string& value);
  void set_database(std::string&& value);
  void set_database(const char* value);
  void set_database(const char* value, size_t size);
  std::string* mutable_database();
  std::string* release_database();
  void set_allocated_database(std::string* database);
  private:
  const std::string& _internal_database() const;
  void _internal_set_database(const std::string& value);
  std::string* _internal_mutable_database();
  public:

  // .google.cloud.bigquery.connection.v1.CloudSqlCredential credential = 4 [(.google.api.field_behavior) = INPUT_ONLY];
  bool has_credential() const;
  private:
  bool _internal_has_credential() const;
  public:
  void clear_credential();
  const ::google::cloud::bigquery::connection::v1::CloudSqlCredential& credential() const;
  ::google::cloud::bigquery::connection::v1::CloudSqlCredential* release_credential();
  ::google::cloud::bigquery::connection::v1::CloudSqlCredential* mutable_credential();
  void set_allocated_credential(::google::cloud::bigquery::connection::v1::CloudSqlCredential* credential);
  private:
  const ::google::cloud::bigquery::connection::v1::CloudSqlCredential& _internal_credential() const;
  ::google::cloud::bigquery::connection::v1::CloudSqlCredential* _internal_mutable_credential();
  public:
  void unsafe_arena_set_allocated_credential(
      ::google::cloud::bigquery::connection::v1::CloudSqlCredential* credential);
  ::google::cloud::bigquery::connection::v1::CloudSqlCredential* unsafe_arena_release_credential();

  // .google.cloud.bigquery.connection.v1.CloudSqlProperties.DatabaseType type = 3;
  void clear_type();
  ::google::cloud::bigquery::connection::v1::CloudSqlProperties_DatabaseType type() const;
  void set_type(::google::cloud::bigquery::connection::v1::CloudSqlProperties_DatabaseType value);
  private:
  ::google::cloud::bigquery::connection::v1::CloudSqlProperties_DatabaseType _internal_type() const;
  void _internal_set_type(::google::cloud::bigquery::connection::v1::CloudSqlProperties_DatabaseType value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.connection.v1.CloudSqlProperties)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instance_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr database_;
  ::google::cloud::bigquery::connection::v1::CloudSqlCredential* credential_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fconnection_2fv1_2fconnection_2eproto;
};
// -------------------------------------------------------------------

class CloudSqlCredential PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.connection.v1.CloudSqlCredential) */ {
 public:
  inline CloudSqlCredential() : CloudSqlCredential(nullptr) {}
  virtual ~CloudSqlCredential();
  explicit constexpr CloudSqlCredential(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CloudSqlCredential(const CloudSqlCredential& from);
  CloudSqlCredential(CloudSqlCredential&& from) noexcept
    : CloudSqlCredential() {
    *this = ::std::move(from);
  }

  inline CloudSqlCredential& operator=(const CloudSqlCredential& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloudSqlCredential& operator=(CloudSqlCredential&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CloudSqlCredential& default_instance() {
    return *internal_default_instance();
  }
  static inline const CloudSqlCredential* internal_default_instance() {
    return reinterpret_cast<const CloudSqlCredential*>(
               &_CloudSqlCredential_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CloudSqlCredential& a, CloudSqlCredential& b) {
    a.Swap(&b);
  }
  inline void Swap(CloudSqlCredential* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CloudSqlCredential* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CloudSqlCredential* New() const final {
    return CreateMaybeMessage<CloudSqlCredential>(nullptr);
  }

  CloudSqlCredential* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CloudSqlCredential>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CloudSqlCredential& from);
  void MergeFrom(const CloudSqlCredential& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloudSqlCredential* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.connection.v1.CloudSqlCredential";
  }
  protected:
  explicit CloudSqlCredential(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fcloud_2fbigquery_2fconnection_2fv1_2fconnection_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.connection.v1.CloudSqlCredential)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fconnection_2fv1_2fconnection_2eproto;
};
// -------------------------------------------------------------------

class CloudSpannerProperties PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.connection.v1.CloudSpannerProperties) */ {
 public:
  inline CloudSpannerProperties() : CloudSpannerProperties(nullptr) {}
  virtual ~CloudSpannerProperties();
  explicit constexpr CloudSpannerProperties(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CloudSpannerProperties(const CloudSpannerProperties& from);
  CloudSpannerProperties(CloudSpannerProperties&& from) noexcept
    : CloudSpannerProperties() {
    *this = ::std::move(from);
  }

  inline CloudSpannerProperties& operator=(const CloudSpannerProperties& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloudSpannerProperties& operator=(CloudSpannerProperties&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CloudSpannerProperties& default_instance() {
    return *internal_default_instance();
  }
  static inline const CloudSpannerProperties* internal_default_instance() {
    return reinterpret_cast<const CloudSpannerProperties*>(
               &_CloudSpannerProperties_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CloudSpannerProperties& a, CloudSpannerProperties& b) {
    a.Swap(&b);
  }
  inline void Swap(CloudSpannerProperties* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CloudSpannerProperties* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CloudSpannerProperties* New() const final {
    return CreateMaybeMessage<CloudSpannerProperties>(nullptr);
  }

  CloudSpannerProperties* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CloudSpannerProperties>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CloudSpannerProperties& from);
  void MergeFrom(const CloudSpannerProperties& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloudSpannerProperties* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.connection.v1.CloudSpannerProperties";
  }
  protected:
  explicit CloudSpannerProperties(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fcloud_2fbigquery_2fconnection_2fv1_2fconnection_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatabaseFieldNumber = 1,
    kUseParallelismFieldNumber = 2,
  };
  // string database = 1;
  void clear_database();
  const std::string& database() const;
  void set_database(const std::string& value);
  void set_database(std::string&& value);
  void set_database(const char* value);
  void set_database(const char* value, size_t size);
  std::string* mutable_database();
  std::string* release_database();
  void set_allocated_database(std::string* database);
  private:
  const std::string& _internal_database() const;
  void _internal_set_database(const std::string& value);
  std::string* _internal_mutable_database();
  public:

  // bool use_parallelism = 2;
  void clear_use_parallelism();
  bool use_parallelism() const;
  void set_use_parallelism(bool value);
  private:
  bool _internal_use_parallelism() const;
  void _internal_set_use_parallelism(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.connection.v1.CloudSpannerProperties)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr database_;
  bool use_parallelism_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fconnection_2fv1_2fconnection_2eproto;
};
// -------------------------------------------------------------------

class AwsProperties PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.connection.v1.AwsProperties) */ {
 public:
  inline AwsProperties() : AwsProperties(nullptr) {}
  virtual ~AwsProperties();
  explicit constexpr AwsProperties(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AwsProperties(const AwsProperties& from);
  AwsProperties(AwsProperties&& from) noexcept
    : AwsProperties() {
    *this = ::std::move(from);
  }

  inline AwsProperties& operator=(const AwsProperties& from) {
    CopyFrom(from);
    return *this;
  }
  inline AwsProperties& operator=(AwsProperties&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AwsProperties& default_instance() {
    return *internal_default_instance();
  }
  enum AuthenticationMethodCase {
    kCrossAccountRole = 2,
    kAccessRole = 3,
    AUTHENTICATION_METHOD_NOT_SET = 0,
  };

  static inline const AwsProperties* internal_default_instance() {
    return reinterpret_cast<const AwsProperties*>(
               &_AwsProperties_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(AwsProperties& a, AwsProperties& b) {
    a.Swap(&b);
  }
  inline void Swap(AwsProperties* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AwsProperties* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AwsProperties* New() const final {
    return CreateMaybeMessage<AwsProperties>(nullptr);
  }

  AwsProperties* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AwsProperties>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AwsProperties& from);
  void MergeFrom(const AwsProperties& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AwsProperties* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.connection.v1.AwsProperties";
  }
  protected:
  explicit AwsProperties(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fcloud_2fbigquery_2fconnection_2fv1_2fconnection_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCrossAccountRoleFieldNumber = 2,
    kAccessRoleFieldNumber = 3,
  };
  // .google.cloud.bigquery.connection.v1.AwsCrossAccountRole cross_account_role = 2;
  bool has_cross_account_role() const;
  private:
  bool _internal_has_cross_account_role() const;
  public:
  void clear_cross_account_role();
  const ::google::cloud::bigquery::connection::v1::AwsCrossAccountRole& cross_account_role() const;
  ::google::cloud::bigquery::connection::v1::AwsCrossAccountRole* release_cross_account_role();
  ::google::cloud::bigquery::connection::v1::AwsCrossAccountRole* mutable_cross_account_role();
  void set_allocated_cross_account_role(::google::cloud::bigquery::connection::v1::AwsCrossAccountRole* cross_account_role);
  private:
  const ::google::cloud::bigquery::connection::v1::AwsCrossAccountRole& _internal_cross_account_role() const;
  ::google::cloud::bigquery::connection::v1::AwsCrossAccountRole* _internal_mutable_cross_account_role();
  public:
  void unsafe_arena_set_allocated_cross_account_role(
      ::google::cloud::bigquery::connection::v1::AwsCrossAccountRole* cross_account_role);
  ::google::cloud::bigquery::connection::v1::AwsCrossAccountRole* unsafe_arena_release_cross_account_role();

  // .google.cloud.bigquery.connection.v1.AwsAccessRole access_role = 3;
  bool has_access_role() const;
  private:
  bool _internal_has_access_role() const;
  public:
  void clear_access_role();
  const ::google::cloud::bigquery::connection::v1::AwsAccessRole& access_role() const;
  ::google::cloud::bigquery::connection::v1::AwsAccessRole* release_access_role();
  ::google::cloud::bigquery::connection::v1::AwsAccessRole* mutable_access_role();
  void set_allocated_access_role(::google::cloud::bigquery::connection::v1::AwsAccessRole* access_role);
  private:
  const ::google::cloud::bigquery::connection::v1::AwsAccessRole& _internal_access_role() const;
  ::google::cloud::bigquery::connection::v1::AwsAccessRole* _internal_mutable_access_role();
  public:
  void unsafe_arena_set_allocated_access_role(
      ::google::cloud::bigquery::connection::v1::AwsAccessRole* access_role);
  ::google::cloud::bigquery::connection::v1::AwsAccessRole* unsafe_arena_release_access_role();

  void clear_authentication_method();
  AuthenticationMethodCase authentication_method_case() const;
  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.connection.v1.AwsProperties)
 private:
  class _Internal;
  void set_has_cross_account_role();
  void set_has_access_role();

  inline bool has_authentication_method() const;
  inline void clear_has_authentication_method();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union AuthenticationMethodUnion {
    constexpr AuthenticationMethodUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::google::cloud::bigquery::connection::v1::AwsCrossAccountRole* cross_account_role_;
    ::google::cloud::bigquery::connection::v1::AwsAccessRole* access_role_;
  } authentication_method_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fconnection_2fv1_2fconnection_2eproto;
};
// -------------------------------------------------------------------

class AwsCrossAccountRole PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.connection.v1.AwsCrossAccountRole) */ {
 public:
  inline AwsCrossAccountRole() : AwsCrossAccountRole(nullptr) {}
  virtual ~AwsCrossAccountRole();
  explicit constexpr AwsCrossAccountRole(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AwsCrossAccountRole(const AwsCrossAccountRole& from);
  AwsCrossAccountRole(AwsCrossAccountRole&& from) noexcept
    : AwsCrossAccountRole() {
    *this = ::std::move(from);
  }

  inline AwsCrossAccountRole& operator=(const AwsCrossAccountRole& from) {
    CopyFrom(from);
    return *this;
  }
  inline AwsCrossAccountRole& operator=(AwsCrossAccountRole&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AwsCrossAccountRole& default_instance() {
    return *internal_default_instance();
  }
  static inline const AwsCrossAccountRole* internal_default_instance() {
    return reinterpret_cast<const AwsCrossAccountRole*>(
               &_AwsCrossAccountRole_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(AwsCrossAccountRole& a, AwsCrossAccountRole& b) {
    a.Swap(&b);
  }
  inline void Swap(AwsCrossAccountRole* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AwsCrossAccountRole* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AwsCrossAccountRole* New() const final {
    return CreateMaybeMessage<AwsCrossAccountRole>(nullptr);
  }

  AwsCrossAccountRole* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AwsCrossAccountRole>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AwsCrossAccountRole& from);
  void MergeFrom(const AwsCrossAccountRole& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AwsCrossAccountRole* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.connection.v1.AwsCrossAccountRole";
  }
  protected:
  explicit AwsCrossAccountRole(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fcloud_2fbigquery_2fconnection_2fv1_2fconnection_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIamRoleIdFieldNumber = 1,
    kIamUserIdFieldNumber = 2,
    kExternalIdFieldNumber = 3,
  };
  // string iam_role_id = 1;
  void clear_iam_role_id();
  const std::string& iam_role_id() const;
  void set_iam_role_id(const std::string& value);
  void set_iam_role_id(std::string&& value);
  void set_iam_role_id(const char* value);
  void set_iam_role_id(const char* value, size_t size);
  std::string* mutable_iam_role_id();
  std::string* release_iam_role_id();
  void set_allocated_iam_role_id(std::string* iam_role_id);
  private:
  const std::string& _internal_iam_role_id() const;
  void _internal_set_iam_role_id(const std::string& value);
  std::string* _internal_mutable_iam_role_id();
  public:

  // string iam_user_id = 2 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_iam_user_id();
  const std::string& iam_user_id() const;
  void set_iam_user_id(const std::string& value);
  void set_iam_user_id(std::string&& value);
  void set_iam_user_id(const char* value);
  void set_iam_user_id(const char* value, size_t size);
  std::string* mutable_iam_user_id();
  std::string* release_iam_user_id();
  void set_allocated_iam_user_id(std::string* iam_user_id);
  private:
  const std::string& _internal_iam_user_id() const;
  void _internal_set_iam_user_id(const std::string& value);
  std::string* _internal_mutable_iam_user_id();
  public:

  // string external_id = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_external_id();
  const std::string& external_id() const;
  void set_external_id(const std::string& value);
  void set_external_id(std::string&& value);
  void set_external_id(const char* value);
  void set_external_id(const char* value, size_t size);
  std::string* mutable_external_id();
  std::string* release_external_id();
  void set_allocated_external_id(std::string* external_id);
  private:
  const std::string& _internal_external_id() const;
  void _internal_set_external_id(const std::string& value);
  std::string* _internal_mutable_external_id();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.connection.v1.AwsCrossAccountRole)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr iam_role_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr iam_user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr external_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fconnection_2fv1_2fconnection_2eproto;
};
// -------------------------------------------------------------------

class AwsAccessRole PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.connection.v1.AwsAccessRole) */ {
 public:
  inline AwsAccessRole() : AwsAccessRole(nullptr) {}
  virtual ~AwsAccessRole();
  explicit constexpr AwsAccessRole(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AwsAccessRole(const AwsAccessRole& from);
  AwsAccessRole(AwsAccessRole&& from) noexcept
    : AwsAccessRole() {
    *this = ::std::move(from);
  }

  inline AwsAccessRole& operator=(const AwsAccessRole& from) {
    CopyFrom(from);
    return *this;
  }
  inline AwsAccessRole& operator=(AwsAccessRole&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AwsAccessRole& default_instance() {
    return *internal_default_instance();
  }
  static inline const AwsAccessRole* internal_default_instance() {
    return reinterpret_cast<const AwsAccessRole*>(
               &_AwsAccessRole_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(AwsAccessRole& a, AwsAccessRole& b) {
    a.Swap(&b);
  }
  inline void Swap(AwsAccessRole* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AwsAccessRole* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AwsAccessRole* New() const final {
    return CreateMaybeMessage<AwsAccessRole>(nullptr);
  }

  AwsAccessRole* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AwsAccessRole>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AwsAccessRole& from);
  void MergeFrom(const AwsAccessRole& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AwsAccessRole* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.connection.v1.AwsAccessRole";
  }
  protected:
  explicit AwsAccessRole(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fcloud_2fbigquery_2fconnection_2fv1_2fconnection_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIamRoleIdFieldNumber = 1,
    kIdentityFieldNumber = 2,
  };
  // string iam_role_id = 1;
  void clear_iam_role_id();
  const std::string& iam_role_id() const;
  void set_iam_role_id(const std::string& value);
  void set_iam_role_id(std::string&& value);
  void set_iam_role_id(const char* value);
  void set_iam_role_id(const char* value, size_t size);
  std::string* mutable_iam_role_id();
  std::string* release_iam_role_id();
  void set_allocated_iam_role_id(std::string* iam_role_id);
  private:
  const std::string& _internal_iam_role_id() const;
  void _internal_set_iam_role_id(const std::string& value);
  std::string* _internal_mutable_iam_role_id();
  public:

  // string identity = 2;
  void clear_identity();
  const std::string& identity() const;
  void set_identity(const std::string& value);
  void set_identity(std::string&& value);
  void set_identity(const char* value);
  void set_identity(const char* value, size_t size);
  std::string* mutable_identity();
  std::string* release_identity();
  void set_allocated_identity(std::string* identity);
  private:
  const std::string& _internal_identity() const;
  void _internal_set_identity(const std::string& value);
  std::string* _internal_mutable_identity();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.connection.v1.AwsAccessRole)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr iam_role_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fconnection_2fv1_2fconnection_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateConnectionRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreateConnectionRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& CreateConnectionRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.connection.v1.CreateConnectionRequest.parent)
  return _internal_parent();
}
inline void CreateConnectionRequest::set_parent(const std::string& value) {
  _internal_set_parent(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.connection.v1.CreateConnectionRequest.parent)
}
inline std::string* CreateConnectionRequest::mutable_parent() {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.connection.v1.CreateConnectionRequest.parent)
  return _internal_mutable_parent();
}
inline const std::string& CreateConnectionRequest::_internal_parent() const {
  return parent_.Get();
}
inline void CreateConnectionRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateConnectionRequest::set_parent(std::string&& value) {
  
  parent_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.connection.v1.CreateConnectionRequest.parent)
}
inline void CreateConnectionRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.connection.v1.CreateConnectionRequest.parent)
}
inline void CreateConnectionRequest::set_parent(const char* value,
    size_t size) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.connection.v1.CreateConnectionRequest.parent)
}
inline std::string* CreateConnectionRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateConnectionRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.connection.v1.CreateConnectionRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateConnectionRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.connection.v1.CreateConnectionRequest.parent)
}

// string connection_id = 2 [(.google.api.field_behavior) = OPTIONAL];
inline void CreateConnectionRequest::clear_connection_id() {
  connection_id_.ClearToEmpty();
}
inline const std::string& CreateConnectionRequest::connection_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.connection.v1.CreateConnectionRequest.connection_id)
  return _internal_connection_id();
}
inline void CreateConnectionRequest::set_connection_id(const std::string& value) {
  _internal_set_connection_id(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.connection.v1.CreateConnectionRequest.connection_id)
}
inline std::string* CreateConnectionRequest::mutable_connection_id() {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.connection.v1.CreateConnectionRequest.connection_id)
  return _internal_mutable_connection_id();
}
inline const std::string& CreateConnectionRequest::_internal_connection_id() const {
  return connection_id_.Get();
}
inline void CreateConnectionRequest::_internal_set_connection_id(const std::string& value) {
  
  connection_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateConnectionRequest::set_connection_id(std::string&& value) {
  
  connection_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.connection.v1.CreateConnectionRequest.connection_id)
}
inline void CreateConnectionRequest::set_connection_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  connection_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.connection.v1.CreateConnectionRequest.connection_id)
}
inline void CreateConnectionRequest::set_connection_id(const char* value,
    size_t size) {
  
  connection_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.connection.v1.CreateConnectionRequest.connection_id)
}
inline std::string* CreateConnectionRequest::_internal_mutable_connection_id() {
  
  return connection_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateConnectionRequest::release_connection_id() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.connection.v1.CreateConnectionRequest.connection_id)
  return connection_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateConnectionRequest::set_allocated_connection_id(std::string* connection_id) {
  if (connection_id != nullptr) {
    
  } else {
    
  }
  connection_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), connection_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.connection.v1.CreateConnectionRequest.connection_id)
}

// .google.cloud.bigquery.connection.v1.Connection connection = 3 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateConnectionRequest::_internal_has_connection() const {
  return this != internal_default_instance() && connection_ != nullptr;
}
inline bool CreateConnectionRequest::has_connection() const {
  return _internal_has_connection();
}
inline void CreateConnectionRequest::clear_connection() {
  if (GetArena() == nullptr && connection_ != nullptr) {
    delete connection_;
  }
  connection_ = nullptr;
}
inline const ::google::cloud::bigquery::connection::v1::Connection& CreateConnectionRequest::_internal_connection() const {
  const ::google::cloud::bigquery::connection::v1::Connection* p = connection_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::connection::v1::Connection&>(
      ::google::cloud::bigquery::connection::v1::_Connection_default_instance_);
}
inline const ::google::cloud::bigquery::connection::v1::Connection& CreateConnectionRequest::connection() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.connection.v1.CreateConnectionRequest.connection)
  return _internal_connection();
}
inline void CreateConnectionRequest::unsafe_arena_set_allocated_connection(
    ::google::cloud::bigquery::connection::v1::Connection* connection) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(connection_);
  }
  connection_ = connection;
  if (connection) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.connection.v1.CreateConnectionRequest.connection)
}
inline ::google::cloud::bigquery::connection::v1::Connection* CreateConnectionRequest::release_connection() {
  
  ::google::cloud::bigquery::connection::v1::Connection* temp = connection_;
  connection_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::cloud::bigquery::connection::v1::Connection* CreateConnectionRequest::unsafe_arena_release_connection() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.connection.v1.CreateConnectionRequest.connection)
  
  ::google::cloud::bigquery::connection::v1::Connection* temp = connection_;
  connection_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::connection::v1::Connection* CreateConnectionRequest::_internal_mutable_connection() {
  
  if (connection_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::connection::v1::Connection>(GetArena());
    connection_ = p;
  }
  return connection_;
}
inline ::google::cloud::bigquery::connection::v1::Connection* CreateConnectionRequest::mutable_connection() {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.connection.v1.CreateConnectionRequest.connection)
  return _internal_mutable_connection();
}
inline void CreateConnectionRequest::set_allocated_connection(::google::cloud::bigquery::connection::v1::Connection* connection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete connection_;
  }
  if (connection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(connection);
    if (message_arena != submessage_arena) {
      connection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, connection, submessage_arena);
    }
    
  } else {
    
  }
  connection_ = connection;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.connection.v1.CreateConnectionRequest.connection)
}

// -------------------------------------------------------------------

// GetConnectionRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetConnectionRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GetConnectionRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.connection.v1.GetConnectionRequest.name)
  return _internal_name();
}
inline void GetConnectionRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.connection.v1.GetConnectionRequest.name)
}
inline std::string* GetConnectionRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.connection.v1.GetConnectionRequest.name)
  return _internal_mutable_name();
}
inline const std::string& GetConnectionRequest::_internal_name() const {
  return name_.Get();
}
inline void GetConnectionRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetConnectionRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.connection.v1.GetConnectionRequest.name)
}
inline void GetConnectionRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.connection.v1.GetConnectionRequest.name)
}
inline void GetConnectionRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.connection.v1.GetConnectionRequest.name)
}
inline std::string* GetConnectionRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetConnectionRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.connection.v1.GetConnectionRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetConnectionRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.connection.v1.GetConnectionRequest.name)
}

// -------------------------------------------------------------------

// ListConnectionsRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListConnectionsRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& ListConnectionsRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.connection.v1.ListConnectionsRequest.parent)
  return _internal_parent();
}
inline void ListConnectionsRequest::set_parent(const std::string& value) {
  _internal_set_parent(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.connection.v1.ListConnectionsRequest.parent)
}
inline std::string* ListConnectionsRequest::mutable_parent() {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.connection.v1.ListConnectionsRequest.parent)
  return _internal_mutable_parent();
}
inline const std::string& ListConnectionsRequest::_internal_parent() const {
  return parent_.Get();
}
inline void ListConnectionsRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListConnectionsRequest::set_parent(std::string&& value) {
  
  parent_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.connection.v1.ListConnectionsRequest.parent)
}
inline void ListConnectionsRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.connection.v1.ListConnectionsRequest.parent)
}
inline void ListConnectionsRequest::set_parent(const char* value,
    size_t size) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.connection.v1.ListConnectionsRequest.parent)
}
inline std::string* ListConnectionsRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListConnectionsRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.connection.v1.ListConnectionsRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListConnectionsRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.connection.v1.ListConnectionsRequest.parent)
}

// int32 page_size = 4 [(.google.api.field_behavior) = REQUIRED];
inline void ListConnectionsRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListConnectionsRequest::_internal_page_size() const {
  return page_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListConnectionsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.connection.v1.ListConnectionsRequest.page_size)
  return _internal_page_size();
}
inline void ListConnectionsRequest::_internal_set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  page_size_ = value;
}
inline void ListConnectionsRequest::set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.connection.v1.ListConnectionsRequest.page_size)
}

// string page_token = 3;
inline void ListConnectionsRequest::clear_page_token() {
  page_token_.ClearToEmpty();
}
inline const std::string& ListConnectionsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.connection.v1.ListConnectionsRequest.page_token)
  return _internal_page_token();
}
inline void ListConnectionsRequest::set_page_token(const std::string& value) {
  _internal_set_page_token(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.connection.v1.ListConnectionsRequest.page_token)
}
inline std::string* ListConnectionsRequest::mutable_page_token() {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.connection.v1.ListConnectionsRequest.page_token)
  return _internal_mutable_page_token();
}
inline const std::string& ListConnectionsRequest::_internal_page_token() const {
  return page_token_.Get();
}
inline void ListConnectionsRequest::_internal_set_page_token(const std::string& value) {
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListConnectionsRequest::set_page_token(std::string&& value) {
  
  page_token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.connection.v1.ListConnectionsRequest.page_token)
}
inline void ListConnectionsRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.connection.v1.ListConnectionsRequest.page_token)
}
inline void ListConnectionsRequest::set_page_token(const char* value,
    size_t size) {
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.connection.v1.ListConnectionsRequest.page_token)
}
inline std::string* ListConnectionsRequest::_internal_mutable_page_token() {
  
  return page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListConnectionsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.connection.v1.ListConnectionsRequest.page_token)
  return page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListConnectionsRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.connection.v1.ListConnectionsRequest.page_token)
}

// -------------------------------------------------------------------

// ListConnectionsResponse

// string next_page_token = 1;
inline void ListConnectionsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty();
}
inline const std::string& ListConnectionsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.connection.v1.ListConnectionsResponse.next_page_token)
  return _internal_next_page_token();
}
inline void ListConnectionsResponse::set_next_page_token(const std::string& value) {
  _internal_set_next_page_token(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.connection.v1.ListConnectionsResponse.next_page_token)
}
inline std::string* ListConnectionsResponse::mutable_next_page_token() {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.connection.v1.ListConnectionsResponse.next_page_token)
  return _internal_mutable_next_page_token();
}
inline const std::string& ListConnectionsResponse::_internal_next_page_token() const {
  return next_page_token_.Get();
}
inline void ListConnectionsResponse::_internal_set_next_page_token(const std::string& value) {
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListConnectionsResponse::set_next_page_token(std::string&& value) {
  
  next_page_token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.connection.v1.ListConnectionsResponse.next_page_token)
}
inline void ListConnectionsResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.connection.v1.ListConnectionsResponse.next_page_token)
}
inline void ListConnectionsResponse::set_next_page_token(const char* value,
    size_t size) {
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.connection.v1.ListConnectionsResponse.next_page_token)
}
inline std::string* ListConnectionsResponse::_internal_mutable_next_page_token() {
  
  return next_page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListConnectionsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.connection.v1.ListConnectionsResponse.next_page_token)
  return next_page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListConnectionsResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.connection.v1.ListConnectionsResponse.next_page_token)
}

// repeated .google.cloud.bigquery.connection.v1.Connection connections = 2;
inline int ListConnectionsResponse::_internal_connections_size() const {
  return connections_.size();
}
inline int ListConnectionsResponse::connections_size() const {
  return _internal_connections_size();
}
inline void ListConnectionsResponse::clear_connections() {
  connections_.Clear();
}
inline ::google::cloud::bigquery::connection::v1::Connection* ListConnectionsResponse::mutable_connections(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.connection.v1.ListConnectionsResponse.connections)
  return connections_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::connection::v1::Connection >*
ListConnectionsResponse::mutable_connections() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.bigquery.connection.v1.ListConnectionsResponse.connections)
  return &connections_;
}
inline const ::google::cloud::bigquery::connection::v1::Connection& ListConnectionsResponse::_internal_connections(int index) const {
  return connections_.Get(index);
}
inline const ::google::cloud::bigquery::connection::v1::Connection& ListConnectionsResponse::connections(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.connection.v1.ListConnectionsResponse.connections)
  return _internal_connections(index);
}
inline ::google::cloud::bigquery::connection::v1::Connection* ListConnectionsResponse::_internal_add_connections() {
  return connections_.Add();
}
inline ::google::cloud::bigquery::connection::v1::Connection* ListConnectionsResponse::add_connections() {
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.connection.v1.ListConnectionsResponse.connections)
  return _internal_add_connections();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::connection::v1::Connection >&
ListConnectionsResponse::connections() const {
  // @@protoc_insertion_point(field_list:google.cloud.bigquery.connection.v1.ListConnectionsResponse.connections)
  return connections_;
}

// -------------------------------------------------------------------

// UpdateConnectionRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void UpdateConnectionRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& UpdateConnectionRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.connection.v1.UpdateConnectionRequest.name)
  return _internal_name();
}
inline void UpdateConnectionRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.connection.v1.UpdateConnectionRequest.name)
}
inline std::string* UpdateConnectionRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.connection.v1.UpdateConnectionRequest.name)
  return _internal_mutable_name();
}
inline const std::string& UpdateConnectionRequest::_internal_name() const {
  return name_.Get();
}
inline void UpdateConnectionRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateConnectionRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.connection.v1.UpdateConnectionRequest.name)
}
inline void UpdateConnectionRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.connection.v1.UpdateConnectionRequest.name)
}
inline void UpdateConnectionRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.connection.v1.UpdateConnectionRequest.name)
}
inline std::string* UpdateConnectionRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateConnectionRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.connection.v1.UpdateConnectionRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateConnectionRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.connection.v1.UpdateConnectionRequest.name)
}

// .google.cloud.bigquery.connection.v1.Connection connection = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateConnectionRequest::_internal_has_connection() const {
  return this != internal_default_instance() && connection_ != nullptr;
}
inline bool UpdateConnectionRequest::has_connection() const {
  return _internal_has_connection();
}
inline void UpdateConnectionRequest::clear_connection() {
  if (GetArena() == nullptr && connection_ != nullptr) {
    delete connection_;
  }
  connection_ = nullptr;
}
inline const ::google::cloud::bigquery::connection::v1::Connection& UpdateConnectionRequest::_internal_connection() const {
  const ::google::cloud::bigquery::connection::v1::Connection* p = connection_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::connection::v1::Connection&>(
      ::google::cloud::bigquery::connection::v1::_Connection_default_instance_);
}
inline const ::google::cloud::bigquery::connection::v1::Connection& UpdateConnectionRequest::connection() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.connection.v1.UpdateConnectionRequest.connection)
  return _internal_connection();
}
inline void UpdateConnectionRequest::unsafe_arena_set_allocated_connection(
    ::google::cloud::bigquery::connection::v1::Connection* connection) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(connection_);
  }
  connection_ = connection;
  if (connection) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.connection.v1.UpdateConnectionRequest.connection)
}
inline ::google::cloud::bigquery::connection::v1::Connection* UpdateConnectionRequest::release_connection() {
  
  ::google::cloud::bigquery::connection::v1::Connection* temp = connection_;
  connection_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::cloud::bigquery::connection::v1::Connection* UpdateConnectionRequest::unsafe_arena_release_connection() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.connection.v1.UpdateConnectionRequest.connection)
  
  ::google::cloud::bigquery::connection::v1::Connection* temp = connection_;
  connection_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::connection::v1::Connection* UpdateConnectionRequest::_internal_mutable_connection() {
  
  if (connection_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::connection::v1::Connection>(GetArena());
    connection_ = p;
  }
  return connection_;
}
inline ::google::cloud::bigquery::connection::v1::Connection* UpdateConnectionRequest::mutable_connection() {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.connection.v1.UpdateConnectionRequest.connection)
  return _internal_mutable_connection();
}
inline void UpdateConnectionRequest::set_allocated_connection(::google::cloud::bigquery::connection::v1::Connection* connection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete connection_;
  }
  if (connection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(connection);
    if (message_arena != submessage_arena) {
      connection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, connection, submessage_arena);
    }
    
  } else {
    
  }
  connection_ = connection;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.connection.v1.UpdateConnectionRequest.connection)
}

// .google.protobuf.FieldMask update_mask = 3 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateConnectionRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != nullptr;
}
inline bool UpdateConnectionRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const PROTOBUF_NAMESPACE_ID::FieldMask& UpdateConnectionRequest::_internal_update_mask() const {
  const PROTOBUF_NAMESPACE_ID::FieldMask* p = update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FieldMask&>(
      PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FieldMask& UpdateConnectionRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.connection.v1.UpdateConnectionRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateConnectionRequest::unsafe_arena_set_allocated_update_mask(
    PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.connection.v1.UpdateConnectionRequest.update_mask)
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* UpdateConnectionRequest::release_update_mask() {
  
  PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* UpdateConnectionRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.connection.v1.UpdateConnectionRequest.update_mask)
  
  PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* UpdateConnectionRequest::_internal_mutable_update_mask() {
  
  if (update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FieldMask>(GetArena());
    update_mask_ = p;
  }
  return update_mask_;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* UpdateConnectionRequest::mutable_update_mask() {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.connection.v1.UpdateConnectionRequest.update_mask)
  return _internal_mutable_update_mask();
}
inline void UpdateConnectionRequest::set_allocated_update_mask(PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask)->GetArena();
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.connection.v1.UpdateConnectionRequest.update_mask)
}

// -------------------------------------------------------------------

// DeleteConnectionRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteConnectionRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& DeleteConnectionRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.connection.v1.DeleteConnectionRequest.name)
  return _internal_name();
}
inline void DeleteConnectionRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.connection.v1.DeleteConnectionRequest.name)
}
inline std::string* DeleteConnectionRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.connection.v1.DeleteConnectionRequest.name)
  return _internal_mutable_name();
}
inline const std::string& DeleteConnectionRequest::_internal_name() const {
  return name_.Get();
}
inline void DeleteConnectionRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeleteConnectionRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.connection.v1.DeleteConnectionRequest.name)
}
inline void DeleteConnectionRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.connection.v1.DeleteConnectionRequest.name)
}
inline void DeleteConnectionRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.connection.v1.DeleteConnectionRequest.name)
}
inline std::string* DeleteConnectionRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeleteConnectionRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.connection.v1.DeleteConnectionRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteConnectionRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.connection.v1.DeleteConnectionRequest.name)
}

// -------------------------------------------------------------------

// Connection

// string name = 1;
inline void Connection::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Connection::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.connection.v1.Connection.name)
  return _internal_name();
}
inline void Connection::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.connection.v1.Connection.name)
}
inline std::string* Connection::mutable_name() {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.connection.v1.Connection.name)
  return _internal_mutable_name();
}
inline const std::string& Connection::_internal_name() const {
  return name_.Get();
}
inline void Connection::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Connection::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.connection.v1.Connection.name)
}
inline void Connection::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.connection.v1.Connection.name)
}
inline void Connection::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.connection.v1.Connection.name)
}
inline std::string* Connection::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Connection::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.connection.v1.Connection.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Connection::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.connection.v1.Connection.name)
}

// string friendly_name = 2;
inline void Connection::clear_friendly_name() {
  friendly_name_.ClearToEmpty();
}
inline const std::string& Connection::friendly_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.connection.v1.Connection.friendly_name)
  return _internal_friendly_name();
}
inline void Connection::set_friendly_name(const std::string& value) {
  _internal_set_friendly_name(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.connection.v1.Connection.friendly_name)
}
inline std::string* Connection::mutable_friendly_name() {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.connection.v1.Connection.friendly_name)
  return _internal_mutable_friendly_name();
}
inline const std::string& Connection::_internal_friendly_name() const {
  return friendly_name_.Get();
}
inline void Connection::_internal_set_friendly_name(const std::string& value) {
  
  friendly_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Connection::set_friendly_name(std::string&& value) {
  
  friendly_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.connection.v1.Connection.friendly_name)
}
inline void Connection::set_friendly_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  friendly_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.connection.v1.Connection.friendly_name)
}
inline void Connection::set_friendly_name(const char* value,
    size_t size) {
  
  friendly_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.connection.v1.Connection.friendly_name)
}
inline std::string* Connection::_internal_mutable_friendly_name() {
  
  return friendly_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Connection::release_friendly_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.connection.v1.Connection.friendly_name)
  return friendly_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Connection::set_allocated_friendly_name(std::string* friendly_name) {
  if (friendly_name != nullptr) {
    
  } else {
    
  }
  friendly_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), friendly_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.connection.v1.Connection.friendly_name)
}

// string description = 3;
inline void Connection::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& Connection::description() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.connection.v1.Connection.description)
  return _internal_description();
}
inline void Connection::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.connection.v1.Connection.description)
}
inline std::string* Connection::mutable_description() {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.connection.v1.Connection.description)
  return _internal_mutable_description();
}
inline const std::string& Connection::_internal_description() const {
  return description_.Get();
}
inline void Connection::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Connection::set_description(std::string&& value) {
  
  description_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.connection.v1.Connection.description)
}
inline void Connection::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.connection.v1.Connection.description)
}
inline void Connection::set_description(const char* value,
    size_t size) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.connection.v1.Connection.description)
}
inline std::string* Connection::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Connection::release_description() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.connection.v1.Connection.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Connection::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.connection.v1.Connection.description)
}

// .google.cloud.bigquery.connection.v1.CloudSqlProperties cloud_sql = 4;
inline bool Connection::_internal_has_cloud_sql() const {
  return properties_case() == kCloudSql;
}
inline bool Connection::has_cloud_sql() const {
  return _internal_has_cloud_sql();
}
inline void Connection::set_has_cloud_sql() {
  _oneof_case_[0] = kCloudSql;
}
inline void Connection::clear_cloud_sql() {
  if (_internal_has_cloud_sql()) {
    if (GetArena() == nullptr) {
      delete properties_.cloud_sql_;
    }
    clear_has_properties();
  }
}
inline ::google::cloud::bigquery::connection::v1::CloudSqlProperties* Connection::release_cloud_sql() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.connection.v1.Connection.cloud_sql)
  if (_internal_has_cloud_sql()) {
    clear_has_properties();
      ::google::cloud::bigquery::connection::v1::CloudSqlProperties* temp = properties_.cloud_sql_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    properties_.cloud_sql_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::bigquery::connection::v1::CloudSqlProperties& Connection::_internal_cloud_sql() const {
  return _internal_has_cloud_sql()
      ? *properties_.cloud_sql_
      : reinterpret_cast< ::google::cloud::bigquery::connection::v1::CloudSqlProperties&>(::google::cloud::bigquery::connection::v1::_CloudSqlProperties_default_instance_);
}
inline const ::google::cloud::bigquery::connection::v1::CloudSqlProperties& Connection::cloud_sql() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.connection.v1.Connection.cloud_sql)
  return _internal_cloud_sql();
}
inline ::google::cloud::bigquery::connection::v1::CloudSqlProperties* Connection::unsafe_arena_release_cloud_sql() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.bigquery.connection.v1.Connection.cloud_sql)
  if (_internal_has_cloud_sql()) {
    clear_has_properties();
    ::google::cloud::bigquery::connection::v1::CloudSqlProperties* temp = properties_.cloud_sql_;
    properties_.cloud_sql_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Connection::unsafe_arena_set_allocated_cloud_sql(::google::cloud::bigquery::connection::v1::CloudSqlProperties* cloud_sql) {
  clear_properties();
  if (cloud_sql) {
    set_has_cloud_sql();
    properties_.cloud_sql_ = cloud_sql;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.connection.v1.Connection.cloud_sql)
}
inline ::google::cloud::bigquery::connection::v1::CloudSqlProperties* Connection::_internal_mutable_cloud_sql() {
  if (!_internal_has_cloud_sql()) {
    clear_properties();
    set_has_cloud_sql();
    properties_.cloud_sql_ = CreateMaybeMessage< ::google::cloud::bigquery::connection::v1::CloudSqlProperties >(GetArena());
  }
  return properties_.cloud_sql_;
}
inline ::google::cloud::bigquery::connection::v1::CloudSqlProperties* Connection::mutable_cloud_sql() {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.connection.v1.Connection.cloud_sql)
  return _internal_mutable_cloud_sql();
}

// .google.cloud.bigquery.connection.v1.AwsProperties aws = 8;
inline bool Connection::_internal_has_aws() const {
  return properties_case() == kAws;
}
inline bool Connection::has_aws() const {
  return _internal_has_aws();
}
inline void Connection::set_has_aws() {
  _oneof_case_[0] = kAws;
}
inline void Connection::clear_aws() {
  if (_internal_has_aws()) {
    if (GetArena() == nullptr) {
      delete properties_.aws_;
    }
    clear_has_properties();
  }
}
inline ::google::cloud::bigquery::connection::v1::AwsProperties* Connection::release_aws() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.connection.v1.Connection.aws)
  if (_internal_has_aws()) {
    clear_has_properties();
      ::google::cloud::bigquery::connection::v1::AwsProperties* temp = properties_.aws_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    properties_.aws_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::bigquery::connection::v1::AwsProperties& Connection::_internal_aws() const {
  return _internal_has_aws()
      ? *properties_.aws_
      : reinterpret_cast< ::google::cloud::bigquery::connection::v1::AwsProperties&>(::google::cloud::bigquery::connection::v1::_AwsProperties_default_instance_);
}
inline const ::google::cloud::bigquery::connection::v1::AwsProperties& Connection::aws() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.connection.v1.Connection.aws)
  return _internal_aws();
}
inline ::google::cloud::bigquery::connection::v1::AwsProperties* Connection::unsafe_arena_release_aws() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.bigquery.connection.v1.Connection.aws)
  if (_internal_has_aws()) {
    clear_has_properties();
    ::google::cloud::bigquery::connection::v1::AwsProperties* temp = properties_.aws_;
    properties_.aws_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Connection::unsafe_arena_set_allocated_aws(::google::cloud::bigquery::connection::v1::AwsProperties* aws) {
  clear_properties();
  if (aws) {
    set_has_aws();
    properties_.aws_ = aws;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.connection.v1.Connection.aws)
}
inline ::google::cloud::bigquery::connection::v1::AwsProperties* Connection::_internal_mutable_aws() {
  if (!_internal_has_aws()) {
    clear_properties();
    set_has_aws();
    properties_.aws_ = CreateMaybeMessage< ::google::cloud::bigquery::connection::v1::AwsProperties >(GetArena());
  }
  return properties_.aws_;
}
inline ::google::cloud::bigquery::connection::v1::AwsProperties* Connection::mutable_aws() {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.connection.v1.Connection.aws)
  return _internal_mutable_aws();
}

// .google.cloud.bigquery.connection.v1.CloudSpannerProperties cloud_spanner = 21;
inline bool Connection::_internal_has_cloud_spanner() const {
  return properties_case() == kCloudSpanner;
}
inline bool Connection::has_cloud_spanner() const {
  return _internal_has_cloud_spanner();
}
inline void Connection::set_has_cloud_spanner() {
  _oneof_case_[0] = kCloudSpanner;
}
inline void Connection::clear_cloud_spanner() {
  if (_internal_has_cloud_spanner()) {
    if (GetArena() == nullptr) {
      delete properties_.cloud_spanner_;
    }
    clear_has_properties();
  }
}
inline ::google::cloud::bigquery::connection::v1::CloudSpannerProperties* Connection::release_cloud_spanner() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.connection.v1.Connection.cloud_spanner)
  if (_internal_has_cloud_spanner()) {
    clear_has_properties();
      ::google::cloud::bigquery::connection::v1::CloudSpannerProperties* temp = properties_.cloud_spanner_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    properties_.cloud_spanner_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::bigquery::connection::v1::CloudSpannerProperties& Connection::_internal_cloud_spanner() const {
  return _internal_has_cloud_spanner()
      ? *properties_.cloud_spanner_
      : reinterpret_cast< ::google::cloud::bigquery::connection::v1::CloudSpannerProperties&>(::google::cloud::bigquery::connection::v1::_CloudSpannerProperties_default_instance_);
}
inline const ::google::cloud::bigquery::connection::v1::CloudSpannerProperties& Connection::cloud_spanner() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.connection.v1.Connection.cloud_spanner)
  return _internal_cloud_spanner();
}
inline ::google::cloud::bigquery::connection::v1::CloudSpannerProperties* Connection::unsafe_arena_release_cloud_spanner() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.bigquery.connection.v1.Connection.cloud_spanner)
  if (_internal_has_cloud_spanner()) {
    clear_has_properties();
    ::google::cloud::bigquery::connection::v1::CloudSpannerProperties* temp = properties_.cloud_spanner_;
    properties_.cloud_spanner_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Connection::unsafe_arena_set_allocated_cloud_spanner(::google::cloud::bigquery::connection::v1::CloudSpannerProperties* cloud_spanner) {
  clear_properties();
  if (cloud_spanner) {
    set_has_cloud_spanner();
    properties_.cloud_spanner_ = cloud_spanner;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.connection.v1.Connection.cloud_spanner)
}
inline ::google::cloud::bigquery::connection::v1::CloudSpannerProperties* Connection::_internal_mutable_cloud_spanner() {
  if (!_internal_has_cloud_spanner()) {
    clear_properties();
    set_has_cloud_spanner();
    properties_.cloud_spanner_ = CreateMaybeMessage< ::google::cloud::bigquery::connection::v1::CloudSpannerProperties >(GetArena());
  }
  return properties_.cloud_spanner_;
}
inline ::google::cloud::bigquery::connection::v1::CloudSpannerProperties* Connection::mutable_cloud_spanner() {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.connection.v1.Connection.cloud_spanner)
  return _internal_mutable_cloud_spanner();
}

// int64 creation_time = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void Connection::clear_creation_time() {
  creation_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Connection::_internal_creation_time() const {
  return creation_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Connection::creation_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.connection.v1.Connection.creation_time)
  return _internal_creation_time();
}
inline void Connection::_internal_set_creation_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  creation_time_ = value;
}
inline void Connection::set_creation_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_creation_time(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.connection.v1.Connection.creation_time)
}

// int64 last_modified_time = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void Connection::clear_last_modified_time() {
  last_modified_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Connection::_internal_last_modified_time() const {
  return last_modified_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Connection::last_modified_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.connection.v1.Connection.last_modified_time)
  return _internal_last_modified_time();
}
inline void Connection::_internal_set_last_modified_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  last_modified_time_ = value;
}
inline void Connection::set_last_modified_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_last_modified_time(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.connection.v1.Connection.last_modified_time)
}

// bool has_credential = 7 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void Connection::clear_has_credential() {
  has_credential_ = false;
}
inline bool Connection::_internal_has_credential() const {
  return has_credential_;
}
inline bool Connection::has_credential() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.connection.v1.Connection.has_credential)
  return _internal_has_credential();
}
inline void Connection::_internal_set_has_credential(bool value) {
  
  has_credential_ = value;
}
inline void Connection::set_has_credential(bool value) {
  _internal_set_has_credential(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.connection.v1.Connection.has_credential)
}

inline bool Connection::has_properties() const {
  return properties_case() != PROPERTIES_NOT_SET;
}
inline void Connection::clear_has_properties() {
  _oneof_case_[0] = PROPERTIES_NOT_SET;
}
inline Connection::PropertiesCase Connection::properties_case() const {
  return Connection::PropertiesCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CloudSqlProperties

// string instance_id = 1;
inline void CloudSqlProperties::clear_instance_id() {
  instance_id_.ClearToEmpty();
}
inline const std::string& CloudSqlProperties::instance_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.connection.v1.CloudSqlProperties.instance_id)
  return _internal_instance_id();
}
inline void CloudSqlProperties::set_instance_id(const std::string& value) {
  _internal_set_instance_id(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.connection.v1.CloudSqlProperties.instance_id)
}
inline std::string* CloudSqlProperties::mutable_instance_id() {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.connection.v1.CloudSqlProperties.instance_id)
  return _internal_mutable_instance_id();
}
inline const std::string& CloudSqlProperties::_internal_instance_id() const {
  return instance_id_.Get();
}
inline void CloudSqlProperties::_internal_set_instance_id(const std::string& value) {
  
  instance_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CloudSqlProperties::set_instance_id(std::string&& value) {
  
  instance_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.connection.v1.CloudSqlProperties.instance_id)
}
inline void CloudSqlProperties::set_instance_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instance_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.connection.v1.CloudSqlProperties.instance_id)
}
inline void CloudSqlProperties::set_instance_id(const char* value,
    size_t size) {
  
  instance_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.connection.v1.CloudSqlProperties.instance_id)
}
inline std::string* CloudSqlProperties::_internal_mutable_instance_id() {
  
  return instance_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CloudSqlProperties::release_instance_id() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.connection.v1.CloudSqlProperties.instance_id)
  return instance_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CloudSqlProperties::set_allocated_instance_id(std::string* instance_id) {
  if (instance_id != nullptr) {
    
  } else {
    
  }
  instance_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instance_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.connection.v1.CloudSqlProperties.instance_id)
}

// string database = 2;
inline void CloudSqlProperties::clear_database() {
  database_.ClearToEmpty();
}
inline const std::string& CloudSqlProperties::database() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.connection.v1.CloudSqlProperties.database)
  return _internal_database();
}
inline void CloudSqlProperties::set_database(const std::string& value) {
  _internal_set_database(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.connection.v1.CloudSqlProperties.database)
}
inline std::string* CloudSqlProperties::mutable_database() {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.connection.v1.CloudSqlProperties.database)
  return _internal_mutable_database();
}
inline const std::string& CloudSqlProperties::_internal_database() const {
  return database_.Get();
}
inline void CloudSqlProperties::_internal_set_database(const std::string& value) {
  
  database_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CloudSqlProperties::set_database(std::string&& value) {
  
  database_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.connection.v1.CloudSqlProperties.database)
}
inline void CloudSqlProperties::set_database(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  database_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.connection.v1.CloudSqlProperties.database)
}
inline void CloudSqlProperties::set_database(const char* value,
    size_t size) {
  
  database_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.connection.v1.CloudSqlProperties.database)
}
inline std::string* CloudSqlProperties::_internal_mutable_database() {
  
  return database_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CloudSqlProperties::release_database() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.connection.v1.CloudSqlProperties.database)
  return database_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CloudSqlProperties::set_allocated_database(std::string* database) {
  if (database != nullptr) {
    
  } else {
    
  }
  database_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), database,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.connection.v1.CloudSqlProperties.database)
}

// .google.cloud.bigquery.connection.v1.CloudSqlProperties.DatabaseType type = 3;
inline void CloudSqlProperties::clear_type() {
  type_ = 0;
}
inline ::google::cloud::bigquery::connection::v1::CloudSqlProperties_DatabaseType CloudSqlProperties::_internal_type() const {
  return static_cast< ::google::cloud::bigquery::connection::v1::CloudSqlProperties_DatabaseType >(type_);
}
inline ::google::cloud::bigquery::connection::v1::CloudSqlProperties_DatabaseType CloudSqlProperties::type() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.connection.v1.CloudSqlProperties.type)
  return _internal_type();
}
inline void CloudSqlProperties::_internal_set_type(::google::cloud::bigquery::connection::v1::CloudSqlProperties_DatabaseType value) {
  
  type_ = value;
}
inline void CloudSqlProperties::set_type(::google::cloud::bigquery::connection::v1::CloudSqlProperties_DatabaseType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.connection.v1.CloudSqlProperties.type)
}

// .google.cloud.bigquery.connection.v1.CloudSqlCredential credential = 4 [(.google.api.field_behavior) = INPUT_ONLY];
inline bool CloudSqlProperties::_internal_has_credential() const {
  return this != internal_default_instance() && credential_ != nullptr;
}
inline bool CloudSqlProperties::has_credential() const {
  return _internal_has_credential();
}
inline void CloudSqlProperties::clear_credential() {
  if (GetArena() == nullptr && credential_ != nullptr) {
    delete credential_;
  }
  credential_ = nullptr;
}
inline const ::google::cloud::bigquery::connection::v1::CloudSqlCredential& CloudSqlProperties::_internal_credential() const {
  const ::google::cloud::bigquery::connection::v1::CloudSqlCredential* p = credential_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::connection::v1::CloudSqlCredential&>(
      ::google::cloud::bigquery::connection::v1::_CloudSqlCredential_default_instance_);
}
inline const ::google::cloud::bigquery::connection::v1::CloudSqlCredential& CloudSqlProperties::credential() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.connection.v1.CloudSqlProperties.credential)
  return _internal_credential();
}
inline void CloudSqlProperties::unsafe_arena_set_allocated_credential(
    ::google::cloud::bigquery::connection::v1::CloudSqlCredential* credential) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(credential_);
  }
  credential_ = credential;
  if (credential) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.connection.v1.CloudSqlProperties.credential)
}
inline ::google::cloud::bigquery::connection::v1::CloudSqlCredential* CloudSqlProperties::release_credential() {
  
  ::google::cloud::bigquery::connection::v1::CloudSqlCredential* temp = credential_;
  credential_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::cloud::bigquery::connection::v1::CloudSqlCredential* CloudSqlProperties::unsafe_arena_release_credential() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.connection.v1.CloudSqlProperties.credential)
  
  ::google::cloud::bigquery::connection::v1::CloudSqlCredential* temp = credential_;
  credential_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::connection::v1::CloudSqlCredential* CloudSqlProperties::_internal_mutable_credential() {
  
  if (credential_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::connection::v1::CloudSqlCredential>(GetArena());
    credential_ = p;
  }
  return credential_;
}
inline ::google::cloud::bigquery::connection::v1::CloudSqlCredential* CloudSqlProperties::mutable_credential() {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.connection.v1.CloudSqlProperties.credential)
  return _internal_mutable_credential();
}
inline void CloudSqlProperties::set_allocated_credential(::google::cloud::bigquery::connection::v1::CloudSqlCredential* credential) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete credential_;
  }
  if (credential) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(credential);
    if (message_arena != submessage_arena) {
      credential = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, credential, submessage_arena);
    }
    
  } else {
    
  }
  credential_ = credential;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.connection.v1.CloudSqlProperties.credential)
}

// -------------------------------------------------------------------

// CloudSqlCredential

// string username = 1;
inline void CloudSqlCredential::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& CloudSqlCredential::username() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.connection.v1.CloudSqlCredential.username)
  return _internal_username();
}
inline void CloudSqlCredential::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.connection.v1.CloudSqlCredential.username)
}
inline std::string* CloudSqlCredential::mutable_username() {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.connection.v1.CloudSqlCredential.username)
  return _internal_mutable_username();
}
inline const std::string& CloudSqlCredential::_internal_username() const {
  return username_.Get();
}
inline void CloudSqlCredential::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CloudSqlCredential::set_username(std::string&& value) {
  
  username_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.connection.v1.CloudSqlCredential.username)
}
inline void CloudSqlCredential::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.connection.v1.CloudSqlCredential.username)
}
inline void CloudSqlCredential::set_username(const char* value,
    size_t size) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.connection.v1.CloudSqlCredential.username)
}
inline std::string* CloudSqlCredential::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CloudSqlCredential::release_username() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.connection.v1.CloudSqlCredential.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CloudSqlCredential::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.connection.v1.CloudSqlCredential.username)
}

// string password = 2;
inline void CloudSqlCredential::clear_password() {
  password_.ClearToEmpty();
}
inline const std::string& CloudSqlCredential::password() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.connection.v1.CloudSqlCredential.password)
  return _internal_password();
}
inline void CloudSqlCredential::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.connection.v1.CloudSqlCredential.password)
}
inline std::string* CloudSqlCredential::mutable_password() {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.connection.v1.CloudSqlCredential.password)
  return _internal_mutable_password();
}
inline const std::string& CloudSqlCredential::_internal_password() const {
  return password_.Get();
}
inline void CloudSqlCredential::_internal_set_password(const std::string& value) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CloudSqlCredential::set_password(std::string&& value) {
  
  password_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.connection.v1.CloudSqlCredential.password)
}
inline void CloudSqlCredential::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.connection.v1.CloudSqlCredential.password)
}
inline void CloudSqlCredential::set_password(const char* value,
    size_t size) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.connection.v1.CloudSqlCredential.password)
}
inline std::string* CloudSqlCredential::_internal_mutable_password() {
  
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CloudSqlCredential::release_password() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.connection.v1.CloudSqlCredential.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CloudSqlCredential::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.connection.v1.CloudSqlCredential.password)
}

// -------------------------------------------------------------------

// CloudSpannerProperties

// string database = 1;
inline void CloudSpannerProperties::clear_database() {
  database_.ClearToEmpty();
}
inline const std::string& CloudSpannerProperties::database() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.connection.v1.CloudSpannerProperties.database)
  return _internal_database();
}
inline void CloudSpannerProperties::set_database(const std::string& value) {
  _internal_set_database(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.connection.v1.CloudSpannerProperties.database)
}
inline std::string* CloudSpannerProperties::mutable_database() {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.connection.v1.CloudSpannerProperties.database)
  return _internal_mutable_database();
}
inline const std::string& CloudSpannerProperties::_internal_database() const {
  return database_.Get();
}
inline void CloudSpannerProperties::_internal_set_database(const std::string& value) {
  
  database_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CloudSpannerProperties::set_database(std::string&& value) {
  
  database_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.connection.v1.CloudSpannerProperties.database)
}
inline void CloudSpannerProperties::set_database(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  database_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.connection.v1.CloudSpannerProperties.database)
}
inline void CloudSpannerProperties::set_database(const char* value,
    size_t size) {
  
  database_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.connection.v1.CloudSpannerProperties.database)
}
inline std::string* CloudSpannerProperties::_internal_mutable_database() {
  
  return database_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CloudSpannerProperties::release_database() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.connection.v1.CloudSpannerProperties.database)
  return database_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CloudSpannerProperties::set_allocated_database(std::string* database) {
  if (database != nullptr) {
    
  } else {
    
  }
  database_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), database,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.connection.v1.CloudSpannerProperties.database)
}

// bool use_parallelism = 2;
inline void CloudSpannerProperties::clear_use_parallelism() {
  use_parallelism_ = false;
}
inline bool CloudSpannerProperties::_internal_use_parallelism() const {
  return use_parallelism_;
}
inline bool CloudSpannerProperties::use_parallelism() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.connection.v1.CloudSpannerProperties.use_parallelism)
  return _internal_use_parallelism();
}
inline void CloudSpannerProperties::_internal_set_use_parallelism(bool value) {
  
  use_parallelism_ = value;
}
inline void CloudSpannerProperties::set_use_parallelism(bool value) {
  _internal_set_use_parallelism(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.connection.v1.CloudSpannerProperties.use_parallelism)
}

// -------------------------------------------------------------------

// AwsProperties

// .google.cloud.bigquery.connection.v1.AwsCrossAccountRole cross_account_role = 2;
inline bool AwsProperties::_internal_has_cross_account_role() const {
  return authentication_method_case() == kCrossAccountRole;
}
inline bool AwsProperties::has_cross_account_role() const {
  return _internal_has_cross_account_role();
}
inline void AwsProperties::set_has_cross_account_role() {
  _oneof_case_[0] = kCrossAccountRole;
}
inline void AwsProperties::clear_cross_account_role() {
  if (_internal_has_cross_account_role()) {
    if (GetArena() == nullptr) {
      delete authentication_method_.cross_account_role_;
    }
    clear_has_authentication_method();
  }
}
inline ::google::cloud::bigquery::connection::v1::AwsCrossAccountRole* AwsProperties::release_cross_account_role() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.connection.v1.AwsProperties.cross_account_role)
  if (_internal_has_cross_account_role()) {
    clear_has_authentication_method();
      ::google::cloud::bigquery::connection::v1::AwsCrossAccountRole* temp = authentication_method_.cross_account_role_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    authentication_method_.cross_account_role_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::bigquery::connection::v1::AwsCrossAccountRole& AwsProperties::_internal_cross_account_role() const {
  return _internal_has_cross_account_role()
      ? *authentication_method_.cross_account_role_
      : reinterpret_cast< ::google::cloud::bigquery::connection::v1::AwsCrossAccountRole&>(::google::cloud::bigquery::connection::v1::_AwsCrossAccountRole_default_instance_);
}
inline const ::google::cloud::bigquery::connection::v1::AwsCrossAccountRole& AwsProperties::cross_account_role() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.connection.v1.AwsProperties.cross_account_role)
  return _internal_cross_account_role();
}
inline ::google::cloud::bigquery::connection::v1::AwsCrossAccountRole* AwsProperties::unsafe_arena_release_cross_account_role() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.bigquery.connection.v1.AwsProperties.cross_account_role)
  if (_internal_has_cross_account_role()) {
    clear_has_authentication_method();
    ::google::cloud::bigquery::connection::v1::AwsCrossAccountRole* temp = authentication_method_.cross_account_role_;
    authentication_method_.cross_account_role_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AwsProperties::unsafe_arena_set_allocated_cross_account_role(::google::cloud::bigquery::connection::v1::AwsCrossAccountRole* cross_account_role) {
  clear_authentication_method();
  if (cross_account_role) {
    set_has_cross_account_role();
    authentication_method_.cross_account_role_ = cross_account_role;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.connection.v1.AwsProperties.cross_account_role)
}
inline ::google::cloud::bigquery::connection::v1::AwsCrossAccountRole* AwsProperties::_internal_mutable_cross_account_role() {
  if (!_internal_has_cross_account_role()) {
    clear_authentication_method();
    set_has_cross_account_role();
    authentication_method_.cross_account_role_ = CreateMaybeMessage< ::google::cloud::bigquery::connection::v1::AwsCrossAccountRole >(GetArena());
  }
  return authentication_method_.cross_account_role_;
}
inline ::google::cloud::bigquery::connection::v1::AwsCrossAccountRole* AwsProperties::mutable_cross_account_role() {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.connection.v1.AwsProperties.cross_account_role)
  return _internal_mutable_cross_account_role();
}

// .google.cloud.bigquery.connection.v1.AwsAccessRole access_role = 3;
inline bool AwsProperties::_internal_has_access_role() const {
  return authentication_method_case() == kAccessRole;
}
inline bool AwsProperties::has_access_role() const {
  return _internal_has_access_role();
}
inline void AwsProperties::set_has_access_role() {
  _oneof_case_[0] = kAccessRole;
}
inline void AwsProperties::clear_access_role() {
  if (_internal_has_access_role()) {
    if (GetArena() == nullptr) {
      delete authentication_method_.access_role_;
    }
    clear_has_authentication_method();
  }
}
inline ::google::cloud::bigquery::connection::v1::AwsAccessRole* AwsProperties::release_access_role() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.connection.v1.AwsProperties.access_role)
  if (_internal_has_access_role()) {
    clear_has_authentication_method();
      ::google::cloud::bigquery::connection::v1::AwsAccessRole* temp = authentication_method_.access_role_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    authentication_method_.access_role_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::bigquery::connection::v1::AwsAccessRole& AwsProperties::_internal_access_role() const {
  return _internal_has_access_role()
      ? *authentication_method_.access_role_
      : reinterpret_cast< ::google::cloud::bigquery::connection::v1::AwsAccessRole&>(::google::cloud::bigquery::connection::v1::_AwsAccessRole_default_instance_);
}
inline const ::google::cloud::bigquery::connection::v1::AwsAccessRole& AwsProperties::access_role() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.connection.v1.AwsProperties.access_role)
  return _internal_access_role();
}
inline ::google::cloud::bigquery::connection::v1::AwsAccessRole* AwsProperties::unsafe_arena_release_access_role() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.bigquery.connection.v1.AwsProperties.access_role)
  if (_internal_has_access_role()) {
    clear_has_authentication_method();
    ::google::cloud::bigquery::connection::v1::AwsAccessRole* temp = authentication_method_.access_role_;
    authentication_method_.access_role_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AwsProperties::unsafe_arena_set_allocated_access_role(::google::cloud::bigquery::connection::v1::AwsAccessRole* access_role) {
  clear_authentication_method();
  if (access_role) {
    set_has_access_role();
    authentication_method_.access_role_ = access_role;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.connection.v1.AwsProperties.access_role)
}
inline ::google::cloud::bigquery::connection::v1::AwsAccessRole* AwsProperties::_internal_mutable_access_role() {
  if (!_internal_has_access_role()) {
    clear_authentication_method();
    set_has_access_role();
    authentication_method_.access_role_ = CreateMaybeMessage< ::google::cloud::bigquery::connection::v1::AwsAccessRole >(GetArena());
  }
  return authentication_method_.access_role_;
}
inline ::google::cloud::bigquery::connection::v1::AwsAccessRole* AwsProperties::mutable_access_role() {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.connection.v1.AwsProperties.access_role)
  return _internal_mutable_access_role();
}

inline bool AwsProperties::has_authentication_method() const {
  return authentication_method_case() != AUTHENTICATION_METHOD_NOT_SET;
}
inline void AwsProperties::clear_has_authentication_method() {
  _oneof_case_[0] = AUTHENTICATION_METHOD_NOT_SET;
}
inline AwsProperties::AuthenticationMethodCase AwsProperties::authentication_method_case() const {
  return AwsProperties::AuthenticationMethodCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// AwsCrossAccountRole

// string iam_role_id = 1;
inline void AwsCrossAccountRole::clear_iam_role_id() {
  iam_role_id_.ClearToEmpty();
}
inline const std::string& AwsCrossAccountRole::iam_role_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.connection.v1.AwsCrossAccountRole.iam_role_id)
  return _internal_iam_role_id();
}
inline void AwsCrossAccountRole::set_iam_role_id(const std::string& value) {
  _internal_set_iam_role_id(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.connection.v1.AwsCrossAccountRole.iam_role_id)
}
inline std::string* AwsCrossAccountRole::mutable_iam_role_id() {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.connection.v1.AwsCrossAccountRole.iam_role_id)
  return _internal_mutable_iam_role_id();
}
inline const std::string& AwsCrossAccountRole::_internal_iam_role_id() const {
  return iam_role_id_.Get();
}
inline void AwsCrossAccountRole::_internal_set_iam_role_id(const std::string& value) {
  
  iam_role_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AwsCrossAccountRole::set_iam_role_id(std::string&& value) {
  
  iam_role_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.connection.v1.AwsCrossAccountRole.iam_role_id)
}
inline void AwsCrossAccountRole::set_iam_role_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  iam_role_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.connection.v1.AwsCrossAccountRole.iam_role_id)
}
inline void AwsCrossAccountRole::set_iam_role_id(const char* value,
    size_t size) {
  
  iam_role_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.connection.v1.AwsCrossAccountRole.iam_role_id)
}
inline std::string* AwsCrossAccountRole::_internal_mutable_iam_role_id() {
  
  return iam_role_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AwsCrossAccountRole::release_iam_role_id() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.connection.v1.AwsCrossAccountRole.iam_role_id)
  return iam_role_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AwsCrossAccountRole::set_allocated_iam_role_id(std::string* iam_role_id) {
  if (iam_role_id != nullptr) {
    
  } else {
    
  }
  iam_role_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), iam_role_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.connection.v1.AwsCrossAccountRole.iam_role_id)
}

// string iam_user_id = 2 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void AwsCrossAccountRole::clear_iam_user_id() {
  iam_user_id_.ClearToEmpty();
}
inline const std::string& AwsCrossAccountRole::iam_user_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.connection.v1.AwsCrossAccountRole.iam_user_id)
  return _internal_iam_user_id();
}
inline void AwsCrossAccountRole::set_iam_user_id(const std::string& value) {
  _internal_set_iam_user_id(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.connection.v1.AwsCrossAccountRole.iam_user_id)
}
inline std::string* AwsCrossAccountRole::mutable_iam_user_id() {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.connection.v1.AwsCrossAccountRole.iam_user_id)
  return _internal_mutable_iam_user_id();
}
inline const std::string& AwsCrossAccountRole::_internal_iam_user_id() const {
  return iam_user_id_.Get();
}
inline void AwsCrossAccountRole::_internal_set_iam_user_id(const std::string& value) {
  
  iam_user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AwsCrossAccountRole::set_iam_user_id(std::string&& value) {
  
  iam_user_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.connection.v1.AwsCrossAccountRole.iam_user_id)
}
inline void AwsCrossAccountRole::set_iam_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  iam_user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.connection.v1.AwsCrossAccountRole.iam_user_id)
}
inline void AwsCrossAccountRole::set_iam_user_id(const char* value,
    size_t size) {
  
  iam_user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.connection.v1.AwsCrossAccountRole.iam_user_id)
}
inline std::string* AwsCrossAccountRole::_internal_mutable_iam_user_id() {
  
  return iam_user_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AwsCrossAccountRole::release_iam_user_id() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.connection.v1.AwsCrossAccountRole.iam_user_id)
  return iam_user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AwsCrossAccountRole::set_allocated_iam_user_id(std::string* iam_user_id) {
  if (iam_user_id != nullptr) {
    
  } else {
    
  }
  iam_user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), iam_user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.connection.v1.AwsCrossAccountRole.iam_user_id)
}

// string external_id = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void AwsCrossAccountRole::clear_external_id() {
  external_id_.ClearToEmpty();
}
inline const std::string& AwsCrossAccountRole::external_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.connection.v1.AwsCrossAccountRole.external_id)
  return _internal_external_id();
}
inline void AwsCrossAccountRole::set_external_id(const std::string& value) {
  _internal_set_external_id(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.connection.v1.AwsCrossAccountRole.external_id)
}
inline std::string* AwsCrossAccountRole::mutable_external_id() {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.connection.v1.AwsCrossAccountRole.external_id)
  return _internal_mutable_external_id();
}
inline const std::string& AwsCrossAccountRole::_internal_external_id() const {
  return external_id_.Get();
}
inline void AwsCrossAccountRole::_internal_set_external_id(const std::string& value) {
  
  external_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AwsCrossAccountRole::set_external_id(std::string&& value) {
  
  external_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.connection.v1.AwsCrossAccountRole.external_id)
}
inline void AwsCrossAccountRole::set_external_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  external_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.connection.v1.AwsCrossAccountRole.external_id)
}
inline void AwsCrossAccountRole::set_external_id(const char* value,
    size_t size) {
  
  external_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.connection.v1.AwsCrossAccountRole.external_id)
}
inline std::string* AwsCrossAccountRole::_internal_mutable_external_id() {
  
  return external_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AwsCrossAccountRole::release_external_id() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.connection.v1.AwsCrossAccountRole.external_id)
  return external_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AwsCrossAccountRole::set_allocated_external_id(std::string* external_id) {
  if (external_id != nullptr) {
    
  } else {
    
  }
  external_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), external_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.connection.v1.AwsCrossAccountRole.external_id)
}

// -------------------------------------------------------------------

// AwsAccessRole

// string iam_role_id = 1;
inline void AwsAccessRole::clear_iam_role_id() {
  iam_role_id_.ClearToEmpty();
}
inline const std::string& AwsAccessRole::iam_role_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.connection.v1.AwsAccessRole.iam_role_id)
  return _internal_iam_role_id();
}
inline void AwsAccessRole::set_iam_role_id(const std::string& value) {
  _internal_set_iam_role_id(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.connection.v1.AwsAccessRole.iam_role_id)
}
inline std::string* AwsAccessRole::mutable_iam_role_id() {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.connection.v1.AwsAccessRole.iam_role_id)
  return _internal_mutable_iam_role_id();
}
inline const std::string& AwsAccessRole::_internal_iam_role_id() const {
  return iam_role_id_.Get();
}
inline void AwsAccessRole::_internal_set_iam_role_id(const std::string& value) {
  
  iam_role_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AwsAccessRole::set_iam_role_id(std::string&& value) {
  
  iam_role_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.connection.v1.AwsAccessRole.iam_role_id)
}
inline void AwsAccessRole::set_iam_role_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  iam_role_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.connection.v1.AwsAccessRole.iam_role_id)
}
inline void AwsAccessRole::set_iam_role_id(const char* value,
    size_t size) {
  
  iam_role_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.connection.v1.AwsAccessRole.iam_role_id)
}
inline std::string* AwsAccessRole::_internal_mutable_iam_role_id() {
  
  return iam_role_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AwsAccessRole::release_iam_role_id() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.connection.v1.AwsAccessRole.iam_role_id)
  return iam_role_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AwsAccessRole::set_allocated_iam_role_id(std::string* iam_role_id) {
  if (iam_role_id != nullptr) {
    
  } else {
    
  }
  iam_role_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), iam_role_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.connection.v1.AwsAccessRole.iam_role_id)
}

// string identity = 2;
inline void AwsAccessRole::clear_identity() {
  identity_.ClearToEmpty();
}
inline const std::string& AwsAccessRole::identity() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.connection.v1.AwsAccessRole.identity)
  return _internal_identity();
}
inline void AwsAccessRole::set_identity(const std::string& value) {
  _internal_set_identity(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.connection.v1.AwsAccessRole.identity)
}
inline std::string* AwsAccessRole::mutable_identity() {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.connection.v1.AwsAccessRole.identity)
  return _internal_mutable_identity();
}
inline const std::string& AwsAccessRole::_internal_identity() const {
  return identity_.Get();
}
inline void AwsAccessRole::_internal_set_identity(const std::string& value) {
  
  identity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AwsAccessRole::set_identity(std::string&& value) {
  
  identity_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.connection.v1.AwsAccessRole.identity)
}
inline void AwsAccessRole::set_identity(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  identity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.connection.v1.AwsAccessRole.identity)
}
inline void AwsAccessRole::set_identity(const char* value,
    size_t size) {
  
  identity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.connection.v1.AwsAccessRole.identity)
}
inline std::string* AwsAccessRole::_internal_mutable_identity() {
  
  return identity_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AwsAccessRole::release_identity() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.connection.v1.AwsAccessRole.identity)
  return identity_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AwsAccessRole::set_allocated_identity(std::string* identity) {
  if (identity != nullptr) {
    
  } else {
    
  }
  identity_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), identity,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.connection.v1.AwsAccessRole.identity)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace connection
}  // namespace bigquery
}  // namespace cloud
}  // namespace google

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::google::cloud::bigquery::connection::v1::CloudSqlProperties_DatabaseType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::bigquery::connection::v1::CloudSqlProperties_DatabaseType>() {
  return ::google::cloud::bigquery::connection::v1::CloudSqlProperties_DatabaseType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fbigquery_2fconnection_2fv1_2fconnection_2eproto
