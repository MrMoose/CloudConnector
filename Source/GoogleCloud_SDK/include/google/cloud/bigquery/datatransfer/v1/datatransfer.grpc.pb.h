// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/cloud/bigquery/datatransfer/v1/datatransfer.proto
// Original file comments:
// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2fdatatransfer_2eproto__INCLUDED
#define GRPC_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2fdatatransfer_2eproto__INCLUDED

#include "google/cloud/bigquery/datatransfer/v1/datatransfer.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace google {
namespace cloud {
namespace bigquery {
namespace datatransfer {
namespace v1 {

// The Google BigQuery Data Transfer Service API enables BigQuery users to
// configure the transfer of their data from other Google Products into
// BigQuery. This service contains methods that are end user exposed. It backs
// up the frontend.
class DataTransferService final {
 public:
  static constexpr char const* service_full_name() {
    return "google.cloud.bigquery.datatransfer.v1.DataTransferService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Retrieves a supported data source and returns its settings,
    // which can be used for UI rendering.
    virtual ::grpc::Status GetDataSource(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::GetDataSourceRequest& request, ::google::cloud::bigquery::datatransfer::v1::DataSource* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datatransfer::v1::DataSource>> AsyncGetDataSource(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::GetDataSourceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datatransfer::v1::DataSource>>(AsyncGetDataSourceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datatransfer::v1::DataSource>> PrepareAsyncGetDataSource(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::GetDataSourceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datatransfer::v1::DataSource>>(PrepareAsyncGetDataSourceRaw(context, request, cq));
    }
    // Lists supported data sources and returns their settings,
    // which can be used for UI rendering.
    virtual ::grpc::Status ListDataSources(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::ListDataSourcesRequest& request, ::google::cloud::bigquery::datatransfer::v1::ListDataSourcesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datatransfer::v1::ListDataSourcesResponse>> AsyncListDataSources(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::ListDataSourcesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datatransfer::v1::ListDataSourcesResponse>>(AsyncListDataSourcesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datatransfer::v1::ListDataSourcesResponse>> PrepareAsyncListDataSources(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::ListDataSourcesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datatransfer::v1::ListDataSourcesResponse>>(PrepareAsyncListDataSourcesRaw(context, request, cq));
    }
    // Creates a new data transfer configuration.
    virtual ::grpc::Status CreateTransferConfig(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::CreateTransferConfigRequest& request, ::google::cloud::bigquery::datatransfer::v1::TransferConfig* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datatransfer::v1::TransferConfig>> AsyncCreateTransferConfig(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::CreateTransferConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datatransfer::v1::TransferConfig>>(AsyncCreateTransferConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datatransfer::v1::TransferConfig>> PrepareAsyncCreateTransferConfig(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::CreateTransferConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datatransfer::v1::TransferConfig>>(PrepareAsyncCreateTransferConfigRaw(context, request, cq));
    }
    // Updates a data transfer configuration.
    // All fields must be set, even if they are not updated.
    virtual ::grpc::Status UpdateTransferConfig(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::UpdateTransferConfigRequest& request, ::google::cloud::bigquery::datatransfer::v1::TransferConfig* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datatransfer::v1::TransferConfig>> AsyncUpdateTransferConfig(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::UpdateTransferConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datatransfer::v1::TransferConfig>>(AsyncUpdateTransferConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datatransfer::v1::TransferConfig>> PrepareAsyncUpdateTransferConfig(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::UpdateTransferConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datatransfer::v1::TransferConfig>>(PrepareAsyncUpdateTransferConfigRaw(context, request, cq));
    }
    // Deletes a data transfer configuration,
    // including any associated transfer runs and logs.
    virtual ::grpc::Status DeleteTransferConfig(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::DeleteTransferConfigRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeleteTransferConfig(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::DeleteTransferConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteTransferConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncDeleteTransferConfig(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::DeleteTransferConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncDeleteTransferConfigRaw(context, request, cq));
    }
    // Returns information about a data transfer config.
    virtual ::grpc::Status GetTransferConfig(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::GetTransferConfigRequest& request, ::google::cloud::bigquery::datatransfer::v1::TransferConfig* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datatransfer::v1::TransferConfig>> AsyncGetTransferConfig(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::GetTransferConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datatransfer::v1::TransferConfig>>(AsyncGetTransferConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datatransfer::v1::TransferConfig>> PrepareAsyncGetTransferConfig(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::GetTransferConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datatransfer::v1::TransferConfig>>(PrepareAsyncGetTransferConfigRaw(context, request, cq));
    }
    // Returns information about all data transfers in the project.
    virtual ::grpc::Status ListTransferConfigs(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::ListTransferConfigsRequest& request, ::google::cloud::bigquery::datatransfer::v1::ListTransferConfigsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datatransfer::v1::ListTransferConfigsResponse>> AsyncListTransferConfigs(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::ListTransferConfigsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datatransfer::v1::ListTransferConfigsResponse>>(AsyncListTransferConfigsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datatransfer::v1::ListTransferConfigsResponse>> PrepareAsyncListTransferConfigs(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::ListTransferConfigsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datatransfer::v1::ListTransferConfigsResponse>>(PrepareAsyncListTransferConfigsRaw(context, request, cq));
    }
    // Creates transfer runs for a time range [start_time, end_time].
    // For each date - or whatever granularity the data source supports - in the
    // range, one transfer run is created.
    // Note that runs are created per UTC time in the time range.
    // DEPRECATED: use StartManualTransferRuns instead.
    virtual ::grpc::Status ScheduleTransferRuns(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::ScheduleTransferRunsRequest& request, ::google::cloud::bigquery::datatransfer::v1::ScheduleTransferRunsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datatransfer::v1::ScheduleTransferRunsResponse>> AsyncScheduleTransferRuns(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::ScheduleTransferRunsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datatransfer::v1::ScheduleTransferRunsResponse>>(AsyncScheduleTransferRunsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datatransfer::v1::ScheduleTransferRunsResponse>> PrepareAsyncScheduleTransferRuns(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::ScheduleTransferRunsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datatransfer::v1::ScheduleTransferRunsResponse>>(PrepareAsyncScheduleTransferRunsRaw(context, request, cq));
    }
    // Start manual transfer runs to be executed now with schedule_time equal to
    // current time. The transfer runs can be created for a time range where the
    // run_time is between start_time (inclusive) and end_time (exclusive), or for
    // a specific run_time.
    virtual ::grpc::Status StartManualTransferRuns(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsRequest& request, ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsResponse>> AsyncStartManualTransferRuns(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsResponse>>(AsyncStartManualTransferRunsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsResponse>> PrepareAsyncStartManualTransferRuns(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsResponse>>(PrepareAsyncStartManualTransferRunsRaw(context, request, cq));
    }
    // Returns information about the particular transfer run.
    virtual ::grpc::Status GetTransferRun(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::GetTransferRunRequest& request, ::google::cloud::bigquery::datatransfer::v1::TransferRun* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datatransfer::v1::TransferRun>> AsyncGetTransferRun(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::GetTransferRunRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datatransfer::v1::TransferRun>>(AsyncGetTransferRunRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datatransfer::v1::TransferRun>> PrepareAsyncGetTransferRun(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::GetTransferRunRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datatransfer::v1::TransferRun>>(PrepareAsyncGetTransferRunRaw(context, request, cq));
    }
    // Deletes the specified transfer run.
    virtual ::grpc::Status DeleteTransferRun(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::DeleteTransferRunRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeleteTransferRun(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::DeleteTransferRunRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteTransferRunRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncDeleteTransferRun(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::DeleteTransferRunRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncDeleteTransferRunRaw(context, request, cq));
    }
    // Returns information about running and completed jobs.
    virtual ::grpc::Status ListTransferRuns(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsRequest& request, ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsResponse>> AsyncListTransferRuns(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsResponse>>(AsyncListTransferRunsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsResponse>> PrepareAsyncListTransferRuns(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsResponse>>(PrepareAsyncListTransferRunsRaw(context, request, cq));
    }
    // Returns user facing log messages for the data transfer run.
    virtual ::grpc::Status ListTransferLogs(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::ListTransferLogsRequest& request, ::google::cloud::bigquery::datatransfer::v1::ListTransferLogsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datatransfer::v1::ListTransferLogsResponse>> AsyncListTransferLogs(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::ListTransferLogsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datatransfer::v1::ListTransferLogsResponse>>(AsyncListTransferLogsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datatransfer::v1::ListTransferLogsResponse>> PrepareAsyncListTransferLogs(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::ListTransferLogsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datatransfer::v1::ListTransferLogsResponse>>(PrepareAsyncListTransferLogsRaw(context, request, cq));
    }
    // Returns true if valid credentials exist for the given data source and
    // requesting user.
    // Some data sources doesn't support service account, so we need to talk to
    // them on behalf of the end user. This API just checks whether we have OAuth
    // token for the particular user, which is a pre-requisite before user can
    // create a transfer config.
    virtual ::grpc::Status CheckValidCreds(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::CheckValidCredsRequest& request, ::google::cloud::bigquery::datatransfer::v1::CheckValidCredsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datatransfer::v1::CheckValidCredsResponse>> AsyncCheckValidCreds(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::CheckValidCredsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datatransfer::v1::CheckValidCredsResponse>>(AsyncCheckValidCredsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datatransfer::v1::CheckValidCredsResponse>> PrepareAsyncCheckValidCreds(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::CheckValidCredsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datatransfer::v1::CheckValidCredsResponse>>(PrepareAsyncCheckValidCredsRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Retrieves a supported data source and returns its settings,
      // which can be used for UI rendering.
      virtual void GetDataSource(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::GetDataSourceRequest* request, ::google::cloud::bigquery::datatransfer::v1::DataSource* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetDataSource(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::GetDataSourceRequest* request, ::google::cloud::bigquery::datatransfer::v1::DataSource* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetDataSource(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::GetDataSourceRequest* request, ::google::cloud::bigquery::datatransfer::v1::DataSource* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Lists supported data sources and returns their settings,
      // which can be used for UI rendering.
      virtual void ListDataSources(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::ListDataSourcesRequest* request, ::google::cloud::bigquery::datatransfer::v1::ListDataSourcesResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListDataSources(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::ListDataSourcesRequest* request, ::google::cloud::bigquery::datatransfer::v1::ListDataSourcesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ListDataSources(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::ListDataSourcesRequest* request, ::google::cloud::bigquery::datatransfer::v1::ListDataSourcesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Creates a new data transfer configuration.
      virtual void CreateTransferConfig(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::CreateTransferConfigRequest* request, ::google::cloud::bigquery::datatransfer::v1::TransferConfig* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateTransferConfig(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::CreateTransferConfigRequest* request, ::google::cloud::bigquery::datatransfer::v1::TransferConfig* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateTransferConfig(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::CreateTransferConfigRequest* request, ::google::cloud::bigquery::datatransfer::v1::TransferConfig* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Updates a data transfer configuration.
      // All fields must be set, even if they are not updated.
      virtual void UpdateTransferConfig(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::UpdateTransferConfigRequest* request, ::google::cloud::bigquery::datatransfer::v1::TransferConfig* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateTransferConfig(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::UpdateTransferConfigRequest* request, ::google::cloud::bigquery::datatransfer::v1::TransferConfig* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateTransferConfig(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::UpdateTransferConfigRequest* request, ::google::cloud::bigquery::datatransfer::v1::TransferConfig* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Deletes a data transfer configuration,
      // including any associated transfer runs and logs.
      virtual void DeleteTransferConfig(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::DeleteTransferConfigRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteTransferConfig(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::DeleteTransferConfigRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteTransferConfig(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::DeleteTransferConfigRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Returns information about a data transfer config.
      virtual void GetTransferConfig(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::GetTransferConfigRequest* request, ::google::cloud::bigquery::datatransfer::v1::TransferConfig* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetTransferConfig(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::GetTransferConfigRequest* request, ::google::cloud::bigquery::datatransfer::v1::TransferConfig* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetTransferConfig(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::GetTransferConfigRequest* request, ::google::cloud::bigquery::datatransfer::v1::TransferConfig* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Returns information about all data transfers in the project.
      virtual void ListTransferConfigs(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::ListTransferConfigsRequest* request, ::google::cloud::bigquery::datatransfer::v1::ListTransferConfigsResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListTransferConfigs(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::ListTransferConfigsRequest* request, ::google::cloud::bigquery::datatransfer::v1::ListTransferConfigsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ListTransferConfigs(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::ListTransferConfigsRequest* request, ::google::cloud::bigquery::datatransfer::v1::ListTransferConfigsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Creates transfer runs for a time range [start_time, end_time].
      // For each date - or whatever granularity the data source supports - in the
      // range, one transfer run is created.
      // Note that runs are created per UTC time in the time range.
      // DEPRECATED: use StartManualTransferRuns instead.
      virtual void ScheduleTransferRuns(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::ScheduleTransferRunsRequest* request, ::google::cloud::bigquery::datatransfer::v1::ScheduleTransferRunsResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ScheduleTransferRuns(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::ScheduleTransferRunsRequest* request, ::google::cloud::bigquery::datatransfer::v1::ScheduleTransferRunsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ScheduleTransferRuns(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::ScheduleTransferRunsRequest* request, ::google::cloud::bigquery::datatransfer::v1::ScheduleTransferRunsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Start manual transfer runs to be executed now with schedule_time equal to
      // current time. The transfer runs can be created for a time range where the
      // run_time is between start_time (inclusive) and end_time (exclusive), or for
      // a specific run_time.
      virtual void StartManualTransferRuns(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsRequest* request, ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void StartManualTransferRuns(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsRequest* request, ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void StartManualTransferRuns(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsRequest* request, ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Returns information about the particular transfer run.
      virtual void GetTransferRun(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::GetTransferRunRequest* request, ::google::cloud::bigquery::datatransfer::v1::TransferRun* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetTransferRun(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::GetTransferRunRequest* request, ::google::cloud::bigquery::datatransfer::v1::TransferRun* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetTransferRun(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::GetTransferRunRequest* request, ::google::cloud::bigquery::datatransfer::v1::TransferRun* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Deletes the specified transfer run.
      virtual void DeleteTransferRun(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::DeleteTransferRunRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteTransferRun(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::DeleteTransferRunRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteTransferRun(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::DeleteTransferRunRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Returns information about running and completed jobs.
      virtual void ListTransferRuns(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsRequest* request, ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListTransferRuns(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsRequest* request, ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ListTransferRuns(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsRequest* request, ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Returns user facing log messages for the data transfer run.
      virtual void ListTransferLogs(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::ListTransferLogsRequest* request, ::google::cloud::bigquery::datatransfer::v1::ListTransferLogsResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListTransferLogs(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::ListTransferLogsRequest* request, ::google::cloud::bigquery::datatransfer::v1::ListTransferLogsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ListTransferLogs(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::ListTransferLogsRequest* request, ::google::cloud::bigquery::datatransfer::v1::ListTransferLogsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Returns true if valid credentials exist for the given data source and
      // requesting user.
      // Some data sources doesn't support service account, so we need to talk to
      // them on behalf of the end user. This API just checks whether we have OAuth
      // token for the particular user, which is a pre-requisite before user can
      // create a transfer config.
      virtual void CheckValidCreds(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::CheckValidCredsRequest* request, ::google::cloud::bigquery::datatransfer::v1::CheckValidCredsResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CheckValidCreds(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::CheckValidCredsRequest* request, ::google::cloud::bigquery::datatransfer::v1::CheckValidCredsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CheckValidCreds(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::CheckValidCredsRequest* request, ::google::cloud::bigquery::datatransfer::v1::CheckValidCredsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datatransfer::v1::DataSource>* AsyncGetDataSourceRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::GetDataSourceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datatransfer::v1::DataSource>* PrepareAsyncGetDataSourceRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::GetDataSourceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datatransfer::v1::ListDataSourcesResponse>* AsyncListDataSourcesRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::ListDataSourcesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datatransfer::v1::ListDataSourcesResponse>* PrepareAsyncListDataSourcesRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::ListDataSourcesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datatransfer::v1::TransferConfig>* AsyncCreateTransferConfigRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::CreateTransferConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datatransfer::v1::TransferConfig>* PrepareAsyncCreateTransferConfigRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::CreateTransferConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datatransfer::v1::TransferConfig>* AsyncUpdateTransferConfigRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::UpdateTransferConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datatransfer::v1::TransferConfig>* PrepareAsyncUpdateTransferConfigRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::UpdateTransferConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteTransferConfigRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::DeleteTransferConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncDeleteTransferConfigRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::DeleteTransferConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datatransfer::v1::TransferConfig>* AsyncGetTransferConfigRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::GetTransferConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datatransfer::v1::TransferConfig>* PrepareAsyncGetTransferConfigRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::GetTransferConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datatransfer::v1::ListTransferConfigsResponse>* AsyncListTransferConfigsRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::ListTransferConfigsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datatransfer::v1::ListTransferConfigsResponse>* PrepareAsyncListTransferConfigsRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::ListTransferConfigsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datatransfer::v1::ScheduleTransferRunsResponse>* AsyncScheduleTransferRunsRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::ScheduleTransferRunsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datatransfer::v1::ScheduleTransferRunsResponse>* PrepareAsyncScheduleTransferRunsRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::ScheduleTransferRunsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsResponse>* AsyncStartManualTransferRunsRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsResponse>* PrepareAsyncStartManualTransferRunsRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datatransfer::v1::TransferRun>* AsyncGetTransferRunRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::GetTransferRunRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datatransfer::v1::TransferRun>* PrepareAsyncGetTransferRunRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::GetTransferRunRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteTransferRunRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::DeleteTransferRunRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncDeleteTransferRunRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::DeleteTransferRunRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsResponse>* AsyncListTransferRunsRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsResponse>* PrepareAsyncListTransferRunsRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datatransfer::v1::ListTransferLogsResponse>* AsyncListTransferLogsRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::ListTransferLogsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datatransfer::v1::ListTransferLogsResponse>* PrepareAsyncListTransferLogsRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::ListTransferLogsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datatransfer::v1::CheckValidCredsResponse>* AsyncCheckValidCredsRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::CheckValidCredsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datatransfer::v1::CheckValidCredsResponse>* PrepareAsyncCheckValidCredsRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::CheckValidCredsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetDataSource(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::GetDataSourceRequest& request, ::google::cloud::bigquery::datatransfer::v1::DataSource* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datatransfer::v1::DataSource>> AsyncGetDataSource(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::GetDataSourceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datatransfer::v1::DataSource>>(AsyncGetDataSourceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datatransfer::v1::DataSource>> PrepareAsyncGetDataSource(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::GetDataSourceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datatransfer::v1::DataSource>>(PrepareAsyncGetDataSourceRaw(context, request, cq));
    }
    ::grpc::Status ListDataSources(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::ListDataSourcesRequest& request, ::google::cloud::bigquery::datatransfer::v1::ListDataSourcesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datatransfer::v1::ListDataSourcesResponse>> AsyncListDataSources(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::ListDataSourcesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datatransfer::v1::ListDataSourcesResponse>>(AsyncListDataSourcesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datatransfer::v1::ListDataSourcesResponse>> PrepareAsyncListDataSources(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::ListDataSourcesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datatransfer::v1::ListDataSourcesResponse>>(PrepareAsyncListDataSourcesRaw(context, request, cq));
    }
    ::grpc::Status CreateTransferConfig(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::CreateTransferConfigRequest& request, ::google::cloud::bigquery::datatransfer::v1::TransferConfig* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datatransfer::v1::TransferConfig>> AsyncCreateTransferConfig(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::CreateTransferConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datatransfer::v1::TransferConfig>>(AsyncCreateTransferConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datatransfer::v1::TransferConfig>> PrepareAsyncCreateTransferConfig(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::CreateTransferConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datatransfer::v1::TransferConfig>>(PrepareAsyncCreateTransferConfigRaw(context, request, cq));
    }
    ::grpc::Status UpdateTransferConfig(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::UpdateTransferConfigRequest& request, ::google::cloud::bigquery::datatransfer::v1::TransferConfig* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datatransfer::v1::TransferConfig>> AsyncUpdateTransferConfig(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::UpdateTransferConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datatransfer::v1::TransferConfig>>(AsyncUpdateTransferConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datatransfer::v1::TransferConfig>> PrepareAsyncUpdateTransferConfig(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::UpdateTransferConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datatransfer::v1::TransferConfig>>(PrepareAsyncUpdateTransferConfigRaw(context, request, cq));
    }
    ::grpc::Status DeleteTransferConfig(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::DeleteTransferConfigRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeleteTransferConfig(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::DeleteTransferConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteTransferConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncDeleteTransferConfig(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::DeleteTransferConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncDeleteTransferConfigRaw(context, request, cq));
    }
    ::grpc::Status GetTransferConfig(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::GetTransferConfigRequest& request, ::google::cloud::bigquery::datatransfer::v1::TransferConfig* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datatransfer::v1::TransferConfig>> AsyncGetTransferConfig(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::GetTransferConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datatransfer::v1::TransferConfig>>(AsyncGetTransferConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datatransfer::v1::TransferConfig>> PrepareAsyncGetTransferConfig(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::GetTransferConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datatransfer::v1::TransferConfig>>(PrepareAsyncGetTransferConfigRaw(context, request, cq));
    }
    ::grpc::Status ListTransferConfigs(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::ListTransferConfigsRequest& request, ::google::cloud::bigquery::datatransfer::v1::ListTransferConfigsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datatransfer::v1::ListTransferConfigsResponse>> AsyncListTransferConfigs(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::ListTransferConfigsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datatransfer::v1::ListTransferConfigsResponse>>(AsyncListTransferConfigsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datatransfer::v1::ListTransferConfigsResponse>> PrepareAsyncListTransferConfigs(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::ListTransferConfigsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datatransfer::v1::ListTransferConfigsResponse>>(PrepareAsyncListTransferConfigsRaw(context, request, cq));
    }
    ::grpc::Status ScheduleTransferRuns(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::ScheduleTransferRunsRequest& request, ::google::cloud::bigquery::datatransfer::v1::ScheduleTransferRunsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datatransfer::v1::ScheduleTransferRunsResponse>> AsyncScheduleTransferRuns(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::ScheduleTransferRunsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datatransfer::v1::ScheduleTransferRunsResponse>>(AsyncScheduleTransferRunsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datatransfer::v1::ScheduleTransferRunsResponse>> PrepareAsyncScheduleTransferRuns(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::ScheduleTransferRunsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datatransfer::v1::ScheduleTransferRunsResponse>>(PrepareAsyncScheduleTransferRunsRaw(context, request, cq));
    }
    ::grpc::Status StartManualTransferRuns(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsRequest& request, ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsResponse>> AsyncStartManualTransferRuns(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsResponse>>(AsyncStartManualTransferRunsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsResponse>> PrepareAsyncStartManualTransferRuns(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsResponse>>(PrepareAsyncStartManualTransferRunsRaw(context, request, cq));
    }
    ::grpc::Status GetTransferRun(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::GetTransferRunRequest& request, ::google::cloud::bigquery::datatransfer::v1::TransferRun* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datatransfer::v1::TransferRun>> AsyncGetTransferRun(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::GetTransferRunRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datatransfer::v1::TransferRun>>(AsyncGetTransferRunRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datatransfer::v1::TransferRun>> PrepareAsyncGetTransferRun(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::GetTransferRunRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datatransfer::v1::TransferRun>>(PrepareAsyncGetTransferRunRaw(context, request, cq));
    }
    ::grpc::Status DeleteTransferRun(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::DeleteTransferRunRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeleteTransferRun(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::DeleteTransferRunRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteTransferRunRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncDeleteTransferRun(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::DeleteTransferRunRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncDeleteTransferRunRaw(context, request, cq));
    }
    ::grpc::Status ListTransferRuns(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsRequest& request, ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsResponse>> AsyncListTransferRuns(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsResponse>>(AsyncListTransferRunsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsResponse>> PrepareAsyncListTransferRuns(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsResponse>>(PrepareAsyncListTransferRunsRaw(context, request, cq));
    }
    ::grpc::Status ListTransferLogs(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::ListTransferLogsRequest& request, ::google::cloud::bigquery::datatransfer::v1::ListTransferLogsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datatransfer::v1::ListTransferLogsResponse>> AsyncListTransferLogs(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::ListTransferLogsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datatransfer::v1::ListTransferLogsResponse>>(AsyncListTransferLogsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datatransfer::v1::ListTransferLogsResponse>> PrepareAsyncListTransferLogs(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::ListTransferLogsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datatransfer::v1::ListTransferLogsResponse>>(PrepareAsyncListTransferLogsRaw(context, request, cq));
    }
    ::grpc::Status CheckValidCreds(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::CheckValidCredsRequest& request, ::google::cloud::bigquery::datatransfer::v1::CheckValidCredsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datatransfer::v1::CheckValidCredsResponse>> AsyncCheckValidCreds(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::CheckValidCredsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datatransfer::v1::CheckValidCredsResponse>>(AsyncCheckValidCredsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datatransfer::v1::CheckValidCredsResponse>> PrepareAsyncCheckValidCreds(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::CheckValidCredsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datatransfer::v1::CheckValidCredsResponse>>(PrepareAsyncCheckValidCredsRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void GetDataSource(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::GetDataSourceRequest* request, ::google::cloud::bigquery::datatransfer::v1::DataSource* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetDataSource(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::GetDataSourceRequest* request, ::google::cloud::bigquery::datatransfer::v1::DataSource* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetDataSource(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::GetDataSourceRequest* request, ::google::cloud::bigquery::datatransfer::v1::DataSource* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ListDataSources(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::ListDataSourcesRequest* request, ::google::cloud::bigquery::datatransfer::v1::ListDataSourcesResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListDataSources(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::ListDataSourcesRequest* request, ::google::cloud::bigquery::datatransfer::v1::ListDataSourcesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ListDataSources(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::ListDataSourcesRequest* request, ::google::cloud::bigquery::datatransfer::v1::ListDataSourcesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void CreateTransferConfig(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::CreateTransferConfigRequest* request, ::google::cloud::bigquery::datatransfer::v1::TransferConfig* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateTransferConfig(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::CreateTransferConfigRequest* request, ::google::cloud::bigquery::datatransfer::v1::TransferConfig* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateTransferConfig(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::CreateTransferConfigRequest* request, ::google::cloud::bigquery::datatransfer::v1::TransferConfig* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void UpdateTransferConfig(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::UpdateTransferConfigRequest* request, ::google::cloud::bigquery::datatransfer::v1::TransferConfig* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateTransferConfig(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::UpdateTransferConfigRequest* request, ::google::cloud::bigquery::datatransfer::v1::TransferConfig* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateTransferConfig(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::UpdateTransferConfigRequest* request, ::google::cloud::bigquery::datatransfer::v1::TransferConfig* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteTransferConfig(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::DeleteTransferConfigRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteTransferConfig(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::DeleteTransferConfigRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteTransferConfig(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::DeleteTransferConfigRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetTransferConfig(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::GetTransferConfigRequest* request, ::google::cloud::bigquery::datatransfer::v1::TransferConfig* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetTransferConfig(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::GetTransferConfigRequest* request, ::google::cloud::bigquery::datatransfer::v1::TransferConfig* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetTransferConfig(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::GetTransferConfigRequest* request, ::google::cloud::bigquery::datatransfer::v1::TransferConfig* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ListTransferConfigs(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::ListTransferConfigsRequest* request, ::google::cloud::bigquery::datatransfer::v1::ListTransferConfigsResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListTransferConfigs(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::ListTransferConfigsRequest* request, ::google::cloud::bigquery::datatransfer::v1::ListTransferConfigsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ListTransferConfigs(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::ListTransferConfigsRequest* request, ::google::cloud::bigquery::datatransfer::v1::ListTransferConfigsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ScheduleTransferRuns(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::ScheduleTransferRunsRequest* request, ::google::cloud::bigquery::datatransfer::v1::ScheduleTransferRunsResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ScheduleTransferRuns(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::ScheduleTransferRunsRequest* request, ::google::cloud::bigquery::datatransfer::v1::ScheduleTransferRunsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ScheduleTransferRuns(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::ScheduleTransferRunsRequest* request, ::google::cloud::bigquery::datatransfer::v1::ScheduleTransferRunsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void StartManualTransferRuns(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsRequest* request, ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void StartManualTransferRuns(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsRequest* request, ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void StartManualTransferRuns(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsRequest* request, ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetTransferRun(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::GetTransferRunRequest* request, ::google::cloud::bigquery::datatransfer::v1::TransferRun* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetTransferRun(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::GetTransferRunRequest* request, ::google::cloud::bigquery::datatransfer::v1::TransferRun* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetTransferRun(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::GetTransferRunRequest* request, ::google::cloud::bigquery::datatransfer::v1::TransferRun* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteTransferRun(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::DeleteTransferRunRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteTransferRun(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::DeleteTransferRunRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteTransferRun(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::DeleteTransferRunRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ListTransferRuns(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsRequest* request, ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListTransferRuns(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsRequest* request, ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ListTransferRuns(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsRequest* request, ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ListTransferLogs(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::ListTransferLogsRequest* request, ::google::cloud::bigquery::datatransfer::v1::ListTransferLogsResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListTransferLogs(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::ListTransferLogsRequest* request, ::google::cloud::bigquery::datatransfer::v1::ListTransferLogsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ListTransferLogs(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::ListTransferLogsRequest* request, ::google::cloud::bigquery::datatransfer::v1::ListTransferLogsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void CheckValidCreds(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::CheckValidCredsRequest* request, ::google::cloud::bigquery::datatransfer::v1::CheckValidCredsResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CheckValidCreds(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::CheckValidCredsRequest* request, ::google::cloud::bigquery::datatransfer::v1::CheckValidCredsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CheckValidCreds(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::CheckValidCredsRequest* request, ::google::cloud::bigquery::datatransfer::v1::CheckValidCredsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datatransfer::v1::DataSource>* AsyncGetDataSourceRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::GetDataSourceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datatransfer::v1::DataSource>* PrepareAsyncGetDataSourceRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::GetDataSourceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datatransfer::v1::ListDataSourcesResponse>* AsyncListDataSourcesRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::ListDataSourcesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datatransfer::v1::ListDataSourcesResponse>* PrepareAsyncListDataSourcesRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::ListDataSourcesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datatransfer::v1::TransferConfig>* AsyncCreateTransferConfigRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::CreateTransferConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datatransfer::v1::TransferConfig>* PrepareAsyncCreateTransferConfigRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::CreateTransferConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datatransfer::v1::TransferConfig>* AsyncUpdateTransferConfigRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::UpdateTransferConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datatransfer::v1::TransferConfig>* PrepareAsyncUpdateTransferConfigRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::UpdateTransferConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteTransferConfigRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::DeleteTransferConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncDeleteTransferConfigRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::DeleteTransferConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datatransfer::v1::TransferConfig>* AsyncGetTransferConfigRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::GetTransferConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datatransfer::v1::TransferConfig>* PrepareAsyncGetTransferConfigRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::GetTransferConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datatransfer::v1::ListTransferConfigsResponse>* AsyncListTransferConfigsRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::ListTransferConfigsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datatransfer::v1::ListTransferConfigsResponse>* PrepareAsyncListTransferConfigsRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::ListTransferConfigsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datatransfer::v1::ScheduleTransferRunsResponse>* AsyncScheduleTransferRunsRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::ScheduleTransferRunsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datatransfer::v1::ScheduleTransferRunsResponse>* PrepareAsyncScheduleTransferRunsRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::ScheduleTransferRunsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsResponse>* AsyncStartManualTransferRunsRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsResponse>* PrepareAsyncStartManualTransferRunsRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datatransfer::v1::TransferRun>* AsyncGetTransferRunRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::GetTransferRunRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datatransfer::v1::TransferRun>* PrepareAsyncGetTransferRunRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::GetTransferRunRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteTransferRunRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::DeleteTransferRunRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncDeleteTransferRunRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::DeleteTransferRunRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsResponse>* AsyncListTransferRunsRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsResponse>* PrepareAsyncListTransferRunsRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datatransfer::v1::ListTransferLogsResponse>* AsyncListTransferLogsRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::ListTransferLogsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datatransfer::v1::ListTransferLogsResponse>* PrepareAsyncListTransferLogsRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::ListTransferLogsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datatransfer::v1::CheckValidCredsResponse>* AsyncCheckValidCredsRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::CheckValidCredsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datatransfer::v1::CheckValidCredsResponse>* PrepareAsyncCheckValidCredsRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::datatransfer::v1::CheckValidCredsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetDataSource_;
    const ::grpc::internal::RpcMethod rpcmethod_ListDataSources_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateTransferConfig_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateTransferConfig_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteTransferConfig_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTransferConfig_;
    const ::grpc::internal::RpcMethod rpcmethod_ListTransferConfigs_;
    const ::grpc::internal::RpcMethod rpcmethod_ScheduleTransferRuns_;
    const ::grpc::internal::RpcMethod rpcmethod_StartManualTransferRuns_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTransferRun_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteTransferRun_;
    const ::grpc::internal::RpcMethod rpcmethod_ListTransferRuns_;
    const ::grpc::internal::RpcMethod rpcmethod_ListTransferLogs_;
    const ::grpc::internal::RpcMethod rpcmethod_CheckValidCreds_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Retrieves a supported data source and returns its settings,
    // which can be used for UI rendering.
    virtual ::grpc::Status GetDataSource(::grpc::ServerContext* context, const ::google::cloud::bigquery::datatransfer::v1::GetDataSourceRequest* request, ::google::cloud::bigquery::datatransfer::v1::DataSource* response);
    // Lists supported data sources and returns their settings,
    // which can be used for UI rendering.
    virtual ::grpc::Status ListDataSources(::grpc::ServerContext* context, const ::google::cloud::bigquery::datatransfer::v1::ListDataSourcesRequest* request, ::google::cloud::bigquery::datatransfer::v1::ListDataSourcesResponse* response);
    // Creates a new data transfer configuration.
    virtual ::grpc::Status CreateTransferConfig(::grpc::ServerContext* context, const ::google::cloud::bigquery::datatransfer::v1::CreateTransferConfigRequest* request, ::google::cloud::bigquery::datatransfer::v1::TransferConfig* response);
    // Updates a data transfer configuration.
    // All fields must be set, even if they are not updated.
    virtual ::grpc::Status UpdateTransferConfig(::grpc::ServerContext* context, const ::google::cloud::bigquery::datatransfer::v1::UpdateTransferConfigRequest* request, ::google::cloud::bigquery::datatransfer::v1::TransferConfig* response);
    // Deletes a data transfer configuration,
    // including any associated transfer runs and logs.
    virtual ::grpc::Status DeleteTransferConfig(::grpc::ServerContext* context, const ::google::cloud::bigquery::datatransfer::v1::DeleteTransferConfigRequest* request, ::google::protobuf::Empty* response);
    // Returns information about a data transfer config.
    virtual ::grpc::Status GetTransferConfig(::grpc::ServerContext* context, const ::google::cloud::bigquery::datatransfer::v1::GetTransferConfigRequest* request, ::google::cloud::bigquery::datatransfer::v1::TransferConfig* response);
    // Returns information about all data transfers in the project.
    virtual ::grpc::Status ListTransferConfigs(::grpc::ServerContext* context, const ::google::cloud::bigquery::datatransfer::v1::ListTransferConfigsRequest* request, ::google::cloud::bigquery::datatransfer::v1::ListTransferConfigsResponse* response);
    // Creates transfer runs for a time range [start_time, end_time].
    // For each date - or whatever granularity the data source supports - in the
    // range, one transfer run is created.
    // Note that runs are created per UTC time in the time range.
    // DEPRECATED: use StartManualTransferRuns instead.
    virtual ::grpc::Status ScheduleTransferRuns(::grpc::ServerContext* context, const ::google::cloud::bigquery::datatransfer::v1::ScheduleTransferRunsRequest* request, ::google::cloud::bigquery::datatransfer::v1::ScheduleTransferRunsResponse* response);
    // Start manual transfer runs to be executed now with schedule_time equal to
    // current time. The transfer runs can be created for a time range where the
    // run_time is between start_time (inclusive) and end_time (exclusive), or for
    // a specific run_time.
    virtual ::grpc::Status StartManualTransferRuns(::grpc::ServerContext* context, const ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsRequest* request, ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsResponse* response);
    // Returns information about the particular transfer run.
    virtual ::grpc::Status GetTransferRun(::grpc::ServerContext* context, const ::google::cloud::bigquery::datatransfer::v1::GetTransferRunRequest* request, ::google::cloud::bigquery::datatransfer::v1::TransferRun* response);
    // Deletes the specified transfer run.
    virtual ::grpc::Status DeleteTransferRun(::grpc::ServerContext* context, const ::google::cloud::bigquery::datatransfer::v1::DeleteTransferRunRequest* request, ::google::protobuf::Empty* response);
    // Returns information about running and completed jobs.
    virtual ::grpc::Status ListTransferRuns(::grpc::ServerContext* context, const ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsRequest* request, ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsResponse* response);
    // Returns user facing log messages for the data transfer run.
    virtual ::grpc::Status ListTransferLogs(::grpc::ServerContext* context, const ::google::cloud::bigquery::datatransfer::v1::ListTransferLogsRequest* request, ::google::cloud::bigquery::datatransfer::v1::ListTransferLogsResponse* response);
    // Returns true if valid credentials exist for the given data source and
    // requesting user.
    // Some data sources doesn't support service account, so we need to talk to
    // them on behalf of the end user. This API just checks whether we have OAuth
    // token for the particular user, which is a pre-requisite before user can
    // create a transfer config.
    virtual ::grpc::Status CheckValidCreds(::grpc::ServerContext* context, const ::google::cloud::bigquery::datatransfer::v1::CheckValidCredsRequest* request, ::google::cloud::bigquery::datatransfer::v1::CheckValidCredsResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDataSource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetDataSource() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetDataSource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDataSource(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::GetDataSourceRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::DataSource* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDataSource(::grpc::ServerContext* context, ::google::cloud::bigquery::datatransfer::v1::GetDataSourceRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::bigquery::datatransfer::v1::DataSource>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListDataSources : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListDataSources() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ListDataSources() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDataSources(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::ListDataSourcesRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::ListDataSourcesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListDataSources(::grpc::ServerContext* context, ::google::cloud::bigquery::datatransfer::v1::ListDataSourcesRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::bigquery::datatransfer::v1::ListDataSourcesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateTransferConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateTransferConfig() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_CreateTransferConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTransferConfig(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::CreateTransferConfigRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::TransferConfig* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateTransferConfig(::grpc::ServerContext* context, ::google::cloud::bigquery::datatransfer::v1::CreateTransferConfigRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::bigquery::datatransfer::v1::TransferConfig>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateTransferConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateTransferConfig() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_UpdateTransferConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateTransferConfig(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::UpdateTransferConfigRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::TransferConfig* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateTransferConfig(::grpc::ServerContext* context, ::google::cloud::bigquery::datatransfer::v1::UpdateTransferConfigRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::bigquery::datatransfer::v1::TransferConfig>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteTransferConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteTransferConfig() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_DeleteTransferConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteTransferConfig(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::DeleteTransferConfigRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteTransferConfig(::grpc::ServerContext* context, ::google::cloud::bigquery::datatransfer::v1::DeleteTransferConfigRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTransferConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetTransferConfig() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetTransferConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransferConfig(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::GetTransferConfigRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::TransferConfig* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTransferConfig(::grpc::ServerContext* context, ::google::cloud::bigquery::datatransfer::v1::GetTransferConfigRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::bigquery::datatransfer::v1::TransferConfig>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListTransferConfigs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListTransferConfigs() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_ListTransferConfigs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTransferConfigs(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::ListTransferConfigsRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::ListTransferConfigsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListTransferConfigs(::grpc::ServerContext* context, ::google::cloud::bigquery::datatransfer::v1::ListTransferConfigsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::bigquery::datatransfer::v1::ListTransferConfigsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ScheduleTransferRuns : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ScheduleTransferRuns() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_ScheduleTransferRuns() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScheduleTransferRuns(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::ScheduleTransferRunsRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::ScheduleTransferRunsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestScheduleTransferRuns(::grpc::ServerContext* context, ::google::cloud::bigquery::datatransfer::v1::ScheduleTransferRunsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::bigquery::datatransfer::v1::ScheduleTransferRunsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StartManualTransferRuns : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StartManualTransferRuns() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_StartManualTransferRuns() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartManualTransferRuns(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartManualTransferRuns(::grpc::ServerContext* context, ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTransferRun : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetTransferRun() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_GetTransferRun() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransferRun(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::GetTransferRunRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::TransferRun* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTransferRun(::grpc::ServerContext* context, ::google::cloud::bigquery::datatransfer::v1::GetTransferRunRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::bigquery::datatransfer::v1::TransferRun>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteTransferRun : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteTransferRun() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_DeleteTransferRun() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteTransferRun(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::DeleteTransferRunRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteTransferRun(::grpc::ServerContext* context, ::google::cloud::bigquery::datatransfer::v1::DeleteTransferRunRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListTransferRuns : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListTransferRuns() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_ListTransferRuns() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTransferRuns(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListTransferRuns(::grpc::ServerContext* context, ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListTransferLogs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListTransferLogs() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_ListTransferLogs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTransferLogs(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::ListTransferLogsRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::ListTransferLogsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListTransferLogs(::grpc::ServerContext* context, ::google::cloud::bigquery::datatransfer::v1::ListTransferLogsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::bigquery::datatransfer::v1::ListTransferLogsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CheckValidCreds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CheckValidCreds() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_CheckValidCreds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckValidCreds(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::CheckValidCredsRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::CheckValidCredsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckValidCreds(::grpc::ServerContext* context, ::google::cloud::bigquery::datatransfer::v1::CheckValidCredsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::bigquery::datatransfer::v1::CheckValidCredsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetDataSource<WithAsyncMethod_ListDataSources<WithAsyncMethod_CreateTransferConfig<WithAsyncMethod_UpdateTransferConfig<WithAsyncMethod_DeleteTransferConfig<WithAsyncMethod_GetTransferConfig<WithAsyncMethod_ListTransferConfigs<WithAsyncMethod_ScheduleTransferRuns<WithAsyncMethod_StartManualTransferRuns<WithAsyncMethod_GetTransferRun<WithAsyncMethod_DeleteTransferRun<WithAsyncMethod_ListTransferRuns<WithAsyncMethod_ListTransferLogs<WithAsyncMethod_CheckValidCreds<Service > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetDataSource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetDataSource() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::google::cloud::bigquery::datatransfer::v1::GetDataSourceRequest, ::google::cloud::bigquery::datatransfer::v1::DataSource>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::cloud::bigquery::datatransfer::v1::GetDataSourceRequest* request, ::google::cloud::bigquery::datatransfer::v1::DataSource* response) { return this->GetDataSource(context, request, response); }));}
    void SetMessageAllocatorFor_GetDataSource(
        ::grpc::experimental::MessageAllocator< ::google::cloud::bigquery::datatransfer::v1::GetDataSourceRequest, ::google::cloud::bigquery::datatransfer::v1::DataSource>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::cloud::bigquery::datatransfer::v1::GetDataSourceRequest, ::google::cloud::bigquery::datatransfer::v1::DataSource>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetDataSource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDataSource(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::GetDataSourceRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::DataSource* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetDataSource(
      ::grpc::CallbackServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::GetDataSourceRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::DataSource* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetDataSource(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::GetDataSourceRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::DataSource* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListDataSources : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ListDataSources() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::google::cloud::bigquery::datatransfer::v1::ListDataSourcesRequest, ::google::cloud::bigquery::datatransfer::v1::ListDataSourcesResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::cloud::bigquery::datatransfer::v1::ListDataSourcesRequest* request, ::google::cloud::bigquery::datatransfer::v1::ListDataSourcesResponse* response) { return this->ListDataSources(context, request, response); }));}
    void SetMessageAllocatorFor_ListDataSources(
        ::grpc::experimental::MessageAllocator< ::google::cloud::bigquery::datatransfer::v1::ListDataSourcesRequest, ::google::cloud::bigquery::datatransfer::v1::ListDataSourcesResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::cloud::bigquery::datatransfer::v1::ListDataSourcesRequest, ::google::cloud::bigquery::datatransfer::v1::ListDataSourcesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ListDataSources() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDataSources(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::ListDataSourcesRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::ListDataSourcesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListDataSources(
      ::grpc::CallbackServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::ListDataSourcesRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::ListDataSourcesResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListDataSources(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::ListDataSourcesRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::ListDataSourcesResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateTransferConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateTransferConfig() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::google::cloud::bigquery::datatransfer::v1::CreateTransferConfigRequest, ::google::cloud::bigquery::datatransfer::v1::TransferConfig>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::cloud::bigquery::datatransfer::v1::CreateTransferConfigRequest* request, ::google::cloud::bigquery::datatransfer::v1::TransferConfig* response) { return this->CreateTransferConfig(context, request, response); }));}
    void SetMessageAllocatorFor_CreateTransferConfig(
        ::grpc::experimental::MessageAllocator< ::google::cloud::bigquery::datatransfer::v1::CreateTransferConfigRequest, ::google::cloud::bigquery::datatransfer::v1::TransferConfig>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::cloud::bigquery::datatransfer::v1::CreateTransferConfigRequest, ::google::cloud::bigquery::datatransfer::v1::TransferConfig>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateTransferConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTransferConfig(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::CreateTransferConfigRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::TransferConfig* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateTransferConfig(
      ::grpc::CallbackServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::CreateTransferConfigRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::TransferConfig* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateTransferConfig(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::CreateTransferConfigRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::TransferConfig* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UpdateTransferConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UpdateTransferConfig() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::google::cloud::bigquery::datatransfer::v1::UpdateTransferConfigRequest, ::google::cloud::bigquery::datatransfer::v1::TransferConfig>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::cloud::bigquery::datatransfer::v1::UpdateTransferConfigRequest* request, ::google::cloud::bigquery::datatransfer::v1::TransferConfig* response) { return this->UpdateTransferConfig(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateTransferConfig(
        ::grpc::experimental::MessageAllocator< ::google::cloud::bigquery::datatransfer::v1::UpdateTransferConfigRequest, ::google::cloud::bigquery::datatransfer::v1::TransferConfig>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::cloud::bigquery::datatransfer::v1::UpdateTransferConfigRequest, ::google::cloud::bigquery::datatransfer::v1::TransferConfig>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UpdateTransferConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateTransferConfig(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::UpdateTransferConfigRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::TransferConfig* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateTransferConfig(
      ::grpc::CallbackServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::UpdateTransferConfigRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::TransferConfig* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateTransferConfig(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::UpdateTransferConfigRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::TransferConfig* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteTransferConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteTransferConfig() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::google::cloud::bigquery::datatransfer::v1::DeleteTransferConfigRequest, ::google::protobuf::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::cloud::bigquery::datatransfer::v1::DeleteTransferConfigRequest* request, ::google::protobuf::Empty* response) { return this->DeleteTransferConfig(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteTransferConfig(
        ::grpc::experimental::MessageAllocator< ::google::cloud::bigquery::datatransfer::v1::DeleteTransferConfigRequest, ::google::protobuf::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::cloud::bigquery::datatransfer::v1::DeleteTransferConfigRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteTransferConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteTransferConfig(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::DeleteTransferConfigRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteTransferConfig(
      ::grpc::CallbackServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::DeleteTransferConfigRequest* /*request*/, ::google::protobuf::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteTransferConfig(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::DeleteTransferConfigRequest* /*request*/, ::google::protobuf::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetTransferConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetTransferConfig() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::google::cloud::bigquery::datatransfer::v1::GetTransferConfigRequest, ::google::cloud::bigquery::datatransfer::v1::TransferConfig>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::cloud::bigquery::datatransfer::v1::GetTransferConfigRequest* request, ::google::cloud::bigquery::datatransfer::v1::TransferConfig* response) { return this->GetTransferConfig(context, request, response); }));}
    void SetMessageAllocatorFor_GetTransferConfig(
        ::grpc::experimental::MessageAllocator< ::google::cloud::bigquery::datatransfer::v1::GetTransferConfigRequest, ::google::cloud::bigquery::datatransfer::v1::TransferConfig>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::cloud::bigquery::datatransfer::v1::GetTransferConfigRequest, ::google::cloud::bigquery::datatransfer::v1::TransferConfig>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetTransferConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransferConfig(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::GetTransferConfigRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::TransferConfig* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetTransferConfig(
      ::grpc::CallbackServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::GetTransferConfigRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::TransferConfig* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetTransferConfig(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::GetTransferConfigRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::TransferConfig* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListTransferConfigs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ListTransferConfigs() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::google::cloud::bigquery::datatransfer::v1::ListTransferConfigsRequest, ::google::cloud::bigquery::datatransfer::v1::ListTransferConfigsResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::cloud::bigquery::datatransfer::v1::ListTransferConfigsRequest* request, ::google::cloud::bigquery::datatransfer::v1::ListTransferConfigsResponse* response) { return this->ListTransferConfigs(context, request, response); }));}
    void SetMessageAllocatorFor_ListTransferConfigs(
        ::grpc::experimental::MessageAllocator< ::google::cloud::bigquery::datatransfer::v1::ListTransferConfigsRequest, ::google::cloud::bigquery::datatransfer::v1::ListTransferConfigsResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(6);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::cloud::bigquery::datatransfer::v1::ListTransferConfigsRequest, ::google::cloud::bigquery::datatransfer::v1::ListTransferConfigsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ListTransferConfigs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTransferConfigs(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::ListTransferConfigsRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::ListTransferConfigsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListTransferConfigs(
      ::grpc::CallbackServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::ListTransferConfigsRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::ListTransferConfigsResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListTransferConfigs(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::ListTransferConfigsRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::ListTransferConfigsResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ScheduleTransferRuns : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ScheduleTransferRuns() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::google::cloud::bigquery::datatransfer::v1::ScheduleTransferRunsRequest, ::google::cloud::bigquery::datatransfer::v1::ScheduleTransferRunsResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::cloud::bigquery::datatransfer::v1::ScheduleTransferRunsRequest* request, ::google::cloud::bigquery::datatransfer::v1::ScheduleTransferRunsResponse* response) { return this->ScheduleTransferRuns(context, request, response); }));}
    void SetMessageAllocatorFor_ScheduleTransferRuns(
        ::grpc::experimental::MessageAllocator< ::google::cloud::bigquery::datatransfer::v1::ScheduleTransferRunsRequest, ::google::cloud::bigquery::datatransfer::v1::ScheduleTransferRunsResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(7);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::cloud::bigquery::datatransfer::v1::ScheduleTransferRunsRequest, ::google::cloud::bigquery::datatransfer::v1::ScheduleTransferRunsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ScheduleTransferRuns() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScheduleTransferRuns(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::ScheduleTransferRunsRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::ScheduleTransferRunsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ScheduleTransferRuns(
      ::grpc::CallbackServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::ScheduleTransferRunsRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::ScheduleTransferRunsResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ScheduleTransferRuns(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::ScheduleTransferRunsRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::ScheduleTransferRunsResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_StartManualTransferRuns : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_StartManualTransferRuns() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsRequest, ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsRequest* request, ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsResponse* response) { return this->StartManualTransferRuns(context, request, response); }));}
    void SetMessageAllocatorFor_StartManualTransferRuns(
        ::grpc::experimental::MessageAllocator< ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsRequest, ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(8);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsRequest, ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_StartManualTransferRuns() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartManualTransferRuns(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* StartManualTransferRuns(
      ::grpc::CallbackServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* StartManualTransferRuns(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetTransferRun : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetTransferRun() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::google::cloud::bigquery::datatransfer::v1::GetTransferRunRequest, ::google::cloud::bigquery::datatransfer::v1::TransferRun>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::cloud::bigquery::datatransfer::v1::GetTransferRunRequest* request, ::google::cloud::bigquery::datatransfer::v1::TransferRun* response) { return this->GetTransferRun(context, request, response); }));}
    void SetMessageAllocatorFor_GetTransferRun(
        ::grpc::experimental::MessageAllocator< ::google::cloud::bigquery::datatransfer::v1::GetTransferRunRequest, ::google::cloud::bigquery::datatransfer::v1::TransferRun>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(9);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::cloud::bigquery::datatransfer::v1::GetTransferRunRequest, ::google::cloud::bigquery::datatransfer::v1::TransferRun>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetTransferRun() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransferRun(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::GetTransferRunRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::TransferRun* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetTransferRun(
      ::grpc::CallbackServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::GetTransferRunRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::TransferRun* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetTransferRun(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::GetTransferRunRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::TransferRun* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteTransferRun : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteTransferRun() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::google::cloud::bigquery::datatransfer::v1::DeleteTransferRunRequest, ::google::protobuf::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::cloud::bigquery::datatransfer::v1::DeleteTransferRunRequest* request, ::google::protobuf::Empty* response) { return this->DeleteTransferRun(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteTransferRun(
        ::grpc::experimental::MessageAllocator< ::google::cloud::bigquery::datatransfer::v1::DeleteTransferRunRequest, ::google::protobuf::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(10);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::cloud::bigquery::datatransfer::v1::DeleteTransferRunRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteTransferRun() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteTransferRun(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::DeleteTransferRunRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteTransferRun(
      ::grpc::CallbackServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::DeleteTransferRunRequest* /*request*/, ::google::protobuf::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteTransferRun(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::DeleteTransferRunRequest* /*request*/, ::google::protobuf::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListTransferRuns : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ListTransferRuns() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsRequest, ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsRequest* request, ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsResponse* response) { return this->ListTransferRuns(context, request, response); }));}
    void SetMessageAllocatorFor_ListTransferRuns(
        ::grpc::experimental::MessageAllocator< ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsRequest, ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(11);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsRequest, ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ListTransferRuns() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTransferRuns(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListTransferRuns(
      ::grpc::CallbackServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListTransferRuns(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListTransferLogs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ListTransferLogs() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::google::cloud::bigquery::datatransfer::v1::ListTransferLogsRequest, ::google::cloud::bigquery::datatransfer::v1::ListTransferLogsResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::cloud::bigquery::datatransfer::v1::ListTransferLogsRequest* request, ::google::cloud::bigquery::datatransfer::v1::ListTransferLogsResponse* response) { return this->ListTransferLogs(context, request, response); }));}
    void SetMessageAllocatorFor_ListTransferLogs(
        ::grpc::experimental::MessageAllocator< ::google::cloud::bigquery::datatransfer::v1::ListTransferLogsRequest, ::google::cloud::bigquery::datatransfer::v1::ListTransferLogsResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(12);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::cloud::bigquery::datatransfer::v1::ListTransferLogsRequest, ::google::cloud::bigquery::datatransfer::v1::ListTransferLogsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ListTransferLogs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTransferLogs(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::ListTransferLogsRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::ListTransferLogsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListTransferLogs(
      ::grpc::CallbackServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::ListTransferLogsRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::ListTransferLogsResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListTransferLogs(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::ListTransferLogsRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::ListTransferLogsResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CheckValidCreds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CheckValidCreds() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::google::cloud::bigquery::datatransfer::v1::CheckValidCredsRequest, ::google::cloud::bigquery::datatransfer::v1::CheckValidCredsResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::cloud::bigquery::datatransfer::v1::CheckValidCredsRequest* request, ::google::cloud::bigquery::datatransfer::v1::CheckValidCredsResponse* response) { return this->CheckValidCreds(context, request, response); }));}
    void SetMessageAllocatorFor_CheckValidCreds(
        ::grpc::experimental::MessageAllocator< ::google::cloud::bigquery::datatransfer::v1::CheckValidCredsRequest, ::google::cloud::bigquery::datatransfer::v1::CheckValidCredsResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(13);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::cloud::bigquery::datatransfer::v1::CheckValidCredsRequest, ::google::cloud::bigquery::datatransfer::v1::CheckValidCredsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CheckValidCreds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckValidCreds(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::CheckValidCredsRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::CheckValidCredsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CheckValidCreds(
      ::grpc::CallbackServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::CheckValidCredsRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::CheckValidCredsResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CheckValidCreds(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::CheckValidCredsRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::CheckValidCredsResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_GetDataSource<ExperimentalWithCallbackMethod_ListDataSources<ExperimentalWithCallbackMethod_CreateTransferConfig<ExperimentalWithCallbackMethod_UpdateTransferConfig<ExperimentalWithCallbackMethod_DeleteTransferConfig<ExperimentalWithCallbackMethod_GetTransferConfig<ExperimentalWithCallbackMethod_ListTransferConfigs<ExperimentalWithCallbackMethod_ScheduleTransferRuns<ExperimentalWithCallbackMethod_StartManualTransferRuns<ExperimentalWithCallbackMethod_GetTransferRun<ExperimentalWithCallbackMethod_DeleteTransferRun<ExperimentalWithCallbackMethod_ListTransferRuns<ExperimentalWithCallbackMethod_ListTransferLogs<ExperimentalWithCallbackMethod_CheckValidCreds<Service > > > > > > > > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_GetDataSource<ExperimentalWithCallbackMethod_ListDataSources<ExperimentalWithCallbackMethod_CreateTransferConfig<ExperimentalWithCallbackMethod_UpdateTransferConfig<ExperimentalWithCallbackMethod_DeleteTransferConfig<ExperimentalWithCallbackMethod_GetTransferConfig<ExperimentalWithCallbackMethod_ListTransferConfigs<ExperimentalWithCallbackMethod_ScheduleTransferRuns<ExperimentalWithCallbackMethod_StartManualTransferRuns<ExperimentalWithCallbackMethod_GetTransferRun<ExperimentalWithCallbackMethod_DeleteTransferRun<ExperimentalWithCallbackMethod_ListTransferRuns<ExperimentalWithCallbackMethod_ListTransferLogs<ExperimentalWithCallbackMethod_CheckValidCreds<Service > > > > > > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetDataSource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetDataSource() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetDataSource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDataSource(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::GetDataSourceRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::DataSource* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListDataSources : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListDataSources() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ListDataSources() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDataSources(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::ListDataSourcesRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::ListDataSourcesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateTransferConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateTransferConfig() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_CreateTransferConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTransferConfig(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::CreateTransferConfigRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::TransferConfig* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateTransferConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateTransferConfig() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_UpdateTransferConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateTransferConfig(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::UpdateTransferConfigRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::TransferConfig* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteTransferConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteTransferConfig() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_DeleteTransferConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteTransferConfig(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::DeleteTransferConfigRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTransferConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetTransferConfig() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetTransferConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransferConfig(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::GetTransferConfigRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::TransferConfig* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListTransferConfigs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListTransferConfigs() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_ListTransferConfigs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTransferConfigs(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::ListTransferConfigsRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::ListTransferConfigsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ScheduleTransferRuns : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ScheduleTransferRuns() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_ScheduleTransferRuns() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScheduleTransferRuns(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::ScheduleTransferRunsRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::ScheduleTransferRunsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StartManualTransferRuns : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StartManualTransferRuns() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_StartManualTransferRuns() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartManualTransferRuns(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTransferRun : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetTransferRun() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_GetTransferRun() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransferRun(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::GetTransferRunRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::TransferRun* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteTransferRun : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteTransferRun() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_DeleteTransferRun() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteTransferRun(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::DeleteTransferRunRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListTransferRuns : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListTransferRuns() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_ListTransferRuns() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTransferRuns(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListTransferLogs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListTransferLogs() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_ListTransferLogs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTransferLogs(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::ListTransferLogsRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::ListTransferLogsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CheckValidCreds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CheckValidCreds() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_CheckValidCreds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckValidCreds(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::CheckValidCredsRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::CheckValidCredsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetDataSource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetDataSource() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetDataSource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDataSource(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::GetDataSourceRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::DataSource* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDataSource(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListDataSources : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListDataSources() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ListDataSources() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDataSources(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::ListDataSourcesRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::ListDataSourcesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListDataSources(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateTransferConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateTransferConfig() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_CreateTransferConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTransferConfig(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::CreateTransferConfigRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::TransferConfig* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateTransferConfig(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateTransferConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateTransferConfig() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_UpdateTransferConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateTransferConfig(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::UpdateTransferConfigRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::TransferConfig* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateTransferConfig(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteTransferConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteTransferConfig() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_DeleteTransferConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteTransferConfig(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::DeleteTransferConfigRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteTransferConfig(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTransferConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetTransferConfig() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_GetTransferConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransferConfig(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::GetTransferConfigRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::TransferConfig* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTransferConfig(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListTransferConfigs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListTransferConfigs() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_ListTransferConfigs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTransferConfigs(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::ListTransferConfigsRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::ListTransferConfigsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListTransferConfigs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ScheduleTransferRuns : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ScheduleTransferRuns() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_ScheduleTransferRuns() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScheduleTransferRuns(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::ScheduleTransferRunsRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::ScheduleTransferRunsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestScheduleTransferRuns(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StartManualTransferRuns : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StartManualTransferRuns() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_StartManualTransferRuns() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartManualTransferRuns(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartManualTransferRuns(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTransferRun : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetTransferRun() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_GetTransferRun() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransferRun(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::GetTransferRunRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::TransferRun* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTransferRun(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteTransferRun : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteTransferRun() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_DeleteTransferRun() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteTransferRun(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::DeleteTransferRunRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteTransferRun(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListTransferRuns : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListTransferRuns() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_ListTransferRuns() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTransferRuns(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListTransferRuns(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListTransferLogs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListTransferLogs() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_ListTransferLogs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTransferLogs(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::ListTransferLogsRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::ListTransferLogsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListTransferLogs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CheckValidCreds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CheckValidCreds() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_CheckValidCreds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckValidCreds(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::CheckValidCredsRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::CheckValidCredsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckValidCreds(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetDataSource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetDataSource() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetDataSource(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetDataSource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDataSource(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::GetDataSourceRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::DataSource* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetDataSource(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetDataSource(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListDataSources : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ListDataSources() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListDataSources(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ListDataSources() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDataSources(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::ListDataSourcesRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::ListDataSourcesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListDataSources(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListDataSources(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateTransferConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateTransferConfig() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateTransferConfig(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateTransferConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTransferConfig(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::CreateTransferConfigRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::TransferConfig* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateTransferConfig(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateTransferConfig(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UpdateTransferConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UpdateTransferConfig() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateTransferConfig(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_UpdateTransferConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateTransferConfig(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::UpdateTransferConfigRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::TransferConfig* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateTransferConfig(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateTransferConfig(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteTransferConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteTransferConfig() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteTransferConfig(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteTransferConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteTransferConfig(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::DeleteTransferConfigRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteTransferConfig(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteTransferConfig(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetTransferConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetTransferConfig() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetTransferConfig(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetTransferConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransferConfig(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::GetTransferConfigRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::TransferConfig* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetTransferConfig(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetTransferConfig(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListTransferConfigs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ListTransferConfigs() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListTransferConfigs(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ListTransferConfigs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTransferConfigs(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::ListTransferConfigsRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::ListTransferConfigsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListTransferConfigs(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListTransferConfigs(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ScheduleTransferRuns : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ScheduleTransferRuns() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ScheduleTransferRuns(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ScheduleTransferRuns() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScheduleTransferRuns(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::ScheduleTransferRunsRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::ScheduleTransferRunsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ScheduleTransferRuns(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ScheduleTransferRuns(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_StartManualTransferRuns : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_StartManualTransferRuns() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StartManualTransferRuns(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_StartManualTransferRuns() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartManualTransferRuns(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* StartManualTransferRuns(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* StartManualTransferRuns(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetTransferRun : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetTransferRun() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetTransferRun(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetTransferRun() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransferRun(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::GetTransferRunRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::TransferRun* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetTransferRun(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetTransferRun(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteTransferRun : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteTransferRun() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteTransferRun(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteTransferRun() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteTransferRun(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::DeleteTransferRunRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteTransferRun(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteTransferRun(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListTransferRuns : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ListTransferRuns() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListTransferRuns(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ListTransferRuns() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTransferRuns(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListTransferRuns(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListTransferRuns(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListTransferLogs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ListTransferLogs() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListTransferLogs(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ListTransferLogs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTransferLogs(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::ListTransferLogsRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::ListTransferLogsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListTransferLogs(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListTransferLogs(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CheckValidCreds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CheckValidCreds() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CheckValidCreds(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CheckValidCreds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckValidCreds(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::CheckValidCredsRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::CheckValidCredsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CheckValidCreds(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CheckValidCreds(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetDataSource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetDataSource() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::cloud::bigquery::datatransfer::v1::GetDataSourceRequest, ::google::cloud::bigquery::datatransfer::v1::DataSource>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::cloud::bigquery::datatransfer::v1::GetDataSourceRequest, ::google::cloud::bigquery::datatransfer::v1::DataSource>* streamer) {
                       return this->StreamedGetDataSource(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetDataSource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDataSource(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::GetDataSourceRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::DataSource* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetDataSource(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::bigquery::datatransfer::v1::GetDataSourceRequest,::google::cloud::bigquery::datatransfer::v1::DataSource>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListDataSources : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListDataSources() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::cloud::bigquery::datatransfer::v1::ListDataSourcesRequest, ::google::cloud::bigquery::datatransfer::v1::ListDataSourcesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::cloud::bigquery::datatransfer::v1::ListDataSourcesRequest, ::google::cloud::bigquery::datatransfer::v1::ListDataSourcesResponse>* streamer) {
                       return this->StreamedListDataSources(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListDataSources() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListDataSources(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::ListDataSourcesRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::ListDataSourcesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListDataSources(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::bigquery::datatransfer::v1::ListDataSourcesRequest,::google::cloud::bigquery::datatransfer::v1::ListDataSourcesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateTransferConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateTransferConfig() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::cloud::bigquery::datatransfer::v1::CreateTransferConfigRequest, ::google::cloud::bigquery::datatransfer::v1::TransferConfig>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::cloud::bigquery::datatransfer::v1::CreateTransferConfigRequest, ::google::cloud::bigquery::datatransfer::v1::TransferConfig>* streamer) {
                       return this->StreamedCreateTransferConfig(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateTransferConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateTransferConfig(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::CreateTransferConfigRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::TransferConfig* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateTransferConfig(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::bigquery::datatransfer::v1::CreateTransferConfigRequest,::google::cloud::bigquery::datatransfer::v1::TransferConfig>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateTransferConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateTransferConfig() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::cloud::bigquery::datatransfer::v1::UpdateTransferConfigRequest, ::google::cloud::bigquery::datatransfer::v1::TransferConfig>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::cloud::bigquery::datatransfer::v1::UpdateTransferConfigRequest, ::google::cloud::bigquery::datatransfer::v1::TransferConfig>* streamer) {
                       return this->StreamedUpdateTransferConfig(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateTransferConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateTransferConfig(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::UpdateTransferConfigRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::TransferConfig* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateTransferConfig(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::bigquery::datatransfer::v1::UpdateTransferConfigRequest,::google::cloud::bigquery::datatransfer::v1::TransferConfig>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteTransferConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteTransferConfig() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::cloud::bigquery::datatransfer::v1::DeleteTransferConfigRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::cloud::bigquery::datatransfer::v1::DeleteTransferConfigRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedDeleteTransferConfig(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteTransferConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteTransferConfig(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::DeleteTransferConfigRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteTransferConfig(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::bigquery::datatransfer::v1::DeleteTransferConfigRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTransferConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetTransferConfig() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::cloud::bigquery::datatransfer::v1::GetTransferConfigRequest, ::google::cloud::bigquery::datatransfer::v1::TransferConfig>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::cloud::bigquery::datatransfer::v1::GetTransferConfigRequest, ::google::cloud::bigquery::datatransfer::v1::TransferConfig>* streamer) {
                       return this->StreamedGetTransferConfig(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetTransferConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTransferConfig(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::GetTransferConfigRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::TransferConfig* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTransferConfig(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::bigquery::datatransfer::v1::GetTransferConfigRequest,::google::cloud::bigquery::datatransfer::v1::TransferConfig>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListTransferConfigs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListTransferConfigs() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::cloud::bigquery::datatransfer::v1::ListTransferConfigsRequest, ::google::cloud::bigquery::datatransfer::v1::ListTransferConfigsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::cloud::bigquery::datatransfer::v1::ListTransferConfigsRequest, ::google::cloud::bigquery::datatransfer::v1::ListTransferConfigsResponse>* streamer) {
                       return this->StreamedListTransferConfigs(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListTransferConfigs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListTransferConfigs(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::ListTransferConfigsRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::ListTransferConfigsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListTransferConfigs(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::bigquery::datatransfer::v1::ListTransferConfigsRequest,::google::cloud::bigquery::datatransfer::v1::ListTransferConfigsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ScheduleTransferRuns : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ScheduleTransferRuns() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::cloud::bigquery::datatransfer::v1::ScheduleTransferRunsRequest, ::google::cloud::bigquery::datatransfer::v1::ScheduleTransferRunsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::cloud::bigquery::datatransfer::v1::ScheduleTransferRunsRequest, ::google::cloud::bigquery::datatransfer::v1::ScheduleTransferRunsResponse>* streamer) {
                       return this->StreamedScheduleTransferRuns(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ScheduleTransferRuns() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ScheduleTransferRuns(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::ScheduleTransferRunsRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::ScheduleTransferRunsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedScheduleTransferRuns(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::bigquery::datatransfer::v1::ScheduleTransferRunsRequest,::google::cloud::bigquery::datatransfer::v1::ScheduleTransferRunsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StartManualTransferRuns : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StartManualTransferRuns() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsRequest, ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsRequest, ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsResponse>* streamer) {
                       return this->StreamedStartManualTransferRuns(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_StartManualTransferRuns() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StartManualTransferRuns(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStartManualTransferRuns(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsRequest,::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTransferRun : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetTransferRun() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::cloud::bigquery::datatransfer::v1::GetTransferRunRequest, ::google::cloud::bigquery::datatransfer::v1::TransferRun>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::cloud::bigquery::datatransfer::v1::GetTransferRunRequest, ::google::cloud::bigquery::datatransfer::v1::TransferRun>* streamer) {
                       return this->StreamedGetTransferRun(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetTransferRun() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTransferRun(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::GetTransferRunRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::TransferRun* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTransferRun(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::bigquery::datatransfer::v1::GetTransferRunRequest,::google::cloud::bigquery::datatransfer::v1::TransferRun>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteTransferRun : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteTransferRun() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::cloud::bigquery::datatransfer::v1::DeleteTransferRunRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::cloud::bigquery::datatransfer::v1::DeleteTransferRunRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedDeleteTransferRun(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteTransferRun() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteTransferRun(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::DeleteTransferRunRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteTransferRun(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::bigquery::datatransfer::v1::DeleteTransferRunRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListTransferRuns : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListTransferRuns() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsRequest, ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsRequest, ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsResponse>* streamer) {
                       return this->StreamedListTransferRuns(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListTransferRuns() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListTransferRuns(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListTransferRuns(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsRequest,::google::cloud::bigquery::datatransfer::v1::ListTransferRunsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListTransferLogs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListTransferLogs() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::cloud::bigquery::datatransfer::v1::ListTransferLogsRequest, ::google::cloud::bigquery::datatransfer::v1::ListTransferLogsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::cloud::bigquery::datatransfer::v1::ListTransferLogsRequest, ::google::cloud::bigquery::datatransfer::v1::ListTransferLogsResponse>* streamer) {
                       return this->StreamedListTransferLogs(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListTransferLogs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListTransferLogs(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::ListTransferLogsRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::ListTransferLogsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListTransferLogs(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::bigquery::datatransfer::v1::ListTransferLogsRequest,::google::cloud::bigquery::datatransfer::v1::ListTransferLogsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CheckValidCreds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CheckValidCreds() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::cloud::bigquery::datatransfer::v1::CheckValidCredsRequest, ::google::cloud::bigquery::datatransfer::v1::CheckValidCredsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::cloud::bigquery::datatransfer::v1::CheckValidCredsRequest, ::google::cloud::bigquery::datatransfer::v1::CheckValidCredsResponse>* streamer) {
                       return this->StreamedCheckValidCreds(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CheckValidCreds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CheckValidCreds(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datatransfer::v1::CheckValidCredsRequest* /*request*/, ::google::cloud::bigquery::datatransfer::v1::CheckValidCredsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCheckValidCreds(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::bigquery::datatransfer::v1::CheckValidCredsRequest,::google::cloud::bigquery::datatransfer::v1::CheckValidCredsResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetDataSource<WithStreamedUnaryMethod_ListDataSources<WithStreamedUnaryMethod_CreateTransferConfig<WithStreamedUnaryMethod_UpdateTransferConfig<WithStreamedUnaryMethod_DeleteTransferConfig<WithStreamedUnaryMethod_GetTransferConfig<WithStreamedUnaryMethod_ListTransferConfigs<WithStreamedUnaryMethod_ScheduleTransferRuns<WithStreamedUnaryMethod_StartManualTransferRuns<WithStreamedUnaryMethod_GetTransferRun<WithStreamedUnaryMethod_DeleteTransferRun<WithStreamedUnaryMethod_ListTransferRuns<WithStreamedUnaryMethod_ListTransferLogs<WithStreamedUnaryMethod_CheckValidCreds<Service > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetDataSource<WithStreamedUnaryMethod_ListDataSources<WithStreamedUnaryMethod_CreateTransferConfig<WithStreamedUnaryMethod_UpdateTransferConfig<WithStreamedUnaryMethod_DeleteTransferConfig<WithStreamedUnaryMethod_GetTransferConfig<WithStreamedUnaryMethod_ListTransferConfigs<WithStreamedUnaryMethod_ScheduleTransferRuns<WithStreamedUnaryMethod_StartManualTransferRuns<WithStreamedUnaryMethod_GetTransferRun<WithStreamedUnaryMethod_DeleteTransferRun<WithStreamedUnaryMethod_ListTransferRuns<WithStreamedUnaryMethod_ListTransferLogs<WithStreamedUnaryMethod_CheckValidCreds<Service > > > > > > > > > > > > > > StreamedService;
};

}  // namespace v1
}  // namespace datatransfer
}  // namespace bigquery
}  // namespace cloud
}  // namespace google


#endif  // GRPC_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2fdatatransfer_2eproto__INCLUDED
