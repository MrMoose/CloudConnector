// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/bigquery/datatransfer/v1/datatransfer.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2fdatatransfer_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2fdatatransfer_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include "google/api/field_behavior.pb.h"
#include "google/api/resource.pb.h"
#include "google/cloud/bigquery/datatransfer/v1/transfer.pb.h"
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/field_mask.pb.h>
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2fdatatransfer_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2fdatatransfer_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2fdatatransfer_2eproto;
namespace google {
namespace cloud {
namespace bigquery {
namespace datatransfer {
namespace v1 {
class CheckValidCredsRequest;
struct CheckValidCredsRequestDefaultTypeInternal;
extern CheckValidCredsRequestDefaultTypeInternal _CheckValidCredsRequest_default_instance_;
class CheckValidCredsResponse;
struct CheckValidCredsResponseDefaultTypeInternal;
extern CheckValidCredsResponseDefaultTypeInternal _CheckValidCredsResponse_default_instance_;
class CreateTransferConfigRequest;
struct CreateTransferConfigRequestDefaultTypeInternal;
extern CreateTransferConfigRequestDefaultTypeInternal _CreateTransferConfigRequest_default_instance_;
class DataSource;
struct DataSourceDefaultTypeInternal;
extern DataSourceDefaultTypeInternal _DataSource_default_instance_;
class DataSourceParameter;
struct DataSourceParameterDefaultTypeInternal;
extern DataSourceParameterDefaultTypeInternal _DataSourceParameter_default_instance_;
class DeleteTransferConfigRequest;
struct DeleteTransferConfigRequestDefaultTypeInternal;
extern DeleteTransferConfigRequestDefaultTypeInternal _DeleteTransferConfigRequest_default_instance_;
class DeleteTransferRunRequest;
struct DeleteTransferRunRequestDefaultTypeInternal;
extern DeleteTransferRunRequestDefaultTypeInternal _DeleteTransferRunRequest_default_instance_;
class EnrollDataSourcesRequest;
struct EnrollDataSourcesRequestDefaultTypeInternal;
extern EnrollDataSourcesRequestDefaultTypeInternal _EnrollDataSourcesRequest_default_instance_;
class GetDataSourceRequest;
struct GetDataSourceRequestDefaultTypeInternal;
extern GetDataSourceRequestDefaultTypeInternal _GetDataSourceRequest_default_instance_;
class GetTransferConfigRequest;
struct GetTransferConfigRequestDefaultTypeInternal;
extern GetTransferConfigRequestDefaultTypeInternal _GetTransferConfigRequest_default_instance_;
class GetTransferRunRequest;
struct GetTransferRunRequestDefaultTypeInternal;
extern GetTransferRunRequestDefaultTypeInternal _GetTransferRunRequest_default_instance_;
class ListDataSourcesRequest;
struct ListDataSourcesRequestDefaultTypeInternal;
extern ListDataSourcesRequestDefaultTypeInternal _ListDataSourcesRequest_default_instance_;
class ListDataSourcesResponse;
struct ListDataSourcesResponseDefaultTypeInternal;
extern ListDataSourcesResponseDefaultTypeInternal _ListDataSourcesResponse_default_instance_;
class ListTransferConfigsRequest;
struct ListTransferConfigsRequestDefaultTypeInternal;
extern ListTransferConfigsRequestDefaultTypeInternal _ListTransferConfigsRequest_default_instance_;
class ListTransferConfigsResponse;
struct ListTransferConfigsResponseDefaultTypeInternal;
extern ListTransferConfigsResponseDefaultTypeInternal _ListTransferConfigsResponse_default_instance_;
class ListTransferLogsRequest;
struct ListTransferLogsRequestDefaultTypeInternal;
extern ListTransferLogsRequestDefaultTypeInternal _ListTransferLogsRequest_default_instance_;
class ListTransferLogsResponse;
struct ListTransferLogsResponseDefaultTypeInternal;
extern ListTransferLogsResponseDefaultTypeInternal _ListTransferLogsResponse_default_instance_;
class ListTransferRunsRequest;
struct ListTransferRunsRequestDefaultTypeInternal;
extern ListTransferRunsRequestDefaultTypeInternal _ListTransferRunsRequest_default_instance_;
class ListTransferRunsResponse;
struct ListTransferRunsResponseDefaultTypeInternal;
extern ListTransferRunsResponseDefaultTypeInternal _ListTransferRunsResponse_default_instance_;
class ScheduleTransferRunsRequest;
struct ScheduleTransferRunsRequestDefaultTypeInternal;
extern ScheduleTransferRunsRequestDefaultTypeInternal _ScheduleTransferRunsRequest_default_instance_;
class ScheduleTransferRunsResponse;
struct ScheduleTransferRunsResponseDefaultTypeInternal;
extern ScheduleTransferRunsResponseDefaultTypeInternal _ScheduleTransferRunsResponse_default_instance_;
class StartManualTransferRunsRequest;
struct StartManualTransferRunsRequestDefaultTypeInternal;
extern StartManualTransferRunsRequestDefaultTypeInternal _StartManualTransferRunsRequest_default_instance_;
class StartManualTransferRunsRequest_TimeRange;
struct StartManualTransferRunsRequest_TimeRangeDefaultTypeInternal;
extern StartManualTransferRunsRequest_TimeRangeDefaultTypeInternal _StartManualTransferRunsRequest_TimeRange_default_instance_;
class StartManualTransferRunsResponse;
struct StartManualTransferRunsResponseDefaultTypeInternal;
extern StartManualTransferRunsResponseDefaultTypeInternal _StartManualTransferRunsResponse_default_instance_;
class UpdateTransferConfigRequest;
struct UpdateTransferConfigRequestDefaultTypeInternal;
extern UpdateTransferConfigRequestDefaultTypeInternal _UpdateTransferConfigRequest_default_instance_;
}  // namespace v1
}  // namespace datatransfer
}  // namespace bigquery
}  // namespace cloud
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::cloud::bigquery::datatransfer::v1::CheckValidCredsRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::datatransfer::v1::CheckValidCredsRequest>(Arena*);
template<> ::google::cloud::bigquery::datatransfer::v1::CheckValidCredsResponse* Arena::CreateMaybeMessage<::google::cloud::bigquery::datatransfer::v1::CheckValidCredsResponse>(Arena*);
template<> ::google::cloud::bigquery::datatransfer::v1::CreateTransferConfigRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::datatransfer::v1::CreateTransferConfigRequest>(Arena*);
template<> ::google::cloud::bigquery::datatransfer::v1::DataSource* Arena::CreateMaybeMessage<::google::cloud::bigquery::datatransfer::v1::DataSource>(Arena*);
template<> ::google::cloud::bigquery::datatransfer::v1::DataSourceParameter* Arena::CreateMaybeMessage<::google::cloud::bigquery::datatransfer::v1::DataSourceParameter>(Arena*);
template<> ::google::cloud::bigquery::datatransfer::v1::DeleteTransferConfigRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::datatransfer::v1::DeleteTransferConfigRequest>(Arena*);
template<> ::google::cloud::bigquery::datatransfer::v1::DeleteTransferRunRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::datatransfer::v1::DeleteTransferRunRequest>(Arena*);
template<> ::google::cloud::bigquery::datatransfer::v1::EnrollDataSourcesRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::datatransfer::v1::EnrollDataSourcesRequest>(Arena*);
template<> ::google::cloud::bigquery::datatransfer::v1::GetDataSourceRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::datatransfer::v1::GetDataSourceRequest>(Arena*);
template<> ::google::cloud::bigquery::datatransfer::v1::GetTransferConfigRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::datatransfer::v1::GetTransferConfigRequest>(Arena*);
template<> ::google::cloud::bigquery::datatransfer::v1::GetTransferRunRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::datatransfer::v1::GetTransferRunRequest>(Arena*);
template<> ::google::cloud::bigquery::datatransfer::v1::ListDataSourcesRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::datatransfer::v1::ListDataSourcesRequest>(Arena*);
template<> ::google::cloud::bigquery::datatransfer::v1::ListDataSourcesResponse* Arena::CreateMaybeMessage<::google::cloud::bigquery::datatransfer::v1::ListDataSourcesResponse>(Arena*);
template<> ::google::cloud::bigquery::datatransfer::v1::ListTransferConfigsRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::datatransfer::v1::ListTransferConfigsRequest>(Arena*);
template<> ::google::cloud::bigquery::datatransfer::v1::ListTransferConfigsResponse* Arena::CreateMaybeMessage<::google::cloud::bigquery::datatransfer::v1::ListTransferConfigsResponse>(Arena*);
template<> ::google::cloud::bigquery::datatransfer::v1::ListTransferLogsRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::datatransfer::v1::ListTransferLogsRequest>(Arena*);
template<> ::google::cloud::bigquery::datatransfer::v1::ListTransferLogsResponse* Arena::CreateMaybeMessage<::google::cloud::bigquery::datatransfer::v1::ListTransferLogsResponse>(Arena*);
template<> ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::datatransfer::v1::ListTransferRunsRequest>(Arena*);
template<> ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsResponse* Arena::CreateMaybeMessage<::google::cloud::bigquery::datatransfer::v1::ListTransferRunsResponse>(Arena*);
template<> ::google::cloud::bigquery::datatransfer::v1::ScheduleTransferRunsRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::datatransfer::v1::ScheduleTransferRunsRequest>(Arena*);
template<> ::google::cloud::bigquery::datatransfer::v1::ScheduleTransferRunsResponse* Arena::CreateMaybeMessage<::google::cloud::bigquery::datatransfer::v1::ScheduleTransferRunsResponse>(Arena*);
template<> ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsRequest>(Arena*);
template<> ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsRequest_TimeRange* Arena::CreateMaybeMessage<::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsRequest_TimeRange>(Arena*);
template<> ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsResponse* Arena::CreateMaybeMessage<::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsResponse>(Arena*);
template<> ::google::cloud::bigquery::datatransfer::v1::UpdateTransferConfigRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::datatransfer::v1::UpdateTransferConfigRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace cloud {
namespace bigquery {
namespace datatransfer {
namespace v1 {

enum DataSourceParameter_Type : int {
  DataSourceParameter_Type_TYPE_UNSPECIFIED = 0,
  DataSourceParameter_Type_STRING = 1,
  DataSourceParameter_Type_INTEGER = 2,
  DataSourceParameter_Type_DOUBLE = 3,
  DataSourceParameter_Type_BOOLEAN = 4,
  DataSourceParameter_Type_RECORD = 5,
  DataSourceParameter_Type_PLUS_PAGE = 6,
  DataSourceParameter_Type_DataSourceParameter_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  DataSourceParameter_Type_DataSourceParameter_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool DataSourceParameter_Type_IsValid(int value);
constexpr DataSourceParameter_Type DataSourceParameter_Type_Type_MIN = DataSourceParameter_Type_TYPE_UNSPECIFIED;
constexpr DataSourceParameter_Type DataSourceParameter_Type_Type_MAX = DataSourceParameter_Type_PLUS_PAGE;
constexpr int DataSourceParameter_Type_Type_ARRAYSIZE = DataSourceParameter_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataSourceParameter_Type_descriptor();
template<typename T>
inline const std::string& DataSourceParameter_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DataSourceParameter_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DataSourceParameter_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DataSourceParameter_Type_descriptor(), enum_t_value);
}
inline bool DataSourceParameter_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DataSourceParameter_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DataSourceParameter_Type>(
    DataSourceParameter_Type_descriptor(), name, value);
}
enum DataSource_AuthorizationType : int {
  DataSource_AuthorizationType_AUTHORIZATION_TYPE_UNSPECIFIED = 0,
  DataSource_AuthorizationType_AUTHORIZATION_CODE = 1,
  DataSource_AuthorizationType_GOOGLE_PLUS_AUTHORIZATION_CODE = 2,
  DataSource_AuthorizationType_FIRST_PARTY_OAUTH = 3,
  DataSource_AuthorizationType_DataSource_AuthorizationType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  DataSource_AuthorizationType_DataSource_AuthorizationType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool DataSource_AuthorizationType_IsValid(int value);
constexpr DataSource_AuthorizationType DataSource_AuthorizationType_AuthorizationType_MIN = DataSource_AuthorizationType_AUTHORIZATION_TYPE_UNSPECIFIED;
constexpr DataSource_AuthorizationType DataSource_AuthorizationType_AuthorizationType_MAX = DataSource_AuthorizationType_FIRST_PARTY_OAUTH;
constexpr int DataSource_AuthorizationType_AuthorizationType_ARRAYSIZE = DataSource_AuthorizationType_AuthorizationType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataSource_AuthorizationType_descriptor();
template<typename T>
inline const std::string& DataSource_AuthorizationType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DataSource_AuthorizationType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DataSource_AuthorizationType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DataSource_AuthorizationType_descriptor(), enum_t_value);
}
inline bool DataSource_AuthorizationType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DataSource_AuthorizationType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DataSource_AuthorizationType>(
    DataSource_AuthorizationType_descriptor(), name, value);
}
enum DataSource_DataRefreshType : int {
  DataSource_DataRefreshType_DATA_REFRESH_TYPE_UNSPECIFIED = 0,
  DataSource_DataRefreshType_SLIDING_WINDOW = 1,
  DataSource_DataRefreshType_CUSTOM_SLIDING_WINDOW = 2,
  DataSource_DataRefreshType_DataSource_DataRefreshType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  DataSource_DataRefreshType_DataSource_DataRefreshType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool DataSource_DataRefreshType_IsValid(int value);
constexpr DataSource_DataRefreshType DataSource_DataRefreshType_DataRefreshType_MIN = DataSource_DataRefreshType_DATA_REFRESH_TYPE_UNSPECIFIED;
constexpr DataSource_DataRefreshType DataSource_DataRefreshType_DataRefreshType_MAX = DataSource_DataRefreshType_CUSTOM_SLIDING_WINDOW;
constexpr int DataSource_DataRefreshType_DataRefreshType_ARRAYSIZE = DataSource_DataRefreshType_DataRefreshType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataSource_DataRefreshType_descriptor();
template<typename T>
inline const std::string& DataSource_DataRefreshType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DataSource_DataRefreshType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DataSource_DataRefreshType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DataSource_DataRefreshType_descriptor(), enum_t_value);
}
inline bool DataSource_DataRefreshType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DataSource_DataRefreshType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DataSource_DataRefreshType>(
    DataSource_DataRefreshType_descriptor(), name, value);
}
enum ListTransferRunsRequest_RunAttempt : int {
  ListTransferRunsRequest_RunAttempt_RUN_ATTEMPT_UNSPECIFIED = 0,
  ListTransferRunsRequest_RunAttempt_LATEST = 1,
  ListTransferRunsRequest_RunAttempt_ListTransferRunsRequest_RunAttempt_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ListTransferRunsRequest_RunAttempt_ListTransferRunsRequest_RunAttempt_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ListTransferRunsRequest_RunAttempt_IsValid(int value);
constexpr ListTransferRunsRequest_RunAttempt ListTransferRunsRequest_RunAttempt_RunAttempt_MIN = ListTransferRunsRequest_RunAttempt_RUN_ATTEMPT_UNSPECIFIED;
constexpr ListTransferRunsRequest_RunAttempt ListTransferRunsRequest_RunAttempt_RunAttempt_MAX = ListTransferRunsRequest_RunAttempt_LATEST;
constexpr int ListTransferRunsRequest_RunAttempt_RunAttempt_ARRAYSIZE = ListTransferRunsRequest_RunAttempt_RunAttempt_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ListTransferRunsRequest_RunAttempt_descriptor();
template<typename T>
inline const std::string& ListTransferRunsRequest_RunAttempt_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ListTransferRunsRequest_RunAttempt>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ListTransferRunsRequest_RunAttempt_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ListTransferRunsRequest_RunAttempt_descriptor(), enum_t_value);
}
inline bool ListTransferRunsRequest_RunAttempt_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ListTransferRunsRequest_RunAttempt* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ListTransferRunsRequest_RunAttempt>(
    ListTransferRunsRequest_RunAttempt_descriptor(), name, value);
}
// ===================================================================

class DataSourceParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.datatransfer.v1.DataSourceParameter) */ {
 public:
  inline DataSourceParameter() : DataSourceParameter(nullptr) {}
  ~DataSourceParameter() override;
  explicit PROTOBUF_CONSTEXPR DataSourceParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DataSourceParameter(const DataSourceParameter& from);
  DataSourceParameter(DataSourceParameter&& from) noexcept
    : DataSourceParameter() {
    *this = ::std::move(from);
  }

  inline DataSourceParameter& operator=(const DataSourceParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataSourceParameter& operator=(DataSourceParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DataSourceParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const DataSourceParameter* internal_default_instance() {
    return reinterpret_cast<const DataSourceParameter*>(
               &_DataSourceParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DataSourceParameter& a, DataSourceParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(DataSourceParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataSourceParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DataSourceParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DataSourceParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DataSourceParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DataSourceParameter& from) {
    DataSourceParameter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataSourceParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.datatransfer.v1.DataSourceParameter";
  }
  protected:
  explicit DataSourceParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DataSourceParameter_Type Type;
  static constexpr Type TYPE_UNSPECIFIED =
    DataSourceParameter_Type_TYPE_UNSPECIFIED;
  static constexpr Type STRING =
    DataSourceParameter_Type_STRING;
  static constexpr Type INTEGER =
    DataSourceParameter_Type_INTEGER;
  static constexpr Type DOUBLE =
    DataSourceParameter_Type_DOUBLE;
  static constexpr Type BOOLEAN =
    DataSourceParameter_Type_BOOLEAN;
  static constexpr Type RECORD =
    DataSourceParameter_Type_RECORD;
  static constexpr Type PLUS_PAGE =
    DataSourceParameter_Type_PLUS_PAGE;
  static inline bool Type_IsValid(int value) {
    return DataSourceParameter_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    DataSourceParameter_Type_Type_MIN;
  static constexpr Type Type_MAX =
    DataSourceParameter_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    DataSourceParameter_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return DataSourceParameter_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return DataSourceParameter_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return DataSourceParameter_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAllowedValuesFieldNumber = 8,
    kFieldsFieldNumber = 11,
    kParamIdFieldNumber = 1,
    kDisplayNameFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kValidationRegexFieldNumber = 7,
    kValidationDescriptionFieldNumber = 12,
    kValidationHelpUrlFieldNumber = 13,
    kMinValueFieldNumber = 9,
    kMaxValueFieldNumber = 10,
    kTypeFieldNumber = 4,
    kRequiredFieldNumber = 5,
    kRepeatedFieldNumber = 6,
    kImmutableFieldNumber = 14,
    kRecurseFieldNumber = 15,
    kDeprecatedFieldNumber = 20,
  };
  // repeated string allowed_values = 8;
  int allowed_values_size() const;
  private:
  int _internal_allowed_values_size() const;
  public:
  void clear_allowed_values();
  const std::string& allowed_values(int index) const;
  std::string* mutable_allowed_values(int index);
  void set_allowed_values(int index, const std::string& value);
  void set_allowed_values(int index, std::string&& value);
  void set_allowed_values(int index, const char* value);
  void set_allowed_values(int index, const char* value, size_t size);
  std::string* add_allowed_values();
  void add_allowed_values(const std::string& value);
  void add_allowed_values(std::string&& value);
  void add_allowed_values(const char* value);
  void add_allowed_values(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& allowed_values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_allowed_values();
  private:
  const std::string& _internal_allowed_values(int index) const;
  std::string* _internal_add_allowed_values();
  public:

  // repeated .google.cloud.bigquery.datatransfer.v1.DataSourceParameter fields = 11;
  int fields_size() const;
  private:
  int _internal_fields_size() const;
  public:
  void clear_fields();
  ::google::cloud::bigquery::datatransfer::v1::DataSourceParameter* mutable_fields(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::datatransfer::v1::DataSourceParameter >*
      mutable_fields();
  private:
  const ::google::cloud::bigquery::datatransfer::v1::DataSourceParameter& _internal_fields(int index) const;
  ::google::cloud::bigquery::datatransfer::v1::DataSourceParameter* _internal_add_fields();
  public:
  const ::google::cloud::bigquery::datatransfer::v1::DataSourceParameter& fields(int index) const;
  ::google::cloud::bigquery::datatransfer::v1::DataSourceParameter* add_fields();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::datatransfer::v1::DataSourceParameter >&
      fields() const;

  // string param_id = 1;
  void clear_param_id();
  const std::string& param_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_param_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_param_id();
  PROTOBUF_NODISCARD std::string* release_param_id();
  void set_allocated_param_id(std::string* param_id);
  private:
  const std::string& _internal_param_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_param_id(const std::string& value);
  std::string* _internal_mutable_param_id();
  public:

  // string display_name = 2;
  void clear_display_name();
  const std::string& display_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_display_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_display_name();
  PROTOBUF_NODISCARD std::string* release_display_name();
  void set_allocated_display_name(std::string* display_name);
  private:
  const std::string& _internal_display_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_display_name(const std::string& value);
  std::string* _internal_mutable_display_name();
  public:

  // string description = 3;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string validation_regex = 7;
  void clear_validation_regex();
  const std::string& validation_regex() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_validation_regex(ArgT0&& arg0, ArgT... args);
  std::string* mutable_validation_regex();
  PROTOBUF_NODISCARD std::string* release_validation_regex();
  void set_allocated_validation_regex(std::string* validation_regex);
  private:
  const std::string& _internal_validation_regex() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_validation_regex(const std::string& value);
  std::string* _internal_mutable_validation_regex();
  public:

  // string validation_description = 12;
  void clear_validation_description();
  const std::string& validation_description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_validation_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_validation_description();
  PROTOBUF_NODISCARD std::string* release_validation_description();
  void set_allocated_validation_description(std::string* validation_description);
  private:
  const std::string& _internal_validation_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_validation_description(const std::string& value);
  std::string* _internal_mutable_validation_description();
  public:

  // string validation_help_url = 13;
  void clear_validation_help_url();
  const std::string& validation_help_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_validation_help_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_validation_help_url();
  PROTOBUF_NODISCARD std::string* release_validation_help_url();
  void set_allocated_validation_help_url(std::string* validation_help_url);
  private:
  const std::string& _internal_validation_help_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_validation_help_url(const std::string& value);
  std::string* _internal_mutable_validation_help_url();
  public:

  // .google.protobuf.DoubleValue min_value = 9;
  bool has_min_value() const;
  private:
  bool _internal_has_min_value() const;
  public:
  void clear_min_value();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& min_value() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_min_value();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_min_value();
  void set_allocated_min_value(::PROTOBUF_NAMESPACE_ID::DoubleValue* min_value);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_min_value() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_min_value();
  public:
  void unsafe_arena_set_allocated_min_value(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* min_value);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_min_value();

  // .google.protobuf.DoubleValue max_value = 10;
  bool has_max_value() const;
  private:
  bool _internal_has_max_value() const;
  public:
  void clear_max_value();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& max_value() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_max_value();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_max_value();
  void set_allocated_max_value(::PROTOBUF_NAMESPACE_ID::DoubleValue* max_value);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_max_value() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_max_value();
  public:
  void unsafe_arena_set_allocated_max_value(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_value);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_max_value();

  // .google.cloud.bigquery.datatransfer.v1.DataSourceParameter.Type type = 4;
  void clear_type();
  ::google::cloud::bigquery::datatransfer::v1::DataSourceParameter_Type type() const;
  void set_type(::google::cloud::bigquery::datatransfer::v1::DataSourceParameter_Type value);
  private:
  ::google::cloud::bigquery::datatransfer::v1::DataSourceParameter_Type _internal_type() const;
  void _internal_set_type(::google::cloud::bigquery::datatransfer::v1::DataSourceParameter_Type value);
  public:

  // bool required = 5;
  void clear_required();
  bool required() const;
  void set_required(bool value);
  private:
  bool _internal_required() const;
  void _internal_set_required(bool value);
  public:

  // bool repeated = 6;
  void clear_repeated();
  bool repeated() const;
  void set_repeated(bool value);
  private:
  bool _internal_repeated() const;
  void _internal_set_repeated(bool value);
  public:

  // bool immutable = 14;
  void clear_immutable();
  bool immutable() const;
  void set_immutable(bool value);
  private:
  bool _internal_immutable() const;
  void _internal_set_immutable(bool value);
  public:

  // bool recurse = 15;
  void clear_recurse();
  bool recurse() const;
  void set_recurse(bool value);
  private:
  bool _internal_recurse() const;
  void _internal_set_recurse(bool value);
  public:

  // bool deprecated = 20;
  void clear_deprecated();
  bool deprecated() const;
  void set_deprecated(bool value);
  private:
  bool _internal_deprecated() const;
  void _internal_set_deprecated(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.datatransfer.v1.DataSourceParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> allowed_values_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::datatransfer::v1::DataSourceParameter > fields_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr param_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr validation_regex_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr validation_description_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr validation_help_url_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* min_value_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_value_;
    int type_;
    bool required_;
    bool repeated_;
    bool immutable_;
    bool recurse_;
    bool deprecated_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2fdatatransfer_2eproto;
};
// -------------------------------------------------------------------

class DataSource final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.datatransfer.v1.DataSource) */ {
 public:
  inline DataSource() : DataSource(nullptr) {}
  ~DataSource() override;
  explicit PROTOBUF_CONSTEXPR DataSource(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DataSource(const DataSource& from);
  DataSource(DataSource&& from) noexcept
    : DataSource() {
    *this = ::std::move(from);
  }

  inline DataSource& operator=(const DataSource& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataSource& operator=(DataSource&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DataSource& default_instance() {
    return *internal_default_instance();
  }
  static inline const DataSource* internal_default_instance() {
    return reinterpret_cast<const DataSource*>(
               &_DataSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DataSource& a, DataSource& b) {
    a.Swap(&b);
  }
  inline void Swap(DataSource* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataSource* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DataSource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DataSource>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DataSource& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DataSource& from) {
    DataSource::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataSource* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.datatransfer.v1.DataSource";
  }
  protected:
  explicit DataSource(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DataSource_AuthorizationType AuthorizationType;
  static constexpr AuthorizationType AUTHORIZATION_TYPE_UNSPECIFIED =
    DataSource_AuthorizationType_AUTHORIZATION_TYPE_UNSPECIFIED;
  static constexpr AuthorizationType AUTHORIZATION_CODE =
    DataSource_AuthorizationType_AUTHORIZATION_CODE;
  static constexpr AuthorizationType GOOGLE_PLUS_AUTHORIZATION_CODE =
    DataSource_AuthorizationType_GOOGLE_PLUS_AUTHORIZATION_CODE;
  static constexpr AuthorizationType FIRST_PARTY_OAUTH =
    DataSource_AuthorizationType_FIRST_PARTY_OAUTH;
  static inline bool AuthorizationType_IsValid(int value) {
    return DataSource_AuthorizationType_IsValid(value);
  }
  static constexpr AuthorizationType AuthorizationType_MIN =
    DataSource_AuthorizationType_AuthorizationType_MIN;
  static constexpr AuthorizationType AuthorizationType_MAX =
    DataSource_AuthorizationType_AuthorizationType_MAX;
  static constexpr int AuthorizationType_ARRAYSIZE =
    DataSource_AuthorizationType_AuthorizationType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AuthorizationType_descriptor() {
    return DataSource_AuthorizationType_descriptor();
  }
  template<typename T>
  static inline const std::string& AuthorizationType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AuthorizationType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AuthorizationType_Name.");
    return DataSource_AuthorizationType_Name(enum_t_value);
  }
  static inline bool AuthorizationType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AuthorizationType* value) {
    return DataSource_AuthorizationType_Parse(name, value);
  }

  typedef DataSource_DataRefreshType DataRefreshType;
  static constexpr DataRefreshType DATA_REFRESH_TYPE_UNSPECIFIED =
    DataSource_DataRefreshType_DATA_REFRESH_TYPE_UNSPECIFIED;
  static constexpr DataRefreshType SLIDING_WINDOW =
    DataSource_DataRefreshType_SLIDING_WINDOW;
  static constexpr DataRefreshType CUSTOM_SLIDING_WINDOW =
    DataSource_DataRefreshType_CUSTOM_SLIDING_WINDOW;
  static inline bool DataRefreshType_IsValid(int value) {
    return DataSource_DataRefreshType_IsValid(value);
  }
  static constexpr DataRefreshType DataRefreshType_MIN =
    DataSource_DataRefreshType_DataRefreshType_MIN;
  static constexpr DataRefreshType DataRefreshType_MAX =
    DataSource_DataRefreshType_DataRefreshType_MAX;
  static constexpr int DataRefreshType_ARRAYSIZE =
    DataSource_DataRefreshType_DataRefreshType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DataRefreshType_descriptor() {
    return DataSource_DataRefreshType_descriptor();
  }
  template<typename T>
  static inline const std::string& DataRefreshType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DataRefreshType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DataRefreshType_Name.");
    return DataSource_DataRefreshType_Name(enum_t_value);
  }
  static inline bool DataRefreshType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DataRefreshType* value) {
    return DataSource_DataRefreshType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kScopesFieldNumber = 6,
    kParametersFieldNumber = 12,
    kNameFieldNumber = 1,
    kDataSourceIdFieldNumber = 2,
    kDisplayNameFieldNumber = 3,
    kDescriptionFieldNumber = 4,
    kClientIdFieldNumber = 5,
    kDefaultScheduleFieldNumber = 10,
    kHelpUrlFieldNumber = 13,
    kMinimumScheduleIntervalFieldNumber = 18,
    kTransferTypeFieldNumber = 7,
    kUpdateDeadlineSecondsFieldNumber = 9,
    kSupportsMultipleTransfersFieldNumber = 8,
    kSupportsCustomScheduleFieldNumber = 11,
    kManualRunsDisabledFieldNumber = 17,
    kAuthorizationTypeFieldNumber = 14,
    kDataRefreshTypeFieldNumber = 15,
    kDefaultDataRefreshWindowDaysFieldNumber = 16,
  };
  // repeated string scopes = 6;
  int scopes_size() const;
  private:
  int _internal_scopes_size() const;
  public:
  void clear_scopes();
  const std::string& scopes(int index) const;
  std::string* mutable_scopes(int index);
  void set_scopes(int index, const std::string& value);
  void set_scopes(int index, std::string&& value);
  void set_scopes(int index, const char* value);
  void set_scopes(int index, const char* value, size_t size);
  std::string* add_scopes();
  void add_scopes(const std::string& value);
  void add_scopes(std::string&& value);
  void add_scopes(const char* value);
  void add_scopes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& scopes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_scopes();
  private:
  const std::string& _internal_scopes(int index) const;
  std::string* _internal_add_scopes();
  public:

  // repeated .google.cloud.bigquery.datatransfer.v1.DataSourceParameter parameters = 12;
  int parameters_size() const;
  private:
  int _internal_parameters_size() const;
  public:
  void clear_parameters();
  ::google::cloud::bigquery::datatransfer::v1::DataSourceParameter* mutable_parameters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::datatransfer::v1::DataSourceParameter >*
      mutable_parameters();
  private:
  const ::google::cloud::bigquery::datatransfer::v1::DataSourceParameter& _internal_parameters(int index) const;
  ::google::cloud::bigquery::datatransfer::v1::DataSourceParameter* _internal_add_parameters();
  public:
  const ::google::cloud::bigquery::datatransfer::v1::DataSourceParameter& parameters(int index) const;
  ::google::cloud::bigquery::datatransfer::v1::DataSourceParameter* add_parameters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::datatransfer::v1::DataSourceParameter >&
      parameters() const;

  // string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string data_source_id = 2;
  void clear_data_source_id();
  const std::string& data_source_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data_source_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data_source_id();
  PROTOBUF_NODISCARD std::string* release_data_source_id();
  void set_allocated_data_source_id(std::string* data_source_id);
  private:
  const std::string& _internal_data_source_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data_source_id(const std::string& value);
  std::string* _internal_mutable_data_source_id();
  public:

  // string display_name = 3;
  void clear_display_name();
  const std::string& display_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_display_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_display_name();
  PROTOBUF_NODISCARD std::string* release_display_name();
  void set_allocated_display_name(std::string* display_name);
  private:
  const std::string& _internal_display_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_display_name(const std::string& value);
  std::string* _internal_mutable_display_name();
  public:

  // string description = 4;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string client_id = 5;
  void clear_client_id();
  const std::string& client_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_client_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_client_id();
  PROTOBUF_NODISCARD std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // string default_schedule = 10;
  void clear_default_schedule();
  const std::string& default_schedule() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_default_schedule(ArgT0&& arg0, ArgT... args);
  std::string* mutable_default_schedule();
  PROTOBUF_NODISCARD std::string* release_default_schedule();
  void set_allocated_default_schedule(std::string* default_schedule);
  private:
  const std::string& _internal_default_schedule() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_default_schedule(const std::string& value);
  std::string* _internal_mutable_default_schedule();
  public:

  // string help_url = 13;
  void clear_help_url();
  const std::string& help_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_help_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_help_url();
  PROTOBUF_NODISCARD std::string* release_help_url();
  void set_allocated_help_url(std::string* help_url);
  private:
  const std::string& _internal_help_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_help_url(const std::string& value);
  std::string* _internal_mutable_help_url();
  public:

  // .google.protobuf.Duration minimum_schedule_interval = 18;
  bool has_minimum_schedule_interval() const;
  private:
  bool _internal_has_minimum_schedule_interval() const;
  public:
  void clear_minimum_schedule_interval();
  const ::PROTOBUF_NAMESPACE_ID::Duration& minimum_schedule_interval() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_minimum_schedule_interval();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_minimum_schedule_interval();
  void set_allocated_minimum_schedule_interval(::PROTOBUF_NAMESPACE_ID::Duration* minimum_schedule_interval);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_minimum_schedule_interval() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_minimum_schedule_interval();
  public:
  void unsafe_arena_set_allocated_minimum_schedule_interval(
      ::PROTOBUF_NAMESPACE_ID::Duration* minimum_schedule_interval);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_minimum_schedule_interval();

  // .google.cloud.bigquery.datatransfer.v1.TransferType transfer_type = 7 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_transfer_type();
  PROTOBUF_DEPRECATED ::google::cloud::bigquery::datatransfer::v1::TransferType transfer_type() const;
  PROTOBUF_DEPRECATED void set_transfer_type(::google::cloud::bigquery::datatransfer::v1::TransferType value);
  private:
  ::google::cloud::bigquery::datatransfer::v1::TransferType _internal_transfer_type() const;
  void _internal_set_transfer_type(::google::cloud::bigquery::datatransfer::v1::TransferType value);
  public:

  // int32 update_deadline_seconds = 9;
  void clear_update_deadline_seconds();
  int32_t update_deadline_seconds() const;
  void set_update_deadline_seconds(int32_t value);
  private:
  int32_t _internal_update_deadline_seconds() const;
  void _internal_set_update_deadline_seconds(int32_t value);
  public:

  // bool supports_multiple_transfers = 8 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_supports_multiple_transfers();
  PROTOBUF_DEPRECATED bool supports_multiple_transfers() const;
  PROTOBUF_DEPRECATED void set_supports_multiple_transfers(bool value);
  private:
  bool _internal_supports_multiple_transfers() const;
  void _internal_set_supports_multiple_transfers(bool value);
  public:

  // bool supports_custom_schedule = 11;
  void clear_supports_custom_schedule();
  bool supports_custom_schedule() const;
  void set_supports_custom_schedule(bool value);
  private:
  bool _internal_supports_custom_schedule() const;
  void _internal_set_supports_custom_schedule(bool value);
  public:

  // bool manual_runs_disabled = 17;
  void clear_manual_runs_disabled();
  bool manual_runs_disabled() const;
  void set_manual_runs_disabled(bool value);
  private:
  bool _internal_manual_runs_disabled() const;
  void _internal_set_manual_runs_disabled(bool value);
  public:

  // .google.cloud.bigquery.datatransfer.v1.DataSource.AuthorizationType authorization_type = 14;
  void clear_authorization_type();
  ::google::cloud::bigquery::datatransfer::v1::DataSource_AuthorizationType authorization_type() const;
  void set_authorization_type(::google::cloud::bigquery::datatransfer::v1::DataSource_AuthorizationType value);
  private:
  ::google::cloud::bigquery::datatransfer::v1::DataSource_AuthorizationType _internal_authorization_type() const;
  void _internal_set_authorization_type(::google::cloud::bigquery::datatransfer::v1::DataSource_AuthorizationType value);
  public:

  // .google.cloud.bigquery.datatransfer.v1.DataSource.DataRefreshType data_refresh_type = 15;
  void clear_data_refresh_type();
  ::google::cloud::bigquery::datatransfer::v1::DataSource_DataRefreshType data_refresh_type() const;
  void set_data_refresh_type(::google::cloud::bigquery::datatransfer::v1::DataSource_DataRefreshType value);
  private:
  ::google::cloud::bigquery::datatransfer::v1::DataSource_DataRefreshType _internal_data_refresh_type() const;
  void _internal_set_data_refresh_type(::google::cloud::bigquery::datatransfer::v1::DataSource_DataRefreshType value);
  public:

  // int32 default_data_refresh_window_days = 16;
  void clear_default_data_refresh_window_days();
  int32_t default_data_refresh_window_days() const;
  void set_default_data_refresh_window_days(int32_t value);
  private:
  int32_t _internal_default_data_refresh_window_days() const;
  void _internal_set_default_data_refresh_window_days(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.datatransfer.v1.DataSource)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> scopes_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::datatransfer::v1::DataSourceParameter > parameters_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_source_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr default_schedule_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr help_url_;
    ::PROTOBUF_NAMESPACE_ID::Duration* minimum_schedule_interval_;
    int transfer_type_;
    int32_t update_deadline_seconds_;
    bool supports_multiple_transfers_;
    bool supports_custom_schedule_;
    bool manual_runs_disabled_;
    int authorization_type_;
    int data_refresh_type_;
    int32_t default_data_refresh_window_days_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2fdatatransfer_2eproto;
};
// -------------------------------------------------------------------

class GetDataSourceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.datatransfer.v1.GetDataSourceRequest) */ {
 public:
  inline GetDataSourceRequest() : GetDataSourceRequest(nullptr) {}
  ~GetDataSourceRequest() override;
  explicit PROTOBUF_CONSTEXPR GetDataSourceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetDataSourceRequest(const GetDataSourceRequest& from);
  GetDataSourceRequest(GetDataSourceRequest&& from) noexcept
    : GetDataSourceRequest() {
    *this = ::std::move(from);
  }

  inline GetDataSourceRequest& operator=(const GetDataSourceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDataSourceRequest& operator=(GetDataSourceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetDataSourceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetDataSourceRequest* internal_default_instance() {
    return reinterpret_cast<const GetDataSourceRequest*>(
               &_GetDataSourceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetDataSourceRequest& a, GetDataSourceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDataSourceRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDataSourceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetDataSourceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetDataSourceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetDataSourceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetDataSourceRequest& from) {
    GetDataSourceRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDataSourceRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.datatransfer.v1.GetDataSourceRequest";
  }
  protected:
  explicit GetDataSourceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.datatransfer.v1.GetDataSourceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2fdatatransfer_2eproto;
};
// -------------------------------------------------------------------

class ListDataSourcesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.datatransfer.v1.ListDataSourcesRequest) */ {
 public:
  inline ListDataSourcesRequest() : ListDataSourcesRequest(nullptr) {}
  ~ListDataSourcesRequest() override;
  explicit PROTOBUF_CONSTEXPR ListDataSourcesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListDataSourcesRequest(const ListDataSourcesRequest& from);
  ListDataSourcesRequest(ListDataSourcesRequest&& from) noexcept
    : ListDataSourcesRequest() {
    *this = ::std::move(from);
  }

  inline ListDataSourcesRequest& operator=(const ListDataSourcesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListDataSourcesRequest& operator=(ListDataSourcesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListDataSourcesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListDataSourcesRequest* internal_default_instance() {
    return reinterpret_cast<const ListDataSourcesRequest*>(
               &_ListDataSourcesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ListDataSourcesRequest& a, ListDataSourcesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListDataSourcesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListDataSourcesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListDataSourcesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListDataSourcesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListDataSourcesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListDataSourcesRequest& from) {
    ListDataSourcesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListDataSourcesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.datatransfer.v1.ListDataSourcesRequest";
  }
  protected:
  explicit ListDataSourcesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kPageSizeFieldNumber = 4,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 3;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 4;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.datatransfer.v1.ListDataSourcesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
    int32_t page_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2fdatatransfer_2eproto;
};
// -------------------------------------------------------------------

class ListDataSourcesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.datatransfer.v1.ListDataSourcesResponse) */ {
 public:
  inline ListDataSourcesResponse() : ListDataSourcesResponse(nullptr) {}
  ~ListDataSourcesResponse() override;
  explicit PROTOBUF_CONSTEXPR ListDataSourcesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListDataSourcesResponse(const ListDataSourcesResponse& from);
  ListDataSourcesResponse(ListDataSourcesResponse&& from) noexcept
    : ListDataSourcesResponse() {
    *this = ::std::move(from);
  }

  inline ListDataSourcesResponse& operator=(const ListDataSourcesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListDataSourcesResponse& operator=(ListDataSourcesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListDataSourcesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListDataSourcesResponse* internal_default_instance() {
    return reinterpret_cast<const ListDataSourcesResponse*>(
               &_ListDataSourcesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ListDataSourcesResponse& a, ListDataSourcesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListDataSourcesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListDataSourcesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListDataSourcesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListDataSourcesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListDataSourcesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListDataSourcesResponse& from) {
    ListDataSourcesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListDataSourcesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.datatransfer.v1.ListDataSourcesResponse";
  }
  protected:
  explicit ListDataSourcesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataSourcesFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .google.cloud.bigquery.datatransfer.v1.DataSource data_sources = 1;
  int data_sources_size() const;
  private:
  int _internal_data_sources_size() const;
  public:
  void clear_data_sources();
  ::google::cloud::bigquery::datatransfer::v1::DataSource* mutable_data_sources(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::datatransfer::v1::DataSource >*
      mutable_data_sources();
  private:
  const ::google::cloud::bigquery::datatransfer::v1::DataSource& _internal_data_sources(int index) const;
  ::google::cloud::bigquery::datatransfer::v1::DataSource* _internal_add_data_sources();
  public:
  const ::google::cloud::bigquery::datatransfer::v1::DataSource& data_sources(int index) const;
  ::google::cloud::bigquery::datatransfer::v1::DataSource* add_data_sources();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::datatransfer::v1::DataSource >&
      data_sources() const;

  // string next_page_token = 2 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.datatransfer.v1.ListDataSourcesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::datatransfer::v1::DataSource > data_sources_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2fdatatransfer_2eproto;
};
// -------------------------------------------------------------------

class CreateTransferConfigRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.datatransfer.v1.CreateTransferConfigRequest) */ {
 public:
  inline CreateTransferConfigRequest() : CreateTransferConfigRequest(nullptr) {}
  ~CreateTransferConfigRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateTransferConfigRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateTransferConfigRequest(const CreateTransferConfigRequest& from);
  CreateTransferConfigRequest(CreateTransferConfigRequest&& from) noexcept
    : CreateTransferConfigRequest() {
    *this = ::std::move(from);
  }

  inline CreateTransferConfigRequest& operator=(const CreateTransferConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateTransferConfigRequest& operator=(CreateTransferConfigRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateTransferConfigRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateTransferConfigRequest* internal_default_instance() {
    return reinterpret_cast<const CreateTransferConfigRequest*>(
               &_CreateTransferConfigRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CreateTransferConfigRequest& a, CreateTransferConfigRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateTransferConfigRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateTransferConfigRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateTransferConfigRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateTransferConfigRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateTransferConfigRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateTransferConfigRequest& from) {
    CreateTransferConfigRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateTransferConfigRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.datatransfer.v1.CreateTransferConfigRequest";
  }
  protected:
  explicit CreateTransferConfigRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kAuthorizationCodeFieldNumber = 3,
    kVersionInfoFieldNumber = 5,
    kServiceAccountNameFieldNumber = 6,
    kTransferConfigFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string authorization_code = 3;
  void clear_authorization_code();
  const std::string& authorization_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_authorization_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_authorization_code();
  PROTOBUF_NODISCARD std::string* release_authorization_code();
  void set_allocated_authorization_code(std::string* authorization_code);
  private:
  const std::string& _internal_authorization_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_authorization_code(const std::string& value);
  std::string* _internal_mutable_authorization_code();
  public:

  // string version_info = 5;
  void clear_version_info();
  const std::string& version_info() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version_info(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version_info();
  PROTOBUF_NODISCARD std::string* release_version_info();
  void set_allocated_version_info(std::string* version_info);
  private:
  const std::string& _internal_version_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version_info(const std::string& value);
  std::string* _internal_mutable_version_info();
  public:

  // string service_account_name = 6;
  void clear_service_account_name();
  const std::string& service_account_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_service_account_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_service_account_name();
  PROTOBUF_NODISCARD std::string* release_service_account_name();
  void set_allocated_service_account_name(std::string* service_account_name);
  private:
  const std::string& _internal_service_account_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service_account_name(const std::string& value);
  std::string* _internal_mutable_service_account_name();
  public:

  // .google.cloud.bigquery.datatransfer.v1.TransferConfig transfer_config = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_transfer_config() const;
  private:
  bool _internal_has_transfer_config() const;
  public:
  void clear_transfer_config();
  const ::google::cloud::bigquery::datatransfer::v1::TransferConfig& transfer_config() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::datatransfer::v1::TransferConfig* release_transfer_config();
  ::google::cloud::bigquery::datatransfer::v1::TransferConfig* mutable_transfer_config();
  void set_allocated_transfer_config(::google::cloud::bigquery::datatransfer::v1::TransferConfig* transfer_config);
  private:
  const ::google::cloud::bigquery::datatransfer::v1::TransferConfig& _internal_transfer_config() const;
  ::google::cloud::bigquery::datatransfer::v1::TransferConfig* _internal_mutable_transfer_config();
  public:
  void unsafe_arena_set_allocated_transfer_config(
      ::google::cloud::bigquery::datatransfer::v1::TransferConfig* transfer_config);
  ::google::cloud::bigquery::datatransfer::v1::TransferConfig* unsafe_arena_release_transfer_config();

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.datatransfer.v1.CreateTransferConfigRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr authorization_code_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_info_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_account_name_;
    ::google::cloud::bigquery::datatransfer::v1::TransferConfig* transfer_config_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2fdatatransfer_2eproto;
};
// -------------------------------------------------------------------

class UpdateTransferConfigRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.datatransfer.v1.UpdateTransferConfigRequest) */ {
 public:
  inline UpdateTransferConfigRequest() : UpdateTransferConfigRequest(nullptr) {}
  ~UpdateTransferConfigRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateTransferConfigRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateTransferConfigRequest(const UpdateTransferConfigRequest& from);
  UpdateTransferConfigRequest(UpdateTransferConfigRequest&& from) noexcept
    : UpdateTransferConfigRequest() {
    *this = ::std::move(from);
  }

  inline UpdateTransferConfigRequest& operator=(const UpdateTransferConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateTransferConfigRequest& operator=(UpdateTransferConfigRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateTransferConfigRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateTransferConfigRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateTransferConfigRequest*>(
               &_UpdateTransferConfigRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UpdateTransferConfigRequest& a, UpdateTransferConfigRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateTransferConfigRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateTransferConfigRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateTransferConfigRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateTransferConfigRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateTransferConfigRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateTransferConfigRequest& from) {
    UpdateTransferConfigRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateTransferConfigRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.datatransfer.v1.UpdateTransferConfigRequest";
  }
  protected:
  explicit UpdateTransferConfigRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthorizationCodeFieldNumber = 3,
    kVersionInfoFieldNumber = 5,
    kServiceAccountNameFieldNumber = 6,
    kTransferConfigFieldNumber = 1,
    kUpdateMaskFieldNumber = 4,
  };
  // string authorization_code = 3;
  void clear_authorization_code();
  const std::string& authorization_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_authorization_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_authorization_code();
  PROTOBUF_NODISCARD std::string* release_authorization_code();
  void set_allocated_authorization_code(std::string* authorization_code);
  private:
  const std::string& _internal_authorization_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_authorization_code(const std::string& value);
  std::string* _internal_mutable_authorization_code();
  public:

  // string version_info = 5;
  void clear_version_info();
  const std::string& version_info() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version_info(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version_info();
  PROTOBUF_NODISCARD std::string* release_version_info();
  void set_allocated_version_info(std::string* version_info);
  private:
  const std::string& _internal_version_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version_info(const std::string& value);
  std::string* _internal_mutable_version_info();
  public:

  // string service_account_name = 6;
  void clear_service_account_name();
  const std::string& service_account_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_service_account_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_service_account_name();
  PROTOBUF_NODISCARD std::string* release_service_account_name();
  void set_allocated_service_account_name(std::string* service_account_name);
  private:
  const std::string& _internal_service_account_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service_account_name(const std::string& value);
  std::string* _internal_mutable_service_account_name();
  public:

  // .google.cloud.bigquery.datatransfer.v1.TransferConfig transfer_config = 1 [(.google.api.field_behavior) = REQUIRED];
  bool has_transfer_config() const;
  private:
  bool _internal_has_transfer_config() const;
  public:
  void clear_transfer_config();
  const ::google::cloud::bigquery::datatransfer::v1::TransferConfig& transfer_config() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::datatransfer::v1::TransferConfig* release_transfer_config();
  ::google::cloud::bigquery::datatransfer::v1::TransferConfig* mutable_transfer_config();
  void set_allocated_transfer_config(::google::cloud::bigquery::datatransfer::v1::TransferConfig* transfer_config);
  private:
  const ::google::cloud::bigquery::datatransfer::v1::TransferConfig& _internal_transfer_config() const;
  ::google::cloud::bigquery::datatransfer::v1::TransferConfig* _internal_mutable_transfer_config();
  public:
  void unsafe_arena_set_allocated_transfer_config(
      ::google::cloud::bigquery::datatransfer::v1::TransferConfig* transfer_config);
  ::google::cloud::bigquery::datatransfer::v1::TransferConfig* unsafe_arena_release_transfer_config();

  // .google.protobuf.FieldMask update_mask = 4 [(.google.api.field_behavior) = REQUIRED];
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.datatransfer.v1.UpdateTransferConfigRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr authorization_code_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_info_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_account_name_;
    ::google::cloud::bigquery::datatransfer::v1::TransferConfig* transfer_config_;
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2fdatatransfer_2eproto;
};
// -------------------------------------------------------------------

class GetTransferConfigRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.datatransfer.v1.GetTransferConfigRequest) */ {
 public:
  inline GetTransferConfigRequest() : GetTransferConfigRequest(nullptr) {}
  ~GetTransferConfigRequest() override;
  explicit PROTOBUF_CONSTEXPR GetTransferConfigRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetTransferConfigRequest(const GetTransferConfigRequest& from);
  GetTransferConfigRequest(GetTransferConfigRequest&& from) noexcept
    : GetTransferConfigRequest() {
    *this = ::std::move(from);
  }

  inline GetTransferConfigRequest& operator=(const GetTransferConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTransferConfigRequest& operator=(GetTransferConfigRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetTransferConfigRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTransferConfigRequest* internal_default_instance() {
    return reinterpret_cast<const GetTransferConfigRequest*>(
               &_GetTransferConfigRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetTransferConfigRequest& a, GetTransferConfigRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTransferConfigRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTransferConfigRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetTransferConfigRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetTransferConfigRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetTransferConfigRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetTransferConfigRequest& from) {
    GetTransferConfigRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTransferConfigRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.datatransfer.v1.GetTransferConfigRequest";
  }
  protected:
  explicit GetTransferConfigRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.datatransfer.v1.GetTransferConfigRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2fdatatransfer_2eproto;
};
// -------------------------------------------------------------------

class DeleteTransferConfigRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.datatransfer.v1.DeleteTransferConfigRequest) */ {
 public:
  inline DeleteTransferConfigRequest() : DeleteTransferConfigRequest(nullptr) {}
  ~DeleteTransferConfigRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteTransferConfigRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteTransferConfigRequest(const DeleteTransferConfigRequest& from);
  DeleteTransferConfigRequest(DeleteTransferConfigRequest&& from) noexcept
    : DeleteTransferConfigRequest() {
    *this = ::std::move(from);
  }

  inline DeleteTransferConfigRequest& operator=(const DeleteTransferConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteTransferConfigRequest& operator=(DeleteTransferConfigRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteTransferConfigRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteTransferConfigRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteTransferConfigRequest*>(
               &_DeleteTransferConfigRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DeleteTransferConfigRequest& a, DeleteTransferConfigRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteTransferConfigRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteTransferConfigRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteTransferConfigRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteTransferConfigRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteTransferConfigRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteTransferConfigRequest& from) {
    DeleteTransferConfigRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteTransferConfigRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.datatransfer.v1.DeleteTransferConfigRequest";
  }
  protected:
  explicit DeleteTransferConfigRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.datatransfer.v1.DeleteTransferConfigRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2fdatatransfer_2eproto;
};
// -------------------------------------------------------------------

class GetTransferRunRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.datatransfer.v1.GetTransferRunRequest) */ {
 public:
  inline GetTransferRunRequest() : GetTransferRunRequest(nullptr) {}
  ~GetTransferRunRequest() override;
  explicit PROTOBUF_CONSTEXPR GetTransferRunRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetTransferRunRequest(const GetTransferRunRequest& from);
  GetTransferRunRequest(GetTransferRunRequest&& from) noexcept
    : GetTransferRunRequest() {
    *this = ::std::move(from);
  }

  inline GetTransferRunRequest& operator=(const GetTransferRunRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTransferRunRequest& operator=(GetTransferRunRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetTransferRunRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTransferRunRequest* internal_default_instance() {
    return reinterpret_cast<const GetTransferRunRequest*>(
               &_GetTransferRunRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetTransferRunRequest& a, GetTransferRunRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTransferRunRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTransferRunRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetTransferRunRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetTransferRunRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetTransferRunRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetTransferRunRequest& from) {
    GetTransferRunRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTransferRunRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.datatransfer.v1.GetTransferRunRequest";
  }
  protected:
  explicit GetTransferRunRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.datatransfer.v1.GetTransferRunRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2fdatatransfer_2eproto;
};
// -------------------------------------------------------------------

class DeleteTransferRunRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.datatransfer.v1.DeleteTransferRunRequest) */ {
 public:
  inline DeleteTransferRunRequest() : DeleteTransferRunRequest(nullptr) {}
  ~DeleteTransferRunRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteTransferRunRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteTransferRunRequest(const DeleteTransferRunRequest& from);
  DeleteTransferRunRequest(DeleteTransferRunRequest&& from) noexcept
    : DeleteTransferRunRequest() {
    *this = ::std::move(from);
  }

  inline DeleteTransferRunRequest& operator=(const DeleteTransferRunRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteTransferRunRequest& operator=(DeleteTransferRunRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteTransferRunRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteTransferRunRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteTransferRunRequest*>(
               &_DeleteTransferRunRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(DeleteTransferRunRequest& a, DeleteTransferRunRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteTransferRunRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteTransferRunRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteTransferRunRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteTransferRunRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteTransferRunRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteTransferRunRequest& from) {
    DeleteTransferRunRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteTransferRunRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.datatransfer.v1.DeleteTransferRunRequest";
  }
  protected:
  explicit DeleteTransferRunRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.datatransfer.v1.DeleteTransferRunRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2fdatatransfer_2eproto;
};
// -------------------------------------------------------------------

class ListTransferConfigsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsRequest) */ {
 public:
  inline ListTransferConfigsRequest() : ListTransferConfigsRequest(nullptr) {}
  ~ListTransferConfigsRequest() override;
  explicit PROTOBUF_CONSTEXPR ListTransferConfigsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListTransferConfigsRequest(const ListTransferConfigsRequest& from);
  ListTransferConfigsRequest(ListTransferConfigsRequest&& from) noexcept
    : ListTransferConfigsRequest() {
    *this = ::std::move(from);
  }

  inline ListTransferConfigsRequest& operator=(const ListTransferConfigsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListTransferConfigsRequest& operator=(ListTransferConfigsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListTransferConfigsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListTransferConfigsRequest* internal_default_instance() {
    return reinterpret_cast<const ListTransferConfigsRequest*>(
               &_ListTransferConfigsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ListTransferConfigsRequest& a, ListTransferConfigsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListTransferConfigsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListTransferConfigsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListTransferConfigsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListTransferConfigsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListTransferConfigsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListTransferConfigsRequest& from) {
    ListTransferConfigsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListTransferConfigsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.datatransfer.v1.ListTransferConfigsRequest";
  }
  protected:
  explicit ListTransferConfigsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataSourceIdsFieldNumber = 2,
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kPageSizeFieldNumber = 4,
  };
  // repeated string data_source_ids = 2;
  int data_source_ids_size() const;
  private:
  int _internal_data_source_ids_size() const;
  public:
  void clear_data_source_ids();
  const std::string& data_source_ids(int index) const;
  std::string* mutable_data_source_ids(int index);
  void set_data_source_ids(int index, const std::string& value);
  void set_data_source_ids(int index, std::string&& value);
  void set_data_source_ids(int index, const char* value);
  void set_data_source_ids(int index, const char* value, size_t size);
  std::string* add_data_source_ids();
  void add_data_source_ids(const std::string& value);
  void add_data_source_ids(std::string&& value);
  void add_data_source_ids(const char* value);
  void add_data_source_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& data_source_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_data_source_ids();
  private:
  const std::string& _internal_data_source_ids(int index) const;
  std::string* _internal_add_data_source_ids();
  public:

  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 3;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 4;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> data_source_ids_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
    int32_t page_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2fdatatransfer_2eproto;
};
// -------------------------------------------------------------------

class ListTransferConfigsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsResponse) */ {
 public:
  inline ListTransferConfigsResponse() : ListTransferConfigsResponse(nullptr) {}
  ~ListTransferConfigsResponse() override;
  explicit PROTOBUF_CONSTEXPR ListTransferConfigsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListTransferConfigsResponse(const ListTransferConfigsResponse& from);
  ListTransferConfigsResponse(ListTransferConfigsResponse&& from) noexcept
    : ListTransferConfigsResponse() {
    *this = ::std::move(from);
  }

  inline ListTransferConfigsResponse& operator=(const ListTransferConfigsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListTransferConfigsResponse& operator=(ListTransferConfigsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListTransferConfigsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListTransferConfigsResponse* internal_default_instance() {
    return reinterpret_cast<const ListTransferConfigsResponse*>(
               &_ListTransferConfigsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ListTransferConfigsResponse& a, ListTransferConfigsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListTransferConfigsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListTransferConfigsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListTransferConfigsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListTransferConfigsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListTransferConfigsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListTransferConfigsResponse& from) {
    ListTransferConfigsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListTransferConfigsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.datatransfer.v1.ListTransferConfigsResponse";
  }
  protected:
  explicit ListTransferConfigsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransferConfigsFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .google.cloud.bigquery.datatransfer.v1.TransferConfig transfer_configs = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
  int transfer_configs_size() const;
  private:
  int _internal_transfer_configs_size() const;
  public:
  void clear_transfer_configs();
  ::google::cloud::bigquery::datatransfer::v1::TransferConfig* mutable_transfer_configs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::datatransfer::v1::TransferConfig >*
      mutable_transfer_configs();
  private:
  const ::google::cloud::bigquery::datatransfer::v1::TransferConfig& _internal_transfer_configs(int index) const;
  ::google::cloud::bigquery::datatransfer::v1::TransferConfig* _internal_add_transfer_configs();
  public:
  const ::google::cloud::bigquery::datatransfer::v1::TransferConfig& transfer_configs(int index) const;
  ::google::cloud::bigquery::datatransfer::v1::TransferConfig* add_transfer_configs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::datatransfer::v1::TransferConfig >&
      transfer_configs() const;

  // string next_page_token = 2 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::datatransfer::v1::TransferConfig > transfer_configs_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2fdatatransfer_2eproto;
};
// -------------------------------------------------------------------

class ListTransferRunsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.datatransfer.v1.ListTransferRunsRequest) */ {
 public:
  inline ListTransferRunsRequest() : ListTransferRunsRequest(nullptr) {}
  ~ListTransferRunsRequest() override;
  explicit PROTOBUF_CONSTEXPR ListTransferRunsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListTransferRunsRequest(const ListTransferRunsRequest& from);
  ListTransferRunsRequest(ListTransferRunsRequest&& from) noexcept
    : ListTransferRunsRequest() {
    *this = ::std::move(from);
  }

  inline ListTransferRunsRequest& operator=(const ListTransferRunsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListTransferRunsRequest& operator=(ListTransferRunsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListTransferRunsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListTransferRunsRequest* internal_default_instance() {
    return reinterpret_cast<const ListTransferRunsRequest*>(
               &_ListTransferRunsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ListTransferRunsRequest& a, ListTransferRunsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListTransferRunsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListTransferRunsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListTransferRunsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListTransferRunsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListTransferRunsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListTransferRunsRequest& from) {
    ListTransferRunsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListTransferRunsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.datatransfer.v1.ListTransferRunsRequest";
  }
  protected:
  explicit ListTransferRunsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ListTransferRunsRequest_RunAttempt RunAttempt;
  static constexpr RunAttempt RUN_ATTEMPT_UNSPECIFIED =
    ListTransferRunsRequest_RunAttempt_RUN_ATTEMPT_UNSPECIFIED;
  static constexpr RunAttempt LATEST =
    ListTransferRunsRequest_RunAttempt_LATEST;
  static inline bool RunAttempt_IsValid(int value) {
    return ListTransferRunsRequest_RunAttempt_IsValid(value);
  }
  static constexpr RunAttempt RunAttempt_MIN =
    ListTransferRunsRequest_RunAttempt_RunAttempt_MIN;
  static constexpr RunAttempt RunAttempt_MAX =
    ListTransferRunsRequest_RunAttempt_RunAttempt_MAX;
  static constexpr int RunAttempt_ARRAYSIZE =
    ListTransferRunsRequest_RunAttempt_RunAttempt_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RunAttempt_descriptor() {
    return ListTransferRunsRequest_RunAttempt_descriptor();
  }
  template<typename T>
  static inline const std::string& RunAttempt_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RunAttempt>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RunAttempt_Name.");
    return ListTransferRunsRequest_RunAttempt_Name(enum_t_value);
  }
  static inline bool RunAttempt_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      RunAttempt* value) {
    return ListTransferRunsRequest_RunAttempt_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStatesFieldNumber = 2,
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kPageSizeFieldNumber = 4,
    kRunAttemptFieldNumber = 5,
  };
  // repeated .google.cloud.bigquery.datatransfer.v1.TransferState states = 2;
  int states_size() const;
  private:
  int _internal_states_size() const;
  public:
  void clear_states();
  private:
  ::google::cloud::bigquery::datatransfer::v1::TransferState _internal_states(int index) const;
  void _internal_add_states(::google::cloud::bigquery::datatransfer::v1::TransferState value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_states();
  public:
  ::google::cloud::bigquery::datatransfer::v1::TransferState states(int index) const;
  void set_states(int index, ::google::cloud::bigquery::datatransfer::v1::TransferState value);
  void add_states(::google::cloud::bigquery::datatransfer::v1::TransferState value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& states() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_states();

  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 3;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 4;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // .google.cloud.bigquery.datatransfer.v1.ListTransferRunsRequest.RunAttempt run_attempt = 5;
  void clear_run_attempt();
  ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsRequest_RunAttempt run_attempt() const;
  void set_run_attempt(::google::cloud::bigquery::datatransfer::v1::ListTransferRunsRequest_RunAttempt value);
  private:
  ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsRequest_RunAttempt _internal_run_attempt() const;
  void _internal_set_run_attempt(::google::cloud::bigquery::datatransfer::v1::ListTransferRunsRequest_RunAttempt value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.datatransfer.v1.ListTransferRunsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> states_;
    mutable std::atomic<int> _states_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
    int32_t page_size_;
    int run_attempt_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2fdatatransfer_2eproto;
};
// -------------------------------------------------------------------

class ListTransferRunsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.datatransfer.v1.ListTransferRunsResponse) */ {
 public:
  inline ListTransferRunsResponse() : ListTransferRunsResponse(nullptr) {}
  ~ListTransferRunsResponse() override;
  explicit PROTOBUF_CONSTEXPR ListTransferRunsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListTransferRunsResponse(const ListTransferRunsResponse& from);
  ListTransferRunsResponse(ListTransferRunsResponse&& from) noexcept
    : ListTransferRunsResponse() {
    *this = ::std::move(from);
  }

  inline ListTransferRunsResponse& operator=(const ListTransferRunsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListTransferRunsResponse& operator=(ListTransferRunsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListTransferRunsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListTransferRunsResponse* internal_default_instance() {
    return reinterpret_cast<const ListTransferRunsResponse*>(
               &_ListTransferRunsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ListTransferRunsResponse& a, ListTransferRunsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListTransferRunsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListTransferRunsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListTransferRunsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListTransferRunsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListTransferRunsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListTransferRunsResponse& from) {
    ListTransferRunsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListTransferRunsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.datatransfer.v1.ListTransferRunsResponse";
  }
  protected:
  explicit ListTransferRunsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransferRunsFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .google.cloud.bigquery.datatransfer.v1.TransferRun transfer_runs = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
  int transfer_runs_size() const;
  private:
  int _internal_transfer_runs_size() const;
  public:
  void clear_transfer_runs();
  ::google::cloud::bigquery::datatransfer::v1::TransferRun* mutable_transfer_runs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::datatransfer::v1::TransferRun >*
      mutable_transfer_runs();
  private:
  const ::google::cloud::bigquery::datatransfer::v1::TransferRun& _internal_transfer_runs(int index) const;
  ::google::cloud::bigquery::datatransfer::v1::TransferRun* _internal_add_transfer_runs();
  public:
  const ::google::cloud::bigquery::datatransfer::v1::TransferRun& transfer_runs(int index) const;
  ::google::cloud::bigquery::datatransfer::v1::TransferRun* add_transfer_runs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::datatransfer::v1::TransferRun >&
      transfer_runs() const;

  // string next_page_token = 2 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.datatransfer.v1.ListTransferRunsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::datatransfer::v1::TransferRun > transfer_runs_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2fdatatransfer_2eproto;
};
// -------------------------------------------------------------------

class ListTransferLogsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.datatransfer.v1.ListTransferLogsRequest) */ {
 public:
  inline ListTransferLogsRequest() : ListTransferLogsRequest(nullptr) {}
  ~ListTransferLogsRequest() override;
  explicit PROTOBUF_CONSTEXPR ListTransferLogsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListTransferLogsRequest(const ListTransferLogsRequest& from);
  ListTransferLogsRequest(ListTransferLogsRequest&& from) noexcept
    : ListTransferLogsRequest() {
    *this = ::std::move(from);
  }

  inline ListTransferLogsRequest& operator=(const ListTransferLogsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListTransferLogsRequest& operator=(ListTransferLogsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListTransferLogsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListTransferLogsRequest* internal_default_instance() {
    return reinterpret_cast<const ListTransferLogsRequest*>(
               &_ListTransferLogsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ListTransferLogsRequest& a, ListTransferLogsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListTransferLogsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListTransferLogsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListTransferLogsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListTransferLogsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListTransferLogsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListTransferLogsRequest& from) {
    ListTransferLogsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListTransferLogsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.datatransfer.v1.ListTransferLogsRequest";
  }
  protected:
  explicit ListTransferLogsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageTypesFieldNumber = 6,
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 4,
    kPageSizeFieldNumber = 5,
  };
  // repeated .google.cloud.bigquery.datatransfer.v1.TransferMessage.MessageSeverity message_types = 6;
  int message_types_size() const;
  private:
  int _internal_message_types_size() const;
  public:
  void clear_message_types();
  private:
  ::google::cloud::bigquery::datatransfer::v1::TransferMessage_MessageSeverity _internal_message_types(int index) const;
  void _internal_add_message_types(::google::cloud::bigquery::datatransfer::v1::TransferMessage_MessageSeverity value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_message_types();
  public:
  ::google::cloud::bigquery::datatransfer::v1::TransferMessage_MessageSeverity message_types(int index) const;
  void set_message_types(int index, ::google::cloud::bigquery::datatransfer::v1::TransferMessage_MessageSeverity value);
  void add_message_types(::google::cloud::bigquery::datatransfer::v1::TransferMessage_MessageSeverity value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& message_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_message_types();

  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 4;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 5;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.datatransfer.v1.ListTransferLogsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> message_types_;
    mutable std::atomic<int> _message_types_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
    int32_t page_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2fdatatransfer_2eproto;
};
// -------------------------------------------------------------------

class ListTransferLogsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.datatransfer.v1.ListTransferLogsResponse) */ {
 public:
  inline ListTransferLogsResponse() : ListTransferLogsResponse(nullptr) {}
  ~ListTransferLogsResponse() override;
  explicit PROTOBUF_CONSTEXPR ListTransferLogsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListTransferLogsResponse(const ListTransferLogsResponse& from);
  ListTransferLogsResponse(ListTransferLogsResponse&& from) noexcept
    : ListTransferLogsResponse() {
    *this = ::std::move(from);
  }

  inline ListTransferLogsResponse& operator=(const ListTransferLogsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListTransferLogsResponse& operator=(ListTransferLogsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListTransferLogsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListTransferLogsResponse* internal_default_instance() {
    return reinterpret_cast<const ListTransferLogsResponse*>(
               &_ListTransferLogsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ListTransferLogsResponse& a, ListTransferLogsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListTransferLogsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListTransferLogsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListTransferLogsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListTransferLogsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListTransferLogsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListTransferLogsResponse& from) {
    ListTransferLogsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListTransferLogsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.datatransfer.v1.ListTransferLogsResponse";
  }
  protected:
  explicit ListTransferLogsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransferMessagesFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .google.cloud.bigquery.datatransfer.v1.TransferMessage transfer_messages = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
  int transfer_messages_size() const;
  private:
  int _internal_transfer_messages_size() const;
  public:
  void clear_transfer_messages();
  ::google::cloud::bigquery::datatransfer::v1::TransferMessage* mutable_transfer_messages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::datatransfer::v1::TransferMessage >*
      mutable_transfer_messages();
  private:
  const ::google::cloud::bigquery::datatransfer::v1::TransferMessage& _internal_transfer_messages(int index) const;
  ::google::cloud::bigquery::datatransfer::v1::TransferMessage* _internal_add_transfer_messages();
  public:
  const ::google::cloud::bigquery::datatransfer::v1::TransferMessage& transfer_messages(int index) const;
  ::google::cloud::bigquery::datatransfer::v1::TransferMessage* add_transfer_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::datatransfer::v1::TransferMessage >&
      transfer_messages() const;

  // string next_page_token = 2 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.datatransfer.v1.ListTransferLogsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::datatransfer::v1::TransferMessage > transfer_messages_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2fdatatransfer_2eproto;
};
// -------------------------------------------------------------------

class CheckValidCredsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.datatransfer.v1.CheckValidCredsRequest) */ {
 public:
  inline CheckValidCredsRequest() : CheckValidCredsRequest(nullptr) {}
  ~CheckValidCredsRequest() override;
  explicit PROTOBUF_CONSTEXPR CheckValidCredsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CheckValidCredsRequest(const CheckValidCredsRequest& from);
  CheckValidCredsRequest(CheckValidCredsRequest&& from) noexcept
    : CheckValidCredsRequest() {
    *this = ::std::move(from);
  }

  inline CheckValidCredsRequest& operator=(const CheckValidCredsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckValidCredsRequest& operator=(CheckValidCredsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CheckValidCredsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CheckValidCredsRequest* internal_default_instance() {
    return reinterpret_cast<const CheckValidCredsRequest*>(
               &_CheckValidCredsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CheckValidCredsRequest& a, CheckValidCredsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckValidCredsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckValidCredsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CheckValidCredsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CheckValidCredsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CheckValidCredsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CheckValidCredsRequest& from) {
    CheckValidCredsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckValidCredsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.datatransfer.v1.CheckValidCredsRequest";
  }
  protected:
  explicit CheckValidCredsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.datatransfer.v1.CheckValidCredsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2fdatatransfer_2eproto;
};
// -------------------------------------------------------------------

class CheckValidCredsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.datatransfer.v1.CheckValidCredsResponse) */ {
 public:
  inline CheckValidCredsResponse() : CheckValidCredsResponse(nullptr) {}
  ~CheckValidCredsResponse() override;
  explicit PROTOBUF_CONSTEXPR CheckValidCredsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CheckValidCredsResponse(const CheckValidCredsResponse& from);
  CheckValidCredsResponse(CheckValidCredsResponse&& from) noexcept
    : CheckValidCredsResponse() {
    *this = ::std::move(from);
  }

  inline CheckValidCredsResponse& operator=(const CheckValidCredsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckValidCredsResponse& operator=(CheckValidCredsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CheckValidCredsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CheckValidCredsResponse* internal_default_instance() {
    return reinterpret_cast<const CheckValidCredsResponse*>(
               &_CheckValidCredsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CheckValidCredsResponse& a, CheckValidCredsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckValidCredsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckValidCredsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CheckValidCredsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CheckValidCredsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CheckValidCredsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CheckValidCredsResponse& from) {
    CheckValidCredsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckValidCredsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.datatransfer.v1.CheckValidCredsResponse";
  }
  protected:
  explicit CheckValidCredsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHasValidCredsFieldNumber = 1,
  };
  // bool has_valid_creds = 1;
  void clear_has_valid_creds();
  bool has_valid_creds() const;
  void set_has_valid_creds(bool value);
  private:
  bool _internal_has_valid_creds() const;
  void _internal_set_has_valid_creds(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.datatransfer.v1.CheckValidCredsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool has_valid_creds_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2fdatatransfer_2eproto;
};
// -------------------------------------------------------------------

class ScheduleTransferRunsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.datatransfer.v1.ScheduleTransferRunsRequest) */ {
 public:
  inline ScheduleTransferRunsRequest() : ScheduleTransferRunsRequest(nullptr) {}
  ~ScheduleTransferRunsRequest() override;
  explicit PROTOBUF_CONSTEXPR ScheduleTransferRunsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScheduleTransferRunsRequest(const ScheduleTransferRunsRequest& from);
  ScheduleTransferRunsRequest(ScheduleTransferRunsRequest&& from) noexcept
    : ScheduleTransferRunsRequest() {
    *this = ::std::move(from);
  }

  inline ScheduleTransferRunsRequest& operator=(const ScheduleTransferRunsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScheduleTransferRunsRequest& operator=(ScheduleTransferRunsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScheduleTransferRunsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScheduleTransferRunsRequest* internal_default_instance() {
    return reinterpret_cast<const ScheduleTransferRunsRequest*>(
               &_ScheduleTransferRunsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(ScheduleTransferRunsRequest& a, ScheduleTransferRunsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ScheduleTransferRunsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScheduleTransferRunsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScheduleTransferRunsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ScheduleTransferRunsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ScheduleTransferRunsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ScheduleTransferRunsRequest& from) {
    ScheduleTransferRunsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScheduleTransferRunsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.datatransfer.v1.ScheduleTransferRunsRequest";
  }
  protected:
  explicit ScheduleTransferRunsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kStartTimeFieldNumber = 2,
    kEndTimeFieldNumber = 3,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // .google.protobuf.Timestamp start_time = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_start_time() const;
  private:
  bool _internal_has_start_time() const;
  public:
  void clear_start_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& start_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_start_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_start_time();
  void set_allocated_start_time(::PROTOBUF_NAMESPACE_ID::Timestamp* start_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_start_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_start_time();
  public:
  void unsafe_arena_set_allocated_start_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* start_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_start_time();

  // .google.protobuf.Timestamp end_time = 3 [(.google.api.field_behavior) = REQUIRED];
  bool has_end_time() const;
  private:
  bool _internal_has_end_time() const;
  public:
  void clear_end_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& end_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_end_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_end_time();
  void set_allocated_end_time(::PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_end_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_end_time();
  public:
  void unsafe_arena_set_allocated_end_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_end_time();

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.datatransfer.v1.ScheduleTransferRunsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* start_time_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* end_time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2fdatatransfer_2eproto;
};
// -------------------------------------------------------------------

class ScheduleTransferRunsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.datatransfer.v1.ScheduleTransferRunsResponse) */ {
 public:
  inline ScheduleTransferRunsResponse() : ScheduleTransferRunsResponse(nullptr) {}
  ~ScheduleTransferRunsResponse() override;
  explicit PROTOBUF_CONSTEXPR ScheduleTransferRunsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScheduleTransferRunsResponse(const ScheduleTransferRunsResponse& from);
  ScheduleTransferRunsResponse(ScheduleTransferRunsResponse&& from) noexcept
    : ScheduleTransferRunsResponse() {
    *this = ::std::move(from);
  }

  inline ScheduleTransferRunsResponse& operator=(const ScheduleTransferRunsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScheduleTransferRunsResponse& operator=(ScheduleTransferRunsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScheduleTransferRunsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScheduleTransferRunsResponse* internal_default_instance() {
    return reinterpret_cast<const ScheduleTransferRunsResponse*>(
               &_ScheduleTransferRunsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(ScheduleTransferRunsResponse& a, ScheduleTransferRunsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ScheduleTransferRunsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScheduleTransferRunsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScheduleTransferRunsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ScheduleTransferRunsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ScheduleTransferRunsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ScheduleTransferRunsResponse& from) {
    ScheduleTransferRunsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScheduleTransferRunsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.datatransfer.v1.ScheduleTransferRunsResponse";
  }
  protected:
  explicit ScheduleTransferRunsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRunsFieldNumber = 1,
  };
  // repeated .google.cloud.bigquery.datatransfer.v1.TransferRun runs = 1;
  int runs_size() const;
  private:
  int _internal_runs_size() const;
  public:
  void clear_runs();
  ::google::cloud::bigquery::datatransfer::v1::TransferRun* mutable_runs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::datatransfer::v1::TransferRun >*
      mutable_runs();
  private:
  const ::google::cloud::bigquery::datatransfer::v1::TransferRun& _internal_runs(int index) const;
  ::google::cloud::bigquery::datatransfer::v1::TransferRun* _internal_add_runs();
  public:
  const ::google::cloud::bigquery::datatransfer::v1::TransferRun& runs(int index) const;
  ::google::cloud::bigquery::datatransfer::v1::TransferRun* add_runs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::datatransfer::v1::TransferRun >&
      runs() const;

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.datatransfer.v1.ScheduleTransferRunsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::datatransfer::v1::TransferRun > runs_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2fdatatransfer_2eproto;
};
// -------------------------------------------------------------------

class StartManualTransferRunsRequest_TimeRange final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.datatransfer.v1.StartManualTransferRunsRequest.TimeRange) */ {
 public:
  inline StartManualTransferRunsRequest_TimeRange() : StartManualTransferRunsRequest_TimeRange(nullptr) {}
  ~StartManualTransferRunsRequest_TimeRange() override;
  explicit PROTOBUF_CONSTEXPR StartManualTransferRunsRequest_TimeRange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartManualTransferRunsRequest_TimeRange(const StartManualTransferRunsRequest_TimeRange& from);
  StartManualTransferRunsRequest_TimeRange(StartManualTransferRunsRequest_TimeRange&& from) noexcept
    : StartManualTransferRunsRequest_TimeRange() {
    *this = ::std::move(from);
  }

  inline StartManualTransferRunsRequest_TimeRange& operator=(const StartManualTransferRunsRequest_TimeRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartManualTransferRunsRequest_TimeRange& operator=(StartManualTransferRunsRequest_TimeRange&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StartManualTransferRunsRequest_TimeRange& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartManualTransferRunsRequest_TimeRange* internal_default_instance() {
    return reinterpret_cast<const StartManualTransferRunsRequest_TimeRange*>(
               &_StartManualTransferRunsRequest_TimeRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(StartManualTransferRunsRequest_TimeRange& a, StartManualTransferRunsRequest_TimeRange& b) {
    a.Swap(&b);
  }
  inline void Swap(StartManualTransferRunsRequest_TimeRange* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartManualTransferRunsRequest_TimeRange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StartManualTransferRunsRequest_TimeRange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StartManualTransferRunsRequest_TimeRange>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StartManualTransferRunsRequest_TimeRange& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StartManualTransferRunsRequest_TimeRange& from) {
    StartManualTransferRunsRequest_TimeRange::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartManualTransferRunsRequest_TimeRange* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.datatransfer.v1.StartManualTransferRunsRequest.TimeRange";
  }
  protected:
  explicit StartManualTransferRunsRequest_TimeRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartTimeFieldNumber = 1,
    kEndTimeFieldNumber = 2,
  };
  // .google.protobuf.Timestamp start_time = 1;
  bool has_start_time() const;
  private:
  bool _internal_has_start_time() const;
  public:
  void clear_start_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& start_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_start_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_start_time();
  void set_allocated_start_time(::PROTOBUF_NAMESPACE_ID::Timestamp* start_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_start_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_start_time();
  public:
  void unsafe_arena_set_allocated_start_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* start_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_start_time();

  // .google.protobuf.Timestamp end_time = 2;
  bool has_end_time() const;
  private:
  bool _internal_has_end_time() const;
  public:
  void clear_end_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& end_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_end_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_end_time();
  void set_allocated_end_time(::PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_end_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_end_time();
  public:
  void unsafe_arena_set_allocated_end_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_end_time();

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.datatransfer.v1.StartManualTransferRunsRequest.TimeRange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::Timestamp* start_time_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* end_time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2fdatatransfer_2eproto;
};
// -------------------------------------------------------------------

class StartManualTransferRunsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.datatransfer.v1.StartManualTransferRunsRequest) */ {
 public:
  inline StartManualTransferRunsRequest() : StartManualTransferRunsRequest(nullptr) {}
  ~StartManualTransferRunsRequest() override;
  explicit PROTOBUF_CONSTEXPR StartManualTransferRunsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartManualTransferRunsRequest(const StartManualTransferRunsRequest& from);
  StartManualTransferRunsRequest(StartManualTransferRunsRequest&& from) noexcept
    : StartManualTransferRunsRequest() {
    *this = ::std::move(from);
  }

  inline StartManualTransferRunsRequest& operator=(const StartManualTransferRunsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartManualTransferRunsRequest& operator=(StartManualTransferRunsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StartManualTransferRunsRequest& default_instance() {
    return *internal_default_instance();
  }
  enum TimeCase {
    kRequestedTimeRange = 3,
    kRequestedRunTime = 4,
    TIME_NOT_SET = 0,
  };

  static inline const StartManualTransferRunsRequest* internal_default_instance() {
    return reinterpret_cast<const StartManualTransferRunsRequest*>(
               &_StartManualTransferRunsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(StartManualTransferRunsRequest& a, StartManualTransferRunsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StartManualTransferRunsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartManualTransferRunsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StartManualTransferRunsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StartManualTransferRunsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StartManualTransferRunsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StartManualTransferRunsRequest& from) {
    StartManualTransferRunsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartManualTransferRunsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.datatransfer.v1.StartManualTransferRunsRequest";
  }
  protected:
  explicit StartManualTransferRunsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef StartManualTransferRunsRequest_TimeRange TimeRange;

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kRequestedTimeRangeFieldNumber = 3,
    kRequestedRunTimeFieldNumber = 4,
  };
  // string parent = 1 [(.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // .google.cloud.bigquery.datatransfer.v1.StartManualTransferRunsRequest.TimeRange requested_time_range = 3;
  bool has_requested_time_range() const;
  private:
  bool _internal_has_requested_time_range() const;
  public:
  void clear_requested_time_range();
  const ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsRequest_TimeRange& requested_time_range() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsRequest_TimeRange* release_requested_time_range();
  ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsRequest_TimeRange* mutable_requested_time_range();
  void set_allocated_requested_time_range(::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsRequest_TimeRange* requested_time_range);
  private:
  const ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsRequest_TimeRange& _internal_requested_time_range() const;
  ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsRequest_TimeRange* _internal_mutable_requested_time_range();
  public:
  void unsafe_arena_set_allocated_requested_time_range(
      ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsRequest_TimeRange* requested_time_range);
  ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsRequest_TimeRange* unsafe_arena_release_requested_time_range();

  // .google.protobuf.Timestamp requested_run_time = 4;
  bool has_requested_run_time() const;
  private:
  bool _internal_has_requested_run_time() const;
  public:
  void clear_requested_run_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& requested_run_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_requested_run_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_requested_run_time();
  void set_allocated_requested_run_time(::PROTOBUF_NAMESPACE_ID::Timestamp* requested_run_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_requested_run_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_requested_run_time();
  public:
  void unsafe_arena_set_allocated_requested_run_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* requested_run_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_requested_run_time();

  void clear_time();
  TimeCase time_case() const;
  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.datatransfer.v1.StartManualTransferRunsRequest)
 private:
  class _Internal;
  void set_has_requested_time_range();
  void set_has_requested_run_time();

  inline bool has_time() const;
  inline void clear_has_time();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    union TimeUnion {
      constexpr TimeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsRequest_TimeRange* requested_time_range_;
      ::PROTOBUF_NAMESPACE_ID::Timestamp* requested_run_time_;
    } time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2fdatatransfer_2eproto;
};
// -------------------------------------------------------------------

class StartManualTransferRunsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.datatransfer.v1.StartManualTransferRunsResponse) */ {
 public:
  inline StartManualTransferRunsResponse() : StartManualTransferRunsResponse(nullptr) {}
  ~StartManualTransferRunsResponse() override;
  explicit PROTOBUF_CONSTEXPR StartManualTransferRunsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartManualTransferRunsResponse(const StartManualTransferRunsResponse& from);
  StartManualTransferRunsResponse(StartManualTransferRunsResponse&& from) noexcept
    : StartManualTransferRunsResponse() {
    *this = ::std::move(from);
  }

  inline StartManualTransferRunsResponse& operator=(const StartManualTransferRunsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartManualTransferRunsResponse& operator=(StartManualTransferRunsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StartManualTransferRunsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartManualTransferRunsResponse* internal_default_instance() {
    return reinterpret_cast<const StartManualTransferRunsResponse*>(
               &_StartManualTransferRunsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(StartManualTransferRunsResponse& a, StartManualTransferRunsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StartManualTransferRunsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartManualTransferRunsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StartManualTransferRunsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StartManualTransferRunsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StartManualTransferRunsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StartManualTransferRunsResponse& from) {
    StartManualTransferRunsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartManualTransferRunsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.datatransfer.v1.StartManualTransferRunsResponse";
  }
  protected:
  explicit StartManualTransferRunsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRunsFieldNumber = 1,
  };
  // repeated .google.cloud.bigquery.datatransfer.v1.TransferRun runs = 1;
  int runs_size() const;
  private:
  int _internal_runs_size() const;
  public:
  void clear_runs();
  ::google::cloud::bigquery::datatransfer::v1::TransferRun* mutable_runs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::datatransfer::v1::TransferRun >*
      mutable_runs();
  private:
  const ::google::cloud::bigquery::datatransfer::v1::TransferRun& _internal_runs(int index) const;
  ::google::cloud::bigquery::datatransfer::v1::TransferRun* _internal_add_runs();
  public:
  const ::google::cloud::bigquery::datatransfer::v1::TransferRun& runs(int index) const;
  ::google::cloud::bigquery::datatransfer::v1::TransferRun* add_runs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::datatransfer::v1::TransferRun >&
      runs() const;

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.datatransfer.v1.StartManualTransferRunsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::datatransfer::v1::TransferRun > runs_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2fdatatransfer_2eproto;
};
// -------------------------------------------------------------------

class EnrollDataSourcesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.datatransfer.v1.EnrollDataSourcesRequest) */ {
 public:
  inline EnrollDataSourcesRequest() : EnrollDataSourcesRequest(nullptr) {}
  ~EnrollDataSourcesRequest() override;
  explicit PROTOBUF_CONSTEXPR EnrollDataSourcesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnrollDataSourcesRequest(const EnrollDataSourcesRequest& from);
  EnrollDataSourcesRequest(EnrollDataSourcesRequest&& from) noexcept
    : EnrollDataSourcesRequest() {
    *this = ::std::move(from);
  }

  inline EnrollDataSourcesRequest& operator=(const EnrollDataSourcesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnrollDataSourcesRequest& operator=(EnrollDataSourcesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EnrollDataSourcesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnrollDataSourcesRequest* internal_default_instance() {
    return reinterpret_cast<const EnrollDataSourcesRequest*>(
               &_EnrollDataSourcesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(EnrollDataSourcesRequest& a, EnrollDataSourcesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EnrollDataSourcesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnrollDataSourcesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnrollDataSourcesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnrollDataSourcesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EnrollDataSourcesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EnrollDataSourcesRequest& from) {
    EnrollDataSourcesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnrollDataSourcesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.datatransfer.v1.EnrollDataSourcesRequest";
  }
  protected:
  explicit EnrollDataSourcesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataSourceIdsFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated string data_source_ids = 2;
  int data_source_ids_size() const;
  private:
  int _internal_data_source_ids_size() const;
  public:
  void clear_data_source_ids();
  const std::string& data_source_ids(int index) const;
  std::string* mutable_data_source_ids(int index);
  void set_data_source_ids(int index, const std::string& value);
  void set_data_source_ids(int index, std::string&& value);
  void set_data_source_ids(int index, const char* value);
  void set_data_source_ids(int index, const char* value, size_t size);
  std::string* add_data_source_ids();
  void add_data_source_ids(const std::string& value);
  void add_data_source_ids(std::string&& value);
  void add_data_source_ids(const char* value);
  void add_data_source_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& data_source_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_data_source_ids();
  private:
  const std::string& _internal_data_source_ids(int index) const;
  std::string* _internal_add_data_source_ids();
  public:

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.datatransfer.v1.EnrollDataSourcesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> data_source_ids_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2fdatatransfer_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DataSourceParameter

// string param_id = 1;
inline void DataSourceParameter::clear_param_id() {
  _impl_.param_id_.ClearToEmpty();
}
inline const std::string& DataSourceParameter::param_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.param_id)
  return _internal_param_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DataSourceParameter::set_param_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.param_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.param_id)
}
inline std::string* DataSourceParameter::mutable_param_id() {
  std::string* _s = _internal_mutable_param_id();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.param_id)
  return _s;
}
inline const std::string& DataSourceParameter::_internal_param_id() const {
  return _impl_.param_id_.Get();
}
inline void DataSourceParameter::_internal_set_param_id(const std::string& value) {
  
  _impl_.param_id_.Set(value, GetArenaForAllocation());
}
inline std::string* DataSourceParameter::_internal_mutable_param_id() {
  
  return _impl_.param_id_.Mutable(GetArenaForAllocation());
}
inline std::string* DataSourceParameter::release_param_id() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.param_id)
  return _impl_.param_id_.Release();
}
inline void DataSourceParameter::set_allocated_param_id(std::string* param_id) {
  if (param_id != nullptr) {
    
  } else {
    
  }
  _impl_.param_id_.SetAllocated(param_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.param_id_.IsDefault()) {
    _impl_.param_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.param_id)
}

// string display_name = 2;
inline void DataSourceParameter::clear_display_name() {
  _impl_.display_name_.ClearToEmpty();
}
inline const std::string& DataSourceParameter::display_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.display_name)
  return _internal_display_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DataSourceParameter::set_display_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.display_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.display_name)
}
inline std::string* DataSourceParameter::mutable_display_name() {
  std::string* _s = _internal_mutable_display_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.display_name)
  return _s;
}
inline const std::string& DataSourceParameter::_internal_display_name() const {
  return _impl_.display_name_.Get();
}
inline void DataSourceParameter::_internal_set_display_name(const std::string& value) {
  
  _impl_.display_name_.Set(value, GetArenaForAllocation());
}
inline std::string* DataSourceParameter::_internal_mutable_display_name() {
  
  return _impl_.display_name_.Mutable(GetArenaForAllocation());
}
inline std::string* DataSourceParameter::release_display_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.display_name)
  return _impl_.display_name_.Release();
}
inline void DataSourceParameter::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    
  } else {
    
  }
  _impl_.display_name_.SetAllocated(display_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.display_name_.IsDefault()) {
    _impl_.display_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.display_name)
}

// string description = 3;
inline void DataSourceParameter::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& DataSourceParameter::description() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DataSourceParameter::set_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.description)
}
inline std::string* DataSourceParameter::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.description)
  return _s;
}
inline const std::string& DataSourceParameter::_internal_description() const {
  return _impl_.description_.Get();
}
inline void DataSourceParameter::_internal_set_description(const std::string& value) {
  
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* DataSourceParameter::_internal_mutable_description() {
  
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* DataSourceParameter::release_description() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.description)
  return _impl_.description_.Release();
}
inline void DataSourceParameter::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.description)
}

// .google.cloud.bigquery.datatransfer.v1.DataSourceParameter.Type type = 4;
inline void DataSourceParameter::clear_type() {
  _impl_.type_ = 0;
}
inline ::google::cloud::bigquery::datatransfer::v1::DataSourceParameter_Type DataSourceParameter::_internal_type() const {
  return static_cast< ::google::cloud::bigquery::datatransfer::v1::DataSourceParameter_Type >(_impl_.type_);
}
inline ::google::cloud::bigquery::datatransfer::v1::DataSourceParameter_Type DataSourceParameter::type() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.type)
  return _internal_type();
}
inline void DataSourceParameter::_internal_set_type(::google::cloud::bigquery::datatransfer::v1::DataSourceParameter_Type value) {
  
  _impl_.type_ = value;
}
inline void DataSourceParameter::set_type(::google::cloud::bigquery::datatransfer::v1::DataSourceParameter_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.type)
}

// bool required = 5;
inline void DataSourceParameter::clear_required() {
  _impl_.required_ = false;
}
inline bool DataSourceParameter::_internal_required() const {
  return _impl_.required_;
}
inline bool DataSourceParameter::required() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.required)
  return _internal_required();
}
inline void DataSourceParameter::_internal_set_required(bool value) {
  
  _impl_.required_ = value;
}
inline void DataSourceParameter::set_required(bool value) {
  _internal_set_required(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.required)
}

// bool repeated = 6;
inline void DataSourceParameter::clear_repeated() {
  _impl_.repeated_ = false;
}
inline bool DataSourceParameter::_internal_repeated() const {
  return _impl_.repeated_;
}
inline bool DataSourceParameter::repeated() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.repeated)
  return _internal_repeated();
}
inline void DataSourceParameter::_internal_set_repeated(bool value) {
  
  _impl_.repeated_ = value;
}
inline void DataSourceParameter::set_repeated(bool value) {
  _internal_set_repeated(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.repeated)
}

// string validation_regex = 7;
inline void DataSourceParameter::clear_validation_regex() {
  _impl_.validation_regex_.ClearToEmpty();
}
inline const std::string& DataSourceParameter::validation_regex() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.validation_regex)
  return _internal_validation_regex();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DataSourceParameter::set_validation_regex(ArgT0&& arg0, ArgT... args) {
 
 _impl_.validation_regex_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.validation_regex)
}
inline std::string* DataSourceParameter::mutable_validation_regex() {
  std::string* _s = _internal_mutable_validation_regex();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.validation_regex)
  return _s;
}
inline const std::string& DataSourceParameter::_internal_validation_regex() const {
  return _impl_.validation_regex_.Get();
}
inline void DataSourceParameter::_internal_set_validation_regex(const std::string& value) {
  
  _impl_.validation_regex_.Set(value, GetArenaForAllocation());
}
inline std::string* DataSourceParameter::_internal_mutable_validation_regex() {
  
  return _impl_.validation_regex_.Mutable(GetArenaForAllocation());
}
inline std::string* DataSourceParameter::release_validation_regex() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.validation_regex)
  return _impl_.validation_regex_.Release();
}
inline void DataSourceParameter::set_allocated_validation_regex(std::string* validation_regex) {
  if (validation_regex != nullptr) {
    
  } else {
    
  }
  _impl_.validation_regex_.SetAllocated(validation_regex, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.validation_regex_.IsDefault()) {
    _impl_.validation_regex_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.validation_regex)
}

// repeated string allowed_values = 8;
inline int DataSourceParameter::_internal_allowed_values_size() const {
  return _impl_.allowed_values_.size();
}
inline int DataSourceParameter::allowed_values_size() const {
  return _internal_allowed_values_size();
}
inline void DataSourceParameter::clear_allowed_values() {
  _impl_.allowed_values_.Clear();
}
inline std::string* DataSourceParameter::add_allowed_values() {
  std::string* _s = _internal_add_allowed_values();
  // @@protoc_insertion_point(field_add_mutable:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.allowed_values)
  return _s;
}
inline const std::string& DataSourceParameter::_internal_allowed_values(int index) const {
  return _impl_.allowed_values_.Get(index);
}
inline const std::string& DataSourceParameter::allowed_values(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.allowed_values)
  return _internal_allowed_values(index);
}
inline std::string* DataSourceParameter::mutable_allowed_values(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.allowed_values)
  return _impl_.allowed_values_.Mutable(index);
}
inline void DataSourceParameter::set_allowed_values(int index, const std::string& value) {
  _impl_.allowed_values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.allowed_values)
}
inline void DataSourceParameter::set_allowed_values(int index, std::string&& value) {
  _impl_.allowed_values_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.allowed_values)
}
inline void DataSourceParameter::set_allowed_values(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.allowed_values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.allowed_values)
}
inline void DataSourceParameter::set_allowed_values(int index, const char* value, size_t size) {
  _impl_.allowed_values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.allowed_values)
}
inline std::string* DataSourceParameter::_internal_add_allowed_values() {
  return _impl_.allowed_values_.Add();
}
inline void DataSourceParameter::add_allowed_values(const std::string& value) {
  _impl_.allowed_values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.allowed_values)
}
inline void DataSourceParameter::add_allowed_values(std::string&& value) {
  _impl_.allowed_values_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.allowed_values)
}
inline void DataSourceParameter::add_allowed_values(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.allowed_values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.allowed_values)
}
inline void DataSourceParameter::add_allowed_values(const char* value, size_t size) {
  _impl_.allowed_values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.allowed_values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DataSourceParameter::allowed_values() const {
  // @@protoc_insertion_point(field_list:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.allowed_values)
  return _impl_.allowed_values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DataSourceParameter::mutable_allowed_values() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.allowed_values)
  return &_impl_.allowed_values_;
}

// .google.protobuf.DoubleValue min_value = 9;
inline bool DataSourceParameter::_internal_has_min_value() const {
  return this != internal_default_instance() && _impl_.min_value_ != nullptr;
}
inline bool DataSourceParameter::has_min_value() const {
  return _internal_has_min_value();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& DataSourceParameter::_internal_min_value() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.min_value_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& DataSourceParameter::min_value() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.min_value)
  return _internal_min_value();
}
inline void DataSourceParameter::unsafe_arena_set_allocated_min_value(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* min_value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.min_value_);
  }
  _impl_.min_value_ = min_value;
  if (min_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.min_value)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* DataSourceParameter::release_min_value() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.min_value_;
  _impl_.min_value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* DataSourceParameter::unsafe_arena_release_min_value() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.min_value)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.min_value_;
  _impl_.min_value_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* DataSourceParameter::_internal_mutable_min_value() {
  
  if (_impl_.min_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.min_value_ = p;
  }
  return _impl_.min_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* DataSourceParameter::mutable_min_value() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_min_value();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.min_value)
  return _msg;
}
inline void DataSourceParameter::set_allocated_min_value(::PROTOBUF_NAMESPACE_ID::DoubleValue* min_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.min_value_);
  }
  if (min_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_value));
    if (message_arena != submessage_arena) {
      min_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, min_value, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.min_value_ = min_value;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.min_value)
}

// .google.protobuf.DoubleValue max_value = 10;
inline bool DataSourceParameter::_internal_has_max_value() const {
  return this != internal_default_instance() && _impl_.max_value_ != nullptr;
}
inline bool DataSourceParameter::has_max_value() const {
  return _internal_has_max_value();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& DataSourceParameter::_internal_max_value() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.max_value_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& DataSourceParameter::max_value() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.max_value)
  return _internal_max_value();
}
inline void DataSourceParameter::unsafe_arena_set_allocated_max_value(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_value_);
  }
  _impl_.max_value_ = max_value;
  if (max_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.max_value)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* DataSourceParameter::release_max_value() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.max_value_;
  _impl_.max_value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* DataSourceParameter::unsafe_arena_release_max_value() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.max_value)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.max_value_;
  _impl_.max_value_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* DataSourceParameter::_internal_mutable_max_value() {
  
  if (_impl_.max_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.max_value_ = p;
  }
  return _impl_.max_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* DataSourceParameter::mutable_max_value() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_max_value();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.max_value)
  return _msg;
}
inline void DataSourceParameter::set_allocated_max_value(::PROTOBUF_NAMESPACE_ID::DoubleValue* max_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_value_);
  }
  if (max_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_value));
    if (message_arena != submessage_arena) {
      max_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_value, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.max_value_ = max_value;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.max_value)
}

// repeated .google.cloud.bigquery.datatransfer.v1.DataSourceParameter fields = 11;
inline int DataSourceParameter::_internal_fields_size() const {
  return _impl_.fields_.size();
}
inline int DataSourceParameter::fields_size() const {
  return _internal_fields_size();
}
inline void DataSourceParameter::clear_fields() {
  _impl_.fields_.Clear();
}
inline ::google::cloud::bigquery::datatransfer::v1::DataSourceParameter* DataSourceParameter::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.fields)
  return _impl_.fields_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::datatransfer::v1::DataSourceParameter >*
DataSourceParameter::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.fields)
  return &_impl_.fields_;
}
inline const ::google::cloud::bigquery::datatransfer::v1::DataSourceParameter& DataSourceParameter::_internal_fields(int index) const {
  return _impl_.fields_.Get(index);
}
inline const ::google::cloud::bigquery::datatransfer::v1::DataSourceParameter& DataSourceParameter::fields(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.fields)
  return _internal_fields(index);
}
inline ::google::cloud::bigquery::datatransfer::v1::DataSourceParameter* DataSourceParameter::_internal_add_fields() {
  return _impl_.fields_.Add();
}
inline ::google::cloud::bigquery::datatransfer::v1::DataSourceParameter* DataSourceParameter::add_fields() {
  ::google::cloud::bigquery::datatransfer::v1::DataSourceParameter* _add = _internal_add_fields();
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.fields)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::datatransfer::v1::DataSourceParameter >&
DataSourceParameter::fields() const {
  // @@protoc_insertion_point(field_list:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.fields)
  return _impl_.fields_;
}

// string validation_description = 12;
inline void DataSourceParameter::clear_validation_description() {
  _impl_.validation_description_.ClearToEmpty();
}
inline const std::string& DataSourceParameter::validation_description() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.validation_description)
  return _internal_validation_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DataSourceParameter::set_validation_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.validation_description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.validation_description)
}
inline std::string* DataSourceParameter::mutable_validation_description() {
  std::string* _s = _internal_mutable_validation_description();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.validation_description)
  return _s;
}
inline const std::string& DataSourceParameter::_internal_validation_description() const {
  return _impl_.validation_description_.Get();
}
inline void DataSourceParameter::_internal_set_validation_description(const std::string& value) {
  
  _impl_.validation_description_.Set(value, GetArenaForAllocation());
}
inline std::string* DataSourceParameter::_internal_mutable_validation_description() {
  
  return _impl_.validation_description_.Mutable(GetArenaForAllocation());
}
inline std::string* DataSourceParameter::release_validation_description() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.validation_description)
  return _impl_.validation_description_.Release();
}
inline void DataSourceParameter::set_allocated_validation_description(std::string* validation_description) {
  if (validation_description != nullptr) {
    
  } else {
    
  }
  _impl_.validation_description_.SetAllocated(validation_description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.validation_description_.IsDefault()) {
    _impl_.validation_description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.validation_description)
}

// string validation_help_url = 13;
inline void DataSourceParameter::clear_validation_help_url() {
  _impl_.validation_help_url_.ClearToEmpty();
}
inline const std::string& DataSourceParameter::validation_help_url() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.validation_help_url)
  return _internal_validation_help_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DataSourceParameter::set_validation_help_url(ArgT0&& arg0, ArgT... args) {
 
 _impl_.validation_help_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.validation_help_url)
}
inline std::string* DataSourceParameter::mutable_validation_help_url() {
  std::string* _s = _internal_mutable_validation_help_url();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.validation_help_url)
  return _s;
}
inline const std::string& DataSourceParameter::_internal_validation_help_url() const {
  return _impl_.validation_help_url_.Get();
}
inline void DataSourceParameter::_internal_set_validation_help_url(const std::string& value) {
  
  _impl_.validation_help_url_.Set(value, GetArenaForAllocation());
}
inline std::string* DataSourceParameter::_internal_mutable_validation_help_url() {
  
  return _impl_.validation_help_url_.Mutable(GetArenaForAllocation());
}
inline std::string* DataSourceParameter::release_validation_help_url() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.validation_help_url)
  return _impl_.validation_help_url_.Release();
}
inline void DataSourceParameter::set_allocated_validation_help_url(std::string* validation_help_url) {
  if (validation_help_url != nullptr) {
    
  } else {
    
  }
  _impl_.validation_help_url_.SetAllocated(validation_help_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.validation_help_url_.IsDefault()) {
    _impl_.validation_help_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.validation_help_url)
}

// bool immutable = 14;
inline void DataSourceParameter::clear_immutable() {
  _impl_.immutable_ = false;
}
inline bool DataSourceParameter::_internal_immutable() const {
  return _impl_.immutable_;
}
inline bool DataSourceParameter::immutable() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.immutable)
  return _internal_immutable();
}
inline void DataSourceParameter::_internal_set_immutable(bool value) {
  
  _impl_.immutable_ = value;
}
inline void DataSourceParameter::set_immutable(bool value) {
  _internal_set_immutable(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.immutable)
}

// bool recurse = 15;
inline void DataSourceParameter::clear_recurse() {
  _impl_.recurse_ = false;
}
inline bool DataSourceParameter::_internal_recurse() const {
  return _impl_.recurse_;
}
inline bool DataSourceParameter::recurse() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.recurse)
  return _internal_recurse();
}
inline void DataSourceParameter::_internal_set_recurse(bool value) {
  
  _impl_.recurse_ = value;
}
inline void DataSourceParameter::set_recurse(bool value) {
  _internal_set_recurse(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.recurse)
}

// bool deprecated = 20;
inline void DataSourceParameter::clear_deprecated() {
  _impl_.deprecated_ = false;
}
inline bool DataSourceParameter::_internal_deprecated() const {
  return _impl_.deprecated_;
}
inline bool DataSourceParameter::deprecated() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.deprecated)
  return _internal_deprecated();
}
inline void DataSourceParameter::_internal_set_deprecated(bool value) {
  
  _impl_.deprecated_ = value;
}
inline void DataSourceParameter::set_deprecated(bool value) {
  _internal_set_deprecated(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.deprecated)
}

// -------------------------------------------------------------------

// DataSource

// string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void DataSource::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DataSource::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.DataSource.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DataSource::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.DataSource.name)
}
inline std::string* DataSource::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.DataSource.name)
  return _s;
}
inline const std::string& DataSource::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DataSource::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DataSource::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* DataSource::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.DataSource.name)
  return _impl_.name_.Release();
}
inline void DataSource::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.DataSource.name)
}

// string data_source_id = 2;
inline void DataSource::clear_data_source_id() {
  _impl_.data_source_id_.ClearToEmpty();
}
inline const std::string& DataSource::data_source_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.DataSource.data_source_id)
  return _internal_data_source_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DataSource::set_data_source_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_source_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.DataSource.data_source_id)
}
inline std::string* DataSource::mutable_data_source_id() {
  std::string* _s = _internal_mutable_data_source_id();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.DataSource.data_source_id)
  return _s;
}
inline const std::string& DataSource::_internal_data_source_id() const {
  return _impl_.data_source_id_.Get();
}
inline void DataSource::_internal_set_data_source_id(const std::string& value) {
  
  _impl_.data_source_id_.Set(value, GetArenaForAllocation());
}
inline std::string* DataSource::_internal_mutable_data_source_id() {
  
  return _impl_.data_source_id_.Mutable(GetArenaForAllocation());
}
inline std::string* DataSource::release_data_source_id() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.DataSource.data_source_id)
  return _impl_.data_source_id_.Release();
}
inline void DataSource::set_allocated_data_source_id(std::string* data_source_id) {
  if (data_source_id != nullptr) {
    
  } else {
    
  }
  _impl_.data_source_id_.SetAllocated(data_source_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_source_id_.IsDefault()) {
    _impl_.data_source_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.DataSource.data_source_id)
}

// string display_name = 3;
inline void DataSource::clear_display_name() {
  _impl_.display_name_.ClearToEmpty();
}
inline const std::string& DataSource::display_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.DataSource.display_name)
  return _internal_display_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DataSource::set_display_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.display_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.DataSource.display_name)
}
inline std::string* DataSource::mutable_display_name() {
  std::string* _s = _internal_mutable_display_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.DataSource.display_name)
  return _s;
}
inline const std::string& DataSource::_internal_display_name() const {
  return _impl_.display_name_.Get();
}
inline void DataSource::_internal_set_display_name(const std::string& value) {
  
  _impl_.display_name_.Set(value, GetArenaForAllocation());
}
inline std::string* DataSource::_internal_mutable_display_name() {
  
  return _impl_.display_name_.Mutable(GetArenaForAllocation());
}
inline std::string* DataSource::release_display_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.DataSource.display_name)
  return _impl_.display_name_.Release();
}
inline void DataSource::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    
  } else {
    
  }
  _impl_.display_name_.SetAllocated(display_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.display_name_.IsDefault()) {
    _impl_.display_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.DataSource.display_name)
}

// string description = 4;
inline void DataSource::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& DataSource::description() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.DataSource.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DataSource::set_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.DataSource.description)
}
inline std::string* DataSource::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.DataSource.description)
  return _s;
}
inline const std::string& DataSource::_internal_description() const {
  return _impl_.description_.Get();
}
inline void DataSource::_internal_set_description(const std::string& value) {
  
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* DataSource::_internal_mutable_description() {
  
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* DataSource::release_description() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.DataSource.description)
  return _impl_.description_.Release();
}
inline void DataSource::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.DataSource.description)
}

// string client_id = 5;
inline void DataSource::clear_client_id() {
  _impl_.client_id_.ClearToEmpty();
}
inline const std::string& DataSource::client_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.DataSource.client_id)
  return _internal_client_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DataSource::set_client_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.client_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.DataSource.client_id)
}
inline std::string* DataSource::mutable_client_id() {
  std::string* _s = _internal_mutable_client_id();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.DataSource.client_id)
  return _s;
}
inline const std::string& DataSource::_internal_client_id() const {
  return _impl_.client_id_.Get();
}
inline void DataSource::_internal_set_client_id(const std::string& value) {
  
  _impl_.client_id_.Set(value, GetArenaForAllocation());
}
inline std::string* DataSource::_internal_mutable_client_id() {
  
  return _impl_.client_id_.Mutable(GetArenaForAllocation());
}
inline std::string* DataSource::release_client_id() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.DataSource.client_id)
  return _impl_.client_id_.Release();
}
inline void DataSource::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  _impl_.client_id_.SetAllocated(client_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.client_id_.IsDefault()) {
    _impl_.client_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.DataSource.client_id)
}

// repeated string scopes = 6;
inline int DataSource::_internal_scopes_size() const {
  return _impl_.scopes_.size();
}
inline int DataSource::scopes_size() const {
  return _internal_scopes_size();
}
inline void DataSource::clear_scopes() {
  _impl_.scopes_.Clear();
}
inline std::string* DataSource::add_scopes() {
  std::string* _s = _internal_add_scopes();
  // @@protoc_insertion_point(field_add_mutable:google.cloud.bigquery.datatransfer.v1.DataSource.scopes)
  return _s;
}
inline const std::string& DataSource::_internal_scopes(int index) const {
  return _impl_.scopes_.Get(index);
}
inline const std::string& DataSource::scopes(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.DataSource.scopes)
  return _internal_scopes(index);
}
inline std::string* DataSource::mutable_scopes(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.DataSource.scopes)
  return _impl_.scopes_.Mutable(index);
}
inline void DataSource::set_scopes(int index, const std::string& value) {
  _impl_.scopes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.DataSource.scopes)
}
inline void DataSource::set_scopes(int index, std::string&& value) {
  _impl_.scopes_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.DataSource.scopes)
}
inline void DataSource::set_scopes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.scopes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.datatransfer.v1.DataSource.scopes)
}
inline void DataSource::set_scopes(int index, const char* value, size_t size) {
  _impl_.scopes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.datatransfer.v1.DataSource.scopes)
}
inline std::string* DataSource::_internal_add_scopes() {
  return _impl_.scopes_.Add();
}
inline void DataSource::add_scopes(const std::string& value) {
  _impl_.scopes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.datatransfer.v1.DataSource.scopes)
}
inline void DataSource::add_scopes(std::string&& value) {
  _impl_.scopes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.datatransfer.v1.DataSource.scopes)
}
inline void DataSource::add_scopes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.scopes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.bigquery.datatransfer.v1.DataSource.scopes)
}
inline void DataSource::add_scopes(const char* value, size_t size) {
  _impl_.scopes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.bigquery.datatransfer.v1.DataSource.scopes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DataSource::scopes() const {
  // @@protoc_insertion_point(field_list:google.cloud.bigquery.datatransfer.v1.DataSource.scopes)
  return _impl_.scopes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DataSource::mutable_scopes() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.bigquery.datatransfer.v1.DataSource.scopes)
  return &_impl_.scopes_;
}

// .google.cloud.bigquery.datatransfer.v1.TransferType transfer_type = 7 [deprecated = true];
inline void DataSource::clear_transfer_type() {
  _impl_.transfer_type_ = 0;
}
inline ::google::cloud::bigquery::datatransfer::v1::TransferType DataSource::_internal_transfer_type() const {
  return static_cast< ::google::cloud::bigquery::datatransfer::v1::TransferType >(_impl_.transfer_type_);
}
inline ::google::cloud::bigquery::datatransfer::v1::TransferType DataSource::transfer_type() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.DataSource.transfer_type)
  return _internal_transfer_type();
}
inline void DataSource::_internal_set_transfer_type(::google::cloud::bigquery::datatransfer::v1::TransferType value) {
  
  _impl_.transfer_type_ = value;
}
inline void DataSource::set_transfer_type(::google::cloud::bigquery::datatransfer::v1::TransferType value) {
  _internal_set_transfer_type(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.DataSource.transfer_type)
}

// bool supports_multiple_transfers = 8 [deprecated = true];
inline void DataSource::clear_supports_multiple_transfers() {
  _impl_.supports_multiple_transfers_ = false;
}
inline bool DataSource::_internal_supports_multiple_transfers() const {
  return _impl_.supports_multiple_transfers_;
}
inline bool DataSource::supports_multiple_transfers() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.DataSource.supports_multiple_transfers)
  return _internal_supports_multiple_transfers();
}
inline void DataSource::_internal_set_supports_multiple_transfers(bool value) {
  
  _impl_.supports_multiple_transfers_ = value;
}
inline void DataSource::set_supports_multiple_transfers(bool value) {
  _internal_set_supports_multiple_transfers(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.DataSource.supports_multiple_transfers)
}

// int32 update_deadline_seconds = 9;
inline void DataSource::clear_update_deadline_seconds() {
  _impl_.update_deadline_seconds_ = 0;
}
inline int32_t DataSource::_internal_update_deadline_seconds() const {
  return _impl_.update_deadline_seconds_;
}
inline int32_t DataSource::update_deadline_seconds() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.DataSource.update_deadline_seconds)
  return _internal_update_deadline_seconds();
}
inline void DataSource::_internal_set_update_deadline_seconds(int32_t value) {
  
  _impl_.update_deadline_seconds_ = value;
}
inline void DataSource::set_update_deadline_seconds(int32_t value) {
  _internal_set_update_deadline_seconds(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.DataSource.update_deadline_seconds)
}

// string default_schedule = 10;
inline void DataSource::clear_default_schedule() {
  _impl_.default_schedule_.ClearToEmpty();
}
inline const std::string& DataSource::default_schedule() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.DataSource.default_schedule)
  return _internal_default_schedule();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DataSource::set_default_schedule(ArgT0&& arg0, ArgT... args) {
 
 _impl_.default_schedule_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.DataSource.default_schedule)
}
inline std::string* DataSource::mutable_default_schedule() {
  std::string* _s = _internal_mutable_default_schedule();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.DataSource.default_schedule)
  return _s;
}
inline const std::string& DataSource::_internal_default_schedule() const {
  return _impl_.default_schedule_.Get();
}
inline void DataSource::_internal_set_default_schedule(const std::string& value) {
  
  _impl_.default_schedule_.Set(value, GetArenaForAllocation());
}
inline std::string* DataSource::_internal_mutable_default_schedule() {
  
  return _impl_.default_schedule_.Mutable(GetArenaForAllocation());
}
inline std::string* DataSource::release_default_schedule() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.DataSource.default_schedule)
  return _impl_.default_schedule_.Release();
}
inline void DataSource::set_allocated_default_schedule(std::string* default_schedule) {
  if (default_schedule != nullptr) {
    
  } else {
    
  }
  _impl_.default_schedule_.SetAllocated(default_schedule, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.default_schedule_.IsDefault()) {
    _impl_.default_schedule_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.DataSource.default_schedule)
}

// bool supports_custom_schedule = 11;
inline void DataSource::clear_supports_custom_schedule() {
  _impl_.supports_custom_schedule_ = false;
}
inline bool DataSource::_internal_supports_custom_schedule() const {
  return _impl_.supports_custom_schedule_;
}
inline bool DataSource::supports_custom_schedule() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.DataSource.supports_custom_schedule)
  return _internal_supports_custom_schedule();
}
inline void DataSource::_internal_set_supports_custom_schedule(bool value) {
  
  _impl_.supports_custom_schedule_ = value;
}
inline void DataSource::set_supports_custom_schedule(bool value) {
  _internal_set_supports_custom_schedule(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.DataSource.supports_custom_schedule)
}

// repeated .google.cloud.bigquery.datatransfer.v1.DataSourceParameter parameters = 12;
inline int DataSource::_internal_parameters_size() const {
  return _impl_.parameters_.size();
}
inline int DataSource::parameters_size() const {
  return _internal_parameters_size();
}
inline void DataSource::clear_parameters() {
  _impl_.parameters_.Clear();
}
inline ::google::cloud::bigquery::datatransfer::v1::DataSourceParameter* DataSource::mutable_parameters(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.DataSource.parameters)
  return _impl_.parameters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::datatransfer::v1::DataSourceParameter >*
DataSource::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.bigquery.datatransfer.v1.DataSource.parameters)
  return &_impl_.parameters_;
}
inline const ::google::cloud::bigquery::datatransfer::v1::DataSourceParameter& DataSource::_internal_parameters(int index) const {
  return _impl_.parameters_.Get(index);
}
inline const ::google::cloud::bigquery::datatransfer::v1::DataSourceParameter& DataSource::parameters(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.DataSource.parameters)
  return _internal_parameters(index);
}
inline ::google::cloud::bigquery::datatransfer::v1::DataSourceParameter* DataSource::_internal_add_parameters() {
  return _impl_.parameters_.Add();
}
inline ::google::cloud::bigquery::datatransfer::v1::DataSourceParameter* DataSource::add_parameters() {
  ::google::cloud::bigquery::datatransfer::v1::DataSourceParameter* _add = _internal_add_parameters();
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.datatransfer.v1.DataSource.parameters)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::datatransfer::v1::DataSourceParameter >&
DataSource::parameters() const {
  // @@protoc_insertion_point(field_list:google.cloud.bigquery.datatransfer.v1.DataSource.parameters)
  return _impl_.parameters_;
}

// string help_url = 13;
inline void DataSource::clear_help_url() {
  _impl_.help_url_.ClearToEmpty();
}
inline const std::string& DataSource::help_url() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.DataSource.help_url)
  return _internal_help_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DataSource::set_help_url(ArgT0&& arg0, ArgT... args) {
 
 _impl_.help_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.DataSource.help_url)
}
inline std::string* DataSource::mutable_help_url() {
  std::string* _s = _internal_mutable_help_url();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.DataSource.help_url)
  return _s;
}
inline const std::string& DataSource::_internal_help_url() const {
  return _impl_.help_url_.Get();
}
inline void DataSource::_internal_set_help_url(const std::string& value) {
  
  _impl_.help_url_.Set(value, GetArenaForAllocation());
}
inline std::string* DataSource::_internal_mutable_help_url() {
  
  return _impl_.help_url_.Mutable(GetArenaForAllocation());
}
inline std::string* DataSource::release_help_url() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.DataSource.help_url)
  return _impl_.help_url_.Release();
}
inline void DataSource::set_allocated_help_url(std::string* help_url) {
  if (help_url != nullptr) {
    
  } else {
    
  }
  _impl_.help_url_.SetAllocated(help_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.help_url_.IsDefault()) {
    _impl_.help_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.DataSource.help_url)
}

// .google.cloud.bigquery.datatransfer.v1.DataSource.AuthorizationType authorization_type = 14;
inline void DataSource::clear_authorization_type() {
  _impl_.authorization_type_ = 0;
}
inline ::google::cloud::bigquery::datatransfer::v1::DataSource_AuthorizationType DataSource::_internal_authorization_type() const {
  return static_cast< ::google::cloud::bigquery::datatransfer::v1::DataSource_AuthorizationType >(_impl_.authorization_type_);
}
inline ::google::cloud::bigquery::datatransfer::v1::DataSource_AuthorizationType DataSource::authorization_type() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.DataSource.authorization_type)
  return _internal_authorization_type();
}
inline void DataSource::_internal_set_authorization_type(::google::cloud::bigquery::datatransfer::v1::DataSource_AuthorizationType value) {
  
  _impl_.authorization_type_ = value;
}
inline void DataSource::set_authorization_type(::google::cloud::bigquery::datatransfer::v1::DataSource_AuthorizationType value) {
  _internal_set_authorization_type(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.DataSource.authorization_type)
}

// .google.cloud.bigquery.datatransfer.v1.DataSource.DataRefreshType data_refresh_type = 15;
inline void DataSource::clear_data_refresh_type() {
  _impl_.data_refresh_type_ = 0;
}
inline ::google::cloud::bigquery::datatransfer::v1::DataSource_DataRefreshType DataSource::_internal_data_refresh_type() const {
  return static_cast< ::google::cloud::bigquery::datatransfer::v1::DataSource_DataRefreshType >(_impl_.data_refresh_type_);
}
inline ::google::cloud::bigquery::datatransfer::v1::DataSource_DataRefreshType DataSource::data_refresh_type() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.DataSource.data_refresh_type)
  return _internal_data_refresh_type();
}
inline void DataSource::_internal_set_data_refresh_type(::google::cloud::bigquery::datatransfer::v1::DataSource_DataRefreshType value) {
  
  _impl_.data_refresh_type_ = value;
}
inline void DataSource::set_data_refresh_type(::google::cloud::bigquery::datatransfer::v1::DataSource_DataRefreshType value) {
  _internal_set_data_refresh_type(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.DataSource.data_refresh_type)
}

// int32 default_data_refresh_window_days = 16;
inline void DataSource::clear_default_data_refresh_window_days() {
  _impl_.default_data_refresh_window_days_ = 0;
}
inline int32_t DataSource::_internal_default_data_refresh_window_days() const {
  return _impl_.default_data_refresh_window_days_;
}
inline int32_t DataSource::default_data_refresh_window_days() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.DataSource.default_data_refresh_window_days)
  return _internal_default_data_refresh_window_days();
}
inline void DataSource::_internal_set_default_data_refresh_window_days(int32_t value) {
  
  _impl_.default_data_refresh_window_days_ = value;
}
inline void DataSource::set_default_data_refresh_window_days(int32_t value) {
  _internal_set_default_data_refresh_window_days(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.DataSource.default_data_refresh_window_days)
}

// bool manual_runs_disabled = 17;
inline void DataSource::clear_manual_runs_disabled() {
  _impl_.manual_runs_disabled_ = false;
}
inline bool DataSource::_internal_manual_runs_disabled() const {
  return _impl_.manual_runs_disabled_;
}
inline bool DataSource::manual_runs_disabled() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.DataSource.manual_runs_disabled)
  return _internal_manual_runs_disabled();
}
inline void DataSource::_internal_set_manual_runs_disabled(bool value) {
  
  _impl_.manual_runs_disabled_ = value;
}
inline void DataSource::set_manual_runs_disabled(bool value) {
  _internal_set_manual_runs_disabled(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.DataSource.manual_runs_disabled)
}

// .google.protobuf.Duration minimum_schedule_interval = 18;
inline bool DataSource::_internal_has_minimum_schedule_interval() const {
  return this != internal_default_instance() && _impl_.minimum_schedule_interval_ != nullptr;
}
inline bool DataSource::has_minimum_schedule_interval() const {
  return _internal_has_minimum_schedule_interval();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& DataSource::_internal_minimum_schedule_interval() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.minimum_schedule_interval_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& DataSource::minimum_schedule_interval() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.DataSource.minimum_schedule_interval)
  return _internal_minimum_schedule_interval();
}
inline void DataSource::unsafe_arena_set_allocated_minimum_schedule_interval(
    ::PROTOBUF_NAMESPACE_ID::Duration* minimum_schedule_interval) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.minimum_schedule_interval_);
  }
  _impl_.minimum_schedule_interval_ = minimum_schedule_interval;
  if (minimum_schedule_interval) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.datatransfer.v1.DataSource.minimum_schedule_interval)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* DataSource::release_minimum_schedule_interval() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.minimum_schedule_interval_;
  _impl_.minimum_schedule_interval_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* DataSource::unsafe_arena_release_minimum_schedule_interval() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.DataSource.minimum_schedule_interval)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.minimum_schedule_interval_;
  _impl_.minimum_schedule_interval_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* DataSource::_internal_mutable_minimum_schedule_interval() {
  
  if (_impl_.minimum_schedule_interval_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.minimum_schedule_interval_ = p;
  }
  return _impl_.minimum_schedule_interval_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* DataSource::mutable_minimum_schedule_interval() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_minimum_schedule_interval();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.DataSource.minimum_schedule_interval)
  return _msg;
}
inline void DataSource::set_allocated_minimum_schedule_interval(::PROTOBUF_NAMESPACE_ID::Duration* minimum_schedule_interval) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.minimum_schedule_interval_);
  }
  if (minimum_schedule_interval) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(minimum_schedule_interval));
    if (message_arena != submessage_arena) {
      minimum_schedule_interval = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, minimum_schedule_interval, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.minimum_schedule_interval_ = minimum_schedule_interval;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.DataSource.minimum_schedule_interval)
}

// -------------------------------------------------------------------

// GetDataSourceRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetDataSourceRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GetDataSourceRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.GetDataSourceRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetDataSourceRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.GetDataSourceRequest.name)
}
inline std::string* GetDataSourceRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.GetDataSourceRequest.name)
  return _s;
}
inline const std::string& GetDataSourceRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GetDataSourceRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetDataSourceRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetDataSourceRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.GetDataSourceRequest.name)
  return _impl_.name_.Release();
}
inline void GetDataSourceRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.GetDataSourceRequest.name)
}

// -------------------------------------------------------------------

// ListDataSourcesRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListDataSourcesRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& ListDataSourcesRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.ListDataSourcesRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListDataSourcesRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.ListDataSourcesRequest.parent)
}
inline std::string* ListDataSourcesRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.ListDataSourcesRequest.parent)
  return _s;
}
inline const std::string& ListDataSourcesRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void ListDataSourcesRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* ListDataSourcesRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* ListDataSourcesRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.ListDataSourcesRequest.parent)
  return _impl_.parent_.Release();
}
inline void ListDataSourcesRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.ListDataSourcesRequest.parent)
}

// string page_token = 3;
inline void ListDataSourcesRequest::clear_page_token() {
  _impl_.page_token_.ClearToEmpty();
}
inline const std::string& ListDataSourcesRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.ListDataSourcesRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListDataSourcesRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.ListDataSourcesRequest.page_token)
}
inline std::string* ListDataSourcesRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.ListDataSourcesRequest.page_token)
  return _s;
}
inline const std::string& ListDataSourcesRequest::_internal_page_token() const {
  return _impl_.page_token_.Get();
}
inline void ListDataSourcesRequest::_internal_set_page_token(const std::string& value) {
  
  _impl_.page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListDataSourcesRequest::_internal_mutable_page_token() {
  
  return _impl_.page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListDataSourcesRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.ListDataSourcesRequest.page_token)
  return _impl_.page_token_.Release();
}
inline void ListDataSourcesRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  _impl_.page_token_.SetAllocated(page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.page_token_.IsDefault()) {
    _impl_.page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.ListDataSourcesRequest.page_token)
}

// int32 page_size = 4;
inline void ListDataSourcesRequest::clear_page_size() {
  _impl_.page_size_ = 0;
}
inline int32_t ListDataSourcesRequest::_internal_page_size() const {
  return _impl_.page_size_;
}
inline int32_t ListDataSourcesRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.ListDataSourcesRequest.page_size)
  return _internal_page_size();
}
inline void ListDataSourcesRequest::_internal_set_page_size(int32_t value) {
  
  _impl_.page_size_ = value;
}
inline void ListDataSourcesRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.ListDataSourcesRequest.page_size)
}

// -------------------------------------------------------------------

// ListDataSourcesResponse

// repeated .google.cloud.bigquery.datatransfer.v1.DataSource data_sources = 1;
inline int ListDataSourcesResponse::_internal_data_sources_size() const {
  return _impl_.data_sources_.size();
}
inline int ListDataSourcesResponse::data_sources_size() const {
  return _internal_data_sources_size();
}
inline void ListDataSourcesResponse::clear_data_sources() {
  _impl_.data_sources_.Clear();
}
inline ::google::cloud::bigquery::datatransfer::v1::DataSource* ListDataSourcesResponse::mutable_data_sources(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.ListDataSourcesResponse.data_sources)
  return _impl_.data_sources_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::datatransfer::v1::DataSource >*
ListDataSourcesResponse::mutable_data_sources() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.bigquery.datatransfer.v1.ListDataSourcesResponse.data_sources)
  return &_impl_.data_sources_;
}
inline const ::google::cloud::bigquery::datatransfer::v1::DataSource& ListDataSourcesResponse::_internal_data_sources(int index) const {
  return _impl_.data_sources_.Get(index);
}
inline const ::google::cloud::bigquery::datatransfer::v1::DataSource& ListDataSourcesResponse::data_sources(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.ListDataSourcesResponse.data_sources)
  return _internal_data_sources(index);
}
inline ::google::cloud::bigquery::datatransfer::v1::DataSource* ListDataSourcesResponse::_internal_add_data_sources() {
  return _impl_.data_sources_.Add();
}
inline ::google::cloud::bigquery::datatransfer::v1::DataSource* ListDataSourcesResponse::add_data_sources() {
  ::google::cloud::bigquery::datatransfer::v1::DataSource* _add = _internal_add_data_sources();
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.datatransfer.v1.ListDataSourcesResponse.data_sources)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::datatransfer::v1::DataSource >&
ListDataSourcesResponse::data_sources() const {
  // @@protoc_insertion_point(field_list:google.cloud.bigquery.datatransfer.v1.ListDataSourcesResponse.data_sources)
  return _impl_.data_sources_;
}

// string next_page_token = 2 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void ListDataSourcesResponse::clear_next_page_token() {
  _impl_.next_page_token_.ClearToEmpty();
}
inline const std::string& ListDataSourcesResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.ListDataSourcesResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListDataSourcesResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.next_page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.ListDataSourcesResponse.next_page_token)
}
inline std::string* ListDataSourcesResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.ListDataSourcesResponse.next_page_token)
  return _s;
}
inline const std::string& ListDataSourcesResponse::_internal_next_page_token() const {
  return _impl_.next_page_token_.Get();
}
inline void ListDataSourcesResponse::_internal_set_next_page_token(const std::string& value) {
  
  _impl_.next_page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListDataSourcesResponse::_internal_mutable_next_page_token() {
  
  return _impl_.next_page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListDataSourcesResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.ListDataSourcesResponse.next_page_token)
  return _impl_.next_page_token_.Release();
}
inline void ListDataSourcesResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  _impl_.next_page_token_.SetAllocated(next_page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.next_page_token_.IsDefault()) {
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.ListDataSourcesResponse.next_page_token)
}

// -------------------------------------------------------------------

// CreateTransferConfigRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreateTransferConfigRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& CreateTransferConfigRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.CreateTransferConfigRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateTransferConfigRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.CreateTransferConfigRequest.parent)
}
inline std::string* CreateTransferConfigRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.CreateTransferConfigRequest.parent)
  return _s;
}
inline const std::string& CreateTransferConfigRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void CreateTransferConfigRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateTransferConfigRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateTransferConfigRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.CreateTransferConfigRequest.parent)
  return _impl_.parent_.Release();
}
inline void CreateTransferConfigRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.CreateTransferConfigRequest.parent)
}

// .google.cloud.bigquery.datatransfer.v1.TransferConfig transfer_config = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateTransferConfigRequest::_internal_has_transfer_config() const {
  return this != internal_default_instance() && _impl_.transfer_config_ != nullptr;
}
inline bool CreateTransferConfigRequest::has_transfer_config() const {
  return _internal_has_transfer_config();
}
inline const ::google::cloud::bigquery::datatransfer::v1::TransferConfig& CreateTransferConfigRequest::_internal_transfer_config() const {
  const ::google::cloud::bigquery::datatransfer::v1::TransferConfig* p = _impl_.transfer_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::datatransfer::v1::TransferConfig&>(
      ::google::cloud::bigquery::datatransfer::v1::_TransferConfig_default_instance_);
}
inline const ::google::cloud::bigquery::datatransfer::v1::TransferConfig& CreateTransferConfigRequest::transfer_config() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.CreateTransferConfigRequest.transfer_config)
  return _internal_transfer_config();
}
inline void CreateTransferConfigRequest::unsafe_arena_set_allocated_transfer_config(
    ::google::cloud::bigquery::datatransfer::v1::TransferConfig* transfer_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transfer_config_);
  }
  _impl_.transfer_config_ = transfer_config;
  if (transfer_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.datatransfer.v1.CreateTransferConfigRequest.transfer_config)
}
inline ::google::cloud::bigquery::datatransfer::v1::TransferConfig* CreateTransferConfigRequest::release_transfer_config() {
  
  ::google::cloud::bigquery::datatransfer::v1::TransferConfig* temp = _impl_.transfer_config_;
  _impl_.transfer_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::datatransfer::v1::TransferConfig* CreateTransferConfigRequest::unsafe_arena_release_transfer_config() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.CreateTransferConfigRequest.transfer_config)
  
  ::google::cloud::bigquery::datatransfer::v1::TransferConfig* temp = _impl_.transfer_config_;
  _impl_.transfer_config_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::datatransfer::v1::TransferConfig* CreateTransferConfigRequest::_internal_mutable_transfer_config() {
  
  if (_impl_.transfer_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::datatransfer::v1::TransferConfig>(GetArenaForAllocation());
    _impl_.transfer_config_ = p;
  }
  return _impl_.transfer_config_;
}
inline ::google::cloud::bigquery::datatransfer::v1::TransferConfig* CreateTransferConfigRequest::mutable_transfer_config() {
  ::google::cloud::bigquery::datatransfer::v1::TransferConfig* _msg = _internal_mutable_transfer_config();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.CreateTransferConfigRequest.transfer_config)
  return _msg;
}
inline void CreateTransferConfigRequest::set_allocated_transfer_config(::google::cloud::bigquery::datatransfer::v1::TransferConfig* transfer_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transfer_config_);
  }
  if (transfer_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transfer_config));
    if (message_arena != submessage_arena) {
      transfer_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transfer_config, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.transfer_config_ = transfer_config;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.CreateTransferConfigRequest.transfer_config)
}

// string authorization_code = 3;
inline void CreateTransferConfigRequest::clear_authorization_code() {
  _impl_.authorization_code_.ClearToEmpty();
}
inline const std::string& CreateTransferConfigRequest::authorization_code() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.CreateTransferConfigRequest.authorization_code)
  return _internal_authorization_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateTransferConfigRequest::set_authorization_code(ArgT0&& arg0, ArgT... args) {
 
 _impl_.authorization_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.CreateTransferConfigRequest.authorization_code)
}
inline std::string* CreateTransferConfigRequest::mutable_authorization_code() {
  std::string* _s = _internal_mutable_authorization_code();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.CreateTransferConfigRequest.authorization_code)
  return _s;
}
inline const std::string& CreateTransferConfigRequest::_internal_authorization_code() const {
  return _impl_.authorization_code_.Get();
}
inline void CreateTransferConfigRequest::_internal_set_authorization_code(const std::string& value) {
  
  _impl_.authorization_code_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateTransferConfigRequest::_internal_mutable_authorization_code() {
  
  return _impl_.authorization_code_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateTransferConfigRequest::release_authorization_code() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.CreateTransferConfigRequest.authorization_code)
  return _impl_.authorization_code_.Release();
}
inline void CreateTransferConfigRequest::set_allocated_authorization_code(std::string* authorization_code) {
  if (authorization_code != nullptr) {
    
  } else {
    
  }
  _impl_.authorization_code_.SetAllocated(authorization_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.authorization_code_.IsDefault()) {
    _impl_.authorization_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.CreateTransferConfigRequest.authorization_code)
}

// string version_info = 5;
inline void CreateTransferConfigRequest::clear_version_info() {
  _impl_.version_info_.ClearToEmpty();
}
inline const std::string& CreateTransferConfigRequest::version_info() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.CreateTransferConfigRequest.version_info)
  return _internal_version_info();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateTransferConfigRequest::set_version_info(ArgT0&& arg0, ArgT... args) {
 
 _impl_.version_info_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.CreateTransferConfigRequest.version_info)
}
inline std::string* CreateTransferConfigRequest::mutable_version_info() {
  std::string* _s = _internal_mutable_version_info();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.CreateTransferConfigRequest.version_info)
  return _s;
}
inline const std::string& CreateTransferConfigRequest::_internal_version_info() const {
  return _impl_.version_info_.Get();
}
inline void CreateTransferConfigRequest::_internal_set_version_info(const std::string& value) {
  
  _impl_.version_info_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateTransferConfigRequest::_internal_mutable_version_info() {
  
  return _impl_.version_info_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateTransferConfigRequest::release_version_info() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.CreateTransferConfigRequest.version_info)
  return _impl_.version_info_.Release();
}
inline void CreateTransferConfigRequest::set_allocated_version_info(std::string* version_info) {
  if (version_info != nullptr) {
    
  } else {
    
  }
  _impl_.version_info_.SetAllocated(version_info, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.version_info_.IsDefault()) {
    _impl_.version_info_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.CreateTransferConfigRequest.version_info)
}

// string service_account_name = 6;
inline void CreateTransferConfigRequest::clear_service_account_name() {
  _impl_.service_account_name_.ClearToEmpty();
}
inline const std::string& CreateTransferConfigRequest::service_account_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.CreateTransferConfigRequest.service_account_name)
  return _internal_service_account_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateTransferConfigRequest::set_service_account_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.service_account_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.CreateTransferConfigRequest.service_account_name)
}
inline std::string* CreateTransferConfigRequest::mutable_service_account_name() {
  std::string* _s = _internal_mutable_service_account_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.CreateTransferConfigRequest.service_account_name)
  return _s;
}
inline const std::string& CreateTransferConfigRequest::_internal_service_account_name() const {
  return _impl_.service_account_name_.Get();
}
inline void CreateTransferConfigRequest::_internal_set_service_account_name(const std::string& value) {
  
  _impl_.service_account_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateTransferConfigRequest::_internal_mutable_service_account_name() {
  
  return _impl_.service_account_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateTransferConfigRequest::release_service_account_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.CreateTransferConfigRequest.service_account_name)
  return _impl_.service_account_name_.Release();
}
inline void CreateTransferConfigRequest::set_allocated_service_account_name(std::string* service_account_name) {
  if (service_account_name != nullptr) {
    
  } else {
    
  }
  _impl_.service_account_name_.SetAllocated(service_account_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.service_account_name_.IsDefault()) {
    _impl_.service_account_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.CreateTransferConfigRequest.service_account_name)
}

// -------------------------------------------------------------------

// UpdateTransferConfigRequest

// .google.cloud.bigquery.datatransfer.v1.TransferConfig transfer_config = 1 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateTransferConfigRequest::_internal_has_transfer_config() const {
  return this != internal_default_instance() && _impl_.transfer_config_ != nullptr;
}
inline bool UpdateTransferConfigRequest::has_transfer_config() const {
  return _internal_has_transfer_config();
}
inline const ::google::cloud::bigquery::datatransfer::v1::TransferConfig& UpdateTransferConfigRequest::_internal_transfer_config() const {
  const ::google::cloud::bigquery::datatransfer::v1::TransferConfig* p = _impl_.transfer_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::datatransfer::v1::TransferConfig&>(
      ::google::cloud::bigquery::datatransfer::v1::_TransferConfig_default_instance_);
}
inline const ::google::cloud::bigquery::datatransfer::v1::TransferConfig& UpdateTransferConfigRequest::transfer_config() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.UpdateTransferConfigRequest.transfer_config)
  return _internal_transfer_config();
}
inline void UpdateTransferConfigRequest::unsafe_arena_set_allocated_transfer_config(
    ::google::cloud::bigquery::datatransfer::v1::TransferConfig* transfer_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transfer_config_);
  }
  _impl_.transfer_config_ = transfer_config;
  if (transfer_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.datatransfer.v1.UpdateTransferConfigRequest.transfer_config)
}
inline ::google::cloud::bigquery::datatransfer::v1::TransferConfig* UpdateTransferConfigRequest::release_transfer_config() {
  
  ::google::cloud::bigquery::datatransfer::v1::TransferConfig* temp = _impl_.transfer_config_;
  _impl_.transfer_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::datatransfer::v1::TransferConfig* UpdateTransferConfigRequest::unsafe_arena_release_transfer_config() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.UpdateTransferConfigRequest.transfer_config)
  
  ::google::cloud::bigquery::datatransfer::v1::TransferConfig* temp = _impl_.transfer_config_;
  _impl_.transfer_config_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::datatransfer::v1::TransferConfig* UpdateTransferConfigRequest::_internal_mutable_transfer_config() {
  
  if (_impl_.transfer_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::datatransfer::v1::TransferConfig>(GetArenaForAllocation());
    _impl_.transfer_config_ = p;
  }
  return _impl_.transfer_config_;
}
inline ::google::cloud::bigquery::datatransfer::v1::TransferConfig* UpdateTransferConfigRequest::mutable_transfer_config() {
  ::google::cloud::bigquery::datatransfer::v1::TransferConfig* _msg = _internal_mutable_transfer_config();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.UpdateTransferConfigRequest.transfer_config)
  return _msg;
}
inline void UpdateTransferConfigRequest::set_allocated_transfer_config(::google::cloud::bigquery::datatransfer::v1::TransferConfig* transfer_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transfer_config_);
  }
  if (transfer_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transfer_config));
    if (message_arena != submessage_arena) {
      transfer_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transfer_config, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.transfer_config_ = transfer_config;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.UpdateTransferConfigRequest.transfer_config)
}

// string authorization_code = 3;
inline void UpdateTransferConfigRequest::clear_authorization_code() {
  _impl_.authorization_code_.ClearToEmpty();
}
inline const std::string& UpdateTransferConfigRequest::authorization_code() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.UpdateTransferConfigRequest.authorization_code)
  return _internal_authorization_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateTransferConfigRequest::set_authorization_code(ArgT0&& arg0, ArgT... args) {
 
 _impl_.authorization_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.UpdateTransferConfigRequest.authorization_code)
}
inline std::string* UpdateTransferConfigRequest::mutable_authorization_code() {
  std::string* _s = _internal_mutable_authorization_code();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.UpdateTransferConfigRequest.authorization_code)
  return _s;
}
inline const std::string& UpdateTransferConfigRequest::_internal_authorization_code() const {
  return _impl_.authorization_code_.Get();
}
inline void UpdateTransferConfigRequest::_internal_set_authorization_code(const std::string& value) {
  
  _impl_.authorization_code_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdateTransferConfigRequest::_internal_mutable_authorization_code() {
  
  return _impl_.authorization_code_.Mutable(GetArenaForAllocation());
}
inline std::string* UpdateTransferConfigRequest::release_authorization_code() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.UpdateTransferConfigRequest.authorization_code)
  return _impl_.authorization_code_.Release();
}
inline void UpdateTransferConfigRequest::set_allocated_authorization_code(std::string* authorization_code) {
  if (authorization_code != nullptr) {
    
  } else {
    
  }
  _impl_.authorization_code_.SetAllocated(authorization_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.authorization_code_.IsDefault()) {
    _impl_.authorization_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.UpdateTransferConfigRequest.authorization_code)
}

// .google.protobuf.FieldMask update_mask = 4 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateTransferConfigRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && _impl_.update_mask_ != nullptr;
}
inline bool UpdateTransferConfigRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateTransferConfigRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = _impl_.update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateTransferConfigRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.UpdateTransferConfigRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateTransferConfigRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  _impl_.update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.datatransfer.v1.UpdateTransferConfigRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateTransferConfigRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateTransferConfigRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.UpdateTransferConfigRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateTransferConfigRequest::_internal_mutable_update_mask() {
  
  if (_impl_.update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    _impl_.update_mask_ = p;
  }
  return _impl_.update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateTransferConfigRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.UpdateTransferConfigRequest.update_mask)
  return _msg;
}
inline void UpdateTransferConfigRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.UpdateTransferConfigRequest.update_mask)
}

// string version_info = 5;
inline void UpdateTransferConfigRequest::clear_version_info() {
  _impl_.version_info_.ClearToEmpty();
}
inline const std::string& UpdateTransferConfigRequest::version_info() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.UpdateTransferConfigRequest.version_info)
  return _internal_version_info();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateTransferConfigRequest::set_version_info(ArgT0&& arg0, ArgT... args) {
 
 _impl_.version_info_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.UpdateTransferConfigRequest.version_info)
}
inline std::string* UpdateTransferConfigRequest::mutable_version_info() {
  std::string* _s = _internal_mutable_version_info();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.UpdateTransferConfigRequest.version_info)
  return _s;
}
inline const std::string& UpdateTransferConfigRequest::_internal_version_info() const {
  return _impl_.version_info_.Get();
}
inline void UpdateTransferConfigRequest::_internal_set_version_info(const std::string& value) {
  
  _impl_.version_info_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdateTransferConfigRequest::_internal_mutable_version_info() {
  
  return _impl_.version_info_.Mutable(GetArenaForAllocation());
}
inline std::string* UpdateTransferConfigRequest::release_version_info() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.UpdateTransferConfigRequest.version_info)
  return _impl_.version_info_.Release();
}
inline void UpdateTransferConfigRequest::set_allocated_version_info(std::string* version_info) {
  if (version_info != nullptr) {
    
  } else {
    
  }
  _impl_.version_info_.SetAllocated(version_info, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.version_info_.IsDefault()) {
    _impl_.version_info_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.UpdateTransferConfigRequest.version_info)
}

// string service_account_name = 6;
inline void UpdateTransferConfigRequest::clear_service_account_name() {
  _impl_.service_account_name_.ClearToEmpty();
}
inline const std::string& UpdateTransferConfigRequest::service_account_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.UpdateTransferConfigRequest.service_account_name)
  return _internal_service_account_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateTransferConfigRequest::set_service_account_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.service_account_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.UpdateTransferConfigRequest.service_account_name)
}
inline std::string* UpdateTransferConfigRequest::mutable_service_account_name() {
  std::string* _s = _internal_mutable_service_account_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.UpdateTransferConfigRequest.service_account_name)
  return _s;
}
inline const std::string& UpdateTransferConfigRequest::_internal_service_account_name() const {
  return _impl_.service_account_name_.Get();
}
inline void UpdateTransferConfigRequest::_internal_set_service_account_name(const std::string& value) {
  
  _impl_.service_account_name_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdateTransferConfigRequest::_internal_mutable_service_account_name() {
  
  return _impl_.service_account_name_.Mutable(GetArenaForAllocation());
}
inline std::string* UpdateTransferConfigRequest::release_service_account_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.UpdateTransferConfigRequest.service_account_name)
  return _impl_.service_account_name_.Release();
}
inline void UpdateTransferConfigRequest::set_allocated_service_account_name(std::string* service_account_name) {
  if (service_account_name != nullptr) {
    
  } else {
    
  }
  _impl_.service_account_name_.SetAllocated(service_account_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.service_account_name_.IsDefault()) {
    _impl_.service_account_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.UpdateTransferConfigRequest.service_account_name)
}

// -------------------------------------------------------------------

// GetTransferConfigRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetTransferConfigRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GetTransferConfigRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.GetTransferConfigRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetTransferConfigRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.GetTransferConfigRequest.name)
}
inline std::string* GetTransferConfigRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.GetTransferConfigRequest.name)
  return _s;
}
inline const std::string& GetTransferConfigRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GetTransferConfigRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetTransferConfigRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetTransferConfigRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.GetTransferConfigRequest.name)
  return _impl_.name_.Release();
}
inline void GetTransferConfigRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.GetTransferConfigRequest.name)
}

// -------------------------------------------------------------------

// DeleteTransferConfigRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteTransferConfigRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DeleteTransferConfigRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.DeleteTransferConfigRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteTransferConfigRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.DeleteTransferConfigRequest.name)
}
inline std::string* DeleteTransferConfigRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.DeleteTransferConfigRequest.name)
  return _s;
}
inline const std::string& DeleteTransferConfigRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DeleteTransferConfigRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteTransferConfigRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteTransferConfigRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.DeleteTransferConfigRequest.name)
  return _impl_.name_.Release();
}
inline void DeleteTransferConfigRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.DeleteTransferConfigRequest.name)
}

// -------------------------------------------------------------------

// GetTransferRunRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetTransferRunRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GetTransferRunRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.GetTransferRunRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetTransferRunRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.GetTransferRunRequest.name)
}
inline std::string* GetTransferRunRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.GetTransferRunRequest.name)
  return _s;
}
inline const std::string& GetTransferRunRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GetTransferRunRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetTransferRunRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetTransferRunRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.GetTransferRunRequest.name)
  return _impl_.name_.Release();
}
inline void GetTransferRunRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.GetTransferRunRequest.name)
}

// -------------------------------------------------------------------

// DeleteTransferRunRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteTransferRunRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DeleteTransferRunRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.DeleteTransferRunRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteTransferRunRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.DeleteTransferRunRequest.name)
}
inline std::string* DeleteTransferRunRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.DeleteTransferRunRequest.name)
  return _s;
}
inline const std::string& DeleteTransferRunRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DeleteTransferRunRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteTransferRunRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteTransferRunRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.DeleteTransferRunRequest.name)
  return _impl_.name_.Release();
}
inline void DeleteTransferRunRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.DeleteTransferRunRequest.name)
}

// -------------------------------------------------------------------

// ListTransferConfigsRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListTransferConfigsRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& ListTransferConfigsRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListTransferConfigsRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsRequest.parent)
}
inline std::string* ListTransferConfigsRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsRequest.parent)
  return _s;
}
inline const std::string& ListTransferConfigsRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void ListTransferConfigsRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* ListTransferConfigsRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* ListTransferConfigsRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsRequest.parent)
  return _impl_.parent_.Release();
}
inline void ListTransferConfigsRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsRequest.parent)
}

// repeated string data_source_ids = 2;
inline int ListTransferConfigsRequest::_internal_data_source_ids_size() const {
  return _impl_.data_source_ids_.size();
}
inline int ListTransferConfigsRequest::data_source_ids_size() const {
  return _internal_data_source_ids_size();
}
inline void ListTransferConfigsRequest::clear_data_source_ids() {
  _impl_.data_source_ids_.Clear();
}
inline std::string* ListTransferConfigsRequest::add_data_source_ids() {
  std::string* _s = _internal_add_data_source_ids();
  // @@protoc_insertion_point(field_add_mutable:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsRequest.data_source_ids)
  return _s;
}
inline const std::string& ListTransferConfigsRequest::_internal_data_source_ids(int index) const {
  return _impl_.data_source_ids_.Get(index);
}
inline const std::string& ListTransferConfigsRequest::data_source_ids(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsRequest.data_source_ids)
  return _internal_data_source_ids(index);
}
inline std::string* ListTransferConfigsRequest::mutable_data_source_ids(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsRequest.data_source_ids)
  return _impl_.data_source_ids_.Mutable(index);
}
inline void ListTransferConfigsRequest::set_data_source_ids(int index, const std::string& value) {
  _impl_.data_source_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsRequest.data_source_ids)
}
inline void ListTransferConfigsRequest::set_data_source_ids(int index, std::string&& value) {
  _impl_.data_source_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsRequest.data_source_ids)
}
inline void ListTransferConfigsRequest::set_data_source_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.data_source_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsRequest.data_source_ids)
}
inline void ListTransferConfigsRequest::set_data_source_ids(int index, const char* value, size_t size) {
  _impl_.data_source_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsRequest.data_source_ids)
}
inline std::string* ListTransferConfigsRequest::_internal_add_data_source_ids() {
  return _impl_.data_source_ids_.Add();
}
inline void ListTransferConfigsRequest::add_data_source_ids(const std::string& value) {
  _impl_.data_source_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsRequest.data_source_ids)
}
inline void ListTransferConfigsRequest::add_data_source_ids(std::string&& value) {
  _impl_.data_source_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsRequest.data_source_ids)
}
inline void ListTransferConfigsRequest::add_data_source_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.data_source_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsRequest.data_source_ids)
}
inline void ListTransferConfigsRequest::add_data_source_ids(const char* value, size_t size) {
  _impl_.data_source_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsRequest.data_source_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListTransferConfigsRequest::data_source_ids() const {
  // @@protoc_insertion_point(field_list:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsRequest.data_source_ids)
  return _impl_.data_source_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListTransferConfigsRequest::mutable_data_source_ids() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsRequest.data_source_ids)
  return &_impl_.data_source_ids_;
}

// string page_token = 3;
inline void ListTransferConfigsRequest::clear_page_token() {
  _impl_.page_token_.ClearToEmpty();
}
inline const std::string& ListTransferConfigsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListTransferConfigsRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsRequest.page_token)
}
inline std::string* ListTransferConfigsRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsRequest.page_token)
  return _s;
}
inline const std::string& ListTransferConfigsRequest::_internal_page_token() const {
  return _impl_.page_token_.Get();
}
inline void ListTransferConfigsRequest::_internal_set_page_token(const std::string& value) {
  
  _impl_.page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListTransferConfigsRequest::_internal_mutable_page_token() {
  
  return _impl_.page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListTransferConfigsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsRequest.page_token)
  return _impl_.page_token_.Release();
}
inline void ListTransferConfigsRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  _impl_.page_token_.SetAllocated(page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.page_token_.IsDefault()) {
    _impl_.page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsRequest.page_token)
}

// int32 page_size = 4;
inline void ListTransferConfigsRequest::clear_page_size() {
  _impl_.page_size_ = 0;
}
inline int32_t ListTransferConfigsRequest::_internal_page_size() const {
  return _impl_.page_size_;
}
inline int32_t ListTransferConfigsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsRequest.page_size)
  return _internal_page_size();
}
inline void ListTransferConfigsRequest::_internal_set_page_size(int32_t value) {
  
  _impl_.page_size_ = value;
}
inline void ListTransferConfigsRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsRequest.page_size)
}

// -------------------------------------------------------------------

// ListTransferConfigsResponse

// repeated .google.cloud.bigquery.datatransfer.v1.TransferConfig transfer_configs = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline int ListTransferConfigsResponse::_internal_transfer_configs_size() const {
  return _impl_.transfer_configs_.size();
}
inline int ListTransferConfigsResponse::transfer_configs_size() const {
  return _internal_transfer_configs_size();
}
inline ::google::cloud::bigquery::datatransfer::v1::TransferConfig* ListTransferConfigsResponse::mutable_transfer_configs(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsResponse.transfer_configs)
  return _impl_.transfer_configs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::datatransfer::v1::TransferConfig >*
ListTransferConfigsResponse::mutable_transfer_configs() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsResponse.transfer_configs)
  return &_impl_.transfer_configs_;
}
inline const ::google::cloud::bigquery::datatransfer::v1::TransferConfig& ListTransferConfigsResponse::_internal_transfer_configs(int index) const {
  return _impl_.transfer_configs_.Get(index);
}
inline const ::google::cloud::bigquery::datatransfer::v1::TransferConfig& ListTransferConfigsResponse::transfer_configs(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsResponse.transfer_configs)
  return _internal_transfer_configs(index);
}
inline ::google::cloud::bigquery::datatransfer::v1::TransferConfig* ListTransferConfigsResponse::_internal_add_transfer_configs() {
  return _impl_.transfer_configs_.Add();
}
inline ::google::cloud::bigquery::datatransfer::v1::TransferConfig* ListTransferConfigsResponse::add_transfer_configs() {
  ::google::cloud::bigquery::datatransfer::v1::TransferConfig* _add = _internal_add_transfer_configs();
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsResponse.transfer_configs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::datatransfer::v1::TransferConfig >&
ListTransferConfigsResponse::transfer_configs() const {
  // @@protoc_insertion_point(field_list:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsResponse.transfer_configs)
  return _impl_.transfer_configs_;
}

// string next_page_token = 2 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void ListTransferConfigsResponse::clear_next_page_token() {
  _impl_.next_page_token_.ClearToEmpty();
}
inline const std::string& ListTransferConfigsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListTransferConfigsResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.next_page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsResponse.next_page_token)
}
inline std::string* ListTransferConfigsResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsResponse.next_page_token)
  return _s;
}
inline const std::string& ListTransferConfigsResponse::_internal_next_page_token() const {
  return _impl_.next_page_token_.Get();
}
inline void ListTransferConfigsResponse::_internal_set_next_page_token(const std::string& value) {
  
  _impl_.next_page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListTransferConfigsResponse::_internal_mutable_next_page_token() {
  
  return _impl_.next_page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListTransferConfigsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsResponse.next_page_token)
  return _impl_.next_page_token_.Release();
}
inline void ListTransferConfigsResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  _impl_.next_page_token_.SetAllocated(next_page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.next_page_token_.IsDefault()) {
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsResponse.next_page_token)
}

// -------------------------------------------------------------------

// ListTransferRunsRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListTransferRunsRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& ListTransferRunsRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.ListTransferRunsRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListTransferRunsRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.ListTransferRunsRequest.parent)
}
inline std::string* ListTransferRunsRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.ListTransferRunsRequest.parent)
  return _s;
}
inline const std::string& ListTransferRunsRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void ListTransferRunsRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* ListTransferRunsRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* ListTransferRunsRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.ListTransferRunsRequest.parent)
  return _impl_.parent_.Release();
}
inline void ListTransferRunsRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.ListTransferRunsRequest.parent)
}

// repeated .google.cloud.bigquery.datatransfer.v1.TransferState states = 2;
inline int ListTransferRunsRequest::_internal_states_size() const {
  return _impl_.states_.size();
}
inline int ListTransferRunsRequest::states_size() const {
  return _internal_states_size();
}
inline void ListTransferRunsRequest::clear_states() {
  _impl_.states_.Clear();
}
inline ::google::cloud::bigquery::datatransfer::v1::TransferState ListTransferRunsRequest::_internal_states(int index) const {
  return static_cast< ::google::cloud::bigquery::datatransfer::v1::TransferState >(_impl_.states_.Get(index));
}
inline ::google::cloud::bigquery::datatransfer::v1::TransferState ListTransferRunsRequest::states(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.ListTransferRunsRequest.states)
  return _internal_states(index);
}
inline void ListTransferRunsRequest::set_states(int index, ::google::cloud::bigquery::datatransfer::v1::TransferState value) {
  _impl_.states_.Set(index, value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.ListTransferRunsRequest.states)
}
inline void ListTransferRunsRequest::_internal_add_states(::google::cloud::bigquery::datatransfer::v1::TransferState value) {
  _impl_.states_.Add(value);
}
inline void ListTransferRunsRequest::add_states(::google::cloud::bigquery::datatransfer::v1::TransferState value) {
  _internal_add_states(value);
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.datatransfer.v1.ListTransferRunsRequest.states)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
ListTransferRunsRequest::states() const {
  // @@protoc_insertion_point(field_list:google.cloud.bigquery.datatransfer.v1.ListTransferRunsRequest.states)
  return _impl_.states_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
ListTransferRunsRequest::_internal_mutable_states() {
  return &_impl_.states_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
ListTransferRunsRequest::mutable_states() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.bigquery.datatransfer.v1.ListTransferRunsRequest.states)
  return _internal_mutable_states();
}

// string page_token = 3;
inline void ListTransferRunsRequest::clear_page_token() {
  _impl_.page_token_.ClearToEmpty();
}
inline const std::string& ListTransferRunsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.ListTransferRunsRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListTransferRunsRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.ListTransferRunsRequest.page_token)
}
inline std::string* ListTransferRunsRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.ListTransferRunsRequest.page_token)
  return _s;
}
inline const std::string& ListTransferRunsRequest::_internal_page_token() const {
  return _impl_.page_token_.Get();
}
inline void ListTransferRunsRequest::_internal_set_page_token(const std::string& value) {
  
  _impl_.page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListTransferRunsRequest::_internal_mutable_page_token() {
  
  return _impl_.page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListTransferRunsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.ListTransferRunsRequest.page_token)
  return _impl_.page_token_.Release();
}
inline void ListTransferRunsRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  _impl_.page_token_.SetAllocated(page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.page_token_.IsDefault()) {
    _impl_.page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.ListTransferRunsRequest.page_token)
}

// int32 page_size = 4;
inline void ListTransferRunsRequest::clear_page_size() {
  _impl_.page_size_ = 0;
}
inline int32_t ListTransferRunsRequest::_internal_page_size() const {
  return _impl_.page_size_;
}
inline int32_t ListTransferRunsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.ListTransferRunsRequest.page_size)
  return _internal_page_size();
}
inline void ListTransferRunsRequest::_internal_set_page_size(int32_t value) {
  
  _impl_.page_size_ = value;
}
inline void ListTransferRunsRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.ListTransferRunsRequest.page_size)
}

// .google.cloud.bigquery.datatransfer.v1.ListTransferRunsRequest.RunAttempt run_attempt = 5;
inline void ListTransferRunsRequest::clear_run_attempt() {
  _impl_.run_attempt_ = 0;
}
inline ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsRequest_RunAttempt ListTransferRunsRequest::_internal_run_attempt() const {
  return static_cast< ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsRequest_RunAttempt >(_impl_.run_attempt_);
}
inline ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsRequest_RunAttempt ListTransferRunsRequest::run_attempt() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.ListTransferRunsRequest.run_attempt)
  return _internal_run_attempt();
}
inline void ListTransferRunsRequest::_internal_set_run_attempt(::google::cloud::bigquery::datatransfer::v1::ListTransferRunsRequest_RunAttempt value) {
  
  _impl_.run_attempt_ = value;
}
inline void ListTransferRunsRequest::set_run_attempt(::google::cloud::bigquery::datatransfer::v1::ListTransferRunsRequest_RunAttempt value) {
  _internal_set_run_attempt(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.ListTransferRunsRequest.run_attempt)
}

// -------------------------------------------------------------------

// ListTransferRunsResponse

// repeated .google.cloud.bigquery.datatransfer.v1.TransferRun transfer_runs = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline int ListTransferRunsResponse::_internal_transfer_runs_size() const {
  return _impl_.transfer_runs_.size();
}
inline int ListTransferRunsResponse::transfer_runs_size() const {
  return _internal_transfer_runs_size();
}
inline ::google::cloud::bigquery::datatransfer::v1::TransferRun* ListTransferRunsResponse::mutable_transfer_runs(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.ListTransferRunsResponse.transfer_runs)
  return _impl_.transfer_runs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::datatransfer::v1::TransferRun >*
ListTransferRunsResponse::mutable_transfer_runs() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.bigquery.datatransfer.v1.ListTransferRunsResponse.transfer_runs)
  return &_impl_.transfer_runs_;
}
inline const ::google::cloud::bigquery::datatransfer::v1::TransferRun& ListTransferRunsResponse::_internal_transfer_runs(int index) const {
  return _impl_.transfer_runs_.Get(index);
}
inline const ::google::cloud::bigquery::datatransfer::v1::TransferRun& ListTransferRunsResponse::transfer_runs(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.ListTransferRunsResponse.transfer_runs)
  return _internal_transfer_runs(index);
}
inline ::google::cloud::bigquery::datatransfer::v1::TransferRun* ListTransferRunsResponse::_internal_add_transfer_runs() {
  return _impl_.transfer_runs_.Add();
}
inline ::google::cloud::bigquery::datatransfer::v1::TransferRun* ListTransferRunsResponse::add_transfer_runs() {
  ::google::cloud::bigquery::datatransfer::v1::TransferRun* _add = _internal_add_transfer_runs();
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.datatransfer.v1.ListTransferRunsResponse.transfer_runs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::datatransfer::v1::TransferRun >&
ListTransferRunsResponse::transfer_runs() const {
  // @@protoc_insertion_point(field_list:google.cloud.bigquery.datatransfer.v1.ListTransferRunsResponse.transfer_runs)
  return _impl_.transfer_runs_;
}

// string next_page_token = 2 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void ListTransferRunsResponse::clear_next_page_token() {
  _impl_.next_page_token_.ClearToEmpty();
}
inline const std::string& ListTransferRunsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.ListTransferRunsResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListTransferRunsResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.next_page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.ListTransferRunsResponse.next_page_token)
}
inline std::string* ListTransferRunsResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.ListTransferRunsResponse.next_page_token)
  return _s;
}
inline const std::string& ListTransferRunsResponse::_internal_next_page_token() const {
  return _impl_.next_page_token_.Get();
}
inline void ListTransferRunsResponse::_internal_set_next_page_token(const std::string& value) {
  
  _impl_.next_page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListTransferRunsResponse::_internal_mutable_next_page_token() {
  
  return _impl_.next_page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListTransferRunsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.ListTransferRunsResponse.next_page_token)
  return _impl_.next_page_token_.Release();
}
inline void ListTransferRunsResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  _impl_.next_page_token_.SetAllocated(next_page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.next_page_token_.IsDefault()) {
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.ListTransferRunsResponse.next_page_token)
}

// -------------------------------------------------------------------

// ListTransferLogsRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListTransferLogsRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& ListTransferLogsRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.ListTransferLogsRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListTransferLogsRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.ListTransferLogsRequest.parent)
}
inline std::string* ListTransferLogsRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.ListTransferLogsRequest.parent)
  return _s;
}
inline const std::string& ListTransferLogsRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void ListTransferLogsRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* ListTransferLogsRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* ListTransferLogsRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.ListTransferLogsRequest.parent)
  return _impl_.parent_.Release();
}
inline void ListTransferLogsRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.ListTransferLogsRequest.parent)
}

// string page_token = 4;
inline void ListTransferLogsRequest::clear_page_token() {
  _impl_.page_token_.ClearToEmpty();
}
inline const std::string& ListTransferLogsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.ListTransferLogsRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListTransferLogsRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.ListTransferLogsRequest.page_token)
}
inline std::string* ListTransferLogsRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.ListTransferLogsRequest.page_token)
  return _s;
}
inline const std::string& ListTransferLogsRequest::_internal_page_token() const {
  return _impl_.page_token_.Get();
}
inline void ListTransferLogsRequest::_internal_set_page_token(const std::string& value) {
  
  _impl_.page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListTransferLogsRequest::_internal_mutable_page_token() {
  
  return _impl_.page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListTransferLogsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.ListTransferLogsRequest.page_token)
  return _impl_.page_token_.Release();
}
inline void ListTransferLogsRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  _impl_.page_token_.SetAllocated(page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.page_token_.IsDefault()) {
    _impl_.page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.ListTransferLogsRequest.page_token)
}

// int32 page_size = 5;
inline void ListTransferLogsRequest::clear_page_size() {
  _impl_.page_size_ = 0;
}
inline int32_t ListTransferLogsRequest::_internal_page_size() const {
  return _impl_.page_size_;
}
inline int32_t ListTransferLogsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.ListTransferLogsRequest.page_size)
  return _internal_page_size();
}
inline void ListTransferLogsRequest::_internal_set_page_size(int32_t value) {
  
  _impl_.page_size_ = value;
}
inline void ListTransferLogsRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.ListTransferLogsRequest.page_size)
}

// repeated .google.cloud.bigquery.datatransfer.v1.TransferMessage.MessageSeverity message_types = 6;
inline int ListTransferLogsRequest::_internal_message_types_size() const {
  return _impl_.message_types_.size();
}
inline int ListTransferLogsRequest::message_types_size() const {
  return _internal_message_types_size();
}
inline void ListTransferLogsRequest::clear_message_types() {
  _impl_.message_types_.Clear();
}
inline ::google::cloud::bigquery::datatransfer::v1::TransferMessage_MessageSeverity ListTransferLogsRequest::_internal_message_types(int index) const {
  return static_cast< ::google::cloud::bigquery::datatransfer::v1::TransferMessage_MessageSeverity >(_impl_.message_types_.Get(index));
}
inline ::google::cloud::bigquery::datatransfer::v1::TransferMessage_MessageSeverity ListTransferLogsRequest::message_types(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.ListTransferLogsRequest.message_types)
  return _internal_message_types(index);
}
inline void ListTransferLogsRequest::set_message_types(int index, ::google::cloud::bigquery::datatransfer::v1::TransferMessage_MessageSeverity value) {
  _impl_.message_types_.Set(index, value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.ListTransferLogsRequest.message_types)
}
inline void ListTransferLogsRequest::_internal_add_message_types(::google::cloud::bigquery::datatransfer::v1::TransferMessage_MessageSeverity value) {
  _impl_.message_types_.Add(value);
}
inline void ListTransferLogsRequest::add_message_types(::google::cloud::bigquery::datatransfer::v1::TransferMessage_MessageSeverity value) {
  _internal_add_message_types(value);
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.datatransfer.v1.ListTransferLogsRequest.message_types)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
ListTransferLogsRequest::message_types() const {
  // @@protoc_insertion_point(field_list:google.cloud.bigquery.datatransfer.v1.ListTransferLogsRequest.message_types)
  return _impl_.message_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
ListTransferLogsRequest::_internal_mutable_message_types() {
  return &_impl_.message_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
ListTransferLogsRequest::mutable_message_types() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.bigquery.datatransfer.v1.ListTransferLogsRequest.message_types)
  return _internal_mutable_message_types();
}

// -------------------------------------------------------------------

// ListTransferLogsResponse

// repeated .google.cloud.bigquery.datatransfer.v1.TransferMessage transfer_messages = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline int ListTransferLogsResponse::_internal_transfer_messages_size() const {
  return _impl_.transfer_messages_.size();
}
inline int ListTransferLogsResponse::transfer_messages_size() const {
  return _internal_transfer_messages_size();
}
inline ::google::cloud::bigquery::datatransfer::v1::TransferMessage* ListTransferLogsResponse::mutable_transfer_messages(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.ListTransferLogsResponse.transfer_messages)
  return _impl_.transfer_messages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::datatransfer::v1::TransferMessage >*
ListTransferLogsResponse::mutable_transfer_messages() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.bigquery.datatransfer.v1.ListTransferLogsResponse.transfer_messages)
  return &_impl_.transfer_messages_;
}
inline const ::google::cloud::bigquery::datatransfer::v1::TransferMessage& ListTransferLogsResponse::_internal_transfer_messages(int index) const {
  return _impl_.transfer_messages_.Get(index);
}
inline const ::google::cloud::bigquery::datatransfer::v1::TransferMessage& ListTransferLogsResponse::transfer_messages(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.ListTransferLogsResponse.transfer_messages)
  return _internal_transfer_messages(index);
}
inline ::google::cloud::bigquery::datatransfer::v1::TransferMessage* ListTransferLogsResponse::_internal_add_transfer_messages() {
  return _impl_.transfer_messages_.Add();
}
inline ::google::cloud::bigquery::datatransfer::v1::TransferMessage* ListTransferLogsResponse::add_transfer_messages() {
  ::google::cloud::bigquery::datatransfer::v1::TransferMessage* _add = _internal_add_transfer_messages();
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.datatransfer.v1.ListTransferLogsResponse.transfer_messages)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::datatransfer::v1::TransferMessage >&
ListTransferLogsResponse::transfer_messages() const {
  // @@protoc_insertion_point(field_list:google.cloud.bigquery.datatransfer.v1.ListTransferLogsResponse.transfer_messages)
  return _impl_.transfer_messages_;
}

// string next_page_token = 2 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void ListTransferLogsResponse::clear_next_page_token() {
  _impl_.next_page_token_.ClearToEmpty();
}
inline const std::string& ListTransferLogsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.ListTransferLogsResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListTransferLogsResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.next_page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.ListTransferLogsResponse.next_page_token)
}
inline std::string* ListTransferLogsResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.ListTransferLogsResponse.next_page_token)
  return _s;
}
inline const std::string& ListTransferLogsResponse::_internal_next_page_token() const {
  return _impl_.next_page_token_.Get();
}
inline void ListTransferLogsResponse::_internal_set_next_page_token(const std::string& value) {
  
  _impl_.next_page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListTransferLogsResponse::_internal_mutable_next_page_token() {
  
  return _impl_.next_page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListTransferLogsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.ListTransferLogsResponse.next_page_token)
  return _impl_.next_page_token_.Release();
}
inline void ListTransferLogsResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  _impl_.next_page_token_.SetAllocated(next_page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.next_page_token_.IsDefault()) {
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.ListTransferLogsResponse.next_page_token)
}

// -------------------------------------------------------------------

// CheckValidCredsRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CheckValidCredsRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& CheckValidCredsRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.CheckValidCredsRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CheckValidCredsRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.CheckValidCredsRequest.name)
}
inline std::string* CheckValidCredsRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.CheckValidCredsRequest.name)
  return _s;
}
inline const std::string& CheckValidCredsRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CheckValidCredsRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CheckValidCredsRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CheckValidCredsRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.CheckValidCredsRequest.name)
  return _impl_.name_.Release();
}
inline void CheckValidCredsRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.CheckValidCredsRequest.name)
}

// -------------------------------------------------------------------

// CheckValidCredsResponse

// bool has_valid_creds = 1;
inline void CheckValidCredsResponse::clear_has_valid_creds() {
  _impl_.has_valid_creds_ = false;
}
inline bool CheckValidCredsResponse::_internal_has_valid_creds() const {
  return _impl_.has_valid_creds_;
}
inline bool CheckValidCredsResponse::has_valid_creds() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.CheckValidCredsResponse.has_valid_creds)
  return _internal_has_valid_creds();
}
inline void CheckValidCredsResponse::_internal_set_has_valid_creds(bool value) {
  
  _impl_.has_valid_creds_ = value;
}
inline void CheckValidCredsResponse::set_has_valid_creds(bool value) {
  _internal_set_has_valid_creds(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.CheckValidCredsResponse.has_valid_creds)
}

// -------------------------------------------------------------------

// ScheduleTransferRunsRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ScheduleTransferRunsRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& ScheduleTransferRunsRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.ScheduleTransferRunsRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ScheduleTransferRunsRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.ScheduleTransferRunsRequest.parent)
}
inline std::string* ScheduleTransferRunsRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.ScheduleTransferRunsRequest.parent)
  return _s;
}
inline const std::string& ScheduleTransferRunsRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void ScheduleTransferRunsRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* ScheduleTransferRunsRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* ScheduleTransferRunsRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.ScheduleTransferRunsRequest.parent)
  return _impl_.parent_.Release();
}
inline void ScheduleTransferRunsRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.ScheduleTransferRunsRequest.parent)
}

// .google.protobuf.Timestamp start_time = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool ScheduleTransferRunsRequest::_internal_has_start_time() const {
  return this != internal_default_instance() && _impl_.start_time_ != nullptr;
}
inline bool ScheduleTransferRunsRequest::has_start_time() const {
  return _internal_has_start_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ScheduleTransferRunsRequest::_internal_start_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.start_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ScheduleTransferRunsRequest::start_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.ScheduleTransferRunsRequest.start_time)
  return _internal_start_time();
}
inline void ScheduleTransferRunsRequest::unsafe_arena_set_allocated_start_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* start_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.start_time_);
  }
  _impl_.start_time_ = start_time;
  if (start_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.datatransfer.v1.ScheduleTransferRunsRequest.start_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ScheduleTransferRunsRequest::release_start_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.start_time_;
  _impl_.start_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ScheduleTransferRunsRequest::unsafe_arena_release_start_time() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.ScheduleTransferRunsRequest.start_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.start_time_;
  _impl_.start_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ScheduleTransferRunsRequest::_internal_mutable_start_time() {
  
  if (_impl_.start_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.start_time_ = p;
  }
  return _impl_.start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ScheduleTransferRunsRequest::mutable_start_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_start_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.ScheduleTransferRunsRequest.start_time)
  return _msg;
}
inline void ScheduleTransferRunsRequest::set_allocated_start_time(::PROTOBUF_NAMESPACE_ID::Timestamp* start_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.start_time_);
  }
  if (start_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time));
    if (message_arena != submessage_arena) {
      start_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.start_time_ = start_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.ScheduleTransferRunsRequest.start_time)
}

// .google.protobuf.Timestamp end_time = 3 [(.google.api.field_behavior) = REQUIRED];
inline bool ScheduleTransferRunsRequest::_internal_has_end_time() const {
  return this != internal_default_instance() && _impl_.end_time_ != nullptr;
}
inline bool ScheduleTransferRunsRequest::has_end_time() const {
  return _internal_has_end_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ScheduleTransferRunsRequest::_internal_end_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.end_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ScheduleTransferRunsRequest::end_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.ScheduleTransferRunsRequest.end_time)
  return _internal_end_time();
}
inline void ScheduleTransferRunsRequest::unsafe_arena_set_allocated_end_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.end_time_);
  }
  _impl_.end_time_ = end_time;
  if (end_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.datatransfer.v1.ScheduleTransferRunsRequest.end_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ScheduleTransferRunsRequest::release_end_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.end_time_;
  _impl_.end_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ScheduleTransferRunsRequest::unsafe_arena_release_end_time() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.ScheduleTransferRunsRequest.end_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.end_time_;
  _impl_.end_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ScheduleTransferRunsRequest::_internal_mutable_end_time() {
  
  if (_impl_.end_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.end_time_ = p;
  }
  return _impl_.end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ScheduleTransferRunsRequest::mutable_end_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_end_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.ScheduleTransferRunsRequest.end_time)
  return _msg;
}
inline void ScheduleTransferRunsRequest::set_allocated_end_time(::PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.end_time_);
  }
  if (end_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time));
    if (message_arena != submessage_arena) {
      end_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.end_time_ = end_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.ScheduleTransferRunsRequest.end_time)
}

// -------------------------------------------------------------------

// ScheduleTransferRunsResponse

// repeated .google.cloud.bigquery.datatransfer.v1.TransferRun runs = 1;
inline int ScheduleTransferRunsResponse::_internal_runs_size() const {
  return _impl_.runs_.size();
}
inline int ScheduleTransferRunsResponse::runs_size() const {
  return _internal_runs_size();
}
inline ::google::cloud::bigquery::datatransfer::v1::TransferRun* ScheduleTransferRunsResponse::mutable_runs(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.ScheduleTransferRunsResponse.runs)
  return _impl_.runs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::datatransfer::v1::TransferRun >*
ScheduleTransferRunsResponse::mutable_runs() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.bigquery.datatransfer.v1.ScheduleTransferRunsResponse.runs)
  return &_impl_.runs_;
}
inline const ::google::cloud::bigquery::datatransfer::v1::TransferRun& ScheduleTransferRunsResponse::_internal_runs(int index) const {
  return _impl_.runs_.Get(index);
}
inline const ::google::cloud::bigquery::datatransfer::v1::TransferRun& ScheduleTransferRunsResponse::runs(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.ScheduleTransferRunsResponse.runs)
  return _internal_runs(index);
}
inline ::google::cloud::bigquery::datatransfer::v1::TransferRun* ScheduleTransferRunsResponse::_internal_add_runs() {
  return _impl_.runs_.Add();
}
inline ::google::cloud::bigquery::datatransfer::v1::TransferRun* ScheduleTransferRunsResponse::add_runs() {
  ::google::cloud::bigquery::datatransfer::v1::TransferRun* _add = _internal_add_runs();
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.datatransfer.v1.ScheduleTransferRunsResponse.runs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::datatransfer::v1::TransferRun >&
ScheduleTransferRunsResponse::runs() const {
  // @@protoc_insertion_point(field_list:google.cloud.bigquery.datatransfer.v1.ScheduleTransferRunsResponse.runs)
  return _impl_.runs_;
}

// -------------------------------------------------------------------

// StartManualTransferRunsRequest_TimeRange

// .google.protobuf.Timestamp start_time = 1;
inline bool StartManualTransferRunsRequest_TimeRange::_internal_has_start_time() const {
  return this != internal_default_instance() && _impl_.start_time_ != nullptr;
}
inline bool StartManualTransferRunsRequest_TimeRange::has_start_time() const {
  return _internal_has_start_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& StartManualTransferRunsRequest_TimeRange::_internal_start_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.start_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& StartManualTransferRunsRequest_TimeRange::start_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.StartManualTransferRunsRequest.TimeRange.start_time)
  return _internal_start_time();
}
inline void StartManualTransferRunsRequest_TimeRange::unsafe_arena_set_allocated_start_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* start_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.start_time_);
  }
  _impl_.start_time_ = start_time;
  if (start_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.datatransfer.v1.StartManualTransferRunsRequest.TimeRange.start_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StartManualTransferRunsRequest_TimeRange::release_start_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.start_time_;
  _impl_.start_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StartManualTransferRunsRequest_TimeRange::unsafe_arena_release_start_time() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.StartManualTransferRunsRequest.TimeRange.start_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.start_time_;
  _impl_.start_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StartManualTransferRunsRequest_TimeRange::_internal_mutable_start_time() {
  
  if (_impl_.start_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.start_time_ = p;
  }
  return _impl_.start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StartManualTransferRunsRequest_TimeRange::mutable_start_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_start_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.StartManualTransferRunsRequest.TimeRange.start_time)
  return _msg;
}
inline void StartManualTransferRunsRequest_TimeRange::set_allocated_start_time(::PROTOBUF_NAMESPACE_ID::Timestamp* start_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.start_time_);
  }
  if (start_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time));
    if (message_arena != submessage_arena) {
      start_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.start_time_ = start_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.StartManualTransferRunsRequest.TimeRange.start_time)
}

// .google.protobuf.Timestamp end_time = 2;
inline bool StartManualTransferRunsRequest_TimeRange::_internal_has_end_time() const {
  return this != internal_default_instance() && _impl_.end_time_ != nullptr;
}
inline bool StartManualTransferRunsRequest_TimeRange::has_end_time() const {
  return _internal_has_end_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& StartManualTransferRunsRequest_TimeRange::_internal_end_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.end_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& StartManualTransferRunsRequest_TimeRange::end_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.StartManualTransferRunsRequest.TimeRange.end_time)
  return _internal_end_time();
}
inline void StartManualTransferRunsRequest_TimeRange::unsafe_arena_set_allocated_end_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.end_time_);
  }
  _impl_.end_time_ = end_time;
  if (end_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.datatransfer.v1.StartManualTransferRunsRequest.TimeRange.end_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StartManualTransferRunsRequest_TimeRange::release_end_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.end_time_;
  _impl_.end_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StartManualTransferRunsRequest_TimeRange::unsafe_arena_release_end_time() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.StartManualTransferRunsRequest.TimeRange.end_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.end_time_;
  _impl_.end_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StartManualTransferRunsRequest_TimeRange::_internal_mutable_end_time() {
  
  if (_impl_.end_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.end_time_ = p;
  }
  return _impl_.end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StartManualTransferRunsRequest_TimeRange::mutable_end_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_end_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.StartManualTransferRunsRequest.TimeRange.end_time)
  return _msg;
}
inline void StartManualTransferRunsRequest_TimeRange::set_allocated_end_time(::PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.end_time_);
  }
  if (end_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time));
    if (message_arena != submessage_arena) {
      end_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.end_time_ = end_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.StartManualTransferRunsRequest.TimeRange.end_time)
}

// -------------------------------------------------------------------

// StartManualTransferRunsRequest

// string parent = 1 [(.google.api.resource_reference) = {
inline void StartManualTransferRunsRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& StartManualTransferRunsRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.StartManualTransferRunsRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StartManualTransferRunsRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.StartManualTransferRunsRequest.parent)
}
inline std::string* StartManualTransferRunsRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.StartManualTransferRunsRequest.parent)
  return _s;
}
inline const std::string& StartManualTransferRunsRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void StartManualTransferRunsRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* StartManualTransferRunsRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* StartManualTransferRunsRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.StartManualTransferRunsRequest.parent)
  return _impl_.parent_.Release();
}
inline void StartManualTransferRunsRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.StartManualTransferRunsRequest.parent)
}

// .google.cloud.bigquery.datatransfer.v1.StartManualTransferRunsRequest.TimeRange requested_time_range = 3;
inline bool StartManualTransferRunsRequest::_internal_has_requested_time_range() const {
  return time_case() == kRequestedTimeRange;
}
inline bool StartManualTransferRunsRequest::has_requested_time_range() const {
  return _internal_has_requested_time_range();
}
inline void StartManualTransferRunsRequest::set_has_requested_time_range() {
  _impl_._oneof_case_[0] = kRequestedTimeRange;
}
inline void StartManualTransferRunsRequest::clear_requested_time_range() {
  if (_internal_has_requested_time_range()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.time_.requested_time_range_;
    }
    clear_has_time();
  }
}
inline ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsRequest_TimeRange* StartManualTransferRunsRequest::release_requested_time_range() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.StartManualTransferRunsRequest.requested_time_range)
  if (_internal_has_requested_time_range()) {
    clear_has_time();
    ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsRequest_TimeRange* temp = _impl_.time_.requested_time_range_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.time_.requested_time_range_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsRequest_TimeRange& StartManualTransferRunsRequest::_internal_requested_time_range() const {
  return _internal_has_requested_time_range()
      ? *_impl_.time_.requested_time_range_
      : reinterpret_cast< ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsRequest_TimeRange&>(::google::cloud::bigquery::datatransfer::v1::_StartManualTransferRunsRequest_TimeRange_default_instance_);
}
inline const ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsRequest_TimeRange& StartManualTransferRunsRequest::requested_time_range() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.StartManualTransferRunsRequest.requested_time_range)
  return _internal_requested_time_range();
}
inline ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsRequest_TimeRange* StartManualTransferRunsRequest::unsafe_arena_release_requested_time_range() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.bigquery.datatransfer.v1.StartManualTransferRunsRequest.requested_time_range)
  if (_internal_has_requested_time_range()) {
    clear_has_time();
    ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsRequest_TimeRange* temp = _impl_.time_.requested_time_range_;
    _impl_.time_.requested_time_range_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StartManualTransferRunsRequest::unsafe_arena_set_allocated_requested_time_range(::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsRequest_TimeRange* requested_time_range) {
  clear_time();
  if (requested_time_range) {
    set_has_requested_time_range();
    _impl_.time_.requested_time_range_ = requested_time_range;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.datatransfer.v1.StartManualTransferRunsRequest.requested_time_range)
}
inline ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsRequest_TimeRange* StartManualTransferRunsRequest::_internal_mutable_requested_time_range() {
  if (!_internal_has_requested_time_range()) {
    clear_time();
    set_has_requested_time_range();
    _impl_.time_.requested_time_range_ = CreateMaybeMessage< ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsRequest_TimeRange >(GetArenaForAllocation());
  }
  return _impl_.time_.requested_time_range_;
}
inline ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsRequest_TimeRange* StartManualTransferRunsRequest::mutable_requested_time_range() {
  ::google::cloud::bigquery::datatransfer::v1::StartManualTransferRunsRequest_TimeRange* _msg = _internal_mutable_requested_time_range();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.StartManualTransferRunsRequest.requested_time_range)
  return _msg;
}

// .google.protobuf.Timestamp requested_run_time = 4;
inline bool StartManualTransferRunsRequest::_internal_has_requested_run_time() const {
  return time_case() == kRequestedRunTime;
}
inline bool StartManualTransferRunsRequest::has_requested_run_time() const {
  return _internal_has_requested_run_time();
}
inline void StartManualTransferRunsRequest::set_has_requested_run_time() {
  _impl_._oneof_case_[0] = kRequestedRunTime;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StartManualTransferRunsRequest::release_requested_run_time() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.StartManualTransferRunsRequest.requested_run_time)
  if (_internal_has_requested_run_time()) {
    clear_has_time();
    ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.time_.requested_run_time_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.time_.requested_run_time_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& StartManualTransferRunsRequest::_internal_requested_run_time() const {
  return _internal_has_requested_run_time()
      ? *_impl_.time_.requested_run_time_
      : reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::Timestamp&>(::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& StartManualTransferRunsRequest::requested_run_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.StartManualTransferRunsRequest.requested_run_time)
  return _internal_requested_run_time();
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StartManualTransferRunsRequest::unsafe_arena_release_requested_run_time() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.bigquery.datatransfer.v1.StartManualTransferRunsRequest.requested_run_time)
  if (_internal_has_requested_run_time()) {
    clear_has_time();
    ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.time_.requested_run_time_;
    _impl_.time_.requested_run_time_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StartManualTransferRunsRequest::unsafe_arena_set_allocated_requested_run_time(::PROTOBUF_NAMESPACE_ID::Timestamp* requested_run_time) {
  clear_time();
  if (requested_run_time) {
    set_has_requested_run_time();
    _impl_.time_.requested_run_time_ = requested_run_time;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.datatransfer.v1.StartManualTransferRunsRequest.requested_run_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StartManualTransferRunsRequest::_internal_mutable_requested_run_time() {
  if (!_internal_has_requested_run_time()) {
    clear_time();
    set_has_requested_run_time();
    _impl_.time_.requested_run_time_ = CreateMaybeMessage< ::PROTOBUF_NAMESPACE_ID::Timestamp >(GetArenaForAllocation());
  }
  return _impl_.time_.requested_run_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StartManualTransferRunsRequest::mutable_requested_run_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_requested_run_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.StartManualTransferRunsRequest.requested_run_time)
  return _msg;
}

inline bool StartManualTransferRunsRequest::has_time() const {
  return time_case() != TIME_NOT_SET;
}
inline void StartManualTransferRunsRequest::clear_has_time() {
  _impl_._oneof_case_[0] = TIME_NOT_SET;
}
inline StartManualTransferRunsRequest::TimeCase StartManualTransferRunsRequest::time_case() const {
  return StartManualTransferRunsRequest::TimeCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// StartManualTransferRunsResponse

// repeated .google.cloud.bigquery.datatransfer.v1.TransferRun runs = 1;
inline int StartManualTransferRunsResponse::_internal_runs_size() const {
  return _impl_.runs_.size();
}
inline int StartManualTransferRunsResponse::runs_size() const {
  return _internal_runs_size();
}
inline ::google::cloud::bigquery::datatransfer::v1::TransferRun* StartManualTransferRunsResponse::mutable_runs(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.StartManualTransferRunsResponse.runs)
  return _impl_.runs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::datatransfer::v1::TransferRun >*
StartManualTransferRunsResponse::mutable_runs() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.bigquery.datatransfer.v1.StartManualTransferRunsResponse.runs)
  return &_impl_.runs_;
}
inline const ::google::cloud::bigquery::datatransfer::v1::TransferRun& StartManualTransferRunsResponse::_internal_runs(int index) const {
  return _impl_.runs_.Get(index);
}
inline const ::google::cloud::bigquery::datatransfer::v1::TransferRun& StartManualTransferRunsResponse::runs(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.StartManualTransferRunsResponse.runs)
  return _internal_runs(index);
}
inline ::google::cloud::bigquery::datatransfer::v1::TransferRun* StartManualTransferRunsResponse::_internal_add_runs() {
  return _impl_.runs_.Add();
}
inline ::google::cloud::bigquery::datatransfer::v1::TransferRun* StartManualTransferRunsResponse::add_runs() {
  ::google::cloud::bigquery::datatransfer::v1::TransferRun* _add = _internal_add_runs();
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.datatransfer.v1.StartManualTransferRunsResponse.runs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::datatransfer::v1::TransferRun >&
StartManualTransferRunsResponse::runs() const {
  // @@protoc_insertion_point(field_list:google.cloud.bigquery.datatransfer.v1.StartManualTransferRunsResponse.runs)
  return _impl_.runs_;
}

// -------------------------------------------------------------------

// EnrollDataSourcesRequest

// string name = 1;
inline void EnrollDataSourcesRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& EnrollDataSourcesRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.EnrollDataSourcesRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EnrollDataSourcesRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.EnrollDataSourcesRequest.name)
}
inline std::string* EnrollDataSourcesRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.EnrollDataSourcesRequest.name)
  return _s;
}
inline const std::string& EnrollDataSourcesRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void EnrollDataSourcesRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* EnrollDataSourcesRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* EnrollDataSourcesRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.EnrollDataSourcesRequest.name)
  return _impl_.name_.Release();
}
inline void EnrollDataSourcesRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.EnrollDataSourcesRequest.name)
}

// repeated string data_source_ids = 2;
inline int EnrollDataSourcesRequest::_internal_data_source_ids_size() const {
  return _impl_.data_source_ids_.size();
}
inline int EnrollDataSourcesRequest::data_source_ids_size() const {
  return _internal_data_source_ids_size();
}
inline void EnrollDataSourcesRequest::clear_data_source_ids() {
  _impl_.data_source_ids_.Clear();
}
inline std::string* EnrollDataSourcesRequest::add_data_source_ids() {
  std::string* _s = _internal_add_data_source_ids();
  // @@protoc_insertion_point(field_add_mutable:google.cloud.bigquery.datatransfer.v1.EnrollDataSourcesRequest.data_source_ids)
  return _s;
}
inline const std::string& EnrollDataSourcesRequest::_internal_data_source_ids(int index) const {
  return _impl_.data_source_ids_.Get(index);
}
inline const std::string& EnrollDataSourcesRequest::data_source_ids(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.EnrollDataSourcesRequest.data_source_ids)
  return _internal_data_source_ids(index);
}
inline std::string* EnrollDataSourcesRequest::mutable_data_source_ids(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.EnrollDataSourcesRequest.data_source_ids)
  return _impl_.data_source_ids_.Mutable(index);
}
inline void EnrollDataSourcesRequest::set_data_source_ids(int index, const std::string& value) {
  _impl_.data_source_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.EnrollDataSourcesRequest.data_source_ids)
}
inline void EnrollDataSourcesRequest::set_data_source_ids(int index, std::string&& value) {
  _impl_.data_source_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.EnrollDataSourcesRequest.data_source_ids)
}
inline void EnrollDataSourcesRequest::set_data_source_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.data_source_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.datatransfer.v1.EnrollDataSourcesRequest.data_source_ids)
}
inline void EnrollDataSourcesRequest::set_data_source_ids(int index, const char* value, size_t size) {
  _impl_.data_source_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.datatransfer.v1.EnrollDataSourcesRequest.data_source_ids)
}
inline std::string* EnrollDataSourcesRequest::_internal_add_data_source_ids() {
  return _impl_.data_source_ids_.Add();
}
inline void EnrollDataSourcesRequest::add_data_source_ids(const std::string& value) {
  _impl_.data_source_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.datatransfer.v1.EnrollDataSourcesRequest.data_source_ids)
}
inline void EnrollDataSourcesRequest::add_data_source_ids(std::string&& value) {
  _impl_.data_source_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.datatransfer.v1.EnrollDataSourcesRequest.data_source_ids)
}
inline void EnrollDataSourcesRequest::add_data_source_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.data_source_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.bigquery.datatransfer.v1.EnrollDataSourcesRequest.data_source_ids)
}
inline void EnrollDataSourcesRequest::add_data_source_ids(const char* value, size_t size) {
  _impl_.data_source_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.bigquery.datatransfer.v1.EnrollDataSourcesRequest.data_source_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
EnrollDataSourcesRequest::data_source_ids() const {
  // @@protoc_insertion_point(field_list:google.cloud.bigquery.datatransfer.v1.EnrollDataSourcesRequest.data_source_ids)
  return _impl_.data_source_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
EnrollDataSourcesRequest::mutable_data_source_ids() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.bigquery.datatransfer.v1.EnrollDataSourcesRequest.data_source_ids)
  return &_impl_.data_source_ids_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace datatransfer
}  // namespace bigquery
}  // namespace cloud
}  // namespace google

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::google::cloud::bigquery::datatransfer::v1::DataSourceParameter_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::bigquery::datatransfer::v1::DataSourceParameter_Type>() {
  return ::google::cloud::bigquery::datatransfer::v1::DataSourceParameter_Type_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::bigquery::datatransfer::v1::DataSource_AuthorizationType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::bigquery::datatransfer::v1::DataSource_AuthorizationType>() {
  return ::google::cloud::bigquery::datatransfer::v1::DataSource_AuthorizationType_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::bigquery::datatransfer::v1::DataSource_DataRefreshType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::bigquery::datatransfer::v1::DataSource_DataRefreshType>() {
  return ::google::cloud::bigquery::datatransfer::v1::DataSource_DataRefreshType_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsRequest_RunAttempt> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsRequest_RunAttempt>() {
  return ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsRequest_RunAttempt_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2fdatatransfer_2eproto
