// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/bigquery/datatransfer/v1/transfer.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2ftransfer_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2ftransfer_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/field_behavior.pb.h"
#include "google/api/resource.pb.h"
#include <google/protobuf/struct.pb.h>
#include <google/protobuf/timestamp.pb.h>
#include "google/rpc/status.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2ftransfer_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2ftransfer_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2ftransfer_2eproto;
namespace google {
namespace cloud {
namespace bigquery {
namespace datatransfer {
namespace v1 {
class EmailPreferences;
struct EmailPreferencesDefaultTypeInternal;
extern EmailPreferencesDefaultTypeInternal _EmailPreferences_default_instance_;
class ScheduleOptions;
struct ScheduleOptionsDefaultTypeInternal;
extern ScheduleOptionsDefaultTypeInternal _ScheduleOptions_default_instance_;
class TransferConfig;
struct TransferConfigDefaultTypeInternal;
extern TransferConfigDefaultTypeInternal _TransferConfig_default_instance_;
class TransferMessage;
struct TransferMessageDefaultTypeInternal;
extern TransferMessageDefaultTypeInternal _TransferMessage_default_instance_;
class TransferRun;
struct TransferRunDefaultTypeInternal;
extern TransferRunDefaultTypeInternal _TransferRun_default_instance_;
class UserInfo;
struct UserInfoDefaultTypeInternal;
extern UserInfoDefaultTypeInternal _UserInfo_default_instance_;
}  // namespace v1
}  // namespace datatransfer
}  // namespace bigquery
}  // namespace cloud
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::cloud::bigquery::datatransfer::v1::EmailPreferences* Arena::CreateMaybeMessage<::google::cloud::bigquery::datatransfer::v1::EmailPreferences>(Arena*);
template<> ::google::cloud::bigquery::datatransfer::v1::ScheduleOptions* Arena::CreateMaybeMessage<::google::cloud::bigquery::datatransfer::v1::ScheduleOptions>(Arena*);
template<> ::google::cloud::bigquery::datatransfer::v1::TransferConfig* Arena::CreateMaybeMessage<::google::cloud::bigquery::datatransfer::v1::TransferConfig>(Arena*);
template<> ::google::cloud::bigquery::datatransfer::v1::TransferMessage* Arena::CreateMaybeMessage<::google::cloud::bigquery::datatransfer::v1::TransferMessage>(Arena*);
template<> ::google::cloud::bigquery::datatransfer::v1::TransferRun* Arena::CreateMaybeMessage<::google::cloud::bigquery::datatransfer::v1::TransferRun>(Arena*);
template<> ::google::cloud::bigquery::datatransfer::v1::UserInfo* Arena::CreateMaybeMessage<::google::cloud::bigquery::datatransfer::v1::UserInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace cloud {
namespace bigquery {
namespace datatransfer {
namespace v1 {

enum TransferMessage_MessageSeverity : int {
  TransferMessage_MessageSeverity_MESSAGE_SEVERITY_UNSPECIFIED = 0,
  TransferMessage_MessageSeverity_INFO = 1,
  TransferMessage_MessageSeverity_WARNING = 2,
  TransferMessage_MessageSeverity_ERROR = 3,
  TransferMessage_MessageSeverity_TransferMessage_MessageSeverity_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TransferMessage_MessageSeverity_TransferMessage_MessageSeverity_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TransferMessage_MessageSeverity_IsValid(int value);
constexpr TransferMessage_MessageSeverity TransferMessage_MessageSeverity_MessageSeverity_MIN = TransferMessage_MessageSeverity_MESSAGE_SEVERITY_UNSPECIFIED;
constexpr TransferMessage_MessageSeverity TransferMessage_MessageSeverity_MessageSeverity_MAX = TransferMessage_MessageSeverity_ERROR;
constexpr int TransferMessage_MessageSeverity_MessageSeverity_ARRAYSIZE = TransferMessage_MessageSeverity_MessageSeverity_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransferMessage_MessageSeverity_descriptor();
template<typename T>
inline const std::string& TransferMessage_MessageSeverity_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TransferMessage_MessageSeverity>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TransferMessage_MessageSeverity_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TransferMessage_MessageSeverity_descriptor(), enum_t_value);
}
inline bool TransferMessage_MessageSeverity_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TransferMessage_MessageSeverity* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TransferMessage_MessageSeverity>(
    TransferMessage_MessageSeverity_descriptor(), name, value);
}
enum TransferType : int {
  TRANSFER_TYPE_UNSPECIFIED = 0,
  BATCH = 1,
  STREAMING = 2,
  TransferType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TransferType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TransferType_IsValid(int value);
constexpr TransferType TransferType_MIN = TRANSFER_TYPE_UNSPECIFIED;
constexpr TransferType TransferType_MAX = STREAMING;
constexpr int TransferType_ARRAYSIZE = TransferType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransferType_descriptor();
template<typename T>
inline const std::string& TransferType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TransferType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TransferType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TransferType_descriptor(), enum_t_value);
}
inline bool TransferType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TransferType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TransferType>(
    TransferType_descriptor(), name, value);
}
enum TransferState : int {
  TRANSFER_STATE_UNSPECIFIED = 0,
  PENDING = 2,
  RUNNING = 3,
  SUCCEEDED = 4,
  FAILED = 5,
  CANCELLED = 6,
  TransferState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TransferState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TransferState_IsValid(int value);
constexpr TransferState TransferState_MIN = TRANSFER_STATE_UNSPECIFIED;
constexpr TransferState TransferState_MAX = CANCELLED;
constexpr int TransferState_ARRAYSIZE = TransferState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransferState_descriptor();
template<typename T>
inline const std::string& TransferState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TransferState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TransferState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TransferState_descriptor(), enum_t_value);
}
inline bool TransferState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TransferState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TransferState>(
    TransferState_descriptor(), name, value);
}
// ===================================================================

class EmailPreferences final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.datatransfer.v1.EmailPreferences) */ {
 public:
  inline EmailPreferences() : EmailPreferences(nullptr) {}
  ~EmailPreferences() override;
  explicit PROTOBUF_CONSTEXPR EmailPreferences(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EmailPreferences(const EmailPreferences& from);
  EmailPreferences(EmailPreferences&& from) noexcept
    : EmailPreferences() {
    *this = ::std::move(from);
  }

  inline EmailPreferences& operator=(const EmailPreferences& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmailPreferences& operator=(EmailPreferences&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EmailPreferences& default_instance() {
    return *internal_default_instance();
  }
  static inline const EmailPreferences* internal_default_instance() {
    return reinterpret_cast<const EmailPreferences*>(
               &_EmailPreferences_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EmailPreferences& a, EmailPreferences& b) {
    a.Swap(&b);
  }
  inline void Swap(EmailPreferences* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmailPreferences* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EmailPreferences* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EmailPreferences>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EmailPreferences& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EmailPreferences& from) {
    EmailPreferences::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmailPreferences* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.datatransfer.v1.EmailPreferences";
  }
  protected:
  explicit EmailPreferences(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnableFailureEmailFieldNumber = 1,
  };
  // bool enable_failure_email = 1;
  void clear_enable_failure_email();
  bool enable_failure_email() const;
  void set_enable_failure_email(bool value);
  private:
  bool _internal_enable_failure_email() const;
  void _internal_set_enable_failure_email(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.datatransfer.v1.EmailPreferences)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool enable_failure_email_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2ftransfer_2eproto;
};
// -------------------------------------------------------------------

class ScheduleOptions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.datatransfer.v1.ScheduleOptions) */ {
 public:
  inline ScheduleOptions() : ScheduleOptions(nullptr) {}
  ~ScheduleOptions() override;
  explicit PROTOBUF_CONSTEXPR ScheduleOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScheduleOptions(const ScheduleOptions& from);
  ScheduleOptions(ScheduleOptions&& from) noexcept
    : ScheduleOptions() {
    *this = ::std::move(from);
  }

  inline ScheduleOptions& operator=(const ScheduleOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScheduleOptions& operator=(ScheduleOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScheduleOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScheduleOptions* internal_default_instance() {
    return reinterpret_cast<const ScheduleOptions*>(
               &_ScheduleOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ScheduleOptions& a, ScheduleOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(ScheduleOptions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScheduleOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScheduleOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ScheduleOptions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ScheduleOptions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ScheduleOptions& from) {
    ScheduleOptions::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScheduleOptions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.datatransfer.v1.ScheduleOptions";
  }
  protected:
  explicit ScheduleOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartTimeFieldNumber = 1,
    kEndTimeFieldNumber = 2,
    kDisableAutoSchedulingFieldNumber = 3,
  };
  // .google.protobuf.Timestamp start_time = 1;
  bool has_start_time() const;
  private:
  bool _internal_has_start_time() const;
  public:
  void clear_start_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& start_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_start_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_start_time();
  void set_allocated_start_time(::PROTOBUF_NAMESPACE_ID::Timestamp* start_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_start_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_start_time();
  public:
  void unsafe_arena_set_allocated_start_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* start_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_start_time();

  // .google.protobuf.Timestamp end_time = 2;
  bool has_end_time() const;
  private:
  bool _internal_has_end_time() const;
  public:
  void clear_end_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& end_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_end_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_end_time();
  void set_allocated_end_time(::PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_end_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_end_time();
  public:
  void unsafe_arena_set_allocated_end_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_end_time();

  // bool disable_auto_scheduling = 3;
  void clear_disable_auto_scheduling();
  bool disable_auto_scheduling() const;
  void set_disable_auto_scheduling(bool value);
  private:
  bool _internal_disable_auto_scheduling() const;
  void _internal_set_disable_auto_scheduling(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.datatransfer.v1.ScheduleOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::Timestamp* start_time_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* end_time_;
    bool disable_auto_scheduling_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2ftransfer_2eproto;
};
// -------------------------------------------------------------------

class UserInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.datatransfer.v1.UserInfo) */ {
 public:
  inline UserInfo() : UserInfo(nullptr) {}
  ~UserInfo() override;
  explicit PROTOBUF_CONSTEXPR UserInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserInfo(const UserInfo& from);
  UserInfo(UserInfo&& from) noexcept
    : UserInfo() {
    *this = ::std::move(from);
  }

  inline UserInfo& operator=(const UserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInfo& operator=(UserInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserInfo* internal_default_instance() {
    return reinterpret_cast<const UserInfo*>(
               &_UserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UserInfo& a, UserInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(UserInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserInfo& from) {
    UserInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.datatransfer.v1.UserInfo";
  }
  protected:
  explicit UserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 1,
  };
  // optional string email = 1;
  bool has_email() const;
  private:
  bool _internal_has_email() const;
  public:
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.datatransfer.v1.UserInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2ftransfer_2eproto;
};
// -------------------------------------------------------------------

class TransferConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.datatransfer.v1.TransferConfig) */ {
 public:
  inline TransferConfig() : TransferConfig(nullptr) {}
  ~TransferConfig() override;
  explicit PROTOBUF_CONSTEXPR TransferConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransferConfig(const TransferConfig& from);
  TransferConfig(TransferConfig&& from) noexcept
    : TransferConfig() {
    *this = ::std::move(from);
  }

  inline TransferConfig& operator=(const TransferConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransferConfig& operator=(TransferConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransferConfig& default_instance() {
    return *internal_default_instance();
  }
  enum DestinationCase {
    kDestinationDatasetId = 2,
    DESTINATION_NOT_SET = 0,
  };

  static inline const TransferConfig* internal_default_instance() {
    return reinterpret_cast<const TransferConfig*>(
               &_TransferConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TransferConfig& a, TransferConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(TransferConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransferConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransferConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransferConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransferConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransferConfig& from) {
    TransferConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.datatransfer.v1.TransferConfig";
  }
  protected:
  explicit TransferConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDisplayNameFieldNumber = 3,
    kDataSourceIdFieldNumber = 5,
    kScheduleFieldNumber = 7,
    kDatasetRegionFieldNumber = 14,
    kNotificationPubsubTopicFieldNumber = 15,
    kUpdateTimeFieldNumber = 4,
    kNextRunTimeFieldNumber = 8,
    kParamsFieldNumber = 9,
    kEmailPreferencesFieldNumber = 18,
    kScheduleOptionsFieldNumber = 24,
    kOwnerInfoFieldNumber = 27,
    kUserIdFieldNumber = 11,
    kStateFieldNumber = 10,
    kDataRefreshWindowDaysFieldNumber = 12,
    kDisabledFieldNumber = 13,
    kDestinationDatasetIdFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string display_name = 3;
  void clear_display_name();
  const std::string& display_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_display_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_display_name();
  PROTOBUF_NODISCARD std::string* release_display_name();
  void set_allocated_display_name(std::string* display_name);
  private:
  const std::string& _internal_display_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_display_name(const std::string& value);
  std::string* _internal_mutable_display_name();
  public:

  // string data_source_id = 5;
  void clear_data_source_id();
  const std::string& data_source_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data_source_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data_source_id();
  PROTOBUF_NODISCARD std::string* release_data_source_id();
  void set_allocated_data_source_id(std::string* data_source_id);
  private:
  const std::string& _internal_data_source_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data_source_id(const std::string& value);
  std::string* _internal_mutable_data_source_id();
  public:

  // string schedule = 7;
  void clear_schedule();
  const std::string& schedule() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_schedule(ArgT0&& arg0, ArgT... args);
  std::string* mutable_schedule();
  PROTOBUF_NODISCARD std::string* release_schedule();
  void set_allocated_schedule(std::string* schedule);
  private:
  const std::string& _internal_schedule() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_schedule(const std::string& value);
  std::string* _internal_mutable_schedule();
  public:

  // string dataset_region = 14 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_dataset_region();
  const std::string& dataset_region() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dataset_region(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dataset_region();
  PROTOBUF_NODISCARD std::string* release_dataset_region();
  void set_allocated_dataset_region(std::string* dataset_region);
  private:
  const std::string& _internal_dataset_region() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dataset_region(const std::string& value);
  std::string* _internal_mutable_dataset_region();
  public:

  // string notification_pubsub_topic = 15;
  void clear_notification_pubsub_topic();
  const std::string& notification_pubsub_topic() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_notification_pubsub_topic(ArgT0&& arg0, ArgT... args);
  std::string* mutable_notification_pubsub_topic();
  PROTOBUF_NODISCARD std::string* release_notification_pubsub_topic();
  void set_allocated_notification_pubsub_topic(std::string* notification_pubsub_topic);
  private:
  const std::string& _internal_notification_pubsub_topic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_notification_pubsub_topic(const std::string& value);
  std::string* _internal_mutable_notification_pubsub_topic();
  public:

  // .google.protobuf.Timestamp update_time = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_update_time() const;
  private:
  bool _internal_has_update_time() const;
  public:
  void clear_update_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& update_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_update_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_update_time();
  void set_allocated_update_time(::PROTOBUF_NAMESPACE_ID::Timestamp* update_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_update_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_update_time();
  public:
  void unsafe_arena_set_allocated_update_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* update_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_update_time();

  // .google.protobuf.Timestamp next_run_time = 8 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_next_run_time() const;
  private:
  bool _internal_has_next_run_time() const;
  public:
  void clear_next_run_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& next_run_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_next_run_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_next_run_time();
  void set_allocated_next_run_time(::PROTOBUF_NAMESPACE_ID::Timestamp* next_run_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_next_run_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_next_run_time();
  public:
  void unsafe_arena_set_allocated_next_run_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* next_run_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_next_run_time();

  // .google.protobuf.Struct params = 9;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::PROTOBUF_NAMESPACE_ID::Struct& params() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_params();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_params();
  void set_allocated_params(::PROTOBUF_NAMESPACE_ID::Struct* params);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_params() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::PROTOBUF_NAMESPACE_ID::Struct* params);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_params();

  // .google.cloud.bigquery.datatransfer.v1.EmailPreferences email_preferences = 18;
  bool has_email_preferences() const;
  private:
  bool _internal_has_email_preferences() const;
  public:
  void clear_email_preferences();
  const ::google::cloud::bigquery::datatransfer::v1::EmailPreferences& email_preferences() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::datatransfer::v1::EmailPreferences* release_email_preferences();
  ::google::cloud::bigquery::datatransfer::v1::EmailPreferences* mutable_email_preferences();
  void set_allocated_email_preferences(::google::cloud::bigquery::datatransfer::v1::EmailPreferences* email_preferences);
  private:
  const ::google::cloud::bigquery::datatransfer::v1::EmailPreferences& _internal_email_preferences() const;
  ::google::cloud::bigquery::datatransfer::v1::EmailPreferences* _internal_mutable_email_preferences();
  public:
  void unsafe_arena_set_allocated_email_preferences(
      ::google::cloud::bigquery::datatransfer::v1::EmailPreferences* email_preferences);
  ::google::cloud::bigquery::datatransfer::v1::EmailPreferences* unsafe_arena_release_email_preferences();

  // .google.cloud.bigquery.datatransfer.v1.ScheduleOptions schedule_options = 24;
  bool has_schedule_options() const;
  private:
  bool _internal_has_schedule_options() const;
  public:
  void clear_schedule_options();
  const ::google::cloud::bigquery::datatransfer::v1::ScheduleOptions& schedule_options() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::datatransfer::v1::ScheduleOptions* release_schedule_options();
  ::google::cloud::bigquery::datatransfer::v1::ScheduleOptions* mutable_schedule_options();
  void set_allocated_schedule_options(::google::cloud::bigquery::datatransfer::v1::ScheduleOptions* schedule_options);
  private:
  const ::google::cloud::bigquery::datatransfer::v1::ScheduleOptions& _internal_schedule_options() const;
  ::google::cloud::bigquery::datatransfer::v1::ScheduleOptions* _internal_mutable_schedule_options();
  public:
  void unsafe_arena_set_allocated_schedule_options(
      ::google::cloud::bigquery::datatransfer::v1::ScheduleOptions* schedule_options);
  ::google::cloud::bigquery::datatransfer::v1::ScheduleOptions* unsafe_arena_release_schedule_options();

  // optional .google.cloud.bigquery.datatransfer.v1.UserInfo owner_info = 27 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_owner_info() const;
  private:
  bool _internal_has_owner_info() const;
  public:
  void clear_owner_info();
  const ::google::cloud::bigquery::datatransfer::v1::UserInfo& owner_info() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::datatransfer::v1::UserInfo* release_owner_info();
  ::google::cloud::bigquery::datatransfer::v1::UserInfo* mutable_owner_info();
  void set_allocated_owner_info(::google::cloud::bigquery::datatransfer::v1::UserInfo* owner_info);
  private:
  const ::google::cloud::bigquery::datatransfer::v1::UserInfo& _internal_owner_info() const;
  ::google::cloud::bigquery::datatransfer::v1::UserInfo* _internal_mutable_owner_info();
  public:
  void unsafe_arena_set_allocated_owner_info(
      ::google::cloud::bigquery::datatransfer::v1::UserInfo* owner_info);
  ::google::cloud::bigquery::datatransfer::v1::UserInfo* unsafe_arena_release_owner_info();

  // int64 user_id = 11;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // .google.cloud.bigquery.datatransfer.v1.TransferState state = 10 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_state();
  ::google::cloud::bigquery::datatransfer::v1::TransferState state() const;
  void set_state(::google::cloud::bigquery::datatransfer::v1::TransferState value);
  private:
  ::google::cloud::bigquery::datatransfer::v1::TransferState _internal_state() const;
  void _internal_set_state(::google::cloud::bigquery::datatransfer::v1::TransferState value);
  public:

  // int32 data_refresh_window_days = 12;
  void clear_data_refresh_window_days();
  int32_t data_refresh_window_days() const;
  void set_data_refresh_window_days(int32_t value);
  private:
  int32_t _internal_data_refresh_window_days() const;
  void _internal_set_data_refresh_window_days(int32_t value);
  public:

  // bool disabled = 13;
  void clear_disabled();
  bool disabled() const;
  void set_disabled(bool value);
  private:
  bool _internal_disabled() const;
  void _internal_set_disabled(bool value);
  public:

  // string destination_dataset_id = 2;
  bool has_destination_dataset_id() const;
  private:
  bool _internal_has_destination_dataset_id() const;
  public:
  void clear_destination_dataset_id();
  const std::string& destination_dataset_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_destination_dataset_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_destination_dataset_id();
  PROTOBUF_NODISCARD std::string* release_destination_dataset_id();
  void set_allocated_destination_dataset_id(std::string* destination_dataset_id);
  private:
  const std::string& _internal_destination_dataset_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_destination_dataset_id(const std::string& value);
  std::string* _internal_mutable_destination_dataset_id();
  public:

  void clear_destination();
  DestinationCase destination_case() const;
  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.datatransfer.v1.TransferConfig)
 private:
  class _Internal;
  void set_has_destination_dataset_id();

  inline bool has_destination() const;
  inline void clear_has_destination();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_source_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr schedule_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dataset_region_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr notification_pubsub_topic_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* update_time_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* next_run_time_;
    ::PROTOBUF_NAMESPACE_ID::Struct* params_;
    ::google::cloud::bigquery::datatransfer::v1::EmailPreferences* email_preferences_;
    ::google::cloud::bigquery::datatransfer::v1::ScheduleOptions* schedule_options_;
    ::google::cloud::bigquery::datatransfer::v1::UserInfo* owner_info_;
    int64_t user_id_;
    int state_;
    int32_t data_refresh_window_days_;
    bool disabled_;
    union DestinationUnion {
      constexpr DestinationUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr destination_dataset_id_;
    } destination_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2ftransfer_2eproto;
};
// -------------------------------------------------------------------

class TransferRun final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.datatransfer.v1.TransferRun) */ {
 public:
  inline TransferRun() : TransferRun(nullptr) {}
  ~TransferRun() override;
  explicit PROTOBUF_CONSTEXPR TransferRun(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransferRun(const TransferRun& from);
  TransferRun(TransferRun&& from) noexcept
    : TransferRun() {
    *this = ::std::move(from);
  }

  inline TransferRun& operator=(const TransferRun& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransferRun& operator=(TransferRun&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransferRun& default_instance() {
    return *internal_default_instance();
  }
  enum DestinationCase {
    kDestinationDatasetId = 2,
    DESTINATION_NOT_SET = 0,
  };

  static inline const TransferRun* internal_default_instance() {
    return reinterpret_cast<const TransferRun*>(
               &_TransferRun_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TransferRun& a, TransferRun& b) {
    a.Swap(&b);
  }
  inline void Swap(TransferRun* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransferRun* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransferRun* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransferRun>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransferRun& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransferRun& from) {
    TransferRun::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferRun* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.datatransfer.v1.TransferRun";
  }
  protected:
  explicit TransferRun(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDataSourceIdFieldNumber = 7,
    kScheduleFieldNumber = 12,
    kNotificationPubsubTopicFieldNumber = 23,
    kScheduleTimeFieldNumber = 3,
    kStartTimeFieldNumber = 4,
    kEndTimeFieldNumber = 5,
    kUpdateTimeFieldNumber = 6,
    kParamsFieldNumber = 9,
    kRunTimeFieldNumber = 10,
    kErrorStatusFieldNumber = 21,
    kEmailPreferencesFieldNumber = 25,
    kUserIdFieldNumber = 11,
    kStateFieldNumber = 8,
    kDestinationDatasetIdFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string data_source_id = 7 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_data_source_id();
  const std::string& data_source_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data_source_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data_source_id();
  PROTOBUF_NODISCARD std::string* release_data_source_id();
  void set_allocated_data_source_id(std::string* data_source_id);
  private:
  const std::string& _internal_data_source_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data_source_id(const std::string& value);
  std::string* _internal_mutable_data_source_id();
  public:

  // string schedule = 12 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_schedule();
  const std::string& schedule() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_schedule(ArgT0&& arg0, ArgT... args);
  std::string* mutable_schedule();
  PROTOBUF_NODISCARD std::string* release_schedule();
  void set_allocated_schedule(std::string* schedule);
  private:
  const std::string& _internal_schedule() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_schedule(const std::string& value);
  std::string* _internal_mutable_schedule();
  public:

  // string notification_pubsub_topic = 23 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_notification_pubsub_topic();
  const std::string& notification_pubsub_topic() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_notification_pubsub_topic(ArgT0&& arg0, ArgT... args);
  std::string* mutable_notification_pubsub_topic();
  PROTOBUF_NODISCARD std::string* release_notification_pubsub_topic();
  void set_allocated_notification_pubsub_topic(std::string* notification_pubsub_topic);
  private:
  const std::string& _internal_notification_pubsub_topic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_notification_pubsub_topic(const std::string& value);
  std::string* _internal_mutable_notification_pubsub_topic();
  public:

  // .google.protobuf.Timestamp schedule_time = 3;
  bool has_schedule_time() const;
  private:
  bool _internal_has_schedule_time() const;
  public:
  void clear_schedule_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& schedule_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_schedule_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_schedule_time();
  void set_allocated_schedule_time(::PROTOBUF_NAMESPACE_ID::Timestamp* schedule_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_schedule_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_schedule_time();
  public:
  void unsafe_arena_set_allocated_schedule_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* schedule_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_schedule_time();

  // .google.protobuf.Timestamp start_time = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_start_time() const;
  private:
  bool _internal_has_start_time() const;
  public:
  void clear_start_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& start_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_start_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_start_time();
  void set_allocated_start_time(::PROTOBUF_NAMESPACE_ID::Timestamp* start_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_start_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_start_time();
  public:
  void unsafe_arena_set_allocated_start_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* start_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_start_time();

  // .google.protobuf.Timestamp end_time = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_end_time() const;
  private:
  bool _internal_has_end_time() const;
  public:
  void clear_end_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& end_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_end_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_end_time();
  void set_allocated_end_time(::PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_end_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_end_time();
  public:
  void unsafe_arena_set_allocated_end_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_end_time();

  // .google.protobuf.Timestamp update_time = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_update_time() const;
  private:
  bool _internal_has_update_time() const;
  public:
  void clear_update_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& update_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_update_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_update_time();
  void set_allocated_update_time(::PROTOBUF_NAMESPACE_ID::Timestamp* update_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_update_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_update_time();
  public:
  void unsafe_arena_set_allocated_update_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* update_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_update_time();

  // .google.protobuf.Struct params = 9 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::PROTOBUF_NAMESPACE_ID::Struct& params() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_params();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_params();
  void set_allocated_params(::PROTOBUF_NAMESPACE_ID::Struct* params);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_params() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::PROTOBUF_NAMESPACE_ID::Struct* params);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_params();

  // .google.protobuf.Timestamp run_time = 10;
  bool has_run_time() const;
  private:
  bool _internal_has_run_time() const;
  public:
  void clear_run_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& run_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_run_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_run_time();
  void set_allocated_run_time(::PROTOBUF_NAMESPACE_ID::Timestamp* run_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_run_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_run_time();
  public:
  void unsafe_arena_set_allocated_run_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* run_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_run_time();

  // .google.rpc.Status error_status = 21;
  bool has_error_status() const;
  private:
  bool _internal_has_error_status() const;
  public:
  void clear_error_status();
  const ::google::rpc::Status& error_status() const;
  PROTOBUF_NODISCARD ::google::rpc::Status* release_error_status();
  ::google::rpc::Status* mutable_error_status();
  void set_allocated_error_status(::google::rpc::Status* error_status);
  private:
  const ::google::rpc::Status& _internal_error_status() const;
  ::google::rpc::Status* _internal_mutable_error_status();
  public:
  void unsafe_arena_set_allocated_error_status(
      ::google::rpc::Status* error_status);
  ::google::rpc::Status* unsafe_arena_release_error_status();

  // .google.cloud.bigquery.datatransfer.v1.EmailPreferences email_preferences = 25 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_email_preferences() const;
  private:
  bool _internal_has_email_preferences() const;
  public:
  void clear_email_preferences();
  const ::google::cloud::bigquery::datatransfer::v1::EmailPreferences& email_preferences() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::datatransfer::v1::EmailPreferences* release_email_preferences();
  ::google::cloud::bigquery::datatransfer::v1::EmailPreferences* mutable_email_preferences();
  void set_allocated_email_preferences(::google::cloud::bigquery::datatransfer::v1::EmailPreferences* email_preferences);
  private:
  const ::google::cloud::bigquery::datatransfer::v1::EmailPreferences& _internal_email_preferences() const;
  ::google::cloud::bigquery::datatransfer::v1::EmailPreferences* _internal_mutable_email_preferences();
  public:
  void unsafe_arena_set_allocated_email_preferences(
      ::google::cloud::bigquery::datatransfer::v1::EmailPreferences* email_preferences);
  ::google::cloud::bigquery::datatransfer::v1::EmailPreferences* unsafe_arena_release_email_preferences();

  // int64 user_id = 11;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // .google.cloud.bigquery.datatransfer.v1.TransferState state = 8;
  void clear_state();
  ::google::cloud::bigquery::datatransfer::v1::TransferState state() const;
  void set_state(::google::cloud::bigquery::datatransfer::v1::TransferState value);
  private:
  ::google::cloud::bigquery::datatransfer::v1::TransferState _internal_state() const;
  void _internal_set_state(::google::cloud::bigquery::datatransfer::v1::TransferState value);
  public:

  // string destination_dataset_id = 2 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_destination_dataset_id() const;
  private:
  bool _internal_has_destination_dataset_id() const;
  public:
  void clear_destination_dataset_id();
  const std::string& destination_dataset_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_destination_dataset_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_destination_dataset_id();
  PROTOBUF_NODISCARD std::string* release_destination_dataset_id();
  void set_allocated_destination_dataset_id(std::string* destination_dataset_id);
  private:
  const std::string& _internal_destination_dataset_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_destination_dataset_id(const std::string& value);
  std::string* _internal_mutable_destination_dataset_id();
  public:

  void clear_destination();
  DestinationCase destination_case() const;
  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.datatransfer.v1.TransferRun)
 private:
  class _Internal;
  void set_has_destination_dataset_id();

  inline bool has_destination() const;
  inline void clear_has_destination();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_source_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr schedule_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr notification_pubsub_topic_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* schedule_time_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* start_time_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* end_time_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* update_time_;
    ::PROTOBUF_NAMESPACE_ID::Struct* params_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* run_time_;
    ::google::rpc::Status* error_status_;
    ::google::cloud::bigquery::datatransfer::v1::EmailPreferences* email_preferences_;
    int64_t user_id_;
    int state_;
    union DestinationUnion {
      constexpr DestinationUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr destination_dataset_id_;
    } destination_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2ftransfer_2eproto;
};
// -------------------------------------------------------------------

class TransferMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.datatransfer.v1.TransferMessage) */ {
 public:
  inline TransferMessage() : TransferMessage(nullptr) {}
  ~TransferMessage() override;
  explicit PROTOBUF_CONSTEXPR TransferMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransferMessage(const TransferMessage& from);
  TransferMessage(TransferMessage&& from) noexcept
    : TransferMessage() {
    *this = ::std::move(from);
  }

  inline TransferMessage& operator=(const TransferMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransferMessage& operator=(TransferMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransferMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransferMessage* internal_default_instance() {
    return reinterpret_cast<const TransferMessage*>(
               &_TransferMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TransferMessage& a, TransferMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(TransferMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransferMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransferMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransferMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransferMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransferMessage& from) {
    TransferMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.datatransfer.v1.TransferMessage";
  }
  protected:
  explicit TransferMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TransferMessage_MessageSeverity MessageSeverity;
  static constexpr MessageSeverity MESSAGE_SEVERITY_UNSPECIFIED =
    TransferMessage_MessageSeverity_MESSAGE_SEVERITY_UNSPECIFIED;
  static constexpr MessageSeverity INFO =
    TransferMessage_MessageSeverity_INFO;
  static constexpr MessageSeverity WARNING =
    TransferMessage_MessageSeverity_WARNING;
  static constexpr MessageSeverity ERROR =
    TransferMessage_MessageSeverity_ERROR;
  static inline bool MessageSeverity_IsValid(int value) {
    return TransferMessage_MessageSeverity_IsValid(value);
  }
  static constexpr MessageSeverity MessageSeverity_MIN =
    TransferMessage_MessageSeverity_MessageSeverity_MIN;
  static constexpr MessageSeverity MessageSeverity_MAX =
    TransferMessage_MessageSeverity_MessageSeverity_MAX;
  static constexpr int MessageSeverity_ARRAYSIZE =
    TransferMessage_MessageSeverity_MessageSeverity_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MessageSeverity_descriptor() {
    return TransferMessage_MessageSeverity_descriptor();
  }
  template<typename T>
  static inline const std::string& MessageSeverity_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MessageSeverity>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MessageSeverity_Name.");
    return TransferMessage_MessageSeverity_Name(enum_t_value);
  }
  static inline bool MessageSeverity_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MessageSeverity* value) {
    return TransferMessage_MessageSeverity_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMessageTextFieldNumber = 3,
    kMessageTimeFieldNumber = 1,
    kSeverityFieldNumber = 2,
  };
  // string message_text = 3;
  void clear_message_text();
  const std::string& message_text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message_text();
  PROTOBUF_NODISCARD std::string* release_message_text();
  void set_allocated_message_text(std::string* message_text);
  private:
  const std::string& _internal_message_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message_text(const std::string& value);
  std::string* _internal_mutable_message_text();
  public:

  // .google.protobuf.Timestamp message_time = 1;
  bool has_message_time() const;
  private:
  bool _internal_has_message_time() const;
  public:
  void clear_message_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& message_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_message_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_message_time();
  void set_allocated_message_time(::PROTOBUF_NAMESPACE_ID::Timestamp* message_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_message_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_message_time();
  public:
  void unsafe_arena_set_allocated_message_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* message_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_message_time();

  // .google.cloud.bigquery.datatransfer.v1.TransferMessage.MessageSeverity severity = 2;
  void clear_severity();
  ::google::cloud::bigquery::datatransfer::v1::TransferMessage_MessageSeverity severity() const;
  void set_severity(::google::cloud::bigquery::datatransfer::v1::TransferMessage_MessageSeverity value);
  private:
  ::google::cloud::bigquery::datatransfer::v1::TransferMessage_MessageSeverity _internal_severity() const;
  void _internal_set_severity(::google::cloud::bigquery::datatransfer::v1::TransferMessage_MessageSeverity value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.datatransfer.v1.TransferMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_text_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* message_time_;
    int severity_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2ftransfer_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EmailPreferences

// bool enable_failure_email = 1;
inline void EmailPreferences::clear_enable_failure_email() {
  _impl_.enable_failure_email_ = false;
}
inline bool EmailPreferences::_internal_enable_failure_email() const {
  return _impl_.enable_failure_email_;
}
inline bool EmailPreferences::enable_failure_email() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.EmailPreferences.enable_failure_email)
  return _internal_enable_failure_email();
}
inline void EmailPreferences::_internal_set_enable_failure_email(bool value) {
  
  _impl_.enable_failure_email_ = value;
}
inline void EmailPreferences::set_enable_failure_email(bool value) {
  _internal_set_enable_failure_email(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.EmailPreferences.enable_failure_email)
}

// -------------------------------------------------------------------

// ScheduleOptions

// bool disable_auto_scheduling = 3;
inline void ScheduleOptions::clear_disable_auto_scheduling() {
  _impl_.disable_auto_scheduling_ = false;
}
inline bool ScheduleOptions::_internal_disable_auto_scheduling() const {
  return _impl_.disable_auto_scheduling_;
}
inline bool ScheduleOptions::disable_auto_scheduling() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.ScheduleOptions.disable_auto_scheduling)
  return _internal_disable_auto_scheduling();
}
inline void ScheduleOptions::_internal_set_disable_auto_scheduling(bool value) {
  
  _impl_.disable_auto_scheduling_ = value;
}
inline void ScheduleOptions::set_disable_auto_scheduling(bool value) {
  _internal_set_disable_auto_scheduling(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.ScheduleOptions.disable_auto_scheduling)
}

// .google.protobuf.Timestamp start_time = 1;
inline bool ScheduleOptions::_internal_has_start_time() const {
  return this != internal_default_instance() && _impl_.start_time_ != nullptr;
}
inline bool ScheduleOptions::has_start_time() const {
  return _internal_has_start_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ScheduleOptions::_internal_start_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.start_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ScheduleOptions::start_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.ScheduleOptions.start_time)
  return _internal_start_time();
}
inline void ScheduleOptions::unsafe_arena_set_allocated_start_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* start_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.start_time_);
  }
  _impl_.start_time_ = start_time;
  if (start_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.datatransfer.v1.ScheduleOptions.start_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ScheduleOptions::release_start_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.start_time_;
  _impl_.start_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ScheduleOptions::unsafe_arena_release_start_time() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.ScheduleOptions.start_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.start_time_;
  _impl_.start_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ScheduleOptions::_internal_mutable_start_time() {
  
  if (_impl_.start_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.start_time_ = p;
  }
  return _impl_.start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ScheduleOptions::mutable_start_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_start_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.ScheduleOptions.start_time)
  return _msg;
}
inline void ScheduleOptions::set_allocated_start_time(::PROTOBUF_NAMESPACE_ID::Timestamp* start_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.start_time_);
  }
  if (start_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time));
    if (message_arena != submessage_arena) {
      start_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.start_time_ = start_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.ScheduleOptions.start_time)
}

// .google.protobuf.Timestamp end_time = 2;
inline bool ScheduleOptions::_internal_has_end_time() const {
  return this != internal_default_instance() && _impl_.end_time_ != nullptr;
}
inline bool ScheduleOptions::has_end_time() const {
  return _internal_has_end_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ScheduleOptions::_internal_end_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.end_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ScheduleOptions::end_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.ScheduleOptions.end_time)
  return _internal_end_time();
}
inline void ScheduleOptions::unsafe_arena_set_allocated_end_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.end_time_);
  }
  _impl_.end_time_ = end_time;
  if (end_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.datatransfer.v1.ScheduleOptions.end_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ScheduleOptions::release_end_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.end_time_;
  _impl_.end_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ScheduleOptions::unsafe_arena_release_end_time() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.ScheduleOptions.end_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.end_time_;
  _impl_.end_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ScheduleOptions::_internal_mutable_end_time() {
  
  if (_impl_.end_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.end_time_ = p;
  }
  return _impl_.end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ScheduleOptions::mutable_end_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_end_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.ScheduleOptions.end_time)
  return _msg;
}
inline void ScheduleOptions::set_allocated_end_time(::PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.end_time_);
  }
  if (end_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time));
    if (message_arena != submessage_arena) {
      end_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.end_time_ = end_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.ScheduleOptions.end_time)
}

// -------------------------------------------------------------------

// UserInfo

// optional string email = 1;
inline bool UserInfo::_internal_has_email() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UserInfo::has_email() const {
  return _internal_has_email();
}
inline void UserInfo::clear_email() {
  _impl_.email_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UserInfo::email() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.UserInfo.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserInfo::set_email(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.email_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.UserInfo.email)
}
inline std::string* UserInfo::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.UserInfo.email)
  return _s;
}
inline const std::string& UserInfo::_internal_email() const {
  return _impl_.email_.Get();
}
inline void UserInfo::_internal_set_email(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.email_.Set(value, GetArenaForAllocation());
}
inline std::string* UserInfo::_internal_mutable_email() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.email_.Mutable(GetArenaForAllocation());
}
inline std::string* UserInfo::release_email() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.UserInfo.email)
  if (!_internal_has_email()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.email_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.email_.IsDefault()) {
    _impl_.email_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void UserInfo::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.email_.SetAllocated(email, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.email_.IsDefault()) {
    _impl_.email_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.UserInfo.email)
}

// -------------------------------------------------------------------

// TransferConfig

// string name = 1;
inline void TransferConfig::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& TransferConfig::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.TransferConfig.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransferConfig::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.TransferConfig.name)
}
inline std::string* TransferConfig::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.TransferConfig.name)
  return _s;
}
inline const std::string& TransferConfig::_internal_name() const {
  return _impl_.name_.Get();
}
inline void TransferConfig::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* TransferConfig::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* TransferConfig::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.TransferConfig.name)
  return _impl_.name_.Release();
}
inline void TransferConfig::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.TransferConfig.name)
}

// string destination_dataset_id = 2;
inline bool TransferConfig::_internal_has_destination_dataset_id() const {
  return destination_case() == kDestinationDatasetId;
}
inline bool TransferConfig::has_destination_dataset_id() const {
  return _internal_has_destination_dataset_id();
}
inline void TransferConfig::set_has_destination_dataset_id() {
  _impl_._oneof_case_[0] = kDestinationDatasetId;
}
inline void TransferConfig::clear_destination_dataset_id() {
  if (_internal_has_destination_dataset_id()) {
    _impl_.destination_.destination_dataset_id_.Destroy();
    clear_has_destination();
  }
}
inline const std::string& TransferConfig::destination_dataset_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.TransferConfig.destination_dataset_id)
  return _internal_destination_dataset_id();
}
template <typename ArgT0, typename... ArgT>
inline void TransferConfig::set_destination_dataset_id(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_destination_dataset_id()) {
    clear_destination();
    set_has_destination_dataset_id();
    _impl_.destination_.destination_dataset_id_.InitDefault();
  }
  _impl_.destination_.destination_dataset_id_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.TransferConfig.destination_dataset_id)
}
inline std::string* TransferConfig::mutable_destination_dataset_id() {
  std::string* _s = _internal_mutable_destination_dataset_id();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.TransferConfig.destination_dataset_id)
  return _s;
}
inline const std::string& TransferConfig::_internal_destination_dataset_id() const {
  if (_internal_has_destination_dataset_id()) {
    return _impl_.destination_.destination_dataset_id_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TransferConfig::_internal_set_destination_dataset_id(const std::string& value) {
  if (!_internal_has_destination_dataset_id()) {
    clear_destination();
    set_has_destination_dataset_id();
    _impl_.destination_.destination_dataset_id_.InitDefault();
  }
  _impl_.destination_.destination_dataset_id_.Set(value, GetArenaForAllocation());
}
inline std::string* TransferConfig::_internal_mutable_destination_dataset_id() {
  if (!_internal_has_destination_dataset_id()) {
    clear_destination();
    set_has_destination_dataset_id();
    _impl_.destination_.destination_dataset_id_.InitDefault();
  }
  return _impl_.destination_.destination_dataset_id_.Mutable(      GetArenaForAllocation());
}
inline std::string* TransferConfig::release_destination_dataset_id() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.TransferConfig.destination_dataset_id)
  if (_internal_has_destination_dataset_id()) {
    clear_has_destination();
    return _impl_.destination_.destination_dataset_id_.Release();
  } else {
    return nullptr;
  }
}
inline void TransferConfig::set_allocated_destination_dataset_id(std::string* destination_dataset_id) {
  if (has_destination()) {
    clear_destination();
  }
  if (destination_dataset_id != nullptr) {
    set_has_destination_dataset_id();
    _impl_.destination_.destination_dataset_id_.InitAllocated(destination_dataset_id, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.TransferConfig.destination_dataset_id)
}

// string display_name = 3;
inline void TransferConfig::clear_display_name() {
  _impl_.display_name_.ClearToEmpty();
}
inline const std::string& TransferConfig::display_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.TransferConfig.display_name)
  return _internal_display_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransferConfig::set_display_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.display_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.TransferConfig.display_name)
}
inline std::string* TransferConfig::mutable_display_name() {
  std::string* _s = _internal_mutable_display_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.TransferConfig.display_name)
  return _s;
}
inline const std::string& TransferConfig::_internal_display_name() const {
  return _impl_.display_name_.Get();
}
inline void TransferConfig::_internal_set_display_name(const std::string& value) {
  
  _impl_.display_name_.Set(value, GetArenaForAllocation());
}
inline std::string* TransferConfig::_internal_mutable_display_name() {
  
  return _impl_.display_name_.Mutable(GetArenaForAllocation());
}
inline std::string* TransferConfig::release_display_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.TransferConfig.display_name)
  return _impl_.display_name_.Release();
}
inline void TransferConfig::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    
  } else {
    
  }
  _impl_.display_name_.SetAllocated(display_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.display_name_.IsDefault()) {
    _impl_.display_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.TransferConfig.display_name)
}

// string data_source_id = 5;
inline void TransferConfig::clear_data_source_id() {
  _impl_.data_source_id_.ClearToEmpty();
}
inline const std::string& TransferConfig::data_source_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.TransferConfig.data_source_id)
  return _internal_data_source_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransferConfig::set_data_source_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_source_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.TransferConfig.data_source_id)
}
inline std::string* TransferConfig::mutable_data_source_id() {
  std::string* _s = _internal_mutable_data_source_id();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.TransferConfig.data_source_id)
  return _s;
}
inline const std::string& TransferConfig::_internal_data_source_id() const {
  return _impl_.data_source_id_.Get();
}
inline void TransferConfig::_internal_set_data_source_id(const std::string& value) {
  
  _impl_.data_source_id_.Set(value, GetArenaForAllocation());
}
inline std::string* TransferConfig::_internal_mutable_data_source_id() {
  
  return _impl_.data_source_id_.Mutable(GetArenaForAllocation());
}
inline std::string* TransferConfig::release_data_source_id() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.TransferConfig.data_source_id)
  return _impl_.data_source_id_.Release();
}
inline void TransferConfig::set_allocated_data_source_id(std::string* data_source_id) {
  if (data_source_id != nullptr) {
    
  } else {
    
  }
  _impl_.data_source_id_.SetAllocated(data_source_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_source_id_.IsDefault()) {
    _impl_.data_source_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.TransferConfig.data_source_id)
}

// .google.protobuf.Struct params = 9;
inline bool TransferConfig::_internal_has_params() const {
  return this != internal_default_instance() && _impl_.params_ != nullptr;
}
inline bool TransferConfig::has_params() const {
  return _internal_has_params();
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& TransferConfig::_internal_params() const {
  const ::PROTOBUF_NAMESPACE_ID::Struct* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Struct&>(
      ::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& TransferConfig::params() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.TransferConfig.params)
  return _internal_params();
}
inline void TransferConfig::unsafe_arena_set_allocated_params(
    ::PROTOBUF_NAMESPACE_ID::Struct* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.datatransfer.v1.TransferConfig.params)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* TransferConfig::release_params() {
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* TransferConfig::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.TransferConfig.params)
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* TransferConfig::_internal_mutable_params() {
  
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* TransferConfig::mutable_params() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.TransferConfig.params)
  return _msg;
}
inline void TransferConfig::set_allocated_params(::PROTOBUF_NAMESPACE_ID::Struct* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(params));
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.TransferConfig.params)
}

// string schedule = 7;
inline void TransferConfig::clear_schedule() {
  _impl_.schedule_.ClearToEmpty();
}
inline const std::string& TransferConfig::schedule() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.TransferConfig.schedule)
  return _internal_schedule();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransferConfig::set_schedule(ArgT0&& arg0, ArgT... args) {
 
 _impl_.schedule_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.TransferConfig.schedule)
}
inline std::string* TransferConfig::mutable_schedule() {
  std::string* _s = _internal_mutable_schedule();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.TransferConfig.schedule)
  return _s;
}
inline const std::string& TransferConfig::_internal_schedule() const {
  return _impl_.schedule_.Get();
}
inline void TransferConfig::_internal_set_schedule(const std::string& value) {
  
  _impl_.schedule_.Set(value, GetArenaForAllocation());
}
inline std::string* TransferConfig::_internal_mutable_schedule() {
  
  return _impl_.schedule_.Mutable(GetArenaForAllocation());
}
inline std::string* TransferConfig::release_schedule() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.TransferConfig.schedule)
  return _impl_.schedule_.Release();
}
inline void TransferConfig::set_allocated_schedule(std::string* schedule) {
  if (schedule != nullptr) {
    
  } else {
    
  }
  _impl_.schedule_.SetAllocated(schedule, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.schedule_.IsDefault()) {
    _impl_.schedule_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.TransferConfig.schedule)
}

// .google.cloud.bigquery.datatransfer.v1.ScheduleOptions schedule_options = 24;
inline bool TransferConfig::_internal_has_schedule_options() const {
  return this != internal_default_instance() && _impl_.schedule_options_ != nullptr;
}
inline bool TransferConfig::has_schedule_options() const {
  return _internal_has_schedule_options();
}
inline void TransferConfig::clear_schedule_options() {
  if (GetArenaForAllocation() == nullptr && _impl_.schedule_options_ != nullptr) {
    delete _impl_.schedule_options_;
  }
  _impl_.schedule_options_ = nullptr;
}
inline const ::google::cloud::bigquery::datatransfer::v1::ScheduleOptions& TransferConfig::_internal_schedule_options() const {
  const ::google::cloud::bigquery::datatransfer::v1::ScheduleOptions* p = _impl_.schedule_options_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::datatransfer::v1::ScheduleOptions&>(
      ::google::cloud::bigquery::datatransfer::v1::_ScheduleOptions_default_instance_);
}
inline const ::google::cloud::bigquery::datatransfer::v1::ScheduleOptions& TransferConfig::schedule_options() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.TransferConfig.schedule_options)
  return _internal_schedule_options();
}
inline void TransferConfig::unsafe_arena_set_allocated_schedule_options(
    ::google::cloud::bigquery::datatransfer::v1::ScheduleOptions* schedule_options) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.schedule_options_);
  }
  _impl_.schedule_options_ = schedule_options;
  if (schedule_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.datatransfer.v1.TransferConfig.schedule_options)
}
inline ::google::cloud::bigquery::datatransfer::v1::ScheduleOptions* TransferConfig::release_schedule_options() {
  
  ::google::cloud::bigquery::datatransfer::v1::ScheduleOptions* temp = _impl_.schedule_options_;
  _impl_.schedule_options_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::datatransfer::v1::ScheduleOptions* TransferConfig::unsafe_arena_release_schedule_options() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.TransferConfig.schedule_options)
  
  ::google::cloud::bigquery::datatransfer::v1::ScheduleOptions* temp = _impl_.schedule_options_;
  _impl_.schedule_options_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::datatransfer::v1::ScheduleOptions* TransferConfig::_internal_mutable_schedule_options() {
  
  if (_impl_.schedule_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::datatransfer::v1::ScheduleOptions>(GetArenaForAllocation());
    _impl_.schedule_options_ = p;
  }
  return _impl_.schedule_options_;
}
inline ::google::cloud::bigquery::datatransfer::v1::ScheduleOptions* TransferConfig::mutable_schedule_options() {
  ::google::cloud::bigquery::datatransfer::v1::ScheduleOptions* _msg = _internal_mutable_schedule_options();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.TransferConfig.schedule_options)
  return _msg;
}
inline void TransferConfig::set_allocated_schedule_options(::google::cloud::bigquery::datatransfer::v1::ScheduleOptions* schedule_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.schedule_options_;
  }
  if (schedule_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(schedule_options);
    if (message_arena != submessage_arena) {
      schedule_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, schedule_options, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.schedule_options_ = schedule_options;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.TransferConfig.schedule_options)
}

// int32 data_refresh_window_days = 12;
inline void TransferConfig::clear_data_refresh_window_days() {
  _impl_.data_refresh_window_days_ = 0;
}
inline int32_t TransferConfig::_internal_data_refresh_window_days() const {
  return _impl_.data_refresh_window_days_;
}
inline int32_t TransferConfig::data_refresh_window_days() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.TransferConfig.data_refresh_window_days)
  return _internal_data_refresh_window_days();
}
inline void TransferConfig::_internal_set_data_refresh_window_days(int32_t value) {
  
  _impl_.data_refresh_window_days_ = value;
}
inline void TransferConfig::set_data_refresh_window_days(int32_t value) {
  _internal_set_data_refresh_window_days(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.TransferConfig.data_refresh_window_days)
}

// bool disabled = 13;
inline void TransferConfig::clear_disabled() {
  _impl_.disabled_ = false;
}
inline bool TransferConfig::_internal_disabled() const {
  return _impl_.disabled_;
}
inline bool TransferConfig::disabled() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.TransferConfig.disabled)
  return _internal_disabled();
}
inline void TransferConfig::_internal_set_disabled(bool value) {
  
  _impl_.disabled_ = value;
}
inline void TransferConfig::set_disabled(bool value) {
  _internal_set_disabled(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.TransferConfig.disabled)
}

// .google.protobuf.Timestamp update_time = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool TransferConfig::_internal_has_update_time() const {
  return this != internal_default_instance() && _impl_.update_time_ != nullptr;
}
inline bool TransferConfig::has_update_time() const {
  return _internal_has_update_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TransferConfig::_internal_update_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.update_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TransferConfig::update_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.TransferConfig.update_time)
  return _internal_update_time();
}
inline void TransferConfig::unsafe_arena_set_allocated_update_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* update_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_time_);
  }
  _impl_.update_time_ = update_time;
  if (update_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.datatransfer.v1.TransferConfig.update_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TransferConfig::release_update_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.update_time_;
  _impl_.update_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TransferConfig::unsafe_arena_release_update_time() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.TransferConfig.update_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.update_time_;
  _impl_.update_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TransferConfig::_internal_mutable_update_time() {
  
  if (_impl_.update_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.update_time_ = p;
  }
  return _impl_.update_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TransferConfig::mutable_update_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_update_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.TransferConfig.update_time)
  return _msg;
}
inline void TransferConfig::set_allocated_update_time(::PROTOBUF_NAMESPACE_ID::Timestamp* update_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_time_);
  }
  if (update_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_time));
    if (message_arena != submessage_arena) {
      update_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.update_time_ = update_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.TransferConfig.update_time)
}

// .google.protobuf.Timestamp next_run_time = 8 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool TransferConfig::_internal_has_next_run_time() const {
  return this != internal_default_instance() && _impl_.next_run_time_ != nullptr;
}
inline bool TransferConfig::has_next_run_time() const {
  return _internal_has_next_run_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TransferConfig::_internal_next_run_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.next_run_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TransferConfig::next_run_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.TransferConfig.next_run_time)
  return _internal_next_run_time();
}
inline void TransferConfig::unsafe_arena_set_allocated_next_run_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* next_run_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.next_run_time_);
  }
  _impl_.next_run_time_ = next_run_time;
  if (next_run_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.datatransfer.v1.TransferConfig.next_run_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TransferConfig::release_next_run_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.next_run_time_;
  _impl_.next_run_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TransferConfig::unsafe_arena_release_next_run_time() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.TransferConfig.next_run_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.next_run_time_;
  _impl_.next_run_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TransferConfig::_internal_mutable_next_run_time() {
  
  if (_impl_.next_run_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.next_run_time_ = p;
  }
  return _impl_.next_run_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TransferConfig::mutable_next_run_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_next_run_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.TransferConfig.next_run_time)
  return _msg;
}
inline void TransferConfig::set_allocated_next_run_time(::PROTOBUF_NAMESPACE_ID::Timestamp* next_run_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.next_run_time_);
  }
  if (next_run_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(next_run_time));
    if (message_arena != submessage_arena) {
      next_run_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, next_run_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.next_run_time_ = next_run_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.TransferConfig.next_run_time)
}

// .google.cloud.bigquery.datatransfer.v1.TransferState state = 10 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void TransferConfig::clear_state() {
  _impl_.state_ = 0;
}
inline ::google::cloud::bigquery::datatransfer::v1::TransferState TransferConfig::_internal_state() const {
  return static_cast< ::google::cloud::bigquery::datatransfer::v1::TransferState >(_impl_.state_);
}
inline ::google::cloud::bigquery::datatransfer::v1::TransferState TransferConfig::state() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.TransferConfig.state)
  return _internal_state();
}
inline void TransferConfig::_internal_set_state(::google::cloud::bigquery::datatransfer::v1::TransferState value) {
  
  _impl_.state_ = value;
}
inline void TransferConfig::set_state(::google::cloud::bigquery::datatransfer::v1::TransferState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.TransferConfig.state)
}

// int64 user_id = 11;
inline void TransferConfig::clear_user_id() {
  _impl_.user_id_ = int64_t{0};
}
inline int64_t TransferConfig::_internal_user_id() const {
  return _impl_.user_id_;
}
inline int64_t TransferConfig::user_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.TransferConfig.user_id)
  return _internal_user_id();
}
inline void TransferConfig::_internal_set_user_id(int64_t value) {
  
  _impl_.user_id_ = value;
}
inline void TransferConfig::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.TransferConfig.user_id)
}

// string dataset_region = 14 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void TransferConfig::clear_dataset_region() {
  _impl_.dataset_region_.ClearToEmpty();
}
inline const std::string& TransferConfig::dataset_region() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.TransferConfig.dataset_region)
  return _internal_dataset_region();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransferConfig::set_dataset_region(ArgT0&& arg0, ArgT... args) {
 
 _impl_.dataset_region_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.TransferConfig.dataset_region)
}
inline std::string* TransferConfig::mutable_dataset_region() {
  std::string* _s = _internal_mutable_dataset_region();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.TransferConfig.dataset_region)
  return _s;
}
inline const std::string& TransferConfig::_internal_dataset_region() const {
  return _impl_.dataset_region_.Get();
}
inline void TransferConfig::_internal_set_dataset_region(const std::string& value) {
  
  _impl_.dataset_region_.Set(value, GetArenaForAllocation());
}
inline std::string* TransferConfig::_internal_mutable_dataset_region() {
  
  return _impl_.dataset_region_.Mutable(GetArenaForAllocation());
}
inline std::string* TransferConfig::release_dataset_region() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.TransferConfig.dataset_region)
  return _impl_.dataset_region_.Release();
}
inline void TransferConfig::set_allocated_dataset_region(std::string* dataset_region) {
  if (dataset_region != nullptr) {
    
  } else {
    
  }
  _impl_.dataset_region_.SetAllocated(dataset_region, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dataset_region_.IsDefault()) {
    _impl_.dataset_region_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.TransferConfig.dataset_region)
}

// string notification_pubsub_topic = 15;
inline void TransferConfig::clear_notification_pubsub_topic() {
  _impl_.notification_pubsub_topic_.ClearToEmpty();
}
inline const std::string& TransferConfig::notification_pubsub_topic() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.TransferConfig.notification_pubsub_topic)
  return _internal_notification_pubsub_topic();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransferConfig::set_notification_pubsub_topic(ArgT0&& arg0, ArgT... args) {
 
 _impl_.notification_pubsub_topic_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.TransferConfig.notification_pubsub_topic)
}
inline std::string* TransferConfig::mutable_notification_pubsub_topic() {
  std::string* _s = _internal_mutable_notification_pubsub_topic();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.TransferConfig.notification_pubsub_topic)
  return _s;
}
inline const std::string& TransferConfig::_internal_notification_pubsub_topic() const {
  return _impl_.notification_pubsub_topic_.Get();
}
inline void TransferConfig::_internal_set_notification_pubsub_topic(const std::string& value) {
  
  _impl_.notification_pubsub_topic_.Set(value, GetArenaForAllocation());
}
inline std::string* TransferConfig::_internal_mutable_notification_pubsub_topic() {
  
  return _impl_.notification_pubsub_topic_.Mutable(GetArenaForAllocation());
}
inline std::string* TransferConfig::release_notification_pubsub_topic() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.TransferConfig.notification_pubsub_topic)
  return _impl_.notification_pubsub_topic_.Release();
}
inline void TransferConfig::set_allocated_notification_pubsub_topic(std::string* notification_pubsub_topic) {
  if (notification_pubsub_topic != nullptr) {
    
  } else {
    
  }
  _impl_.notification_pubsub_topic_.SetAllocated(notification_pubsub_topic, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.notification_pubsub_topic_.IsDefault()) {
    _impl_.notification_pubsub_topic_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.TransferConfig.notification_pubsub_topic)
}

// .google.cloud.bigquery.datatransfer.v1.EmailPreferences email_preferences = 18;
inline bool TransferConfig::_internal_has_email_preferences() const {
  return this != internal_default_instance() && _impl_.email_preferences_ != nullptr;
}
inline bool TransferConfig::has_email_preferences() const {
  return _internal_has_email_preferences();
}
inline void TransferConfig::clear_email_preferences() {
  if (GetArenaForAllocation() == nullptr && _impl_.email_preferences_ != nullptr) {
    delete _impl_.email_preferences_;
  }
  _impl_.email_preferences_ = nullptr;
}
inline const ::google::cloud::bigquery::datatransfer::v1::EmailPreferences& TransferConfig::_internal_email_preferences() const {
  const ::google::cloud::bigquery::datatransfer::v1::EmailPreferences* p = _impl_.email_preferences_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::datatransfer::v1::EmailPreferences&>(
      ::google::cloud::bigquery::datatransfer::v1::_EmailPreferences_default_instance_);
}
inline const ::google::cloud::bigquery::datatransfer::v1::EmailPreferences& TransferConfig::email_preferences() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.TransferConfig.email_preferences)
  return _internal_email_preferences();
}
inline void TransferConfig::unsafe_arena_set_allocated_email_preferences(
    ::google::cloud::bigquery::datatransfer::v1::EmailPreferences* email_preferences) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.email_preferences_);
  }
  _impl_.email_preferences_ = email_preferences;
  if (email_preferences) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.datatransfer.v1.TransferConfig.email_preferences)
}
inline ::google::cloud::bigquery::datatransfer::v1::EmailPreferences* TransferConfig::release_email_preferences() {
  
  ::google::cloud::bigquery::datatransfer::v1::EmailPreferences* temp = _impl_.email_preferences_;
  _impl_.email_preferences_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::datatransfer::v1::EmailPreferences* TransferConfig::unsafe_arena_release_email_preferences() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.TransferConfig.email_preferences)
  
  ::google::cloud::bigquery::datatransfer::v1::EmailPreferences* temp = _impl_.email_preferences_;
  _impl_.email_preferences_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::datatransfer::v1::EmailPreferences* TransferConfig::_internal_mutable_email_preferences() {
  
  if (_impl_.email_preferences_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::datatransfer::v1::EmailPreferences>(GetArenaForAllocation());
    _impl_.email_preferences_ = p;
  }
  return _impl_.email_preferences_;
}
inline ::google::cloud::bigquery::datatransfer::v1::EmailPreferences* TransferConfig::mutable_email_preferences() {
  ::google::cloud::bigquery::datatransfer::v1::EmailPreferences* _msg = _internal_mutable_email_preferences();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.TransferConfig.email_preferences)
  return _msg;
}
inline void TransferConfig::set_allocated_email_preferences(::google::cloud::bigquery::datatransfer::v1::EmailPreferences* email_preferences) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.email_preferences_;
  }
  if (email_preferences) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(email_preferences);
    if (message_arena != submessage_arena) {
      email_preferences = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, email_preferences, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.email_preferences_ = email_preferences;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.TransferConfig.email_preferences)
}

// optional .google.cloud.bigquery.datatransfer.v1.UserInfo owner_info = 27 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool TransferConfig::_internal_has_owner_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.owner_info_ != nullptr);
  return value;
}
inline bool TransferConfig::has_owner_info() const {
  return _internal_has_owner_info();
}
inline void TransferConfig::clear_owner_info() {
  if (_impl_.owner_info_ != nullptr) _impl_.owner_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::google::cloud::bigquery::datatransfer::v1::UserInfo& TransferConfig::_internal_owner_info() const {
  const ::google::cloud::bigquery::datatransfer::v1::UserInfo* p = _impl_.owner_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::datatransfer::v1::UserInfo&>(
      ::google::cloud::bigquery::datatransfer::v1::_UserInfo_default_instance_);
}
inline const ::google::cloud::bigquery::datatransfer::v1::UserInfo& TransferConfig::owner_info() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.TransferConfig.owner_info)
  return _internal_owner_info();
}
inline void TransferConfig::unsafe_arena_set_allocated_owner_info(
    ::google::cloud::bigquery::datatransfer::v1::UserInfo* owner_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.owner_info_);
  }
  _impl_.owner_info_ = owner_info;
  if (owner_info) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.datatransfer.v1.TransferConfig.owner_info)
}
inline ::google::cloud::bigquery::datatransfer::v1::UserInfo* TransferConfig::release_owner_info() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::cloud::bigquery::datatransfer::v1::UserInfo* temp = _impl_.owner_info_;
  _impl_.owner_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::datatransfer::v1::UserInfo* TransferConfig::unsafe_arena_release_owner_info() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.TransferConfig.owner_info)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::cloud::bigquery::datatransfer::v1::UserInfo* temp = _impl_.owner_info_;
  _impl_.owner_info_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::datatransfer::v1::UserInfo* TransferConfig::_internal_mutable_owner_info() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.owner_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::datatransfer::v1::UserInfo>(GetArenaForAllocation());
    _impl_.owner_info_ = p;
  }
  return _impl_.owner_info_;
}
inline ::google::cloud::bigquery::datatransfer::v1::UserInfo* TransferConfig::mutable_owner_info() {
  ::google::cloud::bigquery::datatransfer::v1::UserInfo* _msg = _internal_mutable_owner_info();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.TransferConfig.owner_info)
  return _msg;
}
inline void TransferConfig::set_allocated_owner_info(::google::cloud::bigquery::datatransfer::v1::UserInfo* owner_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.owner_info_;
  }
  if (owner_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(owner_info);
    if (message_arena != submessage_arena) {
      owner_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, owner_info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.owner_info_ = owner_info;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.TransferConfig.owner_info)
}

inline bool TransferConfig::has_destination() const {
  return destination_case() != DESTINATION_NOT_SET;
}
inline void TransferConfig::clear_has_destination() {
  _impl_._oneof_case_[0] = DESTINATION_NOT_SET;
}
inline TransferConfig::DestinationCase TransferConfig::destination_case() const {
  return TransferConfig::DestinationCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// TransferRun

// string name = 1;
inline void TransferRun::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& TransferRun::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.TransferRun.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransferRun::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.TransferRun.name)
}
inline std::string* TransferRun::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.TransferRun.name)
  return _s;
}
inline const std::string& TransferRun::_internal_name() const {
  return _impl_.name_.Get();
}
inline void TransferRun::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* TransferRun::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* TransferRun::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.TransferRun.name)
  return _impl_.name_.Release();
}
inline void TransferRun::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.TransferRun.name)
}

// .google.protobuf.Timestamp schedule_time = 3;
inline bool TransferRun::_internal_has_schedule_time() const {
  return this != internal_default_instance() && _impl_.schedule_time_ != nullptr;
}
inline bool TransferRun::has_schedule_time() const {
  return _internal_has_schedule_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TransferRun::_internal_schedule_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.schedule_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TransferRun::schedule_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.TransferRun.schedule_time)
  return _internal_schedule_time();
}
inline void TransferRun::unsafe_arena_set_allocated_schedule_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* schedule_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.schedule_time_);
  }
  _impl_.schedule_time_ = schedule_time;
  if (schedule_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.datatransfer.v1.TransferRun.schedule_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TransferRun::release_schedule_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.schedule_time_;
  _impl_.schedule_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TransferRun::unsafe_arena_release_schedule_time() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.TransferRun.schedule_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.schedule_time_;
  _impl_.schedule_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TransferRun::_internal_mutable_schedule_time() {
  
  if (_impl_.schedule_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.schedule_time_ = p;
  }
  return _impl_.schedule_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TransferRun::mutable_schedule_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_schedule_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.TransferRun.schedule_time)
  return _msg;
}
inline void TransferRun::set_allocated_schedule_time(::PROTOBUF_NAMESPACE_ID::Timestamp* schedule_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.schedule_time_);
  }
  if (schedule_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(schedule_time));
    if (message_arena != submessage_arena) {
      schedule_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, schedule_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.schedule_time_ = schedule_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.TransferRun.schedule_time)
}

// .google.protobuf.Timestamp run_time = 10;
inline bool TransferRun::_internal_has_run_time() const {
  return this != internal_default_instance() && _impl_.run_time_ != nullptr;
}
inline bool TransferRun::has_run_time() const {
  return _internal_has_run_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TransferRun::_internal_run_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.run_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TransferRun::run_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.TransferRun.run_time)
  return _internal_run_time();
}
inline void TransferRun::unsafe_arena_set_allocated_run_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* run_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.run_time_);
  }
  _impl_.run_time_ = run_time;
  if (run_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.datatransfer.v1.TransferRun.run_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TransferRun::release_run_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.run_time_;
  _impl_.run_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TransferRun::unsafe_arena_release_run_time() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.TransferRun.run_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.run_time_;
  _impl_.run_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TransferRun::_internal_mutable_run_time() {
  
  if (_impl_.run_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.run_time_ = p;
  }
  return _impl_.run_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TransferRun::mutable_run_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_run_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.TransferRun.run_time)
  return _msg;
}
inline void TransferRun::set_allocated_run_time(::PROTOBUF_NAMESPACE_ID::Timestamp* run_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.run_time_);
  }
  if (run_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(run_time));
    if (message_arena != submessage_arena) {
      run_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, run_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.run_time_ = run_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.TransferRun.run_time)
}

// .google.rpc.Status error_status = 21;
inline bool TransferRun::_internal_has_error_status() const {
  return this != internal_default_instance() && _impl_.error_status_ != nullptr;
}
inline bool TransferRun::has_error_status() const {
  return _internal_has_error_status();
}
inline const ::google::rpc::Status& TransferRun::_internal_error_status() const {
  const ::google::rpc::Status* p = _impl_.error_status_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::rpc::Status&>(
      ::google::rpc::_Status_default_instance_);
}
inline const ::google::rpc::Status& TransferRun::error_status() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.TransferRun.error_status)
  return _internal_error_status();
}
inline void TransferRun::unsafe_arena_set_allocated_error_status(
    ::google::rpc::Status* error_status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_status_);
  }
  _impl_.error_status_ = error_status;
  if (error_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.datatransfer.v1.TransferRun.error_status)
}
inline ::google::rpc::Status* TransferRun::release_error_status() {
  
  ::google::rpc::Status* temp = _impl_.error_status_;
  _impl_.error_status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::rpc::Status* TransferRun::unsafe_arena_release_error_status() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.TransferRun.error_status)
  
  ::google::rpc::Status* temp = _impl_.error_status_;
  _impl_.error_status_ = nullptr;
  return temp;
}
inline ::google::rpc::Status* TransferRun::_internal_mutable_error_status() {
  
  if (_impl_.error_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::rpc::Status>(GetArenaForAllocation());
    _impl_.error_status_ = p;
  }
  return _impl_.error_status_;
}
inline ::google::rpc::Status* TransferRun::mutable_error_status() {
  ::google::rpc::Status* _msg = _internal_mutable_error_status();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.TransferRun.error_status)
  return _msg;
}
inline void TransferRun::set_allocated_error_status(::google::rpc::Status* error_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_status_);
  }
  if (error_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_status));
    if (message_arena != submessage_arena) {
      error_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error_status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.error_status_ = error_status;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.TransferRun.error_status)
}

// .google.protobuf.Timestamp start_time = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool TransferRun::_internal_has_start_time() const {
  return this != internal_default_instance() && _impl_.start_time_ != nullptr;
}
inline bool TransferRun::has_start_time() const {
  return _internal_has_start_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TransferRun::_internal_start_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.start_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TransferRun::start_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.TransferRun.start_time)
  return _internal_start_time();
}
inline void TransferRun::unsafe_arena_set_allocated_start_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* start_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.start_time_);
  }
  _impl_.start_time_ = start_time;
  if (start_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.datatransfer.v1.TransferRun.start_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TransferRun::release_start_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.start_time_;
  _impl_.start_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TransferRun::unsafe_arena_release_start_time() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.TransferRun.start_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.start_time_;
  _impl_.start_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TransferRun::_internal_mutable_start_time() {
  
  if (_impl_.start_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.start_time_ = p;
  }
  return _impl_.start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TransferRun::mutable_start_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_start_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.TransferRun.start_time)
  return _msg;
}
inline void TransferRun::set_allocated_start_time(::PROTOBUF_NAMESPACE_ID::Timestamp* start_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.start_time_);
  }
  if (start_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time));
    if (message_arena != submessage_arena) {
      start_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.start_time_ = start_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.TransferRun.start_time)
}

// .google.protobuf.Timestamp end_time = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool TransferRun::_internal_has_end_time() const {
  return this != internal_default_instance() && _impl_.end_time_ != nullptr;
}
inline bool TransferRun::has_end_time() const {
  return _internal_has_end_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TransferRun::_internal_end_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.end_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TransferRun::end_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.TransferRun.end_time)
  return _internal_end_time();
}
inline void TransferRun::unsafe_arena_set_allocated_end_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.end_time_);
  }
  _impl_.end_time_ = end_time;
  if (end_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.datatransfer.v1.TransferRun.end_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TransferRun::release_end_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.end_time_;
  _impl_.end_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TransferRun::unsafe_arena_release_end_time() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.TransferRun.end_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.end_time_;
  _impl_.end_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TransferRun::_internal_mutable_end_time() {
  
  if (_impl_.end_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.end_time_ = p;
  }
  return _impl_.end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TransferRun::mutable_end_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_end_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.TransferRun.end_time)
  return _msg;
}
inline void TransferRun::set_allocated_end_time(::PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.end_time_);
  }
  if (end_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time));
    if (message_arena != submessage_arena) {
      end_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.end_time_ = end_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.TransferRun.end_time)
}

// .google.protobuf.Timestamp update_time = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool TransferRun::_internal_has_update_time() const {
  return this != internal_default_instance() && _impl_.update_time_ != nullptr;
}
inline bool TransferRun::has_update_time() const {
  return _internal_has_update_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TransferRun::_internal_update_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.update_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TransferRun::update_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.TransferRun.update_time)
  return _internal_update_time();
}
inline void TransferRun::unsafe_arena_set_allocated_update_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* update_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_time_);
  }
  _impl_.update_time_ = update_time;
  if (update_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.datatransfer.v1.TransferRun.update_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TransferRun::release_update_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.update_time_;
  _impl_.update_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TransferRun::unsafe_arena_release_update_time() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.TransferRun.update_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.update_time_;
  _impl_.update_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TransferRun::_internal_mutable_update_time() {
  
  if (_impl_.update_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.update_time_ = p;
  }
  return _impl_.update_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TransferRun::mutable_update_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_update_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.TransferRun.update_time)
  return _msg;
}
inline void TransferRun::set_allocated_update_time(::PROTOBUF_NAMESPACE_ID::Timestamp* update_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_time_);
  }
  if (update_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_time));
    if (message_arena != submessage_arena) {
      update_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.update_time_ = update_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.TransferRun.update_time)
}

// .google.protobuf.Struct params = 9 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool TransferRun::_internal_has_params() const {
  return this != internal_default_instance() && _impl_.params_ != nullptr;
}
inline bool TransferRun::has_params() const {
  return _internal_has_params();
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& TransferRun::_internal_params() const {
  const ::PROTOBUF_NAMESPACE_ID::Struct* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Struct&>(
      ::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& TransferRun::params() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.TransferRun.params)
  return _internal_params();
}
inline void TransferRun::unsafe_arena_set_allocated_params(
    ::PROTOBUF_NAMESPACE_ID::Struct* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.datatransfer.v1.TransferRun.params)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* TransferRun::release_params() {
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* TransferRun::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.TransferRun.params)
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* TransferRun::_internal_mutable_params() {
  
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* TransferRun::mutable_params() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.TransferRun.params)
  return _msg;
}
inline void TransferRun::set_allocated_params(::PROTOBUF_NAMESPACE_ID::Struct* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(params));
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.TransferRun.params)
}

// string destination_dataset_id = 2 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool TransferRun::_internal_has_destination_dataset_id() const {
  return destination_case() == kDestinationDatasetId;
}
inline bool TransferRun::has_destination_dataset_id() const {
  return _internal_has_destination_dataset_id();
}
inline void TransferRun::set_has_destination_dataset_id() {
  _impl_._oneof_case_[0] = kDestinationDatasetId;
}
inline void TransferRun::clear_destination_dataset_id() {
  if (_internal_has_destination_dataset_id()) {
    _impl_.destination_.destination_dataset_id_.Destroy();
    clear_has_destination();
  }
}
inline const std::string& TransferRun::destination_dataset_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.TransferRun.destination_dataset_id)
  return _internal_destination_dataset_id();
}
template <typename ArgT0, typename... ArgT>
inline void TransferRun::set_destination_dataset_id(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_destination_dataset_id()) {
    clear_destination();
    set_has_destination_dataset_id();
    _impl_.destination_.destination_dataset_id_.InitDefault();
  }
  _impl_.destination_.destination_dataset_id_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.TransferRun.destination_dataset_id)
}
inline std::string* TransferRun::mutable_destination_dataset_id() {
  std::string* _s = _internal_mutable_destination_dataset_id();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.TransferRun.destination_dataset_id)
  return _s;
}
inline const std::string& TransferRun::_internal_destination_dataset_id() const {
  if (_internal_has_destination_dataset_id()) {
    return _impl_.destination_.destination_dataset_id_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TransferRun::_internal_set_destination_dataset_id(const std::string& value) {
  if (!_internal_has_destination_dataset_id()) {
    clear_destination();
    set_has_destination_dataset_id();
    _impl_.destination_.destination_dataset_id_.InitDefault();
  }
  _impl_.destination_.destination_dataset_id_.Set(value, GetArenaForAllocation());
}
inline std::string* TransferRun::_internal_mutable_destination_dataset_id() {
  if (!_internal_has_destination_dataset_id()) {
    clear_destination();
    set_has_destination_dataset_id();
    _impl_.destination_.destination_dataset_id_.InitDefault();
  }
  return _impl_.destination_.destination_dataset_id_.Mutable(      GetArenaForAllocation());
}
inline std::string* TransferRun::release_destination_dataset_id() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.TransferRun.destination_dataset_id)
  if (_internal_has_destination_dataset_id()) {
    clear_has_destination();
    return _impl_.destination_.destination_dataset_id_.Release();
  } else {
    return nullptr;
  }
}
inline void TransferRun::set_allocated_destination_dataset_id(std::string* destination_dataset_id) {
  if (has_destination()) {
    clear_destination();
  }
  if (destination_dataset_id != nullptr) {
    set_has_destination_dataset_id();
    _impl_.destination_.destination_dataset_id_.InitAllocated(destination_dataset_id, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.TransferRun.destination_dataset_id)
}

// string data_source_id = 7 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void TransferRun::clear_data_source_id() {
  _impl_.data_source_id_.ClearToEmpty();
}
inline const std::string& TransferRun::data_source_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.TransferRun.data_source_id)
  return _internal_data_source_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransferRun::set_data_source_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_source_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.TransferRun.data_source_id)
}
inline std::string* TransferRun::mutable_data_source_id() {
  std::string* _s = _internal_mutable_data_source_id();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.TransferRun.data_source_id)
  return _s;
}
inline const std::string& TransferRun::_internal_data_source_id() const {
  return _impl_.data_source_id_.Get();
}
inline void TransferRun::_internal_set_data_source_id(const std::string& value) {
  
  _impl_.data_source_id_.Set(value, GetArenaForAllocation());
}
inline std::string* TransferRun::_internal_mutable_data_source_id() {
  
  return _impl_.data_source_id_.Mutable(GetArenaForAllocation());
}
inline std::string* TransferRun::release_data_source_id() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.TransferRun.data_source_id)
  return _impl_.data_source_id_.Release();
}
inline void TransferRun::set_allocated_data_source_id(std::string* data_source_id) {
  if (data_source_id != nullptr) {
    
  } else {
    
  }
  _impl_.data_source_id_.SetAllocated(data_source_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_source_id_.IsDefault()) {
    _impl_.data_source_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.TransferRun.data_source_id)
}

// .google.cloud.bigquery.datatransfer.v1.TransferState state = 8;
inline void TransferRun::clear_state() {
  _impl_.state_ = 0;
}
inline ::google::cloud::bigquery::datatransfer::v1::TransferState TransferRun::_internal_state() const {
  return static_cast< ::google::cloud::bigquery::datatransfer::v1::TransferState >(_impl_.state_);
}
inline ::google::cloud::bigquery::datatransfer::v1::TransferState TransferRun::state() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.TransferRun.state)
  return _internal_state();
}
inline void TransferRun::_internal_set_state(::google::cloud::bigquery::datatransfer::v1::TransferState value) {
  
  _impl_.state_ = value;
}
inline void TransferRun::set_state(::google::cloud::bigquery::datatransfer::v1::TransferState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.TransferRun.state)
}

// int64 user_id = 11;
inline void TransferRun::clear_user_id() {
  _impl_.user_id_ = int64_t{0};
}
inline int64_t TransferRun::_internal_user_id() const {
  return _impl_.user_id_;
}
inline int64_t TransferRun::user_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.TransferRun.user_id)
  return _internal_user_id();
}
inline void TransferRun::_internal_set_user_id(int64_t value) {
  
  _impl_.user_id_ = value;
}
inline void TransferRun::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.TransferRun.user_id)
}

// string schedule = 12 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void TransferRun::clear_schedule() {
  _impl_.schedule_.ClearToEmpty();
}
inline const std::string& TransferRun::schedule() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.TransferRun.schedule)
  return _internal_schedule();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransferRun::set_schedule(ArgT0&& arg0, ArgT... args) {
 
 _impl_.schedule_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.TransferRun.schedule)
}
inline std::string* TransferRun::mutable_schedule() {
  std::string* _s = _internal_mutable_schedule();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.TransferRun.schedule)
  return _s;
}
inline const std::string& TransferRun::_internal_schedule() const {
  return _impl_.schedule_.Get();
}
inline void TransferRun::_internal_set_schedule(const std::string& value) {
  
  _impl_.schedule_.Set(value, GetArenaForAllocation());
}
inline std::string* TransferRun::_internal_mutable_schedule() {
  
  return _impl_.schedule_.Mutable(GetArenaForAllocation());
}
inline std::string* TransferRun::release_schedule() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.TransferRun.schedule)
  return _impl_.schedule_.Release();
}
inline void TransferRun::set_allocated_schedule(std::string* schedule) {
  if (schedule != nullptr) {
    
  } else {
    
  }
  _impl_.schedule_.SetAllocated(schedule, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.schedule_.IsDefault()) {
    _impl_.schedule_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.TransferRun.schedule)
}

// string notification_pubsub_topic = 23 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void TransferRun::clear_notification_pubsub_topic() {
  _impl_.notification_pubsub_topic_.ClearToEmpty();
}
inline const std::string& TransferRun::notification_pubsub_topic() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.TransferRun.notification_pubsub_topic)
  return _internal_notification_pubsub_topic();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransferRun::set_notification_pubsub_topic(ArgT0&& arg0, ArgT... args) {
 
 _impl_.notification_pubsub_topic_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.TransferRun.notification_pubsub_topic)
}
inline std::string* TransferRun::mutable_notification_pubsub_topic() {
  std::string* _s = _internal_mutable_notification_pubsub_topic();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.TransferRun.notification_pubsub_topic)
  return _s;
}
inline const std::string& TransferRun::_internal_notification_pubsub_topic() const {
  return _impl_.notification_pubsub_topic_.Get();
}
inline void TransferRun::_internal_set_notification_pubsub_topic(const std::string& value) {
  
  _impl_.notification_pubsub_topic_.Set(value, GetArenaForAllocation());
}
inline std::string* TransferRun::_internal_mutable_notification_pubsub_topic() {
  
  return _impl_.notification_pubsub_topic_.Mutable(GetArenaForAllocation());
}
inline std::string* TransferRun::release_notification_pubsub_topic() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.TransferRun.notification_pubsub_topic)
  return _impl_.notification_pubsub_topic_.Release();
}
inline void TransferRun::set_allocated_notification_pubsub_topic(std::string* notification_pubsub_topic) {
  if (notification_pubsub_topic != nullptr) {
    
  } else {
    
  }
  _impl_.notification_pubsub_topic_.SetAllocated(notification_pubsub_topic, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.notification_pubsub_topic_.IsDefault()) {
    _impl_.notification_pubsub_topic_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.TransferRun.notification_pubsub_topic)
}

// .google.cloud.bigquery.datatransfer.v1.EmailPreferences email_preferences = 25 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool TransferRun::_internal_has_email_preferences() const {
  return this != internal_default_instance() && _impl_.email_preferences_ != nullptr;
}
inline bool TransferRun::has_email_preferences() const {
  return _internal_has_email_preferences();
}
inline void TransferRun::clear_email_preferences() {
  if (GetArenaForAllocation() == nullptr && _impl_.email_preferences_ != nullptr) {
    delete _impl_.email_preferences_;
  }
  _impl_.email_preferences_ = nullptr;
}
inline const ::google::cloud::bigquery::datatransfer::v1::EmailPreferences& TransferRun::_internal_email_preferences() const {
  const ::google::cloud::bigquery::datatransfer::v1::EmailPreferences* p = _impl_.email_preferences_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::datatransfer::v1::EmailPreferences&>(
      ::google::cloud::bigquery::datatransfer::v1::_EmailPreferences_default_instance_);
}
inline const ::google::cloud::bigquery::datatransfer::v1::EmailPreferences& TransferRun::email_preferences() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.TransferRun.email_preferences)
  return _internal_email_preferences();
}
inline void TransferRun::unsafe_arena_set_allocated_email_preferences(
    ::google::cloud::bigquery::datatransfer::v1::EmailPreferences* email_preferences) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.email_preferences_);
  }
  _impl_.email_preferences_ = email_preferences;
  if (email_preferences) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.datatransfer.v1.TransferRun.email_preferences)
}
inline ::google::cloud::bigquery::datatransfer::v1::EmailPreferences* TransferRun::release_email_preferences() {
  
  ::google::cloud::bigquery::datatransfer::v1::EmailPreferences* temp = _impl_.email_preferences_;
  _impl_.email_preferences_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::datatransfer::v1::EmailPreferences* TransferRun::unsafe_arena_release_email_preferences() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.TransferRun.email_preferences)
  
  ::google::cloud::bigquery::datatransfer::v1::EmailPreferences* temp = _impl_.email_preferences_;
  _impl_.email_preferences_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::datatransfer::v1::EmailPreferences* TransferRun::_internal_mutable_email_preferences() {
  
  if (_impl_.email_preferences_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::datatransfer::v1::EmailPreferences>(GetArenaForAllocation());
    _impl_.email_preferences_ = p;
  }
  return _impl_.email_preferences_;
}
inline ::google::cloud::bigquery::datatransfer::v1::EmailPreferences* TransferRun::mutable_email_preferences() {
  ::google::cloud::bigquery::datatransfer::v1::EmailPreferences* _msg = _internal_mutable_email_preferences();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.TransferRun.email_preferences)
  return _msg;
}
inline void TransferRun::set_allocated_email_preferences(::google::cloud::bigquery::datatransfer::v1::EmailPreferences* email_preferences) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.email_preferences_;
  }
  if (email_preferences) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(email_preferences);
    if (message_arena != submessage_arena) {
      email_preferences = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, email_preferences, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.email_preferences_ = email_preferences;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.TransferRun.email_preferences)
}

inline bool TransferRun::has_destination() const {
  return destination_case() != DESTINATION_NOT_SET;
}
inline void TransferRun::clear_has_destination() {
  _impl_._oneof_case_[0] = DESTINATION_NOT_SET;
}
inline TransferRun::DestinationCase TransferRun::destination_case() const {
  return TransferRun::DestinationCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// TransferMessage

// .google.protobuf.Timestamp message_time = 1;
inline bool TransferMessage::_internal_has_message_time() const {
  return this != internal_default_instance() && _impl_.message_time_ != nullptr;
}
inline bool TransferMessage::has_message_time() const {
  return _internal_has_message_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TransferMessage::_internal_message_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.message_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TransferMessage::message_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.TransferMessage.message_time)
  return _internal_message_time();
}
inline void TransferMessage::unsafe_arena_set_allocated_message_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* message_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.message_time_);
  }
  _impl_.message_time_ = message_time;
  if (message_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.datatransfer.v1.TransferMessage.message_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TransferMessage::release_message_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.message_time_;
  _impl_.message_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TransferMessage::unsafe_arena_release_message_time() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.TransferMessage.message_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.message_time_;
  _impl_.message_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TransferMessage::_internal_mutable_message_time() {
  
  if (_impl_.message_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.message_time_ = p;
  }
  return _impl_.message_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TransferMessage::mutable_message_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_message_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.TransferMessage.message_time)
  return _msg;
}
inline void TransferMessage::set_allocated_message_time(::PROTOBUF_NAMESPACE_ID::Timestamp* message_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.message_time_);
  }
  if (message_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_time));
    if (message_arena != submessage_arena) {
      message_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.message_time_ = message_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.TransferMessage.message_time)
}

// .google.cloud.bigquery.datatransfer.v1.TransferMessage.MessageSeverity severity = 2;
inline void TransferMessage::clear_severity() {
  _impl_.severity_ = 0;
}
inline ::google::cloud::bigquery::datatransfer::v1::TransferMessage_MessageSeverity TransferMessage::_internal_severity() const {
  return static_cast< ::google::cloud::bigquery::datatransfer::v1::TransferMessage_MessageSeverity >(_impl_.severity_);
}
inline ::google::cloud::bigquery::datatransfer::v1::TransferMessage_MessageSeverity TransferMessage::severity() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.TransferMessage.severity)
  return _internal_severity();
}
inline void TransferMessage::_internal_set_severity(::google::cloud::bigquery::datatransfer::v1::TransferMessage_MessageSeverity value) {
  
  _impl_.severity_ = value;
}
inline void TransferMessage::set_severity(::google::cloud::bigquery::datatransfer::v1::TransferMessage_MessageSeverity value) {
  _internal_set_severity(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.TransferMessage.severity)
}

// string message_text = 3;
inline void TransferMessage::clear_message_text() {
  _impl_.message_text_.ClearToEmpty();
}
inline const std::string& TransferMessage::message_text() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.TransferMessage.message_text)
  return _internal_message_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransferMessage::set_message_text(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.TransferMessage.message_text)
}
inline std::string* TransferMessage::mutable_message_text() {
  std::string* _s = _internal_mutable_message_text();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.TransferMessage.message_text)
  return _s;
}
inline const std::string& TransferMessage::_internal_message_text() const {
  return _impl_.message_text_.Get();
}
inline void TransferMessage::_internal_set_message_text(const std::string& value) {
  
  _impl_.message_text_.Set(value, GetArenaForAllocation());
}
inline std::string* TransferMessage::_internal_mutable_message_text() {
  
  return _impl_.message_text_.Mutable(GetArenaForAllocation());
}
inline std::string* TransferMessage::release_message_text() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.TransferMessage.message_text)
  return _impl_.message_text_.Release();
}
inline void TransferMessage::set_allocated_message_text(std::string* message_text) {
  if (message_text != nullptr) {
    
  } else {
    
  }
  _impl_.message_text_.SetAllocated(message_text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_text_.IsDefault()) {
    _impl_.message_text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.TransferMessage.message_text)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace datatransfer
}  // namespace bigquery
}  // namespace cloud
}  // namespace google

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::google::cloud::bigquery::datatransfer::v1::TransferMessage_MessageSeverity> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::bigquery::datatransfer::v1::TransferMessage_MessageSeverity>() {
  return ::google::cloud::bigquery::datatransfer::v1::TransferMessage_MessageSeverity_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::bigquery::datatransfer::v1::TransferType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::bigquery::datatransfer::v1::TransferType>() {
  return ::google::cloud::bigquery::datatransfer::v1::TransferType_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::bigquery::datatransfer::v1::TransferState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::bigquery::datatransfer::v1::TransferState>() {
  return ::google::cloud::bigquery::datatransfer::v1::TransferState_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2ftransfer_2eproto
