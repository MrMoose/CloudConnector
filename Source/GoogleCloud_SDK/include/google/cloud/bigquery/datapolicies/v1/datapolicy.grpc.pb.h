// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/cloud/bigquery/datapolicies/v1/datapolicy.proto
// Original file comments:
// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_google_2fcloud_2fbigquery_2fdatapolicies_2fv1_2fdatapolicy_2eproto__INCLUDED
#define GRPC_google_2fcloud_2fbigquery_2fdatapolicies_2fv1_2fdatapolicy_2eproto__INCLUDED

#include "google/cloud/bigquery/datapolicies/v1/datapolicy.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace google {
namespace cloud {
namespace bigquery {
namespace datapolicies {
namespace v1 {

// Data Policy Service provides APIs for managing the label-policy bindings.
class DataPolicyService final {
 public:
  static constexpr char const* service_full_name() {
    return "google.cloud.bigquery.datapolicies.v1.DataPolicyService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Creates a new data policy under a project with the given `dataPolicyId`
    // (used as the display name), policy tag, and data policy type.
    virtual ::grpc::Status CreateDataPolicy(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::CreateDataPolicyRequest& request, ::google::cloud::bigquery::datapolicies::v1::DataPolicy* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datapolicies::v1::DataPolicy>> AsyncCreateDataPolicy(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::CreateDataPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datapolicies::v1::DataPolicy>>(AsyncCreateDataPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datapolicies::v1::DataPolicy>> PrepareAsyncCreateDataPolicy(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::CreateDataPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datapolicies::v1::DataPolicy>>(PrepareAsyncCreateDataPolicyRaw(context, request, cq));
    }
    // Updates the metadata for an existing data policy. The target data policy
    // can be specified by the resource name.
    virtual ::grpc::Status UpdateDataPolicy(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::UpdateDataPolicyRequest& request, ::google::cloud::bigquery::datapolicies::v1::DataPolicy* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datapolicies::v1::DataPolicy>> AsyncUpdateDataPolicy(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::UpdateDataPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datapolicies::v1::DataPolicy>>(AsyncUpdateDataPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datapolicies::v1::DataPolicy>> PrepareAsyncUpdateDataPolicy(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::UpdateDataPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datapolicies::v1::DataPolicy>>(PrepareAsyncUpdateDataPolicyRaw(context, request, cq));
    }
    // Renames the id (display name) of the specified data policy.
    virtual ::grpc::Status RenameDataPolicy(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::RenameDataPolicyRequest& request, ::google::cloud::bigquery::datapolicies::v1::DataPolicy* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datapolicies::v1::DataPolicy>> AsyncRenameDataPolicy(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::RenameDataPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datapolicies::v1::DataPolicy>>(AsyncRenameDataPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datapolicies::v1::DataPolicy>> PrepareAsyncRenameDataPolicy(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::RenameDataPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datapolicies::v1::DataPolicy>>(PrepareAsyncRenameDataPolicyRaw(context, request, cq));
    }
    // Deletes the data policy specified by its resource name.
    virtual ::grpc::Status DeleteDataPolicy(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::DeleteDataPolicyRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeleteDataPolicy(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::DeleteDataPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteDataPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncDeleteDataPolicy(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::DeleteDataPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncDeleteDataPolicyRaw(context, request, cq));
    }
    // Gets the data policy specified by its resource name.
    virtual ::grpc::Status GetDataPolicy(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::GetDataPolicyRequest& request, ::google::cloud::bigquery::datapolicies::v1::DataPolicy* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datapolicies::v1::DataPolicy>> AsyncGetDataPolicy(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::GetDataPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datapolicies::v1::DataPolicy>>(AsyncGetDataPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datapolicies::v1::DataPolicy>> PrepareAsyncGetDataPolicy(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::GetDataPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datapolicies::v1::DataPolicy>>(PrepareAsyncGetDataPolicyRaw(context, request, cq));
    }
    // List all of the data policies in the specified parent project.
    virtual ::grpc::Status ListDataPolicies(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::ListDataPoliciesRequest& request, ::google::cloud::bigquery::datapolicies::v1::ListDataPoliciesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datapolicies::v1::ListDataPoliciesResponse>> AsyncListDataPolicies(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::ListDataPoliciesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datapolicies::v1::ListDataPoliciesResponse>>(AsyncListDataPoliciesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datapolicies::v1::ListDataPoliciesResponse>> PrepareAsyncListDataPolicies(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::ListDataPoliciesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datapolicies::v1::ListDataPoliciesResponse>>(PrepareAsyncListDataPoliciesRaw(context, request, cq));
    }
    // Gets the IAM policy for the specified data policy.
    virtual ::grpc::Status GetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::google::iam::v1::Policy* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>> AsyncGetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>>(AsyncGetIamPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>> PrepareAsyncGetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>>(PrepareAsyncGetIamPolicyRaw(context, request, cq));
    }
    // Sets the IAM policy for the specified data policy.
    virtual ::grpc::Status SetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::google::iam::v1::Policy* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>> AsyncSetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>>(AsyncSetIamPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>> PrepareAsyncSetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>>(PrepareAsyncSetIamPolicyRaw(context, request, cq));
    }
    // Returns the caller's permission on the specified data policy resource.
    virtual ::grpc::Status TestIamPermissions(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::google::iam::v1::TestIamPermissionsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::TestIamPermissionsResponse>> AsyncTestIamPermissions(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::TestIamPermissionsResponse>>(AsyncTestIamPermissionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::TestIamPermissionsResponse>> PrepareAsyncTestIamPermissions(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::TestIamPermissionsResponse>>(PrepareAsyncTestIamPermissionsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Creates a new data policy under a project with the given `dataPolicyId`
      // (used as the display name), policy tag, and data policy type.
      virtual void CreateDataPolicy(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::CreateDataPolicyRequest* request, ::google::cloud::bigquery::datapolicies::v1::DataPolicy* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateDataPolicy(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::CreateDataPolicyRequest* request, ::google::cloud::bigquery::datapolicies::v1::DataPolicy* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Updates the metadata for an existing data policy. The target data policy
      // can be specified by the resource name.
      virtual void UpdateDataPolicy(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::UpdateDataPolicyRequest* request, ::google::cloud::bigquery::datapolicies::v1::DataPolicy* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateDataPolicy(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::UpdateDataPolicyRequest* request, ::google::cloud::bigquery::datapolicies::v1::DataPolicy* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Renames the id (display name) of the specified data policy.
      virtual void RenameDataPolicy(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::RenameDataPolicyRequest* request, ::google::cloud::bigquery::datapolicies::v1::DataPolicy* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RenameDataPolicy(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::RenameDataPolicyRequest* request, ::google::cloud::bigquery::datapolicies::v1::DataPolicy* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Deletes the data policy specified by its resource name.
      virtual void DeleteDataPolicy(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::DeleteDataPolicyRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteDataPolicy(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::DeleteDataPolicyRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Gets the data policy specified by its resource name.
      virtual void GetDataPolicy(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::GetDataPolicyRequest* request, ::google::cloud::bigquery::datapolicies::v1::DataPolicy* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetDataPolicy(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::GetDataPolicyRequest* request, ::google::cloud::bigquery::datapolicies::v1::DataPolicy* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // List all of the data policies in the specified parent project.
      virtual void ListDataPolicies(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::ListDataPoliciesRequest* request, ::google::cloud::bigquery::datapolicies::v1::ListDataPoliciesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListDataPolicies(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::ListDataPoliciesRequest* request, ::google::cloud::bigquery::datapolicies::v1::ListDataPoliciesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Gets the IAM policy for the specified data policy.
      virtual void GetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest* request, ::google::iam::v1::Policy* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest* request, ::google::iam::v1::Policy* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Sets the IAM policy for the specified data policy.
      virtual void SetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest* request, ::google::iam::v1::Policy* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest* request, ::google::iam::v1::Policy* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Returns the caller's permission on the specified data policy resource.
      virtual void TestIamPermissions(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest* request, ::google::iam::v1::TestIamPermissionsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TestIamPermissions(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest* request, ::google::iam::v1::TestIamPermissionsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datapolicies::v1::DataPolicy>* AsyncCreateDataPolicyRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::CreateDataPolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datapolicies::v1::DataPolicy>* PrepareAsyncCreateDataPolicyRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::CreateDataPolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datapolicies::v1::DataPolicy>* AsyncUpdateDataPolicyRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::UpdateDataPolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datapolicies::v1::DataPolicy>* PrepareAsyncUpdateDataPolicyRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::UpdateDataPolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datapolicies::v1::DataPolicy>* AsyncRenameDataPolicyRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::RenameDataPolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datapolicies::v1::DataPolicy>* PrepareAsyncRenameDataPolicyRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::RenameDataPolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteDataPolicyRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::DeleteDataPolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncDeleteDataPolicyRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::DeleteDataPolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datapolicies::v1::DataPolicy>* AsyncGetDataPolicyRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::GetDataPolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datapolicies::v1::DataPolicy>* PrepareAsyncGetDataPolicyRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::GetDataPolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datapolicies::v1::ListDataPoliciesResponse>* AsyncListDataPoliciesRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::ListDataPoliciesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::datapolicies::v1::ListDataPoliciesResponse>* PrepareAsyncListDataPoliciesRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::ListDataPoliciesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>* AsyncGetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>* PrepareAsyncGetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>* AsyncSetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>* PrepareAsyncSetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::TestIamPermissionsResponse>* AsyncTestIamPermissionsRaw(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::TestIamPermissionsResponse>* PrepareAsyncTestIamPermissionsRaw(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status CreateDataPolicy(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::CreateDataPolicyRequest& request, ::google::cloud::bigquery::datapolicies::v1::DataPolicy* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datapolicies::v1::DataPolicy>> AsyncCreateDataPolicy(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::CreateDataPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datapolicies::v1::DataPolicy>>(AsyncCreateDataPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datapolicies::v1::DataPolicy>> PrepareAsyncCreateDataPolicy(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::CreateDataPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datapolicies::v1::DataPolicy>>(PrepareAsyncCreateDataPolicyRaw(context, request, cq));
    }
    ::grpc::Status UpdateDataPolicy(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::UpdateDataPolicyRequest& request, ::google::cloud::bigquery::datapolicies::v1::DataPolicy* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datapolicies::v1::DataPolicy>> AsyncUpdateDataPolicy(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::UpdateDataPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datapolicies::v1::DataPolicy>>(AsyncUpdateDataPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datapolicies::v1::DataPolicy>> PrepareAsyncUpdateDataPolicy(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::UpdateDataPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datapolicies::v1::DataPolicy>>(PrepareAsyncUpdateDataPolicyRaw(context, request, cq));
    }
    ::grpc::Status RenameDataPolicy(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::RenameDataPolicyRequest& request, ::google::cloud::bigquery::datapolicies::v1::DataPolicy* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datapolicies::v1::DataPolicy>> AsyncRenameDataPolicy(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::RenameDataPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datapolicies::v1::DataPolicy>>(AsyncRenameDataPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datapolicies::v1::DataPolicy>> PrepareAsyncRenameDataPolicy(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::RenameDataPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datapolicies::v1::DataPolicy>>(PrepareAsyncRenameDataPolicyRaw(context, request, cq));
    }
    ::grpc::Status DeleteDataPolicy(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::DeleteDataPolicyRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeleteDataPolicy(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::DeleteDataPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteDataPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncDeleteDataPolicy(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::DeleteDataPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncDeleteDataPolicyRaw(context, request, cq));
    }
    ::grpc::Status GetDataPolicy(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::GetDataPolicyRequest& request, ::google::cloud::bigquery::datapolicies::v1::DataPolicy* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datapolicies::v1::DataPolicy>> AsyncGetDataPolicy(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::GetDataPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datapolicies::v1::DataPolicy>>(AsyncGetDataPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datapolicies::v1::DataPolicy>> PrepareAsyncGetDataPolicy(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::GetDataPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datapolicies::v1::DataPolicy>>(PrepareAsyncGetDataPolicyRaw(context, request, cq));
    }
    ::grpc::Status ListDataPolicies(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::ListDataPoliciesRequest& request, ::google::cloud::bigquery::datapolicies::v1::ListDataPoliciesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datapolicies::v1::ListDataPoliciesResponse>> AsyncListDataPolicies(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::ListDataPoliciesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datapolicies::v1::ListDataPoliciesResponse>>(AsyncListDataPoliciesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datapolicies::v1::ListDataPoliciesResponse>> PrepareAsyncListDataPolicies(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::ListDataPoliciesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datapolicies::v1::ListDataPoliciesResponse>>(PrepareAsyncListDataPoliciesRaw(context, request, cq));
    }
    ::grpc::Status GetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::google::iam::v1::Policy* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>> AsyncGetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>>(AsyncGetIamPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>> PrepareAsyncGetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>>(PrepareAsyncGetIamPolicyRaw(context, request, cq));
    }
    ::grpc::Status SetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::google::iam::v1::Policy* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>> AsyncSetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>>(AsyncSetIamPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>> PrepareAsyncSetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>>(PrepareAsyncSetIamPolicyRaw(context, request, cq));
    }
    ::grpc::Status TestIamPermissions(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::google::iam::v1::TestIamPermissionsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::TestIamPermissionsResponse>> AsyncTestIamPermissions(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::TestIamPermissionsResponse>>(AsyncTestIamPermissionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::TestIamPermissionsResponse>> PrepareAsyncTestIamPermissions(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::TestIamPermissionsResponse>>(PrepareAsyncTestIamPermissionsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void CreateDataPolicy(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::CreateDataPolicyRequest* request, ::google::cloud::bigquery::datapolicies::v1::DataPolicy* response, std::function<void(::grpc::Status)>) override;
      void CreateDataPolicy(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::CreateDataPolicyRequest* request, ::google::cloud::bigquery::datapolicies::v1::DataPolicy* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateDataPolicy(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::UpdateDataPolicyRequest* request, ::google::cloud::bigquery::datapolicies::v1::DataPolicy* response, std::function<void(::grpc::Status)>) override;
      void UpdateDataPolicy(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::UpdateDataPolicyRequest* request, ::google::cloud::bigquery::datapolicies::v1::DataPolicy* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RenameDataPolicy(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::RenameDataPolicyRequest* request, ::google::cloud::bigquery::datapolicies::v1::DataPolicy* response, std::function<void(::grpc::Status)>) override;
      void RenameDataPolicy(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::RenameDataPolicyRequest* request, ::google::cloud::bigquery::datapolicies::v1::DataPolicy* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteDataPolicy(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::DeleteDataPolicyRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void DeleteDataPolicy(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::DeleteDataPolicyRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetDataPolicy(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::GetDataPolicyRequest* request, ::google::cloud::bigquery::datapolicies::v1::DataPolicy* response, std::function<void(::grpc::Status)>) override;
      void GetDataPolicy(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::GetDataPolicyRequest* request, ::google::cloud::bigquery::datapolicies::v1::DataPolicy* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListDataPolicies(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::ListDataPoliciesRequest* request, ::google::cloud::bigquery::datapolicies::v1::ListDataPoliciesResponse* response, std::function<void(::grpc::Status)>) override;
      void ListDataPolicies(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::ListDataPoliciesRequest* request, ::google::cloud::bigquery::datapolicies::v1::ListDataPoliciesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest* request, ::google::iam::v1::Policy* response, std::function<void(::grpc::Status)>) override;
      void GetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest* request, ::google::iam::v1::Policy* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest* request, ::google::iam::v1::Policy* response, std::function<void(::grpc::Status)>) override;
      void SetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest* request, ::google::iam::v1::Policy* response, ::grpc::ClientUnaryReactor* reactor) override;
      void TestIamPermissions(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest* request, ::google::iam::v1::TestIamPermissionsResponse* response, std::function<void(::grpc::Status)>) override;
      void TestIamPermissions(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest* request, ::google::iam::v1::TestIamPermissionsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datapolicies::v1::DataPolicy>* AsyncCreateDataPolicyRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::CreateDataPolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datapolicies::v1::DataPolicy>* PrepareAsyncCreateDataPolicyRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::CreateDataPolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datapolicies::v1::DataPolicy>* AsyncUpdateDataPolicyRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::UpdateDataPolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datapolicies::v1::DataPolicy>* PrepareAsyncUpdateDataPolicyRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::UpdateDataPolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datapolicies::v1::DataPolicy>* AsyncRenameDataPolicyRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::RenameDataPolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datapolicies::v1::DataPolicy>* PrepareAsyncRenameDataPolicyRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::RenameDataPolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteDataPolicyRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::DeleteDataPolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncDeleteDataPolicyRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::DeleteDataPolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datapolicies::v1::DataPolicy>* AsyncGetDataPolicyRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::GetDataPolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datapolicies::v1::DataPolicy>* PrepareAsyncGetDataPolicyRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::GetDataPolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datapolicies::v1::ListDataPoliciesResponse>* AsyncListDataPoliciesRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::ListDataPoliciesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::datapolicies::v1::ListDataPoliciesResponse>* PrepareAsyncListDataPoliciesRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::datapolicies::v1::ListDataPoliciesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>* AsyncGetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>* PrepareAsyncGetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>* AsyncSetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>* PrepareAsyncSetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::v1::TestIamPermissionsResponse>* AsyncTestIamPermissionsRaw(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::v1::TestIamPermissionsResponse>* PrepareAsyncTestIamPermissionsRaw(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateDataPolicy_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateDataPolicy_;
    const ::grpc::internal::RpcMethod rpcmethod_RenameDataPolicy_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteDataPolicy_;
    const ::grpc::internal::RpcMethod rpcmethod_GetDataPolicy_;
    const ::grpc::internal::RpcMethod rpcmethod_ListDataPolicies_;
    const ::grpc::internal::RpcMethod rpcmethod_GetIamPolicy_;
    const ::grpc::internal::RpcMethod rpcmethod_SetIamPolicy_;
    const ::grpc::internal::RpcMethod rpcmethod_TestIamPermissions_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Creates a new data policy under a project with the given `dataPolicyId`
    // (used as the display name), policy tag, and data policy type.
    virtual ::grpc::Status CreateDataPolicy(::grpc::ServerContext* context, const ::google::cloud::bigquery::datapolicies::v1::CreateDataPolicyRequest* request, ::google::cloud::bigquery::datapolicies::v1::DataPolicy* response);
    // Updates the metadata for an existing data policy. The target data policy
    // can be specified by the resource name.
    virtual ::grpc::Status UpdateDataPolicy(::grpc::ServerContext* context, const ::google::cloud::bigquery::datapolicies::v1::UpdateDataPolicyRequest* request, ::google::cloud::bigquery::datapolicies::v1::DataPolicy* response);
    // Renames the id (display name) of the specified data policy.
    virtual ::grpc::Status RenameDataPolicy(::grpc::ServerContext* context, const ::google::cloud::bigquery::datapolicies::v1::RenameDataPolicyRequest* request, ::google::cloud::bigquery::datapolicies::v1::DataPolicy* response);
    // Deletes the data policy specified by its resource name.
    virtual ::grpc::Status DeleteDataPolicy(::grpc::ServerContext* context, const ::google::cloud::bigquery::datapolicies::v1::DeleteDataPolicyRequest* request, ::google::protobuf::Empty* response);
    // Gets the data policy specified by its resource name.
    virtual ::grpc::Status GetDataPolicy(::grpc::ServerContext* context, const ::google::cloud::bigquery::datapolicies::v1::GetDataPolicyRequest* request, ::google::cloud::bigquery::datapolicies::v1::DataPolicy* response);
    // List all of the data policies in the specified parent project.
    virtual ::grpc::Status ListDataPolicies(::grpc::ServerContext* context, const ::google::cloud::bigquery::datapolicies::v1::ListDataPoliciesRequest* request, ::google::cloud::bigquery::datapolicies::v1::ListDataPoliciesResponse* response);
    // Gets the IAM policy for the specified data policy.
    virtual ::grpc::Status GetIamPolicy(::grpc::ServerContext* context, const ::google::iam::v1::GetIamPolicyRequest* request, ::google::iam::v1::Policy* response);
    // Sets the IAM policy for the specified data policy.
    virtual ::grpc::Status SetIamPolicy(::grpc::ServerContext* context, const ::google::iam::v1::SetIamPolicyRequest* request, ::google::iam::v1::Policy* response);
    // Returns the caller's permission on the specified data policy resource.
    virtual ::grpc::Status TestIamPermissions(::grpc::ServerContext* context, const ::google::iam::v1::TestIamPermissionsRequest* request, ::google::iam::v1::TestIamPermissionsResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateDataPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateDataPolicy() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateDataPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDataPolicy(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datapolicies::v1::CreateDataPolicyRequest* /*request*/, ::google::cloud::bigquery::datapolicies::v1::DataPolicy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateDataPolicy(::grpc::ServerContext* context, ::google::cloud::bigquery::datapolicies::v1::CreateDataPolicyRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::bigquery::datapolicies::v1::DataPolicy>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateDataPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateDataPolicy() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_UpdateDataPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateDataPolicy(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datapolicies::v1::UpdateDataPolicyRequest* /*request*/, ::google::cloud::bigquery::datapolicies::v1::DataPolicy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateDataPolicy(::grpc::ServerContext* context, ::google::cloud::bigquery::datapolicies::v1::UpdateDataPolicyRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::bigquery::datapolicies::v1::DataPolicy>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RenameDataPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RenameDataPolicy() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_RenameDataPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RenameDataPolicy(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datapolicies::v1::RenameDataPolicyRequest* /*request*/, ::google::cloud::bigquery::datapolicies::v1::DataPolicy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRenameDataPolicy(::grpc::ServerContext* context, ::google::cloud::bigquery::datapolicies::v1::RenameDataPolicyRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::bigquery::datapolicies::v1::DataPolicy>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteDataPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteDataPolicy() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_DeleteDataPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDataPolicy(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datapolicies::v1::DeleteDataPolicyRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteDataPolicy(::grpc::ServerContext* context, ::google::cloud::bigquery::datapolicies::v1::DeleteDataPolicyRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDataPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetDataPolicy() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetDataPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDataPolicy(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datapolicies::v1::GetDataPolicyRequest* /*request*/, ::google::cloud::bigquery::datapolicies::v1::DataPolicy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDataPolicy(::grpc::ServerContext* context, ::google::cloud::bigquery::datapolicies::v1::GetDataPolicyRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::bigquery::datapolicies::v1::DataPolicy>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListDataPolicies : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListDataPolicies() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_ListDataPolicies() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDataPolicies(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datapolicies::v1::ListDataPoliciesRequest* /*request*/, ::google::cloud::bigquery::datapolicies::v1::ListDataPoliciesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListDataPolicies(::grpc::ServerContext* context, ::google::cloud::bigquery::datapolicies::v1::ListDataPoliciesRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::bigquery::datapolicies::v1::ListDataPoliciesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetIamPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetIamPolicy() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_GetIamPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIamPolicy(::grpc::ServerContext* /*context*/, const ::google::iam::v1::GetIamPolicyRequest* /*request*/, ::google::iam::v1::Policy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetIamPolicy(::grpc::ServerContext* context, ::google::iam::v1::GetIamPolicyRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::iam::v1::Policy>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetIamPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetIamPolicy() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_SetIamPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetIamPolicy(::grpc::ServerContext* /*context*/, const ::google::iam::v1::SetIamPolicyRequest* /*request*/, ::google::iam::v1::Policy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetIamPolicy(::grpc::ServerContext* context, ::google::iam::v1::SetIamPolicyRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::iam::v1::Policy>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TestIamPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TestIamPermissions() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_TestIamPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestIamPermissions(::grpc::ServerContext* /*context*/, const ::google::iam::v1::TestIamPermissionsRequest* /*request*/, ::google::iam::v1::TestIamPermissionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTestIamPermissions(::grpc::ServerContext* context, ::google::iam::v1::TestIamPermissionsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::iam::v1::TestIamPermissionsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateDataPolicy<WithAsyncMethod_UpdateDataPolicy<WithAsyncMethod_RenameDataPolicy<WithAsyncMethod_DeleteDataPolicy<WithAsyncMethod_GetDataPolicy<WithAsyncMethod_ListDataPolicies<WithAsyncMethod_GetIamPolicy<WithAsyncMethod_SetIamPolicy<WithAsyncMethod_TestIamPermissions<Service > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_CreateDataPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateDataPolicy() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::google::cloud::bigquery::datapolicies::v1::CreateDataPolicyRequest, ::google::cloud::bigquery::datapolicies::v1::DataPolicy>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::cloud::bigquery::datapolicies::v1::CreateDataPolicyRequest* request, ::google::cloud::bigquery::datapolicies::v1::DataPolicy* response) { return this->CreateDataPolicy(context, request, response); }));}
    void SetMessageAllocatorFor_CreateDataPolicy(
        ::grpc::MessageAllocator< ::google::cloud::bigquery::datapolicies::v1::CreateDataPolicyRequest, ::google::cloud::bigquery::datapolicies::v1::DataPolicy>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::cloud::bigquery::datapolicies::v1::CreateDataPolicyRequest, ::google::cloud::bigquery::datapolicies::v1::DataPolicy>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateDataPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDataPolicy(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datapolicies::v1::CreateDataPolicyRequest* /*request*/, ::google::cloud::bigquery::datapolicies::v1::DataPolicy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateDataPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::google::cloud::bigquery::datapolicies::v1::CreateDataPolicyRequest* /*request*/, ::google::cloud::bigquery::datapolicies::v1::DataPolicy* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateDataPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateDataPolicy() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::google::cloud::bigquery::datapolicies::v1::UpdateDataPolicyRequest, ::google::cloud::bigquery::datapolicies::v1::DataPolicy>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::cloud::bigquery::datapolicies::v1::UpdateDataPolicyRequest* request, ::google::cloud::bigquery::datapolicies::v1::DataPolicy* response) { return this->UpdateDataPolicy(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateDataPolicy(
        ::grpc::MessageAllocator< ::google::cloud::bigquery::datapolicies::v1::UpdateDataPolicyRequest, ::google::cloud::bigquery::datapolicies::v1::DataPolicy>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::cloud::bigquery::datapolicies::v1::UpdateDataPolicyRequest, ::google::cloud::bigquery::datapolicies::v1::DataPolicy>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateDataPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateDataPolicy(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datapolicies::v1::UpdateDataPolicyRequest* /*request*/, ::google::cloud::bigquery::datapolicies::v1::DataPolicy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateDataPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::google::cloud::bigquery::datapolicies::v1::UpdateDataPolicyRequest* /*request*/, ::google::cloud::bigquery::datapolicies::v1::DataPolicy* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RenameDataPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RenameDataPolicy() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::google::cloud::bigquery::datapolicies::v1::RenameDataPolicyRequest, ::google::cloud::bigquery::datapolicies::v1::DataPolicy>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::cloud::bigquery::datapolicies::v1::RenameDataPolicyRequest* request, ::google::cloud::bigquery::datapolicies::v1::DataPolicy* response) { return this->RenameDataPolicy(context, request, response); }));}
    void SetMessageAllocatorFor_RenameDataPolicy(
        ::grpc::MessageAllocator< ::google::cloud::bigquery::datapolicies::v1::RenameDataPolicyRequest, ::google::cloud::bigquery::datapolicies::v1::DataPolicy>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::cloud::bigquery::datapolicies::v1::RenameDataPolicyRequest, ::google::cloud::bigquery::datapolicies::v1::DataPolicy>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RenameDataPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RenameDataPolicy(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datapolicies::v1::RenameDataPolicyRequest* /*request*/, ::google::cloud::bigquery::datapolicies::v1::DataPolicy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RenameDataPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::google::cloud::bigquery::datapolicies::v1::RenameDataPolicyRequest* /*request*/, ::google::cloud::bigquery::datapolicies::v1::DataPolicy* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteDataPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteDataPolicy() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::google::cloud::bigquery::datapolicies::v1::DeleteDataPolicyRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::cloud::bigquery::datapolicies::v1::DeleteDataPolicyRequest* request, ::google::protobuf::Empty* response) { return this->DeleteDataPolicy(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteDataPolicy(
        ::grpc::MessageAllocator< ::google::cloud::bigquery::datapolicies::v1::DeleteDataPolicyRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::cloud::bigquery::datapolicies::v1::DeleteDataPolicyRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteDataPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDataPolicy(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datapolicies::v1::DeleteDataPolicyRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteDataPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::google::cloud::bigquery::datapolicies::v1::DeleteDataPolicyRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetDataPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetDataPolicy() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::google::cloud::bigquery::datapolicies::v1::GetDataPolicyRequest, ::google::cloud::bigquery::datapolicies::v1::DataPolicy>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::cloud::bigquery::datapolicies::v1::GetDataPolicyRequest* request, ::google::cloud::bigquery::datapolicies::v1::DataPolicy* response) { return this->GetDataPolicy(context, request, response); }));}
    void SetMessageAllocatorFor_GetDataPolicy(
        ::grpc::MessageAllocator< ::google::cloud::bigquery::datapolicies::v1::GetDataPolicyRequest, ::google::cloud::bigquery::datapolicies::v1::DataPolicy>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::cloud::bigquery::datapolicies::v1::GetDataPolicyRequest, ::google::cloud::bigquery::datapolicies::v1::DataPolicy>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetDataPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDataPolicy(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datapolicies::v1::GetDataPolicyRequest* /*request*/, ::google::cloud::bigquery::datapolicies::v1::DataPolicy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDataPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::google::cloud::bigquery::datapolicies::v1::GetDataPolicyRequest* /*request*/, ::google::cloud::bigquery::datapolicies::v1::DataPolicy* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListDataPolicies : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListDataPolicies() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::google::cloud::bigquery::datapolicies::v1::ListDataPoliciesRequest, ::google::cloud::bigquery::datapolicies::v1::ListDataPoliciesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::cloud::bigquery::datapolicies::v1::ListDataPoliciesRequest* request, ::google::cloud::bigquery::datapolicies::v1::ListDataPoliciesResponse* response) { return this->ListDataPolicies(context, request, response); }));}
    void SetMessageAllocatorFor_ListDataPolicies(
        ::grpc::MessageAllocator< ::google::cloud::bigquery::datapolicies::v1::ListDataPoliciesRequest, ::google::cloud::bigquery::datapolicies::v1::ListDataPoliciesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::cloud::bigquery::datapolicies::v1::ListDataPoliciesRequest, ::google::cloud::bigquery::datapolicies::v1::ListDataPoliciesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListDataPolicies() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDataPolicies(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datapolicies::v1::ListDataPoliciesRequest* /*request*/, ::google::cloud::bigquery::datapolicies::v1::ListDataPoliciesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListDataPolicies(
      ::grpc::CallbackServerContext* /*context*/, const ::google::cloud::bigquery::datapolicies::v1::ListDataPoliciesRequest* /*request*/, ::google::cloud::bigquery::datapolicies::v1::ListDataPoliciesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetIamPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetIamPolicy() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::google::iam::v1::GetIamPolicyRequest, ::google::iam::v1::Policy>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::iam::v1::GetIamPolicyRequest* request, ::google::iam::v1::Policy* response) { return this->GetIamPolicy(context, request, response); }));}
    void SetMessageAllocatorFor_GetIamPolicy(
        ::grpc::MessageAllocator< ::google::iam::v1::GetIamPolicyRequest, ::google::iam::v1::Policy>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::iam::v1::GetIamPolicyRequest, ::google::iam::v1::Policy>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetIamPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIamPolicy(::grpc::ServerContext* /*context*/, const ::google::iam::v1::GetIamPolicyRequest* /*request*/, ::google::iam::v1::Policy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetIamPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::google::iam::v1::GetIamPolicyRequest* /*request*/, ::google::iam::v1::Policy* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetIamPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetIamPolicy() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::google::iam::v1::SetIamPolicyRequest, ::google::iam::v1::Policy>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::iam::v1::SetIamPolicyRequest* request, ::google::iam::v1::Policy* response) { return this->SetIamPolicy(context, request, response); }));}
    void SetMessageAllocatorFor_SetIamPolicy(
        ::grpc::MessageAllocator< ::google::iam::v1::SetIamPolicyRequest, ::google::iam::v1::Policy>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::iam::v1::SetIamPolicyRequest, ::google::iam::v1::Policy>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetIamPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetIamPolicy(::grpc::ServerContext* /*context*/, const ::google::iam::v1::SetIamPolicyRequest* /*request*/, ::google::iam::v1::Policy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetIamPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::google::iam::v1::SetIamPolicyRequest* /*request*/, ::google::iam::v1::Policy* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_TestIamPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_TestIamPermissions() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::google::iam::v1::TestIamPermissionsRequest, ::google::iam::v1::TestIamPermissionsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::iam::v1::TestIamPermissionsRequest* request, ::google::iam::v1::TestIamPermissionsResponse* response) { return this->TestIamPermissions(context, request, response); }));}
    void SetMessageAllocatorFor_TestIamPermissions(
        ::grpc::MessageAllocator< ::google::iam::v1::TestIamPermissionsRequest, ::google::iam::v1::TestIamPermissionsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::iam::v1::TestIamPermissionsRequest, ::google::iam::v1::TestIamPermissionsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_TestIamPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestIamPermissions(::grpc::ServerContext* /*context*/, const ::google::iam::v1::TestIamPermissionsRequest* /*request*/, ::google::iam::v1::TestIamPermissionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TestIamPermissions(
      ::grpc::CallbackServerContext* /*context*/, const ::google::iam::v1::TestIamPermissionsRequest* /*request*/, ::google::iam::v1::TestIamPermissionsResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_CreateDataPolicy<WithCallbackMethod_UpdateDataPolicy<WithCallbackMethod_RenameDataPolicy<WithCallbackMethod_DeleteDataPolicy<WithCallbackMethod_GetDataPolicy<WithCallbackMethod_ListDataPolicies<WithCallbackMethod_GetIamPolicy<WithCallbackMethod_SetIamPolicy<WithCallbackMethod_TestIamPermissions<Service > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateDataPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateDataPolicy() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateDataPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDataPolicy(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datapolicies::v1::CreateDataPolicyRequest* /*request*/, ::google::cloud::bigquery::datapolicies::v1::DataPolicy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateDataPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateDataPolicy() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_UpdateDataPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateDataPolicy(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datapolicies::v1::UpdateDataPolicyRequest* /*request*/, ::google::cloud::bigquery::datapolicies::v1::DataPolicy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RenameDataPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RenameDataPolicy() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_RenameDataPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RenameDataPolicy(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datapolicies::v1::RenameDataPolicyRequest* /*request*/, ::google::cloud::bigquery::datapolicies::v1::DataPolicy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteDataPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteDataPolicy() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_DeleteDataPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDataPolicy(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datapolicies::v1::DeleteDataPolicyRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetDataPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetDataPolicy() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetDataPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDataPolicy(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datapolicies::v1::GetDataPolicyRequest* /*request*/, ::google::cloud::bigquery::datapolicies::v1::DataPolicy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListDataPolicies : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListDataPolicies() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_ListDataPolicies() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDataPolicies(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datapolicies::v1::ListDataPoliciesRequest* /*request*/, ::google::cloud::bigquery::datapolicies::v1::ListDataPoliciesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetIamPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetIamPolicy() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_GetIamPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIamPolicy(::grpc::ServerContext* /*context*/, const ::google::iam::v1::GetIamPolicyRequest* /*request*/, ::google::iam::v1::Policy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetIamPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetIamPolicy() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_SetIamPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetIamPolicy(::grpc::ServerContext* /*context*/, const ::google::iam::v1::SetIamPolicyRequest* /*request*/, ::google::iam::v1::Policy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TestIamPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TestIamPermissions() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_TestIamPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestIamPermissions(::grpc::ServerContext* /*context*/, const ::google::iam::v1::TestIamPermissionsRequest* /*request*/, ::google::iam::v1::TestIamPermissionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateDataPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateDataPolicy() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateDataPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDataPolicy(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datapolicies::v1::CreateDataPolicyRequest* /*request*/, ::google::cloud::bigquery::datapolicies::v1::DataPolicy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateDataPolicy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateDataPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateDataPolicy() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_UpdateDataPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateDataPolicy(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datapolicies::v1::UpdateDataPolicyRequest* /*request*/, ::google::cloud::bigquery::datapolicies::v1::DataPolicy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateDataPolicy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RenameDataPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RenameDataPolicy() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_RenameDataPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RenameDataPolicy(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datapolicies::v1::RenameDataPolicyRequest* /*request*/, ::google::cloud::bigquery::datapolicies::v1::DataPolicy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRenameDataPolicy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteDataPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteDataPolicy() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_DeleteDataPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDataPolicy(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datapolicies::v1::DeleteDataPolicyRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteDataPolicy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetDataPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetDataPolicy() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetDataPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDataPolicy(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datapolicies::v1::GetDataPolicyRequest* /*request*/, ::google::cloud::bigquery::datapolicies::v1::DataPolicy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDataPolicy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListDataPolicies : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListDataPolicies() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_ListDataPolicies() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDataPolicies(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datapolicies::v1::ListDataPoliciesRequest* /*request*/, ::google::cloud::bigquery::datapolicies::v1::ListDataPoliciesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListDataPolicies(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetIamPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetIamPolicy() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_GetIamPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIamPolicy(::grpc::ServerContext* /*context*/, const ::google::iam::v1::GetIamPolicyRequest* /*request*/, ::google::iam::v1::Policy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetIamPolicy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetIamPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetIamPolicy() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_SetIamPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetIamPolicy(::grpc::ServerContext* /*context*/, const ::google::iam::v1::SetIamPolicyRequest* /*request*/, ::google::iam::v1::Policy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetIamPolicy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TestIamPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TestIamPermissions() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_TestIamPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestIamPermissions(::grpc::ServerContext* /*context*/, const ::google::iam::v1::TestIamPermissionsRequest* /*request*/, ::google::iam::v1::TestIamPermissionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTestIamPermissions(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateDataPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateDataPolicy() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateDataPolicy(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateDataPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDataPolicy(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datapolicies::v1::CreateDataPolicyRequest* /*request*/, ::google::cloud::bigquery::datapolicies::v1::DataPolicy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateDataPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateDataPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateDataPolicy() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateDataPolicy(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateDataPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateDataPolicy(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datapolicies::v1::UpdateDataPolicyRequest* /*request*/, ::google::cloud::bigquery::datapolicies::v1::DataPolicy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateDataPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RenameDataPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RenameDataPolicy() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RenameDataPolicy(context, request, response); }));
    }
    ~WithRawCallbackMethod_RenameDataPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RenameDataPolicy(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datapolicies::v1::RenameDataPolicyRequest* /*request*/, ::google::cloud::bigquery::datapolicies::v1::DataPolicy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RenameDataPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteDataPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteDataPolicy() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteDataPolicy(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteDataPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDataPolicy(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datapolicies::v1::DeleteDataPolicyRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteDataPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetDataPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetDataPolicy() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetDataPolicy(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetDataPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDataPolicy(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datapolicies::v1::GetDataPolicyRequest* /*request*/, ::google::cloud::bigquery::datapolicies::v1::DataPolicy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDataPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListDataPolicies : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListDataPolicies() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListDataPolicies(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListDataPolicies() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDataPolicies(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datapolicies::v1::ListDataPoliciesRequest* /*request*/, ::google::cloud::bigquery::datapolicies::v1::ListDataPoliciesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListDataPolicies(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetIamPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetIamPolicy() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetIamPolicy(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetIamPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIamPolicy(::grpc::ServerContext* /*context*/, const ::google::iam::v1::GetIamPolicyRequest* /*request*/, ::google::iam::v1::Policy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetIamPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetIamPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetIamPolicy() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetIamPolicy(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetIamPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetIamPolicy(::grpc::ServerContext* /*context*/, const ::google::iam::v1::SetIamPolicyRequest* /*request*/, ::google::iam::v1::Policy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetIamPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_TestIamPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_TestIamPermissions() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TestIamPermissions(context, request, response); }));
    }
    ~WithRawCallbackMethod_TestIamPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestIamPermissions(::grpc::ServerContext* /*context*/, const ::google::iam::v1::TestIamPermissionsRequest* /*request*/, ::google::iam::v1::TestIamPermissionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TestIamPermissions(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateDataPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateDataPolicy() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::cloud::bigquery::datapolicies::v1::CreateDataPolicyRequest, ::google::cloud::bigquery::datapolicies::v1::DataPolicy>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::cloud::bigquery::datapolicies::v1::CreateDataPolicyRequest, ::google::cloud::bigquery::datapolicies::v1::DataPolicy>* streamer) {
                       return this->StreamedCreateDataPolicy(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateDataPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateDataPolicy(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datapolicies::v1::CreateDataPolicyRequest* /*request*/, ::google::cloud::bigquery::datapolicies::v1::DataPolicy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateDataPolicy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::bigquery::datapolicies::v1::CreateDataPolicyRequest,::google::cloud::bigquery::datapolicies::v1::DataPolicy>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateDataPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateDataPolicy() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::cloud::bigquery::datapolicies::v1::UpdateDataPolicyRequest, ::google::cloud::bigquery::datapolicies::v1::DataPolicy>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::cloud::bigquery::datapolicies::v1::UpdateDataPolicyRequest, ::google::cloud::bigquery::datapolicies::v1::DataPolicy>* streamer) {
                       return this->StreamedUpdateDataPolicy(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateDataPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateDataPolicy(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datapolicies::v1::UpdateDataPolicyRequest* /*request*/, ::google::cloud::bigquery::datapolicies::v1::DataPolicy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateDataPolicy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::bigquery::datapolicies::v1::UpdateDataPolicyRequest,::google::cloud::bigquery::datapolicies::v1::DataPolicy>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RenameDataPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RenameDataPolicy() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::cloud::bigquery::datapolicies::v1::RenameDataPolicyRequest, ::google::cloud::bigquery::datapolicies::v1::DataPolicy>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::cloud::bigquery::datapolicies::v1::RenameDataPolicyRequest, ::google::cloud::bigquery::datapolicies::v1::DataPolicy>* streamer) {
                       return this->StreamedRenameDataPolicy(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RenameDataPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RenameDataPolicy(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datapolicies::v1::RenameDataPolicyRequest* /*request*/, ::google::cloud::bigquery::datapolicies::v1::DataPolicy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRenameDataPolicy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::bigquery::datapolicies::v1::RenameDataPolicyRequest,::google::cloud::bigquery::datapolicies::v1::DataPolicy>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteDataPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteDataPolicy() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::cloud::bigquery::datapolicies::v1::DeleteDataPolicyRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::cloud::bigquery::datapolicies::v1::DeleteDataPolicyRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedDeleteDataPolicy(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteDataPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteDataPolicy(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datapolicies::v1::DeleteDataPolicyRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteDataPolicy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::bigquery::datapolicies::v1::DeleteDataPolicyRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetDataPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetDataPolicy() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::cloud::bigquery::datapolicies::v1::GetDataPolicyRequest, ::google::cloud::bigquery::datapolicies::v1::DataPolicy>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::cloud::bigquery::datapolicies::v1::GetDataPolicyRequest, ::google::cloud::bigquery::datapolicies::v1::DataPolicy>* streamer) {
                       return this->StreamedGetDataPolicy(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetDataPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDataPolicy(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datapolicies::v1::GetDataPolicyRequest* /*request*/, ::google::cloud::bigquery::datapolicies::v1::DataPolicy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetDataPolicy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::bigquery::datapolicies::v1::GetDataPolicyRequest,::google::cloud::bigquery::datapolicies::v1::DataPolicy>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListDataPolicies : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListDataPolicies() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::cloud::bigquery::datapolicies::v1::ListDataPoliciesRequest, ::google::cloud::bigquery::datapolicies::v1::ListDataPoliciesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::cloud::bigquery::datapolicies::v1::ListDataPoliciesRequest, ::google::cloud::bigquery::datapolicies::v1::ListDataPoliciesResponse>* streamer) {
                       return this->StreamedListDataPolicies(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListDataPolicies() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListDataPolicies(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::datapolicies::v1::ListDataPoliciesRequest* /*request*/, ::google::cloud::bigquery::datapolicies::v1::ListDataPoliciesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListDataPolicies(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::bigquery::datapolicies::v1::ListDataPoliciesRequest,::google::cloud::bigquery::datapolicies::v1::ListDataPoliciesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetIamPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetIamPolicy() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::iam::v1::GetIamPolicyRequest, ::google::iam::v1::Policy>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::iam::v1::GetIamPolicyRequest, ::google::iam::v1::Policy>* streamer) {
                       return this->StreamedGetIamPolicy(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetIamPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetIamPolicy(::grpc::ServerContext* /*context*/, const ::google::iam::v1::GetIamPolicyRequest* /*request*/, ::google::iam::v1::Policy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetIamPolicy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::iam::v1::GetIamPolicyRequest,::google::iam::v1::Policy>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetIamPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetIamPolicy() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::iam::v1::SetIamPolicyRequest, ::google::iam::v1::Policy>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::iam::v1::SetIamPolicyRequest, ::google::iam::v1::Policy>* streamer) {
                       return this->StreamedSetIamPolicy(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetIamPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetIamPolicy(::grpc::ServerContext* /*context*/, const ::google::iam::v1::SetIamPolicyRequest* /*request*/, ::google::iam::v1::Policy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetIamPolicy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::iam::v1::SetIamPolicyRequest,::google::iam::v1::Policy>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TestIamPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TestIamPermissions() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::iam::v1::TestIamPermissionsRequest, ::google::iam::v1::TestIamPermissionsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::iam::v1::TestIamPermissionsRequest, ::google::iam::v1::TestIamPermissionsResponse>* streamer) {
                       return this->StreamedTestIamPermissions(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TestIamPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TestIamPermissions(::grpc::ServerContext* /*context*/, const ::google::iam::v1::TestIamPermissionsRequest* /*request*/, ::google::iam::v1::TestIamPermissionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTestIamPermissions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::iam::v1::TestIamPermissionsRequest,::google::iam::v1::TestIamPermissionsResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateDataPolicy<WithStreamedUnaryMethod_UpdateDataPolicy<WithStreamedUnaryMethod_RenameDataPolicy<WithStreamedUnaryMethod_DeleteDataPolicy<WithStreamedUnaryMethod_GetDataPolicy<WithStreamedUnaryMethod_ListDataPolicies<WithStreamedUnaryMethod_GetIamPolicy<WithStreamedUnaryMethod_SetIamPolicy<WithStreamedUnaryMethod_TestIamPermissions<Service > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateDataPolicy<WithStreamedUnaryMethod_UpdateDataPolicy<WithStreamedUnaryMethod_RenameDataPolicy<WithStreamedUnaryMethod_DeleteDataPolicy<WithStreamedUnaryMethod_GetDataPolicy<WithStreamedUnaryMethod_ListDataPolicies<WithStreamedUnaryMethod_GetIamPolicy<WithStreamedUnaryMethod_SetIamPolicy<WithStreamedUnaryMethod_TestIamPermissions<Service > > > > > > > > > StreamedService;
};

}  // namespace v1
}  // namespace datapolicies
}  // namespace bigquery
}  // namespace cloud
}  // namespace google


#endif  // GRPC_google_2fcloud_2fbigquery_2fdatapolicies_2fv1_2fdatapolicy_2eproto__INCLUDED
