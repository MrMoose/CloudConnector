// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/bigquery/datapolicies/v1/datapolicy.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fbigquery_2fdatapolicies_2fv1_2fdatapolicy_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fbigquery_2fdatapolicies_2fv1_2fdatapolicy_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include "google/api/field_behavior.pb.h"
#include "google/api/resource.pb.h"
#include "google/iam/v1/iam_policy.pb.h"
#include "google/iam/v1/policy.pb.h"
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/field_mask.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fcloud_2fbigquery_2fdatapolicies_2fv1_2fdatapolicy_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fcloud_2fbigquery_2fdatapolicies_2fv1_2fdatapolicy_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fcloud_2fbigquery_2fdatapolicies_2fv1_2fdatapolicy_2eproto;
namespace google {
namespace cloud {
namespace bigquery {
namespace datapolicies {
namespace v1 {
class CreateDataPolicyRequest;
struct CreateDataPolicyRequestDefaultTypeInternal;
extern CreateDataPolicyRequestDefaultTypeInternal _CreateDataPolicyRequest_default_instance_;
class DataMaskingPolicy;
struct DataMaskingPolicyDefaultTypeInternal;
extern DataMaskingPolicyDefaultTypeInternal _DataMaskingPolicy_default_instance_;
class DataPolicy;
struct DataPolicyDefaultTypeInternal;
extern DataPolicyDefaultTypeInternal _DataPolicy_default_instance_;
class DeleteDataPolicyRequest;
struct DeleteDataPolicyRequestDefaultTypeInternal;
extern DeleteDataPolicyRequestDefaultTypeInternal _DeleteDataPolicyRequest_default_instance_;
class GetDataPolicyRequest;
struct GetDataPolicyRequestDefaultTypeInternal;
extern GetDataPolicyRequestDefaultTypeInternal _GetDataPolicyRequest_default_instance_;
class ListDataPoliciesRequest;
struct ListDataPoliciesRequestDefaultTypeInternal;
extern ListDataPoliciesRequestDefaultTypeInternal _ListDataPoliciesRequest_default_instance_;
class ListDataPoliciesResponse;
struct ListDataPoliciesResponseDefaultTypeInternal;
extern ListDataPoliciesResponseDefaultTypeInternal _ListDataPoliciesResponse_default_instance_;
class RenameDataPolicyRequest;
struct RenameDataPolicyRequestDefaultTypeInternal;
extern RenameDataPolicyRequestDefaultTypeInternal _RenameDataPolicyRequest_default_instance_;
class UpdateDataPolicyRequest;
struct UpdateDataPolicyRequestDefaultTypeInternal;
extern UpdateDataPolicyRequestDefaultTypeInternal _UpdateDataPolicyRequest_default_instance_;
}  // namespace v1
}  // namespace datapolicies
}  // namespace bigquery
}  // namespace cloud
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::cloud::bigquery::datapolicies::v1::CreateDataPolicyRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::datapolicies::v1::CreateDataPolicyRequest>(Arena*);
template<> ::google::cloud::bigquery::datapolicies::v1::DataMaskingPolicy* Arena::CreateMaybeMessage<::google::cloud::bigquery::datapolicies::v1::DataMaskingPolicy>(Arena*);
template<> ::google::cloud::bigquery::datapolicies::v1::DataPolicy* Arena::CreateMaybeMessage<::google::cloud::bigquery::datapolicies::v1::DataPolicy>(Arena*);
template<> ::google::cloud::bigquery::datapolicies::v1::DeleteDataPolicyRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::datapolicies::v1::DeleteDataPolicyRequest>(Arena*);
template<> ::google::cloud::bigquery::datapolicies::v1::GetDataPolicyRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::datapolicies::v1::GetDataPolicyRequest>(Arena*);
template<> ::google::cloud::bigquery::datapolicies::v1::ListDataPoliciesRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::datapolicies::v1::ListDataPoliciesRequest>(Arena*);
template<> ::google::cloud::bigquery::datapolicies::v1::ListDataPoliciesResponse* Arena::CreateMaybeMessage<::google::cloud::bigquery::datapolicies::v1::ListDataPoliciesResponse>(Arena*);
template<> ::google::cloud::bigquery::datapolicies::v1::RenameDataPolicyRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::datapolicies::v1::RenameDataPolicyRequest>(Arena*);
template<> ::google::cloud::bigquery::datapolicies::v1::UpdateDataPolicyRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::datapolicies::v1::UpdateDataPolicyRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace cloud {
namespace bigquery {
namespace datapolicies {
namespace v1 {

enum DataPolicy_DataPolicyType : int {
  DataPolicy_DataPolicyType_DATA_POLICY_TYPE_UNSPECIFIED = 0,
  DataPolicy_DataPolicyType_COLUMN_LEVEL_SECURITY_POLICY = 3,
  DataPolicy_DataPolicyType_DATA_MASKING_POLICY = 2,
  DataPolicy_DataPolicyType_DataPolicy_DataPolicyType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  DataPolicy_DataPolicyType_DataPolicy_DataPolicyType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool DataPolicy_DataPolicyType_IsValid(int value);
constexpr DataPolicy_DataPolicyType DataPolicy_DataPolicyType_DataPolicyType_MIN = DataPolicy_DataPolicyType_DATA_POLICY_TYPE_UNSPECIFIED;
constexpr DataPolicy_DataPolicyType DataPolicy_DataPolicyType_DataPolicyType_MAX = DataPolicy_DataPolicyType_COLUMN_LEVEL_SECURITY_POLICY;
constexpr int DataPolicy_DataPolicyType_DataPolicyType_ARRAYSIZE = DataPolicy_DataPolicyType_DataPolicyType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataPolicy_DataPolicyType_descriptor();
template<typename T>
inline const std::string& DataPolicy_DataPolicyType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DataPolicy_DataPolicyType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DataPolicy_DataPolicyType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DataPolicy_DataPolicyType_descriptor(), enum_t_value);
}
inline bool DataPolicy_DataPolicyType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DataPolicy_DataPolicyType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DataPolicy_DataPolicyType>(
    DataPolicy_DataPolicyType_descriptor(), name, value);
}
enum DataMaskingPolicy_PredefinedExpression : int {
  DataMaskingPolicy_PredefinedExpression_PREDEFINED_EXPRESSION_UNSPECIFIED = 0,
  DataMaskingPolicy_PredefinedExpression_SHA256 = 3,
  DataMaskingPolicy_PredefinedExpression_ALWAYS_NULL = 5,
  DataMaskingPolicy_PredefinedExpression_DEFAULT_MASKING_VALUE = 7,
  DataMaskingPolicy_PredefinedExpression_DataMaskingPolicy_PredefinedExpression_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  DataMaskingPolicy_PredefinedExpression_DataMaskingPolicy_PredefinedExpression_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool DataMaskingPolicy_PredefinedExpression_IsValid(int value);
constexpr DataMaskingPolicy_PredefinedExpression DataMaskingPolicy_PredefinedExpression_PredefinedExpression_MIN = DataMaskingPolicy_PredefinedExpression_PREDEFINED_EXPRESSION_UNSPECIFIED;
constexpr DataMaskingPolicy_PredefinedExpression DataMaskingPolicy_PredefinedExpression_PredefinedExpression_MAX = DataMaskingPolicy_PredefinedExpression_DEFAULT_MASKING_VALUE;
constexpr int DataMaskingPolicy_PredefinedExpression_PredefinedExpression_ARRAYSIZE = DataMaskingPolicy_PredefinedExpression_PredefinedExpression_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataMaskingPolicy_PredefinedExpression_descriptor();
template<typename T>
inline const std::string& DataMaskingPolicy_PredefinedExpression_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DataMaskingPolicy_PredefinedExpression>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DataMaskingPolicy_PredefinedExpression_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DataMaskingPolicy_PredefinedExpression_descriptor(), enum_t_value);
}
inline bool DataMaskingPolicy_PredefinedExpression_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DataMaskingPolicy_PredefinedExpression* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DataMaskingPolicy_PredefinedExpression>(
    DataMaskingPolicy_PredefinedExpression_descriptor(), name, value);
}
// ===================================================================

class CreateDataPolicyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.datapolicies.v1.CreateDataPolicyRequest) */ {
 public:
  inline CreateDataPolicyRequest() : CreateDataPolicyRequest(nullptr) {}
  ~CreateDataPolicyRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateDataPolicyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateDataPolicyRequest(const CreateDataPolicyRequest& from);
  CreateDataPolicyRequest(CreateDataPolicyRequest&& from) noexcept
    : CreateDataPolicyRequest() {
    *this = ::std::move(from);
  }

  inline CreateDataPolicyRequest& operator=(const CreateDataPolicyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateDataPolicyRequest& operator=(CreateDataPolicyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateDataPolicyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateDataPolicyRequest* internal_default_instance() {
    return reinterpret_cast<const CreateDataPolicyRequest*>(
               &_CreateDataPolicyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CreateDataPolicyRequest& a, CreateDataPolicyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateDataPolicyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateDataPolicyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateDataPolicyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateDataPolicyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateDataPolicyRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateDataPolicyRequest& from) {
    CreateDataPolicyRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateDataPolicyRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.datapolicies.v1.CreateDataPolicyRequest";
  }
  protected:
  explicit CreateDataPolicyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kDataPolicyFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // .google.cloud.bigquery.datapolicies.v1.DataPolicy data_policy = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_data_policy() const;
  private:
  bool _internal_has_data_policy() const;
  public:
  void clear_data_policy();
  const ::google::cloud::bigquery::datapolicies::v1::DataPolicy& data_policy() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::datapolicies::v1::DataPolicy* release_data_policy();
  ::google::cloud::bigquery::datapolicies::v1::DataPolicy* mutable_data_policy();
  void set_allocated_data_policy(::google::cloud::bigquery::datapolicies::v1::DataPolicy* data_policy);
  private:
  const ::google::cloud::bigquery::datapolicies::v1::DataPolicy& _internal_data_policy() const;
  ::google::cloud::bigquery::datapolicies::v1::DataPolicy* _internal_mutable_data_policy();
  public:
  void unsafe_arena_set_allocated_data_policy(
      ::google::cloud::bigquery::datapolicies::v1::DataPolicy* data_policy);
  ::google::cloud::bigquery::datapolicies::v1::DataPolicy* unsafe_arena_release_data_policy();

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.datapolicies.v1.CreateDataPolicyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::google::cloud::bigquery::datapolicies::v1::DataPolicy* data_policy_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fdatapolicies_2fv1_2fdatapolicy_2eproto;
};
// -------------------------------------------------------------------

class UpdateDataPolicyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.datapolicies.v1.UpdateDataPolicyRequest) */ {
 public:
  inline UpdateDataPolicyRequest() : UpdateDataPolicyRequest(nullptr) {}
  ~UpdateDataPolicyRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateDataPolicyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateDataPolicyRequest(const UpdateDataPolicyRequest& from);
  UpdateDataPolicyRequest(UpdateDataPolicyRequest&& from) noexcept
    : UpdateDataPolicyRequest() {
    *this = ::std::move(from);
  }

  inline UpdateDataPolicyRequest& operator=(const UpdateDataPolicyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateDataPolicyRequest& operator=(UpdateDataPolicyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateDataPolicyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateDataPolicyRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateDataPolicyRequest*>(
               &_UpdateDataPolicyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UpdateDataPolicyRequest& a, UpdateDataPolicyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateDataPolicyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateDataPolicyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateDataPolicyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateDataPolicyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateDataPolicyRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateDataPolicyRequest& from) {
    UpdateDataPolicyRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateDataPolicyRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.datapolicies.v1.UpdateDataPolicyRequest";
  }
  protected:
  explicit UpdateDataPolicyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataPolicyFieldNumber = 1,
    kUpdateMaskFieldNumber = 2,
  };
  // .google.cloud.bigquery.datapolicies.v1.DataPolicy data_policy = 1 [(.google.api.field_behavior) = REQUIRED];
  bool has_data_policy() const;
  private:
  bool _internal_has_data_policy() const;
  public:
  void clear_data_policy();
  const ::google::cloud::bigquery::datapolicies::v1::DataPolicy& data_policy() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::datapolicies::v1::DataPolicy* release_data_policy();
  ::google::cloud::bigquery::datapolicies::v1::DataPolicy* mutable_data_policy();
  void set_allocated_data_policy(::google::cloud::bigquery::datapolicies::v1::DataPolicy* data_policy);
  private:
  const ::google::cloud::bigquery::datapolicies::v1::DataPolicy& _internal_data_policy() const;
  ::google::cloud::bigquery::datapolicies::v1::DataPolicy* _internal_mutable_data_policy();
  public:
  void unsafe_arena_set_allocated_data_policy(
      ::google::cloud::bigquery::datapolicies::v1::DataPolicy* data_policy);
  ::google::cloud::bigquery::datapolicies::v1::DataPolicy* unsafe_arena_release_data_policy();

  // .google.protobuf.FieldMask update_mask = 2;
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.datapolicies.v1.UpdateDataPolicyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::cloud::bigquery::datapolicies::v1::DataPolicy* data_policy_;
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fdatapolicies_2fv1_2fdatapolicy_2eproto;
};
// -------------------------------------------------------------------

class RenameDataPolicyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.datapolicies.v1.RenameDataPolicyRequest) */ {
 public:
  inline RenameDataPolicyRequest() : RenameDataPolicyRequest(nullptr) {}
  ~RenameDataPolicyRequest() override;
  explicit PROTOBUF_CONSTEXPR RenameDataPolicyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RenameDataPolicyRequest(const RenameDataPolicyRequest& from);
  RenameDataPolicyRequest(RenameDataPolicyRequest&& from) noexcept
    : RenameDataPolicyRequest() {
    *this = ::std::move(from);
  }

  inline RenameDataPolicyRequest& operator=(const RenameDataPolicyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RenameDataPolicyRequest& operator=(RenameDataPolicyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RenameDataPolicyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RenameDataPolicyRequest* internal_default_instance() {
    return reinterpret_cast<const RenameDataPolicyRequest*>(
               &_RenameDataPolicyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RenameDataPolicyRequest& a, RenameDataPolicyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RenameDataPolicyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RenameDataPolicyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RenameDataPolicyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RenameDataPolicyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RenameDataPolicyRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RenameDataPolicyRequest& from) {
    RenameDataPolicyRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RenameDataPolicyRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.datapolicies.v1.RenameDataPolicyRequest";
  }
  protected:
  explicit RenameDataPolicyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kNewDataPolicyIdFieldNumber = 2,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string new_data_policy_id = 2 [(.google.api.field_behavior) = REQUIRED];
  void clear_new_data_policy_id();
  const std::string& new_data_policy_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_new_data_policy_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_new_data_policy_id();
  PROTOBUF_NODISCARD std::string* release_new_data_policy_id();
  void set_allocated_new_data_policy_id(std::string* new_data_policy_id);
  private:
  const std::string& _internal_new_data_policy_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_new_data_policy_id(const std::string& value);
  std::string* _internal_mutable_new_data_policy_id();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.datapolicies.v1.RenameDataPolicyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr new_data_policy_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fdatapolicies_2fv1_2fdatapolicy_2eproto;
};
// -------------------------------------------------------------------

class DeleteDataPolicyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.datapolicies.v1.DeleteDataPolicyRequest) */ {
 public:
  inline DeleteDataPolicyRequest() : DeleteDataPolicyRequest(nullptr) {}
  ~DeleteDataPolicyRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteDataPolicyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteDataPolicyRequest(const DeleteDataPolicyRequest& from);
  DeleteDataPolicyRequest(DeleteDataPolicyRequest&& from) noexcept
    : DeleteDataPolicyRequest() {
    *this = ::std::move(from);
  }

  inline DeleteDataPolicyRequest& operator=(const DeleteDataPolicyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteDataPolicyRequest& operator=(DeleteDataPolicyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteDataPolicyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteDataPolicyRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteDataPolicyRequest*>(
               &_DeleteDataPolicyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DeleteDataPolicyRequest& a, DeleteDataPolicyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteDataPolicyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteDataPolicyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteDataPolicyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteDataPolicyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteDataPolicyRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteDataPolicyRequest& from) {
    DeleteDataPolicyRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteDataPolicyRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.datapolicies.v1.DeleteDataPolicyRequest";
  }
  protected:
  explicit DeleteDataPolicyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.datapolicies.v1.DeleteDataPolicyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fdatapolicies_2fv1_2fdatapolicy_2eproto;
};
// -------------------------------------------------------------------

class GetDataPolicyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.datapolicies.v1.GetDataPolicyRequest) */ {
 public:
  inline GetDataPolicyRequest() : GetDataPolicyRequest(nullptr) {}
  ~GetDataPolicyRequest() override;
  explicit PROTOBUF_CONSTEXPR GetDataPolicyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetDataPolicyRequest(const GetDataPolicyRequest& from);
  GetDataPolicyRequest(GetDataPolicyRequest&& from) noexcept
    : GetDataPolicyRequest() {
    *this = ::std::move(from);
  }

  inline GetDataPolicyRequest& operator=(const GetDataPolicyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDataPolicyRequest& operator=(GetDataPolicyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetDataPolicyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetDataPolicyRequest* internal_default_instance() {
    return reinterpret_cast<const GetDataPolicyRequest*>(
               &_GetDataPolicyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetDataPolicyRequest& a, GetDataPolicyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDataPolicyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDataPolicyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetDataPolicyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetDataPolicyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetDataPolicyRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetDataPolicyRequest& from) {
    GetDataPolicyRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDataPolicyRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.datapolicies.v1.GetDataPolicyRequest";
  }
  protected:
  explicit GetDataPolicyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.datapolicies.v1.GetDataPolicyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fdatapolicies_2fv1_2fdatapolicy_2eproto;
};
// -------------------------------------------------------------------

class ListDataPoliciesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.datapolicies.v1.ListDataPoliciesRequest) */ {
 public:
  inline ListDataPoliciesRequest() : ListDataPoliciesRequest(nullptr) {}
  ~ListDataPoliciesRequest() override;
  explicit PROTOBUF_CONSTEXPR ListDataPoliciesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListDataPoliciesRequest(const ListDataPoliciesRequest& from);
  ListDataPoliciesRequest(ListDataPoliciesRequest&& from) noexcept
    : ListDataPoliciesRequest() {
    *this = ::std::move(from);
  }

  inline ListDataPoliciesRequest& operator=(const ListDataPoliciesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListDataPoliciesRequest& operator=(ListDataPoliciesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListDataPoliciesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListDataPoliciesRequest* internal_default_instance() {
    return reinterpret_cast<const ListDataPoliciesRequest*>(
               &_ListDataPoliciesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ListDataPoliciesRequest& a, ListDataPoliciesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListDataPoliciesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListDataPoliciesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListDataPoliciesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListDataPoliciesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListDataPoliciesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListDataPoliciesRequest& from) {
    ListDataPoliciesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListDataPoliciesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.datapolicies.v1.ListDataPoliciesRequest";
  }
  protected:
  explicit ListDataPoliciesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kFilterFieldNumber = 4,
    kPageSizeFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 3;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // string filter = 4;
  void clear_filter();
  const std::string& filter() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filter(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filter();
  PROTOBUF_NODISCARD std::string* release_filter();
  void set_allocated_filter(std::string* filter);
  private:
  const std::string& _internal_filter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filter(const std::string& value);
  std::string* _internal_mutable_filter();
  public:

  // int32 page_size = 2;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.datapolicies.v1.ListDataPoliciesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filter_;
    int32_t page_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fdatapolicies_2fv1_2fdatapolicy_2eproto;
};
// -------------------------------------------------------------------

class ListDataPoliciesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.datapolicies.v1.ListDataPoliciesResponse) */ {
 public:
  inline ListDataPoliciesResponse() : ListDataPoliciesResponse(nullptr) {}
  ~ListDataPoliciesResponse() override;
  explicit PROTOBUF_CONSTEXPR ListDataPoliciesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListDataPoliciesResponse(const ListDataPoliciesResponse& from);
  ListDataPoliciesResponse(ListDataPoliciesResponse&& from) noexcept
    : ListDataPoliciesResponse() {
    *this = ::std::move(from);
  }

  inline ListDataPoliciesResponse& operator=(const ListDataPoliciesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListDataPoliciesResponse& operator=(ListDataPoliciesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListDataPoliciesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListDataPoliciesResponse* internal_default_instance() {
    return reinterpret_cast<const ListDataPoliciesResponse*>(
               &_ListDataPoliciesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ListDataPoliciesResponse& a, ListDataPoliciesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListDataPoliciesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListDataPoliciesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListDataPoliciesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListDataPoliciesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListDataPoliciesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListDataPoliciesResponse& from) {
    ListDataPoliciesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListDataPoliciesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.datapolicies.v1.ListDataPoliciesResponse";
  }
  protected:
  explicit ListDataPoliciesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataPoliciesFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .google.cloud.bigquery.datapolicies.v1.DataPolicy data_policies = 1;
  int data_policies_size() const;
  private:
  int _internal_data_policies_size() const;
  public:
  void clear_data_policies();
  ::google::cloud::bigquery::datapolicies::v1::DataPolicy* mutable_data_policies(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::datapolicies::v1::DataPolicy >*
      mutable_data_policies();
  private:
  const ::google::cloud::bigquery::datapolicies::v1::DataPolicy& _internal_data_policies(int index) const;
  ::google::cloud::bigquery::datapolicies::v1::DataPolicy* _internal_add_data_policies();
  public:
  const ::google::cloud::bigquery::datapolicies::v1::DataPolicy& data_policies(int index) const;
  ::google::cloud::bigquery::datapolicies::v1::DataPolicy* add_data_policies();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::datapolicies::v1::DataPolicy >&
      data_policies() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.datapolicies.v1.ListDataPoliciesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::datapolicies::v1::DataPolicy > data_policies_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fdatapolicies_2fv1_2fdatapolicy_2eproto;
};
// -------------------------------------------------------------------

class DataPolicy final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.datapolicies.v1.DataPolicy) */ {
 public:
  inline DataPolicy() : DataPolicy(nullptr) {}
  ~DataPolicy() override;
  explicit PROTOBUF_CONSTEXPR DataPolicy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DataPolicy(const DataPolicy& from);
  DataPolicy(DataPolicy&& from) noexcept
    : DataPolicy() {
    *this = ::std::move(from);
  }

  inline DataPolicy& operator=(const DataPolicy& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataPolicy& operator=(DataPolicy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DataPolicy& default_instance() {
    return *internal_default_instance();
  }
  enum MatchingLabelCase {
    kPolicyTag = 4,
    MATCHING_LABEL_NOT_SET = 0,
  };

  enum PolicyCase {
    kDataMaskingPolicy = 5,
    POLICY_NOT_SET = 0,
  };

  static inline const DataPolicy* internal_default_instance() {
    return reinterpret_cast<const DataPolicy*>(
               &_DataPolicy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DataPolicy& a, DataPolicy& b) {
    a.Swap(&b);
  }
  inline void Swap(DataPolicy* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataPolicy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DataPolicy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DataPolicy>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DataPolicy& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DataPolicy& from) {
    DataPolicy::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataPolicy* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.datapolicies.v1.DataPolicy";
  }
  protected:
  explicit DataPolicy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DataPolicy_DataPolicyType DataPolicyType;
  static constexpr DataPolicyType DATA_POLICY_TYPE_UNSPECIFIED =
    DataPolicy_DataPolicyType_DATA_POLICY_TYPE_UNSPECIFIED;
  static constexpr DataPolicyType COLUMN_LEVEL_SECURITY_POLICY =
    DataPolicy_DataPolicyType_COLUMN_LEVEL_SECURITY_POLICY;
  static constexpr DataPolicyType DATA_MASKING_POLICY =
    DataPolicy_DataPolicyType_DATA_MASKING_POLICY;
  static inline bool DataPolicyType_IsValid(int value) {
    return DataPolicy_DataPolicyType_IsValid(value);
  }
  static constexpr DataPolicyType DataPolicyType_MIN =
    DataPolicy_DataPolicyType_DataPolicyType_MIN;
  static constexpr DataPolicyType DataPolicyType_MAX =
    DataPolicy_DataPolicyType_DataPolicyType_MAX;
  static constexpr int DataPolicyType_ARRAYSIZE =
    DataPolicy_DataPolicyType_DataPolicyType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DataPolicyType_descriptor() {
    return DataPolicy_DataPolicyType_descriptor();
  }
  template<typename T>
  static inline const std::string& DataPolicyType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DataPolicyType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DataPolicyType_Name.");
    return DataPolicy_DataPolicyType_Name(enum_t_value);
  }
  static inline bool DataPolicyType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DataPolicyType* value) {
    return DataPolicy_DataPolicyType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDataPolicyIdFieldNumber = 3,
    kDataPolicyTypeFieldNumber = 2,
    kPolicyTagFieldNumber = 4,
    kDataMaskingPolicyFieldNumber = 5,
  };
  // string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string data_policy_id = 3;
  void clear_data_policy_id();
  const std::string& data_policy_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data_policy_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data_policy_id();
  PROTOBUF_NODISCARD std::string* release_data_policy_id();
  void set_allocated_data_policy_id(std::string* data_policy_id);
  private:
  const std::string& _internal_data_policy_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data_policy_id(const std::string& value);
  std::string* _internal_mutable_data_policy_id();
  public:

  // .google.cloud.bigquery.datapolicies.v1.DataPolicy.DataPolicyType data_policy_type = 2;
  void clear_data_policy_type();
  ::google::cloud::bigquery::datapolicies::v1::DataPolicy_DataPolicyType data_policy_type() const;
  void set_data_policy_type(::google::cloud::bigquery::datapolicies::v1::DataPolicy_DataPolicyType value);
  private:
  ::google::cloud::bigquery::datapolicies::v1::DataPolicy_DataPolicyType _internal_data_policy_type() const;
  void _internal_set_data_policy_type(::google::cloud::bigquery::datapolicies::v1::DataPolicy_DataPolicyType value);
  public:

  // string policy_tag = 4;
  bool has_policy_tag() const;
  private:
  bool _internal_has_policy_tag() const;
  public:
  void clear_policy_tag();
  const std::string& policy_tag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_policy_tag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_policy_tag();
  PROTOBUF_NODISCARD std::string* release_policy_tag();
  void set_allocated_policy_tag(std::string* policy_tag);
  private:
  const std::string& _internal_policy_tag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_policy_tag(const std::string& value);
  std::string* _internal_mutable_policy_tag();
  public:

  // .google.cloud.bigquery.datapolicies.v1.DataMaskingPolicy data_masking_policy = 5;
  bool has_data_masking_policy() const;
  private:
  bool _internal_has_data_masking_policy() const;
  public:
  void clear_data_masking_policy();
  const ::google::cloud::bigquery::datapolicies::v1::DataMaskingPolicy& data_masking_policy() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::datapolicies::v1::DataMaskingPolicy* release_data_masking_policy();
  ::google::cloud::bigquery::datapolicies::v1::DataMaskingPolicy* mutable_data_masking_policy();
  void set_allocated_data_masking_policy(::google::cloud::bigquery::datapolicies::v1::DataMaskingPolicy* data_masking_policy);
  private:
  const ::google::cloud::bigquery::datapolicies::v1::DataMaskingPolicy& _internal_data_masking_policy() const;
  ::google::cloud::bigquery::datapolicies::v1::DataMaskingPolicy* _internal_mutable_data_masking_policy();
  public:
  void unsafe_arena_set_allocated_data_masking_policy(
      ::google::cloud::bigquery::datapolicies::v1::DataMaskingPolicy* data_masking_policy);
  ::google::cloud::bigquery::datapolicies::v1::DataMaskingPolicy* unsafe_arena_release_data_masking_policy();

  void clear_matching_label();
  MatchingLabelCase matching_label_case() const;
  void clear_policy();
  PolicyCase policy_case() const;
  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.datapolicies.v1.DataPolicy)
 private:
  class _Internal;
  void set_has_policy_tag();
  void set_has_data_masking_policy();

  inline bool has_matching_label() const;
  inline void clear_has_matching_label();

  inline bool has_policy() const;
  inline void clear_has_policy();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_policy_id_;
    int data_policy_type_;
    union MatchingLabelUnion {
      constexpr MatchingLabelUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr policy_tag_;
    } matching_label_;
    union PolicyUnion {
      constexpr PolicyUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::google::cloud::bigquery::datapolicies::v1::DataMaskingPolicy* data_masking_policy_;
    } policy_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[2];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fdatapolicies_2fv1_2fdatapolicy_2eproto;
};
// -------------------------------------------------------------------

class DataMaskingPolicy final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.datapolicies.v1.DataMaskingPolicy) */ {
 public:
  inline DataMaskingPolicy() : DataMaskingPolicy(nullptr) {}
  ~DataMaskingPolicy() override;
  explicit PROTOBUF_CONSTEXPR DataMaskingPolicy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DataMaskingPolicy(const DataMaskingPolicy& from);
  DataMaskingPolicy(DataMaskingPolicy&& from) noexcept
    : DataMaskingPolicy() {
    *this = ::std::move(from);
  }

  inline DataMaskingPolicy& operator=(const DataMaskingPolicy& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataMaskingPolicy& operator=(DataMaskingPolicy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DataMaskingPolicy& default_instance() {
    return *internal_default_instance();
  }
  enum MaskingExpressionCase {
    kPredefinedExpression = 1,
    MASKING_EXPRESSION_NOT_SET = 0,
  };

  static inline const DataMaskingPolicy* internal_default_instance() {
    return reinterpret_cast<const DataMaskingPolicy*>(
               &_DataMaskingPolicy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DataMaskingPolicy& a, DataMaskingPolicy& b) {
    a.Swap(&b);
  }
  inline void Swap(DataMaskingPolicy* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataMaskingPolicy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DataMaskingPolicy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DataMaskingPolicy>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DataMaskingPolicy& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DataMaskingPolicy& from) {
    DataMaskingPolicy::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataMaskingPolicy* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.datapolicies.v1.DataMaskingPolicy";
  }
  protected:
  explicit DataMaskingPolicy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DataMaskingPolicy_PredefinedExpression PredefinedExpression;
  static constexpr PredefinedExpression PREDEFINED_EXPRESSION_UNSPECIFIED =
    DataMaskingPolicy_PredefinedExpression_PREDEFINED_EXPRESSION_UNSPECIFIED;
  static constexpr PredefinedExpression SHA256 =
    DataMaskingPolicy_PredefinedExpression_SHA256;
  static constexpr PredefinedExpression ALWAYS_NULL =
    DataMaskingPolicy_PredefinedExpression_ALWAYS_NULL;
  static constexpr PredefinedExpression DEFAULT_MASKING_VALUE =
    DataMaskingPolicy_PredefinedExpression_DEFAULT_MASKING_VALUE;
  static inline bool PredefinedExpression_IsValid(int value) {
    return DataMaskingPolicy_PredefinedExpression_IsValid(value);
  }
  static constexpr PredefinedExpression PredefinedExpression_MIN =
    DataMaskingPolicy_PredefinedExpression_PredefinedExpression_MIN;
  static constexpr PredefinedExpression PredefinedExpression_MAX =
    DataMaskingPolicy_PredefinedExpression_PredefinedExpression_MAX;
  static constexpr int PredefinedExpression_ARRAYSIZE =
    DataMaskingPolicy_PredefinedExpression_PredefinedExpression_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PredefinedExpression_descriptor() {
    return DataMaskingPolicy_PredefinedExpression_descriptor();
  }
  template<typename T>
  static inline const std::string& PredefinedExpression_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PredefinedExpression>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PredefinedExpression_Name.");
    return DataMaskingPolicy_PredefinedExpression_Name(enum_t_value);
  }
  static inline bool PredefinedExpression_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PredefinedExpression* value) {
    return DataMaskingPolicy_PredefinedExpression_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPredefinedExpressionFieldNumber = 1,
  };
  // .google.cloud.bigquery.datapolicies.v1.DataMaskingPolicy.PredefinedExpression predefined_expression = 1;
  bool has_predefined_expression() const;
  private:
  bool _internal_has_predefined_expression() const;
  public:
  void clear_predefined_expression();
  ::google::cloud::bigquery::datapolicies::v1::DataMaskingPolicy_PredefinedExpression predefined_expression() const;
  void set_predefined_expression(::google::cloud::bigquery::datapolicies::v1::DataMaskingPolicy_PredefinedExpression value);
  private:
  ::google::cloud::bigquery::datapolicies::v1::DataMaskingPolicy_PredefinedExpression _internal_predefined_expression() const;
  void _internal_set_predefined_expression(::google::cloud::bigquery::datapolicies::v1::DataMaskingPolicy_PredefinedExpression value);
  public:

  void clear_masking_expression();
  MaskingExpressionCase masking_expression_case() const;
  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.datapolicies.v1.DataMaskingPolicy)
 private:
  class _Internal;
  void set_has_predefined_expression();

  inline bool has_masking_expression() const;
  inline void clear_has_masking_expression();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union MaskingExpressionUnion {
      constexpr MaskingExpressionUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      int predefined_expression_;
    } masking_expression_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fdatapolicies_2fv1_2fdatapolicy_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateDataPolicyRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreateDataPolicyRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& CreateDataPolicyRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datapolicies.v1.CreateDataPolicyRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateDataPolicyRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datapolicies.v1.CreateDataPolicyRequest.parent)
}
inline std::string* CreateDataPolicyRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datapolicies.v1.CreateDataPolicyRequest.parent)
  return _s;
}
inline const std::string& CreateDataPolicyRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void CreateDataPolicyRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateDataPolicyRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateDataPolicyRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datapolicies.v1.CreateDataPolicyRequest.parent)
  return _impl_.parent_.Release();
}
inline void CreateDataPolicyRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datapolicies.v1.CreateDataPolicyRequest.parent)
}

// .google.cloud.bigquery.datapolicies.v1.DataPolicy data_policy = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateDataPolicyRequest::_internal_has_data_policy() const {
  return this != internal_default_instance() && _impl_.data_policy_ != nullptr;
}
inline bool CreateDataPolicyRequest::has_data_policy() const {
  return _internal_has_data_policy();
}
inline void CreateDataPolicyRequest::clear_data_policy() {
  if (GetArenaForAllocation() == nullptr && _impl_.data_policy_ != nullptr) {
    delete _impl_.data_policy_;
  }
  _impl_.data_policy_ = nullptr;
}
inline const ::google::cloud::bigquery::datapolicies::v1::DataPolicy& CreateDataPolicyRequest::_internal_data_policy() const {
  const ::google::cloud::bigquery::datapolicies::v1::DataPolicy* p = _impl_.data_policy_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::datapolicies::v1::DataPolicy&>(
      ::google::cloud::bigquery::datapolicies::v1::_DataPolicy_default_instance_);
}
inline const ::google::cloud::bigquery::datapolicies::v1::DataPolicy& CreateDataPolicyRequest::data_policy() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datapolicies.v1.CreateDataPolicyRequest.data_policy)
  return _internal_data_policy();
}
inline void CreateDataPolicyRequest::unsafe_arena_set_allocated_data_policy(
    ::google::cloud::bigquery::datapolicies::v1::DataPolicy* data_policy) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_policy_);
  }
  _impl_.data_policy_ = data_policy;
  if (data_policy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.datapolicies.v1.CreateDataPolicyRequest.data_policy)
}
inline ::google::cloud::bigquery::datapolicies::v1::DataPolicy* CreateDataPolicyRequest::release_data_policy() {
  
  ::google::cloud::bigquery::datapolicies::v1::DataPolicy* temp = _impl_.data_policy_;
  _impl_.data_policy_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::datapolicies::v1::DataPolicy* CreateDataPolicyRequest::unsafe_arena_release_data_policy() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datapolicies.v1.CreateDataPolicyRequest.data_policy)
  
  ::google::cloud::bigquery::datapolicies::v1::DataPolicy* temp = _impl_.data_policy_;
  _impl_.data_policy_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::datapolicies::v1::DataPolicy* CreateDataPolicyRequest::_internal_mutable_data_policy() {
  
  if (_impl_.data_policy_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::datapolicies::v1::DataPolicy>(GetArenaForAllocation());
    _impl_.data_policy_ = p;
  }
  return _impl_.data_policy_;
}
inline ::google::cloud::bigquery::datapolicies::v1::DataPolicy* CreateDataPolicyRequest::mutable_data_policy() {
  ::google::cloud::bigquery::datapolicies::v1::DataPolicy* _msg = _internal_mutable_data_policy();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datapolicies.v1.CreateDataPolicyRequest.data_policy)
  return _msg;
}
inline void CreateDataPolicyRequest::set_allocated_data_policy(::google::cloud::bigquery::datapolicies::v1::DataPolicy* data_policy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.data_policy_;
  }
  if (data_policy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data_policy);
    if (message_arena != submessage_arena) {
      data_policy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data_policy, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.data_policy_ = data_policy;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datapolicies.v1.CreateDataPolicyRequest.data_policy)
}

// -------------------------------------------------------------------

// UpdateDataPolicyRequest

// .google.cloud.bigquery.datapolicies.v1.DataPolicy data_policy = 1 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateDataPolicyRequest::_internal_has_data_policy() const {
  return this != internal_default_instance() && _impl_.data_policy_ != nullptr;
}
inline bool UpdateDataPolicyRequest::has_data_policy() const {
  return _internal_has_data_policy();
}
inline void UpdateDataPolicyRequest::clear_data_policy() {
  if (GetArenaForAllocation() == nullptr && _impl_.data_policy_ != nullptr) {
    delete _impl_.data_policy_;
  }
  _impl_.data_policy_ = nullptr;
}
inline const ::google::cloud::bigquery::datapolicies::v1::DataPolicy& UpdateDataPolicyRequest::_internal_data_policy() const {
  const ::google::cloud::bigquery::datapolicies::v1::DataPolicy* p = _impl_.data_policy_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::datapolicies::v1::DataPolicy&>(
      ::google::cloud::bigquery::datapolicies::v1::_DataPolicy_default_instance_);
}
inline const ::google::cloud::bigquery::datapolicies::v1::DataPolicy& UpdateDataPolicyRequest::data_policy() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datapolicies.v1.UpdateDataPolicyRequest.data_policy)
  return _internal_data_policy();
}
inline void UpdateDataPolicyRequest::unsafe_arena_set_allocated_data_policy(
    ::google::cloud::bigquery::datapolicies::v1::DataPolicy* data_policy) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_policy_);
  }
  _impl_.data_policy_ = data_policy;
  if (data_policy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.datapolicies.v1.UpdateDataPolicyRequest.data_policy)
}
inline ::google::cloud::bigquery::datapolicies::v1::DataPolicy* UpdateDataPolicyRequest::release_data_policy() {
  
  ::google::cloud::bigquery::datapolicies::v1::DataPolicy* temp = _impl_.data_policy_;
  _impl_.data_policy_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::datapolicies::v1::DataPolicy* UpdateDataPolicyRequest::unsafe_arena_release_data_policy() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datapolicies.v1.UpdateDataPolicyRequest.data_policy)
  
  ::google::cloud::bigquery::datapolicies::v1::DataPolicy* temp = _impl_.data_policy_;
  _impl_.data_policy_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::datapolicies::v1::DataPolicy* UpdateDataPolicyRequest::_internal_mutable_data_policy() {
  
  if (_impl_.data_policy_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::datapolicies::v1::DataPolicy>(GetArenaForAllocation());
    _impl_.data_policy_ = p;
  }
  return _impl_.data_policy_;
}
inline ::google::cloud::bigquery::datapolicies::v1::DataPolicy* UpdateDataPolicyRequest::mutable_data_policy() {
  ::google::cloud::bigquery::datapolicies::v1::DataPolicy* _msg = _internal_mutable_data_policy();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datapolicies.v1.UpdateDataPolicyRequest.data_policy)
  return _msg;
}
inline void UpdateDataPolicyRequest::set_allocated_data_policy(::google::cloud::bigquery::datapolicies::v1::DataPolicy* data_policy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.data_policy_;
  }
  if (data_policy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data_policy);
    if (message_arena != submessage_arena) {
      data_policy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data_policy, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.data_policy_ = data_policy;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datapolicies.v1.UpdateDataPolicyRequest.data_policy)
}

// .google.protobuf.FieldMask update_mask = 2;
inline bool UpdateDataPolicyRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && _impl_.update_mask_ != nullptr;
}
inline bool UpdateDataPolicyRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateDataPolicyRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = _impl_.update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateDataPolicyRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datapolicies.v1.UpdateDataPolicyRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateDataPolicyRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  _impl_.update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.datapolicies.v1.UpdateDataPolicyRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateDataPolicyRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateDataPolicyRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datapolicies.v1.UpdateDataPolicyRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateDataPolicyRequest::_internal_mutable_update_mask() {
  
  if (_impl_.update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    _impl_.update_mask_ = p;
  }
  return _impl_.update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateDataPolicyRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datapolicies.v1.UpdateDataPolicyRequest.update_mask)
  return _msg;
}
inline void UpdateDataPolicyRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datapolicies.v1.UpdateDataPolicyRequest.update_mask)
}

// -------------------------------------------------------------------

// RenameDataPolicyRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED];
inline void RenameDataPolicyRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& RenameDataPolicyRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datapolicies.v1.RenameDataPolicyRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RenameDataPolicyRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datapolicies.v1.RenameDataPolicyRequest.name)
}
inline std::string* RenameDataPolicyRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datapolicies.v1.RenameDataPolicyRequest.name)
  return _s;
}
inline const std::string& RenameDataPolicyRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void RenameDataPolicyRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* RenameDataPolicyRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* RenameDataPolicyRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datapolicies.v1.RenameDataPolicyRequest.name)
  return _impl_.name_.Release();
}
inline void RenameDataPolicyRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datapolicies.v1.RenameDataPolicyRequest.name)
}

// string new_data_policy_id = 2 [(.google.api.field_behavior) = REQUIRED];
inline void RenameDataPolicyRequest::clear_new_data_policy_id() {
  _impl_.new_data_policy_id_.ClearToEmpty();
}
inline const std::string& RenameDataPolicyRequest::new_data_policy_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datapolicies.v1.RenameDataPolicyRequest.new_data_policy_id)
  return _internal_new_data_policy_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RenameDataPolicyRequest::set_new_data_policy_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.new_data_policy_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datapolicies.v1.RenameDataPolicyRequest.new_data_policy_id)
}
inline std::string* RenameDataPolicyRequest::mutable_new_data_policy_id() {
  std::string* _s = _internal_mutable_new_data_policy_id();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datapolicies.v1.RenameDataPolicyRequest.new_data_policy_id)
  return _s;
}
inline const std::string& RenameDataPolicyRequest::_internal_new_data_policy_id() const {
  return _impl_.new_data_policy_id_.Get();
}
inline void RenameDataPolicyRequest::_internal_set_new_data_policy_id(const std::string& value) {
  
  _impl_.new_data_policy_id_.Set(value, GetArenaForAllocation());
}
inline std::string* RenameDataPolicyRequest::_internal_mutable_new_data_policy_id() {
  
  return _impl_.new_data_policy_id_.Mutable(GetArenaForAllocation());
}
inline std::string* RenameDataPolicyRequest::release_new_data_policy_id() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datapolicies.v1.RenameDataPolicyRequest.new_data_policy_id)
  return _impl_.new_data_policy_id_.Release();
}
inline void RenameDataPolicyRequest::set_allocated_new_data_policy_id(std::string* new_data_policy_id) {
  if (new_data_policy_id != nullptr) {
    
  } else {
    
  }
  _impl_.new_data_policy_id_.SetAllocated(new_data_policy_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.new_data_policy_id_.IsDefault()) {
    _impl_.new_data_policy_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datapolicies.v1.RenameDataPolicyRequest.new_data_policy_id)
}

// -------------------------------------------------------------------

// DeleteDataPolicyRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteDataPolicyRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DeleteDataPolicyRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datapolicies.v1.DeleteDataPolicyRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteDataPolicyRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datapolicies.v1.DeleteDataPolicyRequest.name)
}
inline std::string* DeleteDataPolicyRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datapolicies.v1.DeleteDataPolicyRequest.name)
  return _s;
}
inline const std::string& DeleteDataPolicyRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DeleteDataPolicyRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteDataPolicyRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteDataPolicyRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datapolicies.v1.DeleteDataPolicyRequest.name)
  return _impl_.name_.Release();
}
inline void DeleteDataPolicyRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datapolicies.v1.DeleteDataPolicyRequest.name)
}

// -------------------------------------------------------------------

// GetDataPolicyRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetDataPolicyRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GetDataPolicyRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datapolicies.v1.GetDataPolicyRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetDataPolicyRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datapolicies.v1.GetDataPolicyRequest.name)
}
inline std::string* GetDataPolicyRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datapolicies.v1.GetDataPolicyRequest.name)
  return _s;
}
inline const std::string& GetDataPolicyRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GetDataPolicyRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetDataPolicyRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetDataPolicyRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datapolicies.v1.GetDataPolicyRequest.name)
  return _impl_.name_.Release();
}
inline void GetDataPolicyRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datapolicies.v1.GetDataPolicyRequest.name)
}

// -------------------------------------------------------------------

// ListDataPoliciesRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListDataPoliciesRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& ListDataPoliciesRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datapolicies.v1.ListDataPoliciesRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListDataPoliciesRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datapolicies.v1.ListDataPoliciesRequest.parent)
}
inline std::string* ListDataPoliciesRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datapolicies.v1.ListDataPoliciesRequest.parent)
  return _s;
}
inline const std::string& ListDataPoliciesRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void ListDataPoliciesRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* ListDataPoliciesRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* ListDataPoliciesRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datapolicies.v1.ListDataPoliciesRequest.parent)
  return _impl_.parent_.Release();
}
inline void ListDataPoliciesRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datapolicies.v1.ListDataPoliciesRequest.parent)
}

// int32 page_size = 2;
inline void ListDataPoliciesRequest::clear_page_size() {
  _impl_.page_size_ = 0;
}
inline int32_t ListDataPoliciesRequest::_internal_page_size() const {
  return _impl_.page_size_;
}
inline int32_t ListDataPoliciesRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datapolicies.v1.ListDataPoliciesRequest.page_size)
  return _internal_page_size();
}
inline void ListDataPoliciesRequest::_internal_set_page_size(int32_t value) {
  
  _impl_.page_size_ = value;
}
inline void ListDataPoliciesRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datapolicies.v1.ListDataPoliciesRequest.page_size)
}

// string page_token = 3;
inline void ListDataPoliciesRequest::clear_page_token() {
  _impl_.page_token_.ClearToEmpty();
}
inline const std::string& ListDataPoliciesRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datapolicies.v1.ListDataPoliciesRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListDataPoliciesRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datapolicies.v1.ListDataPoliciesRequest.page_token)
}
inline std::string* ListDataPoliciesRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datapolicies.v1.ListDataPoliciesRequest.page_token)
  return _s;
}
inline const std::string& ListDataPoliciesRequest::_internal_page_token() const {
  return _impl_.page_token_.Get();
}
inline void ListDataPoliciesRequest::_internal_set_page_token(const std::string& value) {
  
  _impl_.page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListDataPoliciesRequest::_internal_mutable_page_token() {
  
  return _impl_.page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListDataPoliciesRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datapolicies.v1.ListDataPoliciesRequest.page_token)
  return _impl_.page_token_.Release();
}
inline void ListDataPoliciesRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  _impl_.page_token_.SetAllocated(page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.page_token_.IsDefault()) {
    _impl_.page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datapolicies.v1.ListDataPoliciesRequest.page_token)
}

// string filter = 4;
inline void ListDataPoliciesRequest::clear_filter() {
  _impl_.filter_.ClearToEmpty();
}
inline const std::string& ListDataPoliciesRequest::filter() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datapolicies.v1.ListDataPoliciesRequest.filter)
  return _internal_filter();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListDataPoliciesRequest::set_filter(ArgT0&& arg0, ArgT... args) {
 
 _impl_.filter_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datapolicies.v1.ListDataPoliciesRequest.filter)
}
inline std::string* ListDataPoliciesRequest::mutable_filter() {
  std::string* _s = _internal_mutable_filter();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datapolicies.v1.ListDataPoliciesRequest.filter)
  return _s;
}
inline const std::string& ListDataPoliciesRequest::_internal_filter() const {
  return _impl_.filter_.Get();
}
inline void ListDataPoliciesRequest::_internal_set_filter(const std::string& value) {
  
  _impl_.filter_.Set(value, GetArenaForAllocation());
}
inline std::string* ListDataPoliciesRequest::_internal_mutable_filter() {
  
  return _impl_.filter_.Mutable(GetArenaForAllocation());
}
inline std::string* ListDataPoliciesRequest::release_filter() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datapolicies.v1.ListDataPoliciesRequest.filter)
  return _impl_.filter_.Release();
}
inline void ListDataPoliciesRequest::set_allocated_filter(std::string* filter) {
  if (filter != nullptr) {
    
  } else {
    
  }
  _impl_.filter_.SetAllocated(filter, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.filter_.IsDefault()) {
    _impl_.filter_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datapolicies.v1.ListDataPoliciesRequest.filter)
}

// -------------------------------------------------------------------

// ListDataPoliciesResponse

// repeated .google.cloud.bigquery.datapolicies.v1.DataPolicy data_policies = 1;
inline int ListDataPoliciesResponse::_internal_data_policies_size() const {
  return _impl_.data_policies_.size();
}
inline int ListDataPoliciesResponse::data_policies_size() const {
  return _internal_data_policies_size();
}
inline void ListDataPoliciesResponse::clear_data_policies() {
  _impl_.data_policies_.Clear();
}
inline ::google::cloud::bigquery::datapolicies::v1::DataPolicy* ListDataPoliciesResponse::mutable_data_policies(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datapolicies.v1.ListDataPoliciesResponse.data_policies)
  return _impl_.data_policies_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::datapolicies::v1::DataPolicy >*
ListDataPoliciesResponse::mutable_data_policies() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.bigquery.datapolicies.v1.ListDataPoliciesResponse.data_policies)
  return &_impl_.data_policies_;
}
inline const ::google::cloud::bigquery::datapolicies::v1::DataPolicy& ListDataPoliciesResponse::_internal_data_policies(int index) const {
  return _impl_.data_policies_.Get(index);
}
inline const ::google::cloud::bigquery::datapolicies::v1::DataPolicy& ListDataPoliciesResponse::data_policies(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datapolicies.v1.ListDataPoliciesResponse.data_policies)
  return _internal_data_policies(index);
}
inline ::google::cloud::bigquery::datapolicies::v1::DataPolicy* ListDataPoliciesResponse::_internal_add_data_policies() {
  return _impl_.data_policies_.Add();
}
inline ::google::cloud::bigquery::datapolicies::v1::DataPolicy* ListDataPoliciesResponse::add_data_policies() {
  ::google::cloud::bigquery::datapolicies::v1::DataPolicy* _add = _internal_add_data_policies();
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.datapolicies.v1.ListDataPoliciesResponse.data_policies)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::datapolicies::v1::DataPolicy >&
ListDataPoliciesResponse::data_policies() const {
  // @@protoc_insertion_point(field_list:google.cloud.bigquery.datapolicies.v1.ListDataPoliciesResponse.data_policies)
  return _impl_.data_policies_;
}

// string next_page_token = 2;
inline void ListDataPoliciesResponse::clear_next_page_token() {
  _impl_.next_page_token_.ClearToEmpty();
}
inline const std::string& ListDataPoliciesResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datapolicies.v1.ListDataPoliciesResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListDataPoliciesResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.next_page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datapolicies.v1.ListDataPoliciesResponse.next_page_token)
}
inline std::string* ListDataPoliciesResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datapolicies.v1.ListDataPoliciesResponse.next_page_token)
  return _s;
}
inline const std::string& ListDataPoliciesResponse::_internal_next_page_token() const {
  return _impl_.next_page_token_.Get();
}
inline void ListDataPoliciesResponse::_internal_set_next_page_token(const std::string& value) {
  
  _impl_.next_page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListDataPoliciesResponse::_internal_mutable_next_page_token() {
  
  return _impl_.next_page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListDataPoliciesResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datapolicies.v1.ListDataPoliciesResponse.next_page_token)
  return _impl_.next_page_token_.Release();
}
inline void ListDataPoliciesResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  _impl_.next_page_token_.SetAllocated(next_page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.next_page_token_.IsDefault()) {
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datapolicies.v1.ListDataPoliciesResponse.next_page_token)
}

// -------------------------------------------------------------------

// DataPolicy

// string policy_tag = 4;
inline bool DataPolicy::_internal_has_policy_tag() const {
  return matching_label_case() == kPolicyTag;
}
inline bool DataPolicy::has_policy_tag() const {
  return _internal_has_policy_tag();
}
inline void DataPolicy::set_has_policy_tag() {
  _impl_._oneof_case_[0] = kPolicyTag;
}
inline void DataPolicy::clear_policy_tag() {
  if (_internal_has_policy_tag()) {
    _impl_.matching_label_.policy_tag_.Destroy();
    clear_has_matching_label();
  }
}
inline const std::string& DataPolicy::policy_tag() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datapolicies.v1.DataPolicy.policy_tag)
  return _internal_policy_tag();
}
template <typename ArgT0, typename... ArgT>
inline void DataPolicy::set_policy_tag(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_policy_tag()) {
    clear_matching_label();
    set_has_policy_tag();
    _impl_.matching_label_.policy_tag_.InitDefault();
  }
  _impl_.matching_label_.policy_tag_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datapolicies.v1.DataPolicy.policy_tag)
}
inline std::string* DataPolicy::mutable_policy_tag() {
  std::string* _s = _internal_mutable_policy_tag();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datapolicies.v1.DataPolicy.policy_tag)
  return _s;
}
inline const std::string& DataPolicy::_internal_policy_tag() const {
  if (_internal_has_policy_tag()) {
    return _impl_.matching_label_.policy_tag_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void DataPolicy::_internal_set_policy_tag(const std::string& value) {
  if (!_internal_has_policy_tag()) {
    clear_matching_label();
    set_has_policy_tag();
    _impl_.matching_label_.policy_tag_.InitDefault();
  }
  _impl_.matching_label_.policy_tag_.Set(value, GetArenaForAllocation());
}
inline std::string* DataPolicy::_internal_mutable_policy_tag() {
  if (!_internal_has_policy_tag()) {
    clear_matching_label();
    set_has_policy_tag();
    _impl_.matching_label_.policy_tag_.InitDefault();
  }
  return _impl_.matching_label_.policy_tag_.Mutable(      GetArenaForAllocation());
}
inline std::string* DataPolicy::release_policy_tag() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datapolicies.v1.DataPolicy.policy_tag)
  if (_internal_has_policy_tag()) {
    clear_has_matching_label();
    return _impl_.matching_label_.policy_tag_.Release();
  } else {
    return nullptr;
  }
}
inline void DataPolicy::set_allocated_policy_tag(std::string* policy_tag) {
  if (has_matching_label()) {
    clear_matching_label();
  }
  if (policy_tag != nullptr) {
    set_has_policy_tag();
    _impl_.matching_label_.policy_tag_.InitAllocated(policy_tag, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datapolicies.v1.DataPolicy.policy_tag)
}

// .google.cloud.bigquery.datapolicies.v1.DataMaskingPolicy data_masking_policy = 5;
inline bool DataPolicy::_internal_has_data_masking_policy() const {
  return policy_case() == kDataMaskingPolicy;
}
inline bool DataPolicy::has_data_masking_policy() const {
  return _internal_has_data_masking_policy();
}
inline void DataPolicy::set_has_data_masking_policy() {
  _impl_._oneof_case_[1] = kDataMaskingPolicy;
}
inline void DataPolicy::clear_data_masking_policy() {
  if (_internal_has_data_masking_policy()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.policy_.data_masking_policy_;
    }
    clear_has_policy();
  }
}
inline ::google::cloud::bigquery::datapolicies::v1::DataMaskingPolicy* DataPolicy::release_data_masking_policy() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datapolicies.v1.DataPolicy.data_masking_policy)
  if (_internal_has_data_masking_policy()) {
    clear_has_policy();
    ::google::cloud::bigquery::datapolicies::v1::DataMaskingPolicy* temp = _impl_.policy_.data_masking_policy_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.policy_.data_masking_policy_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::bigquery::datapolicies::v1::DataMaskingPolicy& DataPolicy::_internal_data_masking_policy() const {
  return _internal_has_data_masking_policy()
      ? *_impl_.policy_.data_masking_policy_
      : reinterpret_cast< ::google::cloud::bigquery::datapolicies::v1::DataMaskingPolicy&>(::google::cloud::bigquery::datapolicies::v1::_DataMaskingPolicy_default_instance_);
}
inline const ::google::cloud::bigquery::datapolicies::v1::DataMaskingPolicy& DataPolicy::data_masking_policy() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datapolicies.v1.DataPolicy.data_masking_policy)
  return _internal_data_masking_policy();
}
inline ::google::cloud::bigquery::datapolicies::v1::DataMaskingPolicy* DataPolicy::unsafe_arena_release_data_masking_policy() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.bigquery.datapolicies.v1.DataPolicy.data_masking_policy)
  if (_internal_has_data_masking_policy()) {
    clear_has_policy();
    ::google::cloud::bigquery::datapolicies::v1::DataMaskingPolicy* temp = _impl_.policy_.data_masking_policy_;
    _impl_.policy_.data_masking_policy_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DataPolicy::unsafe_arena_set_allocated_data_masking_policy(::google::cloud::bigquery::datapolicies::v1::DataMaskingPolicy* data_masking_policy) {
  clear_policy();
  if (data_masking_policy) {
    set_has_data_masking_policy();
    _impl_.policy_.data_masking_policy_ = data_masking_policy;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.datapolicies.v1.DataPolicy.data_masking_policy)
}
inline ::google::cloud::bigquery::datapolicies::v1::DataMaskingPolicy* DataPolicy::_internal_mutable_data_masking_policy() {
  if (!_internal_has_data_masking_policy()) {
    clear_policy();
    set_has_data_masking_policy();
    _impl_.policy_.data_masking_policy_ = CreateMaybeMessage< ::google::cloud::bigquery::datapolicies::v1::DataMaskingPolicy >(GetArenaForAllocation());
  }
  return _impl_.policy_.data_masking_policy_;
}
inline ::google::cloud::bigquery::datapolicies::v1::DataMaskingPolicy* DataPolicy::mutable_data_masking_policy() {
  ::google::cloud::bigquery::datapolicies::v1::DataMaskingPolicy* _msg = _internal_mutable_data_masking_policy();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datapolicies.v1.DataPolicy.data_masking_policy)
  return _msg;
}

// string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void DataPolicy::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DataPolicy::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datapolicies.v1.DataPolicy.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DataPolicy::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datapolicies.v1.DataPolicy.name)
}
inline std::string* DataPolicy::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datapolicies.v1.DataPolicy.name)
  return _s;
}
inline const std::string& DataPolicy::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DataPolicy::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DataPolicy::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* DataPolicy::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datapolicies.v1.DataPolicy.name)
  return _impl_.name_.Release();
}
inline void DataPolicy::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datapolicies.v1.DataPolicy.name)
}

// .google.cloud.bigquery.datapolicies.v1.DataPolicy.DataPolicyType data_policy_type = 2;
inline void DataPolicy::clear_data_policy_type() {
  _impl_.data_policy_type_ = 0;
}
inline ::google::cloud::bigquery::datapolicies::v1::DataPolicy_DataPolicyType DataPolicy::_internal_data_policy_type() const {
  return static_cast< ::google::cloud::bigquery::datapolicies::v1::DataPolicy_DataPolicyType >(_impl_.data_policy_type_);
}
inline ::google::cloud::bigquery::datapolicies::v1::DataPolicy_DataPolicyType DataPolicy::data_policy_type() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datapolicies.v1.DataPolicy.data_policy_type)
  return _internal_data_policy_type();
}
inline void DataPolicy::_internal_set_data_policy_type(::google::cloud::bigquery::datapolicies::v1::DataPolicy_DataPolicyType value) {
  
  _impl_.data_policy_type_ = value;
}
inline void DataPolicy::set_data_policy_type(::google::cloud::bigquery::datapolicies::v1::DataPolicy_DataPolicyType value) {
  _internal_set_data_policy_type(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datapolicies.v1.DataPolicy.data_policy_type)
}

// string data_policy_id = 3;
inline void DataPolicy::clear_data_policy_id() {
  _impl_.data_policy_id_.ClearToEmpty();
}
inline const std::string& DataPolicy::data_policy_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datapolicies.v1.DataPolicy.data_policy_id)
  return _internal_data_policy_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DataPolicy::set_data_policy_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_policy_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datapolicies.v1.DataPolicy.data_policy_id)
}
inline std::string* DataPolicy::mutable_data_policy_id() {
  std::string* _s = _internal_mutable_data_policy_id();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datapolicies.v1.DataPolicy.data_policy_id)
  return _s;
}
inline const std::string& DataPolicy::_internal_data_policy_id() const {
  return _impl_.data_policy_id_.Get();
}
inline void DataPolicy::_internal_set_data_policy_id(const std::string& value) {
  
  _impl_.data_policy_id_.Set(value, GetArenaForAllocation());
}
inline std::string* DataPolicy::_internal_mutable_data_policy_id() {
  
  return _impl_.data_policy_id_.Mutable(GetArenaForAllocation());
}
inline std::string* DataPolicy::release_data_policy_id() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datapolicies.v1.DataPolicy.data_policy_id)
  return _impl_.data_policy_id_.Release();
}
inline void DataPolicy::set_allocated_data_policy_id(std::string* data_policy_id) {
  if (data_policy_id != nullptr) {
    
  } else {
    
  }
  _impl_.data_policy_id_.SetAllocated(data_policy_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_policy_id_.IsDefault()) {
    _impl_.data_policy_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datapolicies.v1.DataPolicy.data_policy_id)
}

inline bool DataPolicy::has_matching_label() const {
  return matching_label_case() != MATCHING_LABEL_NOT_SET;
}
inline void DataPolicy::clear_has_matching_label() {
  _impl_._oneof_case_[0] = MATCHING_LABEL_NOT_SET;
}
inline bool DataPolicy::has_policy() const {
  return policy_case() != POLICY_NOT_SET;
}
inline void DataPolicy::clear_has_policy() {
  _impl_._oneof_case_[1] = POLICY_NOT_SET;
}
inline DataPolicy::MatchingLabelCase DataPolicy::matching_label_case() const {
  return DataPolicy::MatchingLabelCase(_impl_._oneof_case_[0]);
}
inline DataPolicy::PolicyCase DataPolicy::policy_case() const {
  return DataPolicy::PolicyCase(_impl_._oneof_case_[1]);
}
// -------------------------------------------------------------------

// DataMaskingPolicy

// .google.cloud.bigquery.datapolicies.v1.DataMaskingPolicy.PredefinedExpression predefined_expression = 1;
inline bool DataMaskingPolicy::_internal_has_predefined_expression() const {
  return masking_expression_case() == kPredefinedExpression;
}
inline bool DataMaskingPolicy::has_predefined_expression() const {
  return _internal_has_predefined_expression();
}
inline void DataMaskingPolicy::set_has_predefined_expression() {
  _impl_._oneof_case_[0] = kPredefinedExpression;
}
inline void DataMaskingPolicy::clear_predefined_expression() {
  if (_internal_has_predefined_expression()) {
    _impl_.masking_expression_.predefined_expression_ = 0;
    clear_has_masking_expression();
  }
}
inline ::google::cloud::bigquery::datapolicies::v1::DataMaskingPolicy_PredefinedExpression DataMaskingPolicy::_internal_predefined_expression() const {
  if (_internal_has_predefined_expression()) {
    return static_cast< ::google::cloud::bigquery::datapolicies::v1::DataMaskingPolicy_PredefinedExpression >(_impl_.masking_expression_.predefined_expression_);
  }
  return static_cast< ::google::cloud::bigquery::datapolicies::v1::DataMaskingPolicy_PredefinedExpression >(0);
}
inline ::google::cloud::bigquery::datapolicies::v1::DataMaskingPolicy_PredefinedExpression DataMaskingPolicy::predefined_expression() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datapolicies.v1.DataMaskingPolicy.predefined_expression)
  return _internal_predefined_expression();
}
inline void DataMaskingPolicy::_internal_set_predefined_expression(::google::cloud::bigquery::datapolicies::v1::DataMaskingPolicy_PredefinedExpression value) {
  if (!_internal_has_predefined_expression()) {
    clear_masking_expression();
    set_has_predefined_expression();
  }
  _impl_.masking_expression_.predefined_expression_ = value;
}
inline void DataMaskingPolicy::set_predefined_expression(::google::cloud::bigquery::datapolicies::v1::DataMaskingPolicy_PredefinedExpression value) {
  _internal_set_predefined_expression(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datapolicies.v1.DataMaskingPolicy.predefined_expression)
}

inline bool DataMaskingPolicy::has_masking_expression() const {
  return masking_expression_case() != MASKING_EXPRESSION_NOT_SET;
}
inline void DataMaskingPolicy::clear_has_masking_expression() {
  _impl_._oneof_case_[0] = MASKING_EXPRESSION_NOT_SET;
}
inline DataMaskingPolicy::MaskingExpressionCase DataMaskingPolicy::masking_expression_case() const {
  return DataMaskingPolicy::MaskingExpressionCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace datapolicies
}  // namespace bigquery
}  // namespace cloud
}  // namespace google

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::google::cloud::bigquery::datapolicies::v1::DataPolicy_DataPolicyType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::bigquery::datapolicies::v1::DataPolicy_DataPolicyType>() {
  return ::google::cloud::bigquery::datapolicies::v1::DataPolicy_DataPolicyType_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::bigquery::datapolicies::v1::DataMaskingPolicy_PredefinedExpression> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::bigquery::datapolicies::v1::DataMaskingPolicy_PredefinedExpression>() {
  return ::google::cloud::bigquery::datapolicies::v1::DataMaskingPolicy_PredefinedExpression_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fbigquery_2fdatapolicies_2fv1_2fdatapolicy_2eproto
