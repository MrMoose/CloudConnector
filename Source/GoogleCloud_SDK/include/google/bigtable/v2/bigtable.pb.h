// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/bigtable/v2/bigtable.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fbigtable_2fv2_2fbigtable_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fbigtable_2fv2_2fbigtable_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include "google/api/field_behavior.pb.h"
#include "google/api/resource.pb.h"
#include "google/bigtable/v2/data.pb.h"
#include <google/protobuf/wrappers.pb.h>
#include "google/rpc/status.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fbigtable_2fv2_2fbigtable_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fbigtable_2fv2_2fbigtable_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[15]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fbigtable_2fv2_2fbigtable_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_google_2fbigtable_2fv2_2fbigtable_2eproto_metadata_getter(int index);
namespace google {
namespace bigtable {
namespace v2 {
class CheckAndMutateRowRequest;
struct CheckAndMutateRowRequestDefaultTypeInternal;
extern CheckAndMutateRowRequestDefaultTypeInternal _CheckAndMutateRowRequest_default_instance_;
class CheckAndMutateRowResponse;
struct CheckAndMutateRowResponseDefaultTypeInternal;
extern CheckAndMutateRowResponseDefaultTypeInternal _CheckAndMutateRowResponse_default_instance_;
class MutateRowRequest;
struct MutateRowRequestDefaultTypeInternal;
extern MutateRowRequestDefaultTypeInternal _MutateRowRequest_default_instance_;
class MutateRowResponse;
struct MutateRowResponseDefaultTypeInternal;
extern MutateRowResponseDefaultTypeInternal _MutateRowResponse_default_instance_;
class MutateRowsRequest;
struct MutateRowsRequestDefaultTypeInternal;
extern MutateRowsRequestDefaultTypeInternal _MutateRowsRequest_default_instance_;
class MutateRowsRequest_Entry;
struct MutateRowsRequest_EntryDefaultTypeInternal;
extern MutateRowsRequest_EntryDefaultTypeInternal _MutateRowsRequest_Entry_default_instance_;
class MutateRowsResponse;
struct MutateRowsResponseDefaultTypeInternal;
extern MutateRowsResponseDefaultTypeInternal _MutateRowsResponse_default_instance_;
class MutateRowsResponse_Entry;
struct MutateRowsResponse_EntryDefaultTypeInternal;
extern MutateRowsResponse_EntryDefaultTypeInternal _MutateRowsResponse_Entry_default_instance_;
class ReadModifyWriteRowRequest;
struct ReadModifyWriteRowRequestDefaultTypeInternal;
extern ReadModifyWriteRowRequestDefaultTypeInternal _ReadModifyWriteRowRequest_default_instance_;
class ReadModifyWriteRowResponse;
struct ReadModifyWriteRowResponseDefaultTypeInternal;
extern ReadModifyWriteRowResponseDefaultTypeInternal _ReadModifyWriteRowResponse_default_instance_;
class ReadRowsRequest;
struct ReadRowsRequestDefaultTypeInternal;
extern ReadRowsRequestDefaultTypeInternal _ReadRowsRequest_default_instance_;
class ReadRowsResponse;
struct ReadRowsResponseDefaultTypeInternal;
extern ReadRowsResponseDefaultTypeInternal _ReadRowsResponse_default_instance_;
class ReadRowsResponse_CellChunk;
struct ReadRowsResponse_CellChunkDefaultTypeInternal;
extern ReadRowsResponse_CellChunkDefaultTypeInternal _ReadRowsResponse_CellChunk_default_instance_;
class SampleRowKeysRequest;
struct SampleRowKeysRequestDefaultTypeInternal;
extern SampleRowKeysRequestDefaultTypeInternal _SampleRowKeysRequest_default_instance_;
class SampleRowKeysResponse;
struct SampleRowKeysResponseDefaultTypeInternal;
extern SampleRowKeysResponseDefaultTypeInternal _SampleRowKeysResponse_default_instance_;
}  // namespace v2
}  // namespace bigtable
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::bigtable::v2::CheckAndMutateRowRequest* Arena::CreateMaybeMessage<::google::bigtable::v2::CheckAndMutateRowRequest>(Arena*);
template<> ::google::bigtable::v2::CheckAndMutateRowResponse* Arena::CreateMaybeMessage<::google::bigtable::v2::CheckAndMutateRowResponse>(Arena*);
template<> ::google::bigtable::v2::MutateRowRequest* Arena::CreateMaybeMessage<::google::bigtable::v2::MutateRowRequest>(Arena*);
template<> ::google::bigtable::v2::MutateRowResponse* Arena::CreateMaybeMessage<::google::bigtable::v2::MutateRowResponse>(Arena*);
template<> ::google::bigtable::v2::MutateRowsRequest* Arena::CreateMaybeMessage<::google::bigtable::v2::MutateRowsRequest>(Arena*);
template<> ::google::bigtable::v2::MutateRowsRequest_Entry* Arena::CreateMaybeMessage<::google::bigtable::v2::MutateRowsRequest_Entry>(Arena*);
template<> ::google::bigtable::v2::MutateRowsResponse* Arena::CreateMaybeMessage<::google::bigtable::v2::MutateRowsResponse>(Arena*);
template<> ::google::bigtable::v2::MutateRowsResponse_Entry* Arena::CreateMaybeMessage<::google::bigtable::v2::MutateRowsResponse_Entry>(Arena*);
template<> ::google::bigtable::v2::ReadModifyWriteRowRequest* Arena::CreateMaybeMessage<::google::bigtable::v2::ReadModifyWriteRowRequest>(Arena*);
template<> ::google::bigtable::v2::ReadModifyWriteRowResponse* Arena::CreateMaybeMessage<::google::bigtable::v2::ReadModifyWriteRowResponse>(Arena*);
template<> ::google::bigtable::v2::ReadRowsRequest* Arena::CreateMaybeMessage<::google::bigtable::v2::ReadRowsRequest>(Arena*);
template<> ::google::bigtable::v2::ReadRowsResponse* Arena::CreateMaybeMessage<::google::bigtable::v2::ReadRowsResponse>(Arena*);
template<> ::google::bigtable::v2::ReadRowsResponse_CellChunk* Arena::CreateMaybeMessage<::google::bigtable::v2::ReadRowsResponse_CellChunk>(Arena*);
template<> ::google::bigtable::v2::SampleRowKeysRequest* Arena::CreateMaybeMessage<::google::bigtable::v2::SampleRowKeysRequest>(Arena*);
template<> ::google::bigtable::v2::SampleRowKeysResponse* Arena::CreateMaybeMessage<::google::bigtable::v2::SampleRowKeysResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace bigtable {
namespace v2 {

// ===================================================================

class ReadRowsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v2.ReadRowsRequest) */ {
 public:
  inline ReadRowsRequest() : ReadRowsRequest(nullptr) {}
  virtual ~ReadRowsRequest();
  explicit constexpr ReadRowsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadRowsRequest(const ReadRowsRequest& from);
  ReadRowsRequest(ReadRowsRequest&& from) noexcept
    : ReadRowsRequest() {
    *this = ::std::move(from);
  }

  inline ReadRowsRequest& operator=(const ReadRowsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadRowsRequest& operator=(ReadRowsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadRowsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadRowsRequest* internal_default_instance() {
    return reinterpret_cast<const ReadRowsRequest*>(
               &_ReadRowsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ReadRowsRequest& a, ReadRowsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadRowsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadRowsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadRowsRequest* New() const final {
    return CreateMaybeMessage<ReadRowsRequest>(nullptr);
  }

  ReadRowsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadRowsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadRowsRequest& from);
  void MergeFrom(const ReadRowsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadRowsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.v2.ReadRowsRequest";
  }
  protected:
  explicit ReadRowsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fbigtable_2fv2_2fbigtable_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableNameFieldNumber = 1,
    kAppProfileIdFieldNumber = 5,
    kRowsFieldNumber = 2,
    kFilterFieldNumber = 3,
    kRowsLimitFieldNumber = 4,
  };
  // string table_name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_table_name();
  const std::string& table_name() const;
  void set_table_name(const std::string& value);
  void set_table_name(std::string&& value);
  void set_table_name(const char* value);
  void set_table_name(const char* value, size_t size);
  std::string* mutable_table_name();
  std::string* release_table_name();
  void set_allocated_table_name(std::string* table_name);
  private:
  const std::string& _internal_table_name() const;
  void _internal_set_table_name(const std::string& value);
  std::string* _internal_mutable_table_name();
  public:

  // string app_profile_id = 5;
  void clear_app_profile_id();
  const std::string& app_profile_id() const;
  void set_app_profile_id(const std::string& value);
  void set_app_profile_id(std::string&& value);
  void set_app_profile_id(const char* value);
  void set_app_profile_id(const char* value, size_t size);
  std::string* mutable_app_profile_id();
  std::string* release_app_profile_id();
  void set_allocated_app_profile_id(std::string* app_profile_id);
  private:
  const std::string& _internal_app_profile_id() const;
  void _internal_set_app_profile_id(const std::string& value);
  std::string* _internal_mutable_app_profile_id();
  public:

  // .google.bigtable.v2.RowSet rows = 2;
  bool has_rows() const;
  private:
  bool _internal_has_rows() const;
  public:
  void clear_rows();
  const ::google::bigtable::v2::RowSet& rows() const;
  ::google::bigtable::v2::RowSet* release_rows();
  ::google::bigtable::v2::RowSet* mutable_rows();
  void set_allocated_rows(::google::bigtable::v2::RowSet* rows);
  private:
  const ::google::bigtable::v2::RowSet& _internal_rows() const;
  ::google::bigtable::v2::RowSet* _internal_mutable_rows();
  public:
  void unsafe_arena_set_allocated_rows(
      ::google::bigtable::v2::RowSet* rows);
  ::google::bigtable::v2::RowSet* unsafe_arena_release_rows();

  // .google.bigtable.v2.RowFilter filter = 3;
  bool has_filter() const;
  private:
  bool _internal_has_filter() const;
  public:
  void clear_filter();
  const ::google::bigtable::v2::RowFilter& filter() const;
  ::google::bigtable::v2::RowFilter* release_filter();
  ::google::bigtable::v2::RowFilter* mutable_filter();
  void set_allocated_filter(::google::bigtable::v2::RowFilter* filter);
  private:
  const ::google::bigtable::v2::RowFilter& _internal_filter() const;
  ::google::bigtable::v2::RowFilter* _internal_mutable_filter();
  public:
  void unsafe_arena_set_allocated_filter(
      ::google::bigtable::v2::RowFilter* filter);
  ::google::bigtable::v2::RowFilter* unsafe_arena_release_filter();

  // int64 rows_limit = 4;
  void clear_rows_limit();
  ::PROTOBUF_NAMESPACE_ID::int64 rows_limit() const;
  void set_rows_limit(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_rows_limit() const;
  void _internal_set_rows_limit(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:google.bigtable.v2.ReadRowsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_profile_id_;
  ::google::bigtable::v2::RowSet* rows_;
  ::google::bigtable::v2::RowFilter* filter_;
  ::PROTOBUF_NAMESPACE_ID::int64 rows_limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fbigtable_2fv2_2fbigtable_2eproto;
};
// -------------------------------------------------------------------

class ReadRowsResponse_CellChunk PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v2.ReadRowsResponse.CellChunk) */ {
 public:
  inline ReadRowsResponse_CellChunk() : ReadRowsResponse_CellChunk(nullptr) {}
  virtual ~ReadRowsResponse_CellChunk();
  explicit constexpr ReadRowsResponse_CellChunk(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadRowsResponse_CellChunk(const ReadRowsResponse_CellChunk& from);
  ReadRowsResponse_CellChunk(ReadRowsResponse_CellChunk&& from) noexcept
    : ReadRowsResponse_CellChunk() {
    *this = ::std::move(from);
  }

  inline ReadRowsResponse_CellChunk& operator=(const ReadRowsResponse_CellChunk& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadRowsResponse_CellChunk& operator=(ReadRowsResponse_CellChunk&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadRowsResponse_CellChunk& default_instance() {
    return *internal_default_instance();
  }
  enum RowStatusCase {
    kResetRow = 8,
    kCommitRow = 9,
    ROW_STATUS_NOT_SET = 0,
  };

  static inline const ReadRowsResponse_CellChunk* internal_default_instance() {
    return reinterpret_cast<const ReadRowsResponse_CellChunk*>(
               &_ReadRowsResponse_CellChunk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ReadRowsResponse_CellChunk& a, ReadRowsResponse_CellChunk& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadRowsResponse_CellChunk* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadRowsResponse_CellChunk* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadRowsResponse_CellChunk* New() const final {
    return CreateMaybeMessage<ReadRowsResponse_CellChunk>(nullptr);
  }

  ReadRowsResponse_CellChunk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadRowsResponse_CellChunk>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadRowsResponse_CellChunk& from);
  void MergeFrom(const ReadRowsResponse_CellChunk& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadRowsResponse_CellChunk* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.v2.ReadRowsResponse.CellChunk";
  }
  protected:
  explicit ReadRowsResponse_CellChunk(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fbigtable_2fv2_2fbigtable_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 5,
    kRowKeyFieldNumber = 1,
    kValueFieldNumber = 6,
    kFamilyNameFieldNumber = 2,
    kQualifierFieldNumber = 3,
    kTimestampMicrosFieldNumber = 4,
    kValueSizeFieldNumber = 7,
    kResetRowFieldNumber = 8,
    kCommitRowFieldNumber = 9,
  };
  // repeated string labels = 5;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  const std::string& labels(int index) const;
  std::string* mutable_labels(int index);
  void set_labels(int index, const std::string& value);
  void set_labels(int index, std::string&& value);
  void set_labels(int index, const char* value);
  void set_labels(int index, const char* value, size_t size);
  std::string* add_labels();
  void add_labels(const std::string& value);
  void add_labels(std::string&& value);
  void add_labels(const char* value);
  void add_labels(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& labels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_labels();
  private:
  const std::string& _internal_labels(int index) const;
  std::string* _internal_add_labels();
  public:

  // bytes row_key = 1;
  void clear_row_key();
  const std::string& row_key() const;
  void set_row_key(const std::string& value);
  void set_row_key(std::string&& value);
  void set_row_key(const char* value);
  void set_row_key(const void* value, size_t size);
  std::string* mutable_row_key();
  std::string* release_row_key();
  void set_allocated_row_key(std::string* row_key);
  private:
  const std::string& _internal_row_key() const;
  void _internal_set_row_key(const std::string& value);
  std::string* _internal_mutable_row_key();
  public:

  // bytes value = 6;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // .google.protobuf.StringValue family_name = 2;
  bool has_family_name() const;
  private:
  bool _internal_has_family_name() const;
  public:
  void clear_family_name();
  const PROTOBUF_NAMESPACE_ID::StringValue& family_name() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_family_name();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_family_name();
  void set_allocated_family_name(PROTOBUF_NAMESPACE_ID::StringValue* family_name);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_family_name() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_family_name();
  public:
  void unsafe_arena_set_allocated_family_name(
      PROTOBUF_NAMESPACE_ID::StringValue* family_name);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_family_name();

  // .google.protobuf.BytesValue qualifier = 3;
  bool has_qualifier() const;
  private:
  bool _internal_has_qualifier() const;
  public:
  void clear_qualifier();
  const PROTOBUF_NAMESPACE_ID::BytesValue& qualifier() const;
  PROTOBUF_NAMESPACE_ID::BytesValue* release_qualifier();
  PROTOBUF_NAMESPACE_ID::BytesValue* mutable_qualifier();
  void set_allocated_qualifier(PROTOBUF_NAMESPACE_ID::BytesValue* qualifier);
  private:
  const PROTOBUF_NAMESPACE_ID::BytesValue& _internal_qualifier() const;
  PROTOBUF_NAMESPACE_ID::BytesValue* _internal_mutable_qualifier();
  public:
  void unsafe_arena_set_allocated_qualifier(
      PROTOBUF_NAMESPACE_ID::BytesValue* qualifier);
  PROTOBUF_NAMESPACE_ID::BytesValue* unsafe_arena_release_qualifier();

  // int64 timestamp_micros = 4;
  void clear_timestamp_micros();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_micros() const;
  void set_timestamp_micros(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp_micros() const;
  void _internal_set_timestamp_micros(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 value_size = 7;
  void clear_value_size();
  ::PROTOBUF_NAMESPACE_ID::int32 value_size() const;
  void set_value_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_value_size() const;
  void _internal_set_value_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool reset_row = 8;
  bool has_reset_row() const;
  private:
  bool _internal_has_reset_row() const;
  public:
  void clear_reset_row();
  bool reset_row() const;
  void set_reset_row(bool value);
  private:
  bool _internal_reset_row() const;
  void _internal_set_reset_row(bool value);
  public:

  // bool commit_row = 9;
  bool has_commit_row() const;
  private:
  bool _internal_has_commit_row() const;
  public:
  void clear_commit_row();
  bool commit_row() const;
  void set_commit_row(bool value);
  private:
  bool _internal_commit_row() const;
  void _internal_set_commit_row(bool value);
  public:

  void clear_row_status();
  RowStatusCase row_status_case() const;
  // @@protoc_insertion_point(class_scope:google.bigtable.v2.ReadRowsResponse.CellChunk)
 private:
  class _Internal;
  void set_has_reset_row();
  void set_has_commit_row();

  inline bool has_row_status() const;
  inline void clear_has_row_status();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> labels_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr row_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  PROTOBUF_NAMESPACE_ID::StringValue* family_name_;
  PROTOBUF_NAMESPACE_ID::BytesValue* qualifier_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_micros_;
  ::PROTOBUF_NAMESPACE_ID::int32 value_size_;
  union RowStatusUnion {
    constexpr RowStatusUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    bool reset_row_;
    bool commit_row_;
  } row_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_google_2fbigtable_2fv2_2fbigtable_2eproto;
};
// -------------------------------------------------------------------

class ReadRowsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v2.ReadRowsResponse) */ {
 public:
  inline ReadRowsResponse() : ReadRowsResponse(nullptr) {}
  virtual ~ReadRowsResponse();
  explicit constexpr ReadRowsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadRowsResponse(const ReadRowsResponse& from);
  ReadRowsResponse(ReadRowsResponse&& from) noexcept
    : ReadRowsResponse() {
    *this = ::std::move(from);
  }

  inline ReadRowsResponse& operator=(const ReadRowsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadRowsResponse& operator=(ReadRowsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadRowsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadRowsResponse* internal_default_instance() {
    return reinterpret_cast<const ReadRowsResponse*>(
               &_ReadRowsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ReadRowsResponse& a, ReadRowsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadRowsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadRowsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadRowsResponse* New() const final {
    return CreateMaybeMessage<ReadRowsResponse>(nullptr);
  }

  ReadRowsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadRowsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadRowsResponse& from);
  void MergeFrom(const ReadRowsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadRowsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.v2.ReadRowsResponse";
  }
  protected:
  explicit ReadRowsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fbigtable_2fv2_2fbigtable_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef ReadRowsResponse_CellChunk CellChunk;

  // accessors -------------------------------------------------------

  enum : int {
    kChunksFieldNumber = 1,
    kLastScannedRowKeyFieldNumber = 2,
  };
  // repeated .google.bigtable.v2.ReadRowsResponse.CellChunk chunks = 1;
  int chunks_size() const;
  private:
  int _internal_chunks_size() const;
  public:
  void clear_chunks();
  ::google::bigtable::v2::ReadRowsResponse_CellChunk* mutable_chunks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::ReadRowsResponse_CellChunk >*
      mutable_chunks();
  private:
  const ::google::bigtable::v2::ReadRowsResponse_CellChunk& _internal_chunks(int index) const;
  ::google::bigtable::v2::ReadRowsResponse_CellChunk* _internal_add_chunks();
  public:
  const ::google::bigtable::v2::ReadRowsResponse_CellChunk& chunks(int index) const;
  ::google::bigtable::v2::ReadRowsResponse_CellChunk* add_chunks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::ReadRowsResponse_CellChunk >&
      chunks() const;

  // bytes last_scanned_row_key = 2;
  void clear_last_scanned_row_key();
  const std::string& last_scanned_row_key() const;
  void set_last_scanned_row_key(const std::string& value);
  void set_last_scanned_row_key(std::string&& value);
  void set_last_scanned_row_key(const char* value);
  void set_last_scanned_row_key(const void* value, size_t size);
  std::string* mutable_last_scanned_row_key();
  std::string* release_last_scanned_row_key();
  void set_allocated_last_scanned_row_key(std::string* last_scanned_row_key);
  private:
  const std::string& _internal_last_scanned_row_key() const;
  void _internal_set_last_scanned_row_key(const std::string& value);
  std::string* _internal_mutable_last_scanned_row_key();
  public:

  // @@protoc_insertion_point(class_scope:google.bigtable.v2.ReadRowsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::ReadRowsResponse_CellChunk > chunks_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_scanned_row_key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fbigtable_2fv2_2fbigtable_2eproto;
};
// -------------------------------------------------------------------

class SampleRowKeysRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v2.SampleRowKeysRequest) */ {
 public:
  inline SampleRowKeysRequest() : SampleRowKeysRequest(nullptr) {}
  virtual ~SampleRowKeysRequest();
  explicit constexpr SampleRowKeysRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SampleRowKeysRequest(const SampleRowKeysRequest& from);
  SampleRowKeysRequest(SampleRowKeysRequest&& from) noexcept
    : SampleRowKeysRequest() {
    *this = ::std::move(from);
  }

  inline SampleRowKeysRequest& operator=(const SampleRowKeysRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SampleRowKeysRequest& operator=(SampleRowKeysRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SampleRowKeysRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SampleRowKeysRequest* internal_default_instance() {
    return reinterpret_cast<const SampleRowKeysRequest*>(
               &_SampleRowKeysRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SampleRowKeysRequest& a, SampleRowKeysRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SampleRowKeysRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SampleRowKeysRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SampleRowKeysRequest* New() const final {
    return CreateMaybeMessage<SampleRowKeysRequest>(nullptr);
  }

  SampleRowKeysRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SampleRowKeysRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SampleRowKeysRequest& from);
  void MergeFrom(const SampleRowKeysRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SampleRowKeysRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.v2.SampleRowKeysRequest";
  }
  protected:
  explicit SampleRowKeysRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fbigtable_2fv2_2fbigtable_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableNameFieldNumber = 1,
    kAppProfileIdFieldNumber = 2,
  };
  // string table_name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_table_name();
  const std::string& table_name() const;
  void set_table_name(const std::string& value);
  void set_table_name(std::string&& value);
  void set_table_name(const char* value);
  void set_table_name(const char* value, size_t size);
  std::string* mutable_table_name();
  std::string* release_table_name();
  void set_allocated_table_name(std::string* table_name);
  private:
  const std::string& _internal_table_name() const;
  void _internal_set_table_name(const std::string& value);
  std::string* _internal_mutable_table_name();
  public:

  // string app_profile_id = 2;
  void clear_app_profile_id();
  const std::string& app_profile_id() const;
  void set_app_profile_id(const std::string& value);
  void set_app_profile_id(std::string&& value);
  void set_app_profile_id(const char* value);
  void set_app_profile_id(const char* value, size_t size);
  std::string* mutable_app_profile_id();
  std::string* release_app_profile_id();
  void set_allocated_app_profile_id(std::string* app_profile_id);
  private:
  const std::string& _internal_app_profile_id() const;
  void _internal_set_app_profile_id(const std::string& value);
  std::string* _internal_mutable_app_profile_id();
  public:

  // @@protoc_insertion_point(class_scope:google.bigtable.v2.SampleRowKeysRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_profile_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fbigtable_2fv2_2fbigtable_2eproto;
};
// -------------------------------------------------------------------

class SampleRowKeysResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v2.SampleRowKeysResponse) */ {
 public:
  inline SampleRowKeysResponse() : SampleRowKeysResponse(nullptr) {}
  virtual ~SampleRowKeysResponse();
  explicit constexpr SampleRowKeysResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SampleRowKeysResponse(const SampleRowKeysResponse& from);
  SampleRowKeysResponse(SampleRowKeysResponse&& from) noexcept
    : SampleRowKeysResponse() {
    *this = ::std::move(from);
  }

  inline SampleRowKeysResponse& operator=(const SampleRowKeysResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SampleRowKeysResponse& operator=(SampleRowKeysResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SampleRowKeysResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SampleRowKeysResponse* internal_default_instance() {
    return reinterpret_cast<const SampleRowKeysResponse*>(
               &_SampleRowKeysResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SampleRowKeysResponse& a, SampleRowKeysResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SampleRowKeysResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SampleRowKeysResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SampleRowKeysResponse* New() const final {
    return CreateMaybeMessage<SampleRowKeysResponse>(nullptr);
  }

  SampleRowKeysResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SampleRowKeysResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SampleRowKeysResponse& from);
  void MergeFrom(const SampleRowKeysResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SampleRowKeysResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.v2.SampleRowKeysResponse";
  }
  protected:
  explicit SampleRowKeysResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fbigtable_2fv2_2fbigtable_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowKeyFieldNumber = 1,
    kOffsetBytesFieldNumber = 2,
  };
  // bytes row_key = 1;
  void clear_row_key();
  const std::string& row_key() const;
  void set_row_key(const std::string& value);
  void set_row_key(std::string&& value);
  void set_row_key(const char* value);
  void set_row_key(const void* value, size_t size);
  std::string* mutable_row_key();
  std::string* release_row_key();
  void set_allocated_row_key(std::string* row_key);
  private:
  const std::string& _internal_row_key() const;
  void _internal_set_row_key(const std::string& value);
  std::string* _internal_mutable_row_key();
  public:

  // int64 offset_bytes = 2;
  void clear_offset_bytes();
  ::PROTOBUF_NAMESPACE_ID::int64 offset_bytes() const;
  void set_offset_bytes(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_offset_bytes() const;
  void _internal_set_offset_bytes(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:google.bigtable.v2.SampleRowKeysResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr row_key_;
  ::PROTOBUF_NAMESPACE_ID::int64 offset_bytes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fbigtable_2fv2_2fbigtable_2eproto;
};
// -------------------------------------------------------------------

class MutateRowRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v2.MutateRowRequest) */ {
 public:
  inline MutateRowRequest() : MutateRowRequest(nullptr) {}
  virtual ~MutateRowRequest();
  explicit constexpr MutateRowRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MutateRowRequest(const MutateRowRequest& from);
  MutateRowRequest(MutateRowRequest&& from) noexcept
    : MutateRowRequest() {
    *this = ::std::move(from);
  }

  inline MutateRowRequest& operator=(const MutateRowRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MutateRowRequest& operator=(MutateRowRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MutateRowRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MutateRowRequest* internal_default_instance() {
    return reinterpret_cast<const MutateRowRequest*>(
               &_MutateRowRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MutateRowRequest& a, MutateRowRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MutateRowRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MutateRowRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MutateRowRequest* New() const final {
    return CreateMaybeMessage<MutateRowRequest>(nullptr);
  }

  MutateRowRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MutateRowRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MutateRowRequest& from);
  void MergeFrom(const MutateRowRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MutateRowRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.v2.MutateRowRequest";
  }
  protected:
  explicit MutateRowRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fbigtable_2fv2_2fbigtable_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMutationsFieldNumber = 3,
    kTableNameFieldNumber = 1,
    kRowKeyFieldNumber = 2,
    kAppProfileIdFieldNumber = 4,
  };
  // repeated .google.bigtable.v2.Mutation mutations = 3 [(.google.api.field_behavior) = REQUIRED];
  int mutations_size() const;
  private:
  int _internal_mutations_size() const;
  public:
  void clear_mutations();
  ::google::bigtable::v2::Mutation* mutable_mutations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::Mutation >*
      mutable_mutations();
  private:
  const ::google::bigtable::v2::Mutation& _internal_mutations(int index) const;
  ::google::bigtable::v2::Mutation* _internal_add_mutations();
  public:
  const ::google::bigtable::v2::Mutation& mutations(int index) const;
  ::google::bigtable::v2::Mutation* add_mutations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::Mutation >&
      mutations() const;

  // string table_name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_table_name();
  const std::string& table_name() const;
  void set_table_name(const std::string& value);
  void set_table_name(std::string&& value);
  void set_table_name(const char* value);
  void set_table_name(const char* value, size_t size);
  std::string* mutable_table_name();
  std::string* release_table_name();
  void set_allocated_table_name(std::string* table_name);
  private:
  const std::string& _internal_table_name() const;
  void _internal_set_table_name(const std::string& value);
  std::string* _internal_mutable_table_name();
  public:

  // bytes row_key = 2 [(.google.api.field_behavior) = REQUIRED];
  void clear_row_key();
  const std::string& row_key() const;
  void set_row_key(const std::string& value);
  void set_row_key(std::string&& value);
  void set_row_key(const char* value);
  void set_row_key(const void* value, size_t size);
  std::string* mutable_row_key();
  std::string* release_row_key();
  void set_allocated_row_key(std::string* row_key);
  private:
  const std::string& _internal_row_key() const;
  void _internal_set_row_key(const std::string& value);
  std::string* _internal_mutable_row_key();
  public:

  // string app_profile_id = 4;
  void clear_app_profile_id();
  const std::string& app_profile_id() const;
  void set_app_profile_id(const std::string& value);
  void set_app_profile_id(std::string&& value);
  void set_app_profile_id(const char* value);
  void set_app_profile_id(const char* value, size_t size);
  std::string* mutable_app_profile_id();
  std::string* release_app_profile_id();
  void set_allocated_app_profile_id(std::string* app_profile_id);
  private:
  const std::string& _internal_app_profile_id() const;
  void _internal_set_app_profile_id(const std::string& value);
  std::string* _internal_mutable_app_profile_id();
  public:

  // @@protoc_insertion_point(class_scope:google.bigtable.v2.MutateRowRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::Mutation > mutations_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr row_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_profile_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fbigtable_2fv2_2fbigtable_2eproto;
};
// -------------------------------------------------------------------

class MutateRowResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v2.MutateRowResponse) */ {
 public:
  inline MutateRowResponse() : MutateRowResponse(nullptr) {}
  virtual ~MutateRowResponse();
  explicit constexpr MutateRowResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MutateRowResponse(const MutateRowResponse& from);
  MutateRowResponse(MutateRowResponse&& from) noexcept
    : MutateRowResponse() {
    *this = ::std::move(from);
  }

  inline MutateRowResponse& operator=(const MutateRowResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MutateRowResponse& operator=(MutateRowResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MutateRowResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MutateRowResponse* internal_default_instance() {
    return reinterpret_cast<const MutateRowResponse*>(
               &_MutateRowResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MutateRowResponse& a, MutateRowResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MutateRowResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MutateRowResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MutateRowResponse* New() const final {
    return CreateMaybeMessage<MutateRowResponse>(nullptr);
  }

  MutateRowResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MutateRowResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MutateRowResponse& from);
  void MergeFrom(const MutateRowResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MutateRowResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.v2.MutateRowResponse";
  }
  protected:
  explicit MutateRowResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fbigtable_2fv2_2fbigtable_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:google.bigtable.v2.MutateRowResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fbigtable_2fv2_2fbigtable_2eproto;
};
// -------------------------------------------------------------------

class MutateRowsRequest_Entry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v2.MutateRowsRequest.Entry) */ {
 public:
  inline MutateRowsRequest_Entry() : MutateRowsRequest_Entry(nullptr) {}
  virtual ~MutateRowsRequest_Entry();
  explicit constexpr MutateRowsRequest_Entry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MutateRowsRequest_Entry(const MutateRowsRequest_Entry& from);
  MutateRowsRequest_Entry(MutateRowsRequest_Entry&& from) noexcept
    : MutateRowsRequest_Entry() {
    *this = ::std::move(from);
  }

  inline MutateRowsRequest_Entry& operator=(const MutateRowsRequest_Entry& from) {
    CopyFrom(from);
    return *this;
  }
  inline MutateRowsRequest_Entry& operator=(MutateRowsRequest_Entry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MutateRowsRequest_Entry& default_instance() {
    return *internal_default_instance();
  }
  static inline const MutateRowsRequest_Entry* internal_default_instance() {
    return reinterpret_cast<const MutateRowsRequest_Entry*>(
               &_MutateRowsRequest_Entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MutateRowsRequest_Entry& a, MutateRowsRequest_Entry& b) {
    a.Swap(&b);
  }
  inline void Swap(MutateRowsRequest_Entry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MutateRowsRequest_Entry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MutateRowsRequest_Entry* New() const final {
    return CreateMaybeMessage<MutateRowsRequest_Entry>(nullptr);
  }

  MutateRowsRequest_Entry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MutateRowsRequest_Entry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MutateRowsRequest_Entry& from);
  void MergeFrom(const MutateRowsRequest_Entry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MutateRowsRequest_Entry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.v2.MutateRowsRequest.Entry";
  }
  protected:
  explicit MutateRowsRequest_Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fbigtable_2fv2_2fbigtable_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMutationsFieldNumber = 2,
    kRowKeyFieldNumber = 1,
  };
  // repeated .google.bigtable.v2.Mutation mutations = 2 [(.google.api.field_behavior) = REQUIRED];
  int mutations_size() const;
  private:
  int _internal_mutations_size() const;
  public:
  void clear_mutations();
  ::google::bigtable::v2::Mutation* mutable_mutations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::Mutation >*
      mutable_mutations();
  private:
  const ::google::bigtable::v2::Mutation& _internal_mutations(int index) const;
  ::google::bigtable::v2::Mutation* _internal_add_mutations();
  public:
  const ::google::bigtable::v2::Mutation& mutations(int index) const;
  ::google::bigtable::v2::Mutation* add_mutations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::Mutation >&
      mutations() const;

  // bytes row_key = 1;
  void clear_row_key();
  const std::string& row_key() const;
  void set_row_key(const std::string& value);
  void set_row_key(std::string&& value);
  void set_row_key(const char* value);
  void set_row_key(const void* value, size_t size);
  std::string* mutable_row_key();
  std::string* release_row_key();
  void set_allocated_row_key(std::string* row_key);
  private:
  const std::string& _internal_row_key() const;
  void _internal_set_row_key(const std::string& value);
  std::string* _internal_mutable_row_key();
  public:

  // @@protoc_insertion_point(class_scope:google.bigtable.v2.MutateRowsRequest.Entry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::Mutation > mutations_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr row_key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fbigtable_2fv2_2fbigtable_2eproto;
};
// -------------------------------------------------------------------

class MutateRowsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v2.MutateRowsRequest) */ {
 public:
  inline MutateRowsRequest() : MutateRowsRequest(nullptr) {}
  virtual ~MutateRowsRequest();
  explicit constexpr MutateRowsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MutateRowsRequest(const MutateRowsRequest& from);
  MutateRowsRequest(MutateRowsRequest&& from) noexcept
    : MutateRowsRequest() {
    *this = ::std::move(from);
  }

  inline MutateRowsRequest& operator=(const MutateRowsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MutateRowsRequest& operator=(MutateRowsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MutateRowsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MutateRowsRequest* internal_default_instance() {
    return reinterpret_cast<const MutateRowsRequest*>(
               &_MutateRowsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(MutateRowsRequest& a, MutateRowsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MutateRowsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MutateRowsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MutateRowsRequest* New() const final {
    return CreateMaybeMessage<MutateRowsRequest>(nullptr);
  }

  MutateRowsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MutateRowsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MutateRowsRequest& from);
  void MergeFrom(const MutateRowsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MutateRowsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.v2.MutateRowsRequest";
  }
  protected:
  explicit MutateRowsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fbigtable_2fv2_2fbigtable_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef MutateRowsRequest_Entry Entry;

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 2,
    kTableNameFieldNumber = 1,
    kAppProfileIdFieldNumber = 3,
  };
  // repeated .google.bigtable.v2.MutateRowsRequest.Entry entries = 2 [(.google.api.field_behavior) = REQUIRED];
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::google::bigtable::v2::MutateRowsRequest_Entry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::MutateRowsRequest_Entry >*
      mutable_entries();
  private:
  const ::google::bigtable::v2::MutateRowsRequest_Entry& _internal_entries(int index) const;
  ::google::bigtable::v2::MutateRowsRequest_Entry* _internal_add_entries();
  public:
  const ::google::bigtable::v2::MutateRowsRequest_Entry& entries(int index) const;
  ::google::bigtable::v2::MutateRowsRequest_Entry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::MutateRowsRequest_Entry >&
      entries() const;

  // string table_name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_table_name();
  const std::string& table_name() const;
  void set_table_name(const std::string& value);
  void set_table_name(std::string&& value);
  void set_table_name(const char* value);
  void set_table_name(const char* value, size_t size);
  std::string* mutable_table_name();
  std::string* release_table_name();
  void set_allocated_table_name(std::string* table_name);
  private:
  const std::string& _internal_table_name() const;
  void _internal_set_table_name(const std::string& value);
  std::string* _internal_mutable_table_name();
  public:

  // string app_profile_id = 3;
  void clear_app_profile_id();
  const std::string& app_profile_id() const;
  void set_app_profile_id(const std::string& value);
  void set_app_profile_id(std::string&& value);
  void set_app_profile_id(const char* value);
  void set_app_profile_id(const char* value, size_t size);
  std::string* mutable_app_profile_id();
  std::string* release_app_profile_id();
  void set_allocated_app_profile_id(std::string* app_profile_id);
  private:
  const std::string& _internal_app_profile_id() const;
  void _internal_set_app_profile_id(const std::string& value);
  std::string* _internal_mutable_app_profile_id();
  public:

  // @@protoc_insertion_point(class_scope:google.bigtable.v2.MutateRowsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::MutateRowsRequest_Entry > entries_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_profile_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fbigtable_2fv2_2fbigtable_2eproto;
};
// -------------------------------------------------------------------

class MutateRowsResponse_Entry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v2.MutateRowsResponse.Entry) */ {
 public:
  inline MutateRowsResponse_Entry() : MutateRowsResponse_Entry(nullptr) {}
  virtual ~MutateRowsResponse_Entry();
  explicit constexpr MutateRowsResponse_Entry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MutateRowsResponse_Entry(const MutateRowsResponse_Entry& from);
  MutateRowsResponse_Entry(MutateRowsResponse_Entry&& from) noexcept
    : MutateRowsResponse_Entry() {
    *this = ::std::move(from);
  }

  inline MutateRowsResponse_Entry& operator=(const MutateRowsResponse_Entry& from) {
    CopyFrom(from);
    return *this;
  }
  inline MutateRowsResponse_Entry& operator=(MutateRowsResponse_Entry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MutateRowsResponse_Entry& default_instance() {
    return *internal_default_instance();
  }
  static inline const MutateRowsResponse_Entry* internal_default_instance() {
    return reinterpret_cast<const MutateRowsResponse_Entry*>(
               &_MutateRowsResponse_Entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(MutateRowsResponse_Entry& a, MutateRowsResponse_Entry& b) {
    a.Swap(&b);
  }
  inline void Swap(MutateRowsResponse_Entry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MutateRowsResponse_Entry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MutateRowsResponse_Entry* New() const final {
    return CreateMaybeMessage<MutateRowsResponse_Entry>(nullptr);
  }

  MutateRowsResponse_Entry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MutateRowsResponse_Entry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MutateRowsResponse_Entry& from);
  void MergeFrom(const MutateRowsResponse_Entry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MutateRowsResponse_Entry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.v2.MutateRowsResponse.Entry";
  }
  protected:
  explicit MutateRowsResponse_Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fbigtable_2fv2_2fbigtable_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 2,
    kIndexFieldNumber = 1,
  };
  // .google.rpc.Status status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::google::rpc::Status& status() const;
  ::google::rpc::Status* release_status();
  ::google::rpc::Status* mutable_status();
  void set_allocated_status(::google::rpc::Status* status);
  private:
  const ::google::rpc::Status& _internal_status() const;
  ::google::rpc::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::google::rpc::Status* status);
  ::google::rpc::Status* unsafe_arena_release_status();

  // int64 index = 1;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int64 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:google.bigtable.v2.MutateRowsResponse.Entry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::rpc::Status* status_;
  ::PROTOBUF_NAMESPACE_ID::int64 index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fbigtable_2fv2_2fbigtable_2eproto;
};
// -------------------------------------------------------------------

class MutateRowsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v2.MutateRowsResponse) */ {
 public:
  inline MutateRowsResponse() : MutateRowsResponse(nullptr) {}
  virtual ~MutateRowsResponse();
  explicit constexpr MutateRowsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MutateRowsResponse(const MutateRowsResponse& from);
  MutateRowsResponse(MutateRowsResponse&& from) noexcept
    : MutateRowsResponse() {
    *this = ::std::move(from);
  }

  inline MutateRowsResponse& operator=(const MutateRowsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MutateRowsResponse& operator=(MutateRowsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MutateRowsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MutateRowsResponse* internal_default_instance() {
    return reinterpret_cast<const MutateRowsResponse*>(
               &_MutateRowsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(MutateRowsResponse& a, MutateRowsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MutateRowsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MutateRowsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MutateRowsResponse* New() const final {
    return CreateMaybeMessage<MutateRowsResponse>(nullptr);
  }

  MutateRowsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MutateRowsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MutateRowsResponse& from);
  void MergeFrom(const MutateRowsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MutateRowsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.v2.MutateRowsResponse";
  }
  protected:
  explicit MutateRowsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fbigtable_2fv2_2fbigtable_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef MutateRowsResponse_Entry Entry;

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 1,
  };
  // repeated .google.bigtable.v2.MutateRowsResponse.Entry entries = 1;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::google::bigtable::v2::MutateRowsResponse_Entry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::MutateRowsResponse_Entry >*
      mutable_entries();
  private:
  const ::google::bigtable::v2::MutateRowsResponse_Entry& _internal_entries(int index) const;
  ::google::bigtable::v2::MutateRowsResponse_Entry* _internal_add_entries();
  public:
  const ::google::bigtable::v2::MutateRowsResponse_Entry& entries(int index) const;
  ::google::bigtable::v2::MutateRowsResponse_Entry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::MutateRowsResponse_Entry >&
      entries() const;

  // @@protoc_insertion_point(class_scope:google.bigtable.v2.MutateRowsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::MutateRowsResponse_Entry > entries_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fbigtable_2fv2_2fbigtable_2eproto;
};
// -------------------------------------------------------------------

class CheckAndMutateRowRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v2.CheckAndMutateRowRequest) */ {
 public:
  inline CheckAndMutateRowRequest() : CheckAndMutateRowRequest(nullptr) {}
  virtual ~CheckAndMutateRowRequest();
  explicit constexpr CheckAndMutateRowRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CheckAndMutateRowRequest(const CheckAndMutateRowRequest& from);
  CheckAndMutateRowRequest(CheckAndMutateRowRequest&& from) noexcept
    : CheckAndMutateRowRequest() {
    *this = ::std::move(from);
  }

  inline CheckAndMutateRowRequest& operator=(const CheckAndMutateRowRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckAndMutateRowRequest& operator=(CheckAndMutateRowRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CheckAndMutateRowRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CheckAndMutateRowRequest* internal_default_instance() {
    return reinterpret_cast<const CheckAndMutateRowRequest*>(
               &_CheckAndMutateRowRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CheckAndMutateRowRequest& a, CheckAndMutateRowRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckAndMutateRowRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckAndMutateRowRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CheckAndMutateRowRequest* New() const final {
    return CreateMaybeMessage<CheckAndMutateRowRequest>(nullptr);
  }

  CheckAndMutateRowRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CheckAndMutateRowRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CheckAndMutateRowRequest& from);
  void MergeFrom(const CheckAndMutateRowRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckAndMutateRowRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.v2.CheckAndMutateRowRequest";
  }
  protected:
  explicit CheckAndMutateRowRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fbigtable_2fv2_2fbigtable_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrueMutationsFieldNumber = 4,
    kFalseMutationsFieldNumber = 5,
    kTableNameFieldNumber = 1,
    kRowKeyFieldNumber = 2,
    kAppProfileIdFieldNumber = 7,
    kPredicateFilterFieldNumber = 6,
  };
  // repeated .google.bigtable.v2.Mutation true_mutations = 4;
  int true_mutations_size() const;
  private:
  int _internal_true_mutations_size() const;
  public:
  void clear_true_mutations();
  ::google::bigtable::v2::Mutation* mutable_true_mutations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::Mutation >*
      mutable_true_mutations();
  private:
  const ::google::bigtable::v2::Mutation& _internal_true_mutations(int index) const;
  ::google::bigtable::v2::Mutation* _internal_add_true_mutations();
  public:
  const ::google::bigtable::v2::Mutation& true_mutations(int index) const;
  ::google::bigtable::v2::Mutation* add_true_mutations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::Mutation >&
      true_mutations() const;

  // repeated .google.bigtable.v2.Mutation false_mutations = 5;
  int false_mutations_size() const;
  private:
  int _internal_false_mutations_size() const;
  public:
  void clear_false_mutations();
  ::google::bigtable::v2::Mutation* mutable_false_mutations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::Mutation >*
      mutable_false_mutations();
  private:
  const ::google::bigtable::v2::Mutation& _internal_false_mutations(int index) const;
  ::google::bigtable::v2::Mutation* _internal_add_false_mutations();
  public:
  const ::google::bigtable::v2::Mutation& false_mutations(int index) const;
  ::google::bigtable::v2::Mutation* add_false_mutations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::Mutation >&
      false_mutations() const;

  // string table_name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_table_name();
  const std::string& table_name() const;
  void set_table_name(const std::string& value);
  void set_table_name(std::string&& value);
  void set_table_name(const char* value);
  void set_table_name(const char* value, size_t size);
  std::string* mutable_table_name();
  std::string* release_table_name();
  void set_allocated_table_name(std::string* table_name);
  private:
  const std::string& _internal_table_name() const;
  void _internal_set_table_name(const std::string& value);
  std::string* _internal_mutable_table_name();
  public:

  // bytes row_key = 2 [(.google.api.field_behavior) = REQUIRED];
  void clear_row_key();
  const std::string& row_key() const;
  void set_row_key(const std::string& value);
  void set_row_key(std::string&& value);
  void set_row_key(const char* value);
  void set_row_key(const void* value, size_t size);
  std::string* mutable_row_key();
  std::string* release_row_key();
  void set_allocated_row_key(std::string* row_key);
  private:
  const std::string& _internal_row_key() const;
  void _internal_set_row_key(const std::string& value);
  std::string* _internal_mutable_row_key();
  public:

  // string app_profile_id = 7;
  void clear_app_profile_id();
  const std::string& app_profile_id() const;
  void set_app_profile_id(const std::string& value);
  void set_app_profile_id(std::string&& value);
  void set_app_profile_id(const char* value);
  void set_app_profile_id(const char* value, size_t size);
  std::string* mutable_app_profile_id();
  std::string* release_app_profile_id();
  void set_allocated_app_profile_id(std::string* app_profile_id);
  private:
  const std::string& _internal_app_profile_id() const;
  void _internal_set_app_profile_id(const std::string& value);
  std::string* _internal_mutable_app_profile_id();
  public:

  // .google.bigtable.v2.RowFilter predicate_filter = 6;
  bool has_predicate_filter() const;
  private:
  bool _internal_has_predicate_filter() const;
  public:
  void clear_predicate_filter();
  const ::google::bigtable::v2::RowFilter& predicate_filter() const;
  ::google::bigtable::v2::RowFilter* release_predicate_filter();
  ::google::bigtable::v2::RowFilter* mutable_predicate_filter();
  void set_allocated_predicate_filter(::google::bigtable::v2::RowFilter* predicate_filter);
  private:
  const ::google::bigtable::v2::RowFilter& _internal_predicate_filter() const;
  ::google::bigtable::v2::RowFilter* _internal_mutable_predicate_filter();
  public:
  void unsafe_arena_set_allocated_predicate_filter(
      ::google::bigtable::v2::RowFilter* predicate_filter);
  ::google::bigtable::v2::RowFilter* unsafe_arena_release_predicate_filter();

  // @@protoc_insertion_point(class_scope:google.bigtable.v2.CheckAndMutateRowRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::Mutation > true_mutations_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::Mutation > false_mutations_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr row_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_profile_id_;
  ::google::bigtable::v2::RowFilter* predicate_filter_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fbigtable_2fv2_2fbigtable_2eproto;
};
// -------------------------------------------------------------------

class CheckAndMutateRowResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v2.CheckAndMutateRowResponse) */ {
 public:
  inline CheckAndMutateRowResponse() : CheckAndMutateRowResponse(nullptr) {}
  virtual ~CheckAndMutateRowResponse();
  explicit constexpr CheckAndMutateRowResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CheckAndMutateRowResponse(const CheckAndMutateRowResponse& from);
  CheckAndMutateRowResponse(CheckAndMutateRowResponse&& from) noexcept
    : CheckAndMutateRowResponse() {
    *this = ::std::move(from);
  }

  inline CheckAndMutateRowResponse& operator=(const CheckAndMutateRowResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckAndMutateRowResponse& operator=(CheckAndMutateRowResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CheckAndMutateRowResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CheckAndMutateRowResponse* internal_default_instance() {
    return reinterpret_cast<const CheckAndMutateRowResponse*>(
               &_CheckAndMutateRowResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CheckAndMutateRowResponse& a, CheckAndMutateRowResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckAndMutateRowResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckAndMutateRowResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CheckAndMutateRowResponse* New() const final {
    return CreateMaybeMessage<CheckAndMutateRowResponse>(nullptr);
  }

  CheckAndMutateRowResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CheckAndMutateRowResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CheckAndMutateRowResponse& from);
  void MergeFrom(const CheckAndMutateRowResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckAndMutateRowResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.v2.CheckAndMutateRowResponse";
  }
  protected:
  explicit CheckAndMutateRowResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fbigtable_2fv2_2fbigtable_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPredicateMatchedFieldNumber = 1,
  };
  // bool predicate_matched = 1;
  void clear_predicate_matched();
  bool predicate_matched() const;
  void set_predicate_matched(bool value);
  private:
  bool _internal_predicate_matched() const;
  void _internal_set_predicate_matched(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.bigtable.v2.CheckAndMutateRowResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool predicate_matched_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fbigtable_2fv2_2fbigtable_2eproto;
};
// -------------------------------------------------------------------

class ReadModifyWriteRowRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v2.ReadModifyWriteRowRequest) */ {
 public:
  inline ReadModifyWriteRowRequest() : ReadModifyWriteRowRequest(nullptr) {}
  virtual ~ReadModifyWriteRowRequest();
  explicit constexpr ReadModifyWriteRowRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadModifyWriteRowRequest(const ReadModifyWriteRowRequest& from);
  ReadModifyWriteRowRequest(ReadModifyWriteRowRequest&& from) noexcept
    : ReadModifyWriteRowRequest() {
    *this = ::std::move(from);
  }

  inline ReadModifyWriteRowRequest& operator=(const ReadModifyWriteRowRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadModifyWriteRowRequest& operator=(ReadModifyWriteRowRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadModifyWriteRowRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadModifyWriteRowRequest* internal_default_instance() {
    return reinterpret_cast<const ReadModifyWriteRowRequest*>(
               &_ReadModifyWriteRowRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ReadModifyWriteRowRequest& a, ReadModifyWriteRowRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadModifyWriteRowRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadModifyWriteRowRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadModifyWriteRowRequest* New() const final {
    return CreateMaybeMessage<ReadModifyWriteRowRequest>(nullptr);
  }

  ReadModifyWriteRowRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadModifyWriteRowRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadModifyWriteRowRequest& from);
  void MergeFrom(const ReadModifyWriteRowRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadModifyWriteRowRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.v2.ReadModifyWriteRowRequest";
  }
  protected:
  explicit ReadModifyWriteRowRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fbigtable_2fv2_2fbigtable_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRulesFieldNumber = 3,
    kTableNameFieldNumber = 1,
    kRowKeyFieldNumber = 2,
    kAppProfileIdFieldNumber = 4,
  };
  // repeated .google.bigtable.v2.ReadModifyWriteRule rules = 3 [(.google.api.field_behavior) = REQUIRED];
  int rules_size() const;
  private:
  int _internal_rules_size() const;
  public:
  void clear_rules();
  ::google::bigtable::v2::ReadModifyWriteRule* mutable_rules(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::ReadModifyWriteRule >*
      mutable_rules();
  private:
  const ::google::bigtable::v2::ReadModifyWriteRule& _internal_rules(int index) const;
  ::google::bigtable::v2::ReadModifyWriteRule* _internal_add_rules();
  public:
  const ::google::bigtable::v2::ReadModifyWriteRule& rules(int index) const;
  ::google::bigtable::v2::ReadModifyWriteRule* add_rules();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::ReadModifyWriteRule >&
      rules() const;

  // string table_name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_table_name();
  const std::string& table_name() const;
  void set_table_name(const std::string& value);
  void set_table_name(std::string&& value);
  void set_table_name(const char* value);
  void set_table_name(const char* value, size_t size);
  std::string* mutable_table_name();
  std::string* release_table_name();
  void set_allocated_table_name(std::string* table_name);
  private:
  const std::string& _internal_table_name() const;
  void _internal_set_table_name(const std::string& value);
  std::string* _internal_mutable_table_name();
  public:

  // bytes row_key = 2 [(.google.api.field_behavior) = REQUIRED];
  void clear_row_key();
  const std::string& row_key() const;
  void set_row_key(const std::string& value);
  void set_row_key(std::string&& value);
  void set_row_key(const char* value);
  void set_row_key(const void* value, size_t size);
  std::string* mutable_row_key();
  std::string* release_row_key();
  void set_allocated_row_key(std::string* row_key);
  private:
  const std::string& _internal_row_key() const;
  void _internal_set_row_key(const std::string& value);
  std::string* _internal_mutable_row_key();
  public:

  // string app_profile_id = 4;
  void clear_app_profile_id();
  const std::string& app_profile_id() const;
  void set_app_profile_id(const std::string& value);
  void set_app_profile_id(std::string&& value);
  void set_app_profile_id(const char* value);
  void set_app_profile_id(const char* value, size_t size);
  std::string* mutable_app_profile_id();
  std::string* release_app_profile_id();
  void set_allocated_app_profile_id(std::string* app_profile_id);
  private:
  const std::string& _internal_app_profile_id() const;
  void _internal_set_app_profile_id(const std::string& value);
  std::string* _internal_mutable_app_profile_id();
  public:

  // @@protoc_insertion_point(class_scope:google.bigtable.v2.ReadModifyWriteRowRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::ReadModifyWriteRule > rules_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr row_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_profile_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fbigtable_2fv2_2fbigtable_2eproto;
};
// -------------------------------------------------------------------

class ReadModifyWriteRowResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v2.ReadModifyWriteRowResponse) */ {
 public:
  inline ReadModifyWriteRowResponse() : ReadModifyWriteRowResponse(nullptr) {}
  virtual ~ReadModifyWriteRowResponse();
  explicit constexpr ReadModifyWriteRowResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadModifyWriteRowResponse(const ReadModifyWriteRowResponse& from);
  ReadModifyWriteRowResponse(ReadModifyWriteRowResponse&& from) noexcept
    : ReadModifyWriteRowResponse() {
    *this = ::std::move(from);
  }

  inline ReadModifyWriteRowResponse& operator=(const ReadModifyWriteRowResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadModifyWriteRowResponse& operator=(ReadModifyWriteRowResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadModifyWriteRowResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadModifyWriteRowResponse* internal_default_instance() {
    return reinterpret_cast<const ReadModifyWriteRowResponse*>(
               &_ReadModifyWriteRowResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ReadModifyWriteRowResponse& a, ReadModifyWriteRowResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadModifyWriteRowResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadModifyWriteRowResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadModifyWriteRowResponse* New() const final {
    return CreateMaybeMessage<ReadModifyWriteRowResponse>(nullptr);
  }

  ReadModifyWriteRowResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadModifyWriteRowResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadModifyWriteRowResponse& from);
  void MergeFrom(const ReadModifyWriteRowResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadModifyWriteRowResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.v2.ReadModifyWriteRowResponse";
  }
  protected:
  explicit ReadModifyWriteRowResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fbigtable_2fv2_2fbigtable_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowFieldNumber = 1,
  };
  // .google.bigtable.v2.Row row = 1;
  bool has_row() const;
  private:
  bool _internal_has_row() const;
  public:
  void clear_row();
  const ::google::bigtable::v2::Row& row() const;
  ::google::bigtable::v2::Row* release_row();
  ::google::bigtable::v2::Row* mutable_row();
  void set_allocated_row(::google::bigtable::v2::Row* row);
  private:
  const ::google::bigtable::v2::Row& _internal_row() const;
  ::google::bigtable::v2::Row* _internal_mutable_row();
  public:
  void unsafe_arena_set_allocated_row(
      ::google::bigtable::v2::Row* row);
  ::google::bigtable::v2::Row* unsafe_arena_release_row();

  // @@protoc_insertion_point(class_scope:google.bigtable.v2.ReadModifyWriteRowResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::bigtable::v2::Row* row_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fbigtable_2fv2_2fbigtable_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ReadRowsRequest

// string table_name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ReadRowsRequest::clear_table_name() {
  table_name_.ClearToEmpty();
}
inline const std::string& ReadRowsRequest::table_name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadRowsRequest.table_name)
  return _internal_table_name();
}
inline void ReadRowsRequest::set_table_name(const std::string& value) {
  _internal_set_table_name(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadRowsRequest.table_name)
}
inline std::string* ReadRowsRequest::mutable_table_name() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadRowsRequest.table_name)
  return _internal_mutable_table_name();
}
inline const std::string& ReadRowsRequest::_internal_table_name() const {
  return table_name_.Get();
}
inline void ReadRowsRequest::_internal_set_table_name(const std::string& value) {
  
  table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReadRowsRequest::set_table_name(std::string&& value) {
  
  table_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.v2.ReadRowsRequest.table_name)
}
inline void ReadRowsRequest::set_table_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.ReadRowsRequest.table_name)
}
inline void ReadRowsRequest::set_table_name(const char* value,
    size_t size) {
  
  table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.ReadRowsRequest.table_name)
}
inline std::string* ReadRowsRequest::_internal_mutable_table_name() {
  
  return table_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReadRowsRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ReadRowsRequest.table_name)
  return table_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReadRowsRequest::set_allocated_table_name(std::string* table_name) {
  if (table_name != nullptr) {
    
  } else {
    
  }
  table_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), table_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ReadRowsRequest.table_name)
}

// string app_profile_id = 5;
inline void ReadRowsRequest::clear_app_profile_id() {
  app_profile_id_.ClearToEmpty();
}
inline const std::string& ReadRowsRequest::app_profile_id() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadRowsRequest.app_profile_id)
  return _internal_app_profile_id();
}
inline void ReadRowsRequest::set_app_profile_id(const std::string& value) {
  _internal_set_app_profile_id(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadRowsRequest.app_profile_id)
}
inline std::string* ReadRowsRequest::mutable_app_profile_id() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadRowsRequest.app_profile_id)
  return _internal_mutable_app_profile_id();
}
inline const std::string& ReadRowsRequest::_internal_app_profile_id() const {
  return app_profile_id_.Get();
}
inline void ReadRowsRequest::_internal_set_app_profile_id(const std::string& value) {
  
  app_profile_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReadRowsRequest::set_app_profile_id(std::string&& value) {
  
  app_profile_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.v2.ReadRowsRequest.app_profile_id)
}
inline void ReadRowsRequest::set_app_profile_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  app_profile_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.ReadRowsRequest.app_profile_id)
}
inline void ReadRowsRequest::set_app_profile_id(const char* value,
    size_t size) {
  
  app_profile_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.ReadRowsRequest.app_profile_id)
}
inline std::string* ReadRowsRequest::_internal_mutable_app_profile_id() {
  
  return app_profile_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReadRowsRequest::release_app_profile_id() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ReadRowsRequest.app_profile_id)
  return app_profile_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReadRowsRequest::set_allocated_app_profile_id(std::string* app_profile_id) {
  if (app_profile_id != nullptr) {
    
  } else {
    
  }
  app_profile_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_profile_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ReadRowsRequest.app_profile_id)
}

// .google.bigtable.v2.RowSet rows = 2;
inline bool ReadRowsRequest::_internal_has_rows() const {
  return this != internal_default_instance() && rows_ != nullptr;
}
inline bool ReadRowsRequest::has_rows() const {
  return _internal_has_rows();
}
inline const ::google::bigtable::v2::RowSet& ReadRowsRequest::_internal_rows() const {
  const ::google::bigtable::v2::RowSet* p = rows_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::bigtable::v2::RowSet&>(
      ::google::bigtable::v2::_RowSet_default_instance_);
}
inline const ::google::bigtable::v2::RowSet& ReadRowsRequest::rows() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadRowsRequest.rows)
  return _internal_rows();
}
inline void ReadRowsRequest::unsafe_arena_set_allocated_rows(
    ::google::bigtable::v2::RowSet* rows) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rows_);
  }
  rows_ = rows;
  if (rows) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.v2.ReadRowsRequest.rows)
}
inline ::google::bigtable::v2::RowSet* ReadRowsRequest::release_rows() {
  
  ::google::bigtable::v2::RowSet* temp = rows_;
  rows_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::bigtable::v2::RowSet* ReadRowsRequest::unsafe_arena_release_rows() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ReadRowsRequest.rows)
  
  ::google::bigtable::v2::RowSet* temp = rows_;
  rows_ = nullptr;
  return temp;
}
inline ::google::bigtable::v2::RowSet* ReadRowsRequest::_internal_mutable_rows() {
  
  if (rows_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::bigtable::v2::RowSet>(GetArena());
    rows_ = p;
  }
  return rows_;
}
inline ::google::bigtable::v2::RowSet* ReadRowsRequest::mutable_rows() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadRowsRequest.rows)
  return _internal_mutable_rows();
}
inline void ReadRowsRequest::set_allocated_rows(::google::bigtable::v2::RowSet* rows) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rows_);
  }
  if (rows) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rows)->GetArena();
    if (message_arena != submessage_arena) {
      rows = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rows, submessage_arena);
    }
    
  } else {
    
  }
  rows_ = rows;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ReadRowsRequest.rows)
}

// .google.bigtable.v2.RowFilter filter = 3;
inline bool ReadRowsRequest::_internal_has_filter() const {
  return this != internal_default_instance() && filter_ != nullptr;
}
inline bool ReadRowsRequest::has_filter() const {
  return _internal_has_filter();
}
inline const ::google::bigtable::v2::RowFilter& ReadRowsRequest::_internal_filter() const {
  const ::google::bigtable::v2::RowFilter* p = filter_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::bigtable::v2::RowFilter&>(
      ::google::bigtable::v2::_RowFilter_default_instance_);
}
inline const ::google::bigtable::v2::RowFilter& ReadRowsRequest::filter() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadRowsRequest.filter)
  return _internal_filter();
}
inline void ReadRowsRequest::unsafe_arena_set_allocated_filter(
    ::google::bigtable::v2::RowFilter* filter) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filter_);
  }
  filter_ = filter;
  if (filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.v2.ReadRowsRequest.filter)
}
inline ::google::bigtable::v2::RowFilter* ReadRowsRequest::release_filter() {
  
  ::google::bigtable::v2::RowFilter* temp = filter_;
  filter_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::bigtable::v2::RowFilter* ReadRowsRequest::unsafe_arena_release_filter() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ReadRowsRequest.filter)
  
  ::google::bigtable::v2::RowFilter* temp = filter_;
  filter_ = nullptr;
  return temp;
}
inline ::google::bigtable::v2::RowFilter* ReadRowsRequest::_internal_mutable_filter() {
  
  if (filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::bigtable::v2::RowFilter>(GetArena());
    filter_ = p;
  }
  return filter_;
}
inline ::google::bigtable::v2::RowFilter* ReadRowsRequest::mutable_filter() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadRowsRequest.filter)
  return _internal_mutable_filter();
}
inline void ReadRowsRequest::set_allocated_filter(::google::bigtable::v2::RowFilter* filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(filter_);
  }
  if (filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filter)->GetArena();
    if (message_arena != submessage_arena) {
      filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filter, submessage_arena);
    }
    
  } else {
    
  }
  filter_ = filter;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ReadRowsRequest.filter)
}

// int64 rows_limit = 4;
inline void ReadRowsRequest::clear_rows_limit() {
  rows_limit_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReadRowsRequest::_internal_rows_limit() const {
  return rows_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReadRowsRequest::rows_limit() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadRowsRequest.rows_limit)
  return _internal_rows_limit();
}
inline void ReadRowsRequest::_internal_set_rows_limit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  rows_limit_ = value;
}
inline void ReadRowsRequest::set_rows_limit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_rows_limit(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadRowsRequest.rows_limit)
}

// -------------------------------------------------------------------

// ReadRowsResponse_CellChunk

// bytes row_key = 1;
inline void ReadRowsResponse_CellChunk::clear_row_key() {
  row_key_.ClearToEmpty();
}
inline const std::string& ReadRowsResponse_CellChunk::row_key() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadRowsResponse.CellChunk.row_key)
  return _internal_row_key();
}
inline void ReadRowsResponse_CellChunk::set_row_key(const std::string& value) {
  _internal_set_row_key(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadRowsResponse.CellChunk.row_key)
}
inline std::string* ReadRowsResponse_CellChunk::mutable_row_key() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadRowsResponse.CellChunk.row_key)
  return _internal_mutable_row_key();
}
inline const std::string& ReadRowsResponse_CellChunk::_internal_row_key() const {
  return row_key_.Get();
}
inline void ReadRowsResponse_CellChunk::_internal_set_row_key(const std::string& value) {
  
  row_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReadRowsResponse_CellChunk::set_row_key(std::string&& value) {
  
  row_key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.v2.ReadRowsResponse.CellChunk.row_key)
}
inline void ReadRowsResponse_CellChunk::set_row_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  row_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.ReadRowsResponse.CellChunk.row_key)
}
inline void ReadRowsResponse_CellChunk::set_row_key(const void* value,
    size_t size) {
  
  row_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.ReadRowsResponse.CellChunk.row_key)
}
inline std::string* ReadRowsResponse_CellChunk::_internal_mutable_row_key() {
  
  return row_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReadRowsResponse_CellChunk::release_row_key() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ReadRowsResponse.CellChunk.row_key)
  return row_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReadRowsResponse_CellChunk::set_allocated_row_key(std::string* row_key) {
  if (row_key != nullptr) {
    
  } else {
    
  }
  row_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), row_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ReadRowsResponse.CellChunk.row_key)
}

// .google.protobuf.StringValue family_name = 2;
inline bool ReadRowsResponse_CellChunk::_internal_has_family_name() const {
  return this != internal_default_instance() && family_name_ != nullptr;
}
inline bool ReadRowsResponse_CellChunk::has_family_name() const {
  return _internal_has_family_name();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& ReadRowsResponse_CellChunk::_internal_family_name() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = family_name_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& ReadRowsResponse_CellChunk::family_name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadRowsResponse.CellChunk.family_name)
  return _internal_family_name();
}
inline void ReadRowsResponse_CellChunk::unsafe_arena_set_allocated_family_name(
    PROTOBUF_NAMESPACE_ID::StringValue* family_name) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(family_name_);
  }
  family_name_ = family_name;
  if (family_name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.v2.ReadRowsResponse.CellChunk.family_name)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ReadRowsResponse_CellChunk::release_family_name() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = family_name_;
  family_name_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ReadRowsResponse_CellChunk::unsafe_arena_release_family_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ReadRowsResponse.CellChunk.family_name)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = family_name_;
  family_name_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ReadRowsResponse_CellChunk::_internal_mutable_family_name() {
  
  if (family_name_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    family_name_ = p;
  }
  return family_name_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ReadRowsResponse_CellChunk::mutable_family_name() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadRowsResponse.CellChunk.family_name)
  return _internal_mutable_family_name();
}
inline void ReadRowsResponse_CellChunk::set_allocated_family_name(PROTOBUF_NAMESPACE_ID::StringValue* family_name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(family_name_);
  }
  if (family_name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(family_name)->GetArena();
    if (message_arena != submessage_arena) {
      family_name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, family_name, submessage_arena);
    }
    
  } else {
    
  }
  family_name_ = family_name;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ReadRowsResponse.CellChunk.family_name)
}

// .google.protobuf.BytesValue qualifier = 3;
inline bool ReadRowsResponse_CellChunk::_internal_has_qualifier() const {
  return this != internal_default_instance() && qualifier_ != nullptr;
}
inline bool ReadRowsResponse_CellChunk::has_qualifier() const {
  return _internal_has_qualifier();
}
inline const PROTOBUF_NAMESPACE_ID::BytesValue& ReadRowsResponse_CellChunk::_internal_qualifier() const {
  const PROTOBUF_NAMESPACE_ID::BytesValue* p = qualifier_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::BytesValue&>(
      PROTOBUF_NAMESPACE_ID::_BytesValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::BytesValue& ReadRowsResponse_CellChunk::qualifier() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadRowsResponse.CellChunk.qualifier)
  return _internal_qualifier();
}
inline void ReadRowsResponse_CellChunk::unsafe_arena_set_allocated_qualifier(
    PROTOBUF_NAMESPACE_ID::BytesValue* qualifier) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(qualifier_);
  }
  qualifier_ = qualifier;
  if (qualifier) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.v2.ReadRowsResponse.CellChunk.qualifier)
}
inline PROTOBUF_NAMESPACE_ID::BytesValue* ReadRowsResponse_CellChunk::release_qualifier() {
  
  PROTOBUF_NAMESPACE_ID::BytesValue* temp = qualifier_;
  qualifier_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BytesValue* ReadRowsResponse_CellChunk::unsafe_arena_release_qualifier() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ReadRowsResponse.CellChunk.qualifier)
  
  PROTOBUF_NAMESPACE_ID::BytesValue* temp = qualifier_;
  qualifier_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BytesValue* ReadRowsResponse_CellChunk::_internal_mutable_qualifier() {
  
  if (qualifier_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::BytesValue>(GetArena());
    qualifier_ = p;
  }
  return qualifier_;
}
inline PROTOBUF_NAMESPACE_ID::BytesValue* ReadRowsResponse_CellChunk::mutable_qualifier() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadRowsResponse.CellChunk.qualifier)
  return _internal_mutable_qualifier();
}
inline void ReadRowsResponse_CellChunk::set_allocated_qualifier(PROTOBUF_NAMESPACE_ID::BytesValue* qualifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(qualifier_);
  }
  if (qualifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(qualifier)->GetArena();
    if (message_arena != submessage_arena) {
      qualifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, qualifier, submessage_arena);
    }
    
  } else {
    
  }
  qualifier_ = qualifier;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ReadRowsResponse.CellChunk.qualifier)
}

// int64 timestamp_micros = 4;
inline void ReadRowsResponse_CellChunk::clear_timestamp_micros() {
  timestamp_micros_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReadRowsResponse_CellChunk::_internal_timestamp_micros() const {
  return timestamp_micros_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReadRowsResponse_CellChunk::timestamp_micros() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadRowsResponse.CellChunk.timestamp_micros)
  return _internal_timestamp_micros();
}
inline void ReadRowsResponse_CellChunk::_internal_set_timestamp_micros(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_micros_ = value;
}
inline void ReadRowsResponse_CellChunk::set_timestamp_micros(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp_micros(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadRowsResponse.CellChunk.timestamp_micros)
}

// repeated string labels = 5;
inline int ReadRowsResponse_CellChunk::_internal_labels_size() const {
  return labels_.size();
}
inline int ReadRowsResponse_CellChunk::labels_size() const {
  return _internal_labels_size();
}
inline void ReadRowsResponse_CellChunk::clear_labels() {
  labels_.Clear();
}
inline std::string* ReadRowsResponse_CellChunk::add_labels() {
  // @@protoc_insertion_point(field_add_mutable:google.bigtable.v2.ReadRowsResponse.CellChunk.labels)
  return _internal_add_labels();
}
inline const std::string& ReadRowsResponse_CellChunk::_internal_labels(int index) const {
  return labels_.Get(index);
}
inline const std::string& ReadRowsResponse_CellChunk::labels(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadRowsResponse.CellChunk.labels)
  return _internal_labels(index);
}
inline std::string* ReadRowsResponse_CellChunk::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadRowsResponse.CellChunk.labels)
  return labels_.Mutable(index);
}
inline void ReadRowsResponse_CellChunk::set_labels(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadRowsResponse.CellChunk.labels)
  labels_.Mutable(index)->assign(value);
}
inline void ReadRowsResponse_CellChunk::set_labels(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadRowsResponse.CellChunk.labels)
  labels_.Mutable(index)->assign(std::move(value));
}
inline void ReadRowsResponse_CellChunk::set_labels(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  labels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.ReadRowsResponse.CellChunk.labels)
}
inline void ReadRowsResponse_CellChunk::set_labels(int index, const char* value, size_t size) {
  labels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.ReadRowsResponse.CellChunk.labels)
}
inline std::string* ReadRowsResponse_CellChunk::_internal_add_labels() {
  return labels_.Add();
}
inline void ReadRowsResponse_CellChunk::add_labels(const std::string& value) {
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.bigtable.v2.ReadRowsResponse.CellChunk.labels)
}
inline void ReadRowsResponse_CellChunk::add_labels(std::string&& value) {
  labels_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.bigtable.v2.ReadRowsResponse.CellChunk.labels)
}
inline void ReadRowsResponse_CellChunk::add_labels(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.bigtable.v2.ReadRowsResponse.CellChunk.labels)
}
inline void ReadRowsResponse_CellChunk::add_labels(const char* value, size_t size) {
  labels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.bigtable.v2.ReadRowsResponse.CellChunk.labels)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ReadRowsResponse_CellChunk::labels() const {
  // @@protoc_insertion_point(field_list:google.bigtable.v2.ReadRowsResponse.CellChunk.labels)
  return labels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ReadRowsResponse_CellChunk::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.v2.ReadRowsResponse.CellChunk.labels)
  return &labels_;
}

// bytes value = 6;
inline void ReadRowsResponse_CellChunk::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& ReadRowsResponse_CellChunk::value() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadRowsResponse.CellChunk.value)
  return _internal_value();
}
inline void ReadRowsResponse_CellChunk::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadRowsResponse.CellChunk.value)
}
inline std::string* ReadRowsResponse_CellChunk::mutable_value() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadRowsResponse.CellChunk.value)
  return _internal_mutable_value();
}
inline const std::string& ReadRowsResponse_CellChunk::_internal_value() const {
  return value_.Get();
}
inline void ReadRowsResponse_CellChunk::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReadRowsResponse_CellChunk::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.v2.ReadRowsResponse.CellChunk.value)
}
inline void ReadRowsResponse_CellChunk::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.ReadRowsResponse.CellChunk.value)
}
inline void ReadRowsResponse_CellChunk::set_value(const void* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.ReadRowsResponse.CellChunk.value)
}
inline std::string* ReadRowsResponse_CellChunk::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReadRowsResponse_CellChunk::release_value() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ReadRowsResponse.CellChunk.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReadRowsResponse_CellChunk::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ReadRowsResponse.CellChunk.value)
}

// int32 value_size = 7;
inline void ReadRowsResponse_CellChunk::clear_value_size() {
  value_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReadRowsResponse_CellChunk::_internal_value_size() const {
  return value_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReadRowsResponse_CellChunk::value_size() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadRowsResponse.CellChunk.value_size)
  return _internal_value_size();
}
inline void ReadRowsResponse_CellChunk::_internal_set_value_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  value_size_ = value;
}
inline void ReadRowsResponse_CellChunk::set_value_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_value_size(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadRowsResponse.CellChunk.value_size)
}

// bool reset_row = 8;
inline bool ReadRowsResponse_CellChunk::_internal_has_reset_row() const {
  return row_status_case() == kResetRow;
}
inline bool ReadRowsResponse_CellChunk::has_reset_row() const {
  return _internal_has_reset_row();
}
inline void ReadRowsResponse_CellChunk::set_has_reset_row() {
  _oneof_case_[0] = kResetRow;
}
inline void ReadRowsResponse_CellChunk::clear_reset_row() {
  if (_internal_has_reset_row()) {
    row_status_.reset_row_ = false;
    clear_has_row_status();
  }
}
inline bool ReadRowsResponse_CellChunk::_internal_reset_row() const {
  if (_internal_has_reset_row()) {
    return row_status_.reset_row_;
  }
  return false;
}
inline void ReadRowsResponse_CellChunk::_internal_set_reset_row(bool value) {
  if (!_internal_has_reset_row()) {
    clear_row_status();
    set_has_reset_row();
  }
  row_status_.reset_row_ = value;
}
inline bool ReadRowsResponse_CellChunk::reset_row() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadRowsResponse.CellChunk.reset_row)
  return _internal_reset_row();
}
inline void ReadRowsResponse_CellChunk::set_reset_row(bool value) {
  _internal_set_reset_row(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadRowsResponse.CellChunk.reset_row)
}

// bool commit_row = 9;
inline bool ReadRowsResponse_CellChunk::_internal_has_commit_row() const {
  return row_status_case() == kCommitRow;
}
inline bool ReadRowsResponse_CellChunk::has_commit_row() const {
  return _internal_has_commit_row();
}
inline void ReadRowsResponse_CellChunk::set_has_commit_row() {
  _oneof_case_[0] = kCommitRow;
}
inline void ReadRowsResponse_CellChunk::clear_commit_row() {
  if (_internal_has_commit_row()) {
    row_status_.commit_row_ = false;
    clear_has_row_status();
  }
}
inline bool ReadRowsResponse_CellChunk::_internal_commit_row() const {
  if (_internal_has_commit_row()) {
    return row_status_.commit_row_;
  }
  return false;
}
inline void ReadRowsResponse_CellChunk::_internal_set_commit_row(bool value) {
  if (!_internal_has_commit_row()) {
    clear_row_status();
    set_has_commit_row();
  }
  row_status_.commit_row_ = value;
}
inline bool ReadRowsResponse_CellChunk::commit_row() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadRowsResponse.CellChunk.commit_row)
  return _internal_commit_row();
}
inline void ReadRowsResponse_CellChunk::set_commit_row(bool value) {
  _internal_set_commit_row(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadRowsResponse.CellChunk.commit_row)
}

inline bool ReadRowsResponse_CellChunk::has_row_status() const {
  return row_status_case() != ROW_STATUS_NOT_SET;
}
inline void ReadRowsResponse_CellChunk::clear_has_row_status() {
  _oneof_case_[0] = ROW_STATUS_NOT_SET;
}
inline ReadRowsResponse_CellChunk::RowStatusCase ReadRowsResponse_CellChunk::row_status_case() const {
  return ReadRowsResponse_CellChunk::RowStatusCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ReadRowsResponse

// repeated .google.bigtable.v2.ReadRowsResponse.CellChunk chunks = 1;
inline int ReadRowsResponse::_internal_chunks_size() const {
  return chunks_.size();
}
inline int ReadRowsResponse::chunks_size() const {
  return _internal_chunks_size();
}
inline void ReadRowsResponse::clear_chunks() {
  chunks_.Clear();
}
inline ::google::bigtable::v2::ReadRowsResponse_CellChunk* ReadRowsResponse::mutable_chunks(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadRowsResponse.chunks)
  return chunks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::ReadRowsResponse_CellChunk >*
ReadRowsResponse::mutable_chunks() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.v2.ReadRowsResponse.chunks)
  return &chunks_;
}
inline const ::google::bigtable::v2::ReadRowsResponse_CellChunk& ReadRowsResponse::_internal_chunks(int index) const {
  return chunks_.Get(index);
}
inline const ::google::bigtable::v2::ReadRowsResponse_CellChunk& ReadRowsResponse::chunks(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadRowsResponse.chunks)
  return _internal_chunks(index);
}
inline ::google::bigtable::v2::ReadRowsResponse_CellChunk* ReadRowsResponse::_internal_add_chunks() {
  return chunks_.Add();
}
inline ::google::bigtable::v2::ReadRowsResponse_CellChunk* ReadRowsResponse::add_chunks() {
  // @@protoc_insertion_point(field_add:google.bigtable.v2.ReadRowsResponse.chunks)
  return _internal_add_chunks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::ReadRowsResponse_CellChunk >&
ReadRowsResponse::chunks() const {
  // @@protoc_insertion_point(field_list:google.bigtable.v2.ReadRowsResponse.chunks)
  return chunks_;
}

// bytes last_scanned_row_key = 2;
inline void ReadRowsResponse::clear_last_scanned_row_key() {
  last_scanned_row_key_.ClearToEmpty();
}
inline const std::string& ReadRowsResponse::last_scanned_row_key() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadRowsResponse.last_scanned_row_key)
  return _internal_last_scanned_row_key();
}
inline void ReadRowsResponse::set_last_scanned_row_key(const std::string& value) {
  _internal_set_last_scanned_row_key(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadRowsResponse.last_scanned_row_key)
}
inline std::string* ReadRowsResponse::mutable_last_scanned_row_key() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadRowsResponse.last_scanned_row_key)
  return _internal_mutable_last_scanned_row_key();
}
inline const std::string& ReadRowsResponse::_internal_last_scanned_row_key() const {
  return last_scanned_row_key_.Get();
}
inline void ReadRowsResponse::_internal_set_last_scanned_row_key(const std::string& value) {
  
  last_scanned_row_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReadRowsResponse::set_last_scanned_row_key(std::string&& value) {
  
  last_scanned_row_key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.v2.ReadRowsResponse.last_scanned_row_key)
}
inline void ReadRowsResponse::set_last_scanned_row_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  last_scanned_row_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.ReadRowsResponse.last_scanned_row_key)
}
inline void ReadRowsResponse::set_last_scanned_row_key(const void* value,
    size_t size) {
  
  last_scanned_row_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.ReadRowsResponse.last_scanned_row_key)
}
inline std::string* ReadRowsResponse::_internal_mutable_last_scanned_row_key() {
  
  return last_scanned_row_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReadRowsResponse::release_last_scanned_row_key() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ReadRowsResponse.last_scanned_row_key)
  return last_scanned_row_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReadRowsResponse::set_allocated_last_scanned_row_key(std::string* last_scanned_row_key) {
  if (last_scanned_row_key != nullptr) {
    
  } else {
    
  }
  last_scanned_row_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_scanned_row_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ReadRowsResponse.last_scanned_row_key)
}

// -------------------------------------------------------------------

// SampleRowKeysRequest

// string table_name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void SampleRowKeysRequest::clear_table_name() {
  table_name_.ClearToEmpty();
}
inline const std::string& SampleRowKeysRequest::table_name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.SampleRowKeysRequest.table_name)
  return _internal_table_name();
}
inline void SampleRowKeysRequest::set_table_name(const std::string& value) {
  _internal_set_table_name(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.SampleRowKeysRequest.table_name)
}
inline std::string* SampleRowKeysRequest::mutable_table_name() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.SampleRowKeysRequest.table_name)
  return _internal_mutable_table_name();
}
inline const std::string& SampleRowKeysRequest::_internal_table_name() const {
  return table_name_.Get();
}
inline void SampleRowKeysRequest::_internal_set_table_name(const std::string& value) {
  
  table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SampleRowKeysRequest::set_table_name(std::string&& value) {
  
  table_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.v2.SampleRowKeysRequest.table_name)
}
inline void SampleRowKeysRequest::set_table_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.SampleRowKeysRequest.table_name)
}
inline void SampleRowKeysRequest::set_table_name(const char* value,
    size_t size) {
  
  table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.SampleRowKeysRequest.table_name)
}
inline std::string* SampleRowKeysRequest::_internal_mutable_table_name() {
  
  return table_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SampleRowKeysRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.SampleRowKeysRequest.table_name)
  return table_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SampleRowKeysRequest::set_allocated_table_name(std::string* table_name) {
  if (table_name != nullptr) {
    
  } else {
    
  }
  table_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), table_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.SampleRowKeysRequest.table_name)
}

// string app_profile_id = 2;
inline void SampleRowKeysRequest::clear_app_profile_id() {
  app_profile_id_.ClearToEmpty();
}
inline const std::string& SampleRowKeysRequest::app_profile_id() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.SampleRowKeysRequest.app_profile_id)
  return _internal_app_profile_id();
}
inline void SampleRowKeysRequest::set_app_profile_id(const std::string& value) {
  _internal_set_app_profile_id(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.SampleRowKeysRequest.app_profile_id)
}
inline std::string* SampleRowKeysRequest::mutable_app_profile_id() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.SampleRowKeysRequest.app_profile_id)
  return _internal_mutable_app_profile_id();
}
inline const std::string& SampleRowKeysRequest::_internal_app_profile_id() const {
  return app_profile_id_.Get();
}
inline void SampleRowKeysRequest::_internal_set_app_profile_id(const std::string& value) {
  
  app_profile_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SampleRowKeysRequest::set_app_profile_id(std::string&& value) {
  
  app_profile_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.v2.SampleRowKeysRequest.app_profile_id)
}
inline void SampleRowKeysRequest::set_app_profile_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  app_profile_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.SampleRowKeysRequest.app_profile_id)
}
inline void SampleRowKeysRequest::set_app_profile_id(const char* value,
    size_t size) {
  
  app_profile_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.SampleRowKeysRequest.app_profile_id)
}
inline std::string* SampleRowKeysRequest::_internal_mutable_app_profile_id() {
  
  return app_profile_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SampleRowKeysRequest::release_app_profile_id() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.SampleRowKeysRequest.app_profile_id)
  return app_profile_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SampleRowKeysRequest::set_allocated_app_profile_id(std::string* app_profile_id) {
  if (app_profile_id != nullptr) {
    
  } else {
    
  }
  app_profile_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_profile_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.SampleRowKeysRequest.app_profile_id)
}

// -------------------------------------------------------------------

// SampleRowKeysResponse

// bytes row_key = 1;
inline void SampleRowKeysResponse::clear_row_key() {
  row_key_.ClearToEmpty();
}
inline const std::string& SampleRowKeysResponse::row_key() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.SampleRowKeysResponse.row_key)
  return _internal_row_key();
}
inline void SampleRowKeysResponse::set_row_key(const std::string& value) {
  _internal_set_row_key(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.SampleRowKeysResponse.row_key)
}
inline std::string* SampleRowKeysResponse::mutable_row_key() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.SampleRowKeysResponse.row_key)
  return _internal_mutable_row_key();
}
inline const std::string& SampleRowKeysResponse::_internal_row_key() const {
  return row_key_.Get();
}
inline void SampleRowKeysResponse::_internal_set_row_key(const std::string& value) {
  
  row_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SampleRowKeysResponse::set_row_key(std::string&& value) {
  
  row_key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.v2.SampleRowKeysResponse.row_key)
}
inline void SampleRowKeysResponse::set_row_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  row_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.SampleRowKeysResponse.row_key)
}
inline void SampleRowKeysResponse::set_row_key(const void* value,
    size_t size) {
  
  row_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.SampleRowKeysResponse.row_key)
}
inline std::string* SampleRowKeysResponse::_internal_mutable_row_key() {
  
  return row_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SampleRowKeysResponse::release_row_key() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.SampleRowKeysResponse.row_key)
  return row_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SampleRowKeysResponse::set_allocated_row_key(std::string* row_key) {
  if (row_key != nullptr) {
    
  } else {
    
  }
  row_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), row_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.SampleRowKeysResponse.row_key)
}

// int64 offset_bytes = 2;
inline void SampleRowKeysResponse::clear_offset_bytes() {
  offset_bytes_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SampleRowKeysResponse::_internal_offset_bytes() const {
  return offset_bytes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SampleRowKeysResponse::offset_bytes() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.SampleRowKeysResponse.offset_bytes)
  return _internal_offset_bytes();
}
inline void SampleRowKeysResponse::_internal_set_offset_bytes(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  offset_bytes_ = value;
}
inline void SampleRowKeysResponse::set_offset_bytes(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_offset_bytes(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.SampleRowKeysResponse.offset_bytes)
}

// -------------------------------------------------------------------

// MutateRowRequest

// string table_name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void MutateRowRequest::clear_table_name() {
  table_name_.ClearToEmpty();
}
inline const std::string& MutateRowRequest::table_name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.MutateRowRequest.table_name)
  return _internal_table_name();
}
inline void MutateRowRequest::set_table_name(const std::string& value) {
  _internal_set_table_name(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.MutateRowRequest.table_name)
}
inline std::string* MutateRowRequest::mutable_table_name() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.MutateRowRequest.table_name)
  return _internal_mutable_table_name();
}
inline const std::string& MutateRowRequest::_internal_table_name() const {
  return table_name_.Get();
}
inline void MutateRowRequest::_internal_set_table_name(const std::string& value) {
  
  table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MutateRowRequest::set_table_name(std::string&& value) {
  
  table_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.v2.MutateRowRequest.table_name)
}
inline void MutateRowRequest::set_table_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.MutateRowRequest.table_name)
}
inline void MutateRowRequest::set_table_name(const char* value,
    size_t size) {
  
  table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.MutateRowRequest.table_name)
}
inline std::string* MutateRowRequest::_internal_mutable_table_name() {
  
  return table_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MutateRowRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.MutateRowRequest.table_name)
  return table_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MutateRowRequest::set_allocated_table_name(std::string* table_name) {
  if (table_name != nullptr) {
    
  } else {
    
  }
  table_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), table_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.MutateRowRequest.table_name)
}

// string app_profile_id = 4;
inline void MutateRowRequest::clear_app_profile_id() {
  app_profile_id_.ClearToEmpty();
}
inline const std::string& MutateRowRequest::app_profile_id() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.MutateRowRequest.app_profile_id)
  return _internal_app_profile_id();
}
inline void MutateRowRequest::set_app_profile_id(const std::string& value) {
  _internal_set_app_profile_id(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.MutateRowRequest.app_profile_id)
}
inline std::string* MutateRowRequest::mutable_app_profile_id() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.MutateRowRequest.app_profile_id)
  return _internal_mutable_app_profile_id();
}
inline const std::string& MutateRowRequest::_internal_app_profile_id() const {
  return app_profile_id_.Get();
}
inline void MutateRowRequest::_internal_set_app_profile_id(const std::string& value) {
  
  app_profile_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MutateRowRequest::set_app_profile_id(std::string&& value) {
  
  app_profile_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.v2.MutateRowRequest.app_profile_id)
}
inline void MutateRowRequest::set_app_profile_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  app_profile_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.MutateRowRequest.app_profile_id)
}
inline void MutateRowRequest::set_app_profile_id(const char* value,
    size_t size) {
  
  app_profile_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.MutateRowRequest.app_profile_id)
}
inline std::string* MutateRowRequest::_internal_mutable_app_profile_id() {
  
  return app_profile_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MutateRowRequest::release_app_profile_id() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.MutateRowRequest.app_profile_id)
  return app_profile_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MutateRowRequest::set_allocated_app_profile_id(std::string* app_profile_id) {
  if (app_profile_id != nullptr) {
    
  } else {
    
  }
  app_profile_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_profile_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.MutateRowRequest.app_profile_id)
}

// bytes row_key = 2 [(.google.api.field_behavior) = REQUIRED];
inline void MutateRowRequest::clear_row_key() {
  row_key_.ClearToEmpty();
}
inline const std::string& MutateRowRequest::row_key() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.MutateRowRequest.row_key)
  return _internal_row_key();
}
inline void MutateRowRequest::set_row_key(const std::string& value) {
  _internal_set_row_key(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.MutateRowRequest.row_key)
}
inline std::string* MutateRowRequest::mutable_row_key() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.MutateRowRequest.row_key)
  return _internal_mutable_row_key();
}
inline const std::string& MutateRowRequest::_internal_row_key() const {
  return row_key_.Get();
}
inline void MutateRowRequest::_internal_set_row_key(const std::string& value) {
  
  row_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MutateRowRequest::set_row_key(std::string&& value) {
  
  row_key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.v2.MutateRowRequest.row_key)
}
inline void MutateRowRequest::set_row_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  row_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.MutateRowRequest.row_key)
}
inline void MutateRowRequest::set_row_key(const void* value,
    size_t size) {
  
  row_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.MutateRowRequest.row_key)
}
inline std::string* MutateRowRequest::_internal_mutable_row_key() {
  
  return row_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MutateRowRequest::release_row_key() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.MutateRowRequest.row_key)
  return row_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MutateRowRequest::set_allocated_row_key(std::string* row_key) {
  if (row_key != nullptr) {
    
  } else {
    
  }
  row_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), row_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.MutateRowRequest.row_key)
}

// repeated .google.bigtable.v2.Mutation mutations = 3 [(.google.api.field_behavior) = REQUIRED];
inline int MutateRowRequest::_internal_mutations_size() const {
  return mutations_.size();
}
inline int MutateRowRequest::mutations_size() const {
  return _internal_mutations_size();
}
inline ::google::bigtable::v2::Mutation* MutateRowRequest::mutable_mutations(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.MutateRowRequest.mutations)
  return mutations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::Mutation >*
MutateRowRequest::mutable_mutations() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.v2.MutateRowRequest.mutations)
  return &mutations_;
}
inline const ::google::bigtable::v2::Mutation& MutateRowRequest::_internal_mutations(int index) const {
  return mutations_.Get(index);
}
inline const ::google::bigtable::v2::Mutation& MutateRowRequest::mutations(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.MutateRowRequest.mutations)
  return _internal_mutations(index);
}
inline ::google::bigtable::v2::Mutation* MutateRowRequest::_internal_add_mutations() {
  return mutations_.Add();
}
inline ::google::bigtable::v2::Mutation* MutateRowRequest::add_mutations() {
  // @@protoc_insertion_point(field_add:google.bigtable.v2.MutateRowRequest.mutations)
  return _internal_add_mutations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::Mutation >&
MutateRowRequest::mutations() const {
  // @@protoc_insertion_point(field_list:google.bigtable.v2.MutateRowRequest.mutations)
  return mutations_;
}

// -------------------------------------------------------------------

// MutateRowResponse

// -------------------------------------------------------------------

// MutateRowsRequest_Entry

// bytes row_key = 1;
inline void MutateRowsRequest_Entry::clear_row_key() {
  row_key_.ClearToEmpty();
}
inline const std::string& MutateRowsRequest_Entry::row_key() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.MutateRowsRequest.Entry.row_key)
  return _internal_row_key();
}
inline void MutateRowsRequest_Entry::set_row_key(const std::string& value) {
  _internal_set_row_key(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.MutateRowsRequest.Entry.row_key)
}
inline std::string* MutateRowsRequest_Entry::mutable_row_key() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.MutateRowsRequest.Entry.row_key)
  return _internal_mutable_row_key();
}
inline const std::string& MutateRowsRequest_Entry::_internal_row_key() const {
  return row_key_.Get();
}
inline void MutateRowsRequest_Entry::_internal_set_row_key(const std::string& value) {
  
  row_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MutateRowsRequest_Entry::set_row_key(std::string&& value) {
  
  row_key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.v2.MutateRowsRequest.Entry.row_key)
}
inline void MutateRowsRequest_Entry::set_row_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  row_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.MutateRowsRequest.Entry.row_key)
}
inline void MutateRowsRequest_Entry::set_row_key(const void* value,
    size_t size) {
  
  row_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.MutateRowsRequest.Entry.row_key)
}
inline std::string* MutateRowsRequest_Entry::_internal_mutable_row_key() {
  
  return row_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MutateRowsRequest_Entry::release_row_key() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.MutateRowsRequest.Entry.row_key)
  return row_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MutateRowsRequest_Entry::set_allocated_row_key(std::string* row_key) {
  if (row_key != nullptr) {
    
  } else {
    
  }
  row_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), row_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.MutateRowsRequest.Entry.row_key)
}

// repeated .google.bigtable.v2.Mutation mutations = 2 [(.google.api.field_behavior) = REQUIRED];
inline int MutateRowsRequest_Entry::_internal_mutations_size() const {
  return mutations_.size();
}
inline int MutateRowsRequest_Entry::mutations_size() const {
  return _internal_mutations_size();
}
inline ::google::bigtable::v2::Mutation* MutateRowsRequest_Entry::mutable_mutations(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.MutateRowsRequest.Entry.mutations)
  return mutations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::Mutation >*
MutateRowsRequest_Entry::mutable_mutations() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.v2.MutateRowsRequest.Entry.mutations)
  return &mutations_;
}
inline const ::google::bigtable::v2::Mutation& MutateRowsRequest_Entry::_internal_mutations(int index) const {
  return mutations_.Get(index);
}
inline const ::google::bigtable::v2::Mutation& MutateRowsRequest_Entry::mutations(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.MutateRowsRequest.Entry.mutations)
  return _internal_mutations(index);
}
inline ::google::bigtable::v2::Mutation* MutateRowsRequest_Entry::_internal_add_mutations() {
  return mutations_.Add();
}
inline ::google::bigtable::v2::Mutation* MutateRowsRequest_Entry::add_mutations() {
  // @@protoc_insertion_point(field_add:google.bigtable.v2.MutateRowsRequest.Entry.mutations)
  return _internal_add_mutations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::Mutation >&
MutateRowsRequest_Entry::mutations() const {
  // @@protoc_insertion_point(field_list:google.bigtable.v2.MutateRowsRequest.Entry.mutations)
  return mutations_;
}

// -------------------------------------------------------------------

// MutateRowsRequest

// string table_name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void MutateRowsRequest::clear_table_name() {
  table_name_.ClearToEmpty();
}
inline const std::string& MutateRowsRequest::table_name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.MutateRowsRequest.table_name)
  return _internal_table_name();
}
inline void MutateRowsRequest::set_table_name(const std::string& value) {
  _internal_set_table_name(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.MutateRowsRequest.table_name)
}
inline std::string* MutateRowsRequest::mutable_table_name() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.MutateRowsRequest.table_name)
  return _internal_mutable_table_name();
}
inline const std::string& MutateRowsRequest::_internal_table_name() const {
  return table_name_.Get();
}
inline void MutateRowsRequest::_internal_set_table_name(const std::string& value) {
  
  table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MutateRowsRequest::set_table_name(std::string&& value) {
  
  table_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.v2.MutateRowsRequest.table_name)
}
inline void MutateRowsRequest::set_table_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.MutateRowsRequest.table_name)
}
inline void MutateRowsRequest::set_table_name(const char* value,
    size_t size) {
  
  table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.MutateRowsRequest.table_name)
}
inline std::string* MutateRowsRequest::_internal_mutable_table_name() {
  
  return table_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MutateRowsRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.MutateRowsRequest.table_name)
  return table_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MutateRowsRequest::set_allocated_table_name(std::string* table_name) {
  if (table_name != nullptr) {
    
  } else {
    
  }
  table_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), table_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.MutateRowsRequest.table_name)
}

// string app_profile_id = 3;
inline void MutateRowsRequest::clear_app_profile_id() {
  app_profile_id_.ClearToEmpty();
}
inline const std::string& MutateRowsRequest::app_profile_id() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.MutateRowsRequest.app_profile_id)
  return _internal_app_profile_id();
}
inline void MutateRowsRequest::set_app_profile_id(const std::string& value) {
  _internal_set_app_profile_id(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.MutateRowsRequest.app_profile_id)
}
inline std::string* MutateRowsRequest::mutable_app_profile_id() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.MutateRowsRequest.app_profile_id)
  return _internal_mutable_app_profile_id();
}
inline const std::string& MutateRowsRequest::_internal_app_profile_id() const {
  return app_profile_id_.Get();
}
inline void MutateRowsRequest::_internal_set_app_profile_id(const std::string& value) {
  
  app_profile_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MutateRowsRequest::set_app_profile_id(std::string&& value) {
  
  app_profile_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.v2.MutateRowsRequest.app_profile_id)
}
inline void MutateRowsRequest::set_app_profile_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  app_profile_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.MutateRowsRequest.app_profile_id)
}
inline void MutateRowsRequest::set_app_profile_id(const char* value,
    size_t size) {
  
  app_profile_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.MutateRowsRequest.app_profile_id)
}
inline std::string* MutateRowsRequest::_internal_mutable_app_profile_id() {
  
  return app_profile_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MutateRowsRequest::release_app_profile_id() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.MutateRowsRequest.app_profile_id)
  return app_profile_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MutateRowsRequest::set_allocated_app_profile_id(std::string* app_profile_id) {
  if (app_profile_id != nullptr) {
    
  } else {
    
  }
  app_profile_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_profile_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.MutateRowsRequest.app_profile_id)
}

// repeated .google.bigtable.v2.MutateRowsRequest.Entry entries = 2 [(.google.api.field_behavior) = REQUIRED];
inline int MutateRowsRequest::_internal_entries_size() const {
  return entries_.size();
}
inline int MutateRowsRequest::entries_size() const {
  return _internal_entries_size();
}
inline void MutateRowsRequest::clear_entries() {
  entries_.Clear();
}
inline ::google::bigtable::v2::MutateRowsRequest_Entry* MutateRowsRequest::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.MutateRowsRequest.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::MutateRowsRequest_Entry >*
MutateRowsRequest::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.v2.MutateRowsRequest.entries)
  return &entries_;
}
inline const ::google::bigtable::v2::MutateRowsRequest_Entry& MutateRowsRequest::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const ::google::bigtable::v2::MutateRowsRequest_Entry& MutateRowsRequest::entries(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.MutateRowsRequest.entries)
  return _internal_entries(index);
}
inline ::google::bigtable::v2::MutateRowsRequest_Entry* MutateRowsRequest::_internal_add_entries() {
  return entries_.Add();
}
inline ::google::bigtable::v2::MutateRowsRequest_Entry* MutateRowsRequest::add_entries() {
  // @@protoc_insertion_point(field_add:google.bigtable.v2.MutateRowsRequest.entries)
  return _internal_add_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::MutateRowsRequest_Entry >&
MutateRowsRequest::entries() const {
  // @@protoc_insertion_point(field_list:google.bigtable.v2.MutateRowsRequest.entries)
  return entries_;
}

// -------------------------------------------------------------------

// MutateRowsResponse_Entry

// int64 index = 1;
inline void MutateRowsResponse_Entry::clear_index() {
  index_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MutateRowsResponse_Entry::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MutateRowsResponse_Entry::index() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.MutateRowsResponse.Entry.index)
  return _internal_index();
}
inline void MutateRowsResponse_Entry::_internal_set_index(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  index_ = value;
}
inline void MutateRowsResponse_Entry::set_index(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.MutateRowsResponse.Entry.index)
}

// .google.rpc.Status status = 2;
inline bool MutateRowsResponse_Entry::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MutateRowsResponse_Entry::has_status() const {
  return _internal_has_status();
}
inline const ::google::rpc::Status& MutateRowsResponse_Entry::_internal_status() const {
  const ::google::rpc::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::rpc::Status&>(
      ::google::rpc::_Status_default_instance_);
}
inline const ::google::rpc::Status& MutateRowsResponse_Entry::status() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.MutateRowsResponse.Entry.status)
  return _internal_status();
}
inline void MutateRowsResponse_Entry::unsafe_arena_set_allocated_status(
    ::google::rpc::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.v2.MutateRowsResponse.Entry.status)
}
inline ::google::rpc::Status* MutateRowsResponse_Entry::release_status() {
  
  ::google::rpc::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::rpc::Status* MutateRowsResponse_Entry::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.MutateRowsResponse.Entry.status)
  
  ::google::rpc::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::google::rpc::Status* MutateRowsResponse_Entry::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::rpc::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::google::rpc::Status* MutateRowsResponse_Entry::mutable_status() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.MutateRowsResponse.Entry.status)
  return _internal_mutable_status();
}
inline void MutateRowsResponse_Entry::set_allocated_status(::google::rpc::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.MutateRowsResponse.Entry.status)
}

// -------------------------------------------------------------------

// MutateRowsResponse

// repeated .google.bigtable.v2.MutateRowsResponse.Entry entries = 1;
inline int MutateRowsResponse::_internal_entries_size() const {
  return entries_.size();
}
inline int MutateRowsResponse::entries_size() const {
  return _internal_entries_size();
}
inline void MutateRowsResponse::clear_entries() {
  entries_.Clear();
}
inline ::google::bigtable::v2::MutateRowsResponse_Entry* MutateRowsResponse::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.MutateRowsResponse.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::MutateRowsResponse_Entry >*
MutateRowsResponse::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.v2.MutateRowsResponse.entries)
  return &entries_;
}
inline const ::google::bigtable::v2::MutateRowsResponse_Entry& MutateRowsResponse::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const ::google::bigtable::v2::MutateRowsResponse_Entry& MutateRowsResponse::entries(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.MutateRowsResponse.entries)
  return _internal_entries(index);
}
inline ::google::bigtable::v2::MutateRowsResponse_Entry* MutateRowsResponse::_internal_add_entries() {
  return entries_.Add();
}
inline ::google::bigtable::v2::MutateRowsResponse_Entry* MutateRowsResponse::add_entries() {
  // @@protoc_insertion_point(field_add:google.bigtable.v2.MutateRowsResponse.entries)
  return _internal_add_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::MutateRowsResponse_Entry >&
MutateRowsResponse::entries() const {
  // @@protoc_insertion_point(field_list:google.bigtable.v2.MutateRowsResponse.entries)
  return entries_;
}

// -------------------------------------------------------------------

// CheckAndMutateRowRequest

// string table_name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CheckAndMutateRowRequest::clear_table_name() {
  table_name_.ClearToEmpty();
}
inline const std::string& CheckAndMutateRowRequest::table_name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.CheckAndMutateRowRequest.table_name)
  return _internal_table_name();
}
inline void CheckAndMutateRowRequest::set_table_name(const std::string& value) {
  _internal_set_table_name(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.CheckAndMutateRowRequest.table_name)
}
inline std::string* CheckAndMutateRowRequest::mutable_table_name() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.CheckAndMutateRowRequest.table_name)
  return _internal_mutable_table_name();
}
inline const std::string& CheckAndMutateRowRequest::_internal_table_name() const {
  return table_name_.Get();
}
inline void CheckAndMutateRowRequest::_internal_set_table_name(const std::string& value) {
  
  table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CheckAndMutateRowRequest::set_table_name(std::string&& value) {
  
  table_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.v2.CheckAndMutateRowRequest.table_name)
}
inline void CheckAndMutateRowRequest::set_table_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.CheckAndMutateRowRequest.table_name)
}
inline void CheckAndMutateRowRequest::set_table_name(const char* value,
    size_t size) {
  
  table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.CheckAndMutateRowRequest.table_name)
}
inline std::string* CheckAndMutateRowRequest::_internal_mutable_table_name() {
  
  return table_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CheckAndMutateRowRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.CheckAndMutateRowRequest.table_name)
  return table_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CheckAndMutateRowRequest::set_allocated_table_name(std::string* table_name) {
  if (table_name != nullptr) {
    
  } else {
    
  }
  table_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), table_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.CheckAndMutateRowRequest.table_name)
}

// string app_profile_id = 7;
inline void CheckAndMutateRowRequest::clear_app_profile_id() {
  app_profile_id_.ClearToEmpty();
}
inline const std::string& CheckAndMutateRowRequest::app_profile_id() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.CheckAndMutateRowRequest.app_profile_id)
  return _internal_app_profile_id();
}
inline void CheckAndMutateRowRequest::set_app_profile_id(const std::string& value) {
  _internal_set_app_profile_id(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.CheckAndMutateRowRequest.app_profile_id)
}
inline std::string* CheckAndMutateRowRequest::mutable_app_profile_id() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.CheckAndMutateRowRequest.app_profile_id)
  return _internal_mutable_app_profile_id();
}
inline const std::string& CheckAndMutateRowRequest::_internal_app_profile_id() const {
  return app_profile_id_.Get();
}
inline void CheckAndMutateRowRequest::_internal_set_app_profile_id(const std::string& value) {
  
  app_profile_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CheckAndMutateRowRequest::set_app_profile_id(std::string&& value) {
  
  app_profile_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.v2.CheckAndMutateRowRequest.app_profile_id)
}
inline void CheckAndMutateRowRequest::set_app_profile_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  app_profile_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.CheckAndMutateRowRequest.app_profile_id)
}
inline void CheckAndMutateRowRequest::set_app_profile_id(const char* value,
    size_t size) {
  
  app_profile_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.CheckAndMutateRowRequest.app_profile_id)
}
inline std::string* CheckAndMutateRowRequest::_internal_mutable_app_profile_id() {
  
  return app_profile_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CheckAndMutateRowRequest::release_app_profile_id() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.CheckAndMutateRowRequest.app_profile_id)
  return app_profile_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CheckAndMutateRowRequest::set_allocated_app_profile_id(std::string* app_profile_id) {
  if (app_profile_id != nullptr) {
    
  } else {
    
  }
  app_profile_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_profile_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.CheckAndMutateRowRequest.app_profile_id)
}

// bytes row_key = 2 [(.google.api.field_behavior) = REQUIRED];
inline void CheckAndMutateRowRequest::clear_row_key() {
  row_key_.ClearToEmpty();
}
inline const std::string& CheckAndMutateRowRequest::row_key() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.CheckAndMutateRowRequest.row_key)
  return _internal_row_key();
}
inline void CheckAndMutateRowRequest::set_row_key(const std::string& value) {
  _internal_set_row_key(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.CheckAndMutateRowRequest.row_key)
}
inline std::string* CheckAndMutateRowRequest::mutable_row_key() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.CheckAndMutateRowRequest.row_key)
  return _internal_mutable_row_key();
}
inline const std::string& CheckAndMutateRowRequest::_internal_row_key() const {
  return row_key_.Get();
}
inline void CheckAndMutateRowRequest::_internal_set_row_key(const std::string& value) {
  
  row_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CheckAndMutateRowRequest::set_row_key(std::string&& value) {
  
  row_key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.v2.CheckAndMutateRowRequest.row_key)
}
inline void CheckAndMutateRowRequest::set_row_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  row_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.CheckAndMutateRowRequest.row_key)
}
inline void CheckAndMutateRowRequest::set_row_key(const void* value,
    size_t size) {
  
  row_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.CheckAndMutateRowRequest.row_key)
}
inline std::string* CheckAndMutateRowRequest::_internal_mutable_row_key() {
  
  return row_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CheckAndMutateRowRequest::release_row_key() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.CheckAndMutateRowRequest.row_key)
  return row_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CheckAndMutateRowRequest::set_allocated_row_key(std::string* row_key) {
  if (row_key != nullptr) {
    
  } else {
    
  }
  row_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), row_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.CheckAndMutateRowRequest.row_key)
}

// .google.bigtable.v2.RowFilter predicate_filter = 6;
inline bool CheckAndMutateRowRequest::_internal_has_predicate_filter() const {
  return this != internal_default_instance() && predicate_filter_ != nullptr;
}
inline bool CheckAndMutateRowRequest::has_predicate_filter() const {
  return _internal_has_predicate_filter();
}
inline const ::google::bigtable::v2::RowFilter& CheckAndMutateRowRequest::_internal_predicate_filter() const {
  const ::google::bigtable::v2::RowFilter* p = predicate_filter_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::bigtable::v2::RowFilter&>(
      ::google::bigtable::v2::_RowFilter_default_instance_);
}
inline const ::google::bigtable::v2::RowFilter& CheckAndMutateRowRequest::predicate_filter() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.CheckAndMutateRowRequest.predicate_filter)
  return _internal_predicate_filter();
}
inline void CheckAndMutateRowRequest::unsafe_arena_set_allocated_predicate_filter(
    ::google::bigtable::v2::RowFilter* predicate_filter) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(predicate_filter_);
  }
  predicate_filter_ = predicate_filter;
  if (predicate_filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.v2.CheckAndMutateRowRequest.predicate_filter)
}
inline ::google::bigtable::v2::RowFilter* CheckAndMutateRowRequest::release_predicate_filter() {
  
  ::google::bigtable::v2::RowFilter* temp = predicate_filter_;
  predicate_filter_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::bigtable::v2::RowFilter* CheckAndMutateRowRequest::unsafe_arena_release_predicate_filter() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.CheckAndMutateRowRequest.predicate_filter)
  
  ::google::bigtable::v2::RowFilter* temp = predicate_filter_;
  predicate_filter_ = nullptr;
  return temp;
}
inline ::google::bigtable::v2::RowFilter* CheckAndMutateRowRequest::_internal_mutable_predicate_filter() {
  
  if (predicate_filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::bigtable::v2::RowFilter>(GetArena());
    predicate_filter_ = p;
  }
  return predicate_filter_;
}
inline ::google::bigtable::v2::RowFilter* CheckAndMutateRowRequest::mutable_predicate_filter() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.CheckAndMutateRowRequest.predicate_filter)
  return _internal_mutable_predicate_filter();
}
inline void CheckAndMutateRowRequest::set_allocated_predicate_filter(::google::bigtable::v2::RowFilter* predicate_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(predicate_filter_);
  }
  if (predicate_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(predicate_filter)->GetArena();
    if (message_arena != submessage_arena) {
      predicate_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, predicate_filter, submessage_arena);
    }
    
  } else {
    
  }
  predicate_filter_ = predicate_filter;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.CheckAndMutateRowRequest.predicate_filter)
}

// repeated .google.bigtable.v2.Mutation true_mutations = 4;
inline int CheckAndMutateRowRequest::_internal_true_mutations_size() const {
  return true_mutations_.size();
}
inline int CheckAndMutateRowRequest::true_mutations_size() const {
  return _internal_true_mutations_size();
}
inline ::google::bigtable::v2::Mutation* CheckAndMutateRowRequest::mutable_true_mutations(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.CheckAndMutateRowRequest.true_mutations)
  return true_mutations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::Mutation >*
CheckAndMutateRowRequest::mutable_true_mutations() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.v2.CheckAndMutateRowRequest.true_mutations)
  return &true_mutations_;
}
inline const ::google::bigtable::v2::Mutation& CheckAndMutateRowRequest::_internal_true_mutations(int index) const {
  return true_mutations_.Get(index);
}
inline const ::google::bigtable::v2::Mutation& CheckAndMutateRowRequest::true_mutations(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.CheckAndMutateRowRequest.true_mutations)
  return _internal_true_mutations(index);
}
inline ::google::bigtable::v2::Mutation* CheckAndMutateRowRequest::_internal_add_true_mutations() {
  return true_mutations_.Add();
}
inline ::google::bigtable::v2::Mutation* CheckAndMutateRowRequest::add_true_mutations() {
  // @@protoc_insertion_point(field_add:google.bigtable.v2.CheckAndMutateRowRequest.true_mutations)
  return _internal_add_true_mutations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::Mutation >&
CheckAndMutateRowRequest::true_mutations() const {
  // @@protoc_insertion_point(field_list:google.bigtable.v2.CheckAndMutateRowRequest.true_mutations)
  return true_mutations_;
}

// repeated .google.bigtable.v2.Mutation false_mutations = 5;
inline int CheckAndMutateRowRequest::_internal_false_mutations_size() const {
  return false_mutations_.size();
}
inline int CheckAndMutateRowRequest::false_mutations_size() const {
  return _internal_false_mutations_size();
}
inline ::google::bigtable::v2::Mutation* CheckAndMutateRowRequest::mutable_false_mutations(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.CheckAndMutateRowRequest.false_mutations)
  return false_mutations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::Mutation >*
CheckAndMutateRowRequest::mutable_false_mutations() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.v2.CheckAndMutateRowRequest.false_mutations)
  return &false_mutations_;
}
inline const ::google::bigtable::v2::Mutation& CheckAndMutateRowRequest::_internal_false_mutations(int index) const {
  return false_mutations_.Get(index);
}
inline const ::google::bigtable::v2::Mutation& CheckAndMutateRowRequest::false_mutations(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.CheckAndMutateRowRequest.false_mutations)
  return _internal_false_mutations(index);
}
inline ::google::bigtable::v2::Mutation* CheckAndMutateRowRequest::_internal_add_false_mutations() {
  return false_mutations_.Add();
}
inline ::google::bigtable::v2::Mutation* CheckAndMutateRowRequest::add_false_mutations() {
  // @@protoc_insertion_point(field_add:google.bigtable.v2.CheckAndMutateRowRequest.false_mutations)
  return _internal_add_false_mutations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::Mutation >&
CheckAndMutateRowRequest::false_mutations() const {
  // @@protoc_insertion_point(field_list:google.bigtable.v2.CheckAndMutateRowRequest.false_mutations)
  return false_mutations_;
}

// -------------------------------------------------------------------

// CheckAndMutateRowResponse

// bool predicate_matched = 1;
inline void CheckAndMutateRowResponse::clear_predicate_matched() {
  predicate_matched_ = false;
}
inline bool CheckAndMutateRowResponse::_internal_predicate_matched() const {
  return predicate_matched_;
}
inline bool CheckAndMutateRowResponse::predicate_matched() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.CheckAndMutateRowResponse.predicate_matched)
  return _internal_predicate_matched();
}
inline void CheckAndMutateRowResponse::_internal_set_predicate_matched(bool value) {
  
  predicate_matched_ = value;
}
inline void CheckAndMutateRowResponse::set_predicate_matched(bool value) {
  _internal_set_predicate_matched(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.CheckAndMutateRowResponse.predicate_matched)
}

// -------------------------------------------------------------------

// ReadModifyWriteRowRequest

// string table_name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ReadModifyWriteRowRequest::clear_table_name() {
  table_name_.ClearToEmpty();
}
inline const std::string& ReadModifyWriteRowRequest::table_name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadModifyWriteRowRequest.table_name)
  return _internal_table_name();
}
inline void ReadModifyWriteRowRequest::set_table_name(const std::string& value) {
  _internal_set_table_name(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadModifyWriteRowRequest.table_name)
}
inline std::string* ReadModifyWriteRowRequest::mutable_table_name() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadModifyWriteRowRequest.table_name)
  return _internal_mutable_table_name();
}
inline const std::string& ReadModifyWriteRowRequest::_internal_table_name() const {
  return table_name_.Get();
}
inline void ReadModifyWriteRowRequest::_internal_set_table_name(const std::string& value) {
  
  table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReadModifyWriteRowRequest::set_table_name(std::string&& value) {
  
  table_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.v2.ReadModifyWriteRowRequest.table_name)
}
inline void ReadModifyWriteRowRequest::set_table_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.ReadModifyWriteRowRequest.table_name)
}
inline void ReadModifyWriteRowRequest::set_table_name(const char* value,
    size_t size) {
  
  table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.ReadModifyWriteRowRequest.table_name)
}
inline std::string* ReadModifyWriteRowRequest::_internal_mutable_table_name() {
  
  return table_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReadModifyWriteRowRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ReadModifyWriteRowRequest.table_name)
  return table_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReadModifyWriteRowRequest::set_allocated_table_name(std::string* table_name) {
  if (table_name != nullptr) {
    
  } else {
    
  }
  table_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), table_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ReadModifyWriteRowRequest.table_name)
}

// string app_profile_id = 4;
inline void ReadModifyWriteRowRequest::clear_app_profile_id() {
  app_profile_id_.ClearToEmpty();
}
inline const std::string& ReadModifyWriteRowRequest::app_profile_id() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadModifyWriteRowRequest.app_profile_id)
  return _internal_app_profile_id();
}
inline void ReadModifyWriteRowRequest::set_app_profile_id(const std::string& value) {
  _internal_set_app_profile_id(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadModifyWriteRowRequest.app_profile_id)
}
inline std::string* ReadModifyWriteRowRequest::mutable_app_profile_id() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadModifyWriteRowRequest.app_profile_id)
  return _internal_mutable_app_profile_id();
}
inline const std::string& ReadModifyWriteRowRequest::_internal_app_profile_id() const {
  return app_profile_id_.Get();
}
inline void ReadModifyWriteRowRequest::_internal_set_app_profile_id(const std::string& value) {
  
  app_profile_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReadModifyWriteRowRequest::set_app_profile_id(std::string&& value) {
  
  app_profile_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.v2.ReadModifyWriteRowRequest.app_profile_id)
}
inline void ReadModifyWriteRowRequest::set_app_profile_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  app_profile_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.ReadModifyWriteRowRequest.app_profile_id)
}
inline void ReadModifyWriteRowRequest::set_app_profile_id(const char* value,
    size_t size) {
  
  app_profile_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.ReadModifyWriteRowRequest.app_profile_id)
}
inline std::string* ReadModifyWriteRowRequest::_internal_mutable_app_profile_id() {
  
  return app_profile_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReadModifyWriteRowRequest::release_app_profile_id() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ReadModifyWriteRowRequest.app_profile_id)
  return app_profile_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReadModifyWriteRowRequest::set_allocated_app_profile_id(std::string* app_profile_id) {
  if (app_profile_id != nullptr) {
    
  } else {
    
  }
  app_profile_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_profile_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ReadModifyWriteRowRequest.app_profile_id)
}

// bytes row_key = 2 [(.google.api.field_behavior) = REQUIRED];
inline void ReadModifyWriteRowRequest::clear_row_key() {
  row_key_.ClearToEmpty();
}
inline const std::string& ReadModifyWriteRowRequest::row_key() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadModifyWriteRowRequest.row_key)
  return _internal_row_key();
}
inline void ReadModifyWriteRowRequest::set_row_key(const std::string& value) {
  _internal_set_row_key(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadModifyWriteRowRequest.row_key)
}
inline std::string* ReadModifyWriteRowRequest::mutable_row_key() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadModifyWriteRowRequest.row_key)
  return _internal_mutable_row_key();
}
inline const std::string& ReadModifyWriteRowRequest::_internal_row_key() const {
  return row_key_.Get();
}
inline void ReadModifyWriteRowRequest::_internal_set_row_key(const std::string& value) {
  
  row_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReadModifyWriteRowRequest::set_row_key(std::string&& value) {
  
  row_key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.v2.ReadModifyWriteRowRequest.row_key)
}
inline void ReadModifyWriteRowRequest::set_row_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  row_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.ReadModifyWriteRowRequest.row_key)
}
inline void ReadModifyWriteRowRequest::set_row_key(const void* value,
    size_t size) {
  
  row_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.ReadModifyWriteRowRequest.row_key)
}
inline std::string* ReadModifyWriteRowRequest::_internal_mutable_row_key() {
  
  return row_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReadModifyWriteRowRequest::release_row_key() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ReadModifyWriteRowRequest.row_key)
  return row_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReadModifyWriteRowRequest::set_allocated_row_key(std::string* row_key) {
  if (row_key != nullptr) {
    
  } else {
    
  }
  row_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), row_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ReadModifyWriteRowRequest.row_key)
}

// repeated .google.bigtable.v2.ReadModifyWriteRule rules = 3 [(.google.api.field_behavior) = REQUIRED];
inline int ReadModifyWriteRowRequest::_internal_rules_size() const {
  return rules_.size();
}
inline int ReadModifyWriteRowRequest::rules_size() const {
  return _internal_rules_size();
}
inline ::google::bigtable::v2::ReadModifyWriteRule* ReadModifyWriteRowRequest::mutable_rules(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadModifyWriteRowRequest.rules)
  return rules_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::ReadModifyWriteRule >*
ReadModifyWriteRowRequest::mutable_rules() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.v2.ReadModifyWriteRowRequest.rules)
  return &rules_;
}
inline const ::google::bigtable::v2::ReadModifyWriteRule& ReadModifyWriteRowRequest::_internal_rules(int index) const {
  return rules_.Get(index);
}
inline const ::google::bigtable::v2::ReadModifyWriteRule& ReadModifyWriteRowRequest::rules(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadModifyWriteRowRequest.rules)
  return _internal_rules(index);
}
inline ::google::bigtable::v2::ReadModifyWriteRule* ReadModifyWriteRowRequest::_internal_add_rules() {
  return rules_.Add();
}
inline ::google::bigtable::v2::ReadModifyWriteRule* ReadModifyWriteRowRequest::add_rules() {
  // @@protoc_insertion_point(field_add:google.bigtable.v2.ReadModifyWriteRowRequest.rules)
  return _internal_add_rules();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::ReadModifyWriteRule >&
ReadModifyWriteRowRequest::rules() const {
  // @@protoc_insertion_point(field_list:google.bigtable.v2.ReadModifyWriteRowRequest.rules)
  return rules_;
}

// -------------------------------------------------------------------

// ReadModifyWriteRowResponse

// .google.bigtable.v2.Row row = 1;
inline bool ReadModifyWriteRowResponse::_internal_has_row() const {
  return this != internal_default_instance() && row_ != nullptr;
}
inline bool ReadModifyWriteRowResponse::has_row() const {
  return _internal_has_row();
}
inline const ::google::bigtable::v2::Row& ReadModifyWriteRowResponse::_internal_row() const {
  const ::google::bigtable::v2::Row* p = row_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::bigtable::v2::Row&>(
      ::google::bigtable::v2::_Row_default_instance_);
}
inline const ::google::bigtable::v2::Row& ReadModifyWriteRowResponse::row() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadModifyWriteRowResponse.row)
  return _internal_row();
}
inline void ReadModifyWriteRowResponse::unsafe_arena_set_allocated_row(
    ::google::bigtable::v2::Row* row) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(row_);
  }
  row_ = row;
  if (row) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.v2.ReadModifyWriteRowResponse.row)
}
inline ::google::bigtable::v2::Row* ReadModifyWriteRowResponse::release_row() {
  
  ::google::bigtable::v2::Row* temp = row_;
  row_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::bigtable::v2::Row* ReadModifyWriteRowResponse::unsafe_arena_release_row() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ReadModifyWriteRowResponse.row)
  
  ::google::bigtable::v2::Row* temp = row_;
  row_ = nullptr;
  return temp;
}
inline ::google::bigtable::v2::Row* ReadModifyWriteRowResponse::_internal_mutable_row() {
  
  if (row_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::bigtable::v2::Row>(GetArena());
    row_ = p;
  }
  return row_;
}
inline ::google::bigtable::v2::Row* ReadModifyWriteRowResponse::mutable_row() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadModifyWriteRowResponse.row)
  return _internal_mutable_row();
}
inline void ReadModifyWriteRowResponse::set_allocated_row(::google::bigtable::v2::Row* row) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(row_);
  }
  if (row) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(row)->GetArena();
    if (message_arena != submessage_arena) {
      row = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, row, submessage_arena);
    }
    
  } else {
    
  }
  row_ = row;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ReadModifyWriteRowResponse.row)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace bigtable
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fbigtable_2fv2_2fbigtable_2eproto
