// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/bigtable/v2/bigtable.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fbigtable_2fv2_2fbigtable_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fbigtable_2fv2_2fbigtable_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include "google/api/field_behavior.pb.h"
#include "google/api/resource.pb.h"
#include "google/api/routing.pb.h"
#include "google/bigtable/v2/data.pb.h"
#include "google/bigtable/v2/request_stats.pb.h"
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/wrappers.pb.h>
#include "google/rpc/status.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fbigtable_2fv2_2fbigtable_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fbigtable_2fv2_2fbigtable_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fbigtable_2fv2_2fbigtable_2eproto;
namespace google {
namespace bigtable {
namespace v2 {
class CheckAndMutateRowRequest;
struct CheckAndMutateRowRequestDefaultTypeInternal;
extern CheckAndMutateRowRequestDefaultTypeInternal _CheckAndMutateRowRequest_default_instance_;
class CheckAndMutateRowResponse;
struct CheckAndMutateRowResponseDefaultTypeInternal;
extern CheckAndMutateRowResponseDefaultTypeInternal _CheckAndMutateRowResponse_default_instance_;
class GenerateInitialChangeStreamPartitionsRequest;
struct GenerateInitialChangeStreamPartitionsRequestDefaultTypeInternal;
extern GenerateInitialChangeStreamPartitionsRequestDefaultTypeInternal _GenerateInitialChangeStreamPartitionsRequest_default_instance_;
class GenerateInitialChangeStreamPartitionsResponse;
struct GenerateInitialChangeStreamPartitionsResponseDefaultTypeInternal;
extern GenerateInitialChangeStreamPartitionsResponseDefaultTypeInternal _GenerateInitialChangeStreamPartitionsResponse_default_instance_;
class MutateRowRequest;
struct MutateRowRequestDefaultTypeInternal;
extern MutateRowRequestDefaultTypeInternal _MutateRowRequest_default_instance_;
class MutateRowResponse;
struct MutateRowResponseDefaultTypeInternal;
extern MutateRowResponseDefaultTypeInternal _MutateRowResponse_default_instance_;
class MutateRowsRequest;
struct MutateRowsRequestDefaultTypeInternal;
extern MutateRowsRequestDefaultTypeInternal _MutateRowsRequest_default_instance_;
class MutateRowsRequest_Entry;
struct MutateRowsRequest_EntryDefaultTypeInternal;
extern MutateRowsRequest_EntryDefaultTypeInternal _MutateRowsRequest_Entry_default_instance_;
class MutateRowsResponse;
struct MutateRowsResponseDefaultTypeInternal;
extern MutateRowsResponseDefaultTypeInternal _MutateRowsResponse_default_instance_;
class MutateRowsResponse_Entry;
struct MutateRowsResponse_EntryDefaultTypeInternal;
extern MutateRowsResponse_EntryDefaultTypeInternal _MutateRowsResponse_Entry_default_instance_;
class PingAndWarmRequest;
struct PingAndWarmRequestDefaultTypeInternal;
extern PingAndWarmRequestDefaultTypeInternal _PingAndWarmRequest_default_instance_;
class PingAndWarmResponse;
struct PingAndWarmResponseDefaultTypeInternal;
extern PingAndWarmResponseDefaultTypeInternal _PingAndWarmResponse_default_instance_;
class ReadChangeStreamRequest;
struct ReadChangeStreamRequestDefaultTypeInternal;
extern ReadChangeStreamRequestDefaultTypeInternal _ReadChangeStreamRequest_default_instance_;
class ReadChangeStreamResponse;
struct ReadChangeStreamResponseDefaultTypeInternal;
extern ReadChangeStreamResponseDefaultTypeInternal _ReadChangeStreamResponse_default_instance_;
class ReadChangeStreamResponse_CloseStream;
struct ReadChangeStreamResponse_CloseStreamDefaultTypeInternal;
extern ReadChangeStreamResponse_CloseStreamDefaultTypeInternal _ReadChangeStreamResponse_CloseStream_default_instance_;
class ReadChangeStreamResponse_DataChange;
struct ReadChangeStreamResponse_DataChangeDefaultTypeInternal;
extern ReadChangeStreamResponse_DataChangeDefaultTypeInternal _ReadChangeStreamResponse_DataChange_default_instance_;
class ReadChangeStreamResponse_Heartbeat;
struct ReadChangeStreamResponse_HeartbeatDefaultTypeInternal;
extern ReadChangeStreamResponse_HeartbeatDefaultTypeInternal _ReadChangeStreamResponse_Heartbeat_default_instance_;
class ReadChangeStreamResponse_MutationChunk;
struct ReadChangeStreamResponse_MutationChunkDefaultTypeInternal;
extern ReadChangeStreamResponse_MutationChunkDefaultTypeInternal _ReadChangeStreamResponse_MutationChunk_default_instance_;
class ReadChangeStreamResponse_MutationChunk_ChunkInfo;
struct ReadChangeStreamResponse_MutationChunk_ChunkInfoDefaultTypeInternal;
extern ReadChangeStreamResponse_MutationChunk_ChunkInfoDefaultTypeInternal _ReadChangeStreamResponse_MutationChunk_ChunkInfo_default_instance_;
class ReadModifyWriteRowRequest;
struct ReadModifyWriteRowRequestDefaultTypeInternal;
extern ReadModifyWriteRowRequestDefaultTypeInternal _ReadModifyWriteRowRequest_default_instance_;
class ReadModifyWriteRowResponse;
struct ReadModifyWriteRowResponseDefaultTypeInternal;
extern ReadModifyWriteRowResponseDefaultTypeInternal _ReadModifyWriteRowResponse_default_instance_;
class ReadRowsRequest;
struct ReadRowsRequestDefaultTypeInternal;
extern ReadRowsRequestDefaultTypeInternal _ReadRowsRequest_default_instance_;
class ReadRowsResponse;
struct ReadRowsResponseDefaultTypeInternal;
extern ReadRowsResponseDefaultTypeInternal _ReadRowsResponse_default_instance_;
class ReadRowsResponse_CellChunk;
struct ReadRowsResponse_CellChunkDefaultTypeInternal;
extern ReadRowsResponse_CellChunkDefaultTypeInternal _ReadRowsResponse_CellChunk_default_instance_;
class SampleRowKeysRequest;
struct SampleRowKeysRequestDefaultTypeInternal;
extern SampleRowKeysRequestDefaultTypeInternal _SampleRowKeysRequest_default_instance_;
class SampleRowKeysResponse;
struct SampleRowKeysResponseDefaultTypeInternal;
extern SampleRowKeysResponseDefaultTypeInternal _SampleRowKeysResponse_default_instance_;
}  // namespace v2
}  // namespace bigtable
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::bigtable::v2::CheckAndMutateRowRequest* Arena::CreateMaybeMessage<::google::bigtable::v2::CheckAndMutateRowRequest>(Arena*);
template<> ::google::bigtable::v2::CheckAndMutateRowResponse* Arena::CreateMaybeMessage<::google::bigtable::v2::CheckAndMutateRowResponse>(Arena*);
template<> ::google::bigtable::v2::GenerateInitialChangeStreamPartitionsRequest* Arena::CreateMaybeMessage<::google::bigtable::v2::GenerateInitialChangeStreamPartitionsRequest>(Arena*);
template<> ::google::bigtable::v2::GenerateInitialChangeStreamPartitionsResponse* Arena::CreateMaybeMessage<::google::bigtable::v2::GenerateInitialChangeStreamPartitionsResponse>(Arena*);
template<> ::google::bigtable::v2::MutateRowRequest* Arena::CreateMaybeMessage<::google::bigtable::v2::MutateRowRequest>(Arena*);
template<> ::google::bigtable::v2::MutateRowResponse* Arena::CreateMaybeMessage<::google::bigtable::v2::MutateRowResponse>(Arena*);
template<> ::google::bigtable::v2::MutateRowsRequest* Arena::CreateMaybeMessage<::google::bigtable::v2::MutateRowsRequest>(Arena*);
template<> ::google::bigtable::v2::MutateRowsRequest_Entry* Arena::CreateMaybeMessage<::google::bigtable::v2::MutateRowsRequest_Entry>(Arena*);
template<> ::google::bigtable::v2::MutateRowsResponse* Arena::CreateMaybeMessage<::google::bigtable::v2::MutateRowsResponse>(Arena*);
template<> ::google::bigtable::v2::MutateRowsResponse_Entry* Arena::CreateMaybeMessage<::google::bigtable::v2::MutateRowsResponse_Entry>(Arena*);
template<> ::google::bigtable::v2::PingAndWarmRequest* Arena::CreateMaybeMessage<::google::bigtable::v2::PingAndWarmRequest>(Arena*);
template<> ::google::bigtable::v2::PingAndWarmResponse* Arena::CreateMaybeMessage<::google::bigtable::v2::PingAndWarmResponse>(Arena*);
template<> ::google::bigtable::v2::ReadChangeStreamRequest* Arena::CreateMaybeMessage<::google::bigtable::v2::ReadChangeStreamRequest>(Arena*);
template<> ::google::bigtable::v2::ReadChangeStreamResponse* Arena::CreateMaybeMessage<::google::bigtable::v2::ReadChangeStreamResponse>(Arena*);
template<> ::google::bigtable::v2::ReadChangeStreamResponse_CloseStream* Arena::CreateMaybeMessage<::google::bigtable::v2::ReadChangeStreamResponse_CloseStream>(Arena*);
template<> ::google::bigtable::v2::ReadChangeStreamResponse_DataChange* Arena::CreateMaybeMessage<::google::bigtable::v2::ReadChangeStreamResponse_DataChange>(Arena*);
template<> ::google::bigtable::v2::ReadChangeStreamResponse_Heartbeat* Arena::CreateMaybeMessage<::google::bigtable::v2::ReadChangeStreamResponse_Heartbeat>(Arena*);
template<> ::google::bigtable::v2::ReadChangeStreamResponse_MutationChunk* Arena::CreateMaybeMessage<::google::bigtable::v2::ReadChangeStreamResponse_MutationChunk>(Arena*);
template<> ::google::bigtable::v2::ReadChangeStreamResponse_MutationChunk_ChunkInfo* Arena::CreateMaybeMessage<::google::bigtable::v2::ReadChangeStreamResponse_MutationChunk_ChunkInfo>(Arena*);
template<> ::google::bigtable::v2::ReadModifyWriteRowRequest* Arena::CreateMaybeMessage<::google::bigtable::v2::ReadModifyWriteRowRequest>(Arena*);
template<> ::google::bigtable::v2::ReadModifyWriteRowResponse* Arena::CreateMaybeMessage<::google::bigtable::v2::ReadModifyWriteRowResponse>(Arena*);
template<> ::google::bigtable::v2::ReadRowsRequest* Arena::CreateMaybeMessage<::google::bigtable::v2::ReadRowsRequest>(Arena*);
template<> ::google::bigtable::v2::ReadRowsResponse* Arena::CreateMaybeMessage<::google::bigtable::v2::ReadRowsResponse>(Arena*);
template<> ::google::bigtable::v2::ReadRowsResponse_CellChunk* Arena::CreateMaybeMessage<::google::bigtable::v2::ReadRowsResponse_CellChunk>(Arena*);
template<> ::google::bigtable::v2::SampleRowKeysRequest* Arena::CreateMaybeMessage<::google::bigtable::v2::SampleRowKeysRequest>(Arena*);
template<> ::google::bigtable::v2::SampleRowKeysResponse* Arena::CreateMaybeMessage<::google::bigtable::v2::SampleRowKeysResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace bigtable {
namespace v2 {

enum ReadRowsRequest_RequestStatsView : int {
  ReadRowsRequest_RequestStatsView_REQUEST_STATS_VIEW_UNSPECIFIED = 0,
  ReadRowsRequest_RequestStatsView_REQUEST_STATS_NONE = 1,
  ReadRowsRequest_RequestStatsView_REQUEST_STATS_FULL = 2,
  ReadRowsRequest_RequestStatsView_ReadRowsRequest_RequestStatsView_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ReadRowsRequest_RequestStatsView_ReadRowsRequest_RequestStatsView_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ReadRowsRequest_RequestStatsView_IsValid(int value);
constexpr ReadRowsRequest_RequestStatsView ReadRowsRequest_RequestStatsView_RequestStatsView_MIN = ReadRowsRequest_RequestStatsView_REQUEST_STATS_VIEW_UNSPECIFIED;
constexpr ReadRowsRequest_RequestStatsView ReadRowsRequest_RequestStatsView_RequestStatsView_MAX = ReadRowsRequest_RequestStatsView_REQUEST_STATS_FULL;
constexpr int ReadRowsRequest_RequestStatsView_RequestStatsView_ARRAYSIZE = ReadRowsRequest_RequestStatsView_RequestStatsView_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReadRowsRequest_RequestStatsView_descriptor();
template<typename T>
inline const std::string& ReadRowsRequest_RequestStatsView_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ReadRowsRequest_RequestStatsView>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ReadRowsRequest_RequestStatsView_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ReadRowsRequest_RequestStatsView_descriptor(), enum_t_value);
}
inline bool ReadRowsRequest_RequestStatsView_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ReadRowsRequest_RequestStatsView* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ReadRowsRequest_RequestStatsView>(
    ReadRowsRequest_RequestStatsView_descriptor(), name, value);
}
enum ReadChangeStreamResponse_DataChange_Type : int {
  ReadChangeStreamResponse_DataChange_Type_TYPE_UNSPECIFIED = 0,
  ReadChangeStreamResponse_DataChange_Type_USER = 1,
  ReadChangeStreamResponse_DataChange_Type_GARBAGE_COLLECTION = 2,
  ReadChangeStreamResponse_DataChange_Type_CONTINUATION = 3,
  ReadChangeStreamResponse_DataChange_Type_ReadChangeStreamResponse_DataChange_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ReadChangeStreamResponse_DataChange_Type_ReadChangeStreamResponse_DataChange_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ReadChangeStreamResponse_DataChange_Type_IsValid(int value);
constexpr ReadChangeStreamResponse_DataChange_Type ReadChangeStreamResponse_DataChange_Type_Type_MIN = ReadChangeStreamResponse_DataChange_Type_TYPE_UNSPECIFIED;
constexpr ReadChangeStreamResponse_DataChange_Type ReadChangeStreamResponse_DataChange_Type_Type_MAX = ReadChangeStreamResponse_DataChange_Type_CONTINUATION;
constexpr int ReadChangeStreamResponse_DataChange_Type_Type_ARRAYSIZE = ReadChangeStreamResponse_DataChange_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReadChangeStreamResponse_DataChange_Type_descriptor();
template<typename T>
inline const std::string& ReadChangeStreamResponse_DataChange_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ReadChangeStreamResponse_DataChange_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ReadChangeStreamResponse_DataChange_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ReadChangeStreamResponse_DataChange_Type_descriptor(), enum_t_value);
}
inline bool ReadChangeStreamResponse_DataChange_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ReadChangeStreamResponse_DataChange_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ReadChangeStreamResponse_DataChange_Type>(
    ReadChangeStreamResponse_DataChange_Type_descriptor(), name, value);
}
// ===================================================================

class ReadRowsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v2.ReadRowsRequest) */ {
 public:
  inline ReadRowsRequest() : ReadRowsRequest(nullptr) {}
  ~ReadRowsRequest() override;
  explicit PROTOBUF_CONSTEXPR ReadRowsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadRowsRequest(const ReadRowsRequest& from);
  ReadRowsRequest(ReadRowsRequest&& from) noexcept
    : ReadRowsRequest() {
    *this = ::std::move(from);
  }

  inline ReadRowsRequest& operator=(const ReadRowsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadRowsRequest& operator=(ReadRowsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadRowsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadRowsRequest* internal_default_instance() {
    return reinterpret_cast<const ReadRowsRequest*>(
               &_ReadRowsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ReadRowsRequest& a, ReadRowsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadRowsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadRowsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReadRowsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReadRowsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReadRowsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReadRowsRequest& from) {
    ReadRowsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadRowsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.v2.ReadRowsRequest";
  }
  protected:
  explicit ReadRowsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ReadRowsRequest_RequestStatsView RequestStatsView;
  static constexpr RequestStatsView REQUEST_STATS_VIEW_UNSPECIFIED =
    ReadRowsRequest_RequestStatsView_REQUEST_STATS_VIEW_UNSPECIFIED;
  static constexpr RequestStatsView REQUEST_STATS_NONE =
    ReadRowsRequest_RequestStatsView_REQUEST_STATS_NONE;
  static constexpr RequestStatsView REQUEST_STATS_FULL =
    ReadRowsRequest_RequestStatsView_REQUEST_STATS_FULL;
  static inline bool RequestStatsView_IsValid(int value) {
    return ReadRowsRequest_RequestStatsView_IsValid(value);
  }
  static constexpr RequestStatsView RequestStatsView_MIN =
    ReadRowsRequest_RequestStatsView_RequestStatsView_MIN;
  static constexpr RequestStatsView RequestStatsView_MAX =
    ReadRowsRequest_RequestStatsView_RequestStatsView_MAX;
  static constexpr int RequestStatsView_ARRAYSIZE =
    ReadRowsRequest_RequestStatsView_RequestStatsView_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RequestStatsView_descriptor() {
    return ReadRowsRequest_RequestStatsView_descriptor();
  }
  template<typename T>
  static inline const std::string& RequestStatsView_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RequestStatsView>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RequestStatsView_Name.");
    return ReadRowsRequest_RequestStatsView_Name(enum_t_value);
  }
  static inline bool RequestStatsView_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      RequestStatsView* value) {
    return ReadRowsRequest_RequestStatsView_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTableNameFieldNumber = 1,
    kAppProfileIdFieldNumber = 5,
    kRowsFieldNumber = 2,
    kFilterFieldNumber = 3,
    kRowsLimitFieldNumber = 4,
    kRequestStatsViewFieldNumber = 6,
  };
  // string table_name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_table_name();
  const std::string& table_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_table_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_table_name();
  PROTOBUF_NODISCARD std::string* release_table_name();
  void set_allocated_table_name(std::string* table_name);
  private:
  const std::string& _internal_table_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_table_name(const std::string& value);
  std::string* _internal_mutable_table_name();
  public:

  // string app_profile_id = 5;
  void clear_app_profile_id();
  const std::string& app_profile_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_app_profile_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_app_profile_id();
  PROTOBUF_NODISCARD std::string* release_app_profile_id();
  void set_allocated_app_profile_id(std::string* app_profile_id);
  private:
  const std::string& _internal_app_profile_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_profile_id(const std::string& value);
  std::string* _internal_mutable_app_profile_id();
  public:

  // .google.bigtable.v2.RowSet rows = 2;
  bool has_rows() const;
  private:
  bool _internal_has_rows() const;
  public:
  void clear_rows();
  const ::google::bigtable::v2::RowSet& rows() const;
  PROTOBUF_NODISCARD ::google::bigtable::v2::RowSet* release_rows();
  ::google::bigtable::v2::RowSet* mutable_rows();
  void set_allocated_rows(::google::bigtable::v2::RowSet* rows);
  private:
  const ::google::bigtable::v2::RowSet& _internal_rows() const;
  ::google::bigtable::v2::RowSet* _internal_mutable_rows();
  public:
  void unsafe_arena_set_allocated_rows(
      ::google::bigtable::v2::RowSet* rows);
  ::google::bigtable::v2::RowSet* unsafe_arena_release_rows();

  // .google.bigtable.v2.RowFilter filter = 3;
  bool has_filter() const;
  private:
  bool _internal_has_filter() const;
  public:
  void clear_filter();
  const ::google::bigtable::v2::RowFilter& filter() const;
  PROTOBUF_NODISCARD ::google::bigtable::v2::RowFilter* release_filter();
  ::google::bigtable::v2::RowFilter* mutable_filter();
  void set_allocated_filter(::google::bigtable::v2::RowFilter* filter);
  private:
  const ::google::bigtable::v2::RowFilter& _internal_filter() const;
  ::google::bigtable::v2::RowFilter* _internal_mutable_filter();
  public:
  void unsafe_arena_set_allocated_filter(
      ::google::bigtable::v2::RowFilter* filter);
  ::google::bigtable::v2::RowFilter* unsafe_arena_release_filter();

  // int64 rows_limit = 4;
  void clear_rows_limit();
  int64_t rows_limit() const;
  void set_rows_limit(int64_t value);
  private:
  int64_t _internal_rows_limit() const;
  void _internal_set_rows_limit(int64_t value);
  public:

  // .google.bigtable.v2.ReadRowsRequest.RequestStatsView request_stats_view = 6;
  void clear_request_stats_view();
  ::google::bigtable::v2::ReadRowsRequest_RequestStatsView request_stats_view() const;
  void set_request_stats_view(::google::bigtable::v2::ReadRowsRequest_RequestStatsView value);
  private:
  ::google::bigtable::v2::ReadRowsRequest_RequestStatsView _internal_request_stats_view() const;
  void _internal_set_request_stats_view(::google::bigtable::v2::ReadRowsRequest_RequestStatsView value);
  public:

  // @@protoc_insertion_point(class_scope:google.bigtable.v2.ReadRowsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_profile_id_;
    ::google::bigtable::v2::RowSet* rows_;
    ::google::bigtable::v2::RowFilter* filter_;
    int64_t rows_limit_;
    int request_stats_view_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fbigtable_2fv2_2fbigtable_2eproto;
};
// -------------------------------------------------------------------

class ReadRowsResponse_CellChunk final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v2.ReadRowsResponse.CellChunk) */ {
 public:
  inline ReadRowsResponse_CellChunk() : ReadRowsResponse_CellChunk(nullptr) {}
  ~ReadRowsResponse_CellChunk() override;
  explicit PROTOBUF_CONSTEXPR ReadRowsResponse_CellChunk(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadRowsResponse_CellChunk(const ReadRowsResponse_CellChunk& from);
  ReadRowsResponse_CellChunk(ReadRowsResponse_CellChunk&& from) noexcept
    : ReadRowsResponse_CellChunk() {
    *this = ::std::move(from);
  }

  inline ReadRowsResponse_CellChunk& operator=(const ReadRowsResponse_CellChunk& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadRowsResponse_CellChunk& operator=(ReadRowsResponse_CellChunk&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadRowsResponse_CellChunk& default_instance() {
    return *internal_default_instance();
  }
  enum RowStatusCase {
    kResetRow = 8,
    kCommitRow = 9,
    ROW_STATUS_NOT_SET = 0,
  };

  static inline const ReadRowsResponse_CellChunk* internal_default_instance() {
    return reinterpret_cast<const ReadRowsResponse_CellChunk*>(
               &_ReadRowsResponse_CellChunk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ReadRowsResponse_CellChunk& a, ReadRowsResponse_CellChunk& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadRowsResponse_CellChunk* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadRowsResponse_CellChunk* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReadRowsResponse_CellChunk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReadRowsResponse_CellChunk>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReadRowsResponse_CellChunk& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReadRowsResponse_CellChunk& from) {
    ReadRowsResponse_CellChunk::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadRowsResponse_CellChunk* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.v2.ReadRowsResponse.CellChunk";
  }
  protected:
  explicit ReadRowsResponse_CellChunk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 5,
    kRowKeyFieldNumber = 1,
    kValueFieldNumber = 6,
    kFamilyNameFieldNumber = 2,
    kQualifierFieldNumber = 3,
    kTimestampMicrosFieldNumber = 4,
    kValueSizeFieldNumber = 7,
    kResetRowFieldNumber = 8,
    kCommitRowFieldNumber = 9,
  };
  // repeated string labels = 5;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  const std::string& labels(int index) const;
  std::string* mutable_labels(int index);
  void set_labels(int index, const std::string& value);
  void set_labels(int index, std::string&& value);
  void set_labels(int index, const char* value);
  void set_labels(int index, const char* value, size_t size);
  std::string* add_labels();
  void add_labels(const std::string& value);
  void add_labels(std::string&& value);
  void add_labels(const char* value);
  void add_labels(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& labels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_labels();
  private:
  const std::string& _internal_labels(int index) const;
  std::string* _internal_add_labels();
  public:

  // bytes row_key = 1;
  void clear_row_key();
  const std::string& row_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_row_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_row_key();
  PROTOBUF_NODISCARD std::string* release_row_key();
  void set_allocated_row_key(std::string* row_key);
  private:
  const std::string& _internal_row_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_row_key(const std::string& value);
  std::string* _internal_mutable_row_key();
  public:

  // bytes value = 6;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // .google.protobuf.StringValue family_name = 2;
  bool has_family_name() const;
  private:
  bool _internal_has_family_name() const;
  public:
  void clear_family_name();
  const ::PROTOBUF_NAMESPACE_ID::StringValue& family_name() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::StringValue* release_family_name();
  ::PROTOBUF_NAMESPACE_ID::StringValue* mutable_family_name();
  void set_allocated_family_name(::PROTOBUF_NAMESPACE_ID::StringValue* family_name);
  private:
  const ::PROTOBUF_NAMESPACE_ID::StringValue& _internal_family_name() const;
  ::PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_family_name();
  public:
  void unsafe_arena_set_allocated_family_name(
      ::PROTOBUF_NAMESPACE_ID::StringValue* family_name);
  ::PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_family_name();

  // .google.protobuf.BytesValue qualifier = 3;
  bool has_qualifier() const;
  private:
  bool _internal_has_qualifier() const;
  public:
  void clear_qualifier();
  const ::PROTOBUF_NAMESPACE_ID::BytesValue& qualifier() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BytesValue* release_qualifier();
  ::PROTOBUF_NAMESPACE_ID::BytesValue* mutable_qualifier();
  void set_allocated_qualifier(::PROTOBUF_NAMESPACE_ID::BytesValue* qualifier);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BytesValue& _internal_qualifier() const;
  ::PROTOBUF_NAMESPACE_ID::BytesValue* _internal_mutable_qualifier();
  public:
  void unsafe_arena_set_allocated_qualifier(
      ::PROTOBUF_NAMESPACE_ID::BytesValue* qualifier);
  ::PROTOBUF_NAMESPACE_ID::BytesValue* unsafe_arena_release_qualifier();

  // int64 timestamp_micros = 4;
  void clear_timestamp_micros();
  int64_t timestamp_micros() const;
  void set_timestamp_micros(int64_t value);
  private:
  int64_t _internal_timestamp_micros() const;
  void _internal_set_timestamp_micros(int64_t value);
  public:

  // int32 value_size = 7;
  void clear_value_size();
  int32_t value_size() const;
  void set_value_size(int32_t value);
  private:
  int32_t _internal_value_size() const;
  void _internal_set_value_size(int32_t value);
  public:

  // bool reset_row = 8;
  bool has_reset_row() const;
  private:
  bool _internal_has_reset_row() const;
  public:
  void clear_reset_row();
  bool reset_row() const;
  void set_reset_row(bool value);
  private:
  bool _internal_reset_row() const;
  void _internal_set_reset_row(bool value);
  public:

  // bool commit_row = 9;
  bool has_commit_row() const;
  private:
  bool _internal_has_commit_row() const;
  public:
  void clear_commit_row();
  bool commit_row() const;
  void set_commit_row(bool value);
  private:
  bool _internal_commit_row() const;
  void _internal_set_commit_row(bool value);
  public:

  void clear_row_status();
  RowStatusCase row_status_case() const;
  // @@protoc_insertion_point(class_scope:google.bigtable.v2.ReadRowsResponse.CellChunk)
 private:
  class _Internal;
  void set_has_reset_row();
  void set_has_commit_row();

  inline bool has_row_status() const;
  inline void clear_has_row_status();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> labels_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr row_key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    ::PROTOBUF_NAMESPACE_ID::StringValue* family_name_;
    ::PROTOBUF_NAMESPACE_ID::BytesValue* qualifier_;
    int64_t timestamp_micros_;
    int32_t value_size_;
    union RowStatusUnion {
      constexpr RowStatusUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      bool reset_row_;
      bool commit_row_;
    } row_status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fbigtable_2fv2_2fbigtable_2eproto;
};
// -------------------------------------------------------------------

class ReadRowsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v2.ReadRowsResponse) */ {
 public:
  inline ReadRowsResponse() : ReadRowsResponse(nullptr) {}
  ~ReadRowsResponse() override;
  explicit PROTOBUF_CONSTEXPR ReadRowsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadRowsResponse(const ReadRowsResponse& from);
  ReadRowsResponse(ReadRowsResponse&& from) noexcept
    : ReadRowsResponse() {
    *this = ::std::move(from);
  }

  inline ReadRowsResponse& operator=(const ReadRowsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadRowsResponse& operator=(ReadRowsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadRowsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadRowsResponse* internal_default_instance() {
    return reinterpret_cast<const ReadRowsResponse*>(
               &_ReadRowsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ReadRowsResponse& a, ReadRowsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadRowsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadRowsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReadRowsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReadRowsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReadRowsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReadRowsResponse& from) {
    ReadRowsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadRowsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.v2.ReadRowsResponse";
  }
  protected:
  explicit ReadRowsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ReadRowsResponse_CellChunk CellChunk;

  // accessors -------------------------------------------------------

  enum : int {
    kChunksFieldNumber = 1,
    kLastScannedRowKeyFieldNumber = 2,
    kRequestStatsFieldNumber = 3,
  };
  // repeated .google.bigtable.v2.ReadRowsResponse.CellChunk chunks = 1;
  int chunks_size() const;
  private:
  int _internal_chunks_size() const;
  public:
  void clear_chunks();
  ::google::bigtable::v2::ReadRowsResponse_CellChunk* mutable_chunks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::ReadRowsResponse_CellChunk >*
      mutable_chunks();
  private:
  const ::google::bigtable::v2::ReadRowsResponse_CellChunk& _internal_chunks(int index) const;
  ::google::bigtable::v2::ReadRowsResponse_CellChunk* _internal_add_chunks();
  public:
  const ::google::bigtable::v2::ReadRowsResponse_CellChunk& chunks(int index) const;
  ::google::bigtable::v2::ReadRowsResponse_CellChunk* add_chunks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::ReadRowsResponse_CellChunk >&
      chunks() const;

  // bytes last_scanned_row_key = 2;
  void clear_last_scanned_row_key();
  const std::string& last_scanned_row_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_last_scanned_row_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_last_scanned_row_key();
  PROTOBUF_NODISCARD std::string* release_last_scanned_row_key();
  void set_allocated_last_scanned_row_key(std::string* last_scanned_row_key);
  private:
  const std::string& _internal_last_scanned_row_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_scanned_row_key(const std::string& value);
  std::string* _internal_mutable_last_scanned_row_key();
  public:

  // .google.bigtable.v2.RequestStats request_stats = 3;
  bool has_request_stats() const;
  private:
  bool _internal_has_request_stats() const;
  public:
  void clear_request_stats();
  const ::google::bigtable::v2::RequestStats& request_stats() const;
  PROTOBUF_NODISCARD ::google::bigtable::v2::RequestStats* release_request_stats();
  ::google::bigtable::v2::RequestStats* mutable_request_stats();
  void set_allocated_request_stats(::google::bigtable::v2::RequestStats* request_stats);
  private:
  const ::google::bigtable::v2::RequestStats& _internal_request_stats() const;
  ::google::bigtable::v2::RequestStats* _internal_mutable_request_stats();
  public:
  void unsafe_arena_set_allocated_request_stats(
      ::google::bigtable::v2::RequestStats* request_stats);
  ::google::bigtable::v2::RequestStats* unsafe_arena_release_request_stats();

  // @@protoc_insertion_point(class_scope:google.bigtable.v2.ReadRowsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::ReadRowsResponse_CellChunk > chunks_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_scanned_row_key_;
    ::google::bigtable::v2::RequestStats* request_stats_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fbigtable_2fv2_2fbigtable_2eproto;
};
// -------------------------------------------------------------------

class SampleRowKeysRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v2.SampleRowKeysRequest) */ {
 public:
  inline SampleRowKeysRequest() : SampleRowKeysRequest(nullptr) {}
  ~SampleRowKeysRequest() override;
  explicit PROTOBUF_CONSTEXPR SampleRowKeysRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SampleRowKeysRequest(const SampleRowKeysRequest& from);
  SampleRowKeysRequest(SampleRowKeysRequest&& from) noexcept
    : SampleRowKeysRequest() {
    *this = ::std::move(from);
  }

  inline SampleRowKeysRequest& operator=(const SampleRowKeysRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SampleRowKeysRequest& operator=(SampleRowKeysRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SampleRowKeysRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SampleRowKeysRequest* internal_default_instance() {
    return reinterpret_cast<const SampleRowKeysRequest*>(
               &_SampleRowKeysRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SampleRowKeysRequest& a, SampleRowKeysRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SampleRowKeysRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SampleRowKeysRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SampleRowKeysRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SampleRowKeysRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SampleRowKeysRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SampleRowKeysRequest& from) {
    SampleRowKeysRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SampleRowKeysRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.v2.SampleRowKeysRequest";
  }
  protected:
  explicit SampleRowKeysRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableNameFieldNumber = 1,
    kAppProfileIdFieldNumber = 2,
  };
  // string table_name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_table_name();
  const std::string& table_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_table_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_table_name();
  PROTOBUF_NODISCARD std::string* release_table_name();
  void set_allocated_table_name(std::string* table_name);
  private:
  const std::string& _internal_table_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_table_name(const std::string& value);
  std::string* _internal_mutable_table_name();
  public:

  // string app_profile_id = 2;
  void clear_app_profile_id();
  const std::string& app_profile_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_app_profile_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_app_profile_id();
  PROTOBUF_NODISCARD std::string* release_app_profile_id();
  void set_allocated_app_profile_id(std::string* app_profile_id);
  private:
  const std::string& _internal_app_profile_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_profile_id(const std::string& value);
  std::string* _internal_mutable_app_profile_id();
  public:

  // @@protoc_insertion_point(class_scope:google.bigtable.v2.SampleRowKeysRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_profile_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fbigtable_2fv2_2fbigtable_2eproto;
};
// -------------------------------------------------------------------

class SampleRowKeysResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v2.SampleRowKeysResponse) */ {
 public:
  inline SampleRowKeysResponse() : SampleRowKeysResponse(nullptr) {}
  ~SampleRowKeysResponse() override;
  explicit PROTOBUF_CONSTEXPR SampleRowKeysResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SampleRowKeysResponse(const SampleRowKeysResponse& from);
  SampleRowKeysResponse(SampleRowKeysResponse&& from) noexcept
    : SampleRowKeysResponse() {
    *this = ::std::move(from);
  }

  inline SampleRowKeysResponse& operator=(const SampleRowKeysResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SampleRowKeysResponse& operator=(SampleRowKeysResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SampleRowKeysResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SampleRowKeysResponse* internal_default_instance() {
    return reinterpret_cast<const SampleRowKeysResponse*>(
               &_SampleRowKeysResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SampleRowKeysResponse& a, SampleRowKeysResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SampleRowKeysResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SampleRowKeysResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SampleRowKeysResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SampleRowKeysResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SampleRowKeysResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SampleRowKeysResponse& from) {
    SampleRowKeysResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SampleRowKeysResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.v2.SampleRowKeysResponse";
  }
  protected:
  explicit SampleRowKeysResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowKeyFieldNumber = 1,
    kOffsetBytesFieldNumber = 2,
  };
  // bytes row_key = 1;
  void clear_row_key();
  const std::string& row_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_row_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_row_key();
  PROTOBUF_NODISCARD std::string* release_row_key();
  void set_allocated_row_key(std::string* row_key);
  private:
  const std::string& _internal_row_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_row_key(const std::string& value);
  std::string* _internal_mutable_row_key();
  public:

  // int64 offset_bytes = 2;
  void clear_offset_bytes();
  int64_t offset_bytes() const;
  void set_offset_bytes(int64_t value);
  private:
  int64_t _internal_offset_bytes() const;
  void _internal_set_offset_bytes(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.bigtable.v2.SampleRowKeysResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr row_key_;
    int64_t offset_bytes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fbigtable_2fv2_2fbigtable_2eproto;
};
// -------------------------------------------------------------------

class MutateRowRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v2.MutateRowRequest) */ {
 public:
  inline MutateRowRequest() : MutateRowRequest(nullptr) {}
  ~MutateRowRequest() override;
  explicit PROTOBUF_CONSTEXPR MutateRowRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MutateRowRequest(const MutateRowRequest& from);
  MutateRowRequest(MutateRowRequest&& from) noexcept
    : MutateRowRequest() {
    *this = ::std::move(from);
  }

  inline MutateRowRequest& operator=(const MutateRowRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MutateRowRequest& operator=(MutateRowRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MutateRowRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MutateRowRequest* internal_default_instance() {
    return reinterpret_cast<const MutateRowRequest*>(
               &_MutateRowRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MutateRowRequest& a, MutateRowRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MutateRowRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MutateRowRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MutateRowRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MutateRowRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MutateRowRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MutateRowRequest& from) {
    MutateRowRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MutateRowRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.v2.MutateRowRequest";
  }
  protected:
  explicit MutateRowRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMutationsFieldNumber = 3,
    kTableNameFieldNumber = 1,
    kRowKeyFieldNumber = 2,
    kAppProfileIdFieldNumber = 4,
  };
  // repeated .google.bigtable.v2.Mutation mutations = 3 [(.google.api.field_behavior) = REQUIRED];
  int mutations_size() const;
  private:
  int _internal_mutations_size() const;
  public:
  void clear_mutations();
  ::google::bigtable::v2::Mutation* mutable_mutations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::Mutation >*
      mutable_mutations();
  private:
  const ::google::bigtable::v2::Mutation& _internal_mutations(int index) const;
  ::google::bigtable::v2::Mutation* _internal_add_mutations();
  public:
  const ::google::bigtable::v2::Mutation& mutations(int index) const;
  ::google::bigtable::v2::Mutation* add_mutations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::Mutation >&
      mutations() const;

  // string table_name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_table_name();
  const std::string& table_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_table_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_table_name();
  PROTOBUF_NODISCARD std::string* release_table_name();
  void set_allocated_table_name(std::string* table_name);
  private:
  const std::string& _internal_table_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_table_name(const std::string& value);
  std::string* _internal_mutable_table_name();
  public:

  // bytes row_key = 2 [(.google.api.field_behavior) = REQUIRED];
  void clear_row_key();
  const std::string& row_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_row_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_row_key();
  PROTOBUF_NODISCARD std::string* release_row_key();
  void set_allocated_row_key(std::string* row_key);
  private:
  const std::string& _internal_row_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_row_key(const std::string& value);
  std::string* _internal_mutable_row_key();
  public:

  // string app_profile_id = 4;
  void clear_app_profile_id();
  const std::string& app_profile_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_app_profile_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_app_profile_id();
  PROTOBUF_NODISCARD std::string* release_app_profile_id();
  void set_allocated_app_profile_id(std::string* app_profile_id);
  private:
  const std::string& _internal_app_profile_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_profile_id(const std::string& value);
  std::string* _internal_mutable_app_profile_id();
  public:

  // @@protoc_insertion_point(class_scope:google.bigtable.v2.MutateRowRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::Mutation > mutations_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr row_key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_profile_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fbigtable_2fv2_2fbigtable_2eproto;
};
// -------------------------------------------------------------------

class MutateRowResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:google.bigtable.v2.MutateRowResponse) */ {
 public:
  inline MutateRowResponse() : MutateRowResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR MutateRowResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MutateRowResponse(const MutateRowResponse& from);
  MutateRowResponse(MutateRowResponse&& from) noexcept
    : MutateRowResponse() {
    *this = ::std::move(from);
  }

  inline MutateRowResponse& operator=(const MutateRowResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MutateRowResponse& operator=(MutateRowResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MutateRowResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MutateRowResponse* internal_default_instance() {
    return reinterpret_cast<const MutateRowResponse*>(
               &_MutateRowResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MutateRowResponse& a, MutateRowResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MutateRowResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MutateRowResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MutateRowResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MutateRowResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MutateRowResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MutateRowResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.v2.MutateRowResponse";
  }
  protected:
  explicit MutateRowResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:google.bigtable.v2.MutateRowResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_google_2fbigtable_2fv2_2fbigtable_2eproto;
};
// -------------------------------------------------------------------

class MutateRowsRequest_Entry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v2.MutateRowsRequest.Entry) */ {
 public:
  inline MutateRowsRequest_Entry() : MutateRowsRequest_Entry(nullptr) {}
  ~MutateRowsRequest_Entry() override;
  explicit PROTOBUF_CONSTEXPR MutateRowsRequest_Entry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MutateRowsRequest_Entry(const MutateRowsRequest_Entry& from);
  MutateRowsRequest_Entry(MutateRowsRequest_Entry&& from) noexcept
    : MutateRowsRequest_Entry() {
    *this = ::std::move(from);
  }

  inline MutateRowsRequest_Entry& operator=(const MutateRowsRequest_Entry& from) {
    CopyFrom(from);
    return *this;
  }
  inline MutateRowsRequest_Entry& operator=(MutateRowsRequest_Entry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MutateRowsRequest_Entry& default_instance() {
    return *internal_default_instance();
  }
  static inline const MutateRowsRequest_Entry* internal_default_instance() {
    return reinterpret_cast<const MutateRowsRequest_Entry*>(
               &_MutateRowsRequest_Entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MutateRowsRequest_Entry& a, MutateRowsRequest_Entry& b) {
    a.Swap(&b);
  }
  inline void Swap(MutateRowsRequest_Entry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MutateRowsRequest_Entry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MutateRowsRequest_Entry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MutateRowsRequest_Entry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MutateRowsRequest_Entry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MutateRowsRequest_Entry& from) {
    MutateRowsRequest_Entry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MutateRowsRequest_Entry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.v2.MutateRowsRequest.Entry";
  }
  protected:
  explicit MutateRowsRequest_Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMutationsFieldNumber = 2,
    kRowKeyFieldNumber = 1,
  };
  // repeated .google.bigtable.v2.Mutation mutations = 2 [(.google.api.field_behavior) = REQUIRED];
  int mutations_size() const;
  private:
  int _internal_mutations_size() const;
  public:
  void clear_mutations();
  ::google::bigtable::v2::Mutation* mutable_mutations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::Mutation >*
      mutable_mutations();
  private:
  const ::google::bigtable::v2::Mutation& _internal_mutations(int index) const;
  ::google::bigtable::v2::Mutation* _internal_add_mutations();
  public:
  const ::google::bigtable::v2::Mutation& mutations(int index) const;
  ::google::bigtable::v2::Mutation* add_mutations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::Mutation >&
      mutations() const;

  // bytes row_key = 1;
  void clear_row_key();
  const std::string& row_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_row_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_row_key();
  PROTOBUF_NODISCARD std::string* release_row_key();
  void set_allocated_row_key(std::string* row_key);
  private:
  const std::string& _internal_row_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_row_key(const std::string& value);
  std::string* _internal_mutable_row_key();
  public:

  // @@protoc_insertion_point(class_scope:google.bigtable.v2.MutateRowsRequest.Entry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::Mutation > mutations_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr row_key_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fbigtable_2fv2_2fbigtable_2eproto;
};
// -------------------------------------------------------------------

class MutateRowsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v2.MutateRowsRequest) */ {
 public:
  inline MutateRowsRequest() : MutateRowsRequest(nullptr) {}
  ~MutateRowsRequest() override;
  explicit PROTOBUF_CONSTEXPR MutateRowsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MutateRowsRequest(const MutateRowsRequest& from);
  MutateRowsRequest(MutateRowsRequest&& from) noexcept
    : MutateRowsRequest() {
    *this = ::std::move(from);
  }

  inline MutateRowsRequest& operator=(const MutateRowsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MutateRowsRequest& operator=(MutateRowsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MutateRowsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MutateRowsRequest* internal_default_instance() {
    return reinterpret_cast<const MutateRowsRequest*>(
               &_MutateRowsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(MutateRowsRequest& a, MutateRowsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MutateRowsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MutateRowsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MutateRowsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MutateRowsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MutateRowsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MutateRowsRequest& from) {
    MutateRowsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MutateRowsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.v2.MutateRowsRequest";
  }
  protected:
  explicit MutateRowsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MutateRowsRequest_Entry Entry;

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 2,
    kTableNameFieldNumber = 1,
    kAppProfileIdFieldNumber = 3,
  };
  // repeated .google.bigtable.v2.MutateRowsRequest.Entry entries = 2 [(.google.api.field_behavior) = REQUIRED];
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::google::bigtable::v2::MutateRowsRequest_Entry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::MutateRowsRequest_Entry >*
      mutable_entries();
  private:
  const ::google::bigtable::v2::MutateRowsRequest_Entry& _internal_entries(int index) const;
  ::google::bigtable::v2::MutateRowsRequest_Entry* _internal_add_entries();
  public:
  const ::google::bigtable::v2::MutateRowsRequest_Entry& entries(int index) const;
  ::google::bigtable::v2::MutateRowsRequest_Entry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::MutateRowsRequest_Entry >&
      entries() const;

  // string table_name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_table_name();
  const std::string& table_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_table_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_table_name();
  PROTOBUF_NODISCARD std::string* release_table_name();
  void set_allocated_table_name(std::string* table_name);
  private:
  const std::string& _internal_table_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_table_name(const std::string& value);
  std::string* _internal_mutable_table_name();
  public:

  // string app_profile_id = 3;
  void clear_app_profile_id();
  const std::string& app_profile_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_app_profile_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_app_profile_id();
  PROTOBUF_NODISCARD std::string* release_app_profile_id();
  void set_allocated_app_profile_id(std::string* app_profile_id);
  private:
  const std::string& _internal_app_profile_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_profile_id(const std::string& value);
  std::string* _internal_mutable_app_profile_id();
  public:

  // @@protoc_insertion_point(class_scope:google.bigtable.v2.MutateRowsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::MutateRowsRequest_Entry > entries_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_profile_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fbigtable_2fv2_2fbigtable_2eproto;
};
// -------------------------------------------------------------------

class MutateRowsResponse_Entry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v2.MutateRowsResponse.Entry) */ {
 public:
  inline MutateRowsResponse_Entry() : MutateRowsResponse_Entry(nullptr) {}
  ~MutateRowsResponse_Entry() override;
  explicit PROTOBUF_CONSTEXPR MutateRowsResponse_Entry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MutateRowsResponse_Entry(const MutateRowsResponse_Entry& from);
  MutateRowsResponse_Entry(MutateRowsResponse_Entry&& from) noexcept
    : MutateRowsResponse_Entry() {
    *this = ::std::move(from);
  }

  inline MutateRowsResponse_Entry& operator=(const MutateRowsResponse_Entry& from) {
    CopyFrom(from);
    return *this;
  }
  inline MutateRowsResponse_Entry& operator=(MutateRowsResponse_Entry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MutateRowsResponse_Entry& default_instance() {
    return *internal_default_instance();
  }
  static inline const MutateRowsResponse_Entry* internal_default_instance() {
    return reinterpret_cast<const MutateRowsResponse_Entry*>(
               &_MutateRowsResponse_Entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(MutateRowsResponse_Entry& a, MutateRowsResponse_Entry& b) {
    a.Swap(&b);
  }
  inline void Swap(MutateRowsResponse_Entry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MutateRowsResponse_Entry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MutateRowsResponse_Entry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MutateRowsResponse_Entry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MutateRowsResponse_Entry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MutateRowsResponse_Entry& from) {
    MutateRowsResponse_Entry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MutateRowsResponse_Entry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.v2.MutateRowsResponse.Entry";
  }
  protected:
  explicit MutateRowsResponse_Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 2,
    kIndexFieldNumber = 1,
  };
  // .google.rpc.Status status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::google::rpc::Status& status() const;
  PROTOBUF_NODISCARD ::google::rpc::Status* release_status();
  ::google::rpc::Status* mutable_status();
  void set_allocated_status(::google::rpc::Status* status);
  private:
  const ::google::rpc::Status& _internal_status() const;
  ::google::rpc::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::google::rpc::Status* status);
  ::google::rpc::Status* unsafe_arena_release_status();

  // int64 index = 1;
  void clear_index();
  int64_t index() const;
  void set_index(int64_t value);
  private:
  int64_t _internal_index() const;
  void _internal_set_index(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.bigtable.v2.MutateRowsResponse.Entry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::rpc::Status* status_;
    int64_t index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fbigtable_2fv2_2fbigtable_2eproto;
};
// -------------------------------------------------------------------

class MutateRowsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v2.MutateRowsResponse) */ {
 public:
  inline MutateRowsResponse() : MutateRowsResponse(nullptr) {}
  ~MutateRowsResponse() override;
  explicit PROTOBUF_CONSTEXPR MutateRowsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MutateRowsResponse(const MutateRowsResponse& from);
  MutateRowsResponse(MutateRowsResponse&& from) noexcept
    : MutateRowsResponse() {
    *this = ::std::move(from);
  }

  inline MutateRowsResponse& operator=(const MutateRowsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MutateRowsResponse& operator=(MutateRowsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MutateRowsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MutateRowsResponse* internal_default_instance() {
    return reinterpret_cast<const MutateRowsResponse*>(
               &_MutateRowsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(MutateRowsResponse& a, MutateRowsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MutateRowsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MutateRowsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MutateRowsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MutateRowsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MutateRowsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MutateRowsResponse& from) {
    MutateRowsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MutateRowsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.v2.MutateRowsResponse";
  }
  protected:
  explicit MutateRowsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MutateRowsResponse_Entry Entry;

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 1,
  };
  // repeated .google.bigtable.v2.MutateRowsResponse.Entry entries = 1;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::google::bigtable::v2::MutateRowsResponse_Entry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::MutateRowsResponse_Entry >*
      mutable_entries();
  private:
  const ::google::bigtable::v2::MutateRowsResponse_Entry& _internal_entries(int index) const;
  ::google::bigtable::v2::MutateRowsResponse_Entry* _internal_add_entries();
  public:
  const ::google::bigtable::v2::MutateRowsResponse_Entry& entries(int index) const;
  ::google::bigtable::v2::MutateRowsResponse_Entry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::MutateRowsResponse_Entry >&
      entries() const;

  // @@protoc_insertion_point(class_scope:google.bigtable.v2.MutateRowsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::MutateRowsResponse_Entry > entries_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fbigtable_2fv2_2fbigtable_2eproto;
};
// -------------------------------------------------------------------

class CheckAndMutateRowRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v2.CheckAndMutateRowRequest) */ {
 public:
  inline CheckAndMutateRowRequest() : CheckAndMutateRowRequest(nullptr) {}
  ~CheckAndMutateRowRequest() override;
  explicit PROTOBUF_CONSTEXPR CheckAndMutateRowRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CheckAndMutateRowRequest(const CheckAndMutateRowRequest& from);
  CheckAndMutateRowRequest(CheckAndMutateRowRequest&& from) noexcept
    : CheckAndMutateRowRequest() {
    *this = ::std::move(from);
  }

  inline CheckAndMutateRowRequest& operator=(const CheckAndMutateRowRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckAndMutateRowRequest& operator=(CheckAndMutateRowRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CheckAndMutateRowRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CheckAndMutateRowRequest* internal_default_instance() {
    return reinterpret_cast<const CheckAndMutateRowRequest*>(
               &_CheckAndMutateRowRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CheckAndMutateRowRequest& a, CheckAndMutateRowRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckAndMutateRowRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckAndMutateRowRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CheckAndMutateRowRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CheckAndMutateRowRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CheckAndMutateRowRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CheckAndMutateRowRequest& from) {
    CheckAndMutateRowRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckAndMutateRowRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.v2.CheckAndMutateRowRequest";
  }
  protected:
  explicit CheckAndMutateRowRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrueMutationsFieldNumber = 4,
    kFalseMutationsFieldNumber = 5,
    kTableNameFieldNumber = 1,
    kRowKeyFieldNumber = 2,
    kAppProfileIdFieldNumber = 7,
    kPredicateFilterFieldNumber = 6,
  };
  // repeated .google.bigtable.v2.Mutation true_mutations = 4;
  int true_mutations_size() const;
  private:
  int _internal_true_mutations_size() const;
  public:
  void clear_true_mutations();
  ::google::bigtable::v2::Mutation* mutable_true_mutations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::Mutation >*
      mutable_true_mutations();
  private:
  const ::google::bigtable::v2::Mutation& _internal_true_mutations(int index) const;
  ::google::bigtable::v2::Mutation* _internal_add_true_mutations();
  public:
  const ::google::bigtable::v2::Mutation& true_mutations(int index) const;
  ::google::bigtable::v2::Mutation* add_true_mutations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::Mutation >&
      true_mutations() const;

  // repeated .google.bigtable.v2.Mutation false_mutations = 5;
  int false_mutations_size() const;
  private:
  int _internal_false_mutations_size() const;
  public:
  void clear_false_mutations();
  ::google::bigtable::v2::Mutation* mutable_false_mutations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::Mutation >*
      mutable_false_mutations();
  private:
  const ::google::bigtable::v2::Mutation& _internal_false_mutations(int index) const;
  ::google::bigtable::v2::Mutation* _internal_add_false_mutations();
  public:
  const ::google::bigtable::v2::Mutation& false_mutations(int index) const;
  ::google::bigtable::v2::Mutation* add_false_mutations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::Mutation >&
      false_mutations() const;

  // string table_name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_table_name();
  const std::string& table_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_table_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_table_name();
  PROTOBUF_NODISCARD std::string* release_table_name();
  void set_allocated_table_name(std::string* table_name);
  private:
  const std::string& _internal_table_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_table_name(const std::string& value);
  std::string* _internal_mutable_table_name();
  public:

  // bytes row_key = 2 [(.google.api.field_behavior) = REQUIRED];
  void clear_row_key();
  const std::string& row_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_row_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_row_key();
  PROTOBUF_NODISCARD std::string* release_row_key();
  void set_allocated_row_key(std::string* row_key);
  private:
  const std::string& _internal_row_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_row_key(const std::string& value);
  std::string* _internal_mutable_row_key();
  public:

  // string app_profile_id = 7;
  void clear_app_profile_id();
  const std::string& app_profile_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_app_profile_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_app_profile_id();
  PROTOBUF_NODISCARD std::string* release_app_profile_id();
  void set_allocated_app_profile_id(std::string* app_profile_id);
  private:
  const std::string& _internal_app_profile_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_profile_id(const std::string& value);
  std::string* _internal_mutable_app_profile_id();
  public:

  // .google.bigtable.v2.RowFilter predicate_filter = 6;
  bool has_predicate_filter() const;
  private:
  bool _internal_has_predicate_filter() const;
  public:
  void clear_predicate_filter();
  const ::google::bigtable::v2::RowFilter& predicate_filter() const;
  PROTOBUF_NODISCARD ::google::bigtable::v2::RowFilter* release_predicate_filter();
  ::google::bigtable::v2::RowFilter* mutable_predicate_filter();
  void set_allocated_predicate_filter(::google::bigtable::v2::RowFilter* predicate_filter);
  private:
  const ::google::bigtable::v2::RowFilter& _internal_predicate_filter() const;
  ::google::bigtable::v2::RowFilter* _internal_mutable_predicate_filter();
  public:
  void unsafe_arena_set_allocated_predicate_filter(
      ::google::bigtable::v2::RowFilter* predicate_filter);
  ::google::bigtable::v2::RowFilter* unsafe_arena_release_predicate_filter();

  // @@protoc_insertion_point(class_scope:google.bigtable.v2.CheckAndMutateRowRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::Mutation > true_mutations_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::Mutation > false_mutations_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr row_key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_profile_id_;
    ::google::bigtable::v2::RowFilter* predicate_filter_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fbigtable_2fv2_2fbigtable_2eproto;
};
// -------------------------------------------------------------------

class CheckAndMutateRowResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v2.CheckAndMutateRowResponse) */ {
 public:
  inline CheckAndMutateRowResponse() : CheckAndMutateRowResponse(nullptr) {}
  ~CheckAndMutateRowResponse() override;
  explicit PROTOBUF_CONSTEXPR CheckAndMutateRowResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CheckAndMutateRowResponse(const CheckAndMutateRowResponse& from);
  CheckAndMutateRowResponse(CheckAndMutateRowResponse&& from) noexcept
    : CheckAndMutateRowResponse() {
    *this = ::std::move(from);
  }

  inline CheckAndMutateRowResponse& operator=(const CheckAndMutateRowResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckAndMutateRowResponse& operator=(CheckAndMutateRowResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CheckAndMutateRowResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CheckAndMutateRowResponse* internal_default_instance() {
    return reinterpret_cast<const CheckAndMutateRowResponse*>(
               &_CheckAndMutateRowResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CheckAndMutateRowResponse& a, CheckAndMutateRowResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckAndMutateRowResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckAndMutateRowResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CheckAndMutateRowResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CheckAndMutateRowResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CheckAndMutateRowResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CheckAndMutateRowResponse& from) {
    CheckAndMutateRowResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckAndMutateRowResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.v2.CheckAndMutateRowResponse";
  }
  protected:
  explicit CheckAndMutateRowResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPredicateMatchedFieldNumber = 1,
  };
  // bool predicate_matched = 1;
  void clear_predicate_matched();
  bool predicate_matched() const;
  void set_predicate_matched(bool value);
  private:
  bool _internal_predicate_matched() const;
  void _internal_set_predicate_matched(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.bigtable.v2.CheckAndMutateRowResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool predicate_matched_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fbigtable_2fv2_2fbigtable_2eproto;
};
// -------------------------------------------------------------------

class PingAndWarmRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v2.PingAndWarmRequest) */ {
 public:
  inline PingAndWarmRequest() : PingAndWarmRequest(nullptr) {}
  ~PingAndWarmRequest() override;
  explicit PROTOBUF_CONSTEXPR PingAndWarmRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PingAndWarmRequest(const PingAndWarmRequest& from);
  PingAndWarmRequest(PingAndWarmRequest&& from) noexcept
    : PingAndWarmRequest() {
    *this = ::std::move(from);
  }

  inline PingAndWarmRequest& operator=(const PingAndWarmRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PingAndWarmRequest& operator=(PingAndWarmRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PingAndWarmRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PingAndWarmRequest* internal_default_instance() {
    return reinterpret_cast<const PingAndWarmRequest*>(
               &_PingAndWarmRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(PingAndWarmRequest& a, PingAndWarmRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PingAndWarmRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PingAndWarmRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PingAndWarmRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PingAndWarmRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PingAndWarmRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PingAndWarmRequest& from) {
    PingAndWarmRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PingAndWarmRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.v2.PingAndWarmRequest";
  }
  protected:
  explicit PingAndWarmRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kAppProfileIdFieldNumber = 2,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string app_profile_id = 2;
  void clear_app_profile_id();
  const std::string& app_profile_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_app_profile_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_app_profile_id();
  PROTOBUF_NODISCARD std::string* release_app_profile_id();
  void set_allocated_app_profile_id(std::string* app_profile_id);
  private:
  const std::string& _internal_app_profile_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_profile_id(const std::string& value);
  std::string* _internal_mutable_app_profile_id();
  public:

  // @@protoc_insertion_point(class_scope:google.bigtable.v2.PingAndWarmRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_profile_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fbigtable_2fv2_2fbigtable_2eproto;
};
// -------------------------------------------------------------------

class PingAndWarmResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:google.bigtable.v2.PingAndWarmResponse) */ {
 public:
  inline PingAndWarmResponse() : PingAndWarmResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR PingAndWarmResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PingAndWarmResponse(const PingAndWarmResponse& from);
  PingAndWarmResponse(PingAndWarmResponse&& from) noexcept
    : PingAndWarmResponse() {
    *this = ::std::move(from);
  }

  inline PingAndWarmResponse& operator=(const PingAndWarmResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PingAndWarmResponse& operator=(PingAndWarmResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PingAndWarmResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PingAndWarmResponse* internal_default_instance() {
    return reinterpret_cast<const PingAndWarmResponse*>(
               &_PingAndWarmResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(PingAndWarmResponse& a, PingAndWarmResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PingAndWarmResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PingAndWarmResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PingAndWarmResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PingAndWarmResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const PingAndWarmResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const PingAndWarmResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.v2.PingAndWarmResponse";
  }
  protected:
  explicit PingAndWarmResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:google.bigtable.v2.PingAndWarmResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_google_2fbigtable_2fv2_2fbigtable_2eproto;
};
// -------------------------------------------------------------------

class ReadModifyWriteRowRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v2.ReadModifyWriteRowRequest) */ {
 public:
  inline ReadModifyWriteRowRequest() : ReadModifyWriteRowRequest(nullptr) {}
  ~ReadModifyWriteRowRequest() override;
  explicit PROTOBUF_CONSTEXPR ReadModifyWriteRowRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadModifyWriteRowRequest(const ReadModifyWriteRowRequest& from);
  ReadModifyWriteRowRequest(ReadModifyWriteRowRequest&& from) noexcept
    : ReadModifyWriteRowRequest() {
    *this = ::std::move(from);
  }

  inline ReadModifyWriteRowRequest& operator=(const ReadModifyWriteRowRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadModifyWriteRowRequest& operator=(ReadModifyWriteRowRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadModifyWriteRowRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadModifyWriteRowRequest* internal_default_instance() {
    return reinterpret_cast<const ReadModifyWriteRowRequest*>(
               &_ReadModifyWriteRowRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ReadModifyWriteRowRequest& a, ReadModifyWriteRowRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadModifyWriteRowRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadModifyWriteRowRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReadModifyWriteRowRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReadModifyWriteRowRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReadModifyWriteRowRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReadModifyWriteRowRequest& from) {
    ReadModifyWriteRowRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadModifyWriteRowRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.v2.ReadModifyWriteRowRequest";
  }
  protected:
  explicit ReadModifyWriteRowRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRulesFieldNumber = 3,
    kTableNameFieldNumber = 1,
    kRowKeyFieldNumber = 2,
    kAppProfileIdFieldNumber = 4,
  };
  // repeated .google.bigtable.v2.ReadModifyWriteRule rules = 3 [(.google.api.field_behavior) = REQUIRED];
  int rules_size() const;
  private:
  int _internal_rules_size() const;
  public:
  void clear_rules();
  ::google::bigtable::v2::ReadModifyWriteRule* mutable_rules(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::ReadModifyWriteRule >*
      mutable_rules();
  private:
  const ::google::bigtable::v2::ReadModifyWriteRule& _internal_rules(int index) const;
  ::google::bigtable::v2::ReadModifyWriteRule* _internal_add_rules();
  public:
  const ::google::bigtable::v2::ReadModifyWriteRule& rules(int index) const;
  ::google::bigtable::v2::ReadModifyWriteRule* add_rules();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::ReadModifyWriteRule >&
      rules() const;

  // string table_name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_table_name();
  const std::string& table_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_table_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_table_name();
  PROTOBUF_NODISCARD std::string* release_table_name();
  void set_allocated_table_name(std::string* table_name);
  private:
  const std::string& _internal_table_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_table_name(const std::string& value);
  std::string* _internal_mutable_table_name();
  public:

  // bytes row_key = 2 [(.google.api.field_behavior) = REQUIRED];
  void clear_row_key();
  const std::string& row_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_row_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_row_key();
  PROTOBUF_NODISCARD std::string* release_row_key();
  void set_allocated_row_key(std::string* row_key);
  private:
  const std::string& _internal_row_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_row_key(const std::string& value);
  std::string* _internal_mutable_row_key();
  public:

  // string app_profile_id = 4;
  void clear_app_profile_id();
  const std::string& app_profile_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_app_profile_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_app_profile_id();
  PROTOBUF_NODISCARD std::string* release_app_profile_id();
  void set_allocated_app_profile_id(std::string* app_profile_id);
  private:
  const std::string& _internal_app_profile_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_profile_id(const std::string& value);
  std::string* _internal_mutable_app_profile_id();
  public:

  // @@protoc_insertion_point(class_scope:google.bigtable.v2.ReadModifyWriteRowRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::ReadModifyWriteRule > rules_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr row_key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_profile_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fbigtable_2fv2_2fbigtable_2eproto;
};
// -------------------------------------------------------------------

class ReadModifyWriteRowResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v2.ReadModifyWriteRowResponse) */ {
 public:
  inline ReadModifyWriteRowResponse() : ReadModifyWriteRowResponse(nullptr) {}
  ~ReadModifyWriteRowResponse() override;
  explicit PROTOBUF_CONSTEXPR ReadModifyWriteRowResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadModifyWriteRowResponse(const ReadModifyWriteRowResponse& from);
  ReadModifyWriteRowResponse(ReadModifyWriteRowResponse&& from) noexcept
    : ReadModifyWriteRowResponse() {
    *this = ::std::move(from);
  }

  inline ReadModifyWriteRowResponse& operator=(const ReadModifyWriteRowResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadModifyWriteRowResponse& operator=(ReadModifyWriteRowResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadModifyWriteRowResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadModifyWriteRowResponse* internal_default_instance() {
    return reinterpret_cast<const ReadModifyWriteRowResponse*>(
               &_ReadModifyWriteRowResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ReadModifyWriteRowResponse& a, ReadModifyWriteRowResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadModifyWriteRowResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadModifyWriteRowResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReadModifyWriteRowResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReadModifyWriteRowResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReadModifyWriteRowResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReadModifyWriteRowResponse& from) {
    ReadModifyWriteRowResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadModifyWriteRowResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.v2.ReadModifyWriteRowResponse";
  }
  protected:
  explicit ReadModifyWriteRowResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowFieldNumber = 1,
  };
  // .google.bigtable.v2.Row row = 1;
  bool has_row() const;
  private:
  bool _internal_has_row() const;
  public:
  void clear_row();
  const ::google::bigtable::v2::Row& row() const;
  PROTOBUF_NODISCARD ::google::bigtable::v2::Row* release_row();
  ::google::bigtable::v2::Row* mutable_row();
  void set_allocated_row(::google::bigtable::v2::Row* row);
  private:
  const ::google::bigtable::v2::Row& _internal_row() const;
  ::google::bigtable::v2::Row* _internal_mutable_row();
  public:
  void unsafe_arena_set_allocated_row(
      ::google::bigtable::v2::Row* row);
  ::google::bigtable::v2::Row* unsafe_arena_release_row();

  // @@protoc_insertion_point(class_scope:google.bigtable.v2.ReadModifyWriteRowResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::bigtable::v2::Row* row_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fbigtable_2fv2_2fbigtable_2eproto;
};
// -------------------------------------------------------------------

class GenerateInitialChangeStreamPartitionsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v2.GenerateInitialChangeStreamPartitionsRequest) */ {
 public:
  inline GenerateInitialChangeStreamPartitionsRequest() : GenerateInitialChangeStreamPartitionsRequest(nullptr) {}
  ~GenerateInitialChangeStreamPartitionsRequest() override;
  explicit PROTOBUF_CONSTEXPR GenerateInitialChangeStreamPartitionsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GenerateInitialChangeStreamPartitionsRequest(const GenerateInitialChangeStreamPartitionsRequest& from);
  GenerateInitialChangeStreamPartitionsRequest(GenerateInitialChangeStreamPartitionsRequest&& from) noexcept
    : GenerateInitialChangeStreamPartitionsRequest() {
    *this = ::std::move(from);
  }

  inline GenerateInitialChangeStreamPartitionsRequest& operator=(const GenerateInitialChangeStreamPartitionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenerateInitialChangeStreamPartitionsRequest& operator=(GenerateInitialChangeStreamPartitionsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GenerateInitialChangeStreamPartitionsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GenerateInitialChangeStreamPartitionsRequest* internal_default_instance() {
    return reinterpret_cast<const GenerateInitialChangeStreamPartitionsRequest*>(
               &_GenerateInitialChangeStreamPartitionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(GenerateInitialChangeStreamPartitionsRequest& a, GenerateInitialChangeStreamPartitionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GenerateInitialChangeStreamPartitionsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenerateInitialChangeStreamPartitionsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GenerateInitialChangeStreamPartitionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GenerateInitialChangeStreamPartitionsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GenerateInitialChangeStreamPartitionsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GenerateInitialChangeStreamPartitionsRequest& from) {
    GenerateInitialChangeStreamPartitionsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenerateInitialChangeStreamPartitionsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.v2.GenerateInitialChangeStreamPartitionsRequest";
  }
  protected:
  explicit GenerateInitialChangeStreamPartitionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableNameFieldNumber = 1,
    kAppProfileIdFieldNumber = 2,
  };
  // string table_name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_table_name();
  const std::string& table_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_table_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_table_name();
  PROTOBUF_NODISCARD std::string* release_table_name();
  void set_allocated_table_name(std::string* table_name);
  private:
  const std::string& _internal_table_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_table_name(const std::string& value);
  std::string* _internal_mutable_table_name();
  public:

  // string app_profile_id = 2;
  void clear_app_profile_id();
  const std::string& app_profile_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_app_profile_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_app_profile_id();
  PROTOBUF_NODISCARD std::string* release_app_profile_id();
  void set_allocated_app_profile_id(std::string* app_profile_id);
  private:
  const std::string& _internal_app_profile_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_profile_id(const std::string& value);
  std::string* _internal_mutable_app_profile_id();
  public:

  // @@protoc_insertion_point(class_scope:google.bigtable.v2.GenerateInitialChangeStreamPartitionsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_profile_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fbigtable_2fv2_2fbigtable_2eproto;
};
// -------------------------------------------------------------------

class GenerateInitialChangeStreamPartitionsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v2.GenerateInitialChangeStreamPartitionsResponse) */ {
 public:
  inline GenerateInitialChangeStreamPartitionsResponse() : GenerateInitialChangeStreamPartitionsResponse(nullptr) {}
  ~GenerateInitialChangeStreamPartitionsResponse() override;
  explicit PROTOBUF_CONSTEXPR GenerateInitialChangeStreamPartitionsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GenerateInitialChangeStreamPartitionsResponse(const GenerateInitialChangeStreamPartitionsResponse& from);
  GenerateInitialChangeStreamPartitionsResponse(GenerateInitialChangeStreamPartitionsResponse&& from) noexcept
    : GenerateInitialChangeStreamPartitionsResponse() {
    *this = ::std::move(from);
  }

  inline GenerateInitialChangeStreamPartitionsResponse& operator=(const GenerateInitialChangeStreamPartitionsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenerateInitialChangeStreamPartitionsResponse& operator=(GenerateInitialChangeStreamPartitionsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GenerateInitialChangeStreamPartitionsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GenerateInitialChangeStreamPartitionsResponse* internal_default_instance() {
    return reinterpret_cast<const GenerateInitialChangeStreamPartitionsResponse*>(
               &_GenerateInitialChangeStreamPartitionsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(GenerateInitialChangeStreamPartitionsResponse& a, GenerateInitialChangeStreamPartitionsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GenerateInitialChangeStreamPartitionsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenerateInitialChangeStreamPartitionsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GenerateInitialChangeStreamPartitionsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GenerateInitialChangeStreamPartitionsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GenerateInitialChangeStreamPartitionsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GenerateInitialChangeStreamPartitionsResponse& from) {
    GenerateInitialChangeStreamPartitionsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenerateInitialChangeStreamPartitionsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.v2.GenerateInitialChangeStreamPartitionsResponse";
  }
  protected:
  explicit GenerateInitialChangeStreamPartitionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartitionFieldNumber = 1,
  };
  // .google.bigtable.v2.StreamPartition partition = 1;
  bool has_partition() const;
  private:
  bool _internal_has_partition() const;
  public:
  void clear_partition();
  const ::google::bigtable::v2::StreamPartition& partition() const;
  PROTOBUF_NODISCARD ::google::bigtable::v2::StreamPartition* release_partition();
  ::google::bigtable::v2::StreamPartition* mutable_partition();
  void set_allocated_partition(::google::bigtable::v2::StreamPartition* partition);
  private:
  const ::google::bigtable::v2::StreamPartition& _internal_partition() const;
  ::google::bigtable::v2::StreamPartition* _internal_mutable_partition();
  public:
  void unsafe_arena_set_allocated_partition(
      ::google::bigtable::v2::StreamPartition* partition);
  ::google::bigtable::v2::StreamPartition* unsafe_arena_release_partition();

  // @@protoc_insertion_point(class_scope:google.bigtable.v2.GenerateInitialChangeStreamPartitionsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::bigtable::v2::StreamPartition* partition_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fbigtable_2fv2_2fbigtable_2eproto;
};
// -------------------------------------------------------------------

class ReadChangeStreamRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v2.ReadChangeStreamRequest) */ {
 public:
  inline ReadChangeStreamRequest() : ReadChangeStreamRequest(nullptr) {}
  ~ReadChangeStreamRequest() override;
  explicit PROTOBUF_CONSTEXPR ReadChangeStreamRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadChangeStreamRequest(const ReadChangeStreamRequest& from);
  ReadChangeStreamRequest(ReadChangeStreamRequest&& from) noexcept
    : ReadChangeStreamRequest() {
    *this = ::std::move(from);
  }

  inline ReadChangeStreamRequest& operator=(const ReadChangeStreamRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadChangeStreamRequest& operator=(ReadChangeStreamRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadChangeStreamRequest& default_instance() {
    return *internal_default_instance();
  }
  enum StartFromCase {
    kStartTime = 4,
    kContinuationTokens = 6,
    START_FROM_NOT_SET = 0,
  };

  static inline const ReadChangeStreamRequest* internal_default_instance() {
    return reinterpret_cast<const ReadChangeStreamRequest*>(
               &_ReadChangeStreamRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(ReadChangeStreamRequest& a, ReadChangeStreamRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadChangeStreamRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadChangeStreamRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReadChangeStreamRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReadChangeStreamRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReadChangeStreamRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReadChangeStreamRequest& from) {
    ReadChangeStreamRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadChangeStreamRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.v2.ReadChangeStreamRequest";
  }
  protected:
  explicit ReadChangeStreamRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableNameFieldNumber = 1,
    kAppProfileIdFieldNumber = 2,
    kPartitionFieldNumber = 3,
    kEndTimeFieldNumber = 5,
    kHeartbeatDurationFieldNumber = 7,
    kStartTimeFieldNumber = 4,
    kContinuationTokensFieldNumber = 6,
  };
  // string table_name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_table_name();
  const std::string& table_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_table_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_table_name();
  PROTOBUF_NODISCARD std::string* release_table_name();
  void set_allocated_table_name(std::string* table_name);
  private:
  const std::string& _internal_table_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_table_name(const std::string& value);
  std::string* _internal_mutable_table_name();
  public:

  // string app_profile_id = 2;
  void clear_app_profile_id();
  const std::string& app_profile_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_app_profile_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_app_profile_id();
  PROTOBUF_NODISCARD std::string* release_app_profile_id();
  void set_allocated_app_profile_id(std::string* app_profile_id);
  private:
  const std::string& _internal_app_profile_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_profile_id(const std::string& value);
  std::string* _internal_mutable_app_profile_id();
  public:

  // .google.bigtable.v2.StreamPartition partition = 3;
  bool has_partition() const;
  private:
  bool _internal_has_partition() const;
  public:
  void clear_partition();
  const ::google::bigtable::v2::StreamPartition& partition() const;
  PROTOBUF_NODISCARD ::google::bigtable::v2::StreamPartition* release_partition();
  ::google::bigtable::v2::StreamPartition* mutable_partition();
  void set_allocated_partition(::google::bigtable::v2::StreamPartition* partition);
  private:
  const ::google::bigtable::v2::StreamPartition& _internal_partition() const;
  ::google::bigtable::v2::StreamPartition* _internal_mutable_partition();
  public:
  void unsafe_arena_set_allocated_partition(
      ::google::bigtable::v2::StreamPartition* partition);
  ::google::bigtable::v2::StreamPartition* unsafe_arena_release_partition();

  // .google.protobuf.Timestamp end_time = 5;
  bool has_end_time() const;
  private:
  bool _internal_has_end_time() const;
  public:
  void clear_end_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& end_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_end_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_end_time();
  void set_allocated_end_time(::PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_end_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_end_time();
  public:
  void unsafe_arena_set_allocated_end_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_end_time();

  // .google.protobuf.Duration heartbeat_duration = 7;
  bool has_heartbeat_duration() const;
  private:
  bool _internal_has_heartbeat_duration() const;
  public:
  void clear_heartbeat_duration();
  const ::PROTOBUF_NAMESPACE_ID::Duration& heartbeat_duration() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_heartbeat_duration();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_heartbeat_duration();
  void set_allocated_heartbeat_duration(::PROTOBUF_NAMESPACE_ID::Duration* heartbeat_duration);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_heartbeat_duration() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_heartbeat_duration();
  public:
  void unsafe_arena_set_allocated_heartbeat_duration(
      ::PROTOBUF_NAMESPACE_ID::Duration* heartbeat_duration);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_heartbeat_duration();

  // .google.protobuf.Timestamp start_time = 4;
  bool has_start_time() const;
  private:
  bool _internal_has_start_time() const;
  public:
  void clear_start_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& start_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_start_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_start_time();
  void set_allocated_start_time(::PROTOBUF_NAMESPACE_ID::Timestamp* start_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_start_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_start_time();
  public:
  void unsafe_arena_set_allocated_start_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* start_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_start_time();

  // .google.bigtable.v2.StreamContinuationTokens continuation_tokens = 6;
  bool has_continuation_tokens() const;
  private:
  bool _internal_has_continuation_tokens() const;
  public:
  void clear_continuation_tokens();
  const ::google::bigtable::v2::StreamContinuationTokens& continuation_tokens() const;
  PROTOBUF_NODISCARD ::google::bigtable::v2::StreamContinuationTokens* release_continuation_tokens();
  ::google::bigtable::v2::StreamContinuationTokens* mutable_continuation_tokens();
  void set_allocated_continuation_tokens(::google::bigtable::v2::StreamContinuationTokens* continuation_tokens);
  private:
  const ::google::bigtable::v2::StreamContinuationTokens& _internal_continuation_tokens() const;
  ::google::bigtable::v2::StreamContinuationTokens* _internal_mutable_continuation_tokens();
  public:
  void unsafe_arena_set_allocated_continuation_tokens(
      ::google::bigtable::v2::StreamContinuationTokens* continuation_tokens);
  ::google::bigtable::v2::StreamContinuationTokens* unsafe_arena_release_continuation_tokens();

  void clear_start_from();
  StartFromCase start_from_case() const;
  // @@protoc_insertion_point(class_scope:google.bigtable.v2.ReadChangeStreamRequest)
 private:
  class _Internal;
  void set_has_start_time();
  void set_has_continuation_tokens();

  inline bool has_start_from() const;
  inline void clear_has_start_from();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_profile_id_;
    ::google::bigtable::v2::StreamPartition* partition_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* end_time_;
    ::PROTOBUF_NAMESPACE_ID::Duration* heartbeat_duration_;
    union StartFromUnion {
      constexpr StartFromUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::Timestamp* start_time_;
      ::google::bigtable::v2::StreamContinuationTokens* continuation_tokens_;
    } start_from_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fbigtable_2fv2_2fbigtable_2eproto;
};
// -------------------------------------------------------------------

class ReadChangeStreamResponse_MutationChunk_ChunkInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v2.ReadChangeStreamResponse.MutationChunk.ChunkInfo) */ {
 public:
  inline ReadChangeStreamResponse_MutationChunk_ChunkInfo() : ReadChangeStreamResponse_MutationChunk_ChunkInfo(nullptr) {}
  ~ReadChangeStreamResponse_MutationChunk_ChunkInfo() override;
  explicit PROTOBUF_CONSTEXPR ReadChangeStreamResponse_MutationChunk_ChunkInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadChangeStreamResponse_MutationChunk_ChunkInfo(const ReadChangeStreamResponse_MutationChunk_ChunkInfo& from);
  ReadChangeStreamResponse_MutationChunk_ChunkInfo(ReadChangeStreamResponse_MutationChunk_ChunkInfo&& from) noexcept
    : ReadChangeStreamResponse_MutationChunk_ChunkInfo() {
    *this = ::std::move(from);
  }

  inline ReadChangeStreamResponse_MutationChunk_ChunkInfo& operator=(const ReadChangeStreamResponse_MutationChunk_ChunkInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadChangeStreamResponse_MutationChunk_ChunkInfo& operator=(ReadChangeStreamResponse_MutationChunk_ChunkInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadChangeStreamResponse_MutationChunk_ChunkInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadChangeStreamResponse_MutationChunk_ChunkInfo* internal_default_instance() {
    return reinterpret_cast<const ReadChangeStreamResponse_MutationChunk_ChunkInfo*>(
               &_ReadChangeStreamResponse_MutationChunk_ChunkInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(ReadChangeStreamResponse_MutationChunk_ChunkInfo& a, ReadChangeStreamResponse_MutationChunk_ChunkInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadChangeStreamResponse_MutationChunk_ChunkInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadChangeStreamResponse_MutationChunk_ChunkInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReadChangeStreamResponse_MutationChunk_ChunkInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReadChangeStreamResponse_MutationChunk_ChunkInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReadChangeStreamResponse_MutationChunk_ChunkInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReadChangeStreamResponse_MutationChunk_ChunkInfo& from) {
    ReadChangeStreamResponse_MutationChunk_ChunkInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadChangeStreamResponse_MutationChunk_ChunkInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.v2.ReadChangeStreamResponse.MutationChunk.ChunkInfo";
  }
  protected:
  explicit ReadChangeStreamResponse_MutationChunk_ChunkInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChunkedValueSizeFieldNumber = 1,
    kChunkedValueOffsetFieldNumber = 2,
    kLastChunkFieldNumber = 3,
  };
  // int32 chunked_value_size = 1;
  void clear_chunked_value_size();
  int32_t chunked_value_size() const;
  void set_chunked_value_size(int32_t value);
  private:
  int32_t _internal_chunked_value_size() const;
  void _internal_set_chunked_value_size(int32_t value);
  public:

  // int32 chunked_value_offset = 2;
  void clear_chunked_value_offset();
  int32_t chunked_value_offset() const;
  void set_chunked_value_offset(int32_t value);
  private:
  int32_t _internal_chunked_value_offset() const;
  void _internal_set_chunked_value_offset(int32_t value);
  public:

  // bool last_chunk = 3;
  void clear_last_chunk();
  bool last_chunk() const;
  void set_last_chunk(bool value);
  private:
  bool _internal_last_chunk() const;
  void _internal_set_last_chunk(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.bigtable.v2.ReadChangeStreamResponse.MutationChunk.ChunkInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t chunked_value_size_;
    int32_t chunked_value_offset_;
    bool last_chunk_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fbigtable_2fv2_2fbigtable_2eproto;
};
// -------------------------------------------------------------------

class ReadChangeStreamResponse_MutationChunk final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v2.ReadChangeStreamResponse.MutationChunk) */ {
 public:
  inline ReadChangeStreamResponse_MutationChunk() : ReadChangeStreamResponse_MutationChunk(nullptr) {}
  ~ReadChangeStreamResponse_MutationChunk() override;
  explicit PROTOBUF_CONSTEXPR ReadChangeStreamResponse_MutationChunk(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadChangeStreamResponse_MutationChunk(const ReadChangeStreamResponse_MutationChunk& from);
  ReadChangeStreamResponse_MutationChunk(ReadChangeStreamResponse_MutationChunk&& from) noexcept
    : ReadChangeStreamResponse_MutationChunk() {
    *this = ::std::move(from);
  }

  inline ReadChangeStreamResponse_MutationChunk& operator=(const ReadChangeStreamResponse_MutationChunk& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadChangeStreamResponse_MutationChunk& operator=(ReadChangeStreamResponse_MutationChunk&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadChangeStreamResponse_MutationChunk& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadChangeStreamResponse_MutationChunk* internal_default_instance() {
    return reinterpret_cast<const ReadChangeStreamResponse_MutationChunk*>(
               &_ReadChangeStreamResponse_MutationChunk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(ReadChangeStreamResponse_MutationChunk& a, ReadChangeStreamResponse_MutationChunk& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadChangeStreamResponse_MutationChunk* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadChangeStreamResponse_MutationChunk* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReadChangeStreamResponse_MutationChunk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReadChangeStreamResponse_MutationChunk>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReadChangeStreamResponse_MutationChunk& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReadChangeStreamResponse_MutationChunk& from) {
    ReadChangeStreamResponse_MutationChunk::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadChangeStreamResponse_MutationChunk* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.v2.ReadChangeStreamResponse.MutationChunk";
  }
  protected:
  explicit ReadChangeStreamResponse_MutationChunk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ReadChangeStreamResponse_MutationChunk_ChunkInfo ChunkInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kChunkInfoFieldNumber = 1,
    kMutationFieldNumber = 2,
  };
  // .google.bigtable.v2.ReadChangeStreamResponse.MutationChunk.ChunkInfo chunk_info = 1;
  bool has_chunk_info() const;
  private:
  bool _internal_has_chunk_info() const;
  public:
  void clear_chunk_info();
  const ::google::bigtable::v2::ReadChangeStreamResponse_MutationChunk_ChunkInfo& chunk_info() const;
  PROTOBUF_NODISCARD ::google::bigtable::v2::ReadChangeStreamResponse_MutationChunk_ChunkInfo* release_chunk_info();
  ::google::bigtable::v2::ReadChangeStreamResponse_MutationChunk_ChunkInfo* mutable_chunk_info();
  void set_allocated_chunk_info(::google::bigtable::v2::ReadChangeStreamResponse_MutationChunk_ChunkInfo* chunk_info);
  private:
  const ::google::bigtable::v2::ReadChangeStreamResponse_MutationChunk_ChunkInfo& _internal_chunk_info() const;
  ::google::bigtable::v2::ReadChangeStreamResponse_MutationChunk_ChunkInfo* _internal_mutable_chunk_info();
  public:
  void unsafe_arena_set_allocated_chunk_info(
      ::google::bigtable::v2::ReadChangeStreamResponse_MutationChunk_ChunkInfo* chunk_info);
  ::google::bigtable::v2::ReadChangeStreamResponse_MutationChunk_ChunkInfo* unsafe_arena_release_chunk_info();

  // .google.bigtable.v2.Mutation mutation = 2;
  bool has_mutation() const;
  private:
  bool _internal_has_mutation() const;
  public:
  void clear_mutation();
  const ::google::bigtable::v2::Mutation& mutation() const;
  PROTOBUF_NODISCARD ::google::bigtable::v2::Mutation* release_mutation();
  ::google::bigtable::v2::Mutation* mutable_mutation();
  void set_allocated_mutation(::google::bigtable::v2::Mutation* mutation);
  private:
  const ::google::bigtable::v2::Mutation& _internal_mutation() const;
  ::google::bigtable::v2::Mutation* _internal_mutable_mutation();
  public:
  void unsafe_arena_set_allocated_mutation(
      ::google::bigtable::v2::Mutation* mutation);
  ::google::bigtable::v2::Mutation* unsafe_arena_release_mutation();

  // @@protoc_insertion_point(class_scope:google.bigtable.v2.ReadChangeStreamResponse.MutationChunk)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::bigtable::v2::ReadChangeStreamResponse_MutationChunk_ChunkInfo* chunk_info_;
    ::google::bigtable::v2::Mutation* mutation_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fbigtable_2fv2_2fbigtable_2eproto;
};
// -------------------------------------------------------------------

class ReadChangeStreamResponse_DataChange final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v2.ReadChangeStreamResponse.DataChange) */ {
 public:
  inline ReadChangeStreamResponse_DataChange() : ReadChangeStreamResponse_DataChange(nullptr) {}
  ~ReadChangeStreamResponse_DataChange() override;
  explicit PROTOBUF_CONSTEXPR ReadChangeStreamResponse_DataChange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadChangeStreamResponse_DataChange(const ReadChangeStreamResponse_DataChange& from);
  ReadChangeStreamResponse_DataChange(ReadChangeStreamResponse_DataChange&& from) noexcept
    : ReadChangeStreamResponse_DataChange() {
    *this = ::std::move(from);
  }

  inline ReadChangeStreamResponse_DataChange& operator=(const ReadChangeStreamResponse_DataChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadChangeStreamResponse_DataChange& operator=(ReadChangeStreamResponse_DataChange&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadChangeStreamResponse_DataChange& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadChangeStreamResponse_DataChange* internal_default_instance() {
    return reinterpret_cast<const ReadChangeStreamResponse_DataChange*>(
               &_ReadChangeStreamResponse_DataChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(ReadChangeStreamResponse_DataChange& a, ReadChangeStreamResponse_DataChange& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadChangeStreamResponse_DataChange* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadChangeStreamResponse_DataChange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReadChangeStreamResponse_DataChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReadChangeStreamResponse_DataChange>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReadChangeStreamResponse_DataChange& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReadChangeStreamResponse_DataChange& from) {
    ReadChangeStreamResponse_DataChange::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadChangeStreamResponse_DataChange* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.v2.ReadChangeStreamResponse.DataChange";
  }
  protected:
  explicit ReadChangeStreamResponse_DataChange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ReadChangeStreamResponse_DataChange_Type Type;
  static constexpr Type TYPE_UNSPECIFIED =
    ReadChangeStreamResponse_DataChange_Type_TYPE_UNSPECIFIED;
  static constexpr Type USER =
    ReadChangeStreamResponse_DataChange_Type_USER;
  static constexpr Type GARBAGE_COLLECTION =
    ReadChangeStreamResponse_DataChange_Type_GARBAGE_COLLECTION;
  static constexpr Type CONTINUATION =
    ReadChangeStreamResponse_DataChange_Type_CONTINUATION;
  static inline bool Type_IsValid(int value) {
    return ReadChangeStreamResponse_DataChange_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    ReadChangeStreamResponse_DataChange_Type_Type_MIN;
  static constexpr Type Type_MAX =
    ReadChangeStreamResponse_DataChange_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    ReadChangeStreamResponse_DataChange_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return ReadChangeStreamResponse_DataChange_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return ReadChangeStreamResponse_DataChange_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return ReadChangeStreamResponse_DataChange_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kChunksFieldNumber = 6,
    kSourceClusterIdFieldNumber = 2,
    kRowKeyFieldNumber = 3,
    kTokenFieldNumber = 9,
    kCommitTimestampFieldNumber = 4,
    kEstimatedLowWatermarkFieldNumber = 10,
    kTypeFieldNumber = 1,
    kTiebreakerFieldNumber = 5,
    kDoneFieldNumber = 8,
  };
  // repeated .google.bigtable.v2.ReadChangeStreamResponse.MutationChunk chunks = 6;
  int chunks_size() const;
  private:
  int _internal_chunks_size() const;
  public:
  void clear_chunks();
  ::google::bigtable::v2::ReadChangeStreamResponse_MutationChunk* mutable_chunks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::ReadChangeStreamResponse_MutationChunk >*
      mutable_chunks();
  private:
  const ::google::bigtable::v2::ReadChangeStreamResponse_MutationChunk& _internal_chunks(int index) const;
  ::google::bigtable::v2::ReadChangeStreamResponse_MutationChunk* _internal_add_chunks();
  public:
  const ::google::bigtable::v2::ReadChangeStreamResponse_MutationChunk& chunks(int index) const;
  ::google::bigtable::v2::ReadChangeStreamResponse_MutationChunk* add_chunks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::ReadChangeStreamResponse_MutationChunk >&
      chunks() const;

  // string source_cluster_id = 2;
  void clear_source_cluster_id();
  const std::string& source_cluster_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_source_cluster_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_source_cluster_id();
  PROTOBUF_NODISCARD std::string* release_source_cluster_id();
  void set_allocated_source_cluster_id(std::string* source_cluster_id);
  private:
  const std::string& _internal_source_cluster_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source_cluster_id(const std::string& value);
  std::string* _internal_mutable_source_cluster_id();
  public:

  // bytes row_key = 3;
  void clear_row_key();
  const std::string& row_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_row_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_row_key();
  PROTOBUF_NODISCARD std::string* release_row_key();
  void set_allocated_row_key(std::string* row_key);
  private:
  const std::string& _internal_row_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_row_key(const std::string& value);
  std::string* _internal_mutable_row_key();
  public:

  // string token = 9;
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // .google.protobuf.Timestamp commit_timestamp = 4;
  bool has_commit_timestamp() const;
  private:
  bool _internal_has_commit_timestamp() const;
  public:
  void clear_commit_timestamp();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& commit_timestamp() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_commit_timestamp();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_commit_timestamp();
  void set_allocated_commit_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* commit_timestamp);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_commit_timestamp() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_commit_timestamp();
  public:
  void unsafe_arena_set_allocated_commit_timestamp(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* commit_timestamp);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_commit_timestamp();

  // .google.protobuf.Timestamp estimated_low_watermark = 10;
  bool has_estimated_low_watermark() const;
  private:
  bool _internal_has_estimated_low_watermark() const;
  public:
  void clear_estimated_low_watermark();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& estimated_low_watermark() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_estimated_low_watermark();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_estimated_low_watermark();
  void set_allocated_estimated_low_watermark(::PROTOBUF_NAMESPACE_ID::Timestamp* estimated_low_watermark);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_estimated_low_watermark() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_estimated_low_watermark();
  public:
  void unsafe_arena_set_allocated_estimated_low_watermark(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* estimated_low_watermark);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_estimated_low_watermark();

  // .google.bigtable.v2.ReadChangeStreamResponse.DataChange.Type type = 1;
  void clear_type();
  ::google::bigtable::v2::ReadChangeStreamResponse_DataChange_Type type() const;
  void set_type(::google::bigtable::v2::ReadChangeStreamResponse_DataChange_Type value);
  private:
  ::google::bigtable::v2::ReadChangeStreamResponse_DataChange_Type _internal_type() const;
  void _internal_set_type(::google::bigtable::v2::ReadChangeStreamResponse_DataChange_Type value);
  public:

  // int32 tiebreaker = 5;
  void clear_tiebreaker();
  int32_t tiebreaker() const;
  void set_tiebreaker(int32_t value);
  private:
  int32_t _internal_tiebreaker() const;
  void _internal_set_tiebreaker(int32_t value);
  public:

  // bool done = 8;
  void clear_done();
  bool done() const;
  void set_done(bool value);
  private:
  bool _internal_done() const;
  void _internal_set_done(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.bigtable.v2.ReadChangeStreamResponse.DataChange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::ReadChangeStreamResponse_MutationChunk > chunks_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_cluster_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr row_key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* commit_timestamp_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* estimated_low_watermark_;
    int type_;
    int32_t tiebreaker_;
    bool done_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fbigtable_2fv2_2fbigtable_2eproto;
};
// -------------------------------------------------------------------

class ReadChangeStreamResponse_Heartbeat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v2.ReadChangeStreamResponse.Heartbeat) */ {
 public:
  inline ReadChangeStreamResponse_Heartbeat() : ReadChangeStreamResponse_Heartbeat(nullptr) {}
  ~ReadChangeStreamResponse_Heartbeat() override;
  explicit PROTOBUF_CONSTEXPR ReadChangeStreamResponse_Heartbeat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadChangeStreamResponse_Heartbeat(const ReadChangeStreamResponse_Heartbeat& from);
  ReadChangeStreamResponse_Heartbeat(ReadChangeStreamResponse_Heartbeat&& from) noexcept
    : ReadChangeStreamResponse_Heartbeat() {
    *this = ::std::move(from);
  }

  inline ReadChangeStreamResponse_Heartbeat& operator=(const ReadChangeStreamResponse_Heartbeat& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadChangeStreamResponse_Heartbeat& operator=(ReadChangeStreamResponse_Heartbeat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadChangeStreamResponse_Heartbeat& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadChangeStreamResponse_Heartbeat* internal_default_instance() {
    return reinterpret_cast<const ReadChangeStreamResponse_Heartbeat*>(
               &_ReadChangeStreamResponse_Heartbeat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(ReadChangeStreamResponse_Heartbeat& a, ReadChangeStreamResponse_Heartbeat& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadChangeStreamResponse_Heartbeat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadChangeStreamResponse_Heartbeat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReadChangeStreamResponse_Heartbeat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReadChangeStreamResponse_Heartbeat>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReadChangeStreamResponse_Heartbeat& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReadChangeStreamResponse_Heartbeat& from) {
    ReadChangeStreamResponse_Heartbeat::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadChangeStreamResponse_Heartbeat* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.v2.ReadChangeStreamResponse.Heartbeat";
  }
  protected:
  explicit ReadChangeStreamResponse_Heartbeat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContinuationTokenFieldNumber = 1,
    kEstimatedLowWatermarkFieldNumber = 2,
  };
  // .google.bigtable.v2.StreamContinuationToken continuation_token = 1;
  bool has_continuation_token() const;
  private:
  bool _internal_has_continuation_token() const;
  public:
  void clear_continuation_token();
  const ::google::bigtable::v2::StreamContinuationToken& continuation_token() const;
  PROTOBUF_NODISCARD ::google::bigtable::v2::StreamContinuationToken* release_continuation_token();
  ::google::bigtable::v2::StreamContinuationToken* mutable_continuation_token();
  void set_allocated_continuation_token(::google::bigtable::v2::StreamContinuationToken* continuation_token);
  private:
  const ::google::bigtable::v2::StreamContinuationToken& _internal_continuation_token() const;
  ::google::bigtable::v2::StreamContinuationToken* _internal_mutable_continuation_token();
  public:
  void unsafe_arena_set_allocated_continuation_token(
      ::google::bigtable::v2::StreamContinuationToken* continuation_token);
  ::google::bigtable::v2::StreamContinuationToken* unsafe_arena_release_continuation_token();

  // .google.protobuf.Timestamp estimated_low_watermark = 2;
  bool has_estimated_low_watermark() const;
  private:
  bool _internal_has_estimated_low_watermark() const;
  public:
  void clear_estimated_low_watermark();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& estimated_low_watermark() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_estimated_low_watermark();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_estimated_low_watermark();
  void set_allocated_estimated_low_watermark(::PROTOBUF_NAMESPACE_ID::Timestamp* estimated_low_watermark);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_estimated_low_watermark() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_estimated_low_watermark();
  public:
  void unsafe_arena_set_allocated_estimated_low_watermark(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* estimated_low_watermark);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_estimated_low_watermark();

  // @@protoc_insertion_point(class_scope:google.bigtable.v2.ReadChangeStreamResponse.Heartbeat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::bigtable::v2::StreamContinuationToken* continuation_token_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* estimated_low_watermark_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fbigtable_2fv2_2fbigtable_2eproto;
};
// -------------------------------------------------------------------

class ReadChangeStreamResponse_CloseStream final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v2.ReadChangeStreamResponse.CloseStream) */ {
 public:
  inline ReadChangeStreamResponse_CloseStream() : ReadChangeStreamResponse_CloseStream(nullptr) {}
  ~ReadChangeStreamResponse_CloseStream() override;
  explicit PROTOBUF_CONSTEXPR ReadChangeStreamResponse_CloseStream(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadChangeStreamResponse_CloseStream(const ReadChangeStreamResponse_CloseStream& from);
  ReadChangeStreamResponse_CloseStream(ReadChangeStreamResponse_CloseStream&& from) noexcept
    : ReadChangeStreamResponse_CloseStream() {
    *this = ::std::move(from);
  }

  inline ReadChangeStreamResponse_CloseStream& operator=(const ReadChangeStreamResponse_CloseStream& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadChangeStreamResponse_CloseStream& operator=(ReadChangeStreamResponse_CloseStream&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadChangeStreamResponse_CloseStream& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadChangeStreamResponse_CloseStream* internal_default_instance() {
    return reinterpret_cast<const ReadChangeStreamResponse_CloseStream*>(
               &_ReadChangeStreamResponse_CloseStream_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(ReadChangeStreamResponse_CloseStream& a, ReadChangeStreamResponse_CloseStream& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadChangeStreamResponse_CloseStream* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadChangeStreamResponse_CloseStream* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReadChangeStreamResponse_CloseStream* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReadChangeStreamResponse_CloseStream>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReadChangeStreamResponse_CloseStream& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReadChangeStreamResponse_CloseStream& from) {
    ReadChangeStreamResponse_CloseStream::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadChangeStreamResponse_CloseStream* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.v2.ReadChangeStreamResponse.CloseStream";
  }
  protected:
  explicit ReadChangeStreamResponse_CloseStream(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContinuationTokensFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .google.bigtable.v2.StreamContinuationToken continuation_tokens = 2;
  int continuation_tokens_size() const;
  private:
  int _internal_continuation_tokens_size() const;
  public:
  void clear_continuation_tokens();
  ::google::bigtable::v2::StreamContinuationToken* mutable_continuation_tokens(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::StreamContinuationToken >*
      mutable_continuation_tokens();
  private:
  const ::google::bigtable::v2::StreamContinuationToken& _internal_continuation_tokens(int index) const;
  ::google::bigtable::v2::StreamContinuationToken* _internal_add_continuation_tokens();
  public:
  const ::google::bigtable::v2::StreamContinuationToken& continuation_tokens(int index) const;
  ::google::bigtable::v2::StreamContinuationToken* add_continuation_tokens();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::StreamContinuationToken >&
      continuation_tokens() const;

  // .google.rpc.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::google::rpc::Status& status() const;
  PROTOBUF_NODISCARD ::google::rpc::Status* release_status();
  ::google::rpc::Status* mutable_status();
  void set_allocated_status(::google::rpc::Status* status);
  private:
  const ::google::rpc::Status& _internal_status() const;
  ::google::rpc::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::google::rpc::Status* status);
  ::google::rpc::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:google.bigtable.v2.ReadChangeStreamResponse.CloseStream)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::StreamContinuationToken > continuation_tokens_;
    ::google::rpc::Status* status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fbigtable_2fv2_2fbigtable_2eproto;
};
// -------------------------------------------------------------------

class ReadChangeStreamResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v2.ReadChangeStreamResponse) */ {
 public:
  inline ReadChangeStreamResponse() : ReadChangeStreamResponse(nullptr) {}
  ~ReadChangeStreamResponse() override;
  explicit PROTOBUF_CONSTEXPR ReadChangeStreamResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadChangeStreamResponse(const ReadChangeStreamResponse& from);
  ReadChangeStreamResponse(ReadChangeStreamResponse&& from) noexcept
    : ReadChangeStreamResponse() {
    *this = ::std::move(from);
  }

  inline ReadChangeStreamResponse& operator=(const ReadChangeStreamResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadChangeStreamResponse& operator=(ReadChangeStreamResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadChangeStreamResponse& default_instance() {
    return *internal_default_instance();
  }
  enum StreamRecordCase {
    kDataChange = 1,
    kHeartbeat = 2,
    kCloseStream = 3,
    STREAM_RECORD_NOT_SET = 0,
  };

  static inline const ReadChangeStreamResponse* internal_default_instance() {
    return reinterpret_cast<const ReadChangeStreamResponse*>(
               &_ReadChangeStreamResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(ReadChangeStreamResponse& a, ReadChangeStreamResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadChangeStreamResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadChangeStreamResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReadChangeStreamResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReadChangeStreamResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReadChangeStreamResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReadChangeStreamResponse& from) {
    ReadChangeStreamResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadChangeStreamResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.v2.ReadChangeStreamResponse";
  }
  protected:
  explicit ReadChangeStreamResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ReadChangeStreamResponse_MutationChunk MutationChunk;
  typedef ReadChangeStreamResponse_DataChange DataChange;
  typedef ReadChangeStreamResponse_Heartbeat Heartbeat;
  typedef ReadChangeStreamResponse_CloseStream CloseStream;

  // accessors -------------------------------------------------------

  enum : int {
    kDataChangeFieldNumber = 1,
    kHeartbeatFieldNumber = 2,
    kCloseStreamFieldNumber = 3,
  };
  // .google.bigtable.v2.ReadChangeStreamResponse.DataChange data_change = 1;
  bool has_data_change() const;
  private:
  bool _internal_has_data_change() const;
  public:
  void clear_data_change();
  const ::google::bigtable::v2::ReadChangeStreamResponse_DataChange& data_change() const;
  PROTOBUF_NODISCARD ::google::bigtable::v2::ReadChangeStreamResponse_DataChange* release_data_change();
  ::google::bigtable::v2::ReadChangeStreamResponse_DataChange* mutable_data_change();
  void set_allocated_data_change(::google::bigtable::v2::ReadChangeStreamResponse_DataChange* data_change);
  private:
  const ::google::bigtable::v2::ReadChangeStreamResponse_DataChange& _internal_data_change() const;
  ::google::bigtable::v2::ReadChangeStreamResponse_DataChange* _internal_mutable_data_change();
  public:
  void unsafe_arena_set_allocated_data_change(
      ::google::bigtable::v2::ReadChangeStreamResponse_DataChange* data_change);
  ::google::bigtable::v2::ReadChangeStreamResponse_DataChange* unsafe_arena_release_data_change();

  // .google.bigtable.v2.ReadChangeStreamResponse.Heartbeat heartbeat = 2;
  bool has_heartbeat() const;
  private:
  bool _internal_has_heartbeat() const;
  public:
  void clear_heartbeat();
  const ::google::bigtable::v2::ReadChangeStreamResponse_Heartbeat& heartbeat() const;
  PROTOBUF_NODISCARD ::google::bigtable::v2::ReadChangeStreamResponse_Heartbeat* release_heartbeat();
  ::google::bigtable::v2::ReadChangeStreamResponse_Heartbeat* mutable_heartbeat();
  void set_allocated_heartbeat(::google::bigtable::v2::ReadChangeStreamResponse_Heartbeat* heartbeat);
  private:
  const ::google::bigtable::v2::ReadChangeStreamResponse_Heartbeat& _internal_heartbeat() const;
  ::google::bigtable::v2::ReadChangeStreamResponse_Heartbeat* _internal_mutable_heartbeat();
  public:
  void unsafe_arena_set_allocated_heartbeat(
      ::google::bigtable::v2::ReadChangeStreamResponse_Heartbeat* heartbeat);
  ::google::bigtable::v2::ReadChangeStreamResponse_Heartbeat* unsafe_arena_release_heartbeat();

  // .google.bigtable.v2.ReadChangeStreamResponse.CloseStream close_stream = 3;
  bool has_close_stream() const;
  private:
  bool _internal_has_close_stream() const;
  public:
  void clear_close_stream();
  const ::google::bigtable::v2::ReadChangeStreamResponse_CloseStream& close_stream() const;
  PROTOBUF_NODISCARD ::google::bigtable::v2::ReadChangeStreamResponse_CloseStream* release_close_stream();
  ::google::bigtable::v2::ReadChangeStreamResponse_CloseStream* mutable_close_stream();
  void set_allocated_close_stream(::google::bigtable::v2::ReadChangeStreamResponse_CloseStream* close_stream);
  private:
  const ::google::bigtable::v2::ReadChangeStreamResponse_CloseStream& _internal_close_stream() const;
  ::google::bigtable::v2::ReadChangeStreamResponse_CloseStream* _internal_mutable_close_stream();
  public:
  void unsafe_arena_set_allocated_close_stream(
      ::google::bigtable::v2::ReadChangeStreamResponse_CloseStream* close_stream);
  ::google::bigtable::v2::ReadChangeStreamResponse_CloseStream* unsafe_arena_release_close_stream();

  void clear_stream_record();
  StreamRecordCase stream_record_case() const;
  // @@protoc_insertion_point(class_scope:google.bigtable.v2.ReadChangeStreamResponse)
 private:
  class _Internal;
  void set_has_data_change();
  void set_has_heartbeat();
  void set_has_close_stream();

  inline bool has_stream_record() const;
  inline void clear_has_stream_record();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union StreamRecordUnion {
      constexpr StreamRecordUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::google::bigtable::v2::ReadChangeStreamResponse_DataChange* data_change_;
      ::google::bigtable::v2::ReadChangeStreamResponse_Heartbeat* heartbeat_;
      ::google::bigtable::v2::ReadChangeStreamResponse_CloseStream* close_stream_;
    } stream_record_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fbigtable_2fv2_2fbigtable_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ReadRowsRequest

// string table_name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ReadRowsRequest::clear_table_name() {
  _impl_.table_name_.ClearToEmpty();
}
inline const std::string& ReadRowsRequest::table_name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadRowsRequest.table_name)
  return _internal_table_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReadRowsRequest::set_table_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.table_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadRowsRequest.table_name)
}
inline std::string* ReadRowsRequest::mutable_table_name() {
  std::string* _s = _internal_mutable_table_name();
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadRowsRequest.table_name)
  return _s;
}
inline const std::string& ReadRowsRequest::_internal_table_name() const {
  return _impl_.table_name_.Get();
}
inline void ReadRowsRequest::_internal_set_table_name(const std::string& value) {
  
  _impl_.table_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ReadRowsRequest::_internal_mutable_table_name() {
  
  return _impl_.table_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ReadRowsRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ReadRowsRequest.table_name)
  return _impl_.table_name_.Release();
}
inline void ReadRowsRequest::set_allocated_table_name(std::string* table_name) {
  if (table_name != nullptr) {
    
  } else {
    
  }
  _impl_.table_name_.SetAllocated(table_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.table_name_.IsDefault()) {
    _impl_.table_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ReadRowsRequest.table_name)
}

// string app_profile_id = 5;
inline void ReadRowsRequest::clear_app_profile_id() {
  _impl_.app_profile_id_.ClearToEmpty();
}
inline const std::string& ReadRowsRequest::app_profile_id() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadRowsRequest.app_profile_id)
  return _internal_app_profile_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReadRowsRequest::set_app_profile_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.app_profile_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadRowsRequest.app_profile_id)
}
inline std::string* ReadRowsRequest::mutable_app_profile_id() {
  std::string* _s = _internal_mutable_app_profile_id();
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadRowsRequest.app_profile_id)
  return _s;
}
inline const std::string& ReadRowsRequest::_internal_app_profile_id() const {
  return _impl_.app_profile_id_.Get();
}
inline void ReadRowsRequest::_internal_set_app_profile_id(const std::string& value) {
  
  _impl_.app_profile_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ReadRowsRequest::_internal_mutable_app_profile_id() {
  
  return _impl_.app_profile_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ReadRowsRequest::release_app_profile_id() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ReadRowsRequest.app_profile_id)
  return _impl_.app_profile_id_.Release();
}
inline void ReadRowsRequest::set_allocated_app_profile_id(std::string* app_profile_id) {
  if (app_profile_id != nullptr) {
    
  } else {
    
  }
  _impl_.app_profile_id_.SetAllocated(app_profile_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.app_profile_id_.IsDefault()) {
    _impl_.app_profile_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ReadRowsRequest.app_profile_id)
}

// .google.bigtable.v2.RowSet rows = 2;
inline bool ReadRowsRequest::_internal_has_rows() const {
  return this != internal_default_instance() && _impl_.rows_ != nullptr;
}
inline bool ReadRowsRequest::has_rows() const {
  return _internal_has_rows();
}
inline const ::google::bigtable::v2::RowSet& ReadRowsRequest::_internal_rows() const {
  const ::google::bigtable::v2::RowSet* p = _impl_.rows_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::bigtable::v2::RowSet&>(
      ::google::bigtable::v2::_RowSet_default_instance_);
}
inline const ::google::bigtable::v2::RowSet& ReadRowsRequest::rows() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadRowsRequest.rows)
  return _internal_rows();
}
inline void ReadRowsRequest::unsafe_arena_set_allocated_rows(
    ::google::bigtable::v2::RowSet* rows) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rows_);
  }
  _impl_.rows_ = rows;
  if (rows) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.v2.ReadRowsRequest.rows)
}
inline ::google::bigtable::v2::RowSet* ReadRowsRequest::release_rows() {
  
  ::google::bigtable::v2::RowSet* temp = _impl_.rows_;
  _impl_.rows_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::bigtable::v2::RowSet* ReadRowsRequest::unsafe_arena_release_rows() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ReadRowsRequest.rows)
  
  ::google::bigtable::v2::RowSet* temp = _impl_.rows_;
  _impl_.rows_ = nullptr;
  return temp;
}
inline ::google::bigtable::v2::RowSet* ReadRowsRequest::_internal_mutable_rows() {
  
  if (_impl_.rows_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::bigtable::v2::RowSet>(GetArenaForAllocation());
    _impl_.rows_ = p;
  }
  return _impl_.rows_;
}
inline ::google::bigtable::v2::RowSet* ReadRowsRequest::mutable_rows() {
  ::google::bigtable::v2::RowSet* _msg = _internal_mutable_rows();
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadRowsRequest.rows)
  return _msg;
}
inline void ReadRowsRequest::set_allocated_rows(::google::bigtable::v2::RowSet* rows) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rows_);
  }
  if (rows) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rows));
    if (message_arena != submessage_arena) {
      rows = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rows, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rows_ = rows;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ReadRowsRequest.rows)
}

// .google.bigtable.v2.RowFilter filter = 3;
inline bool ReadRowsRequest::_internal_has_filter() const {
  return this != internal_default_instance() && _impl_.filter_ != nullptr;
}
inline bool ReadRowsRequest::has_filter() const {
  return _internal_has_filter();
}
inline const ::google::bigtable::v2::RowFilter& ReadRowsRequest::_internal_filter() const {
  const ::google::bigtable::v2::RowFilter* p = _impl_.filter_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::bigtable::v2::RowFilter&>(
      ::google::bigtable::v2::_RowFilter_default_instance_);
}
inline const ::google::bigtable::v2::RowFilter& ReadRowsRequest::filter() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadRowsRequest.filter)
  return _internal_filter();
}
inline void ReadRowsRequest::unsafe_arena_set_allocated_filter(
    ::google::bigtable::v2::RowFilter* filter) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.filter_);
  }
  _impl_.filter_ = filter;
  if (filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.v2.ReadRowsRequest.filter)
}
inline ::google::bigtable::v2::RowFilter* ReadRowsRequest::release_filter() {
  
  ::google::bigtable::v2::RowFilter* temp = _impl_.filter_;
  _impl_.filter_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::bigtable::v2::RowFilter* ReadRowsRequest::unsafe_arena_release_filter() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ReadRowsRequest.filter)
  
  ::google::bigtable::v2::RowFilter* temp = _impl_.filter_;
  _impl_.filter_ = nullptr;
  return temp;
}
inline ::google::bigtable::v2::RowFilter* ReadRowsRequest::_internal_mutable_filter() {
  
  if (_impl_.filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::bigtable::v2::RowFilter>(GetArenaForAllocation());
    _impl_.filter_ = p;
  }
  return _impl_.filter_;
}
inline ::google::bigtable::v2::RowFilter* ReadRowsRequest::mutable_filter() {
  ::google::bigtable::v2::RowFilter* _msg = _internal_mutable_filter();
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadRowsRequest.filter)
  return _msg;
}
inline void ReadRowsRequest::set_allocated_filter(::google::bigtable::v2::RowFilter* filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.filter_);
  }
  if (filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filter));
    if (message_arena != submessage_arena) {
      filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filter, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.filter_ = filter;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ReadRowsRequest.filter)
}

// int64 rows_limit = 4;
inline void ReadRowsRequest::clear_rows_limit() {
  _impl_.rows_limit_ = int64_t{0};
}
inline int64_t ReadRowsRequest::_internal_rows_limit() const {
  return _impl_.rows_limit_;
}
inline int64_t ReadRowsRequest::rows_limit() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadRowsRequest.rows_limit)
  return _internal_rows_limit();
}
inline void ReadRowsRequest::_internal_set_rows_limit(int64_t value) {
  
  _impl_.rows_limit_ = value;
}
inline void ReadRowsRequest::set_rows_limit(int64_t value) {
  _internal_set_rows_limit(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadRowsRequest.rows_limit)
}

// .google.bigtable.v2.ReadRowsRequest.RequestStatsView request_stats_view = 6;
inline void ReadRowsRequest::clear_request_stats_view() {
  _impl_.request_stats_view_ = 0;
}
inline ::google::bigtable::v2::ReadRowsRequest_RequestStatsView ReadRowsRequest::_internal_request_stats_view() const {
  return static_cast< ::google::bigtable::v2::ReadRowsRequest_RequestStatsView >(_impl_.request_stats_view_);
}
inline ::google::bigtable::v2::ReadRowsRequest_RequestStatsView ReadRowsRequest::request_stats_view() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadRowsRequest.request_stats_view)
  return _internal_request_stats_view();
}
inline void ReadRowsRequest::_internal_set_request_stats_view(::google::bigtable::v2::ReadRowsRequest_RequestStatsView value) {
  
  _impl_.request_stats_view_ = value;
}
inline void ReadRowsRequest::set_request_stats_view(::google::bigtable::v2::ReadRowsRequest_RequestStatsView value) {
  _internal_set_request_stats_view(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadRowsRequest.request_stats_view)
}

// -------------------------------------------------------------------

// ReadRowsResponse_CellChunk

// bytes row_key = 1;
inline void ReadRowsResponse_CellChunk::clear_row_key() {
  _impl_.row_key_.ClearToEmpty();
}
inline const std::string& ReadRowsResponse_CellChunk::row_key() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadRowsResponse.CellChunk.row_key)
  return _internal_row_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReadRowsResponse_CellChunk::set_row_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.row_key_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadRowsResponse.CellChunk.row_key)
}
inline std::string* ReadRowsResponse_CellChunk::mutable_row_key() {
  std::string* _s = _internal_mutable_row_key();
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadRowsResponse.CellChunk.row_key)
  return _s;
}
inline const std::string& ReadRowsResponse_CellChunk::_internal_row_key() const {
  return _impl_.row_key_.Get();
}
inline void ReadRowsResponse_CellChunk::_internal_set_row_key(const std::string& value) {
  
  _impl_.row_key_.Set(value, GetArenaForAllocation());
}
inline std::string* ReadRowsResponse_CellChunk::_internal_mutable_row_key() {
  
  return _impl_.row_key_.Mutable(GetArenaForAllocation());
}
inline std::string* ReadRowsResponse_CellChunk::release_row_key() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ReadRowsResponse.CellChunk.row_key)
  return _impl_.row_key_.Release();
}
inline void ReadRowsResponse_CellChunk::set_allocated_row_key(std::string* row_key) {
  if (row_key != nullptr) {
    
  } else {
    
  }
  _impl_.row_key_.SetAllocated(row_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.row_key_.IsDefault()) {
    _impl_.row_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ReadRowsResponse.CellChunk.row_key)
}

// .google.protobuf.StringValue family_name = 2;
inline bool ReadRowsResponse_CellChunk::_internal_has_family_name() const {
  return this != internal_default_instance() && _impl_.family_name_ != nullptr;
}
inline bool ReadRowsResponse_CellChunk::has_family_name() const {
  return _internal_has_family_name();
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& ReadRowsResponse_CellChunk::_internal_family_name() const {
  const ::PROTOBUF_NAMESPACE_ID::StringValue* p = _impl_.family_name_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::StringValue&>(
      ::PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& ReadRowsResponse_CellChunk::family_name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadRowsResponse.CellChunk.family_name)
  return _internal_family_name();
}
inline void ReadRowsResponse_CellChunk::unsafe_arena_set_allocated_family_name(
    ::PROTOBUF_NAMESPACE_ID::StringValue* family_name) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.family_name_);
  }
  _impl_.family_name_ = family_name;
  if (family_name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.v2.ReadRowsResponse.CellChunk.family_name)
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* ReadRowsResponse_CellChunk::release_family_name() {
  
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = _impl_.family_name_;
  _impl_.family_name_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* ReadRowsResponse_CellChunk::unsafe_arena_release_family_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ReadRowsResponse.CellChunk.family_name)
  
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = _impl_.family_name_;
  _impl_.family_name_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* ReadRowsResponse_CellChunk::_internal_mutable_family_name() {
  
  if (_impl_.family_name_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::StringValue>(GetArenaForAllocation());
    _impl_.family_name_ = p;
  }
  return _impl_.family_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* ReadRowsResponse_CellChunk::mutable_family_name() {
  ::PROTOBUF_NAMESPACE_ID::StringValue* _msg = _internal_mutable_family_name();
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadRowsResponse.CellChunk.family_name)
  return _msg;
}
inline void ReadRowsResponse_CellChunk::set_allocated_family_name(::PROTOBUF_NAMESPACE_ID::StringValue* family_name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.family_name_);
  }
  if (family_name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(family_name));
    if (message_arena != submessage_arena) {
      family_name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, family_name, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.family_name_ = family_name;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ReadRowsResponse.CellChunk.family_name)
}

// .google.protobuf.BytesValue qualifier = 3;
inline bool ReadRowsResponse_CellChunk::_internal_has_qualifier() const {
  return this != internal_default_instance() && _impl_.qualifier_ != nullptr;
}
inline bool ReadRowsResponse_CellChunk::has_qualifier() const {
  return _internal_has_qualifier();
}
inline const ::PROTOBUF_NAMESPACE_ID::BytesValue& ReadRowsResponse_CellChunk::_internal_qualifier() const {
  const ::PROTOBUF_NAMESPACE_ID::BytesValue* p = _impl_.qualifier_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BytesValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BytesValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BytesValue& ReadRowsResponse_CellChunk::qualifier() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadRowsResponse.CellChunk.qualifier)
  return _internal_qualifier();
}
inline void ReadRowsResponse_CellChunk::unsafe_arena_set_allocated_qualifier(
    ::PROTOBUF_NAMESPACE_ID::BytesValue* qualifier) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.qualifier_);
  }
  _impl_.qualifier_ = qualifier;
  if (qualifier) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.v2.ReadRowsResponse.CellChunk.qualifier)
}
inline ::PROTOBUF_NAMESPACE_ID::BytesValue* ReadRowsResponse_CellChunk::release_qualifier() {
  
  ::PROTOBUF_NAMESPACE_ID::BytesValue* temp = _impl_.qualifier_;
  _impl_.qualifier_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BytesValue* ReadRowsResponse_CellChunk::unsafe_arena_release_qualifier() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ReadRowsResponse.CellChunk.qualifier)
  
  ::PROTOBUF_NAMESPACE_ID::BytesValue* temp = _impl_.qualifier_;
  _impl_.qualifier_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BytesValue* ReadRowsResponse_CellChunk::_internal_mutable_qualifier() {
  
  if (_impl_.qualifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BytesValue>(GetArenaForAllocation());
    _impl_.qualifier_ = p;
  }
  return _impl_.qualifier_;
}
inline ::PROTOBUF_NAMESPACE_ID::BytesValue* ReadRowsResponse_CellChunk::mutable_qualifier() {
  ::PROTOBUF_NAMESPACE_ID::BytesValue* _msg = _internal_mutable_qualifier();
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadRowsResponse.CellChunk.qualifier)
  return _msg;
}
inline void ReadRowsResponse_CellChunk::set_allocated_qualifier(::PROTOBUF_NAMESPACE_ID::BytesValue* qualifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.qualifier_);
  }
  if (qualifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(qualifier));
    if (message_arena != submessage_arena) {
      qualifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, qualifier, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.qualifier_ = qualifier;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ReadRowsResponse.CellChunk.qualifier)
}

// int64 timestamp_micros = 4;
inline void ReadRowsResponse_CellChunk::clear_timestamp_micros() {
  _impl_.timestamp_micros_ = int64_t{0};
}
inline int64_t ReadRowsResponse_CellChunk::_internal_timestamp_micros() const {
  return _impl_.timestamp_micros_;
}
inline int64_t ReadRowsResponse_CellChunk::timestamp_micros() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadRowsResponse.CellChunk.timestamp_micros)
  return _internal_timestamp_micros();
}
inline void ReadRowsResponse_CellChunk::_internal_set_timestamp_micros(int64_t value) {
  
  _impl_.timestamp_micros_ = value;
}
inline void ReadRowsResponse_CellChunk::set_timestamp_micros(int64_t value) {
  _internal_set_timestamp_micros(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadRowsResponse.CellChunk.timestamp_micros)
}

// repeated string labels = 5;
inline int ReadRowsResponse_CellChunk::_internal_labels_size() const {
  return _impl_.labels_.size();
}
inline int ReadRowsResponse_CellChunk::labels_size() const {
  return _internal_labels_size();
}
inline void ReadRowsResponse_CellChunk::clear_labels() {
  _impl_.labels_.Clear();
}
inline std::string* ReadRowsResponse_CellChunk::add_labels() {
  std::string* _s = _internal_add_labels();
  // @@protoc_insertion_point(field_add_mutable:google.bigtable.v2.ReadRowsResponse.CellChunk.labels)
  return _s;
}
inline const std::string& ReadRowsResponse_CellChunk::_internal_labels(int index) const {
  return _impl_.labels_.Get(index);
}
inline const std::string& ReadRowsResponse_CellChunk::labels(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadRowsResponse.CellChunk.labels)
  return _internal_labels(index);
}
inline std::string* ReadRowsResponse_CellChunk::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadRowsResponse.CellChunk.labels)
  return _impl_.labels_.Mutable(index);
}
inline void ReadRowsResponse_CellChunk::set_labels(int index, const std::string& value) {
  _impl_.labels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadRowsResponse.CellChunk.labels)
}
inline void ReadRowsResponse_CellChunk::set_labels(int index, std::string&& value) {
  _impl_.labels_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadRowsResponse.CellChunk.labels)
}
inline void ReadRowsResponse_CellChunk::set_labels(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.labels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.ReadRowsResponse.CellChunk.labels)
}
inline void ReadRowsResponse_CellChunk::set_labels(int index, const char* value, size_t size) {
  _impl_.labels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.ReadRowsResponse.CellChunk.labels)
}
inline std::string* ReadRowsResponse_CellChunk::_internal_add_labels() {
  return _impl_.labels_.Add();
}
inline void ReadRowsResponse_CellChunk::add_labels(const std::string& value) {
  _impl_.labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.bigtable.v2.ReadRowsResponse.CellChunk.labels)
}
inline void ReadRowsResponse_CellChunk::add_labels(std::string&& value) {
  _impl_.labels_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.bigtable.v2.ReadRowsResponse.CellChunk.labels)
}
inline void ReadRowsResponse_CellChunk::add_labels(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.bigtable.v2.ReadRowsResponse.CellChunk.labels)
}
inline void ReadRowsResponse_CellChunk::add_labels(const char* value, size_t size) {
  _impl_.labels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.bigtable.v2.ReadRowsResponse.CellChunk.labels)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ReadRowsResponse_CellChunk::labels() const {
  // @@protoc_insertion_point(field_list:google.bigtable.v2.ReadRowsResponse.CellChunk.labels)
  return _impl_.labels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ReadRowsResponse_CellChunk::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.v2.ReadRowsResponse.CellChunk.labels)
  return &_impl_.labels_;
}

// bytes value = 6;
inline void ReadRowsResponse_CellChunk::clear_value() {
  _impl_.value_.ClearToEmpty();
}
inline const std::string& ReadRowsResponse_CellChunk::value() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadRowsResponse.CellChunk.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReadRowsResponse_CellChunk::set_value(ArgT0&& arg0, ArgT... args) {
 
 _impl_.value_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadRowsResponse.CellChunk.value)
}
inline std::string* ReadRowsResponse_CellChunk::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadRowsResponse.CellChunk.value)
  return _s;
}
inline const std::string& ReadRowsResponse_CellChunk::_internal_value() const {
  return _impl_.value_.Get();
}
inline void ReadRowsResponse_CellChunk::_internal_set_value(const std::string& value) {
  
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* ReadRowsResponse_CellChunk::_internal_mutable_value() {
  
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* ReadRowsResponse_CellChunk::release_value() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ReadRowsResponse.CellChunk.value)
  return _impl_.value_.Release();
}
inline void ReadRowsResponse_CellChunk::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ReadRowsResponse.CellChunk.value)
}

// int32 value_size = 7;
inline void ReadRowsResponse_CellChunk::clear_value_size() {
  _impl_.value_size_ = 0;
}
inline int32_t ReadRowsResponse_CellChunk::_internal_value_size() const {
  return _impl_.value_size_;
}
inline int32_t ReadRowsResponse_CellChunk::value_size() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadRowsResponse.CellChunk.value_size)
  return _internal_value_size();
}
inline void ReadRowsResponse_CellChunk::_internal_set_value_size(int32_t value) {
  
  _impl_.value_size_ = value;
}
inline void ReadRowsResponse_CellChunk::set_value_size(int32_t value) {
  _internal_set_value_size(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadRowsResponse.CellChunk.value_size)
}

// bool reset_row = 8;
inline bool ReadRowsResponse_CellChunk::_internal_has_reset_row() const {
  return row_status_case() == kResetRow;
}
inline bool ReadRowsResponse_CellChunk::has_reset_row() const {
  return _internal_has_reset_row();
}
inline void ReadRowsResponse_CellChunk::set_has_reset_row() {
  _impl_._oneof_case_[0] = kResetRow;
}
inline void ReadRowsResponse_CellChunk::clear_reset_row() {
  if (_internal_has_reset_row()) {
    _impl_.row_status_.reset_row_ = false;
    clear_has_row_status();
  }
}
inline bool ReadRowsResponse_CellChunk::_internal_reset_row() const {
  if (_internal_has_reset_row()) {
    return _impl_.row_status_.reset_row_;
  }
  return false;
}
inline void ReadRowsResponse_CellChunk::_internal_set_reset_row(bool value) {
  if (!_internal_has_reset_row()) {
    clear_row_status();
    set_has_reset_row();
  }
  _impl_.row_status_.reset_row_ = value;
}
inline bool ReadRowsResponse_CellChunk::reset_row() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadRowsResponse.CellChunk.reset_row)
  return _internal_reset_row();
}
inline void ReadRowsResponse_CellChunk::set_reset_row(bool value) {
  _internal_set_reset_row(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadRowsResponse.CellChunk.reset_row)
}

// bool commit_row = 9;
inline bool ReadRowsResponse_CellChunk::_internal_has_commit_row() const {
  return row_status_case() == kCommitRow;
}
inline bool ReadRowsResponse_CellChunk::has_commit_row() const {
  return _internal_has_commit_row();
}
inline void ReadRowsResponse_CellChunk::set_has_commit_row() {
  _impl_._oneof_case_[0] = kCommitRow;
}
inline void ReadRowsResponse_CellChunk::clear_commit_row() {
  if (_internal_has_commit_row()) {
    _impl_.row_status_.commit_row_ = false;
    clear_has_row_status();
  }
}
inline bool ReadRowsResponse_CellChunk::_internal_commit_row() const {
  if (_internal_has_commit_row()) {
    return _impl_.row_status_.commit_row_;
  }
  return false;
}
inline void ReadRowsResponse_CellChunk::_internal_set_commit_row(bool value) {
  if (!_internal_has_commit_row()) {
    clear_row_status();
    set_has_commit_row();
  }
  _impl_.row_status_.commit_row_ = value;
}
inline bool ReadRowsResponse_CellChunk::commit_row() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadRowsResponse.CellChunk.commit_row)
  return _internal_commit_row();
}
inline void ReadRowsResponse_CellChunk::set_commit_row(bool value) {
  _internal_set_commit_row(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadRowsResponse.CellChunk.commit_row)
}

inline bool ReadRowsResponse_CellChunk::has_row_status() const {
  return row_status_case() != ROW_STATUS_NOT_SET;
}
inline void ReadRowsResponse_CellChunk::clear_has_row_status() {
  _impl_._oneof_case_[0] = ROW_STATUS_NOT_SET;
}
inline ReadRowsResponse_CellChunk::RowStatusCase ReadRowsResponse_CellChunk::row_status_case() const {
  return ReadRowsResponse_CellChunk::RowStatusCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ReadRowsResponse

// repeated .google.bigtable.v2.ReadRowsResponse.CellChunk chunks = 1;
inline int ReadRowsResponse::_internal_chunks_size() const {
  return _impl_.chunks_.size();
}
inline int ReadRowsResponse::chunks_size() const {
  return _internal_chunks_size();
}
inline void ReadRowsResponse::clear_chunks() {
  _impl_.chunks_.Clear();
}
inline ::google::bigtable::v2::ReadRowsResponse_CellChunk* ReadRowsResponse::mutable_chunks(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadRowsResponse.chunks)
  return _impl_.chunks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::ReadRowsResponse_CellChunk >*
ReadRowsResponse::mutable_chunks() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.v2.ReadRowsResponse.chunks)
  return &_impl_.chunks_;
}
inline const ::google::bigtable::v2::ReadRowsResponse_CellChunk& ReadRowsResponse::_internal_chunks(int index) const {
  return _impl_.chunks_.Get(index);
}
inline const ::google::bigtable::v2::ReadRowsResponse_CellChunk& ReadRowsResponse::chunks(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadRowsResponse.chunks)
  return _internal_chunks(index);
}
inline ::google::bigtable::v2::ReadRowsResponse_CellChunk* ReadRowsResponse::_internal_add_chunks() {
  return _impl_.chunks_.Add();
}
inline ::google::bigtable::v2::ReadRowsResponse_CellChunk* ReadRowsResponse::add_chunks() {
  ::google::bigtable::v2::ReadRowsResponse_CellChunk* _add = _internal_add_chunks();
  // @@protoc_insertion_point(field_add:google.bigtable.v2.ReadRowsResponse.chunks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::ReadRowsResponse_CellChunk >&
ReadRowsResponse::chunks() const {
  // @@protoc_insertion_point(field_list:google.bigtable.v2.ReadRowsResponse.chunks)
  return _impl_.chunks_;
}

// bytes last_scanned_row_key = 2;
inline void ReadRowsResponse::clear_last_scanned_row_key() {
  _impl_.last_scanned_row_key_.ClearToEmpty();
}
inline const std::string& ReadRowsResponse::last_scanned_row_key() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadRowsResponse.last_scanned_row_key)
  return _internal_last_scanned_row_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReadRowsResponse::set_last_scanned_row_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.last_scanned_row_key_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadRowsResponse.last_scanned_row_key)
}
inline std::string* ReadRowsResponse::mutable_last_scanned_row_key() {
  std::string* _s = _internal_mutable_last_scanned_row_key();
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadRowsResponse.last_scanned_row_key)
  return _s;
}
inline const std::string& ReadRowsResponse::_internal_last_scanned_row_key() const {
  return _impl_.last_scanned_row_key_.Get();
}
inline void ReadRowsResponse::_internal_set_last_scanned_row_key(const std::string& value) {
  
  _impl_.last_scanned_row_key_.Set(value, GetArenaForAllocation());
}
inline std::string* ReadRowsResponse::_internal_mutable_last_scanned_row_key() {
  
  return _impl_.last_scanned_row_key_.Mutable(GetArenaForAllocation());
}
inline std::string* ReadRowsResponse::release_last_scanned_row_key() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ReadRowsResponse.last_scanned_row_key)
  return _impl_.last_scanned_row_key_.Release();
}
inline void ReadRowsResponse::set_allocated_last_scanned_row_key(std::string* last_scanned_row_key) {
  if (last_scanned_row_key != nullptr) {
    
  } else {
    
  }
  _impl_.last_scanned_row_key_.SetAllocated(last_scanned_row_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.last_scanned_row_key_.IsDefault()) {
    _impl_.last_scanned_row_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ReadRowsResponse.last_scanned_row_key)
}

// .google.bigtable.v2.RequestStats request_stats = 3;
inline bool ReadRowsResponse::_internal_has_request_stats() const {
  return this != internal_default_instance() && _impl_.request_stats_ != nullptr;
}
inline bool ReadRowsResponse::has_request_stats() const {
  return _internal_has_request_stats();
}
inline const ::google::bigtable::v2::RequestStats& ReadRowsResponse::_internal_request_stats() const {
  const ::google::bigtable::v2::RequestStats* p = _impl_.request_stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::bigtable::v2::RequestStats&>(
      ::google::bigtable::v2::_RequestStats_default_instance_);
}
inline const ::google::bigtable::v2::RequestStats& ReadRowsResponse::request_stats() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadRowsResponse.request_stats)
  return _internal_request_stats();
}
inline void ReadRowsResponse::unsafe_arena_set_allocated_request_stats(
    ::google::bigtable::v2::RequestStats* request_stats) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.request_stats_);
  }
  _impl_.request_stats_ = request_stats;
  if (request_stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.v2.ReadRowsResponse.request_stats)
}
inline ::google::bigtable::v2::RequestStats* ReadRowsResponse::release_request_stats() {
  
  ::google::bigtable::v2::RequestStats* temp = _impl_.request_stats_;
  _impl_.request_stats_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::bigtable::v2::RequestStats* ReadRowsResponse::unsafe_arena_release_request_stats() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ReadRowsResponse.request_stats)
  
  ::google::bigtable::v2::RequestStats* temp = _impl_.request_stats_;
  _impl_.request_stats_ = nullptr;
  return temp;
}
inline ::google::bigtable::v2::RequestStats* ReadRowsResponse::_internal_mutable_request_stats() {
  
  if (_impl_.request_stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::bigtable::v2::RequestStats>(GetArenaForAllocation());
    _impl_.request_stats_ = p;
  }
  return _impl_.request_stats_;
}
inline ::google::bigtable::v2::RequestStats* ReadRowsResponse::mutable_request_stats() {
  ::google::bigtable::v2::RequestStats* _msg = _internal_mutable_request_stats();
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadRowsResponse.request_stats)
  return _msg;
}
inline void ReadRowsResponse::set_allocated_request_stats(::google::bigtable::v2::RequestStats* request_stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.request_stats_);
  }
  if (request_stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_stats));
    if (message_arena != submessage_arena) {
      request_stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request_stats, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.request_stats_ = request_stats;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ReadRowsResponse.request_stats)
}

// -------------------------------------------------------------------

// SampleRowKeysRequest

// string table_name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void SampleRowKeysRequest::clear_table_name() {
  _impl_.table_name_.ClearToEmpty();
}
inline const std::string& SampleRowKeysRequest::table_name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.SampleRowKeysRequest.table_name)
  return _internal_table_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SampleRowKeysRequest::set_table_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.table_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.bigtable.v2.SampleRowKeysRequest.table_name)
}
inline std::string* SampleRowKeysRequest::mutable_table_name() {
  std::string* _s = _internal_mutable_table_name();
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.SampleRowKeysRequest.table_name)
  return _s;
}
inline const std::string& SampleRowKeysRequest::_internal_table_name() const {
  return _impl_.table_name_.Get();
}
inline void SampleRowKeysRequest::_internal_set_table_name(const std::string& value) {
  
  _impl_.table_name_.Set(value, GetArenaForAllocation());
}
inline std::string* SampleRowKeysRequest::_internal_mutable_table_name() {
  
  return _impl_.table_name_.Mutable(GetArenaForAllocation());
}
inline std::string* SampleRowKeysRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.SampleRowKeysRequest.table_name)
  return _impl_.table_name_.Release();
}
inline void SampleRowKeysRequest::set_allocated_table_name(std::string* table_name) {
  if (table_name != nullptr) {
    
  } else {
    
  }
  _impl_.table_name_.SetAllocated(table_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.table_name_.IsDefault()) {
    _impl_.table_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.SampleRowKeysRequest.table_name)
}

// string app_profile_id = 2;
inline void SampleRowKeysRequest::clear_app_profile_id() {
  _impl_.app_profile_id_.ClearToEmpty();
}
inline const std::string& SampleRowKeysRequest::app_profile_id() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.SampleRowKeysRequest.app_profile_id)
  return _internal_app_profile_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SampleRowKeysRequest::set_app_profile_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.app_profile_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.bigtable.v2.SampleRowKeysRequest.app_profile_id)
}
inline std::string* SampleRowKeysRequest::mutable_app_profile_id() {
  std::string* _s = _internal_mutable_app_profile_id();
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.SampleRowKeysRequest.app_profile_id)
  return _s;
}
inline const std::string& SampleRowKeysRequest::_internal_app_profile_id() const {
  return _impl_.app_profile_id_.Get();
}
inline void SampleRowKeysRequest::_internal_set_app_profile_id(const std::string& value) {
  
  _impl_.app_profile_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SampleRowKeysRequest::_internal_mutable_app_profile_id() {
  
  return _impl_.app_profile_id_.Mutable(GetArenaForAllocation());
}
inline std::string* SampleRowKeysRequest::release_app_profile_id() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.SampleRowKeysRequest.app_profile_id)
  return _impl_.app_profile_id_.Release();
}
inline void SampleRowKeysRequest::set_allocated_app_profile_id(std::string* app_profile_id) {
  if (app_profile_id != nullptr) {
    
  } else {
    
  }
  _impl_.app_profile_id_.SetAllocated(app_profile_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.app_profile_id_.IsDefault()) {
    _impl_.app_profile_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.SampleRowKeysRequest.app_profile_id)
}

// -------------------------------------------------------------------

// SampleRowKeysResponse

// bytes row_key = 1;
inline void SampleRowKeysResponse::clear_row_key() {
  _impl_.row_key_.ClearToEmpty();
}
inline const std::string& SampleRowKeysResponse::row_key() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.SampleRowKeysResponse.row_key)
  return _internal_row_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SampleRowKeysResponse::set_row_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.row_key_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.bigtable.v2.SampleRowKeysResponse.row_key)
}
inline std::string* SampleRowKeysResponse::mutable_row_key() {
  std::string* _s = _internal_mutable_row_key();
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.SampleRowKeysResponse.row_key)
  return _s;
}
inline const std::string& SampleRowKeysResponse::_internal_row_key() const {
  return _impl_.row_key_.Get();
}
inline void SampleRowKeysResponse::_internal_set_row_key(const std::string& value) {
  
  _impl_.row_key_.Set(value, GetArenaForAllocation());
}
inline std::string* SampleRowKeysResponse::_internal_mutable_row_key() {
  
  return _impl_.row_key_.Mutable(GetArenaForAllocation());
}
inline std::string* SampleRowKeysResponse::release_row_key() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.SampleRowKeysResponse.row_key)
  return _impl_.row_key_.Release();
}
inline void SampleRowKeysResponse::set_allocated_row_key(std::string* row_key) {
  if (row_key != nullptr) {
    
  } else {
    
  }
  _impl_.row_key_.SetAllocated(row_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.row_key_.IsDefault()) {
    _impl_.row_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.SampleRowKeysResponse.row_key)
}

// int64 offset_bytes = 2;
inline void SampleRowKeysResponse::clear_offset_bytes() {
  _impl_.offset_bytes_ = int64_t{0};
}
inline int64_t SampleRowKeysResponse::_internal_offset_bytes() const {
  return _impl_.offset_bytes_;
}
inline int64_t SampleRowKeysResponse::offset_bytes() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.SampleRowKeysResponse.offset_bytes)
  return _internal_offset_bytes();
}
inline void SampleRowKeysResponse::_internal_set_offset_bytes(int64_t value) {
  
  _impl_.offset_bytes_ = value;
}
inline void SampleRowKeysResponse::set_offset_bytes(int64_t value) {
  _internal_set_offset_bytes(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.SampleRowKeysResponse.offset_bytes)
}

// -------------------------------------------------------------------

// MutateRowRequest

// string table_name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void MutateRowRequest::clear_table_name() {
  _impl_.table_name_.ClearToEmpty();
}
inline const std::string& MutateRowRequest::table_name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.MutateRowRequest.table_name)
  return _internal_table_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MutateRowRequest::set_table_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.table_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.bigtable.v2.MutateRowRequest.table_name)
}
inline std::string* MutateRowRequest::mutable_table_name() {
  std::string* _s = _internal_mutable_table_name();
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.MutateRowRequest.table_name)
  return _s;
}
inline const std::string& MutateRowRequest::_internal_table_name() const {
  return _impl_.table_name_.Get();
}
inline void MutateRowRequest::_internal_set_table_name(const std::string& value) {
  
  _impl_.table_name_.Set(value, GetArenaForAllocation());
}
inline std::string* MutateRowRequest::_internal_mutable_table_name() {
  
  return _impl_.table_name_.Mutable(GetArenaForAllocation());
}
inline std::string* MutateRowRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.MutateRowRequest.table_name)
  return _impl_.table_name_.Release();
}
inline void MutateRowRequest::set_allocated_table_name(std::string* table_name) {
  if (table_name != nullptr) {
    
  } else {
    
  }
  _impl_.table_name_.SetAllocated(table_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.table_name_.IsDefault()) {
    _impl_.table_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.MutateRowRequest.table_name)
}

// string app_profile_id = 4;
inline void MutateRowRequest::clear_app_profile_id() {
  _impl_.app_profile_id_.ClearToEmpty();
}
inline const std::string& MutateRowRequest::app_profile_id() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.MutateRowRequest.app_profile_id)
  return _internal_app_profile_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MutateRowRequest::set_app_profile_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.app_profile_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.bigtable.v2.MutateRowRequest.app_profile_id)
}
inline std::string* MutateRowRequest::mutable_app_profile_id() {
  std::string* _s = _internal_mutable_app_profile_id();
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.MutateRowRequest.app_profile_id)
  return _s;
}
inline const std::string& MutateRowRequest::_internal_app_profile_id() const {
  return _impl_.app_profile_id_.Get();
}
inline void MutateRowRequest::_internal_set_app_profile_id(const std::string& value) {
  
  _impl_.app_profile_id_.Set(value, GetArenaForAllocation());
}
inline std::string* MutateRowRequest::_internal_mutable_app_profile_id() {
  
  return _impl_.app_profile_id_.Mutable(GetArenaForAllocation());
}
inline std::string* MutateRowRequest::release_app_profile_id() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.MutateRowRequest.app_profile_id)
  return _impl_.app_profile_id_.Release();
}
inline void MutateRowRequest::set_allocated_app_profile_id(std::string* app_profile_id) {
  if (app_profile_id != nullptr) {
    
  } else {
    
  }
  _impl_.app_profile_id_.SetAllocated(app_profile_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.app_profile_id_.IsDefault()) {
    _impl_.app_profile_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.MutateRowRequest.app_profile_id)
}

// bytes row_key = 2 [(.google.api.field_behavior) = REQUIRED];
inline void MutateRowRequest::clear_row_key() {
  _impl_.row_key_.ClearToEmpty();
}
inline const std::string& MutateRowRequest::row_key() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.MutateRowRequest.row_key)
  return _internal_row_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MutateRowRequest::set_row_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.row_key_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.bigtable.v2.MutateRowRequest.row_key)
}
inline std::string* MutateRowRequest::mutable_row_key() {
  std::string* _s = _internal_mutable_row_key();
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.MutateRowRequest.row_key)
  return _s;
}
inline const std::string& MutateRowRequest::_internal_row_key() const {
  return _impl_.row_key_.Get();
}
inline void MutateRowRequest::_internal_set_row_key(const std::string& value) {
  
  _impl_.row_key_.Set(value, GetArenaForAllocation());
}
inline std::string* MutateRowRequest::_internal_mutable_row_key() {
  
  return _impl_.row_key_.Mutable(GetArenaForAllocation());
}
inline std::string* MutateRowRequest::release_row_key() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.MutateRowRequest.row_key)
  return _impl_.row_key_.Release();
}
inline void MutateRowRequest::set_allocated_row_key(std::string* row_key) {
  if (row_key != nullptr) {
    
  } else {
    
  }
  _impl_.row_key_.SetAllocated(row_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.row_key_.IsDefault()) {
    _impl_.row_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.MutateRowRequest.row_key)
}

// repeated .google.bigtable.v2.Mutation mutations = 3 [(.google.api.field_behavior) = REQUIRED];
inline int MutateRowRequest::_internal_mutations_size() const {
  return _impl_.mutations_.size();
}
inline int MutateRowRequest::mutations_size() const {
  return _internal_mutations_size();
}
inline ::google::bigtable::v2::Mutation* MutateRowRequest::mutable_mutations(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.MutateRowRequest.mutations)
  return _impl_.mutations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::Mutation >*
MutateRowRequest::mutable_mutations() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.v2.MutateRowRequest.mutations)
  return &_impl_.mutations_;
}
inline const ::google::bigtable::v2::Mutation& MutateRowRequest::_internal_mutations(int index) const {
  return _impl_.mutations_.Get(index);
}
inline const ::google::bigtable::v2::Mutation& MutateRowRequest::mutations(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.MutateRowRequest.mutations)
  return _internal_mutations(index);
}
inline ::google::bigtable::v2::Mutation* MutateRowRequest::_internal_add_mutations() {
  return _impl_.mutations_.Add();
}
inline ::google::bigtable::v2::Mutation* MutateRowRequest::add_mutations() {
  ::google::bigtable::v2::Mutation* _add = _internal_add_mutations();
  // @@protoc_insertion_point(field_add:google.bigtable.v2.MutateRowRequest.mutations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::Mutation >&
MutateRowRequest::mutations() const {
  // @@protoc_insertion_point(field_list:google.bigtable.v2.MutateRowRequest.mutations)
  return _impl_.mutations_;
}

// -------------------------------------------------------------------

// MutateRowResponse

// -------------------------------------------------------------------

// MutateRowsRequest_Entry

// bytes row_key = 1;
inline void MutateRowsRequest_Entry::clear_row_key() {
  _impl_.row_key_.ClearToEmpty();
}
inline const std::string& MutateRowsRequest_Entry::row_key() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.MutateRowsRequest.Entry.row_key)
  return _internal_row_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MutateRowsRequest_Entry::set_row_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.row_key_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.bigtable.v2.MutateRowsRequest.Entry.row_key)
}
inline std::string* MutateRowsRequest_Entry::mutable_row_key() {
  std::string* _s = _internal_mutable_row_key();
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.MutateRowsRequest.Entry.row_key)
  return _s;
}
inline const std::string& MutateRowsRequest_Entry::_internal_row_key() const {
  return _impl_.row_key_.Get();
}
inline void MutateRowsRequest_Entry::_internal_set_row_key(const std::string& value) {
  
  _impl_.row_key_.Set(value, GetArenaForAllocation());
}
inline std::string* MutateRowsRequest_Entry::_internal_mutable_row_key() {
  
  return _impl_.row_key_.Mutable(GetArenaForAllocation());
}
inline std::string* MutateRowsRequest_Entry::release_row_key() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.MutateRowsRequest.Entry.row_key)
  return _impl_.row_key_.Release();
}
inline void MutateRowsRequest_Entry::set_allocated_row_key(std::string* row_key) {
  if (row_key != nullptr) {
    
  } else {
    
  }
  _impl_.row_key_.SetAllocated(row_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.row_key_.IsDefault()) {
    _impl_.row_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.MutateRowsRequest.Entry.row_key)
}

// repeated .google.bigtable.v2.Mutation mutations = 2 [(.google.api.field_behavior) = REQUIRED];
inline int MutateRowsRequest_Entry::_internal_mutations_size() const {
  return _impl_.mutations_.size();
}
inline int MutateRowsRequest_Entry::mutations_size() const {
  return _internal_mutations_size();
}
inline ::google::bigtable::v2::Mutation* MutateRowsRequest_Entry::mutable_mutations(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.MutateRowsRequest.Entry.mutations)
  return _impl_.mutations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::Mutation >*
MutateRowsRequest_Entry::mutable_mutations() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.v2.MutateRowsRequest.Entry.mutations)
  return &_impl_.mutations_;
}
inline const ::google::bigtable::v2::Mutation& MutateRowsRequest_Entry::_internal_mutations(int index) const {
  return _impl_.mutations_.Get(index);
}
inline const ::google::bigtable::v2::Mutation& MutateRowsRequest_Entry::mutations(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.MutateRowsRequest.Entry.mutations)
  return _internal_mutations(index);
}
inline ::google::bigtable::v2::Mutation* MutateRowsRequest_Entry::_internal_add_mutations() {
  return _impl_.mutations_.Add();
}
inline ::google::bigtable::v2::Mutation* MutateRowsRequest_Entry::add_mutations() {
  ::google::bigtable::v2::Mutation* _add = _internal_add_mutations();
  // @@protoc_insertion_point(field_add:google.bigtable.v2.MutateRowsRequest.Entry.mutations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::Mutation >&
MutateRowsRequest_Entry::mutations() const {
  // @@protoc_insertion_point(field_list:google.bigtable.v2.MutateRowsRequest.Entry.mutations)
  return _impl_.mutations_;
}

// -------------------------------------------------------------------

// MutateRowsRequest

// string table_name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void MutateRowsRequest::clear_table_name() {
  _impl_.table_name_.ClearToEmpty();
}
inline const std::string& MutateRowsRequest::table_name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.MutateRowsRequest.table_name)
  return _internal_table_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MutateRowsRequest::set_table_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.table_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.bigtable.v2.MutateRowsRequest.table_name)
}
inline std::string* MutateRowsRequest::mutable_table_name() {
  std::string* _s = _internal_mutable_table_name();
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.MutateRowsRequest.table_name)
  return _s;
}
inline const std::string& MutateRowsRequest::_internal_table_name() const {
  return _impl_.table_name_.Get();
}
inline void MutateRowsRequest::_internal_set_table_name(const std::string& value) {
  
  _impl_.table_name_.Set(value, GetArenaForAllocation());
}
inline std::string* MutateRowsRequest::_internal_mutable_table_name() {
  
  return _impl_.table_name_.Mutable(GetArenaForAllocation());
}
inline std::string* MutateRowsRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.MutateRowsRequest.table_name)
  return _impl_.table_name_.Release();
}
inline void MutateRowsRequest::set_allocated_table_name(std::string* table_name) {
  if (table_name != nullptr) {
    
  } else {
    
  }
  _impl_.table_name_.SetAllocated(table_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.table_name_.IsDefault()) {
    _impl_.table_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.MutateRowsRequest.table_name)
}

// string app_profile_id = 3;
inline void MutateRowsRequest::clear_app_profile_id() {
  _impl_.app_profile_id_.ClearToEmpty();
}
inline const std::string& MutateRowsRequest::app_profile_id() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.MutateRowsRequest.app_profile_id)
  return _internal_app_profile_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MutateRowsRequest::set_app_profile_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.app_profile_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.bigtable.v2.MutateRowsRequest.app_profile_id)
}
inline std::string* MutateRowsRequest::mutable_app_profile_id() {
  std::string* _s = _internal_mutable_app_profile_id();
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.MutateRowsRequest.app_profile_id)
  return _s;
}
inline const std::string& MutateRowsRequest::_internal_app_profile_id() const {
  return _impl_.app_profile_id_.Get();
}
inline void MutateRowsRequest::_internal_set_app_profile_id(const std::string& value) {
  
  _impl_.app_profile_id_.Set(value, GetArenaForAllocation());
}
inline std::string* MutateRowsRequest::_internal_mutable_app_profile_id() {
  
  return _impl_.app_profile_id_.Mutable(GetArenaForAllocation());
}
inline std::string* MutateRowsRequest::release_app_profile_id() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.MutateRowsRequest.app_profile_id)
  return _impl_.app_profile_id_.Release();
}
inline void MutateRowsRequest::set_allocated_app_profile_id(std::string* app_profile_id) {
  if (app_profile_id != nullptr) {
    
  } else {
    
  }
  _impl_.app_profile_id_.SetAllocated(app_profile_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.app_profile_id_.IsDefault()) {
    _impl_.app_profile_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.MutateRowsRequest.app_profile_id)
}

// repeated .google.bigtable.v2.MutateRowsRequest.Entry entries = 2 [(.google.api.field_behavior) = REQUIRED];
inline int MutateRowsRequest::_internal_entries_size() const {
  return _impl_.entries_.size();
}
inline int MutateRowsRequest::entries_size() const {
  return _internal_entries_size();
}
inline void MutateRowsRequest::clear_entries() {
  _impl_.entries_.Clear();
}
inline ::google::bigtable::v2::MutateRowsRequest_Entry* MutateRowsRequest::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.MutateRowsRequest.entries)
  return _impl_.entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::MutateRowsRequest_Entry >*
MutateRowsRequest::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.v2.MutateRowsRequest.entries)
  return &_impl_.entries_;
}
inline const ::google::bigtable::v2::MutateRowsRequest_Entry& MutateRowsRequest::_internal_entries(int index) const {
  return _impl_.entries_.Get(index);
}
inline const ::google::bigtable::v2::MutateRowsRequest_Entry& MutateRowsRequest::entries(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.MutateRowsRequest.entries)
  return _internal_entries(index);
}
inline ::google::bigtable::v2::MutateRowsRequest_Entry* MutateRowsRequest::_internal_add_entries() {
  return _impl_.entries_.Add();
}
inline ::google::bigtable::v2::MutateRowsRequest_Entry* MutateRowsRequest::add_entries() {
  ::google::bigtable::v2::MutateRowsRequest_Entry* _add = _internal_add_entries();
  // @@protoc_insertion_point(field_add:google.bigtable.v2.MutateRowsRequest.entries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::MutateRowsRequest_Entry >&
MutateRowsRequest::entries() const {
  // @@protoc_insertion_point(field_list:google.bigtable.v2.MutateRowsRequest.entries)
  return _impl_.entries_;
}

// -------------------------------------------------------------------

// MutateRowsResponse_Entry

// int64 index = 1;
inline void MutateRowsResponse_Entry::clear_index() {
  _impl_.index_ = int64_t{0};
}
inline int64_t MutateRowsResponse_Entry::_internal_index() const {
  return _impl_.index_;
}
inline int64_t MutateRowsResponse_Entry::index() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.MutateRowsResponse.Entry.index)
  return _internal_index();
}
inline void MutateRowsResponse_Entry::_internal_set_index(int64_t value) {
  
  _impl_.index_ = value;
}
inline void MutateRowsResponse_Entry::set_index(int64_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.MutateRowsResponse.Entry.index)
}

// .google.rpc.Status status = 2;
inline bool MutateRowsResponse_Entry::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool MutateRowsResponse_Entry::has_status() const {
  return _internal_has_status();
}
inline const ::google::rpc::Status& MutateRowsResponse_Entry::_internal_status() const {
  const ::google::rpc::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::rpc::Status&>(
      ::google::rpc::_Status_default_instance_);
}
inline const ::google::rpc::Status& MutateRowsResponse_Entry::status() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.MutateRowsResponse.Entry.status)
  return _internal_status();
}
inline void MutateRowsResponse_Entry::unsafe_arena_set_allocated_status(
    ::google::rpc::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.v2.MutateRowsResponse.Entry.status)
}
inline ::google::rpc::Status* MutateRowsResponse_Entry::release_status() {
  
  ::google::rpc::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::rpc::Status* MutateRowsResponse_Entry::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.MutateRowsResponse.Entry.status)
  
  ::google::rpc::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::google::rpc::Status* MutateRowsResponse_Entry::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::rpc::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::google::rpc::Status* MutateRowsResponse_Entry::mutable_status() {
  ::google::rpc::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.MutateRowsResponse.Entry.status)
  return _msg;
}
inline void MutateRowsResponse_Entry::set_allocated_status(::google::rpc::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.MutateRowsResponse.Entry.status)
}

// -------------------------------------------------------------------

// MutateRowsResponse

// repeated .google.bigtable.v2.MutateRowsResponse.Entry entries = 1;
inline int MutateRowsResponse::_internal_entries_size() const {
  return _impl_.entries_.size();
}
inline int MutateRowsResponse::entries_size() const {
  return _internal_entries_size();
}
inline void MutateRowsResponse::clear_entries() {
  _impl_.entries_.Clear();
}
inline ::google::bigtable::v2::MutateRowsResponse_Entry* MutateRowsResponse::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.MutateRowsResponse.entries)
  return _impl_.entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::MutateRowsResponse_Entry >*
MutateRowsResponse::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.v2.MutateRowsResponse.entries)
  return &_impl_.entries_;
}
inline const ::google::bigtable::v2::MutateRowsResponse_Entry& MutateRowsResponse::_internal_entries(int index) const {
  return _impl_.entries_.Get(index);
}
inline const ::google::bigtable::v2::MutateRowsResponse_Entry& MutateRowsResponse::entries(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.MutateRowsResponse.entries)
  return _internal_entries(index);
}
inline ::google::bigtable::v2::MutateRowsResponse_Entry* MutateRowsResponse::_internal_add_entries() {
  return _impl_.entries_.Add();
}
inline ::google::bigtable::v2::MutateRowsResponse_Entry* MutateRowsResponse::add_entries() {
  ::google::bigtable::v2::MutateRowsResponse_Entry* _add = _internal_add_entries();
  // @@protoc_insertion_point(field_add:google.bigtable.v2.MutateRowsResponse.entries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::MutateRowsResponse_Entry >&
MutateRowsResponse::entries() const {
  // @@protoc_insertion_point(field_list:google.bigtable.v2.MutateRowsResponse.entries)
  return _impl_.entries_;
}

// -------------------------------------------------------------------

// CheckAndMutateRowRequest

// string table_name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CheckAndMutateRowRequest::clear_table_name() {
  _impl_.table_name_.ClearToEmpty();
}
inline const std::string& CheckAndMutateRowRequest::table_name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.CheckAndMutateRowRequest.table_name)
  return _internal_table_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CheckAndMutateRowRequest::set_table_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.table_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.bigtable.v2.CheckAndMutateRowRequest.table_name)
}
inline std::string* CheckAndMutateRowRequest::mutable_table_name() {
  std::string* _s = _internal_mutable_table_name();
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.CheckAndMutateRowRequest.table_name)
  return _s;
}
inline const std::string& CheckAndMutateRowRequest::_internal_table_name() const {
  return _impl_.table_name_.Get();
}
inline void CheckAndMutateRowRequest::_internal_set_table_name(const std::string& value) {
  
  _impl_.table_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CheckAndMutateRowRequest::_internal_mutable_table_name() {
  
  return _impl_.table_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CheckAndMutateRowRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.CheckAndMutateRowRequest.table_name)
  return _impl_.table_name_.Release();
}
inline void CheckAndMutateRowRequest::set_allocated_table_name(std::string* table_name) {
  if (table_name != nullptr) {
    
  } else {
    
  }
  _impl_.table_name_.SetAllocated(table_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.table_name_.IsDefault()) {
    _impl_.table_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.CheckAndMutateRowRequest.table_name)
}

// string app_profile_id = 7;
inline void CheckAndMutateRowRequest::clear_app_profile_id() {
  _impl_.app_profile_id_.ClearToEmpty();
}
inline const std::string& CheckAndMutateRowRequest::app_profile_id() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.CheckAndMutateRowRequest.app_profile_id)
  return _internal_app_profile_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CheckAndMutateRowRequest::set_app_profile_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.app_profile_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.bigtable.v2.CheckAndMutateRowRequest.app_profile_id)
}
inline std::string* CheckAndMutateRowRequest::mutable_app_profile_id() {
  std::string* _s = _internal_mutable_app_profile_id();
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.CheckAndMutateRowRequest.app_profile_id)
  return _s;
}
inline const std::string& CheckAndMutateRowRequest::_internal_app_profile_id() const {
  return _impl_.app_profile_id_.Get();
}
inline void CheckAndMutateRowRequest::_internal_set_app_profile_id(const std::string& value) {
  
  _impl_.app_profile_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CheckAndMutateRowRequest::_internal_mutable_app_profile_id() {
  
  return _impl_.app_profile_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CheckAndMutateRowRequest::release_app_profile_id() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.CheckAndMutateRowRequest.app_profile_id)
  return _impl_.app_profile_id_.Release();
}
inline void CheckAndMutateRowRequest::set_allocated_app_profile_id(std::string* app_profile_id) {
  if (app_profile_id != nullptr) {
    
  } else {
    
  }
  _impl_.app_profile_id_.SetAllocated(app_profile_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.app_profile_id_.IsDefault()) {
    _impl_.app_profile_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.CheckAndMutateRowRequest.app_profile_id)
}

// bytes row_key = 2 [(.google.api.field_behavior) = REQUIRED];
inline void CheckAndMutateRowRequest::clear_row_key() {
  _impl_.row_key_.ClearToEmpty();
}
inline const std::string& CheckAndMutateRowRequest::row_key() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.CheckAndMutateRowRequest.row_key)
  return _internal_row_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CheckAndMutateRowRequest::set_row_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.row_key_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.bigtable.v2.CheckAndMutateRowRequest.row_key)
}
inline std::string* CheckAndMutateRowRequest::mutable_row_key() {
  std::string* _s = _internal_mutable_row_key();
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.CheckAndMutateRowRequest.row_key)
  return _s;
}
inline const std::string& CheckAndMutateRowRequest::_internal_row_key() const {
  return _impl_.row_key_.Get();
}
inline void CheckAndMutateRowRequest::_internal_set_row_key(const std::string& value) {
  
  _impl_.row_key_.Set(value, GetArenaForAllocation());
}
inline std::string* CheckAndMutateRowRequest::_internal_mutable_row_key() {
  
  return _impl_.row_key_.Mutable(GetArenaForAllocation());
}
inline std::string* CheckAndMutateRowRequest::release_row_key() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.CheckAndMutateRowRequest.row_key)
  return _impl_.row_key_.Release();
}
inline void CheckAndMutateRowRequest::set_allocated_row_key(std::string* row_key) {
  if (row_key != nullptr) {
    
  } else {
    
  }
  _impl_.row_key_.SetAllocated(row_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.row_key_.IsDefault()) {
    _impl_.row_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.CheckAndMutateRowRequest.row_key)
}

// .google.bigtable.v2.RowFilter predicate_filter = 6;
inline bool CheckAndMutateRowRequest::_internal_has_predicate_filter() const {
  return this != internal_default_instance() && _impl_.predicate_filter_ != nullptr;
}
inline bool CheckAndMutateRowRequest::has_predicate_filter() const {
  return _internal_has_predicate_filter();
}
inline const ::google::bigtable::v2::RowFilter& CheckAndMutateRowRequest::_internal_predicate_filter() const {
  const ::google::bigtable::v2::RowFilter* p = _impl_.predicate_filter_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::bigtable::v2::RowFilter&>(
      ::google::bigtable::v2::_RowFilter_default_instance_);
}
inline const ::google::bigtable::v2::RowFilter& CheckAndMutateRowRequest::predicate_filter() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.CheckAndMutateRowRequest.predicate_filter)
  return _internal_predicate_filter();
}
inline void CheckAndMutateRowRequest::unsafe_arena_set_allocated_predicate_filter(
    ::google::bigtable::v2::RowFilter* predicate_filter) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.predicate_filter_);
  }
  _impl_.predicate_filter_ = predicate_filter;
  if (predicate_filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.v2.CheckAndMutateRowRequest.predicate_filter)
}
inline ::google::bigtable::v2::RowFilter* CheckAndMutateRowRequest::release_predicate_filter() {
  
  ::google::bigtable::v2::RowFilter* temp = _impl_.predicate_filter_;
  _impl_.predicate_filter_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::bigtable::v2::RowFilter* CheckAndMutateRowRequest::unsafe_arena_release_predicate_filter() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.CheckAndMutateRowRequest.predicate_filter)
  
  ::google::bigtable::v2::RowFilter* temp = _impl_.predicate_filter_;
  _impl_.predicate_filter_ = nullptr;
  return temp;
}
inline ::google::bigtable::v2::RowFilter* CheckAndMutateRowRequest::_internal_mutable_predicate_filter() {
  
  if (_impl_.predicate_filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::bigtable::v2::RowFilter>(GetArenaForAllocation());
    _impl_.predicate_filter_ = p;
  }
  return _impl_.predicate_filter_;
}
inline ::google::bigtable::v2::RowFilter* CheckAndMutateRowRequest::mutable_predicate_filter() {
  ::google::bigtable::v2::RowFilter* _msg = _internal_mutable_predicate_filter();
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.CheckAndMutateRowRequest.predicate_filter)
  return _msg;
}
inline void CheckAndMutateRowRequest::set_allocated_predicate_filter(::google::bigtable::v2::RowFilter* predicate_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.predicate_filter_);
  }
  if (predicate_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(predicate_filter));
    if (message_arena != submessage_arena) {
      predicate_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, predicate_filter, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.predicate_filter_ = predicate_filter;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.CheckAndMutateRowRequest.predicate_filter)
}

// repeated .google.bigtable.v2.Mutation true_mutations = 4;
inline int CheckAndMutateRowRequest::_internal_true_mutations_size() const {
  return _impl_.true_mutations_.size();
}
inline int CheckAndMutateRowRequest::true_mutations_size() const {
  return _internal_true_mutations_size();
}
inline ::google::bigtable::v2::Mutation* CheckAndMutateRowRequest::mutable_true_mutations(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.CheckAndMutateRowRequest.true_mutations)
  return _impl_.true_mutations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::Mutation >*
CheckAndMutateRowRequest::mutable_true_mutations() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.v2.CheckAndMutateRowRequest.true_mutations)
  return &_impl_.true_mutations_;
}
inline const ::google::bigtable::v2::Mutation& CheckAndMutateRowRequest::_internal_true_mutations(int index) const {
  return _impl_.true_mutations_.Get(index);
}
inline const ::google::bigtable::v2::Mutation& CheckAndMutateRowRequest::true_mutations(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.CheckAndMutateRowRequest.true_mutations)
  return _internal_true_mutations(index);
}
inline ::google::bigtable::v2::Mutation* CheckAndMutateRowRequest::_internal_add_true_mutations() {
  return _impl_.true_mutations_.Add();
}
inline ::google::bigtable::v2::Mutation* CheckAndMutateRowRequest::add_true_mutations() {
  ::google::bigtable::v2::Mutation* _add = _internal_add_true_mutations();
  // @@protoc_insertion_point(field_add:google.bigtable.v2.CheckAndMutateRowRequest.true_mutations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::Mutation >&
CheckAndMutateRowRequest::true_mutations() const {
  // @@protoc_insertion_point(field_list:google.bigtable.v2.CheckAndMutateRowRequest.true_mutations)
  return _impl_.true_mutations_;
}

// repeated .google.bigtable.v2.Mutation false_mutations = 5;
inline int CheckAndMutateRowRequest::_internal_false_mutations_size() const {
  return _impl_.false_mutations_.size();
}
inline int CheckAndMutateRowRequest::false_mutations_size() const {
  return _internal_false_mutations_size();
}
inline ::google::bigtable::v2::Mutation* CheckAndMutateRowRequest::mutable_false_mutations(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.CheckAndMutateRowRequest.false_mutations)
  return _impl_.false_mutations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::Mutation >*
CheckAndMutateRowRequest::mutable_false_mutations() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.v2.CheckAndMutateRowRequest.false_mutations)
  return &_impl_.false_mutations_;
}
inline const ::google::bigtable::v2::Mutation& CheckAndMutateRowRequest::_internal_false_mutations(int index) const {
  return _impl_.false_mutations_.Get(index);
}
inline const ::google::bigtable::v2::Mutation& CheckAndMutateRowRequest::false_mutations(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.CheckAndMutateRowRequest.false_mutations)
  return _internal_false_mutations(index);
}
inline ::google::bigtable::v2::Mutation* CheckAndMutateRowRequest::_internal_add_false_mutations() {
  return _impl_.false_mutations_.Add();
}
inline ::google::bigtable::v2::Mutation* CheckAndMutateRowRequest::add_false_mutations() {
  ::google::bigtable::v2::Mutation* _add = _internal_add_false_mutations();
  // @@protoc_insertion_point(field_add:google.bigtable.v2.CheckAndMutateRowRequest.false_mutations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::Mutation >&
CheckAndMutateRowRequest::false_mutations() const {
  // @@protoc_insertion_point(field_list:google.bigtable.v2.CheckAndMutateRowRequest.false_mutations)
  return _impl_.false_mutations_;
}

// -------------------------------------------------------------------

// CheckAndMutateRowResponse

// bool predicate_matched = 1;
inline void CheckAndMutateRowResponse::clear_predicate_matched() {
  _impl_.predicate_matched_ = false;
}
inline bool CheckAndMutateRowResponse::_internal_predicate_matched() const {
  return _impl_.predicate_matched_;
}
inline bool CheckAndMutateRowResponse::predicate_matched() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.CheckAndMutateRowResponse.predicate_matched)
  return _internal_predicate_matched();
}
inline void CheckAndMutateRowResponse::_internal_set_predicate_matched(bool value) {
  
  _impl_.predicate_matched_ = value;
}
inline void CheckAndMutateRowResponse::set_predicate_matched(bool value) {
  _internal_set_predicate_matched(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.CheckAndMutateRowResponse.predicate_matched)
}

// -------------------------------------------------------------------

// PingAndWarmRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void PingAndWarmRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& PingAndWarmRequest::name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.PingAndWarmRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PingAndWarmRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.bigtable.v2.PingAndWarmRequest.name)
}
inline std::string* PingAndWarmRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.PingAndWarmRequest.name)
  return _s;
}
inline const std::string& PingAndWarmRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void PingAndWarmRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* PingAndWarmRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* PingAndWarmRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.PingAndWarmRequest.name)
  return _impl_.name_.Release();
}
inline void PingAndWarmRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.PingAndWarmRequest.name)
}

// string app_profile_id = 2;
inline void PingAndWarmRequest::clear_app_profile_id() {
  _impl_.app_profile_id_.ClearToEmpty();
}
inline const std::string& PingAndWarmRequest::app_profile_id() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.PingAndWarmRequest.app_profile_id)
  return _internal_app_profile_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PingAndWarmRequest::set_app_profile_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.app_profile_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.bigtable.v2.PingAndWarmRequest.app_profile_id)
}
inline std::string* PingAndWarmRequest::mutable_app_profile_id() {
  std::string* _s = _internal_mutable_app_profile_id();
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.PingAndWarmRequest.app_profile_id)
  return _s;
}
inline const std::string& PingAndWarmRequest::_internal_app_profile_id() const {
  return _impl_.app_profile_id_.Get();
}
inline void PingAndWarmRequest::_internal_set_app_profile_id(const std::string& value) {
  
  _impl_.app_profile_id_.Set(value, GetArenaForAllocation());
}
inline std::string* PingAndWarmRequest::_internal_mutable_app_profile_id() {
  
  return _impl_.app_profile_id_.Mutable(GetArenaForAllocation());
}
inline std::string* PingAndWarmRequest::release_app_profile_id() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.PingAndWarmRequest.app_profile_id)
  return _impl_.app_profile_id_.Release();
}
inline void PingAndWarmRequest::set_allocated_app_profile_id(std::string* app_profile_id) {
  if (app_profile_id != nullptr) {
    
  } else {
    
  }
  _impl_.app_profile_id_.SetAllocated(app_profile_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.app_profile_id_.IsDefault()) {
    _impl_.app_profile_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.PingAndWarmRequest.app_profile_id)
}

// -------------------------------------------------------------------

// PingAndWarmResponse

// -------------------------------------------------------------------

// ReadModifyWriteRowRequest

// string table_name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ReadModifyWriteRowRequest::clear_table_name() {
  _impl_.table_name_.ClearToEmpty();
}
inline const std::string& ReadModifyWriteRowRequest::table_name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadModifyWriteRowRequest.table_name)
  return _internal_table_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReadModifyWriteRowRequest::set_table_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.table_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadModifyWriteRowRequest.table_name)
}
inline std::string* ReadModifyWriteRowRequest::mutable_table_name() {
  std::string* _s = _internal_mutable_table_name();
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadModifyWriteRowRequest.table_name)
  return _s;
}
inline const std::string& ReadModifyWriteRowRequest::_internal_table_name() const {
  return _impl_.table_name_.Get();
}
inline void ReadModifyWriteRowRequest::_internal_set_table_name(const std::string& value) {
  
  _impl_.table_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ReadModifyWriteRowRequest::_internal_mutable_table_name() {
  
  return _impl_.table_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ReadModifyWriteRowRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ReadModifyWriteRowRequest.table_name)
  return _impl_.table_name_.Release();
}
inline void ReadModifyWriteRowRequest::set_allocated_table_name(std::string* table_name) {
  if (table_name != nullptr) {
    
  } else {
    
  }
  _impl_.table_name_.SetAllocated(table_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.table_name_.IsDefault()) {
    _impl_.table_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ReadModifyWriteRowRequest.table_name)
}

// string app_profile_id = 4;
inline void ReadModifyWriteRowRequest::clear_app_profile_id() {
  _impl_.app_profile_id_.ClearToEmpty();
}
inline const std::string& ReadModifyWriteRowRequest::app_profile_id() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadModifyWriteRowRequest.app_profile_id)
  return _internal_app_profile_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReadModifyWriteRowRequest::set_app_profile_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.app_profile_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadModifyWriteRowRequest.app_profile_id)
}
inline std::string* ReadModifyWriteRowRequest::mutable_app_profile_id() {
  std::string* _s = _internal_mutable_app_profile_id();
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadModifyWriteRowRequest.app_profile_id)
  return _s;
}
inline const std::string& ReadModifyWriteRowRequest::_internal_app_profile_id() const {
  return _impl_.app_profile_id_.Get();
}
inline void ReadModifyWriteRowRequest::_internal_set_app_profile_id(const std::string& value) {
  
  _impl_.app_profile_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ReadModifyWriteRowRequest::_internal_mutable_app_profile_id() {
  
  return _impl_.app_profile_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ReadModifyWriteRowRequest::release_app_profile_id() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ReadModifyWriteRowRequest.app_profile_id)
  return _impl_.app_profile_id_.Release();
}
inline void ReadModifyWriteRowRequest::set_allocated_app_profile_id(std::string* app_profile_id) {
  if (app_profile_id != nullptr) {
    
  } else {
    
  }
  _impl_.app_profile_id_.SetAllocated(app_profile_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.app_profile_id_.IsDefault()) {
    _impl_.app_profile_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ReadModifyWriteRowRequest.app_profile_id)
}

// bytes row_key = 2 [(.google.api.field_behavior) = REQUIRED];
inline void ReadModifyWriteRowRequest::clear_row_key() {
  _impl_.row_key_.ClearToEmpty();
}
inline const std::string& ReadModifyWriteRowRequest::row_key() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadModifyWriteRowRequest.row_key)
  return _internal_row_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReadModifyWriteRowRequest::set_row_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.row_key_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadModifyWriteRowRequest.row_key)
}
inline std::string* ReadModifyWriteRowRequest::mutable_row_key() {
  std::string* _s = _internal_mutable_row_key();
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadModifyWriteRowRequest.row_key)
  return _s;
}
inline const std::string& ReadModifyWriteRowRequest::_internal_row_key() const {
  return _impl_.row_key_.Get();
}
inline void ReadModifyWriteRowRequest::_internal_set_row_key(const std::string& value) {
  
  _impl_.row_key_.Set(value, GetArenaForAllocation());
}
inline std::string* ReadModifyWriteRowRequest::_internal_mutable_row_key() {
  
  return _impl_.row_key_.Mutable(GetArenaForAllocation());
}
inline std::string* ReadModifyWriteRowRequest::release_row_key() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ReadModifyWriteRowRequest.row_key)
  return _impl_.row_key_.Release();
}
inline void ReadModifyWriteRowRequest::set_allocated_row_key(std::string* row_key) {
  if (row_key != nullptr) {
    
  } else {
    
  }
  _impl_.row_key_.SetAllocated(row_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.row_key_.IsDefault()) {
    _impl_.row_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ReadModifyWriteRowRequest.row_key)
}

// repeated .google.bigtable.v2.ReadModifyWriteRule rules = 3 [(.google.api.field_behavior) = REQUIRED];
inline int ReadModifyWriteRowRequest::_internal_rules_size() const {
  return _impl_.rules_.size();
}
inline int ReadModifyWriteRowRequest::rules_size() const {
  return _internal_rules_size();
}
inline ::google::bigtable::v2::ReadModifyWriteRule* ReadModifyWriteRowRequest::mutable_rules(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadModifyWriteRowRequest.rules)
  return _impl_.rules_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::ReadModifyWriteRule >*
ReadModifyWriteRowRequest::mutable_rules() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.v2.ReadModifyWriteRowRequest.rules)
  return &_impl_.rules_;
}
inline const ::google::bigtable::v2::ReadModifyWriteRule& ReadModifyWriteRowRequest::_internal_rules(int index) const {
  return _impl_.rules_.Get(index);
}
inline const ::google::bigtable::v2::ReadModifyWriteRule& ReadModifyWriteRowRequest::rules(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadModifyWriteRowRequest.rules)
  return _internal_rules(index);
}
inline ::google::bigtable::v2::ReadModifyWriteRule* ReadModifyWriteRowRequest::_internal_add_rules() {
  return _impl_.rules_.Add();
}
inline ::google::bigtable::v2::ReadModifyWriteRule* ReadModifyWriteRowRequest::add_rules() {
  ::google::bigtable::v2::ReadModifyWriteRule* _add = _internal_add_rules();
  // @@protoc_insertion_point(field_add:google.bigtable.v2.ReadModifyWriteRowRequest.rules)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::ReadModifyWriteRule >&
ReadModifyWriteRowRequest::rules() const {
  // @@protoc_insertion_point(field_list:google.bigtable.v2.ReadModifyWriteRowRequest.rules)
  return _impl_.rules_;
}

// -------------------------------------------------------------------

// ReadModifyWriteRowResponse

// .google.bigtable.v2.Row row = 1;
inline bool ReadModifyWriteRowResponse::_internal_has_row() const {
  return this != internal_default_instance() && _impl_.row_ != nullptr;
}
inline bool ReadModifyWriteRowResponse::has_row() const {
  return _internal_has_row();
}
inline const ::google::bigtable::v2::Row& ReadModifyWriteRowResponse::_internal_row() const {
  const ::google::bigtable::v2::Row* p = _impl_.row_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::bigtable::v2::Row&>(
      ::google::bigtable::v2::_Row_default_instance_);
}
inline const ::google::bigtable::v2::Row& ReadModifyWriteRowResponse::row() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadModifyWriteRowResponse.row)
  return _internal_row();
}
inline void ReadModifyWriteRowResponse::unsafe_arena_set_allocated_row(
    ::google::bigtable::v2::Row* row) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.row_);
  }
  _impl_.row_ = row;
  if (row) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.v2.ReadModifyWriteRowResponse.row)
}
inline ::google::bigtable::v2::Row* ReadModifyWriteRowResponse::release_row() {
  
  ::google::bigtable::v2::Row* temp = _impl_.row_;
  _impl_.row_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::bigtable::v2::Row* ReadModifyWriteRowResponse::unsafe_arena_release_row() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ReadModifyWriteRowResponse.row)
  
  ::google::bigtable::v2::Row* temp = _impl_.row_;
  _impl_.row_ = nullptr;
  return temp;
}
inline ::google::bigtable::v2::Row* ReadModifyWriteRowResponse::_internal_mutable_row() {
  
  if (_impl_.row_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::bigtable::v2::Row>(GetArenaForAllocation());
    _impl_.row_ = p;
  }
  return _impl_.row_;
}
inline ::google::bigtable::v2::Row* ReadModifyWriteRowResponse::mutable_row() {
  ::google::bigtable::v2::Row* _msg = _internal_mutable_row();
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadModifyWriteRowResponse.row)
  return _msg;
}
inline void ReadModifyWriteRowResponse::set_allocated_row(::google::bigtable::v2::Row* row) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.row_);
  }
  if (row) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(row));
    if (message_arena != submessage_arena) {
      row = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, row, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.row_ = row;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ReadModifyWriteRowResponse.row)
}

// -------------------------------------------------------------------

// GenerateInitialChangeStreamPartitionsRequest

// string table_name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GenerateInitialChangeStreamPartitionsRequest::clear_table_name() {
  _impl_.table_name_.ClearToEmpty();
}
inline const std::string& GenerateInitialChangeStreamPartitionsRequest::table_name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.GenerateInitialChangeStreamPartitionsRequest.table_name)
  return _internal_table_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenerateInitialChangeStreamPartitionsRequest::set_table_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.table_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.bigtable.v2.GenerateInitialChangeStreamPartitionsRequest.table_name)
}
inline std::string* GenerateInitialChangeStreamPartitionsRequest::mutable_table_name() {
  std::string* _s = _internal_mutable_table_name();
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.GenerateInitialChangeStreamPartitionsRequest.table_name)
  return _s;
}
inline const std::string& GenerateInitialChangeStreamPartitionsRequest::_internal_table_name() const {
  return _impl_.table_name_.Get();
}
inline void GenerateInitialChangeStreamPartitionsRequest::_internal_set_table_name(const std::string& value) {
  
  _impl_.table_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GenerateInitialChangeStreamPartitionsRequest::_internal_mutable_table_name() {
  
  return _impl_.table_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GenerateInitialChangeStreamPartitionsRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.GenerateInitialChangeStreamPartitionsRequest.table_name)
  return _impl_.table_name_.Release();
}
inline void GenerateInitialChangeStreamPartitionsRequest::set_allocated_table_name(std::string* table_name) {
  if (table_name != nullptr) {
    
  } else {
    
  }
  _impl_.table_name_.SetAllocated(table_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.table_name_.IsDefault()) {
    _impl_.table_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.GenerateInitialChangeStreamPartitionsRequest.table_name)
}

// string app_profile_id = 2;
inline void GenerateInitialChangeStreamPartitionsRequest::clear_app_profile_id() {
  _impl_.app_profile_id_.ClearToEmpty();
}
inline const std::string& GenerateInitialChangeStreamPartitionsRequest::app_profile_id() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.GenerateInitialChangeStreamPartitionsRequest.app_profile_id)
  return _internal_app_profile_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenerateInitialChangeStreamPartitionsRequest::set_app_profile_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.app_profile_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.bigtable.v2.GenerateInitialChangeStreamPartitionsRequest.app_profile_id)
}
inline std::string* GenerateInitialChangeStreamPartitionsRequest::mutable_app_profile_id() {
  std::string* _s = _internal_mutable_app_profile_id();
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.GenerateInitialChangeStreamPartitionsRequest.app_profile_id)
  return _s;
}
inline const std::string& GenerateInitialChangeStreamPartitionsRequest::_internal_app_profile_id() const {
  return _impl_.app_profile_id_.Get();
}
inline void GenerateInitialChangeStreamPartitionsRequest::_internal_set_app_profile_id(const std::string& value) {
  
  _impl_.app_profile_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GenerateInitialChangeStreamPartitionsRequest::_internal_mutable_app_profile_id() {
  
  return _impl_.app_profile_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GenerateInitialChangeStreamPartitionsRequest::release_app_profile_id() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.GenerateInitialChangeStreamPartitionsRequest.app_profile_id)
  return _impl_.app_profile_id_.Release();
}
inline void GenerateInitialChangeStreamPartitionsRequest::set_allocated_app_profile_id(std::string* app_profile_id) {
  if (app_profile_id != nullptr) {
    
  } else {
    
  }
  _impl_.app_profile_id_.SetAllocated(app_profile_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.app_profile_id_.IsDefault()) {
    _impl_.app_profile_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.GenerateInitialChangeStreamPartitionsRequest.app_profile_id)
}

// -------------------------------------------------------------------

// GenerateInitialChangeStreamPartitionsResponse

// .google.bigtable.v2.StreamPartition partition = 1;
inline bool GenerateInitialChangeStreamPartitionsResponse::_internal_has_partition() const {
  return this != internal_default_instance() && _impl_.partition_ != nullptr;
}
inline bool GenerateInitialChangeStreamPartitionsResponse::has_partition() const {
  return _internal_has_partition();
}
inline const ::google::bigtable::v2::StreamPartition& GenerateInitialChangeStreamPartitionsResponse::_internal_partition() const {
  const ::google::bigtable::v2::StreamPartition* p = _impl_.partition_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::bigtable::v2::StreamPartition&>(
      ::google::bigtable::v2::_StreamPartition_default_instance_);
}
inline const ::google::bigtable::v2::StreamPartition& GenerateInitialChangeStreamPartitionsResponse::partition() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.GenerateInitialChangeStreamPartitionsResponse.partition)
  return _internal_partition();
}
inline void GenerateInitialChangeStreamPartitionsResponse::unsafe_arena_set_allocated_partition(
    ::google::bigtable::v2::StreamPartition* partition) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.partition_);
  }
  _impl_.partition_ = partition;
  if (partition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.v2.GenerateInitialChangeStreamPartitionsResponse.partition)
}
inline ::google::bigtable::v2::StreamPartition* GenerateInitialChangeStreamPartitionsResponse::release_partition() {
  
  ::google::bigtable::v2::StreamPartition* temp = _impl_.partition_;
  _impl_.partition_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::bigtable::v2::StreamPartition* GenerateInitialChangeStreamPartitionsResponse::unsafe_arena_release_partition() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.GenerateInitialChangeStreamPartitionsResponse.partition)
  
  ::google::bigtable::v2::StreamPartition* temp = _impl_.partition_;
  _impl_.partition_ = nullptr;
  return temp;
}
inline ::google::bigtable::v2::StreamPartition* GenerateInitialChangeStreamPartitionsResponse::_internal_mutable_partition() {
  
  if (_impl_.partition_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::bigtable::v2::StreamPartition>(GetArenaForAllocation());
    _impl_.partition_ = p;
  }
  return _impl_.partition_;
}
inline ::google::bigtable::v2::StreamPartition* GenerateInitialChangeStreamPartitionsResponse::mutable_partition() {
  ::google::bigtable::v2::StreamPartition* _msg = _internal_mutable_partition();
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.GenerateInitialChangeStreamPartitionsResponse.partition)
  return _msg;
}
inline void GenerateInitialChangeStreamPartitionsResponse::set_allocated_partition(::google::bigtable::v2::StreamPartition* partition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.partition_);
  }
  if (partition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(partition));
    if (message_arena != submessage_arena) {
      partition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, partition, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.partition_ = partition;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.GenerateInitialChangeStreamPartitionsResponse.partition)
}

// -------------------------------------------------------------------

// ReadChangeStreamRequest

// string table_name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ReadChangeStreamRequest::clear_table_name() {
  _impl_.table_name_.ClearToEmpty();
}
inline const std::string& ReadChangeStreamRequest::table_name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadChangeStreamRequest.table_name)
  return _internal_table_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReadChangeStreamRequest::set_table_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.table_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadChangeStreamRequest.table_name)
}
inline std::string* ReadChangeStreamRequest::mutable_table_name() {
  std::string* _s = _internal_mutable_table_name();
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadChangeStreamRequest.table_name)
  return _s;
}
inline const std::string& ReadChangeStreamRequest::_internal_table_name() const {
  return _impl_.table_name_.Get();
}
inline void ReadChangeStreamRequest::_internal_set_table_name(const std::string& value) {
  
  _impl_.table_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ReadChangeStreamRequest::_internal_mutable_table_name() {
  
  return _impl_.table_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ReadChangeStreamRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ReadChangeStreamRequest.table_name)
  return _impl_.table_name_.Release();
}
inline void ReadChangeStreamRequest::set_allocated_table_name(std::string* table_name) {
  if (table_name != nullptr) {
    
  } else {
    
  }
  _impl_.table_name_.SetAllocated(table_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.table_name_.IsDefault()) {
    _impl_.table_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ReadChangeStreamRequest.table_name)
}

// string app_profile_id = 2;
inline void ReadChangeStreamRequest::clear_app_profile_id() {
  _impl_.app_profile_id_.ClearToEmpty();
}
inline const std::string& ReadChangeStreamRequest::app_profile_id() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadChangeStreamRequest.app_profile_id)
  return _internal_app_profile_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReadChangeStreamRequest::set_app_profile_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.app_profile_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadChangeStreamRequest.app_profile_id)
}
inline std::string* ReadChangeStreamRequest::mutable_app_profile_id() {
  std::string* _s = _internal_mutable_app_profile_id();
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadChangeStreamRequest.app_profile_id)
  return _s;
}
inline const std::string& ReadChangeStreamRequest::_internal_app_profile_id() const {
  return _impl_.app_profile_id_.Get();
}
inline void ReadChangeStreamRequest::_internal_set_app_profile_id(const std::string& value) {
  
  _impl_.app_profile_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ReadChangeStreamRequest::_internal_mutable_app_profile_id() {
  
  return _impl_.app_profile_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ReadChangeStreamRequest::release_app_profile_id() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ReadChangeStreamRequest.app_profile_id)
  return _impl_.app_profile_id_.Release();
}
inline void ReadChangeStreamRequest::set_allocated_app_profile_id(std::string* app_profile_id) {
  if (app_profile_id != nullptr) {
    
  } else {
    
  }
  _impl_.app_profile_id_.SetAllocated(app_profile_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.app_profile_id_.IsDefault()) {
    _impl_.app_profile_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ReadChangeStreamRequest.app_profile_id)
}

// .google.bigtable.v2.StreamPartition partition = 3;
inline bool ReadChangeStreamRequest::_internal_has_partition() const {
  return this != internal_default_instance() && _impl_.partition_ != nullptr;
}
inline bool ReadChangeStreamRequest::has_partition() const {
  return _internal_has_partition();
}
inline const ::google::bigtable::v2::StreamPartition& ReadChangeStreamRequest::_internal_partition() const {
  const ::google::bigtable::v2::StreamPartition* p = _impl_.partition_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::bigtable::v2::StreamPartition&>(
      ::google::bigtable::v2::_StreamPartition_default_instance_);
}
inline const ::google::bigtable::v2::StreamPartition& ReadChangeStreamRequest::partition() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadChangeStreamRequest.partition)
  return _internal_partition();
}
inline void ReadChangeStreamRequest::unsafe_arena_set_allocated_partition(
    ::google::bigtable::v2::StreamPartition* partition) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.partition_);
  }
  _impl_.partition_ = partition;
  if (partition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.v2.ReadChangeStreamRequest.partition)
}
inline ::google::bigtable::v2::StreamPartition* ReadChangeStreamRequest::release_partition() {
  
  ::google::bigtable::v2::StreamPartition* temp = _impl_.partition_;
  _impl_.partition_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::bigtable::v2::StreamPartition* ReadChangeStreamRequest::unsafe_arena_release_partition() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ReadChangeStreamRequest.partition)
  
  ::google::bigtable::v2::StreamPartition* temp = _impl_.partition_;
  _impl_.partition_ = nullptr;
  return temp;
}
inline ::google::bigtable::v2::StreamPartition* ReadChangeStreamRequest::_internal_mutable_partition() {
  
  if (_impl_.partition_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::bigtable::v2::StreamPartition>(GetArenaForAllocation());
    _impl_.partition_ = p;
  }
  return _impl_.partition_;
}
inline ::google::bigtable::v2::StreamPartition* ReadChangeStreamRequest::mutable_partition() {
  ::google::bigtable::v2::StreamPartition* _msg = _internal_mutable_partition();
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadChangeStreamRequest.partition)
  return _msg;
}
inline void ReadChangeStreamRequest::set_allocated_partition(::google::bigtable::v2::StreamPartition* partition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.partition_);
  }
  if (partition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(partition));
    if (message_arena != submessage_arena) {
      partition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, partition, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.partition_ = partition;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ReadChangeStreamRequest.partition)
}

// .google.protobuf.Timestamp start_time = 4;
inline bool ReadChangeStreamRequest::_internal_has_start_time() const {
  return start_from_case() == kStartTime;
}
inline bool ReadChangeStreamRequest::has_start_time() const {
  return _internal_has_start_time();
}
inline void ReadChangeStreamRequest::set_has_start_time() {
  _impl_._oneof_case_[0] = kStartTime;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ReadChangeStreamRequest::release_start_time() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ReadChangeStreamRequest.start_time)
  if (_internal_has_start_time()) {
    clear_has_start_from();
    ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.start_from_.start_time_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.start_from_.start_time_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ReadChangeStreamRequest::_internal_start_time() const {
  return _internal_has_start_time()
      ? *_impl_.start_from_.start_time_
      : reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::Timestamp&>(::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ReadChangeStreamRequest::start_time() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadChangeStreamRequest.start_time)
  return _internal_start_time();
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ReadChangeStreamRequest::unsafe_arena_release_start_time() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.bigtable.v2.ReadChangeStreamRequest.start_time)
  if (_internal_has_start_time()) {
    clear_has_start_from();
    ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.start_from_.start_time_;
    _impl_.start_from_.start_time_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReadChangeStreamRequest::unsafe_arena_set_allocated_start_time(::PROTOBUF_NAMESPACE_ID::Timestamp* start_time) {
  clear_start_from();
  if (start_time) {
    set_has_start_time();
    _impl_.start_from_.start_time_ = start_time;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.v2.ReadChangeStreamRequest.start_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ReadChangeStreamRequest::_internal_mutable_start_time() {
  if (!_internal_has_start_time()) {
    clear_start_from();
    set_has_start_time();
    _impl_.start_from_.start_time_ = CreateMaybeMessage< ::PROTOBUF_NAMESPACE_ID::Timestamp >(GetArenaForAllocation());
  }
  return _impl_.start_from_.start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ReadChangeStreamRequest::mutable_start_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_start_time();
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadChangeStreamRequest.start_time)
  return _msg;
}

// .google.bigtable.v2.StreamContinuationTokens continuation_tokens = 6;
inline bool ReadChangeStreamRequest::_internal_has_continuation_tokens() const {
  return start_from_case() == kContinuationTokens;
}
inline bool ReadChangeStreamRequest::has_continuation_tokens() const {
  return _internal_has_continuation_tokens();
}
inline void ReadChangeStreamRequest::set_has_continuation_tokens() {
  _impl_._oneof_case_[0] = kContinuationTokens;
}
inline ::google::bigtable::v2::StreamContinuationTokens* ReadChangeStreamRequest::release_continuation_tokens() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ReadChangeStreamRequest.continuation_tokens)
  if (_internal_has_continuation_tokens()) {
    clear_has_start_from();
    ::google::bigtable::v2::StreamContinuationTokens* temp = _impl_.start_from_.continuation_tokens_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.start_from_.continuation_tokens_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::bigtable::v2::StreamContinuationTokens& ReadChangeStreamRequest::_internal_continuation_tokens() const {
  return _internal_has_continuation_tokens()
      ? *_impl_.start_from_.continuation_tokens_
      : reinterpret_cast< ::google::bigtable::v2::StreamContinuationTokens&>(::google::bigtable::v2::_StreamContinuationTokens_default_instance_);
}
inline const ::google::bigtable::v2::StreamContinuationTokens& ReadChangeStreamRequest::continuation_tokens() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadChangeStreamRequest.continuation_tokens)
  return _internal_continuation_tokens();
}
inline ::google::bigtable::v2::StreamContinuationTokens* ReadChangeStreamRequest::unsafe_arena_release_continuation_tokens() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.bigtable.v2.ReadChangeStreamRequest.continuation_tokens)
  if (_internal_has_continuation_tokens()) {
    clear_has_start_from();
    ::google::bigtable::v2::StreamContinuationTokens* temp = _impl_.start_from_.continuation_tokens_;
    _impl_.start_from_.continuation_tokens_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReadChangeStreamRequest::unsafe_arena_set_allocated_continuation_tokens(::google::bigtable::v2::StreamContinuationTokens* continuation_tokens) {
  clear_start_from();
  if (continuation_tokens) {
    set_has_continuation_tokens();
    _impl_.start_from_.continuation_tokens_ = continuation_tokens;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.v2.ReadChangeStreamRequest.continuation_tokens)
}
inline ::google::bigtable::v2::StreamContinuationTokens* ReadChangeStreamRequest::_internal_mutable_continuation_tokens() {
  if (!_internal_has_continuation_tokens()) {
    clear_start_from();
    set_has_continuation_tokens();
    _impl_.start_from_.continuation_tokens_ = CreateMaybeMessage< ::google::bigtable::v2::StreamContinuationTokens >(GetArenaForAllocation());
  }
  return _impl_.start_from_.continuation_tokens_;
}
inline ::google::bigtable::v2::StreamContinuationTokens* ReadChangeStreamRequest::mutable_continuation_tokens() {
  ::google::bigtable::v2::StreamContinuationTokens* _msg = _internal_mutable_continuation_tokens();
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadChangeStreamRequest.continuation_tokens)
  return _msg;
}

// .google.protobuf.Timestamp end_time = 5;
inline bool ReadChangeStreamRequest::_internal_has_end_time() const {
  return this != internal_default_instance() && _impl_.end_time_ != nullptr;
}
inline bool ReadChangeStreamRequest::has_end_time() const {
  return _internal_has_end_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ReadChangeStreamRequest::_internal_end_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.end_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ReadChangeStreamRequest::end_time() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadChangeStreamRequest.end_time)
  return _internal_end_time();
}
inline void ReadChangeStreamRequest::unsafe_arena_set_allocated_end_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.end_time_);
  }
  _impl_.end_time_ = end_time;
  if (end_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.v2.ReadChangeStreamRequest.end_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ReadChangeStreamRequest::release_end_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.end_time_;
  _impl_.end_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ReadChangeStreamRequest::unsafe_arena_release_end_time() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ReadChangeStreamRequest.end_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.end_time_;
  _impl_.end_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ReadChangeStreamRequest::_internal_mutable_end_time() {
  
  if (_impl_.end_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.end_time_ = p;
  }
  return _impl_.end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ReadChangeStreamRequest::mutable_end_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_end_time();
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadChangeStreamRequest.end_time)
  return _msg;
}
inline void ReadChangeStreamRequest::set_allocated_end_time(::PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.end_time_);
  }
  if (end_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time));
    if (message_arena != submessage_arena) {
      end_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.end_time_ = end_time;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ReadChangeStreamRequest.end_time)
}

// .google.protobuf.Duration heartbeat_duration = 7;
inline bool ReadChangeStreamRequest::_internal_has_heartbeat_duration() const {
  return this != internal_default_instance() && _impl_.heartbeat_duration_ != nullptr;
}
inline bool ReadChangeStreamRequest::has_heartbeat_duration() const {
  return _internal_has_heartbeat_duration();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& ReadChangeStreamRequest::_internal_heartbeat_duration() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.heartbeat_duration_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& ReadChangeStreamRequest::heartbeat_duration() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadChangeStreamRequest.heartbeat_duration)
  return _internal_heartbeat_duration();
}
inline void ReadChangeStreamRequest::unsafe_arena_set_allocated_heartbeat_duration(
    ::PROTOBUF_NAMESPACE_ID::Duration* heartbeat_duration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.heartbeat_duration_);
  }
  _impl_.heartbeat_duration_ = heartbeat_duration;
  if (heartbeat_duration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.v2.ReadChangeStreamRequest.heartbeat_duration)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* ReadChangeStreamRequest::release_heartbeat_duration() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.heartbeat_duration_;
  _impl_.heartbeat_duration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* ReadChangeStreamRequest::unsafe_arena_release_heartbeat_duration() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ReadChangeStreamRequest.heartbeat_duration)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.heartbeat_duration_;
  _impl_.heartbeat_duration_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* ReadChangeStreamRequest::_internal_mutable_heartbeat_duration() {
  
  if (_impl_.heartbeat_duration_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.heartbeat_duration_ = p;
  }
  return _impl_.heartbeat_duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* ReadChangeStreamRequest::mutable_heartbeat_duration() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_heartbeat_duration();
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadChangeStreamRequest.heartbeat_duration)
  return _msg;
}
inline void ReadChangeStreamRequest::set_allocated_heartbeat_duration(::PROTOBUF_NAMESPACE_ID::Duration* heartbeat_duration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.heartbeat_duration_);
  }
  if (heartbeat_duration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(heartbeat_duration));
    if (message_arena != submessage_arena) {
      heartbeat_duration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heartbeat_duration, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.heartbeat_duration_ = heartbeat_duration;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ReadChangeStreamRequest.heartbeat_duration)
}

inline bool ReadChangeStreamRequest::has_start_from() const {
  return start_from_case() != START_FROM_NOT_SET;
}
inline void ReadChangeStreamRequest::clear_has_start_from() {
  _impl_._oneof_case_[0] = START_FROM_NOT_SET;
}
inline ReadChangeStreamRequest::StartFromCase ReadChangeStreamRequest::start_from_case() const {
  return ReadChangeStreamRequest::StartFromCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ReadChangeStreamResponse_MutationChunk_ChunkInfo

// int32 chunked_value_size = 1;
inline void ReadChangeStreamResponse_MutationChunk_ChunkInfo::clear_chunked_value_size() {
  _impl_.chunked_value_size_ = 0;
}
inline int32_t ReadChangeStreamResponse_MutationChunk_ChunkInfo::_internal_chunked_value_size() const {
  return _impl_.chunked_value_size_;
}
inline int32_t ReadChangeStreamResponse_MutationChunk_ChunkInfo::chunked_value_size() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadChangeStreamResponse.MutationChunk.ChunkInfo.chunked_value_size)
  return _internal_chunked_value_size();
}
inline void ReadChangeStreamResponse_MutationChunk_ChunkInfo::_internal_set_chunked_value_size(int32_t value) {
  
  _impl_.chunked_value_size_ = value;
}
inline void ReadChangeStreamResponse_MutationChunk_ChunkInfo::set_chunked_value_size(int32_t value) {
  _internal_set_chunked_value_size(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadChangeStreamResponse.MutationChunk.ChunkInfo.chunked_value_size)
}

// int32 chunked_value_offset = 2;
inline void ReadChangeStreamResponse_MutationChunk_ChunkInfo::clear_chunked_value_offset() {
  _impl_.chunked_value_offset_ = 0;
}
inline int32_t ReadChangeStreamResponse_MutationChunk_ChunkInfo::_internal_chunked_value_offset() const {
  return _impl_.chunked_value_offset_;
}
inline int32_t ReadChangeStreamResponse_MutationChunk_ChunkInfo::chunked_value_offset() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadChangeStreamResponse.MutationChunk.ChunkInfo.chunked_value_offset)
  return _internal_chunked_value_offset();
}
inline void ReadChangeStreamResponse_MutationChunk_ChunkInfo::_internal_set_chunked_value_offset(int32_t value) {
  
  _impl_.chunked_value_offset_ = value;
}
inline void ReadChangeStreamResponse_MutationChunk_ChunkInfo::set_chunked_value_offset(int32_t value) {
  _internal_set_chunked_value_offset(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadChangeStreamResponse.MutationChunk.ChunkInfo.chunked_value_offset)
}

// bool last_chunk = 3;
inline void ReadChangeStreamResponse_MutationChunk_ChunkInfo::clear_last_chunk() {
  _impl_.last_chunk_ = false;
}
inline bool ReadChangeStreamResponse_MutationChunk_ChunkInfo::_internal_last_chunk() const {
  return _impl_.last_chunk_;
}
inline bool ReadChangeStreamResponse_MutationChunk_ChunkInfo::last_chunk() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadChangeStreamResponse.MutationChunk.ChunkInfo.last_chunk)
  return _internal_last_chunk();
}
inline void ReadChangeStreamResponse_MutationChunk_ChunkInfo::_internal_set_last_chunk(bool value) {
  
  _impl_.last_chunk_ = value;
}
inline void ReadChangeStreamResponse_MutationChunk_ChunkInfo::set_last_chunk(bool value) {
  _internal_set_last_chunk(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadChangeStreamResponse.MutationChunk.ChunkInfo.last_chunk)
}

// -------------------------------------------------------------------

// ReadChangeStreamResponse_MutationChunk

// .google.bigtable.v2.ReadChangeStreamResponse.MutationChunk.ChunkInfo chunk_info = 1;
inline bool ReadChangeStreamResponse_MutationChunk::_internal_has_chunk_info() const {
  return this != internal_default_instance() && _impl_.chunk_info_ != nullptr;
}
inline bool ReadChangeStreamResponse_MutationChunk::has_chunk_info() const {
  return _internal_has_chunk_info();
}
inline void ReadChangeStreamResponse_MutationChunk::clear_chunk_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.chunk_info_ != nullptr) {
    delete _impl_.chunk_info_;
  }
  _impl_.chunk_info_ = nullptr;
}
inline const ::google::bigtable::v2::ReadChangeStreamResponse_MutationChunk_ChunkInfo& ReadChangeStreamResponse_MutationChunk::_internal_chunk_info() const {
  const ::google::bigtable::v2::ReadChangeStreamResponse_MutationChunk_ChunkInfo* p = _impl_.chunk_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::bigtable::v2::ReadChangeStreamResponse_MutationChunk_ChunkInfo&>(
      ::google::bigtable::v2::_ReadChangeStreamResponse_MutationChunk_ChunkInfo_default_instance_);
}
inline const ::google::bigtable::v2::ReadChangeStreamResponse_MutationChunk_ChunkInfo& ReadChangeStreamResponse_MutationChunk::chunk_info() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadChangeStreamResponse.MutationChunk.chunk_info)
  return _internal_chunk_info();
}
inline void ReadChangeStreamResponse_MutationChunk::unsafe_arena_set_allocated_chunk_info(
    ::google::bigtable::v2::ReadChangeStreamResponse_MutationChunk_ChunkInfo* chunk_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chunk_info_);
  }
  _impl_.chunk_info_ = chunk_info;
  if (chunk_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.v2.ReadChangeStreamResponse.MutationChunk.chunk_info)
}
inline ::google::bigtable::v2::ReadChangeStreamResponse_MutationChunk_ChunkInfo* ReadChangeStreamResponse_MutationChunk::release_chunk_info() {
  
  ::google::bigtable::v2::ReadChangeStreamResponse_MutationChunk_ChunkInfo* temp = _impl_.chunk_info_;
  _impl_.chunk_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::bigtable::v2::ReadChangeStreamResponse_MutationChunk_ChunkInfo* ReadChangeStreamResponse_MutationChunk::unsafe_arena_release_chunk_info() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ReadChangeStreamResponse.MutationChunk.chunk_info)
  
  ::google::bigtable::v2::ReadChangeStreamResponse_MutationChunk_ChunkInfo* temp = _impl_.chunk_info_;
  _impl_.chunk_info_ = nullptr;
  return temp;
}
inline ::google::bigtable::v2::ReadChangeStreamResponse_MutationChunk_ChunkInfo* ReadChangeStreamResponse_MutationChunk::_internal_mutable_chunk_info() {
  
  if (_impl_.chunk_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::bigtable::v2::ReadChangeStreamResponse_MutationChunk_ChunkInfo>(GetArenaForAllocation());
    _impl_.chunk_info_ = p;
  }
  return _impl_.chunk_info_;
}
inline ::google::bigtable::v2::ReadChangeStreamResponse_MutationChunk_ChunkInfo* ReadChangeStreamResponse_MutationChunk::mutable_chunk_info() {
  ::google::bigtable::v2::ReadChangeStreamResponse_MutationChunk_ChunkInfo* _msg = _internal_mutable_chunk_info();
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadChangeStreamResponse.MutationChunk.chunk_info)
  return _msg;
}
inline void ReadChangeStreamResponse_MutationChunk::set_allocated_chunk_info(::google::bigtable::v2::ReadChangeStreamResponse_MutationChunk_ChunkInfo* chunk_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.chunk_info_;
  }
  if (chunk_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(chunk_info);
    if (message_arena != submessage_arena) {
      chunk_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chunk_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.chunk_info_ = chunk_info;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ReadChangeStreamResponse.MutationChunk.chunk_info)
}

// .google.bigtable.v2.Mutation mutation = 2;
inline bool ReadChangeStreamResponse_MutationChunk::_internal_has_mutation() const {
  return this != internal_default_instance() && _impl_.mutation_ != nullptr;
}
inline bool ReadChangeStreamResponse_MutationChunk::has_mutation() const {
  return _internal_has_mutation();
}
inline const ::google::bigtable::v2::Mutation& ReadChangeStreamResponse_MutationChunk::_internal_mutation() const {
  const ::google::bigtable::v2::Mutation* p = _impl_.mutation_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::bigtable::v2::Mutation&>(
      ::google::bigtable::v2::_Mutation_default_instance_);
}
inline const ::google::bigtable::v2::Mutation& ReadChangeStreamResponse_MutationChunk::mutation() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadChangeStreamResponse.MutationChunk.mutation)
  return _internal_mutation();
}
inline void ReadChangeStreamResponse_MutationChunk::unsafe_arena_set_allocated_mutation(
    ::google::bigtable::v2::Mutation* mutation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mutation_);
  }
  _impl_.mutation_ = mutation;
  if (mutation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.v2.ReadChangeStreamResponse.MutationChunk.mutation)
}
inline ::google::bigtable::v2::Mutation* ReadChangeStreamResponse_MutationChunk::release_mutation() {
  
  ::google::bigtable::v2::Mutation* temp = _impl_.mutation_;
  _impl_.mutation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::bigtable::v2::Mutation* ReadChangeStreamResponse_MutationChunk::unsafe_arena_release_mutation() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ReadChangeStreamResponse.MutationChunk.mutation)
  
  ::google::bigtable::v2::Mutation* temp = _impl_.mutation_;
  _impl_.mutation_ = nullptr;
  return temp;
}
inline ::google::bigtable::v2::Mutation* ReadChangeStreamResponse_MutationChunk::_internal_mutable_mutation() {
  
  if (_impl_.mutation_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::bigtable::v2::Mutation>(GetArenaForAllocation());
    _impl_.mutation_ = p;
  }
  return _impl_.mutation_;
}
inline ::google::bigtable::v2::Mutation* ReadChangeStreamResponse_MutationChunk::mutable_mutation() {
  ::google::bigtable::v2::Mutation* _msg = _internal_mutable_mutation();
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadChangeStreamResponse.MutationChunk.mutation)
  return _msg;
}
inline void ReadChangeStreamResponse_MutationChunk::set_allocated_mutation(::google::bigtable::v2::Mutation* mutation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mutation_);
  }
  if (mutation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mutation));
    if (message_arena != submessage_arena) {
      mutation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mutation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.mutation_ = mutation;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ReadChangeStreamResponse.MutationChunk.mutation)
}

// -------------------------------------------------------------------

// ReadChangeStreamResponse_DataChange

// .google.bigtable.v2.ReadChangeStreamResponse.DataChange.Type type = 1;
inline void ReadChangeStreamResponse_DataChange::clear_type() {
  _impl_.type_ = 0;
}
inline ::google::bigtable::v2::ReadChangeStreamResponse_DataChange_Type ReadChangeStreamResponse_DataChange::_internal_type() const {
  return static_cast< ::google::bigtable::v2::ReadChangeStreamResponse_DataChange_Type >(_impl_.type_);
}
inline ::google::bigtable::v2::ReadChangeStreamResponse_DataChange_Type ReadChangeStreamResponse_DataChange::type() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadChangeStreamResponse.DataChange.type)
  return _internal_type();
}
inline void ReadChangeStreamResponse_DataChange::_internal_set_type(::google::bigtable::v2::ReadChangeStreamResponse_DataChange_Type value) {
  
  _impl_.type_ = value;
}
inline void ReadChangeStreamResponse_DataChange::set_type(::google::bigtable::v2::ReadChangeStreamResponse_DataChange_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadChangeStreamResponse.DataChange.type)
}

// string source_cluster_id = 2;
inline void ReadChangeStreamResponse_DataChange::clear_source_cluster_id() {
  _impl_.source_cluster_id_.ClearToEmpty();
}
inline const std::string& ReadChangeStreamResponse_DataChange::source_cluster_id() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadChangeStreamResponse.DataChange.source_cluster_id)
  return _internal_source_cluster_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReadChangeStreamResponse_DataChange::set_source_cluster_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.source_cluster_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadChangeStreamResponse.DataChange.source_cluster_id)
}
inline std::string* ReadChangeStreamResponse_DataChange::mutable_source_cluster_id() {
  std::string* _s = _internal_mutable_source_cluster_id();
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadChangeStreamResponse.DataChange.source_cluster_id)
  return _s;
}
inline const std::string& ReadChangeStreamResponse_DataChange::_internal_source_cluster_id() const {
  return _impl_.source_cluster_id_.Get();
}
inline void ReadChangeStreamResponse_DataChange::_internal_set_source_cluster_id(const std::string& value) {
  
  _impl_.source_cluster_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ReadChangeStreamResponse_DataChange::_internal_mutable_source_cluster_id() {
  
  return _impl_.source_cluster_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ReadChangeStreamResponse_DataChange::release_source_cluster_id() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ReadChangeStreamResponse.DataChange.source_cluster_id)
  return _impl_.source_cluster_id_.Release();
}
inline void ReadChangeStreamResponse_DataChange::set_allocated_source_cluster_id(std::string* source_cluster_id) {
  if (source_cluster_id != nullptr) {
    
  } else {
    
  }
  _impl_.source_cluster_id_.SetAllocated(source_cluster_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.source_cluster_id_.IsDefault()) {
    _impl_.source_cluster_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ReadChangeStreamResponse.DataChange.source_cluster_id)
}

// bytes row_key = 3;
inline void ReadChangeStreamResponse_DataChange::clear_row_key() {
  _impl_.row_key_.ClearToEmpty();
}
inline const std::string& ReadChangeStreamResponse_DataChange::row_key() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadChangeStreamResponse.DataChange.row_key)
  return _internal_row_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReadChangeStreamResponse_DataChange::set_row_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.row_key_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadChangeStreamResponse.DataChange.row_key)
}
inline std::string* ReadChangeStreamResponse_DataChange::mutable_row_key() {
  std::string* _s = _internal_mutable_row_key();
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadChangeStreamResponse.DataChange.row_key)
  return _s;
}
inline const std::string& ReadChangeStreamResponse_DataChange::_internal_row_key() const {
  return _impl_.row_key_.Get();
}
inline void ReadChangeStreamResponse_DataChange::_internal_set_row_key(const std::string& value) {
  
  _impl_.row_key_.Set(value, GetArenaForAllocation());
}
inline std::string* ReadChangeStreamResponse_DataChange::_internal_mutable_row_key() {
  
  return _impl_.row_key_.Mutable(GetArenaForAllocation());
}
inline std::string* ReadChangeStreamResponse_DataChange::release_row_key() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ReadChangeStreamResponse.DataChange.row_key)
  return _impl_.row_key_.Release();
}
inline void ReadChangeStreamResponse_DataChange::set_allocated_row_key(std::string* row_key) {
  if (row_key != nullptr) {
    
  } else {
    
  }
  _impl_.row_key_.SetAllocated(row_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.row_key_.IsDefault()) {
    _impl_.row_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ReadChangeStreamResponse.DataChange.row_key)
}

// .google.protobuf.Timestamp commit_timestamp = 4;
inline bool ReadChangeStreamResponse_DataChange::_internal_has_commit_timestamp() const {
  return this != internal_default_instance() && _impl_.commit_timestamp_ != nullptr;
}
inline bool ReadChangeStreamResponse_DataChange::has_commit_timestamp() const {
  return _internal_has_commit_timestamp();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ReadChangeStreamResponse_DataChange::_internal_commit_timestamp() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.commit_timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ReadChangeStreamResponse_DataChange::commit_timestamp() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadChangeStreamResponse.DataChange.commit_timestamp)
  return _internal_commit_timestamp();
}
inline void ReadChangeStreamResponse_DataChange::unsafe_arena_set_allocated_commit_timestamp(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* commit_timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.commit_timestamp_);
  }
  _impl_.commit_timestamp_ = commit_timestamp;
  if (commit_timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.v2.ReadChangeStreamResponse.DataChange.commit_timestamp)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ReadChangeStreamResponse_DataChange::release_commit_timestamp() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.commit_timestamp_;
  _impl_.commit_timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ReadChangeStreamResponse_DataChange::unsafe_arena_release_commit_timestamp() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ReadChangeStreamResponse.DataChange.commit_timestamp)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.commit_timestamp_;
  _impl_.commit_timestamp_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ReadChangeStreamResponse_DataChange::_internal_mutable_commit_timestamp() {
  
  if (_impl_.commit_timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.commit_timestamp_ = p;
  }
  return _impl_.commit_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ReadChangeStreamResponse_DataChange::mutable_commit_timestamp() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_commit_timestamp();
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadChangeStreamResponse.DataChange.commit_timestamp)
  return _msg;
}
inline void ReadChangeStreamResponse_DataChange::set_allocated_commit_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* commit_timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.commit_timestamp_);
  }
  if (commit_timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(commit_timestamp));
    if (message_arena != submessage_arena) {
      commit_timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, commit_timestamp, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.commit_timestamp_ = commit_timestamp;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ReadChangeStreamResponse.DataChange.commit_timestamp)
}

// int32 tiebreaker = 5;
inline void ReadChangeStreamResponse_DataChange::clear_tiebreaker() {
  _impl_.tiebreaker_ = 0;
}
inline int32_t ReadChangeStreamResponse_DataChange::_internal_tiebreaker() const {
  return _impl_.tiebreaker_;
}
inline int32_t ReadChangeStreamResponse_DataChange::tiebreaker() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadChangeStreamResponse.DataChange.tiebreaker)
  return _internal_tiebreaker();
}
inline void ReadChangeStreamResponse_DataChange::_internal_set_tiebreaker(int32_t value) {
  
  _impl_.tiebreaker_ = value;
}
inline void ReadChangeStreamResponse_DataChange::set_tiebreaker(int32_t value) {
  _internal_set_tiebreaker(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadChangeStreamResponse.DataChange.tiebreaker)
}

// repeated .google.bigtable.v2.ReadChangeStreamResponse.MutationChunk chunks = 6;
inline int ReadChangeStreamResponse_DataChange::_internal_chunks_size() const {
  return _impl_.chunks_.size();
}
inline int ReadChangeStreamResponse_DataChange::chunks_size() const {
  return _internal_chunks_size();
}
inline void ReadChangeStreamResponse_DataChange::clear_chunks() {
  _impl_.chunks_.Clear();
}
inline ::google::bigtable::v2::ReadChangeStreamResponse_MutationChunk* ReadChangeStreamResponse_DataChange::mutable_chunks(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadChangeStreamResponse.DataChange.chunks)
  return _impl_.chunks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::ReadChangeStreamResponse_MutationChunk >*
ReadChangeStreamResponse_DataChange::mutable_chunks() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.v2.ReadChangeStreamResponse.DataChange.chunks)
  return &_impl_.chunks_;
}
inline const ::google::bigtable::v2::ReadChangeStreamResponse_MutationChunk& ReadChangeStreamResponse_DataChange::_internal_chunks(int index) const {
  return _impl_.chunks_.Get(index);
}
inline const ::google::bigtable::v2::ReadChangeStreamResponse_MutationChunk& ReadChangeStreamResponse_DataChange::chunks(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadChangeStreamResponse.DataChange.chunks)
  return _internal_chunks(index);
}
inline ::google::bigtable::v2::ReadChangeStreamResponse_MutationChunk* ReadChangeStreamResponse_DataChange::_internal_add_chunks() {
  return _impl_.chunks_.Add();
}
inline ::google::bigtable::v2::ReadChangeStreamResponse_MutationChunk* ReadChangeStreamResponse_DataChange::add_chunks() {
  ::google::bigtable::v2::ReadChangeStreamResponse_MutationChunk* _add = _internal_add_chunks();
  // @@protoc_insertion_point(field_add:google.bigtable.v2.ReadChangeStreamResponse.DataChange.chunks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::ReadChangeStreamResponse_MutationChunk >&
ReadChangeStreamResponse_DataChange::chunks() const {
  // @@protoc_insertion_point(field_list:google.bigtable.v2.ReadChangeStreamResponse.DataChange.chunks)
  return _impl_.chunks_;
}

// bool done = 8;
inline void ReadChangeStreamResponse_DataChange::clear_done() {
  _impl_.done_ = false;
}
inline bool ReadChangeStreamResponse_DataChange::_internal_done() const {
  return _impl_.done_;
}
inline bool ReadChangeStreamResponse_DataChange::done() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadChangeStreamResponse.DataChange.done)
  return _internal_done();
}
inline void ReadChangeStreamResponse_DataChange::_internal_set_done(bool value) {
  
  _impl_.done_ = value;
}
inline void ReadChangeStreamResponse_DataChange::set_done(bool value) {
  _internal_set_done(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadChangeStreamResponse.DataChange.done)
}

// string token = 9;
inline void ReadChangeStreamResponse_DataChange::clear_token() {
  _impl_.token_.ClearToEmpty();
}
inline const std::string& ReadChangeStreamResponse_DataChange::token() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadChangeStreamResponse.DataChange.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReadChangeStreamResponse_DataChange::set_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadChangeStreamResponse.DataChange.token)
}
inline std::string* ReadChangeStreamResponse_DataChange::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadChangeStreamResponse.DataChange.token)
  return _s;
}
inline const std::string& ReadChangeStreamResponse_DataChange::_internal_token() const {
  return _impl_.token_.Get();
}
inline void ReadChangeStreamResponse_DataChange::_internal_set_token(const std::string& value) {
  
  _impl_.token_.Set(value, GetArenaForAllocation());
}
inline std::string* ReadChangeStreamResponse_DataChange::_internal_mutable_token() {
  
  return _impl_.token_.Mutable(GetArenaForAllocation());
}
inline std::string* ReadChangeStreamResponse_DataChange::release_token() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ReadChangeStreamResponse.DataChange.token)
  return _impl_.token_.Release();
}
inline void ReadChangeStreamResponse_DataChange::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  _impl_.token_.SetAllocated(token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.token_.IsDefault()) {
    _impl_.token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ReadChangeStreamResponse.DataChange.token)
}

// .google.protobuf.Timestamp estimated_low_watermark = 10;
inline bool ReadChangeStreamResponse_DataChange::_internal_has_estimated_low_watermark() const {
  return this != internal_default_instance() && _impl_.estimated_low_watermark_ != nullptr;
}
inline bool ReadChangeStreamResponse_DataChange::has_estimated_low_watermark() const {
  return _internal_has_estimated_low_watermark();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ReadChangeStreamResponse_DataChange::_internal_estimated_low_watermark() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.estimated_low_watermark_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ReadChangeStreamResponse_DataChange::estimated_low_watermark() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadChangeStreamResponse.DataChange.estimated_low_watermark)
  return _internal_estimated_low_watermark();
}
inline void ReadChangeStreamResponse_DataChange::unsafe_arena_set_allocated_estimated_low_watermark(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* estimated_low_watermark) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.estimated_low_watermark_);
  }
  _impl_.estimated_low_watermark_ = estimated_low_watermark;
  if (estimated_low_watermark) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.v2.ReadChangeStreamResponse.DataChange.estimated_low_watermark)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ReadChangeStreamResponse_DataChange::release_estimated_low_watermark() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.estimated_low_watermark_;
  _impl_.estimated_low_watermark_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ReadChangeStreamResponse_DataChange::unsafe_arena_release_estimated_low_watermark() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ReadChangeStreamResponse.DataChange.estimated_low_watermark)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.estimated_low_watermark_;
  _impl_.estimated_low_watermark_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ReadChangeStreamResponse_DataChange::_internal_mutable_estimated_low_watermark() {
  
  if (_impl_.estimated_low_watermark_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.estimated_low_watermark_ = p;
  }
  return _impl_.estimated_low_watermark_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ReadChangeStreamResponse_DataChange::mutable_estimated_low_watermark() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_estimated_low_watermark();
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadChangeStreamResponse.DataChange.estimated_low_watermark)
  return _msg;
}
inline void ReadChangeStreamResponse_DataChange::set_allocated_estimated_low_watermark(::PROTOBUF_NAMESPACE_ID::Timestamp* estimated_low_watermark) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.estimated_low_watermark_);
  }
  if (estimated_low_watermark) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(estimated_low_watermark));
    if (message_arena != submessage_arena) {
      estimated_low_watermark = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, estimated_low_watermark, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.estimated_low_watermark_ = estimated_low_watermark;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ReadChangeStreamResponse.DataChange.estimated_low_watermark)
}

// -------------------------------------------------------------------

// ReadChangeStreamResponse_Heartbeat

// .google.bigtable.v2.StreamContinuationToken continuation_token = 1;
inline bool ReadChangeStreamResponse_Heartbeat::_internal_has_continuation_token() const {
  return this != internal_default_instance() && _impl_.continuation_token_ != nullptr;
}
inline bool ReadChangeStreamResponse_Heartbeat::has_continuation_token() const {
  return _internal_has_continuation_token();
}
inline const ::google::bigtable::v2::StreamContinuationToken& ReadChangeStreamResponse_Heartbeat::_internal_continuation_token() const {
  const ::google::bigtable::v2::StreamContinuationToken* p = _impl_.continuation_token_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::bigtable::v2::StreamContinuationToken&>(
      ::google::bigtable::v2::_StreamContinuationToken_default_instance_);
}
inline const ::google::bigtable::v2::StreamContinuationToken& ReadChangeStreamResponse_Heartbeat::continuation_token() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadChangeStreamResponse.Heartbeat.continuation_token)
  return _internal_continuation_token();
}
inline void ReadChangeStreamResponse_Heartbeat::unsafe_arena_set_allocated_continuation_token(
    ::google::bigtable::v2::StreamContinuationToken* continuation_token) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.continuation_token_);
  }
  _impl_.continuation_token_ = continuation_token;
  if (continuation_token) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.v2.ReadChangeStreamResponse.Heartbeat.continuation_token)
}
inline ::google::bigtable::v2::StreamContinuationToken* ReadChangeStreamResponse_Heartbeat::release_continuation_token() {
  
  ::google::bigtable::v2::StreamContinuationToken* temp = _impl_.continuation_token_;
  _impl_.continuation_token_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::bigtable::v2::StreamContinuationToken* ReadChangeStreamResponse_Heartbeat::unsafe_arena_release_continuation_token() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ReadChangeStreamResponse.Heartbeat.continuation_token)
  
  ::google::bigtable::v2::StreamContinuationToken* temp = _impl_.continuation_token_;
  _impl_.continuation_token_ = nullptr;
  return temp;
}
inline ::google::bigtable::v2::StreamContinuationToken* ReadChangeStreamResponse_Heartbeat::_internal_mutable_continuation_token() {
  
  if (_impl_.continuation_token_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::bigtable::v2::StreamContinuationToken>(GetArenaForAllocation());
    _impl_.continuation_token_ = p;
  }
  return _impl_.continuation_token_;
}
inline ::google::bigtable::v2::StreamContinuationToken* ReadChangeStreamResponse_Heartbeat::mutable_continuation_token() {
  ::google::bigtable::v2::StreamContinuationToken* _msg = _internal_mutable_continuation_token();
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadChangeStreamResponse.Heartbeat.continuation_token)
  return _msg;
}
inline void ReadChangeStreamResponse_Heartbeat::set_allocated_continuation_token(::google::bigtable::v2::StreamContinuationToken* continuation_token) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.continuation_token_);
  }
  if (continuation_token) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(continuation_token));
    if (message_arena != submessage_arena) {
      continuation_token = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, continuation_token, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.continuation_token_ = continuation_token;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ReadChangeStreamResponse.Heartbeat.continuation_token)
}

// .google.protobuf.Timestamp estimated_low_watermark = 2;
inline bool ReadChangeStreamResponse_Heartbeat::_internal_has_estimated_low_watermark() const {
  return this != internal_default_instance() && _impl_.estimated_low_watermark_ != nullptr;
}
inline bool ReadChangeStreamResponse_Heartbeat::has_estimated_low_watermark() const {
  return _internal_has_estimated_low_watermark();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ReadChangeStreamResponse_Heartbeat::_internal_estimated_low_watermark() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.estimated_low_watermark_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ReadChangeStreamResponse_Heartbeat::estimated_low_watermark() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadChangeStreamResponse.Heartbeat.estimated_low_watermark)
  return _internal_estimated_low_watermark();
}
inline void ReadChangeStreamResponse_Heartbeat::unsafe_arena_set_allocated_estimated_low_watermark(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* estimated_low_watermark) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.estimated_low_watermark_);
  }
  _impl_.estimated_low_watermark_ = estimated_low_watermark;
  if (estimated_low_watermark) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.v2.ReadChangeStreamResponse.Heartbeat.estimated_low_watermark)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ReadChangeStreamResponse_Heartbeat::release_estimated_low_watermark() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.estimated_low_watermark_;
  _impl_.estimated_low_watermark_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ReadChangeStreamResponse_Heartbeat::unsafe_arena_release_estimated_low_watermark() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ReadChangeStreamResponse.Heartbeat.estimated_low_watermark)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.estimated_low_watermark_;
  _impl_.estimated_low_watermark_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ReadChangeStreamResponse_Heartbeat::_internal_mutable_estimated_low_watermark() {
  
  if (_impl_.estimated_low_watermark_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.estimated_low_watermark_ = p;
  }
  return _impl_.estimated_low_watermark_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ReadChangeStreamResponse_Heartbeat::mutable_estimated_low_watermark() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_estimated_low_watermark();
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadChangeStreamResponse.Heartbeat.estimated_low_watermark)
  return _msg;
}
inline void ReadChangeStreamResponse_Heartbeat::set_allocated_estimated_low_watermark(::PROTOBUF_NAMESPACE_ID::Timestamp* estimated_low_watermark) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.estimated_low_watermark_);
  }
  if (estimated_low_watermark) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(estimated_low_watermark));
    if (message_arena != submessage_arena) {
      estimated_low_watermark = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, estimated_low_watermark, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.estimated_low_watermark_ = estimated_low_watermark;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ReadChangeStreamResponse.Heartbeat.estimated_low_watermark)
}

// -------------------------------------------------------------------

// ReadChangeStreamResponse_CloseStream

// .google.rpc.Status status = 1;
inline bool ReadChangeStreamResponse_CloseStream::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool ReadChangeStreamResponse_CloseStream::has_status() const {
  return _internal_has_status();
}
inline const ::google::rpc::Status& ReadChangeStreamResponse_CloseStream::_internal_status() const {
  const ::google::rpc::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::rpc::Status&>(
      ::google::rpc::_Status_default_instance_);
}
inline const ::google::rpc::Status& ReadChangeStreamResponse_CloseStream::status() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadChangeStreamResponse.CloseStream.status)
  return _internal_status();
}
inline void ReadChangeStreamResponse_CloseStream::unsafe_arena_set_allocated_status(
    ::google::rpc::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.v2.ReadChangeStreamResponse.CloseStream.status)
}
inline ::google::rpc::Status* ReadChangeStreamResponse_CloseStream::release_status() {
  
  ::google::rpc::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::rpc::Status* ReadChangeStreamResponse_CloseStream::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ReadChangeStreamResponse.CloseStream.status)
  
  ::google::rpc::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::google::rpc::Status* ReadChangeStreamResponse_CloseStream::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::rpc::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::google::rpc::Status* ReadChangeStreamResponse_CloseStream::mutable_status() {
  ::google::rpc::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadChangeStreamResponse.CloseStream.status)
  return _msg;
}
inline void ReadChangeStreamResponse_CloseStream::set_allocated_status(::google::rpc::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ReadChangeStreamResponse.CloseStream.status)
}

// repeated .google.bigtable.v2.StreamContinuationToken continuation_tokens = 2;
inline int ReadChangeStreamResponse_CloseStream::_internal_continuation_tokens_size() const {
  return _impl_.continuation_tokens_.size();
}
inline int ReadChangeStreamResponse_CloseStream::continuation_tokens_size() const {
  return _internal_continuation_tokens_size();
}
inline ::google::bigtable::v2::StreamContinuationToken* ReadChangeStreamResponse_CloseStream::mutable_continuation_tokens(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadChangeStreamResponse.CloseStream.continuation_tokens)
  return _impl_.continuation_tokens_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::StreamContinuationToken >*
ReadChangeStreamResponse_CloseStream::mutable_continuation_tokens() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.v2.ReadChangeStreamResponse.CloseStream.continuation_tokens)
  return &_impl_.continuation_tokens_;
}
inline const ::google::bigtable::v2::StreamContinuationToken& ReadChangeStreamResponse_CloseStream::_internal_continuation_tokens(int index) const {
  return _impl_.continuation_tokens_.Get(index);
}
inline const ::google::bigtable::v2::StreamContinuationToken& ReadChangeStreamResponse_CloseStream::continuation_tokens(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadChangeStreamResponse.CloseStream.continuation_tokens)
  return _internal_continuation_tokens(index);
}
inline ::google::bigtable::v2::StreamContinuationToken* ReadChangeStreamResponse_CloseStream::_internal_add_continuation_tokens() {
  return _impl_.continuation_tokens_.Add();
}
inline ::google::bigtable::v2::StreamContinuationToken* ReadChangeStreamResponse_CloseStream::add_continuation_tokens() {
  ::google::bigtable::v2::StreamContinuationToken* _add = _internal_add_continuation_tokens();
  // @@protoc_insertion_point(field_add:google.bigtable.v2.ReadChangeStreamResponse.CloseStream.continuation_tokens)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::StreamContinuationToken >&
ReadChangeStreamResponse_CloseStream::continuation_tokens() const {
  // @@protoc_insertion_point(field_list:google.bigtable.v2.ReadChangeStreamResponse.CloseStream.continuation_tokens)
  return _impl_.continuation_tokens_;
}

// -------------------------------------------------------------------

// ReadChangeStreamResponse

// .google.bigtable.v2.ReadChangeStreamResponse.DataChange data_change = 1;
inline bool ReadChangeStreamResponse::_internal_has_data_change() const {
  return stream_record_case() == kDataChange;
}
inline bool ReadChangeStreamResponse::has_data_change() const {
  return _internal_has_data_change();
}
inline void ReadChangeStreamResponse::set_has_data_change() {
  _impl_._oneof_case_[0] = kDataChange;
}
inline void ReadChangeStreamResponse::clear_data_change() {
  if (_internal_has_data_change()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.stream_record_.data_change_;
    }
    clear_has_stream_record();
  }
}
inline ::google::bigtable::v2::ReadChangeStreamResponse_DataChange* ReadChangeStreamResponse::release_data_change() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ReadChangeStreamResponse.data_change)
  if (_internal_has_data_change()) {
    clear_has_stream_record();
    ::google::bigtable::v2::ReadChangeStreamResponse_DataChange* temp = _impl_.stream_record_.data_change_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.stream_record_.data_change_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::bigtable::v2::ReadChangeStreamResponse_DataChange& ReadChangeStreamResponse::_internal_data_change() const {
  return _internal_has_data_change()
      ? *_impl_.stream_record_.data_change_
      : reinterpret_cast< ::google::bigtable::v2::ReadChangeStreamResponse_DataChange&>(::google::bigtable::v2::_ReadChangeStreamResponse_DataChange_default_instance_);
}
inline const ::google::bigtable::v2::ReadChangeStreamResponse_DataChange& ReadChangeStreamResponse::data_change() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadChangeStreamResponse.data_change)
  return _internal_data_change();
}
inline ::google::bigtable::v2::ReadChangeStreamResponse_DataChange* ReadChangeStreamResponse::unsafe_arena_release_data_change() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.bigtable.v2.ReadChangeStreamResponse.data_change)
  if (_internal_has_data_change()) {
    clear_has_stream_record();
    ::google::bigtable::v2::ReadChangeStreamResponse_DataChange* temp = _impl_.stream_record_.data_change_;
    _impl_.stream_record_.data_change_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReadChangeStreamResponse::unsafe_arena_set_allocated_data_change(::google::bigtable::v2::ReadChangeStreamResponse_DataChange* data_change) {
  clear_stream_record();
  if (data_change) {
    set_has_data_change();
    _impl_.stream_record_.data_change_ = data_change;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.v2.ReadChangeStreamResponse.data_change)
}
inline ::google::bigtable::v2::ReadChangeStreamResponse_DataChange* ReadChangeStreamResponse::_internal_mutable_data_change() {
  if (!_internal_has_data_change()) {
    clear_stream_record();
    set_has_data_change();
    _impl_.stream_record_.data_change_ = CreateMaybeMessage< ::google::bigtable::v2::ReadChangeStreamResponse_DataChange >(GetArenaForAllocation());
  }
  return _impl_.stream_record_.data_change_;
}
inline ::google::bigtable::v2::ReadChangeStreamResponse_DataChange* ReadChangeStreamResponse::mutable_data_change() {
  ::google::bigtable::v2::ReadChangeStreamResponse_DataChange* _msg = _internal_mutable_data_change();
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadChangeStreamResponse.data_change)
  return _msg;
}

// .google.bigtable.v2.ReadChangeStreamResponse.Heartbeat heartbeat = 2;
inline bool ReadChangeStreamResponse::_internal_has_heartbeat() const {
  return stream_record_case() == kHeartbeat;
}
inline bool ReadChangeStreamResponse::has_heartbeat() const {
  return _internal_has_heartbeat();
}
inline void ReadChangeStreamResponse::set_has_heartbeat() {
  _impl_._oneof_case_[0] = kHeartbeat;
}
inline void ReadChangeStreamResponse::clear_heartbeat() {
  if (_internal_has_heartbeat()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.stream_record_.heartbeat_;
    }
    clear_has_stream_record();
  }
}
inline ::google::bigtable::v2::ReadChangeStreamResponse_Heartbeat* ReadChangeStreamResponse::release_heartbeat() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ReadChangeStreamResponse.heartbeat)
  if (_internal_has_heartbeat()) {
    clear_has_stream_record();
    ::google::bigtable::v2::ReadChangeStreamResponse_Heartbeat* temp = _impl_.stream_record_.heartbeat_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.stream_record_.heartbeat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::bigtable::v2::ReadChangeStreamResponse_Heartbeat& ReadChangeStreamResponse::_internal_heartbeat() const {
  return _internal_has_heartbeat()
      ? *_impl_.stream_record_.heartbeat_
      : reinterpret_cast< ::google::bigtable::v2::ReadChangeStreamResponse_Heartbeat&>(::google::bigtable::v2::_ReadChangeStreamResponse_Heartbeat_default_instance_);
}
inline const ::google::bigtable::v2::ReadChangeStreamResponse_Heartbeat& ReadChangeStreamResponse::heartbeat() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadChangeStreamResponse.heartbeat)
  return _internal_heartbeat();
}
inline ::google::bigtable::v2::ReadChangeStreamResponse_Heartbeat* ReadChangeStreamResponse::unsafe_arena_release_heartbeat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.bigtable.v2.ReadChangeStreamResponse.heartbeat)
  if (_internal_has_heartbeat()) {
    clear_has_stream_record();
    ::google::bigtable::v2::ReadChangeStreamResponse_Heartbeat* temp = _impl_.stream_record_.heartbeat_;
    _impl_.stream_record_.heartbeat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReadChangeStreamResponse::unsafe_arena_set_allocated_heartbeat(::google::bigtable::v2::ReadChangeStreamResponse_Heartbeat* heartbeat) {
  clear_stream_record();
  if (heartbeat) {
    set_has_heartbeat();
    _impl_.stream_record_.heartbeat_ = heartbeat;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.v2.ReadChangeStreamResponse.heartbeat)
}
inline ::google::bigtable::v2::ReadChangeStreamResponse_Heartbeat* ReadChangeStreamResponse::_internal_mutable_heartbeat() {
  if (!_internal_has_heartbeat()) {
    clear_stream_record();
    set_has_heartbeat();
    _impl_.stream_record_.heartbeat_ = CreateMaybeMessage< ::google::bigtable::v2::ReadChangeStreamResponse_Heartbeat >(GetArenaForAllocation());
  }
  return _impl_.stream_record_.heartbeat_;
}
inline ::google::bigtable::v2::ReadChangeStreamResponse_Heartbeat* ReadChangeStreamResponse::mutable_heartbeat() {
  ::google::bigtable::v2::ReadChangeStreamResponse_Heartbeat* _msg = _internal_mutable_heartbeat();
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadChangeStreamResponse.heartbeat)
  return _msg;
}

// .google.bigtable.v2.ReadChangeStreamResponse.CloseStream close_stream = 3;
inline bool ReadChangeStreamResponse::_internal_has_close_stream() const {
  return stream_record_case() == kCloseStream;
}
inline bool ReadChangeStreamResponse::has_close_stream() const {
  return _internal_has_close_stream();
}
inline void ReadChangeStreamResponse::set_has_close_stream() {
  _impl_._oneof_case_[0] = kCloseStream;
}
inline void ReadChangeStreamResponse::clear_close_stream() {
  if (_internal_has_close_stream()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.stream_record_.close_stream_;
    }
    clear_has_stream_record();
  }
}
inline ::google::bigtable::v2::ReadChangeStreamResponse_CloseStream* ReadChangeStreamResponse::release_close_stream() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ReadChangeStreamResponse.close_stream)
  if (_internal_has_close_stream()) {
    clear_has_stream_record();
    ::google::bigtable::v2::ReadChangeStreamResponse_CloseStream* temp = _impl_.stream_record_.close_stream_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.stream_record_.close_stream_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::bigtable::v2::ReadChangeStreamResponse_CloseStream& ReadChangeStreamResponse::_internal_close_stream() const {
  return _internal_has_close_stream()
      ? *_impl_.stream_record_.close_stream_
      : reinterpret_cast< ::google::bigtable::v2::ReadChangeStreamResponse_CloseStream&>(::google::bigtable::v2::_ReadChangeStreamResponse_CloseStream_default_instance_);
}
inline const ::google::bigtable::v2::ReadChangeStreamResponse_CloseStream& ReadChangeStreamResponse::close_stream() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadChangeStreamResponse.close_stream)
  return _internal_close_stream();
}
inline ::google::bigtable::v2::ReadChangeStreamResponse_CloseStream* ReadChangeStreamResponse::unsafe_arena_release_close_stream() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.bigtable.v2.ReadChangeStreamResponse.close_stream)
  if (_internal_has_close_stream()) {
    clear_has_stream_record();
    ::google::bigtable::v2::ReadChangeStreamResponse_CloseStream* temp = _impl_.stream_record_.close_stream_;
    _impl_.stream_record_.close_stream_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReadChangeStreamResponse::unsafe_arena_set_allocated_close_stream(::google::bigtable::v2::ReadChangeStreamResponse_CloseStream* close_stream) {
  clear_stream_record();
  if (close_stream) {
    set_has_close_stream();
    _impl_.stream_record_.close_stream_ = close_stream;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.v2.ReadChangeStreamResponse.close_stream)
}
inline ::google::bigtable::v2::ReadChangeStreamResponse_CloseStream* ReadChangeStreamResponse::_internal_mutable_close_stream() {
  if (!_internal_has_close_stream()) {
    clear_stream_record();
    set_has_close_stream();
    _impl_.stream_record_.close_stream_ = CreateMaybeMessage< ::google::bigtable::v2::ReadChangeStreamResponse_CloseStream >(GetArenaForAllocation());
  }
  return _impl_.stream_record_.close_stream_;
}
inline ::google::bigtable::v2::ReadChangeStreamResponse_CloseStream* ReadChangeStreamResponse::mutable_close_stream() {
  ::google::bigtable::v2::ReadChangeStreamResponse_CloseStream* _msg = _internal_mutable_close_stream();
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadChangeStreamResponse.close_stream)
  return _msg;
}

inline bool ReadChangeStreamResponse::has_stream_record() const {
  return stream_record_case() != STREAM_RECORD_NOT_SET;
}
inline void ReadChangeStreamResponse::clear_has_stream_record() {
  _impl_._oneof_case_[0] = STREAM_RECORD_NOT_SET;
}
inline ReadChangeStreamResponse::StreamRecordCase ReadChangeStreamResponse::stream_record_case() const {
  return ReadChangeStreamResponse::StreamRecordCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace bigtable
}  // namespace google

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::google::bigtable::v2::ReadRowsRequest_RequestStatsView> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::bigtable::v2::ReadRowsRequest_RequestStatsView>() {
  return ::google::bigtable::v2::ReadRowsRequest_RequestStatsView_descriptor();
}
template <> struct is_proto_enum< ::google::bigtable::v2::ReadChangeStreamResponse_DataChange_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::bigtable::v2::ReadChangeStreamResponse_DataChange_Type>() {
  return ::google::bigtable::v2::ReadChangeStreamResponse_DataChange_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fbigtable_2fv2_2fbigtable_2eproto
