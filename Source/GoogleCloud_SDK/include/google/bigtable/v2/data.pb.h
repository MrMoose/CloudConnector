// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/bigtable/v2/data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fbigtable_2fv2_2fdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fbigtable_2fv2_2fdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fbigtable_2fv2_2fdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fbigtable_2fv2_2fdata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[19]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fbigtable_2fv2_2fdata_2eproto;
namespace google {
namespace bigtable {
namespace v2 {
class Cell;
class CellDefaultTypeInternal;
extern CellDefaultTypeInternal _Cell_default_instance_;
class Column;
class ColumnDefaultTypeInternal;
extern ColumnDefaultTypeInternal _Column_default_instance_;
class ColumnRange;
class ColumnRangeDefaultTypeInternal;
extern ColumnRangeDefaultTypeInternal _ColumnRange_default_instance_;
class Family;
class FamilyDefaultTypeInternal;
extern FamilyDefaultTypeInternal _Family_default_instance_;
class Mutation;
class MutationDefaultTypeInternal;
extern MutationDefaultTypeInternal _Mutation_default_instance_;
class Mutation_DeleteFromColumn;
class Mutation_DeleteFromColumnDefaultTypeInternal;
extern Mutation_DeleteFromColumnDefaultTypeInternal _Mutation_DeleteFromColumn_default_instance_;
class Mutation_DeleteFromFamily;
class Mutation_DeleteFromFamilyDefaultTypeInternal;
extern Mutation_DeleteFromFamilyDefaultTypeInternal _Mutation_DeleteFromFamily_default_instance_;
class Mutation_DeleteFromRow;
class Mutation_DeleteFromRowDefaultTypeInternal;
extern Mutation_DeleteFromRowDefaultTypeInternal _Mutation_DeleteFromRow_default_instance_;
class Mutation_SetCell;
class Mutation_SetCellDefaultTypeInternal;
extern Mutation_SetCellDefaultTypeInternal _Mutation_SetCell_default_instance_;
class ReadModifyWriteRule;
class ReadModifyWriteRuleDefaultTypeInternal;
extern ReadModifyWriteRuleDefaultTypeInternal _ReadModifyWriteRule_default_instance_;
class Row;
class RowDefaultTypeInternal;
extern RowDefaultTypeInternal _Row_default_instance_;
class RowFilter;
class RowFilterDefaultTypeInternal;
extern RowFilterDefaultTypeInternal _RowFilter_default_instance_;
class RowFilter_Chain;
class RowFilter_ChainDefaultTypeInternal;
extern RowFilter_ChainDefaultTypeInternal _RowFilter_Chain_default_instance_;
class RowFilter_Condition;
class RowFilter_ConditionDefaultTypeInternal;
extern RowFilter_ConditionDefaultTypeInternal _RowFilter_Condition_default_instance_;
class RowFilter_Interleave;
class RowFilter_InterleaveDefaultTypeInternal;
extern RowFilter_InterleaveDefaultTypeInternal _RowFilter_Interleave_default_instance_;
class RowRange;
class RowRangeDefaultTypeInternal;
extern RowRangeDefaultTypeInternal _RowRange_default_instance_;
class RowSet;
class RowSetDefaultTypeInternal;
extern RowSetDefaultTypeInternal _RowSet_default_instance_;
class TimestampRange;
class TimestampRangeDefaultTypeInternal;
extern TimestampRangeDefaultTypeInternal _TimestampRange_default_instance_;
class ValueRange;
class ValueRangeDefaultTypeInternal;
extern ValueRangeDefaultTypeInternal _ValueRange_default_instance_;
}  // namespace v2
}  // namespace bigtable
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::bigtable::v2::Cell* Arena::CreateMaybeMessage<::google::bigtable::v2::Cell>(Arena*);
template<> ::google::bigtable::v2::Column* Arena::CreateMaybeMessage<::google::bigtable::v2::Column>(Arena*);
template<> ::google::bigtable::v2::ColumnRange* Arena::CreateMaybeMessage<::google::bigtable::v2::ColumnRange>(Arena*);
template<> ::google::bigtable::v2::Family* Arena::CreateMaybeMessage<::google::bigtable::v2::Family>(Arena*);
template<> ::google::bigtable::v2::Mutation* Arena::CreateMaybeMessage<::google::bigtable::v2::Mutation>(Arena*);
template<> ::google::bigtable::v2::Mutation_DeleteFromColumn* Arena::CreateMaybeMessage<::google::bigtable::v2::Mutation_DeleteFromColumn>(Arena*);
template<> ::google::bigtable::v2::Mutation_DeleteFromFamily* Arena::CreateMaybeMessage<::google::bigtable::v2::Mutation_DeleteFromFamily>(Arena*);
template<> ::google::bigtable::v2::Mutation_DeleteFromRow* Arena::CreateMaybeMessage<::google::bigtable::v2::Mutation_DeleteFromRow>(Arena*);
template<> ::google::bigtable::v2::Mutation_SetCell* Arena::CreateMaybeMessage<::google::bigtable::v2::Mutation_SetCell>(Arena*);
template<> ::google::bigtable::v2::ReadModifyWriteRule* Arena::CreateMaybeMessage<::google::bigtable::v2::ReadModifyWriteRule>(Arena*);
template<> ::google::bigtable::v2::Row* Arena::CreateMaybeMessage<::google::bigtable::v2::Row>(Arena*);
template<> ::google::bigtable::v2::RowFilter* Arena::CreateMaybeMessage<::google::bigtable::v2::RowFilter>(Arena*);
template<> ::google::bigtable::v2::RowFilter_Chain* Arena::CreateMaybeMessage<::google::bigtable::v2::RowFilter_Chain>(Arena*);
template<> ::google::bigtable::v2::RowFilter_Condition* Arena::CreateMaybeMessage<::google::bigtable::v2::RowFilter_Condition>(Arena*);
template<> ::google::bigtable::v2::RowFilter_Interleave* Arena::CreateMaybeMessage<::google::bigtable::v2::RowFilter_Interleave>(Arena*);
template<> ::google::bigtable::v2::RowRange* Arena::CreateMaybeMessage<::google::bigtable::v2::RowRange>(Arena*);
template<> ::google::bigtable::v2::RowSet* Arena::CreateMaybeMessage<::google::bigtable::v2::RowSet>(Arena*);
template<> ::google::bigtable::v2::TimestampRange* Arena::CreateMaybeMessage<::google::bigtable::v2::TimestampRange>(Arena*);
template<> ::google::bigtable::v2::ValueRange* Arena::CreateMaybeMessage<::google::bigtable::v2::ValueRange>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace bigtable {
namespace v2 {

// ===================================================================

class Row PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v2.Row) */ {
 public:
  inline Row() : Row(nullptr) {}
  virtual ~Row();

  Row(const Row& from);
  Row(Row&& from) noexcept
    : Row() {
    *this = ::std::move(from);
  }

  inline Row& operator=(const Row& from) {
    CopyFrom(from);
    return *this;
  }
  inline Row& operator=(Row&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Row& default_instance();

  static inline const Row* internal_default_instance() {
    return reinterpret_cast<const Row*>(
               &_Row_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Row& a, Row& b) {
    a.Swap(&b);
  }
  inline void Swap(Row* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Row* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Row* New() const final {
    return CreateMaybeMessage<Row>(nullptr);
  }

  Row* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Row>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Row& from);
  void MergeFrom(const Row& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Row* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.v2.Row";
  }
  protected:
  explicit Row(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fbigtable_2fv2_2fdata_2eproto);
    return ::descriptor_table_google_2fbigtable_2fv2_2fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFamiliesFieldNumber = 2,
    kKeyFieldNumber = 1,
  };
  // repeated .google.bigtable.v2.Family families = 2;
  int families_size() const;
  private:
  int _internal_families_size() const;
  public:
  void clear_families();
  ::google::bigtable::v2::Family* mutable_families(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::Family >*
      mutable_families();
  private:
  const ::google::bigtable::v2::Family& _internal_families(int index) const;
  ::google::bigtable::v2::Family* _internal_add_families();
  public:
  const ::google::bigtable::v2::Family& families(int index) const;
  ::google::bigtable::v2::Family* add_families();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::Family >&
      families() const;

  // bytes key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // @@protoc_insertion_point(class_scope:google.bigtable.v2.Row)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::Family > families_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fbigtable_2fv2_2fdata_2eproto;
};
// -------------------------------------------------------------------

class Family PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v2.Family) */ {
 public:
  inline Family() : Family(nullptr) {}
  virtual ~Family();

  Family(const Family& from);
  Family(Family&& from) noexcept
    : Family() {
    *this = ::std::move(from);
  }

  inline Family& operator=(const Family& from) {
    CopyFrom(from);
    return *this;
  }
  inline Family& operator=(Family&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Family& default_instance();

  static inline const Family* internal_default_instance() {
    return reinterpret_cast<const Family*>(
               &_Family_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Family& a, Family& b) {
    a.Swap(&b);
  }
  inline void Swap(Family* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Family* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Family* New() const final {
    return CreateMaybeMessage<Family>(nullptr);
  }

  Family* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Family>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Family& from);
  void MergeFrom(const Family& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Family* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.v2.Family";
  }
  protected:
  explicit Family(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fbigtable_2fv2_2fdata_2eproto);
    return ::descriptor_table_google_2fbigtable_2fv2_2fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColumnsFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated .google.bigtable.v2.Column columns = 2;
  int columns_size() const;
  private:
  int _internal_columns_size() const;
  public:
  void clear_columns();
  ::google::bigtable::v2::Column* mutable_columns(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::Column >*
      mutable_columns();
  private:
  const ::google::bigtable::v2::Column& _internal_columns(int index) const;
  ::google::bigtable::v2::Column* _internal_add_columns();
  public:
  const ::google::bigtable::v2::Column& columns(int index) const;
  ::google::bigtable::v2::Column* add_columns();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::Column >&
      columns() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.bigtable.v2.Family)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::Column > columns_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fbigtable_2fv2_2fdata_2eproto;
};
// -------------------------------------------------------------------

class Column PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v2.Column) */ {
 public:
  inline Column() : Column(nullptr) {}
  virtual ~Column();

  Column(const Column& from);
  Column(Column&& from) noexcept
    : Column() {
    *this = ::std::move(from);
  }

  inline Column& operator=(const Column& from) {
    CopyFrom(from);
    return *this;
  }
  inline Column& operator=(Column&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Column& default_instance();

  static inline const Column* internal_default_instance() {
    return reinterpret_cast<const Column*>(
               &_Column_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Column& a, Column& b) {
    a.Swap(&b);
  }
  inline void Swap(Column* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Column* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Column* New() const final {
    return CreateMaybeMessage<Column>(nullptr);
  }

  Column* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Column>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Column& from);
  void MergeFrom(const Column& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Column* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.v2.Column";
  }
  protected:
  explicit Column(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fbigtable_2fv2_2fdata_2eproto);
    return ::descriptor_table_google_2fbigtable_2fv2_2fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCellsFieldNumber = 2,
    kQualifierFieldNumber = 1,
  };
  // repeated .google.bigtable.v2.Cell cells = 2;
  int cells_size() const;
  private:
  int _internal_cells_size() const;
  public:
  void clear_cells();
  ::google::bigtable::v2::Cell* mutable_cells(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::Cell >*
      mutable_cells();
  private:
  const ::google::bigtable::v2::Cell& _internal_cells(int index) const;
  ::google::bigtable::v2::Cell* _internal_add_cells();
  public:
  const ::google::bigtable::v2::Cell& cells(int index) const;
  ::google::bigtable::v2::Cell* add_cells();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::Cell >&
      cells() const;

  // bytes qualifier = 1;
  void clear_qualifier();
  const std::string& qualifier() const;
  void set_qualifier(const std::string& value);
  void set_qualifier(std::string&& value);
  void set_qualifier(const char* value);
  void set_qualifier(const void* value, size_t size);
  std::string* mutable_qualifier();
  std::string* release_qualifier();
  void set_allocated_qualifier(std::string* qualifier);
  private:
  const std::string& _internal_qualifier() const;
  void _internal_set_qualifier(const std::string& value);
  std::string* _internal_mutable_qualifier();
  public:

  // @@protoc_insertion_point(class_scope:google.bigtable.v2.Column)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::Cell > cells_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr qualifier_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fbigtable_2fv2_2fdata_2eproto;
};
// -------------------------------------------------------------------

class Cell PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v2.Cell) */ {
 public:
  inline Cell() : Cell(nullptr) {}
  virtual ~Cell();

  Cell(const Cell& from);
  Cell(Cell&& from) noexcept
    : Cell() {
    *this = ::std::move(from);
  }

  inline Cell& operator=(const Cell& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cell& operator=(Cell&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cell& default_instance();

  static inline const Cell* internal_default_instance() {
    return reinterpret_cast<const Cell*>(
               &_Cell_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Cell& a, Cell& b) {
    a.Swap(&b);
  }
  inline void Swap(Cell* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cell* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cell* New() const final {
    return CreateMaybeMessage<Cell>(nullptr);
  }

  Cell* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cell>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cell& from);
  void MergeFrom(const Cell& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cell* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.v2.Cell";
  }
  protected:
  explicit Cell(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fbigtable_2fv2_2fdata_2eproto);
    return ::descriptor_table_google_2fbigtable_2fv2_2fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 3,
    kValueFieldNumber = 2,
    kTimestampMicrosFieldNumber = 1,
  };
  // repeated string labels = 3;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  const std::string& labels(int index) const;
  std::string* mutable_labels(int index);
  void set_labels(int index, const std::string& value);
  void set_labels(int index, std::string&& value);
  void set_labels(int index, const char* value);
  void set_labels(int index, const char* value, size_t size);
  std::string* add_labels();
  void add_labels(const std::string& value);
  void add_labels(std::string&& value);
  void add_labels(const char* value);
  void add_labels(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& labels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_labels();
  private:
  const std::string& _internal_labels(int index) const;
  std::string* _internal_add_labels();
  public:

  // bytes value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // int64 timestamp_micros = 1;
  void clear_timestamp_micros();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_micros() const;
  void set_timestamp_micros(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp_micros() const;
  void _internal_set_timestamp_micros(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:google.bigtable.v2.Cell)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> labels_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_micros_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fbigtable_2fv2_2fdata_2eproto;
};
// -------------------------------------------------------------------

class RowRange PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v2.RowRange) */ {
 public:
  inline RowRange() : RowRange(nullptr) {}
  virtual ~RowRange();

  RowRange(const RowRange& from);
  RowRange(RowRange&& from) noexcept
    : RowRange() {
    *this = ::std::move(from);
  }

  inline RowRange& operator=(const RowRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline RowRange& operator=(RowRange&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RowRange& default_instance();

  enum StartKeyCase {
    kStartKeyClosed = 1,
    kStartKeyOpen = 2,
    START_KEY_NOT_SET = 0,
  };

  enum EndKeyCase {
    kEndKeyOpen = 3,
    kEndKeyClosed = 4,
    END_KEY_NOT_SET = 0,
  };

  static inline const RowRange* internal_default_instance() {
    return reinterpret_cast<const RowRange*>(
               &_RowRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RowRange& a, RowRange& b) {
    a.Swap(&b);
  }
  inline void Swap(RowRange* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RowRange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RowRange* New() const final {
    return CreateMaybeMessage<RowRange>(nullptr);
  }

  RowRange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RowRange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RowRange& from);
  void MergeFrom(const RowRange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RowRange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.v2.RowRange";
  }
  protected:
  explicit RowRange(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fbigtable_2fv2_2fdata_2eproto);
    return ::descriptor_table_google_2fbigtable_2fv2_2fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartKeyClosedFieldNumber = 1,
    kStartKeyOpenFieldNumber = 2,
    kEndKeyOpenFieldNumber = 3,
    kEndKeyClosedFieldNumber = 4,
  };
  // bytes start_key_closed = 1;
  private:
  bool _internal_has_start_key_closed() const;
  public:
  void clear_start_key_closed();
  const std::string& start_key_closed() const;
  void set_start_key_closed(const std::string& value);
  void set_start_key_closed(std::string&& value);
  void set_start_key_closed(const char* value);
  void set_start_key_closed(const void* value, size_t size);
  std::string* mutable_start_key_closed();
  std::string* release_start_key_closed();
  void set_allocated_start_key_closed(std::string* start_key_closed);
  private:
  const std::string& _internal_start_key_closed() const;
  void _internal_set_start_key_closed(const std::string& value);
  std::string* _internal_mutable_start_key_closed();
  public:

  // bytes start_key_open = 2;
  private:
  bool _internal_has_start_key_open() const;
  public:
  void clear_start_key_open();
  const std::string& start_key_open() const;
  void set_start_key_open(const std::string& value);
  void set_start_key_open(std::string&& value);
  void set_start_key_open(const char* value);
  void set_start_key_open(const void* value, size_t size);
  std::string* mutable_start_key_open();
  std::string* release_start_key_open();
  void set_allocated_start_key_open(std::string* start_key_open);
  private:
  const std::string& _internal_start_key_open() const;
  void _internal_set_start_key_open(const std::string& value);
  std::string* _internal_mutable_start_key_open();
  public:

  // bytes end_key_open = 3;
  private:
  bool _internal_has_end_key_open() const;
  public:
  void clear_end_key_open();
  const std::string& end_key_open() const;
  void set_end_key_open(const std::string& value);
  void set_end_key_open(std::string&& value);
  void set_end_key_open(const char* value);
  void set_end_key_open(const void* value, size_t size);
  std::string* mutable_end_key_open();
  std::string* release_end_key_open();
  void set_allocated_end_key_open(std::string* end_key_open);
  private:
  const std::string& _internal_end_key_open() const;
  void _internal_set_end_key_open(const std::string& value);
  std::string* _internal_mutable_end_key_open();
  public:

  // bytes end_key_closed = 4;
  private:
  bool _internal_has_end_key_closed() const;
  public:
  void clear_end_key_closed();
  const std::string& end_key_closed() const;
  void set_end_key_closed(const std::string& value);
  void set_end_key_closed(std::string&& value);
  void set_end_key_closed(const char* value);
  void set_end_key_closed(const void* value, size_t size);
  std::string* mutable_end_key_closed();
  std::string* release_end_key_closed();
  void set_allocated_end_key_closed(std::string* end_key_closed);
  private:
  const std::string& _internal_end_key_closed() const;
  void _internal_set_end_key_closed(const std::string& value);
  std::string* _internal_mutable_end_key_closed();
  public:

  void clear_start_key();
  StartKeyCase start_key_case() const;
  void clear_end_key();
  EndKeyCase end_key_case() const;
  // @@protoc_insertion_point(class_scope:google.bigtable.v2.RowRange)
 private:
  class _Internal;
  void set_has_start_key_closed();
  void set_has_start_key_open();
  void set_has_end_key_open();
  void set_has_end_key_closed();

  inline bool has_start_key() const;
  inline void clear_has_start_key();

  inline bool has_end_key() const;
  inline void clear_has_end_key();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union StartKeyUnion {
    StartKeyUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_key_closed_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_key_open_;
  } start_key_;
  union EndKeyUnion {
    EndKeyUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr end_key_open_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr end_key_closed_;
  } end_key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[2];

  friend struct ::TableStruct_google_2fbigtable_2fv2_2fdata_2eproto;
};
// -------------------------------------------------------------------

class RowSet PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v2.RowSet) */ {
 public:
  inline RowSet() : RowSet(nullptr) {}
  virtual ~RowSet();

  RowSet(const RowSet& from);
  RowSet(RowSet&& from) noexcept
    : RowSet() {
    *this = ::std::move(from);
  }

  inline RowSet& operator=(const RowSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline RowSet& operator=(RowSet&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RowSet& default_instance();

  static inline const RowSet* internal_default_instance() {
    return reinterpret_cast<const RowSet*>(
               &_RowSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RowSet& a, RowSet& b) {
    a.Swap(&b);
  }
  inline void Swap(RowSet* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RowSet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RowSet* New() const final {
    return CreateMaybeMessage<RowSet>(nullptr);
  }

  RowSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RowSet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RowSet& from);
  void MergeFrom(const RowSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RowSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.v2.RowSet";
  }
  protected:
  explicit RowSet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fbigtable_2fv2_2fdata_2eproto);
    return ::descriptor_table_google_2fbigtable_2fv2_2fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowKeysFieldNumber = 1,
    kRowRangesFieldNumber = 2,
  };
  // repeated bytes row_keys = 1;
  int row_keys_size() const;
  private:
  int _internal_row_keys_size() const;
  public:
  void clear_row_keys();
  const std::string& row_keys(int index) const;
  std::string* mutable_row_keys(int index);
  void set_row_keys(int index, const std::string& value);
  void set_row_keys(int index, std::string&& value);
  void set_row_keys(int index, const char* value);
  void set_row_keys(int index, const void* value, size_t size);
  std::string* add_row_keys();
  void add_row_keys(const std::string& value);
  void add_row_keys(std::string&& value);
  void add_row_keys(const char* value);
  void add_row_keys(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& row_keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_row_keys();
  private:
  const std::string& _internal_row_keys(int index) const;
  std::string* _internal_add_row_keys();
  public:

  // repeated .google.bigtable.v2.RowRange row_ranges = 2;
  int row_ranges_size() const;
  private:
  int _internal_row_ranges_size() const;
  public:
  void clear_row_ranges();
  ::google::bigtable::v2::RowRange* mutable_row_ranges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::RowRange >*
      mutable_row_ranges();
  private:
  const ::google::bigtable::v2::RowRange& _internal_row_ranges(int index) const;
  ::google::bigtable::v2::RowRange* _internal_add_row_ranges();
  public:
  const ::google::bigtable::v2::RowRange& row_ranges(int index) const;
  ::google::bigtable::v2::RowRange* add_row_ranges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::RowRange >&
      row_ranges() const;

  // @@protoc_insertion_point(class_scope:google.bigtable.v2.RowSet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> row_keys_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::RowRange > row_ranges_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fbigtable_2fv2_2fdata_2eproto;
};
// -------------------------------------------------------------------

class ColumnRange PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v2.ColumnRange) */ {
 public:
  inline ColumnRange() : ColumnRange(nullptr) {}
  virtual ~ColumnRange();

  ColumnRange(const ColumnRange& from);
  ColumnRange(ColumnRange&& from) noexcept
    : ColumnRange() {
    *this = ::std::move(from);
  }

  inline ColumnRange& operator=(const ColumnRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColumnRange& operator=(ColumnRange&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ColumnRange& default_instance();

  enum StartQualifierCase {
    kStartQualifierClosed = 2,
    kStartQualifierOpen = 3,
    START_QUALIFIER_NOT_SET = 0,
  };

  enum EndQualifierCase {
    kEndQualifierClosed = 4,
    kEndQualifierOpen = 5,
    END_QUALIFIER_NOT_SET = 0,
  };

  static inline const ColumnRange* internal_default_instance() {
    return reinterpret_cast<const ColumnRange*>(
               &_ColumnRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ColumnRange& a, ColumnRange& b) {
    a.Swap(&b);
  }
  inline void Swap(ColumnRange* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ColumnRange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ColumnRange* New() const final {
    return CreateMaybeMessage<ColumnRange>(nullptr);
  }

  ColumnRange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ColumnRange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ColumnRange& from);
  void MergeFrom(const ColumnRange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ColumnRange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.v2.ColumnRange";
  }
  protected:
  explicit ColumnRange(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fbigtable_2fv2_2fdata_2eproto);
    return ::descriptor_table_google_2fbigtable_2fv2_2fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFamilyNameFieldNumber = 1,
    kStartQualifierClosedFieldNumber = 2,
    kStartQualifierOpenFieldNumber = 3,
    kEndQualifierClosedFieldNumber = 4,
    kEndQualifierOpenFieldNumber = 5,
  };
  // string family_name = 1;
  void clear_family_name();
  const std::string& family_name() const;
  void set_family_name(const std::string& value);
  void set_family_name(std::string&& value);
  void set_family_name(const char* value);
  void set_family_name(const char* value, size_t size);
  std::string* mutable_family_name();
  std::string* release_family_name();
  void set_allocated_family_name(std::string* family_name);
  private:
  const std::string& _internal_family_name() const;
  void _internal_set_family_name(const std::string& value);
  std::string* _internal_mutable_family_name();
  public:

  // bytes start_qualifier_closed = 2;
  private:
  bool _internal_has_start_qualifier_closed() const;
  public:
  void clear_start_qualifier_closed();
  const std::string& start_qualifier_closed() const;
  void set_start_qualifier_closed(const std::string& value);
  void set_start_qualifier_closed(std::string&& value);
  void set_start_qualifier_closed(const char* value);
  void set_start_qualifier_closed(const void* value, size_t size);
  std::string* mutable_start_qualifier_closed();
  std::string* release_start_qualifier_closed();
  void set_allocated_start_qualifier_closed(std::string* start_qualifier_closed);
  private:
  const std::string& _internal_start_qualifier_closed() const;
  void _internal_set_start_qualifier_closed(const std::string& value);
  std::string* _internal_mutable_start_qualifier_closed();
  public:

  // bytes start_qualifier_open = 3;
  private:
  bool _internal_has_start_qualifier_open() const;
  public:
  void clear_start_qualifier_open();
  const std::string& start_qualifier_open() const;
  void set_start_qualifier_open(const std::string& value);
  void set_start_qualifier_open(std::string&& value);
  void set_start_qualifier_open(const char* value);
  void set_start_qualifier_open(const void* value, size_t size);
  std::string* mutable_start_qualifier_open();
  std::string* release_start_qualifier_open();
  void set_allocated_start_qualifier_open(std::string* start_qualifier_open);
  private:
  const std::string& _internal_start_qualifier_open() const;
  void _internal_set_start_qualifier_open(const std::string& value);
  std::string* _internal_mutable_start_qualifier_open();
  public:

  // bytes end_qualifier_closed = 4;
  private:
  bool _internal_has_end_qualifier_closed() const;
  public:
  void clear_end_qualifier_closed();
  const std::string& end_qualifier_closed() const;
  void set_end_qualifier_closed(const std::string& value);
  void set_end_qualifier_closed(std::string&& value);
  void set_end_qualifier_closed(const char* value);
  void set_end_qualifier_closed(const void* value, size_t size);
  std::string* mutable_end_qualifier_closed();
  std::string* release_end_qualifier_closed();
  void set_allocated_end_qualifier_closed(std::string* end_qualifier_closed);
  private:
  const std::string& _internal_end_qualifier_closed() const;
  void _internal_set_end_qualifier_closed(const std::string& value);
  std::string* _internal_mutable_end_qualifier_closed();
  public:

  // bytes end_qualifier_open = 5;
  private:
  bool _internal_has_end_qualifier_open() const;
  public:
  void clear_end_qualifier_open();
  const std::string& end_qualifier_open() const;
  void set_end_qualifier_open(const std::string& value);
  void set_end_qualifier_open(std::string&& value);
  void set_end_qualifier_open(const char* value);
  void set_end_qualifier_open(const void* value, size_t size);
  std::string* mutable_end_qualifier_open();
  std::string* release_end_qualifier_open();
  void set_allocated_end_qualifier_open(std::string* end_qualifier_open);
  private:
  const std::string& _internal_end_qualifier_open() const;
  void _internal_set_end_qualifier_open(const std::string& value);
  std::string* _internal_mutable_end_qualifier_open();
  public:

  void clear_start_qualifier();
  StartQualifierCase start_qualifier_case() const;
  void clear_end_qualifier();
  EndQualifierCase end_qualifier_case() const;
  // @@protoc_insertion_point(class_scope:google.bigtable.v2.ColumnRange)
 private:
  class _Internal;
  void set_has_start_qualifier_closed();
  void set_has_start_qualifier_open();
  void set_has_end_qualifier_closed();
  void set_has_end_qualifier_open();

  inline bool has_start_qualifier() const;
  inline void clear_has_start_qualifier();

  inline bool has_end_qualifier() const;
  inline void clear_has_end_qualifier();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr family_name_;
  union StartQualifierUnion {
    StartQualifierUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_qualifier_closed_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_qualifier_open_;
  } start_qualifier_;
  union EndQualifierUnion {
    EndQualifierUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr end_qualifier_closed_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr end_qualifier_open_;
  } end_qualifier_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[2];

  friend struct ::TableStruct_google_2fbigtable_2fv2_2fdata_2eproto;
};
// -------------------------------------------------------------------

class TimestampRange PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v2.TimestampRange) */ {
 public:
  inline TimestampRange() : TimestampRange(nullptr) {}
  virtual ~TimestampRange();

  TimestampRange(const TimestampRange& from);
  TimestampRange(TimestampRange&& from) noexcept
    : TimestampRange() {
    *this = ::std::move(from);
  }

  inline TimestampRange& operator=(const TimestampRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimestampRange& operator=(TimestampRange&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TimestampRange& default_instance();

  static inline const TimestampRange* internal_default_instance() {
    return reinterpret_cast<const TimestampRange*>(
               &_TimestampRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(TimestampRange& a, TimestampRange& b) {
    a.Swap(&b);
  }
  inline void Swap(TimestampRange* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimestampRange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TimestampRange* New() const final {
    return CreateMaybeMessage<TimestampRange>(nullptr);
  }

  TimestampRange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TimestampRange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TimestampRange& from);
  void MergeFrom(const TimestampRange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimestampRange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.v2.TimestampRange";
  }
  protected:
  explicit TimestampRange(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fbigtable_2fv2_2fdata_2eproto);
    return ::descriptor_table_google_2fbigtable_2fv2_2fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartTimestampMicrosFieldNumber = 1,
    kEndTimestampMicrosFieldNumber = 2,
  };
  // int64 start_timestamp_micros = 1;
  void clear_start_timestamp_micros();
  ::PROTOBUF_NAMESPACE_ID::int64 start_timestamp_micros() const;
  void set_start_timestamp_micros(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_start_timestamp_micros() const;
  void _internal_set_start_timestamp_micros(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 end_timestamp_micros = 2;
  void clear_end_timestamp_micros();
  ::PROTOBUF_NAMESPACE_ID::int64 end_timestamp_micros() const;
  void set_end_timestamp_micros(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_end_timestamp_micros() const;
  void _internal_set_end_timestamp_micros(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:google.bigtable.v2.TimestampRange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 start_timestamp_micros_;
  ::PROTOBUF_NAMESPACE_ID::int64 end_timestamp_micros_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fbigtable_2fv2_2fdata_2eproto;
};
// -------------------------------------------------------------------

class ValueRange PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v2.ValueRange) */ {
 public:
  inline ValueRange() : ValueRange(nullptr) {}
  virtual ~ValueRange();

  ValueRange(const ValueRange& from);
  ValueRange(ValueRange&& from) noexcept
    : ValueRange() {
    *this = ::std::move(from);
  }

  inline ValueRange& operator=(const ValueRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValueRange& operator=(ValueRange&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ValueRange& default_instance();

  enum StartValueCase {
    kStartValueClosed = 1,
    kStartValueOpen = 2,
    START_VALUE_NOT_SET = 0,
  };

  enum EndValueCase {
    kEndValueClosed = 3,
    kEndValueOpen = 4,
    END_VALUE_NOT_SET = 0,
  };

  static inline const ValueRange* internal_default_instance() {
    return reinterpret_cast<const ValueRange*>(
               &_ValueRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ValueRange& a, ValueRange& b) {
    a.Swap(&b);
  }
  inline void Swap(ValueRange* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValueRange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ValueRange* New() const final {
    return CreateMaybeMessage<ValueRange>(nullptr);
  }

  ValueRange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ValueRange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ValueRange& from);
  void MergeFrom(const ValueRange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValueRange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.v2.ValueRange";
  }
  protected:
  explicit ValueRange(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fbigtable_2fv2_2fdata_2eproto);
    return ::descriptor_table_google_2fbigtable_2fv2_2fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartValueClosedFieldNumber = 1,
    kStartValueOpenFieldNumber = 2,
    kEndValueClosedFieldNumber = 3,
    kEndValueOpenFieldNumber = 4,
  };
  // bytes start_value_closed = 1;
  private:
  bool _internal_has_start_value_closed() const;
  public:
  void clear_start_value_closed();
  const std::string& start_value_closed() const;
  void set_start_value_closed(const std::string& value);
  void set_start_value_closed(std::string&& value);
  void set_start_value_closed(const char* value);
  void set_start_value_closed(const void* value, size_t size);
  std::string* mutable_start_value_closed();
  std::string* release_start_value_closed();
  void set_allocated_start_value_closed(std::string* start_value_closed);
  private:
  const std::string& _internal_start_value_closed() const;
  void _internal_set_start_value_closed(const std::string& value);
  std::string* _internal_mutable_start_value_closed();
  public:

  // bytes start_value_open = 2;
  private:
  bool _internal_has_start_value_open() const;
  public:
  void clear_start_value_open();
  const std::string& start_value_open() const;
  void set_start_value_open(const std::string& value);
  void set_start_value_open(std::string&& value);
  void set_start_value_open(const char* value);
  void set_start_value_open(const void* value, size_t size);
  std::string* mutable_start_value_open();
  std::string* release_start_value_open();
  void set_allocated_start_value_open(std::string* start_value_open);
  private:
  const std::string& _internal_start_value_open() const;
  void _internal_set_start_value_open(const std::string& value);
  std::string* _internal_mutable_start_value_open();
  public:

  // bytes end_value_closed = 3;
  private:
  bool _internal_has_end_value_closed() const;
  public:
  void clear_end_value_closed();
  const std::string& end_value_closed() const;
  void set_end_value_closed(const std::string& value);
  void set_end_value_closed(std::string&& value);
  void set_end_value_closed(const char* value);
  void set_end_value_closed(const void* value, size_t size);
  std::string* mutable_end_value_closed();
  std::string* release_end_value_closed();
  void set_allocated_end_value_closed(std::string* end_value_closed);
  private:
  const std::string& _internal_end_value_closed() const;
  void _internal_set_end_value_closed(const std::string& value);
  std::string* _internal_mutable_end_value_closed();
  public:

  // bytes end_value_open = 4;
  private:
  bool _internal_has_end_value_open() const;
  public:
  void clear_end_value_open();
  const std::string& end_value_open() const;
  void set_end_value_open(const std::string& value);
  void set_end_value_open(std::string&& value);
  void set_end_value_open(const char* value);
  void set_end_value_open(const void* value, size_t size);
  std::string* mutable_end_value_open();
  std::string* release_end_value_open();
  void set_allocated_end_value_open(std::string* end_value_open);
  private:
  const std::string& _internal_end_value_open() const;
  void _internal_set_end_value_open(const std::string& value);
  std::string* _internal_mutable_end_value_open();
  public:

  void clear_start_value();
  StartValueCase start_value_case() const;
  void clear_end_value();
  EndValueCase end_value_case() const;
  // @@protoc_insertion_point(class_scope:google.bigtable.v2.ValueRange)
 private:
  class _Internal;
  void set_has_start_value_closed();
  void set_has_start_value_open();
  void set_has_end_value_closed();
  void set_has_end_value_open();

  inline bool has_start_value() const;
  inline void clear_has_start_value();

  inline bool has_end_value() const;
  inline void clear_has_end_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union StartValueUnion {
    StartValueUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_value_closed_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_value_open_;
  } start_value_;
  union EndValueUnion {
    EndValueUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr end_value_closed_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr end_value_open_;
  } end_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[2];

  friend struct ::TableStruct_google_2fbigtable_2fv2_2fdata_2eproto;
};
// -------------------------------------------------------------------

class RowFilter_Chain PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v2.RowFilter.Chain) */ {
 public:
  inline RowFilter_Chain() : RowFilter_Chain(nullptr) {}
  virtual ~RowFilter_Chain();

  RowFilter_Chain(const RowFilter_Chain& from);
  RowFilter_Chain(RowFilter_Chain&& from) noexcept
    : RowFilter_Chain() {
    *this = ::std::move(from);
  }

  inline RowFilter_Chain& operator=(const RowFilter_Chain& from) {
    CopyFrom(from);
    return *this;
  }
  inline RowFilter_Chain& operator=(RowFilter_Chain&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RowFilter_Chain& default_instance();

  static inline const RowFilter_Chain* internal_default_instance() {
    return reinterpret_cast<const RowFilter_Chain*>(
               &_RowFilter_Chain_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(RowFilter_Chain& a, RowFilter_Chain& b) {
    a.Swap(&b);
  }
  inline void Swap(RowFilter_Chain* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RowFilter_Chain* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RowFilter_Chain* New() const final {
    return CreateMaybeMessage<RowFilter_Chain>(nullptr);
  }

  RowFilter_Chain* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RowFilter_Chain>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RowFilter_Chain& from);
  void MergeFrom(const RowFilter_Chain& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RowFilter_Chain* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.v2.RowFilter.Chain";
  }
  protected:
  explicit RowFilter_Chain(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fbigtable_2fv2_2fdata_2eproto);
    return ::descriptor_table_google_2fbigtable_2fv2_2fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFiltersFieldNumber = 1,
  };
  // repeated .google.bigtable.v2.RowFilter filters = 1;
  int filters_size() const;
  private:
  int _internal_filters_size() const;
  public:
  void clear_filters();
  ::google::bigtable::v2::RowFilter* mutable_filters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::RowFilter >*
      mutable_filters();
  private:
  const ::google::bigtable::v2::RowFilter& _internal_filters(int index) const;
  ::google::bigtable::v2::RowFilter* _internal_add_filters();
  public:
  const ::google::bigtable::v2::RowFilter& filters(int index) const;
  ::google::bigtable::v2::RowFilter* add_filters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::RowFilter >&
      filters() const;

  // @@protoc_insertion_point(class_scope:google.bigtable.v2.RowFilter.Chain)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::RowFilter > filters_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fbigtable_2fv2_2fdata_2eproto;
};
// -------------------------------------------------------------------

class RowFilter_Interleave PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v2.RowFilter.Interleave) */ {
 public:
  inline RowFilter_Interleave() : RowFilter_Interleave(nullptr) {}
  virtual ~RowFilter_Interleave();

  RowFilter_Interleave(const RowFilter_Interleave& from);
  RowFilter_Interleave(RowFilter_Interleave&& from) noexcept
    : RowFilter_Interleave() {
    *this = ::std::move(from);
  }

  inline RowFilter_Interleave& operator=(const RowFilter_Interleave& from) {
    CopyFrom(from);
    return *this;
  }
  inline RowFilter_Interleave& operator=(RowFilter_Interleave&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RowFilter_Interleave& default_instance();

  static inline const RowFilter_Interleave* internal_default_instance() {
    return reinterpret_cast<const RowFilter_Interleave*>(
               &_RowFilter_Interleave_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(RowFilter_Interleave& a, RowFilter_Interleave& b) {
    a.Swap(&b);
  }
  inline void Swap(RowFilter_Interleave* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RowFilter_Interleave* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RowFilter_Interleave* New() const final {
    return CreateMaybeMessage<RowFilter_Interleave>(nullptr);
  }

  RowFilter_Interleave* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RowFilter_Interleave>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RowFilter_Interleave& from);
  void MergeFrom(const RowFilter_Interleave& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RowFilter_Interleave* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.v2.RowFilter.Interleave";
  }
  protected:
  explicit RowFilter_Interleave(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fbigtable_2fv2_2fdata_2eproto);
    return ::descriptor_table_google_2fbigtable_2fv2_2fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFiltersFieldNumber = 1,
  };
  // repeated .google.bigtable.v2.RowFilter filters = 1;
  int filters_size() const;
  private:
  int _internal_filters_size() const;
  public:
  void clear_filters();
  ::google::bigtable::v2::RowFilter* mutable_filters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::RowFilter >*
      mutable_filters();
  private:
  const ::google::bigtable::v2::RowFilter& _internal_filters(int index) const;
  ::google::bigtable::v2::RowFilter* _internal_add_filters();
  public:
  const ::google::bigtable::v2::RowFilter& filters(int index) const;
  ::google::bigtable::v2::RowFilter* add_filters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::RowFilter >&
      filters() const;

  // @@protoc_insertion_point(class_scope:google.bigtable.v2.RowFilter.Interleave)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::RowFilter > filters_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fbigtable_2fv2_2fdata_2eproto;
};
// -------------------------------------------------------------------

class RowFilter_Condition PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v2.RowFilter.Condition) */ {
 public:
  inline RowFilter_Condition() : RowFilter_Condition(nullptr) {}
  virtual ~RowFilter_Condition();

  RowFilter_Condition(const RowFilter_Condition& from);
  RowFilter_Condition(RowFilter_Condition&& from) noexcept
    : RowFilter_Condition() {
    *this = ::std::move(from);
  }

  inline RowFilter_Condition& operator=(const RowFilter_Condition& from) {
    CopyFrom(from);
    return *this;
  }
  inline RowFilter_Condition& operator=(RowFilter_Condition&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RowFilter_Condition& default_instance();

  static inline const RowFilter_Condition* internal_default_instance() {
    return reinterpret_cast<const RowFilter_Condition*>(
               &_RowFilter_Condition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(RowFilter_Condition& a, RowFilter_Condition& b) {
    a.Swap(&b);
  }
  inline void Swap(RowFilter_Condition* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RowFilter_Condition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RowFilter_Condition* New() const final {
    return CreateMaybeMessage<RowFilter_Condition>(nullptr);
  }

  RowFilter_Condition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RowFilter_Condition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RowFilter_Condition& from);
  void MergeFrom(const RowFilter_Condition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RowFilter_Condition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.v2.RowFilter.Condition";
  }
  protected:
  explicit RowFilter_Condition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fbigtable_2fv2_2fdata_2eproto);
    return ::descriptor_table_google_2fbigtable_2fv2_2fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPredicateFilterFieldNumber = 1,
    kTrueFilterFieldNumber = 2,
    kFalseFilterFieldNumber = 3,
  };
  // .google.bigtable.v2.RowFilter predicate_filter = 1;
  bool has_predicate_filter() const;
  private:
  bool _internal_has_predicate_filter() const;
  public:
  void clear_predicate_filter();
  const ::google::bigtable::v2::RowFilter& predicate_filter() const;
  ::google::bigtable::v2::RowFilter* release_predicate_filter();
  ::google::bigtable::v2::RowFilter* mutable_predicate_filter();
  void set_allocated_predicate_filter(::google::bigtable::v2::RowFilter* predicate_filter);
  private:
  const ::google::bigtable::v2::RowFilter& _internal_predicate_filter() const;
  ::google::bigtable::v2::RowFilter* _internal_mutable_predicate_filter();
  public:
  void unsafe_arena_set_allocated_predicate_filter(
      ::google::bigtable::v2::RowFilter* predicate_filter);
  ::google::bigtable::v2::RowFilter* unsafe_arena_release_predicate_filter();

  // .google.bigtable.v2.RowFilter true_filter = 2;
  bool has_true_filter() const;
  private:
  bool _internal_has_true_filter() const;
  public:
  void clear_true_filter();
  const ::google::bigtable::v2::RowFilter& true_filter() const;
  ::google::bigtable::v2::RowFilter* release_true_filter();
  ::google::bigtable::v2::RowFilter* mutable_true_filter();
  void set_allocated_true_filter(::google::bigtable::v2::RowFilter* true_filter);
  private:
  const ::google::bigtable::v2::RowFilter& _internal_true_filter() const;
  ::google::bigtable::v2::RowFilter* _internal_mutable_true_filter();
  public:
  void unsafe_arena_set_allocated_true_filter(
      ::google::bigtable::v2::RowFilter* true_filter);
  ::google::bigtable::v2::RowFilter* unsafe_arena_release_true_filter();

  // .google.bigtable.v2.RowFilter false_filter = 3;
  bool has_false_filter() const;
  private:
  bool _internal_has_false_filter() const;
  public:
  void clear_false_filter();
  const ::google::bigtable::v2::RowFilter& false_filter() const;
  ::google::bigtable::v2::RowFilter* release_false_filter();
  ::google::bigtable::v2::RowFilter* mutable_false_filter();
  void set_allocated_false_filter(::google::bigtable::v2::RowFilter* false_filter);
  private:
  const ::google::bigtable::v2::RowFilter& _internal_false_filter() const;
  ::google::bigtable::v2::RowFilter* _internal_mutable_false_filter();
  public:
  void unsafe_arena_set_allocated_false_filter(
      ::google::bigtable::v2::RowFilter* false_filter);
  ::google::bigtable::v2::RowFilter* unsafe_arena_release_false_filter();

  // @@protoc_insertion_point(class_scope:google.bigtable.v2.RowFilter.Condition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::bigtable::v2::RowFilter* predicate_filter_;
  ::google::bigtable::v2::RowFilter* true_filter_;
  ::google::bigtable::v2::RowFilter* false_filter_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fbigtable_2fv2_2fdata_2eproto;
};
// -------------------------------------------------------------------

class RowFilter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v2.RowFilter) */ {
 public:
  inline RowFilter() : RowFilter(nullptr) {}
  virtual ~RowFilter();

  RowFilter(const RowFilter& from);
  RowFilter(RowFilter&& from) noexcept
    : RowFilter() {
    *this = ::std::move(from);
  }

  inline RowFilter& operator=(const RowFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline RowFilter& operator=(RowFilter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RowFilter& default_instance();

  enum FilterCase {
    kChain = 1,
    kInterleave = 2,
    kCondition = 3,
    kSink = 16,
    kPassAllFilter = 17,
    kBlockAllFilter = 18,
    kRowKeyRegexFilter = 4,
    kRowSampleFilter = 14,
    kFamilyNameRegexFilter = 5,
    kColumnQualifierRegexFilter = 6,
    kColumnRangeFilter = 7,
    kTimestampRangeFilter = 8,
    kValueRegexFilter = 9,
    kValueRangeFilter = 15,
    kCellsPerRowOffsetFilter = 10,
    kCellsPerRowLimitFilter = 11,
    kCellsPerColumnLimitFilter = 12,
    kStripValueTransformer = 13,
    kApplyLabelTransformer = 19,
    FILTER_NOT_SET = 0,
  };

  static inline const RowFilter* internal_default_instance() {
    return reinterpret_cast<const RowFilter*>(
               &_RowFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(RowFilter& a, RowFilter& b) {
    a.Swap(&b);
  }
  inline void Swap(RowFilter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RowFilter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RowFilter* New() const final {
    return CreateMaybeMessage<RowFilter>(nullptr);
  }

  RowFilter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RowFilter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RowFilter& from);
  void MergeFrom(const RowFilter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RowFilter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.v2.RowFilter";
  }
  protected:
  explicit RowFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fbigtable_2fv2_2fdata_2eproto);
    return ::descriptor_table_google_2fbigtable_2fv2_2fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef RowFilter_Chain Chain;
  typedef RowFilter_Interleave Interleave;
  typedef RowFilter_Condition Condition;

  // accessors -------------------------------------------------------

  enum : int {
    kChainFieldNumber = 1,
    kInterleaveFieldNumber = 2,
    kConditionFieldNumber = 3,
    kSinkFieldNumber = 16,
    kPassAllFilterFieldNumber = 17,
    kBlockAllFilterFieldNumber = 18,
    kRowKeyRegexFilterFieldNumber = 4,
    kRowSampleFilterFieldNumber = 14,
    kFamilyNameRegexFilterFieldNumber = 5,
    kColumnQualifierRegexFilterFieldNumber = 6,
    kColumnRangeFilterFieldNumber = 7,
    kTimestampRangeFilterFieldNumber = 8,
    kValueRegexFilterFieldNumber = 9,
    kValueRangeFilterFieldNumber = 15,
    kCellsPerRowOffsetFilterFieldNumber = 10,
    kCellsPerRowLimitFilterFieldNumber = 11,
    kCellsPerColumnLimitFilterFieldNumber = 12,
    kStripValueTransformerFieldNumber = 13,
    kApplyLabelTransformerFieldNumber = 19,
  };
  // .google.bigtable.v2.RowFilter.Chain chain = 1;
  bool has_chain() const;
  private:
  bool _internal_has_chain() const;
  public:
  void clear_chain();
  const ::google::bigtable::v2::RowFilter_Chain& chain() const;
  ::google::bigtable::v2::RowFilter_Chain* release_chain();
  ::google::bigtable::v2::RowFilter_Chain* mutable_chain();
  void set_allocated_chain(::google::bigtable::v2::RowFilter_Chain* chain);
  private:
  const ::google::bigtable::v2::RowFilter_Chain& _internal_chain() const;
  ::google::bigtable::v2::RowFilter_Chain* _internal_mutable_chain();
  public:
  void unsafe_arena_set_allocated_chain(
      ::google::bigtable::v2::RowFilter_Chain* chain);
  ::google::bigtable::v2::RowFilter_Chain* unsafe_arena_release_chain();

  // .google.bigtable.v2.RowFilter.Interleave interleave = 2;
  bool has_interleave() const;
  private:
  bool _internal_has_interleave() const;
  public:
  void clear_interleave();
  const ::google::bigtable::v2::RowFilter_Interleave& interleave() const;
  ::google::bigtable::v2::RowFilter_Interleave* release_interleave();
  ::google::bigtable::v2::RowFilter_Interleave* mutable_interleave();
  void set_allocated_interleave(::google::bigtable::v2::RowFilter_Interleave* interleave);
  private:
  const ::google::bigtable::v2::RowFilter_Interleave& _internal_interleave() const;
  ::google::bigtable::v2::RowFilter_Interleave* _internal_mutable_interleave();
  public:
  void unsafe_arena_set_allocated_interleave(
      ::google::bigtable::v2::RowFilter_Interleave* interleave);
  ::google::bigtable::v2::RowFilter_Interleave* unsafe_arena_release_interleave();

  // .google.bigtable.v2.RowFilter.Condition condition = 3;
  bool has_condition() const;
  private:
  bool _internal_has_condition() const;
  public:
  void clear_condition();
  const ::google::bigtable::v2::RowFilter_Condition& condition() const;
  ::google::bigtable::v2::RowFilter_Condition* release_condition();
  ::google::bigtable::v2::RowFilter_Condition* mutable_condition();
  void set_allocated_condition(::google::bigtable::v2::RowFilter_Condition* condition);
  private:
  const ::google::bigtable::v2::RowFilter_Condition& _internal_condition() const;
  ::google::bigtable::v2::RowFilter_Condition* _internal_mutable_condition();
  public:
  void unsafe_arena_set_allocated_condition(
      ::google::bigtable::v2::RowFilter_Condition* condition);
  ::google::bigtable::v2::RowFilter_Condition* unsafe_arena_release_condition();

  // bool sink = 16;
  private:
  bool _internal_has_sink() const;
  public:
  void clear_sink();
  bool sink() const;
  void set_sink(bool value);
  private:
  bool _internal_sink() const;
  void _internal_set_sink(bool value);
  public:

  // bool pass_all_filter = 17;
  private:
  bool _internal_has_pass_all_filter() const;
  public:
  void clear_pass_all_filter();
  bool pass_all_filter() const;
  void set_pass_all_filter(bool value);
  private:
  bool _internal_pass_all_filter() const;
  void _internal_set_pass_all_filter(bool value);
  public:

  // bool block_all_filter = 18;
  private:
  bool _internal_has_block_all_filter() const;
  public:
  void clear_block_all_filter();
  bool block_all_filter() const;
  void set_block_all_filter(bool value);
  private:
  bool _internal_block_all_filter() const;
  void _internal_set_block_all_filter(bool value);
  public:

  // bytes row_key_regex_filter = 4;
  private:
  bool _internal_has_row_key_regex_filter() const;
  public:
  void clear_row_key_regex_filter();
  const std::string& row_key_regex_filter() const;
  void set_row_key_regex_filter(const std::string& value);
  void set_row_key_regex_filter(std::string&& value);
  void set_row_key_regex_filter(const char* value);
  void set_row_key_regex_filter(const void* value, size_t size);
  std::string* mutable_row_key_regex_filter();
  std::string* release_row_key_regex_filter();
  void set_allocated_row_key_regex_filter(std::string* row_key_regex_filter);
  private:
  const std::string& _internal_row_key_regex_filter() const;
  void _internal_set_row_key_regex_filter(const std::string& value);
  std::string* _internal_mutable_row_key_regex_filter();
  public:

  // double row_sample_filter = 14;
  private:
  bool _internal_has_row_sample_filter() const;
  public:
  void clear_row_sample_filter();
  double row_sample_filter() const;
  void set_row_sample_filter(double value);
  private:
  double _internal_row_sample_filter() const;
  void _internal_set_row_sample_filter(double value);
  public:

  // string family_name_regex_filter = 5;
  private:
  bool _internal_has_family_name_regex_filter() const;
  public:
  void clear_family_name_regex_filter();
  const std::string& family_name_regex_filter() const;
  void set_family_name_regex_filter(const std::string& value);
  void set_family_name_regex_filter(std::string&& value);
  void set_family_name_regex_filter(const char* value);
  void set_family_name_regex_filter(const char* value, size_t size);
  std::string* mutable_family_name_regex_filter();
  std::string* release_family_name_regex_filter();
  void set_allocated_family_name_regex_filter(std::string* family_name_regex_filter);
  private:
  const std::string& _internal_family_name_regex_filter() const;
  void _internal_set_family_name_regex_filter(const std::string& value);
  std::string* _internal_mutable_family_name_regex_filter();
  public:

  // bytes column_qualifier_regex_filter = 6;
  private:
  bool _internal_has_column_qualifier_regex_filter() const;
  public:
  void clear_column_qualifier_regex_filter();
  const std::string& column_qualifier_regex_filter() const;
  void set_column_qualifier_regex_filter(const std::string& value);
  void set_column_qualifier_regex_filter(std::string&& value);
  void set_column_qualifier_regex_filter(const char* value);
  void set_column_qualifier_regex_filter(const void* value, size_t size);
  std::string* mutable_column_qualifier_regex_filter();
  std::string* release_column_qualifier_regex_filter();
  void set_allocated_column_qualifier_regex_filter(std::string* column_qualifier_regex_filter);
  private:
  const std::string& _internal_column_qualifier_regex_filter() const;
  void _internal_set_column_qualifier_regex_filter(const std::string& value);
  std::string* _internal_mutable_column_qualifier_regex_filter();
  public:

  // .google.bigtable.v2.ColumnRange column_range_filter = 7;
  bool has_column_range_filter() const;
  private:
  bool _internal_has_column_range_filter() const;
  public:
  void clear_column_range_filter();
  const ::google::bigtable::v2::ColumnRange& column_range_filter() const;
  ::google::bigtable::v2::ColumnRange* release_column_range_filter();
  ::google::bigtable::v2::ColumnRange* mutable_column_range_filter();
  void set_allocated_column_range_filter(::google::bigtable::v2::ColumnRange* column_range_filter);
  private:
  const ::google::bigtable::v2::ColumnRange& _internal_column_range_filter() const;
  ::google::bigtable::v2::ColumnRange* _internal_mutable_column_range_filter();
  public:
  void unsafe_arena_set_allocated_column_range_filter(
      ::google::bigtable::v2::ColumnRange* column_range_filter);
  ::google::bigtable::v2::ColumnRange* unsafe_arena_release_column_range_filter();

  // .google.bigtable.v2.TimestampRange timestamp_range_filter = 8;
  bool has_timestamp_range_filter() const;
  private:
  bool _internal_has_timestamp_range_filter() const;
  public:
  void clear_timestamp_range_filter();
  const ::google::bigtable::v2::TimestampRange& timestamp_range_filter() const;
  ::google::bigtable::v2::TimestampRange* release_timestamp_range_filter();
  ::google::bigtable::v2::TimestampRange* mutable_timestamp_range_filter();
  void set_allocated_timestamp_range_filter(::google::bigtable::v2::TimestampRange* timestamp_range_filter);
  private:
  const ::google::bigtable::v2::TimestampRange& _internal_timestamp_range_filter() const;
  ::google::bigtable::v2::TimestampRange* _internal_mutable_timestamp_range_filter();
  public:
  void unsafe_arena_set_allocated_timestamp_range_filter(
      ::google::bigtable::v2::TimestampRange* timestamp_range_filter);
  ::google::bigtable::v2::TimestampRange* unsafe_arena_release_timestamp_range_filter();

  // bytes value_regex_filter = 9;
  private:
  bool _internal_has_value_regex_filter() const;
  public:
  void clear_value_regex_filter();
  const std::string& value_regex_filter() const;
  void set_value_regex_filter(const std::string& value);
  void set_value_regex_filter(std::string&& value);
  void set_value_regex_filter(const char* value);
  void set_value_regex_filter(const void* value, size_t size);
  std::string* mutable_value_regex_filter();
  std::string* release_value_regex_filter();
  void set_allocated_value_regex_filter(std::string* value_regex_filter);
  private:
  const std::string& _internal_value_regex_filter() const;
  void _internal_set_value_regex_filter(const std::string& value);
  std::string* _internal_mutable_value_regex_filter();
  public:

  // .google.bigtable.v2.ValueRange value_range_filter = 15;
  bool has_value_range_filter() const;
  private:
  bool _internal_has_value_range_filter() const;
  public:
  void clear_value_range_filter();
  const ::google::bigtable::v2::ValueRange& value_range_filter() const;
  ::google::bigtable::v2::ValueRange* release_value_range_filter();
  ::google::bigtable::v2::ValueRange* mutable_value_range_filter();
  void set_allocated_value_range_filter(::google::bigtable::v2::ValueRange* value_range_filter);
  private:
  const ::google::bigtable::v2::ValueRange& _internal_value_range_filter() const;
  ::google::bigtable::v2::ValueRange* _internal_mutable_value_range_filter();
  public:
  void unsafe_arena_set_allocated_value_range_filter(
      ::google::bigtable::v2::ValueRange* value_range_filter);
  ::google::bigtable::v2::ValueRange* unsafe_arena_release_value_range_filter();

  // int32 cells_per_row_offset_filter = 10;
  private:
  bool _internal_has_cells_per_row_offset_filter() const;
  public:
  void clear_cells_per_row_offset_filter();
  ::PROTOBUF_NAMESPACE_ID::int32 cells_per_row_offset_filter() const;
  void set_cells_per_row_offset_filter(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cells_per_row_offset_filter() const;
  void _internal_set_cells_per_row_offset_filter(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 cells_per_row_limit_filter = 11;
  private:
  bool _internal_has_cells_per_row_limit_filter() const;
  public:
  void clear_cells_per_row_limit_filter();
  ::PROTOBUF_NAMESPACE_ID::int32 cells_per_row_limit_filter() const;
  void set_cells_per_row_limit_filter(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cells_per_row_limit_filter() const;
  void _internal_set_cells_per_row_limit_filter(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 cells_per_column_limit_filter = 12;
  private:
  bool _internal_has_cells_per_column_limit_filter() const;
  public:
  void clear_cells_per_column_limit_filter();
  ::PROTOBUF_NAMESPACE_ID::int32 cells_per_column_limit_filter() const;
  void set_cells_per_column_limit_filter(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cells_per_column_limit_filter() const;
  void _internal_set_cells_per_column_limit_filter(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool strip_value_transformer = 13;
  private:
  bool _internal_has_strip_value_transformer() const;
  public:
  void clear_strip_value_transformer();
  bool strip_value_transformer() const;
  void set_strip_value_transformer(bool value);
  private:
  bool _internal_strip_value_transformer() const;
  void _internal_set_strip_value_transformer(bool value);
  public:

  // string apply_label_transformer = 19;
  private:
  bool _internal_has_apply_label_transformer() const;
  public:
  void clear_apply_label_transformer();
  const std::string& apply_label_transformer() const;
  void set_apply_label_transformer(const std::string& value);
  void set_apply_label_transformer(std::string&& value);
  void set_apply_label_transformer(const char* value);
  void set_apply_label_transformer(const char* value, size_t size);
  std::string* mutable_apply_label_transformer();
  std::string* release_apply_label_transformer();
  void set_allocated_apply_label_transformer(std::string* apply_label_transformer);
  private:
  const std::string& _internal_apply_label_transformer() const;
  void _internal_set_apply_label_transformer(const std::string& value);
  std::string* _internal_mutable_apply_label_transformer();
  public:

  void clear_filter();
  FilterCase filter_case() const;
  // @@protoc_insertion_point(class_scope:google.bigtable.v2.RowFilter)
 private:
  class _Internal;
  void set_has_chain();
  void set_has_interleave();
  void set_has_condition();
  void set_has_sink();
  void set_has_pass_all_filter();
  void set_has_block_all_filter();
  void set_has_row_key_regex_filter();
  void set_has_row_sample_filter();
  void set_has_family_name_regex_filter();
  void set_has_column_qualifier_regex_filter();
  void set_has_column_range_filter();
  void set_has_timestamp_range_filter();
  void set_has_value_regex_filter();
  void set_has_value_range_filter();
  void set_has_cells_per_row_offset_filter();
  void set_has_cells_per_row_limit_filter();
  void set_has_cells_per_column_limit_filter();
  void set_has_strip_value_transformer();
  void set_has_apply_label_transformer();

  inline bool has_filter() const;
  inline void clear_has_filter();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union FilterUnion {
    FilterUnion() {}
    ::google::bigtable::v2::RowFilter_Chain* chain_;
    ::google::bigtable::v2::RowFilter_Interleave* interleave_;
    ::google::bigtable::v2::RowFilter_Condition* condition_;
    bool sink_;
    bool pass_all_filter_;
    bool block_all_filter_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr row_key_regex_filter_;
    double row_sample_filter_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr family_name_regex_filter_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr column_qualifier_regex_filter_;
    ::google::bigtable::v2::ColumnRange* column_range_filter_;
    ::google::bigtable::v2::TimestampRange* timestamp_range_filter_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_regex_filter_;
    ::google::bigtable::v2::ValueRange* value_range_filter_;
    ::PROTOBUF_NAMESPACE_ID::int32 cells_per_row_offset_filter_;
    ::PROTOBUF_NAMESPACE_ID::int32 cells_per_row_limit_filter_;
    ::PROTOBUF_NAMESPACE_ID::int32 cells_per_column_limit_filter_;
    bool strip_value_transformer_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr apply_label_transformer_;
  } filter_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_google_2fbigtable_2fv2_2fdata_2eproto;
};
// -------------------------------------------------------------------

class Mutation_SetCell PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v2.Mutation.SetCell) */ {
 public:
  inline Mutation_SetCell() : Mutation_SetCell(nullptr) {}
  virtual ~Mutation_SetCell();

  Mutation_SetCell(const Mutation_SetCell& from);
  Mutation_SetCell(Mutation_SetCell&& from) noexcept
    : Mutation_SetCell() {
    *this = ::std::move(from);
  }

  inline Mutation_SetCell& operator=(const Mutation_SetCell& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mutation_SetCell& operator=(Mutation_SetCell&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Mutation_SetCell& default_instance();

  static inline const Mutation_SetCell* internal_default_instance() {
    return reinterpret_cast<const Mutation_SetCell*>(
               &_Mutation_SetCell_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Mutation_SetCell& a, Mutation_SetCell& b) {
    a.Swap(&b);
  }
  inline void Swap(Mutation_SetCell* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Mutation_SetCell* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Mutation_SetCell* New() const final {
    return CreateMaybeMessage<Mutation_SetCell>(nullptr);
  }

  Mutation_SetCell* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Mutation_SetCell>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Mutation_SetCell& from);
  void MergeFrom(const Mutation_SetCell& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mutation_SetCell* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.v2.Mutation.SetCell";
  }
  protected:
  explicit Mutation_SetCell(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fbigtable_2fv2_2fdata_2eproto);
    return ::descriptor_table_google_2fbigtable_2fv2_2fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFamilyNameFieldNumber = 1,
    kColumnQualifierFieldNumber = 2,
    kValueFieldNumber = 4,
    kTimestampMicrosFieldNumber = 3,
  };
  // string family_name = 1;
  void clear_family_name();
  const std::string& family_name() const;
  void set_family_name(const std::string& value);
  void set_family_name(std::string&& value);
  void set_family_name(const char* value);
  void set_family_name(const char* value, size_t size);
  std::string* mutable_family_name();
  std::string* release_family_name();
  void set_allocated_family_name(std::string* family_name);
  private:
  const std::string& _internal_family_name() const;
  void _internal_set_family_name(const std::string& value);
  std::string* _internal_mutable_family_name();
  public:

  // bytes column_qualifier = 2;
  void clear_column_qualifier();
  const std::string& column_qualifier() const;
  void set_column_qualifier(const std::string& value);
  void set_column_qualifier(std::string&& value);
  void set_column_qualifier(const char* value);
  void set_column_qualifier(const void* value, size_t size);
  std::string* mutable_column_qualifier();
  std::string* release_column_qualifier();
  void set_allocated_column_qualifier(std::string* column_qualifier);
  private:
  const std::string& _internal_column_qualifier() const;
  void _internal_set_column_qualifier(const std::string& value);
  std::string* _internal_mutable_column_qualifier();
  public:

  // bytes value = 4;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // int64 timestamp_micros = 3;
  void clear_timestamp_micros();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_micros() const;
  void set_timestamp_micros(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp_micros() const;
  void _internal_set_timestamp_micros(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:google.bigtable.v2.Mutation.SetCell)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr family_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr column_qualifier_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_micros_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fbigtable_2fv2_2fdata_2eproto;
};
// -------------------------------------------------------------------

class Mutation_DeleteFromColumn PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v2.Mutation.DeleteFromColumn) */ {
 public:
  inline Mutation_DeleteFromColumn() : Mutation_DeleteFromColumn(nullptr) {}
  virtual ~Mutation_DeleteFromColumn();

  Mutation_DeleteFromColumn(const Mutation_DeleteFromColumn& from);
  Mutation_DeleteFromColumn(Mutation_DeleteFromColumn&& from) noexcept
    : Mutation_DeleteFromColumn() {
    *this = ::std::move(from);
  }

  inline Mutation_DeleteFromColumn& operator=(const Mutation_DeleteFromColumn& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mutation_DeleteFromColumn& operator=(Mutation_DeleteFromColumn&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Mutation_DeleteFromColumn& default_instance();

  static inline const Mutation_DeleteFromColumn* internal_default_instance() {
    return reinterpret_cast<const Mutation_DeleteFromColumn*>(
               &_Mutation_DeleteFromColumn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Mutation_DeleteFromColumn& a, Mutation_DeleteFromColumn& b) {
    a.Swap(&b);
  }
  inline void Swap(Mutation_DeleteFromColumn* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Mutation_DeleteFromColumn* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Mutation_DeleteFromColumn* New() const final {
    return CreateMaybeMessage<Mutation_DeleteFromColumn>(nullptr);
  }

  Mutation_DeleteFromColumn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Mutation_DeleteFromColumn>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Mutation_DeleteFromColumn& from);
  void MergeFrom(const Mutation_DeleteFromColumn& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mutation_DeleteFromColumn* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.v2.Mutation.DeleteFromColumn";
  }
  protected:
  explicit Mutation_DeleteFromColumn(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fbigtable_2fv2_2fdata_2eproto);
    return ::descriptor_table_google_2fbigtable_2fv2_2fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFamilyNameFieldNumber = 1,
    kColumnQualifierFieldNumber = 2,
    kTimeRangeFieldNumber = 3,
  };
  // string family_name = 1;
  void clear_family_name();
  const std::string& family_name() const;
  void set_family_name(const std::string& value);
  void set_family_name(std::string&& value);
  void set_family_name(const char* value);
  void set_family_name(const char* value, size_t size);
  std::string* mutable_family_name();
  std::string* release_family_name();
  void set_allocated_family_name(std::string* family_name);
  private:
  const std::string& _internal_family_name() const;
  void _internal_set_family_name(const std::string& value);
  std::string* _internal_mutable_family_name();
  public:

  // bytes column_qualifier = 2;
  void clear_column_qualifier();
  const std::string& column_qualifier() const;
  void set_column_qualifier(const std::string& value);
  void set_column_qualifier(std::string&& value);
  void set_column_qualifier(const char* value);
  void set_column_qualifier(const void* value, size_t size);
  std::string* mutable_column_qualifier();
  std::string* release_column_qualifier();
  void set_allocated_column_qualifier(std::string* column_qualifier);
  private:
  const std::string& _internal_column_qualifier() const;
  void _internal_set_column_qualifier(const std::string& value);
  std::string* _internal_mutable_column_qualifier();
  public:

  // .google.bigtable.v2.TimestampRange time_range = 3;
  bool has_time_range() const;
  private:
  bool _internal_has_time_range() const;
  public:
  void clear_time_range();
  const ::google::bigtable::v2::TimestampRange& time_range() const;
  ::google::bigtable::v2::TimestampRange* release_time_range();
  ::google::bigtable::v2::TimestampRange* mutable_time_range();
  void set_allocated_time_range(::google::bigtable::v2::TimestampRange* time_range);
  private:
  const ::google::bigtable::v2::TimestampRange& _internal_time_range() const;
  ::google::bigtable::v2::TimestampRange* _internal_mutable_time_range();
  public:
  void unsafe_arena_set_allocated_time_range(
      ::google::bigtable::v2::TimestampRange* time_range);
  ::google::bigtable::v2::TimestampRange* unsafe_arena_release_time_range();

  // @@protoc_insertion_point(class_scope:google.bigtable.v2.Mutation.DeleteFromColumn)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr family_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr column_qualifier_;
  ::google::bigtable::v2::TimestampRange* time_range_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fbigtable_2fv2_2fdata_2eproto;
};
// -------------------------------------------------------------------

class Mutation_DeleteFromFamily PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v2.Mutation.DeleteFromFamily) */ {
 public:
  inline Mutation_DeleteFromFamily() : Mutation_DeleteFromFamily(nullptr) {}
  virtual ~Mutation_DeleteFromFamily();

  Mutation_DeleteFromFamily(const Mutation_DeleteFromFamily& from);
  Mutation_DeleteFromFamily(Mutation_DeleteFromFamily&& from) noexcept
    : Mutation_DeleteFromFamily() {
    *this = ::std::move(from);
  }

  inline Mutation_DeleteFromFamily& operator=(const Mutation_DeleteFromFamily& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mutation_DeleteFromFamily& operator=(Mutation_DeleteFromFamily&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Mutation_DeleteFromFamily& default_instance();

  static inline const Mutation_DeleteFromFamily* internal_default_instance() {
    return reinterpret_cast<const Mutation_DeleteFromFamily*>(
               &_Mutation_DeleteFromFamily_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Mutation_DeleteFromFamily& a, Mutation_DeleteFromFamily& b) {
    a.Swap(&b);
  }
  inline void Swap(Mutation_DeleteFromFamily* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Mutation_DeleteFromFamily* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Mutation_DeleteFromFamily* New() const final {
    return CreateMaybeMessage<Mutation_DeleteFromFamily>(nullptr);
  }

  Mutation_DeleteFromFamily* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Mutation_DeleteFromFamily>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Mutation_DeleteFromFamily& from);
  void MergeFrom(const Mutation_DeleteFromFamily& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mutation_DeleteFromFamily* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.v2.Mutation.DeleteFromFamily";
  }
  protected:
  explicit Mutation_DeleteFromFamily(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fbigtable_2fv2_2fdata_2eproto);
    return ::descriptor_table_google_2fbigtable_2fv2_2fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFamilyNameFieldNumber = 1,
  };
  // string family_name = 1;
  void clear_family_name();
  const std::string& family_name() const;
  void set_family_name(const std::string& value);
  void set_family_name(std::string&& value);
  void set_family_name(const char* value);
  void set_family_name(const char* value, size_t size);
  std::string* mutable_family_name();
  std::string* release_family_name();
  void set_allocated_family_name(std::string* family_name);
  private:
  const std::string& _internal_family_name() const;
  void _internal_set_family_name(const std::string& value);
  std::string* _internal_mutable_family_name();
  public:

  // @@protoc_insertion_point(class_scope:google.bigtable.v2.Mutation.DeleteFromFamily)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr family_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fbigtable_2fv2_2fdata_2eproto;
};
// -------------------------------------------------------------------

class Mutation_DeleteFromRow PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v2.Mutation.DeleteFromRow) */ {
 public:
  inline Mutation_DeleteFromRow() : Mutation_DeleteFromRow(nullptr) {}
  virtual ~Mutation_DeleteFromRow();

  Mutation_DeleteFromRow(const Mutation_DeleteFromRow& from);
  Mutation_DeleteFromRow(Mutation_DeleteFromRow&& from) noexcept
    : Mutation_DeleteFromRow() {
    *this = ::std::move(from);
  }

  inline Mutation_DeleteFromRow& operator=(const Mutation_DeleteFromRow& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mutation_DeleteFromRow& operator=(Mutation_DeleteFromRow&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Mutation_DeleteFromRow& default_instance();

  static inline const Mutation_DeleteFromRow* internal_default_instance() {
    return reinterpret_cast<const Mutation_DeleteFromRow*>(
               &_Mutation_DeleteFromRow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(Mutation_DeleteFromRow& a, Mutation_DeleteFromRow& b) {
    a.Swap(&b);
  }
  inline void Swap(Mutation_DeleteFromRow* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Mutation_DeleteFromRow* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Mutation_DeleteFromRow* New() const final {
    return CreateMaybeMessage<Mutation_DeleteFromRow>(nullptr);
  }

  Mutation_DeleteFromRow* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Mutation_DeleteFromRow>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Mutation_DeleteFromRow& from);
  void MergeFrom(const Mutation_DeleteFromRow& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mutation_DeleteFromRow* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.v2.Mutation.DeleteFromRow";
  }
  protected:
  explicit Mutation_DeleteFromRow(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fbigtable_2fv2_2fdata_2eproto);
    return ::descriptor_table_google_2fbigtable_2fv2_2fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:google.bigtable.v2.Mutation.DeleteFromRow)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fbigtable_2fv2_2fdata_2eproto;
};
// -------------------------------------------------------------------

class Mutation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v2.Mutation) */ {
 public:
  inline Mutation() : Mutation(nullptr) {}
  virtual ~Mutation();

  Mutation(const Mutation& from);
  Mutation(Mutation&& from) noexcept
    : Mutation() {
    *this = ::std::move(from);
  }

  inline Mutation& operator=(const Mutation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mutation& operator=(Mutation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Mutation& default_instance();

  enum MutationCase {
    kSetCell = 1,
    kDeleteFromColumn = 2,
    kDeleteFromFamily = 3,
    kDeleteFromRow = 4,
    MUTATION_NOT_SET = 0,
  };

  static inline const Mutation* internal_default_instance() {
    return reinterpret_cast<const Mutation*>(
               &_Mutation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(Mutation& a, Mutation& b) {
    a.Swap(&b);
  }
  inline void Swap(Mutation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Mutation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Mutation* New() const final {
    return CreateMaybeMessage<Mutation>(nullptr);
  }

  Mutation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Mutation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Mutation& from);
  void MergeFrom(const Mutation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mutation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.v2.Mutation";
  }
  protected:
  explicit Mutation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fbigtable_2fv2_2fdata_2eproto);
    return ::descriptor_table_google_2fbigtable_2fv2_2fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Mutation_SetCell SetCell;
  typedef Mutation_DeleteFromColumn DeleteFromColumn;
  typedef Mutation_DeleteFromFamily DeleteFromFamily;
  typedef Mutation_DeleteFromRow DeleteFromRow;

  // accessors -------------------------------------------------------

  enum : int {
    kSetCellFieldNumber = 1,
    kDeleteFromColumnFieldNumber = 2,
    kDeleteFromFamilyFieldNumber = 3,
    kDeleteFromRowFieldNumber = 4,
  };
  // .google.bigtable.v2.Mutation.SetCell set_cell = 1;
  bool has_set_cell() const;
  private:
  bool _internal_has_set_cell() const;
  public:
  void clear_set_cell();
  const ::google::bigtable::v2::Mutation_SetCell& set_cell() const;
  ::google::bigtable::v2::Mutation_SetCell* release_set_cell();
  ::google::bigtable::v2::Mutation_SetCell* mutable_set_cell();
  void set_allocated_set_cell(::google::bigtable::v2::Mutation_SetCell* set_cell);
  private:
  const ::google::bigtable::v2::Mutation_SetCell& _internal_set_cell() const;
  ::google::bigtable::v2::Mutation_SetCell* _internal_mutable_set_cell();
  public:
  void unsafe_arena_set_allocated_set_cell(
      ::google::bigtable::v2::Mutation_SetCell* set_cell);
  ::google::bigtable::v2::Mutation_SetCell* unsafe_arena_release_set_cell();

  // .google.bigtable.v2.Mutation.DeleteFromColumn delete_from_column = 2;
  bool has_delete_from_column() const;
  private:
  bool _internal_has_delete_from_column() const;
  public:
  void clear_delete_from_column();
  const ::google::bigtable::v2::Mutation_DeleteFromColumn& delete_from_column() const;
  ::google::bigtable::v2::Mutation_DeleteFromColumn* release_delete_from_column();
  ::google::bigtable::v2::Mutation_DeleteFromColumn* mutable_delete_from_column();
  void set_allocated_delete_from_column(::google::bigtable::v2::Mutation_DeleteFromColumn* delete_from_column);
  private:
  const ::google::bigtable::v2::Mutation_DeleteFromColumn& _internal_delete_from_column() const;
  ::google::bigtable::v2::Mutation_DeleteFromColumn* _internal_mutable_delete_from_column();
  public:
  void unsafe_arena_set_allocated_delete_from_column(
      ::google::bigtable::v2::Mutation_DeleteFromColumn* delete_from_column);
  ::google::bigtable::v2::Mutation_DeleteFromColumn* unsafe_arena_release_delete_from_column();

  // .google.bigtable.v2.Mutation.DeleteFromFamily delete_from_family = 3;
  bool has_delete_from_family() const;
  private:
  bool _internal_has_delete_from_family() const;
  public:
  void clear_delete_from_family();
  const ::google::bigtable::v2::Mutation_DeleteFromFamily& delete_from_family() const;
  ::google::bigtable::v2::Mutation_DeleteFromFamily* release_delete_from_family();
  ::google::bigtable::v2::Mutation_DeleteFromFamily* mutable_delete_from_family();
  void set_allocated_delete_from_family(::google::bigtable::v2::Mutation_DeleteFromFamily* delete_from_family);
  private:
  const ::google::bigtable::v2::Mutation_DeleteFromFamily& _internal_delete_from_family() const;
  ::google::bigtable::v2::Mutation_DeleteFromFamily* _internal_mutable_delete_from_family();
  public:
  void unsafe_arena_set_allocated_delete_from_family(
      ::google::bigtable::v2::Mutation_DeleteFromFamily* delete_from_family);
  ::google::bigtable::v2::Mutation_DeleteFromFamily* unsafe_arena_release_delete_from_family();

  // .google.bigtable.v2.Mutation.DeleteFromRow delete_from_row = 4;
  bool has_delete_from_row() const;
  private:
  bool _internal_has_delete_from_row() const;
  public:
  void clear_delete_from_row();
  const ::google::bigtable::v2::Mutation_DeleteFromRow& delete_from_row() const;
  ::google::bigtable::v2::Mutation_DeleteFromRow* release_delete_from_row();
  ::google::bigtable::v2::Mutation_DeleteFromRow* mutable_delete_from_row();
  void set_allocated_delete_from_row(::google::bigtable::v2::Mutation_DeleteFromRow* delete_from_row);
  private:
  const ::google::bigtable::v2::Mutation_DeleteFromRow& _internal_delete_from_row() const;
  ::google::bigtable::v2::Mutation_DeleteFromRow* _internal_mutable_delete_from_row();
  public:
  void unsafe_arena_set_allocated_delete_from_row(
      ::google::bigtable::v2::Mutation_DeleteFromRow* delete_from_row);
  ::google::bigtable::v2::Mutation_DeleteFromRow* unsafe_arena_release_delete_from_row();

  void clear_mutation();
  MutationCase mutation_case() const;
  // @@protoc_insertion_point(class_scope:google.bigtable.v2.Mutation)
 private:
  class _Internal;
  void set_has_set_cell();
  void set_has_delete_from_column();
  void set_has_delete_from_family();
  void set_has_delete_from_row();

  inline bool has_mutation() const;
  inline void clear_has_mutation();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union MutationUnion {
    MutationUnion() {}
    ::google::bigtable::v2::Mutation_SetCell* set_cell_;
    ::google::bigtable::v2::Mutation_DeleteFromColumn* delete_from_column_;
    ::google::bigtable::v2::Mutation_DeleteFromFamily* delete_from_family_;
    ::google::bigtable::v2::Mutation_DeleteFromRow* delete_from_row_;
  } mutation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_google_2fbigtable_2fv2_2fdata_2eproto;
};
// -------------------------------------------------------------------

class ReadModifyWriteRule PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v2.ReadModifyWriteRule) */ {
 public:
  inline ReadModifyWriteRule() : ReadModifyWriteRule(nullptr) {}
  virtual ~ReadModifyWriteRule();

  ReadModifyWriteRule(const ReadModifyWriteRule& from);
  ReadModifyWriteRule(ReadModifyWriteRule&& from) noexcept
    : ReadModifyWriteRule() {
    *this = ::std::move(from);
  }

  inline ReadModifyWriteRule& operator=(const ReadModifyWriteRule& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadModifyWriteRule& operator=(ReadModifyWriteRule&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadModifyWriteRule& default_instance();

  enum RuleCase {
    kAppendValue = 3,
    kIncrementAmount = 4,
    RULE_NOT_SET = 0,
  };

  static inline const ReadModifyWriteRule* internal_default_instance() {
    return reinterpret_cast<const ReadModifyWriteRule*>(
               &_ReadModifyWriteRule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ReadModifyWriteRule& a, ReadModifyWriteRule& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadModifyWriteRule* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadModifyWriteRule* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadModifyWriteRule* New() const final {
    return CreateMaybeMessage<ReadModifyWriteRule>(nullptr);
  }

  ReadModifyWriteRule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadModifyWriteRule>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadModifyWriteRule& from);
  void MergeFrom(const ReadModifyWriteRule& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadModifyWriteRule* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.v2.ReadModifyWriteRule";
  }
  protected:
  explicit ReadModifyWriteRule(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fbigtable_2fv2_2fdata_2eproto);
    return ::descriptor_table_google_2fbigtable_2fv2_2fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFamilyNameFieldNumber = 1,
    kColumnQualifierFieldNumber = 2,
    kAppendValueFieldNumber = 3,
    kIncrementAmountFieldNumber = 4,
  };
  // string family_name = 1;
  void clear_family_name();
  const std::string& family_name() const;
  void set_family_name(const std::string& value);
  void set_family_name(std::string&& value);
  void set_family_name(const char* value);
  void set_family_name(const char* value, size_t size);
  std::string* mutable_family_name();
  std::string* release_family_name();
  void set_allocated_family_name(std::string* family_name);
  private:
  const std::string& _internal_family_name() const;
  void _internal_set_family_name(const std::string& value);
  std::string* _internal_mutable_family_name();
  public:

  // bytes column_qualifier = 2;
  void clear_column_qualifier();
  const std::string& column_qualifier() const;
  void set_column_qualifier(const std::string& value);
  void set_column_qualifier(std::string&& value);
  void set_column_qualifier(const char* value);
  void set_column_qualifier(const void* value, size_t size);
  std::string* mutable_column_qualifier();
  std::string* release_column_qualifier();
  void set_allocated_column_qualifier(std::string* column_qualifier);
  private:
  const std::string& _internal_column_qualifier() const;
  void _internal_set_column_qualifier(const std::string& value);
  std::string* _internal_mutable_column_qualifier();
  public:

  // bytes append_value = 3;
  private:
  bool _internal_has_append_value() const;
  public:
  void clear_append_value();
  const std::string& append_value() const;
  void set_append_value(const std::string& value);
  void set_append_value(std::string&& value);
  void set_append_value(const char* value);
  void set_append_value(const void* value, size_t size);
  std::string* mutable_append_value();
  std::string* release_append_value();
  void set_allocated_append_value(std::string* append_value);
  private:
  const std::string& _internal_append_value() const;
  void _internal_set_append_value(const std::string& value);
  std::string* _internal_mutable_append_value();
  public:

  // int64 increment_amount = 4;
  private:
  bool _internal_has_increment_amount() const;
  public:
  void clear_increment_amount();
  ::PROTOBUF_NAMESPACE_ID::int64 increment_amount() const;
  void set_increment_amount(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_increment_amount() const;
  void _internal_set_increment_amount(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  void clear_rule();
  RuleCase rule_case() const;
  // @@protoc_insertion_point(class_scope:google.bigtable.v2.ReadModifyWriteRule)
 private:
  class _Internal;
  void set_has_append_value();
  void set_has_increment_amount();

  inline bool has_rule() const;
  inline void clear_has_rule();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr family_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr column_qualifier_;
  union RuleUnion {
    RuleUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr append_value_;
    ::PROTOBUF_NAMESPACE_ID::int64 increment_amount_;
  } rule_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_google_2fbigtable_2fv2_2fdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Row

// bytes key = 1;
inline void Row::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& Row::key() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.Row.key)
  return _internal_key();
}
inline void Row::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.Row.key)
}
inline std::string* Row::mutable_key() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.Row.key)
  return _internal_mutable_key();
}
inline const std::string& Row::_internal_key() const {
  return key_.Get();
}
inline void Row::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Row::set_key(std::string&& value) {
  
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.v2.Row.key)
}
inline void Row::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.Row.key)
}
inline void Row::set_key(const void* value,
    size_t size) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.Row.key)
}
inline std::string* Row::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Row::release_key() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.Row.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Row::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.Row.key)
}

// repeated .google.bigtable.v2.Family families = 2;
inline int Row::_internal_families_size() const {
  return families_.size();
}
inline int Row::families_size() const {
  return _internal_families_size();
}
inline void Row::clear_families() {
  families_.Clear();
}
inline ::google::bigtable::v2::Family* Row::mutable_families(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.Row.families)
  return families_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::Family >*
Row::mutable_families() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.v2.Row.families)
  return &families_;
}
inline const ::google::bigtable::v2::Family& Row::_internal_families(int index) const {
  return families_.Get(index);
}
inline const ::google::bigtable::v2::Family& Row::families(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.Row.families)
  return _internal_families(index);
}
inline ::google::bigtable::v2::Family* Row::_internal_add_families() {
  return families_.Add();
}
inline ::google::bigtable::v2::Family* Row::add_families() {
  // @@protoc_insertion_point(field_add:google.bigtable.v2.Row.families)
  return _internal_add_families();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::Family >&
Row::families() const {
  // @@protoc_insertion_point(field_list:google.bigtable.v2.Row.families)
  return families_;
}

// -------------------------------------------------------------------

// Family

// string name = 1;
inline void Family::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Family::name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.Family.name)
  return _internal_name();
}
inline void Family::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.Family.name)
}
inline std::string* Family::mutable_name() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.Family.name)
  return _internal_mutable_name();
}
inline const std::string& Family::_internal_name() const {
  return name_.Get();
}
inline void Family::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Family::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.v2.Family.name)
}
inline void Family::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.Family.name)
}
inline void Family::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.Family.name)
}
inline std::string* Family::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Family::release_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.Family.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Family::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.Family.name)
}

// repeated .google.bigtable.v2.Column columns = 2;
inline int Family::_internal_columns_size() const {
  return columns_.size();
}
inline int Family::columns_size() const {
  return _internal_columns_size();
}
inline void Family::clear_columns() {
  columns_.Clear();
}
inline ::google::bigtable::v2::Column* Family::mutable_columns(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.Family.columns)
  return columns_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::Column >*
Family::mutable_columns() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.v2.Family.columns)
  return &columns_;
}
inline const ::google::bigtable::v2::Column& Family::_internal_columns(int index) const {
  return columns_.Get(index);
}
inline const ::google::bigtable::v2::Column& Family::columns(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.Family.columns)
  return _internal_columns(index);
}
inline ::google::bigtable::v2::Column* Family::_internal_add_columns() {
  return columns_.Add();
}
inline ::google::bigtable::v2::Column* Family::add_columns() {
  // @@protoc_insertion_point(field_add:google.bigtable.v2.Family.columns)
  return _internal_add_columns();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::Column >&
Family::columns() const {
  // @@protoc_insertion_point(field_list:google.bigtable.v2.Family.columns)
  return columns_;
}

// -------------------------------------------------------------------

// Column

// bytes qualifier = 1;
inline void Column::clear_qualifier() {
  qualifier_.ClearToEmpty();
}
inline const std::string& Column::qualifier() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.Column.qualifier)
  return _internal_qualifier();
}
inline void Column::set_qualifier(const std::string& value) {
  _internal_set_qualifier(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.Column.qualifier)
}
inline std::string* Column::mutable_qualifier() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.Column.qualifier)
  return _internal_mutable_qualifier();
}
inline const std::string& Column::_internal_qualifier() const {
  return qualifier_.Get();
}
inline void Column::_internal_set_qualifier(const std::string& value) {
  
  qualifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Column::set_qualifier(std::string&& value) {
  
  qualifier_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.v2.Column.qualifier)
}
inline void Column::set_qualifier(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  qualifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.Column.qualifier)
}
inline void Column::set_qualifier(const void* value,
    size_t size) {
  
  qualifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.Column.qualifier)
}
inline std::string* Column::_internal_mutable_qualifier() {
  
  return qualifier_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Column::release_qualifier() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.Column.qualifier)
  return qualifier_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Column::set_allocated_qualifier(std::string* qualifier) {
  if (qualifier != nullptr) {
    
  } else {
    
  }
  qualifier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), qualifier,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.Column.qualifier)
}

// repeated .google.bigtable.v2.Cell cells = 2;
inline int Column::_internal_cells_size() const {
  return cells_.size();
}
inline int Column::cells_size() const {
  return _internal_cells_size();
}
inline void Column::clear_cells() {
  cells_.Clear();
}
inline ::google::bigtable::v2::Cell* Column::mutable_cells(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.Column.cells)
  return cells_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::Cell >*
Column::mutable_cells() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.v2.Column.cells)
  return &cells_;
}
inline const ::google::bigtable::v2::Cell& Column::_internal_cells(int index) const {
  return cells_.Get(index);
}
inline const ::google::bigtable::v2::Cell& Column::cells(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.Column.cells)
  return _internal_cells(index);
}
inline ::google::bigtable::v2::Cell* Column::_internal_add_cells() {
  return cells_.Add();
}
inline ::google::bigtable::v2::Cell* Column::add_cells() {
  // @@protoc_insertion_point(field_add:google.bigtable.v2.Column.cells)
  return _internal_add_cells();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::Cell >&
Column::cells() const {
  // @@protoc_insertion_point(field_list:google.bigtable.v2.Column.cells)
  return cells_;
}

// -------------------------------------------------------------------

// Cell

// int64 timestamp_micros = 1;
inline void Cell::clear_timestamp_micros() {
  timestamp_micros_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Cell::_internal_timestamp_micros() const {
  return timestamp_micros_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Cell::timestamp_micros() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.Cell.timestamp_micros)
  return _internal_timestamp_micros();
}
inline void Cell::_internal_set_timestamp_micros(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_micros_ = value;
}
inline void Cell::set_timestamp_micros(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp_micros(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.Cell.timestamp_micros)
}

// bytes value = 2;
inline void Cell::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& Cell::value() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.Cell.value)
  return _internal_value();
}
inline void Cell::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.Cell.value)
}
inline std::string* Cell::mutable_value() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.Cell.value)
  return _internal_mutable_value();
}
inline const std::string& Cell::_internal_value() const {
  return value_.Get();
}
inline void Cell::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cell::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.v2.Cell.value)
}
inline void Cell::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.Cell.value)
}
inline void Cell::set_value(const void* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.Cell.value)
}
inline std::string* Cell::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cell::release_value() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.Cell.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cell::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.Cell.value)
}

// repeated string labels = 3;
inline int Cell::_internal_labels_size() const {
  return labels_.size();
}
inline int Cell::labels_size() const {
  return _internal_labels_size();
}
inline void Cell::clear_labels() {
  labels_.Clear();
}
inline std::string* Cell::add_labels() {
  // @@protoc_insertion_point(field_add_mutable:google.bigtable.v2.Cell.labels)
  return _internal_add_labels();
}
inline const std::string& Cell::_internal_labels(int index) const {
  return labels_.Get(index);
}
inline const std::string& Cell::labels(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.Cell.labels)
  return _internal_labels(index);
}
inline std::string* Cell::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.Cell.labels)
  return labels_.Mutable(index);
}
inline void Cell::set_labels(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:google.bigtable.v2.Cell.labels)
  labels_.Mutable(index)->assign(value);
}
inline void Cell::set_labels(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:google.bigtable.v2.Cell.labels)
  labels_.Mutable(index)->assign(std::move(value));
}
inline void Cell::set_labels(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  labels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.Cell.labels)
}
inline void Cell::set_labels(int index, const char* value, size_t size) {
  labels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.Cell.labels)
}
inline std::string* Cell::_internal_add_labels() {
  return labels_.Add();
}
inline void Cell::add_labels(const std::string& value) {
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.bigtable.v2.Cell.labels)
}
inline void Cell::add_labels(std::string&& value) {
  labels_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.bigtable.v2.Cell.labels)
}
inline void Cell::add_labels(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.bigtable.v2.Cell.labels)
}
inline void Cell::add_labels(const char* value, size_t size) {
  labels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.bigtable.v2.Cell.labels)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Cell::labels() const {
  // @@protoc_insertion_point(field_list:google.bigtable.v2.Cell.labels)
  return labels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Cell::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.v2.Cell.labels)
  return &labels_;
}

// -------------------------------------------------------------------

// RowRange

// bytes start_key_closed = 1;
inline bool RowRange::_internal_has_start_key_closed() const {
  return start_key_case() == kStartKeyClosed;
}
inline void RowRange::set_has_start_key_closed() {
  _oneof_case_[0] = kStartKeyClosed;
}
inline void RowRange::clear_start_key_closed() {
  if (_internal_has_start_key_closed()) {
    start_key_.start_key_closed_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_start_key();
  }
}
inline const std::string& RowRange::start_key_closed() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.RowRange.start_key_closed)
  return _internal_start_key_closed();
}
inline void RowRange::set_start_key_closed(const std::string& value) {
  _internal_set_start_key_closed(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.RowRange.start_key_closed)
}
inline std::string* RowRange::mutable_start_key_closed() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.RowRange.start_key_closed)
  return _internal_mutable_start_key_closed();
}
inline const std::string& RowRange::_internal_start_key_closed() const {
  if (_internal_has_start_key_closed()) {
    return start_key_.start_key_closed_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void RowRange::_internal_set_start_key_closed(const std::string& value) {
  if (!_internal_has_start_key_closed()) {
    clear_start_key();
    set_has_start_key_closed();
    start_key_.start_key_closed_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  start_key_.start_key_closed_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RowRange::set_start_key_closed(std::string&& value) {
  // @@protoc_insertion_point(field_set:google.bigtable.v2.RowRange.start_key_closed)
  if (!_internal_has_start_key_closed()) {
    clear_start_key();
    set_has_start_key_closed();
    start_key_.start_key_closed_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  start_key_.start_key_closed_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.v2.RowRange.start_key_closed)
}
inline void RowRange::set_start_key_closed(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_start_key_closed()) {
    clear_start_key();
    set_has_start_key_closed();
    start_key_.start_key_closed_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  start_key_.start_key_closed_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.RowRange.start_key_closed)
}
inline void RowRange::set_start_key_closed(const void* value,
                             size_t size) {
  if (!_internal_has_start_key_closed()) {
    clear_start_key();
    set_has_start_key_closed();
    start_key_.start_key_closed_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  start_key_.start_key_closed_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.RowRange.start_key_closed)
}
inline std::string* RowRange::_internal_mutable_start_key_closed() {
  if (!_internal_has_start_key_closed()) {
    clear_start_key();
    set_has_start_key_closed();
    start_key_.start_key_closed_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return start_key_.start_key_closed_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RowRange::release_start_key_closed() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.RowRange.start_key_closed)
  if (_internal_has_start_key_closed()) {
    clear_has_start_key();
    return start_key_.start_key_closed_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void RowRange::set_allocated_start_key_closed(std::string* start_key_closed) {
  if (has_start_key()) {
    clear_start_key();
  }
  if (start_key_closed != nullptr) {
    set_has_start_key_closed();
    start_key_.start_key_closed_.UnsafeSetDefault(start_key_closed);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(start_key_closed);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.RowRange.start_key_closed)
}

// bytes start_key_open = 2;
inline bool RowRange::_internal_has_start_key_open() const {
  return start_key_case() == kStartKeyOpen;
}
inline void RowRange::set_has_start_key_open() {
  _oneof_case_[0] = kStartKeyOpen;
}
inline void RowRange::clear_start_key_open() {
  if (_internal_has_start_key_open()) {
    start_key_.start_key_open_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_start_key();
  }
}
inline const std::string& RowRange::start_key_open() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.RowRange.start_key_open)
  return _internal_start_key_open();
}
inline void RowRange::set_start_key_open(const std::string& value) {
  _internal_set_start_key_open(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.RowRange.start_key_open)
}
inline std::string* RowRange::mutable_start_key_open() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.RowRange.start_key_open)
  return _internal_mutable_start_key_open();
}
inline const std::string& RowRange::_internal_start_key_open() const {
  if (_internal_has_start_key_open()) {
    return start_key_.start_key_open_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void RowRange::_internal_set_start_key_open(const std::string& value) {
  if (!_internal_has_start_key_open()) {
    clear_start_key();
    set_has_start_key_open();
    start_key_.start_key_open_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  start_key_.start_key_open_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RowRange::set_start_key_open(std::string&& value) {
  // @@protoc_insertion_point(field_set:google.bigtable.v2.RowRange.start_key_open)
  if (!_internal_has_start_key_open()) {
    clear_start_key();
    set_has_start_key_open();
    start_key_.start_key_open_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  start_key_.start_key_open_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.v2.RowRange.start_key_open)
}
inline void RowRange::set_start_key_open(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_start_key_open()) {
    clear_start_key();
    set_has_start_key_open();
    start_key_.start_key_open_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  start_key_.start_key_open_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.RowRange.start_key_open)
}
inline void RowRange::set_start_key_open(const void* value,
                             size_t size) {
  if (!_internal_has_start_key_open()) {
    clear_start_key();
    set_has_start_key_open();
    start_key_.start_key_open_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  start_key_.start_key_open_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.RowRange.start_key_open)
}
inline std::string* RowRange::_internal_mutable_start_key_open() {
  if (!_internal_has_start_key_open()) {
    clear_start_key();
    set_has_start_key_open();
    start_key_.start_key_open_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return start_key_.start_key_open_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RowRange::release_start_key_open() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.RowRange.start_key_open)
  if (_internal_has_start_key_open()) {
    clear_has_start_key();
    return start_key_.start_key_open_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void RowRange::set_allocated_start_key_open(std::string* start_key_open) {
  if (has_start_key()) {
    clear_start_key();
  }
  if (start_key_open != nullptr) {
    set_has_start_key_open();
    start_key_.start_key_open_.UnsafeSetDefault(start_key_open);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(start_key_open);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.RowRange.start_key_open)
}

// bytes end_key_open = 3;
inline bool RowRange::_internal_has_end_key_open() const {
  return end_key_case() == kEndKeyOpen;
}
inline void RowRange::set_has_end_key_open() {
  _oneof_case_[1] = kEndKeyOpen;
}
inline void RowRange::clear_end_key_open() {
  if (_internal_has_end_key_open()) {
    end_key_.end_key_open_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_end_key();
  }
}
inline const std::string& RowRange::end_key_open() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.RowRange.end_key_open)
  return _internal_end_key_open();
}
inline void RowRange::set_end_key_open(const std::string& value) {
  _internal_set_end_key_open(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.RowRange.end_key_open)
}
inline std::string* RowRange::mutable_end_key_open() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.RowRange.end_key_open)
  return _internal_mutable_end_key_open();
}
inline const std::string& RowRange::_internal_end_key_open() const {
  if (_internal_has_end_key_open()) {
    return end_key_.end_key_open_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void RowRange::_internal_set_end_key_open(const std::string& value) {
  if (!_internal_has_end_key_open()) {
    clear_end_key();
    set_has_end_key_open();
    end_key_.end_key_open_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  end_key_.end_key_open_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RowRange::set_end_key_open(std::string&& value) {
  // @@protoc_insertion_point(field_set:google.bigtable.v2.RowRange.end_key_open)
  if (!_internal_has_end_key_open()) {
    clear_end_key();
    set_has_end_key_open();
    end_key_.end_key_open_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  end_key_.end_key_open_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.v2.RowRange.end_key_open)
}
inline void RowRange::set_end_key_open(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_end_key_open()) {
    clear_end_key();
    set_has_end_key_open();
    end_key_.end_key_open_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  end_key_.end_key_open_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.RowRange.end_key_open)
}
inline void RowRange::set_end_key_open(const void* value,
                             size_t size) {
  if (!_internal_has_end_key_open()) {
    clear_end_key();
    set_has_end_key_open();
    end_key_.end_key_open_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  end_key_.end_key_open_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.RowRange.end_key_open)
}
inline std::string* RowRange::_internal_mutable_end_key_open() {
  if (!_internal_has_end_key_open()) {
    clear_end_key();
    set_has_end_key_open();
    end_key_.end_key_open_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return end_key_.end_key_open_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RowRange::release_end_key_open() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.RowRange.end_key_open)
  if (_internal_has_end_key_open()) {
    clear_has_end_key();
    return end_key_.end_key_open_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void RowRange::set_allocated_end_key_open(std::string* end_key_open) {
  if (has_end_key()) {
    clear_end_key();
  }
  if (end_key_open != nullptr) {
    set_has_end_key_open();
    end_key_.end_key_open_.UnsafeSetDefault(end_key_open);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(end_key_open);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.RowRange.end_key_open)
}

// bytes end_key_closed = 4;
inline bool RowRange::_internal_has_end_key_closed() const {
  return end_key_case() == kEndKeyClosed;
}
inline void RowRange::set_has_end_key_closed() {
  _oneof_case_[1] = kEndKeyClosed;
}
inline void RowRange::clear_end_key_closed() {
  if (_internal_has_end_key_closed()) {
    end_key_.end_key_closed_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_end_key();
  }
}
inline const std::string& RowRange::end_key_closed() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.RowRange.end_key_closed)
  return _internal_end_key_closed();
}
inline void RowRange::set_end_key_closed(const std::string& value) {
  _internal_set_end_key_closed(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.RowRange.end_key_closed)
}
inline std::string* RowRange::mutable_end_key_closed() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.RowRange.end_key_closed)
  return _internal_mutable_end_key_closed();
}
inline const std::string& RowRange::_internal_end_key_closed() const {
  if (_internal_has_end_key_closed()) {
    return end_key_.end_key_closed_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void RowRange::_internal_set_end_key_closed(const std::string& value) {
  if (!_internal_has_end_key_closed()) {
    clear_end_key();
    set_has_end_key_closed();
    end_key_.end_key_closed_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  end_key_.end_key_closed_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RowRange::set_end_key_closed(std::string&& value) {
  // @@protoc_insertion_point(field_set:google.bigtable.v2.RowRange.end_key_closed)
  if (!_internal_has_end_key_closed()) {
    clear_end_key();
    set_has_end_key_closed();
    end_key_.end_key_closed_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  end_key_.end_key_closed_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.v2.RowRange.end_key_closed)
}
inline void RowRange::set_end_key_closed(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_end_key_closed()) {
    clear_end_key();
    set_has_end_key_closed();
    end_key_.end_key_closed_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  end_key_.end_key_closed_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.RowRange.end_key_closed)
}
inline void RowRange::set_end_key_closed(const void* value,
                             size_t size) {
  if (!_internal_has_end_key_closed()) {
    clear_end_key();
    set_has_end_key_closed();
    end_key_.end_key_closed_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  end_key_.end_key_closed_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.RowRange.end_key_closed)
}
inline std::string* RowRange::_internal_mutable_end_key_closed() {
  if (!_internal_has_end_key_closed()) {
    clear_end_key();
    set_has_end_key_closed();
    end_key_.end_key_closed_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return end_key_.end_key_closed_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RowRange::release_end_key_closed() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.RowRange.end_key_closed)
  if (_internal_has_end_key_closed()) {
    clear_has_end_key();
    return end_key_.end_key_closed_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void RowRange::set_allocated_end_key_closed(std::string* end_key_closed) {
  if (has_end_key()) {
    clear_end_key();
  }
  if (end_key_closed != nullptr) {
    set_has_end_key_closed();
    end_key_.end_key_closed_.UnsafeSetDefault(end_key_closed);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(end_key_closed);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.RowRange.end_key_closed)
}

inline bool RowRange::has_start_key() const {
  return start_key_case() != START_KEY_NOT_SET;
}
inline void RowRange::clear_has_start_key() {
  _oneof_case_[0] = START_KEY_NOT_SET;
}
inline bool RowRange::has_end_key() const {
  return end_key_case() != END_KEY_NOT_SET;
}
inline void RowRange::clear_has_end_key() {
  _oneof_case_[1] = END_KEY_NOT_SET;
}
inline RowRange::StartKeyCase RowRange::start_key_case() const {
  return RowRange::StartKeyCase(_oneof_case_[0]);
}
inline RowRange::EndKeyCase RowRange::end_key_case() const {
  return RowRange::EndKeyCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// RowSet

// repeated bytes row_keys = 1;
inline int RowSet::_internal_row_keys_size() const {
  return row_keys_.size();
}
inline int RowSet::row_keys_size() const {
  return _internal_row_keys_size();
}
inline void RowSet::clear_row_keys() {
  row_keys_.Clear();
}
inline std::string* RowSet::add_row_keys() {
  // @@protoc_insertion_point(field_add_mutable:google.bigtable.v2.RowSet.row_keys)
  return _internal_add_row_keys();
}
inline const std::string& RowSet::_internal_row_keys(int index) const {
  return row_keys_.Get(index);
}
inline const std::string& RowSet::row_keys(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.RowSet.row_keys)
  return _internal_row_keys(index);
}
inline std::string* RowSet::mutable_row_keys(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.RowSet.row_keys)
  return row_keys_.Mutable(index);
}
inline void RowSet::set_row_keys(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:google.bigtable.v2.RowSet.row_keys)
  row_keys_.Mutable(index)->assign(value);
}
inline void RowSet::set_row_keys(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:google.bigtable.v2.RowSet.row_keys)
  row_keys_.Mutable(index)->assign(std::move(value));
}
inline void RowSet::set_row_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  row_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.RowSet.row_keys)
}
inline void RowSet::set_row_keys(int index, const void* value, size_t size) {
  row_keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.RowSet.row_keys)
}
inline std::string* RowSet::_internal_add_row_keys() {
  return row_keys_.Add();
}
inline void RowSet::add_row_keys(const std::string& value) {
  row_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.bigtable.v2.RowSet.row_keys)
}
inline void RowSet::add_row_keys(std::string&& value) {
  row_keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.bigtable.v2.RowSet.row_keys)
}
inline void RowSet::add_row_keys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  row_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.bigtable.v2.RowSet.row_keys)
}
inline void RowSet::add_row_keys(const void* value, size_t size) {
  row_keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.bigtable.v2.RowSet.row_keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RowSet::row_keys() const {
  // @@protoc_insertion_point(field_list:google.bigtable.v2.RowSet.row_keys)
  return row_keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RowSet::mutable_row_keys() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.v2.RowSet.row_keys)
  return &row_keys_;
}

// repeated .google.bigtable.v2.RowRange row_ranges = 2;
inline int RowSet::_internal_row_ranges_size() const {
  return row_ranges_.size();
}
inline int RowSet::row_ranges_size() const {
  return _internal_row_ranges_size();
}
inline void RowSet::clear_row_ranges() {
  row_ranges_.Clear();
}
inline ::google::bigtable::v2::RowRange* RowSet::mutable_row_ranges(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.RowSet.row_ranges)
  return row_ranges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::RowRange >*
RowSet::mutable_row_ranges() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.v2.RowSet.row_ranges)
  return &row_ranges_;
}
inline const ::google::bigtable::v2::RowRange& RowSet::_internal_row_ranges(int index) const {
  return row_ranges_.Get(index);
}
inline const ::google::bigtable::v2::RowRange& RowSet::row_ranges(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.RowSet.row_ranges)
  return _internal_row_ranges(index);
}
inline ::google::bigtable::v2::RowRange* RowSet::_internal_add_row_ranges() {
  return row_ranges_.Add();
}
inline ::google::bigtable::v2::RowRange* RowSet::add_row_ranges() {
  // @@protoc_insertion_point(field_add:google.bigtable.v2.RowSet.row_ranges)
  return _internal_add_row_ranges();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::RowRange >&
RowSet::row_ranges() const {
  // @@protoc_insertion_point(field_list:google.bigtable.v2.RowSet.row_ranges)
  return row_ranges_;
}

// -------------------------------------------------------------------

// ColumnRange

// string family_name = 1;
inline void ColumnRange::clear_family_name() {
  family_name_.ClearToEmpty();
}
inline const std::string& ColumnRange::family_name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ColumnRange.family_name)
  return _internal_family_name();
}
inline void ColumnRange::set_family_name(const std::string& value) {
  _internal_set_family_name(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ColumnRange.family_name)
}
inline std::string* ColumnRange::mutable_family_name() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ColumnRange.family_name)
  return _internal_mutable_family_name();
}
inline const std::string& ColumnRange::_internal_family_name() const {
  return family_name_.Get();
}
inline void ColumnRange::_internal_set_family_name(const std::string& value) {
  
  family_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ColumnRange::set_family_name(std::string&& value) {
  
  family_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.v2.ColumnRange.family_name)
}
inline void ColumnRange::set_family_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  family_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.ColumnRange.family_name)
}
inline void ColumnRange::set_family_name(const char* value,
    size_t size) {
  
  family_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.ColumnRange.family_name)
}
inline std::string* ColumnRange::_internal_mutable_family_name() {
  
  return family_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ColumnRange::release_family_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ColumnRange.family_name)
  return family_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ColumnRange::set_allocated_family_name(std::string* family_name) {
  if (family_name != nullptr) {
    
  } else {
    
  }
  family_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), family_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ColumnRange.family_name)
}

// bytes start_qualifier_closed = 2;
inline bool ColumnRange::_internal_has_start_qualifier_closed() const {
  return start_qualifier_case() == kStartQualifierClosed;
}
inline void ColumnRange::set_has_start_qualifier_closed() {
  _oneof_case_[0] = kStartQualifierClosed;
}
inline void ColumnRange::clear_start_qualifier_closed() {
  if (_internal_has_start_qualifier_closed()) {
    start_qualifier_.start_qualifier_closed_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_start_qualifier();
  }
}
inline const std::string& ColumnRange::start_qualifier_closed() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ColumnRange.start_qualifier_closed)
  return _internal_start_qualifier_closed();
}
inline void ColumnRange::set_start_qualifier_closed(const std::string& value) {
  _internal_set_start_qualifier_closed(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ColumnRange.start_qualifier_closed)
}
inline std::string* ColumnRange::mutable_start_qualifier_closed() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ColumnRange.start_qualifier_closed)
  return _internal_mutable_start_qualifier_closed();
}
inline const std::string& ColumnRange::_internal_start_qualifier_closed() const {
  if (_internal_has_start_qualifier_closed()) {
    return start_qualifier_.start_qualifier_closed_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ColumnRange::_internal_set_start_qualifier_closed(const std::string& value) {
  if (!_internal_has_start_qualifier_closed()) {
    clear_start_qualifier();
    set_has_start_qualifier_closed();
    start_qualifier_.start_qualifier_closed_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  start_qualifier_.start_qualifier_closed_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ColumnRange::set_start_qualifier_closed(std::string&& value) {
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ColumnRange.start_qualifier_closed)
  if (!_internal_has_start_qualifier_closed()) {
    clear_start_qualifier();
    set_has_start_qualifier_closed();
    start_qualifier_.start_qualifier_closed_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  start_qualifier_.start_qualifier_closed_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.v2.ColumnRange.start_qualifier_closed)
}
inline void ColumnRange::set_start_qualifier_closed(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_start_qualifier_closed()) {
    clear_start_qualifier();
    set_has_start_qualifier_closed();
    start_qualifier_.start_qualifier_closed_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  start_qualifier_.start_qualifier_closed_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.ColumnRange.start_qualifier_closed)
}
inline void ColumnRange::set_start_qualifier_closed(const void* value,
                             size_t size) {
  if (!_internal_has_start_qualifier_closed()) {
    clear_start_qualifier();
    set_has_start_qualifier_closed();
    start_qualifier_.start_qualifier_closed_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  start_qualifier_.start_qualifier_closed_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.ColumnRange.start_qualifier_closed)
}
inline std::string* ColumnRange::_internal_mutable_start_qualifier_closed() {
  if (!_internal_has_start_qualifier_closed()) {
    clear_start_qualifier();
    set_has_start_qualifier_closed();
    start_qualifier_.start_qualifier_closed_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return start_qualifier_.start_qualifier_closed_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ColumnRange::release_start_qualifier_closed() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ColumnRange.start_qualifier_closed)
  if (_internal_has_start_qualifier_closed()) {
    clear_has_start_qualifier();
    return start_qualifier_.start_qualifier_closed_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void ColumnRange::set_allocated_start_qualifier_closed(std::string* start_qualifier_closed) {
  if (has_start_qualifier()) {
    clear_start_qualifier();
  }
  if (start_qualifier_closed != nullptr) {
    set_has_start_qualifier_closed();
    start_qualifier_.start_qualifier_closed_.UnsafeSetDefault(start_qualifier_closed);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(start_qualifier_closed);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ColumnRange.start_qualifier_closed)
}

// bytes start_qualifier_open = 3;
inline bool ColumnRange::_internal_has_start_qualifier_open() const {
  return start_qualifier_case() == kStartQualifierOpen;
}
inline void ColumnRange::set_has_start_qualifier_open() {
  _oneof_case_[0] = kStartQualifierOpen;
}
inline void ColumnRange::clear_start_qualifier_open() {
  if (_internal_has_start_qualifier_open()) {
    start_qualifier_.start_qualifier_open_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_start_qualifier();
  }
}
inline const std::string& ColumnRange::start_qualifier_open() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ColumnRange.start_qualifier_open)
  return _internal_start_qualifier_open();
}
inline void ColumnRange::set_start_qualifier_open(const std::string& value) {
  _internal_set_start_qualifier_open(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ColumnRange.start_qualifier_open)
}
inline std::string* ColumnRange::mutable_start_qualifier_open() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ColumnRange.start_qualifier_open)
  return _internal_mutable_start_qualifier_open();
}
inline const std::string& ColumnRange::_internal_start_qualifier_open() const {
  if (_internal_has_start_qualifier_open()) {
    return start_qualifier_.start_qualifier_open_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ColumnRange::_internal_set_start_qualifier_open(const std::string& value) {
  if (!_internal_has_start_qualifier_open()) {
    clear_start_qualifier();
    set_has_start_qualifier_open();
    start_qualifier_.start_qualifier_open_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  start_qualifier_.start_qualifier_open_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ColumnRange::set_start_qualifier_open(std::string&& value) {
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ColumnRange.start_qualifier_open)
  if (!_internal_has_start_qualifier_open()) {
    clear_start_qualifier();
    set_has_start_qualifier_open();
    start_qualifier_.start_qualifier_open_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  start_qualifier_.start_qualifier_open_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.v2.ColumnRange.start_qualifier_open)
}
inline void ColumnRange::set_start_qualifier_open(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_start_qualifier_open()) {
    clear_start_qualifier();
    set_has_start_qualifier_open();
    start_qualifier_.start_qualifier_open_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  start_qualifier_.start_qualifier_open_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.ColumnRange.start_qualifier_open)
}
inline void ColumnRange::set_start_qualifier_open(const void* value,
                             size_t size) {
  if (!_internal_has_start_qualifier_open()) {
    clear_start_qualifier();
    set_has_start_qualifier_open();
    start_qualifier_.start_qualifier_open_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  start_qualifier_.start_qualifier_open_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.ColumnRange.start_qualifier_open)
}
inline std::string* ColumnRange::_internal_mutable_start_qualifier_open() {
  if (!_internal_has_start_qualifier_open()) {
    clear_start_qualifier();
    set_has_start_qualifier_open();
    start_qualifier_.start_qualifier_open_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return start_qualifier_.start_qualifier_open_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ColumnRange::release_start_qualifier_open() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ColumnRange.start_qualifier_open)
  if (_internal_has_start_qualifier_open()) {
    clear_has_start_qualifier();
    return start_qualifier_.start_qualifier_open_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void ColumnRange::set_allocated_start_qualifier_open(std::string* start_qualifier_open) {
  if (has_start_qualifier()) {
    clear_start_qualifier();
  }
  if (start_qualifier_open != nullptr) {
    set_has_start_qualifier_open();
    start_qualifier_.start_qualifier_open_.UnsafeSetDefault(start_qualifier_open);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(start_qualifier_open);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ColumnRange.start_qualifier_open)
}

// bytes end_qualifier_closed = 4;
inline bool ColumnRange::_internal_has_end_qualifier_closed() const {
  return end_qualifier_case() == kEndQualifierClosed;
}
inline void ColumnRange::set_has_end_qualifier_closed() {
  _oneof_case_[1] = kEndQualifierClosed;
}
inline void ColumnRange::clear_end_qualifier_closed() {
  if (_internal_has_end_qualifier_closed()) {
    end_qualifier_.end_qualifier_closed_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_end_qualifier();
  }
}
inline const std::string& ColumnRange::end_qualifier_closed() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ColumnRange.end_qualifier_closed)
  return _internal_end_qualifier_closed();
}
inline void ColumnRange::set_end_qualifier_closed(const std::string& value) {
  _internal_set_end_qualifier_closed(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ColumnRange.end_qualifier_closed)
}
inline std::string* ColumnRange::mutable_end_qualifier_closed() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ColumnRange.end_qualifier_closed)
  return _internal_mutable_end_qualifier_closed();
}
inline const std::string& ColumnRange::_internal_end_qualifier_closed() const {
  if (_internal_has_end_qualifier_closed()) {
    return end_qualifier_.end_qualifier_closed_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ColumnRange::_internal_set_end_qualifier_closed(const std::string& value) {
  if (!_internal_has_end_qualifier_closed()) {
    clear_end_qualifier();
    set_has_end_qualifier_closed();
    end_qualifier_.end_qualifier_closed_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  end_qualifier_.end_qualifier_closed_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ColumnRange::set_end_qualifier_closed(std::string&& value) {
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ColumnRange.end_qualifier_closed)
  if (!_internal_has_end_qualifier_closed()) {
    clear_end_qualifier();
    set_has_end_qualifier_closed();
    end_qualifier_.end_qualifier_closed_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  end_qualifier_.end_qualifier_closed_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.v2.ColumnRange.end_qualifier_closed)
}
inline void ColumnRange::set_end_qualifier_closed(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_end_qualifier_closed()) {
    clear_end_qualifier();
    set_has_end_qualifier_closed();
    end_qualifier_.end_qualifier_closed_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  end_qualifier_.end_qualifier_closed_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.ColumnRange.end_qualifier_closed)
}
inline void ColumnRange::set_end_qualifier_closed(const void* value,
                             size_t size) {
  if (!_internal_has_end_qualifier_closed()) {
    clear_end_qualifier();
    set_has_end_qualifier_closed();
    end_qualifier_.end_qualifier_closed_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  end_qualifier_.end_qualifier_closed_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.ColumnRange.end_qualifier_closed)
}
inline std::string* ColumnRange::_internal_mutable_end_qualifier_closed() {
  if (!_internal_has_end_qualifier_closed()) {
    clear_end_qualifier();
    set_has_end_qualifier_closed();
    end_qualifier_.end_qualifier_closed_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return end_qualifier_.end_qualifier_closed_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ColumnRange::release_end_qualifier_closed() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ColumnRange.end_qualifier_closed)
  if (_internal_has_end_qualifier_closed()) {
    clear_has_end_qualifier();
    return end_qualifier_.end_qualifier_closed_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void ColumnRange::set_allocated_end_qualifier_closed(std::string* end_qualifier_closed) {
  if (has_end_qualifier()) {
    clear_end_qualifier();
  }
  if (end_qualifier_closed != nullptr) {
    set_has_end_qualifier_closed();
    end_qualifier_.end_qualifier_closed_.UnsafeSetDefault(end_qualifier_closed);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(end_qualifier_closed);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ColumnRange.end_qualifier_closed)
}

// bytes end_qualifier_open = 5;
inline bool ColumnRange::_internal_has_end_qualifier_open() const {
  return end_qualifier_case() == kEndQualifierOpen;
}
inline void ColumnRange::set_has_end_qualifier_open() {
  _oneof_case_[1] = kEndQualifierOpen;
}
inline void ColumnRange::clear_end_qualifier_open() {
  if (_internal_has_end_qualifier_open()) {
    end_qualifier_.end_qualifier_open_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_end_qualifier();
  }
}
inline const std::string& ColumnRange::end_qualifier_open() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ColumnRange.end_qualifier_open)
  return _internal_end_qualifier_open();
}
inline void ColumnRange::set_end_qualifier_open(const std::string& value) {
  _internal_set_end_qualifier_open(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ColumnRange.end_qualifier_open)
}
inline std::string* ColumnRange::mutable_end_qualifier_open() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ColumnRange.end_qualifier_open)
  return _internal_mutable_end_qualifier_open();
}
inline const std::string& ColumnRange::_internal_end_qualifier_open() const {
  if (_internal_has_end_qualifier_open()) {
    return end_qualifier_.end_qualifier_open_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ColumnRange::_internal_set_end_qualifier_open(const std::string& value) {
  if (!_internal_has_end_qualifier_open()) {
    clear_end_qualifier();
    set_has_end_qualifier_open();
    end_qualifier_.end_qualifier_open_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  end_qualifier_.end_qualifier_open_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ColumnRange::set_end_qualifier_open(std::string&& value) {
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ColumnRange.end_qualifier_open)
  if (!_internal_has_end_qualifier_open()) {
    clear_end_qualifier();
    set_has_end_qualifier_open();
    end_qualifier_.end_qualifier_open_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  end_qualifier_.end_qualifier_open_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.v2.ColumnRange.end_qualifier_open)
}
inline void ColumnRange::set_end_qualifier_open(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_end_qualifier_open()) {
    clear_end_qualifier();
    set_has_end_qualifier_open();
    end_qualifier_.end_qualifier_open_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  end_qualifier_.end_qualifier_open_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.ColumnRange.end_qualifier_open)
}
inline void ColumnRange::set_end_qualifier_open(const void* value,
                             size_t size) {
  if (!_internal_has_end_qualifier_open()) {
    clear_end_qualifier();
    set_has_end_qualifier_open();
    end_qualifier_.end_qualifier_open_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  end_qualifier_.end_qualifier_open_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.ColumnRange.end_qualifier_open)
}
inline std::string* ColumnRange::_internal_mutable_end_qualifier_open() {
  if (!_internal_has_end_qualifier_open()) {
    clear_end_qualifier();
    set_has_end_qualifier_open();
    end_qualifier_.end_qualifier_open_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return end_qualifier_.end_qualifier_open_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ColumnRange::release_end_qualifier_open() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ColumnRange.end_qualifier_open)
  if (_internal_has_end_qualifier_open()) {
    clear_has_end_qualifier();
    return end_qualifier_.end_qualifier_open_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void ColumnRange::set_allocated_end_qualifier_open(std::string* end_qualifier_open) {
  if (has_end_qualifier()) {
    clear_end_qualifier();
  }
  if (end_qualifier_open != nullptr) {
    set_has_end_qualifier_open();
    end_qualifier_.end_qualifier_open_.UnsafeSetDefault(end_qualifier_open);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(end_qualifier_open);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ColumnRange.end_qualifier_open)
}

inline bool ColumnRange::has_start_qualifier() const {
  return start_qualifier_case() != START_QUALIFIER_NOT_SET;
}
inline void ColumnRange::clear_has_start_qualifier() {
  _oneof_case_[0] = START_QUALIFIER_NOT_SET;
}
inline bool ColumnRange::has_end_qualifier() const {
  return end_qualifier_case() != END_QUALIFIER_NOT_SET;
}
inline void ColumnRange::clear_has_end_qualifier() {
  _oneof_case_[1] = END_QUALIFIER_NOT_SET;
}
inline ColumnRange::StartQualifierCase ColumnRange::start_qualifier_case() const {
  return ColumnRange::StartQualifierCase(_oneof_case_[0]);
}
inline ColumnRange::EndQualifierCase ColumnRange::end_qualifier_case() const {
  return ColumnRange::EndQualifierCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// TimestampRange

// int64 start_timestamp_micros = 1;
inline void TimestampRange::clear_start_timestamp_micros() {
  start_timestamp_micros_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TimestampRange::_internal_start_timestamp_micros() const {
  return start_timestamp_micros_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TimestampRange::start_timestamp_micros() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.TimestampRange.start_timestamp_micros)
  return _internal_start_timestamp_micros();
}
inline void TimestampRange::_internal_set_start_timestamp_micros(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  start_timestamp_micros_ = value;
}
inline void TimestampRange::set_start_timestamp_micros(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_start_timestamp_micros(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.TimestampRange.start_timestamp_micros)
}

// int64 end_timestamp_micros = 2;
inline void TimestampRange::clear_end_timestamp_micros() {
  end_timestamp_micros_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TimestampRange::_internal_end_timestamp_micros() const {
  return end_timestamp_micros_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TimestampRange::end_timestamp_micros() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.TimestampRange.end_timestamp_micros)
  return _internal_end_timestamp_micros();
}
inline void TimestampRange::_internal_set_end_timestamp_micros(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  end_timestamp_micros_ = value;
}
inline void TimestampRange::set_end_timestamp_micros(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_end_timestamp_micros(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.TimestampRange.end_timestamp_micros)
}

// -------------------------------------------------------------------

// ValueRange

// bytes start_value_closed = 1;
inline bool ValueRange::_internal_has_start_value_closed() const {
  return start_value_case() == kStartValueClosed;
}
inline void ValueRange::set_has_start_value_closed() {
  _oneof_case_[0] = kStartValueClosed;
}
inline void ValueRange::clear_start_value_closed() {
  if (_internal_has_start_value_closed()) {
    start_value_.start_value_closed_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_start_value();
  }
}
inline const std::string& ValueRange::start_value_closed() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ValueRange.start_value_closed)
  return _internal_start_value_closed();
}
inline void ValueRange::set_start_value_closed(const std::string& value) {
  _internal_set_start_value_closed(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ValueRange.start_value_closed)
}
inline std::string* ValueRange::mutable_start_value_closed() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ValueRange.start_value_closed)
  return _internal_mutable_start_value_closed();
}
inline const std::string& ValueRange::_internal_start_value_closed() const {
  if (_internal_has_start_value_closed()) {
    return start_value_.start_value_closed_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ValueRange::_internal_set_start_value_closed(const std::string& value) {
  if (!_internal_has_start_value_closed()) {
    clear_start_value();
    set_has_start_value_closed();
    start_value_.start_value_closed_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  start_value_.start_value_closed_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ValueRange::set_start_value_closed(std::string&& value) {
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ValueRange.start_value_closed)
  if (!_internal_has_start_value_closed()) {
    clear_start_value();
    set_has_start_value_closed();
    start_value_.start_value_closed_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  start_value_.start_value_closed_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.v2.ValueRange.start_value_closed)
}
inline void ValueRange::set_start_value_closed(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_start_value_closed()) {
    clear_start_value();
    set_has_start_value_closed();
    start_value_.start_value_closed_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  start_value_.start_value_closed_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.ValueRange.start_value_closed)
}
inline void ValueRange::set_start_value_closed(const void* value,
                             size_t size) {
  if (!_internal_has_start_value_closed()) {
    clear_start_value();
    set_has_start_value_closed();
    start_value_.start_value_closed_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  start_value_.start_value_closed_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.ValueRange.start_value_closed)
}
inline std::string* ValueRange::_internal_mutable_start_value_closed() {
  if (!_internal_has_start_value_closed()) {
    clear_start_value();
    set_has_start_value_closed();
    start_value_.start_value_closed_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return start_value_.start_value_closed_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ValueRange::release_start_value_closed() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ValueRange.start_value_closed)
  if (_internal_has_start_value_closed()) {
    clear_has_start_value();
    return start_value_.start_value_closed_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void ValueRange::set_allocated_start_value_closed(std::string* start_value_closed) {
  if (has_start_value()) {
    clear_start_value();
  }
  if (start_value_closed != nullptr) {
    set_has_start_value_closed();
    start_value_.start_value_closed_.UnsafeSetDefault(start_value_closed);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(start_value_closed);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ValueRange.start_value_closed)
}

// bytes start_value_open = 2;
inline bool ValueRange::_internal_has_start_value_open() const {
  return start_value_case() == kStartValueOpen;
}
inline void ValueRange::set_has_start_value_open() {
  _oneof_case_[0] = kStartValueOpen;
}
inline void ValueRange::clear_start_value_open() {
  if (_internal_has_start_value_open()) {
    start_value_.start_value_open_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_start_value();
  }
}
inline const std::string& ValueRange::start_value_open() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ValueRange.start_value_open)
  return _internal_start_value_open();
}
inline void ValueRange::set_start_value_open(const std::string& value) {
  _internal_set_start_value_open(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ValueRange.start_value_open)
}
inline std::string* ValueRange::mutable_start_value_open() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ValueRange.start_value_open)
  return _internal_mutable_start_value_open();
}
inline const std::string& ValueRange::_internal_start_value_open() const {
  if (_internal_has_start_value_open()) {
    return start_value_.start_value_open_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ValueRange::_internal_set_start_value_open(const std::string& value) {
  if (!_internal_has_start_value_open()) {
    clear_start_value();
    set_has_start_value_open();
    start_value_.start_value_open_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  start_value_.start_value_open_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ValueRange::set_start_value_open(std::string&& value) {
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ValueRange.start_value_open)
  if (!_internal_has_start_value_open()) {
    clear_start_value();
    set_has_start_value_open();
    start_value_.start_value_open_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  start_value_.start_value_open_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.v2.ValueRange.start_value_open)
}
inline void ValueRange::set_start_value_open(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_start_value_open()) {
    clear_start_value();
    set_has_start_value_open();
    start_value_.start_value_open_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  start_value_.start_value_open_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.ValueRange.start_value_open)
}
inline void ValueRange::set_start_value_open(const void* value,
                             size_t size) {
  if (!_internal_has_start_value_open()) {
    clear_start_value();
    set_has_start_value_open();
    start_value_.start_value_open_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  start_value_.start_value_open_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.ValueRange.start_value_open)
}
inline std::string* ValueRange::_internal_mutable_start_value_open() {
  if (!_internal_has_start_value_open()) {
    clear_start_value();
    set_has_start_value_open();
    start_value_.start_value_open_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return start_value_.start_value_open_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ValueRange::release_start_value_open() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ValueRange.start_value_open)
  if (_internal_has_start_value_open()) {
    clear_has_start_value();
    return start_value_.start_value_open_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void ValueRange::set_allocated_start_value_open(std::string* start_value_open) {
  if (has_start_value()) {
    clear_start_value();
  }
  if (start_value_open != nullptr) {
    set_has_start_value_open();
    start_value_.start_value_open_.UnsafeSetDefault(start_value_open);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(start_value_open);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ValueRange.start_value_open)
}

// bytes end_value_closed = 3;
inline bool ValueRange::_internal_has_end_value_closed() const {
  return end_value_case() == kEndValueClosed;
}
inline void ValueRange::set_has_end_value_closed() {
  _oneof_case_[1] = kEndValueClosed;
}
inline void ValueRange::clear_end_value_closed() {
  if (_internal_has_end_value_closed()) {
    end_value_.end_value_closed_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_end_value();
  }
}
inline const std::string& ValueRange::end_value_closed() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ValueRange.end_value_closed)
  return _internal_end_value_closed();
}
inline void ValueRange::set_end_value_closed(const std::string& value) {
  _internal_set_end_value_closed(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ValueRange.end_value_closed)
}
inline std::string* ValueRange::mutable_end_value_closed() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ValueRange.end_value_closed)
  return _internal_mutable_end_value_closed();
}
inline const std::string& ValueRange::_internal_end_value_closed() const {
  if (_internal_has_end_value_closed()) {
    return end_value_.end_value_closed_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ValueRange::_internal_set_end_value_closed(const std::string& value) {
  if (!_internal_has_end_value_closed()) {
    clear_end_value();
    set_has_end_value_closed();
    end_value_.end_value_closed_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  end_value_.end_value_closed_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ValueRange::set_end_value_closed(std::string&& value) {
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ValueRange.end_value_closed)
  if (!_internal_has_end_value_closed()) {
    clear_end_value();
    set_has_end_value_closed();
    end_value_.end_value_closed_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  end_value_.end_value_closed_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.v2.ValueRange.end_value_closed)
}
inline void ValueRange::set_end_value_closed(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_end_value_closed()) {
    clear_end_value();
    set_has_end_value_closed();
    end_value_.end_value_closed_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  end_value_.end_value_closed_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.ValueRange.end_value_closed)
}
inline void ValueRange::set_end_value_closed(const void* value,
                             size_t size) {
  if (!_internal_has_end_value_closed()) {
    clear_end_value();
    set_has_end_value_closed();
    end_value_.end_value_closed_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  end_value_.end_value_closed_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.ValueRange.end_value_closed)
}
inline std::string* ValueRange::_internal_mutable_end_value_closed() {
  if (!_internal_has_end_value_closed()) {
    clear_end_value();
    set_has_end_value_closed();
    end_value_.end_value_closed_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return end_value_.end_value_closed_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ValueRange::release_end_value_closed() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ValueRange.end_value_closed)
  if (_internal_has_end_value_closed()) {
    clear_has_end_value();
    return end_value_.end_value_closed_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void ValueRange::set_allocated_end_value_closed(std::string* end_value_closed) {
  if (has_end_value()) {
    clear_end_value();
  }
  if (end_value_closed != nullptr) {
    set_has_end_value_closed();
    end_value_.end_value_closed_.UnsafeSetDefault(end_value_closed);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(end_value_closed);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ValueRange.end_value_closed)
}

// bytes end_value_open = 4;
inline bool ValueRange::_internal_has_end_value_open() const {
  return end_value_case() == kEndValueOpen;
}
inline void ValueRange::set_has_end_value_open() {
  _oneof_case_[1] = kEndValueOpen;
}
inline void ValueRange::clear_end_value_open() {
  if (_internal_has_end_value_open()) {
    end_value_.end_value_open_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_end_value();
  }
}
inline const std::string& ValueRange::end_value_open() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ValueRange.end_value_open)
  return _internal_end_value_open();
}
inline void ValueRange::set_end_value_open(const std::string& value) {
  _internal_set_end_value_open(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ValueRange.end_value_open)
}
inline std::string* ValueRange::mutable_end_value_open() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ValueRange.end_value_open)
  return _internal_mutable_end_value_open();
}
inline const std::string& ValueRange::_internal_end_value_open() const {
  if (_internal_has_end_value_open()) {
    return end_value_.end_value_open_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ValueRange::_internal_set_end_value_open(const std::string& value) {
  if (!_internal_has_end_value_open()) {
    clear_end_value();
    set_has_end_value_open();
    end_value_.end_value_open_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  end_value_.end_value_open_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ValueRange::set_end_value_open(std::string&& value) {
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ValueRange.end_value_open)
  if (!_internal_has_end_value_open()) {
    clear_end_value();
    set_has_end_value_open();
    end_value_.end_value_open_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  end_value_.end_value_open_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.v2.ValueRange.end_value_open)
}
inline void ValueRange::set_end_value_open(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_end_value_open()) {
    clear_end_value();
    set_has_end_value_open();
    end_value_.end_value_open_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  end_value_.end_value_open_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.ValueRange.end_value_open)
}
inline void ValueRange::set_end_value_open(const void* value,
                             size_t size) {
  if (!_internal_has_end_value_open()) {
    clear_end_value();
    set_has_end_value_open();
    end_value_.end_value_open_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  end_value_.end_value_open_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.ValueRange.end_value_open)
}
inline std::string* ValueRange::_internal_mutable_end_value_open() {
  if (!_internal_has_end_value_open()) {
    clear_end_value();
    set_has_end_value_open();
    end_value_.end_value_open_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return end_value_.end_value_open_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ValueRange::release_end_value_open() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ValueRange.end_value_open)
  if (_internal_has_end_value_open()) {
    clear_has_end_value();
    return end_value_.end_value_open_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void ValueRange::set_allocated_end_value_open(std::string* end_value_open) {
  if (has_end_value()) {
    clear_end_value();
  }
  if (end_value_open != nullptr) {
    set_has_end_value_open();
    end_value_.end_value_open_.UnsafeSetDefault(end_value_open);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(end_value_open);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ValueRange.end_value_open)
}

inline bool ValueRange::has_start_value() const {
  return start_value_case() != START_VALUE_NOT_SET;
}
inline void ValueRange::clear_has_start_value() {
  _oneof_case_[0] = START_VALUE_NOT_SET;
}
inline bool ValueRange::has_end_value() const {
  return end_value_case() != END_VALUE_NOT_SET;
}
inline void ValueRange::clear_has_end_value() {
  _oneof_case_[1] = END_VALUE_NOT_SET;
}
inline ValueRange::StartValueCase ValueRange::start_value_case() const {
  return ValueRange::StartValueCase(_oneof_case_[0]);
}
inline ValueRange::EndValueCase ValueRange::end_value_case() const {
  return ValueRange::EndValueCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// RowFilter_Chain

// repeated .google.bigtable.v2.RowFilter filters = 1;
inline int RowFilter_Chain::_internal_filters_size() const {
  return filters_.size();
}
inline int RowFilter_Chain::filters_size() const {
  return _internal_filters_size();
}
inline void RowFilter_Chain::clear_filters() {
  filters_.Clear();
}
inline ::google::bigtable::v2::RowFilter* RowFilter_Chain::mutable_filters(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.RowFilter.Chain.filters)
  return filters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::RowFilter >*
RowFilter_Chain::mutable_filters() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.v2.RowFilter.Chain.filters)
  return &filters_;
}
inline const ::google::bigtable::v2::RowFilter& RowFilter_Chain::_internal_filters(int index) const {
  return filters_.Get(index);
}
inline const ::google::bigtable::v2::RowFilter& RowFilter_Chain::filters(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.RowFilter.Chain.filters)
  return _internal_filters(index);
}
inline ::google::bigtable::v2::RowFilter* RowFilter_Chain::_internal_add_filters() {
  return filters_.Add();
}
inline ::google::bigtable::v2::RowFilter* RowFilter_Chain::add_filters() {
  // @@protoc_insertion_point(field_add:google.bigtable.v2.RowFilter.Chain.filters)
  return _internal_add_filters();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::RowFilter >&
RowFilter_Chain::filters() const {
  // @@protoc_insertion_point(field_list:google.bigtable.v2.RowFilter.Chain.filters)
  return filters_;
}

// -------------------------------------------------------------------

// RowFilter_Interleave

// repeated .google.bigtable.v2.RowFilter filters = 1;
inline int RowFilter_Interleave::_internal_filters_size() const {
  return filters_.size();
}
inline int RowFilter_Interleave::filters_size() const {
  return _internal_filters_size();
}
inline void RowFilter_Interleave::clear_filters() {
  filters_.Clear();
}
inline ::google::bigtable::v2::RowFilter* RowFilter_Interleave::mutable_filters(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.RowFilter.Interleave.filters)
  return filters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::RowFilter >*
RowFilter_Interleave::mutable_filters() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.v2.RowFilter.Interleave.filters)
  return &filters_;
}
inline const ::google::bigtable::v2::RowFilter& RowFilter_Interleave::_internal_filters(int index) const {
  return filters_.Get(index);
}
inline const ::google::bigtable::v2::RowFilter& RowFilter_Interleave::filters(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.RowFilter.Interleave.filters)
  return _internal_filters(index);
}
inline ::google::bigtable::v2::RowFilter* RowFilter_Interleave::_internal_add_filters() {
  return filters_.Add();
}
inline ::google::bigtable::v2::RowFilter* RowFilter_Interleave::add_filters() {
  // @@protoc_insertion_point(field_add:google.bigtable.v2.RowFilter.Interleave.filters)
  return _internal_add_filters();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::v2::RowFilter >&
RowFilter_Interleave::filters() const {
  // @@protoc_insertion_point(field_list:google.bigtable.v2.RowFilter.Interleave.filters)
  return filters_;
}

// -------------------------------------------------------------------

// RowFilter_Condition

// .google.bigtable.v2.RowFilter predicate_filter = 1;
inline bool RowFilter_Condition::_internal_has_predicate_filter() const {
  return this != internal_default_instance() && predicate_filter_ != nullptr;
}
inline bool RowFilter_Condition::has_predicate_filter() const {
  return _internal_has_predicate_filter();
}
inline void RowFilter_Condition::clear_predicate_filter() {
  if (GetArena() == nullptr && predicate_filter_ != nullptr) {
    delete predicate_filter_;
  }
  predicate_filter_ = nullptr;
}
inline const ::google::bigtable::v2::RowFilter& RowFilter_Condition::_internal_predicate_filter() const {
  const ::google::bigtable::v2::RowFilter* p = predicate_filter_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::bigtable::v2::RowFilter&>(
      ::google::bigtable::v2::_RowFilter_default_instance_);
}
inline const ::google::bigtable::v2::RowFilter& RowFilter_Condition::predicate_filter() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.RowFilter.Condition.predicate_filter)
  return _internal_predicate_filter();
}
inline void RowFilter_Condition::unsafe_arena_set_allocated_predicate_filter(
    ::google::bigtable::v2::RowFilter* predicate_filter) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(predicate_filter_);
  }
  predicate_filter_ = predicate_filter;
  if (predicate_filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.v2.RowFilter.Condition.predicate_filter)
}
inline ::google::bigtable::v2::RowFilter* RowFilter_Condition::release_predicate_filter() {
  
  ::google::bigtable::v2::RowFilter* temp = predicate_filter_;
  predicate_filter_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::bigtable::v2::RowFilter* RowFilter_Condition::unsafe_arena_release_predicate_filter() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.RowFilter.Condition.predicate_filter)
  
  ::google::bigtable::v2::RowFilter* temp = predicate_filter_;
  predicate_filter_ = nullptr;
  return temp;
}
inline ::google::bigtable::v2::RowFilter* RowFilter_Condition::_internal_mutable_predicate_filter() {
  
  if (predicate_filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::bigtable::v2::RowFilter>(GetArena());
    predicate_filter_ = p;
  }
  return predicate_filter_;
}
inline ::google::bigtable::v2::RowFilter* RowFilter_Condition::mutable_predicate_filter() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.RowFilter.Condition.predicate_filter)
  return _internal_mutable_predicate_filter();
}
inline void RowFilter_Condition::set_allocated_predicate_filter(::google::bigtable::v2::RowFilter* predicate_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete predicate_filter_;
  }
  if (predicate_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(predicate_filter);
    if (message_arena != submessage_arena) {
      predicate_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, predicate_filter, submessage_arena);
    }
    
  } else {
    
  }
  predicate_filter_ = predicate_filter;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.RowFilter.Condition.predicate_filter)
}

// .google.bigtable.v2.RowFilter true_filter = 2;
inline bool RowFilter_Condition::_internal_has_true_filter() const {
  return this != internal_default_instance() && true_filter_ != nullptr;
}
inline bool RowFilter_Condition::has_true_filter() const {
  return _internal_has_true_filter();
}
inline void RowFilter_Condition::clear_true_filter() {
  if (GetArena() == nullptr && true_filter_ != nullptr) {
    delete true_filter_;
  }
  true_filter_ = nullptr;
}
inline const ::google::bigtable::v2::RowFilter& RowFilter_Condition::_internal_true_filter() const {
  const ::google::bigtable::v2::RowFilter* p = true_filter_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::bigtable::v2::RowFilter&>(
      ::google::bigtable::v2::_RowFilter_default_instance_);
}
inline const ::google::bigtable::v2::RowFilter& RowFilter_Condition::true_filter() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.RowFilter.Condition.true_filter)
  return _internal_true_filter();
}
inline void RowFilter_Condition::unsafe_arena_set_allocated_true_filter(
    ::google::bigtable::v2::RowFilter* true_filter) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(true_filter_);
  }
  true_filter_ = true_filter;
  if (true_filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.v2.RowFilter.Condition.true_filter)
}
inline ::google::bigtable::v2::RowFilter* RowFilter_Condition::release_true_filter() {
  
  ::google::bigtable::v2::RowFilter* temp = true_filter_;
  true_filter_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::bigtable::v2::RowFilter* RowFilter_Condition::unsafe_arena_release_true_filter() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.RowFilter.Condition.true_filter)
  
  ::google::bigtable::v2::RowFilter* temp = true_filter_;
  true_filter_ = nullptr;
  return temp;
}
inline ::google::bigtable::v2::RowFilter* RowFilter_Condition::_internal_mutable_true_filter() {
  
  if (true_filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::bigtable::v2::RowFilter>(GetArena());
    true_filter_ = p;
  }
  return true_filter_;
}
inline ::google::bigtable::v2::RowFilter* RowFilter_Condition::mutable_true_filter() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.RowFilter.Condition.true_filter)
  return _internal_mutable_true_filter();
}
inline void RowFilter_Condition::set_allocated_true_filter(::google::bigtable::v2::RowFilter* true_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete true_filter_;
  }
  if (true_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(true_filter);
    if (message_arena != submessage_arena) {
      true_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, true_filter, submessage_arena);
    }
    
  } else {
    
  }
  true_filter_ = true_filter;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.RowFilter.Condition.true_filter)
}

// .google.bigtable.v2.RowFilter false_filter = 3;
inline bool RowFilter_Condition::_internal_has_false_filter() const {
  return this != internal_default_instance() && false_filter_ != nullptr;
}
inline bool RowFilter_Condition::has_false_filter() const {
  return _internal_has_false_filter();
}
inline void RowFilter_Condition::clear_false_filter() {
  if (GetArena() == nullptr && false_filter_ != nullptr) {
    delete false_filter_;
  }
  false_filter_ = nullptr;
}
inline const ::google::bigtable::v2::RowFilter& RowFilter_Condition::_internal_false_filter() const {
  const ::google::bigtable::v2::RowFilter* p = false_filter_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::bigtable::v2::RowFilter&>(
      ::google::bigtable::v2::_RowFilter_default_instance_);
}
inline const ::google::bigtable::v2::RowFilter& RowFilter_Condition::false_filter() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.RowFilter.Condition.false_filter)
  return _internal_false_filter();
}
inline void RowFilter_Condition::unsafe_arena_set_allocated_false_filter(
    ::google::bigtable::v2::RowFilter* false_filter) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(false_filter_);
  }
  false_filter_ = false_filter;
  if (false_filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.v2.RowFilter.Condition.false_filter)
}
inline ::google::bigtable::v2::RowFilter* RowFilter_Condition::release_false_filter() {
  
  ::google::bigtable::v2::RowFilter* temp = false_filter_;
  false_filter_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::bigtable::v2::RowFilter* RowFilter_Condition::unsafe_arena_release_false_filter() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.RowFilter.Condition.false_filter)
  
  ::google::bigtable::v2::RowFilter* temp = false_filter_;
  false_filter_ = nullptr;
  return temp;
}
inline ::google::bigtable::v2::RowFilter* RowFilter_Condition::_internal_mutable_false_filter() {
  
  if (false_filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::bigtable::v2::RowFilter>(GetArena());
    false_filter_ = p;
  }
  return false_filter_;
}
inline ::google::bigtable::v2::RowFilter* RowFilter_Condition::mutable_false_filter() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.RowFilter.Condition.false_filter)
  return _internal_mutable_false_filter();
}
inline void RowFilter_Condition::set_allocated_false_filter(::google::bigtable::v2::RowFilter* false_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete false_filter_;
  }
  if (false_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(false_filter);
    if (message_arena != submessage_arena) {
      false_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, false_filter, submessage_arena);
    }
    
  } else {
    
  }
  false_filter_ = false_filter;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.RowFilter.Condition.false_filter)
}

// -------------------------------------------------------------------

// RowFilter

// .google.bigtable.v2.RowFilter.Chain chain = 1;
inline bool RowFilter::_internal_has_chain() const {
  return filter_case() == kChain;
}
inline bool RowFilter::has_chain() const {
  return _internal_has_chain();
}
inline void RowFilter::set_has_chain() {
  _oneof_case_[0] = kChain;
}
inline void RowFilter::clear_chain() {
  if (_internal_has_chain()) {
    if (GetArena() == nullptr) {
      delete filter_.chain_;
    }
    clear_has_filter();
  }
}
inline ::google::bigtable::v2::RowFilter_Chain* RowFilter::release_chain() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.RowFilter.chain)
  if (_internal_has_chain()) {
    clear_has_filter();
      ::google::bigtable::v2::RowFilter_Chain* temp = filter_.chain_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    filter_.chain_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::bigtable::v2::RowFilter_Chain& RowFilter::_internal_chain() const {
  return _internal_has_chain()
      ? *filter_.chain_
      : reinterpret_cast< ::google::bigtable::v2::RowFilter_Chain&>(::google::bigtable::v2::_RowFilter_Chain_default_instance_);
}
inline const ::google::bigtable::v2::RowFilter_Chain& RowFilter::chain() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.RowFilter.chain)
  return _internal_chain();
}
inline ::google::bigtable::v2::RowFilter_Chain* RowFilter::unsafe_arena_release_chain() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.bigtable.v2.RowFilter.chain)
  if (_internal_has_chain()) {
    clear_has_filter();
    ::google::bigtable::v2::RowFilter_Chain* temp = filter_.chain_;
    filter_.chain_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RowFilter::unsafe_arena_set_allocated_chain(::google::bigtable::v2::RowFilter_Chain* chain) {
  clear_filter();
  if (chain) {
    set_has_chain();
    filter_.chain_ = chain;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.v2.RowFilter.chain)
}
inline ::google::bigtable::v2::RowFilter_Chain* RowFilter::_internal_mutable_chain() {
  if (!_internal_has_chain()) {
    clear_filter();
    set_has_chain();
    filter_.chain_ = CreateMaybeMessage< ::google::bigtable::v2::RowFilter_Chain >(GetArena());
  }
  return filter_.chain_;
}
inline ::google::bigtable::v2::RowFilter_Chain* RowFilter::mutable_chain() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.RowFilter.chain)
  return _internal_mutable_chain();
}

// .google.bigtable.v2.RowFilter.Interleave interleave = 2;
inline bool RowFilter::_internal_has_interleave() const {
  return filter_case() == kInterleave;
}
inline bool RowFilter::has_interleave() const {
  return _internal_has_interleave();
}
inline void RowFilter::set_has_interleave() {
  _oneof_case_[0] = kInterleave;
}
inline void RowFilter::clear_interleave() {
  if (_internal_has_interleave()) {
    if (GetArena() == nullptr) {
      delete filter_.interleave_;
    }
    clear_has_filter();
  }
}
inline ::google::bigtable::v2::RowFilter_Interleave* RowFilter::release_interleave() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.RowFilter.interleave)
  if (_internal_has_interleave()) {
    clear_has_filter();
      ::google::bigtable::v2::RowFilter_Interleave* temp = filter_.interleave_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    filter_.interleave_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::bigtable::v2::RowFilter_Interleave& RowFilter::_internal_interleave() const {
  return _internal_has_interleave()
      ? *filter_.interleave_
      : reinterpret_cast< ::google::bigtable::v2::RowFilter_Interleave&>(::google::bigtable::v2::_RowFilter_Interleave_default_instance_);
}
inline const ::google::bigtable::v2::RowFilter_Interleave& RowFilter::interleave() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.RowFilter.interleave)
  return _internal_interleave();
}
inline ::google::bigtable::v2::RowFilter_Interleave* RowFilter::unsafe_arena_release_interleave() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.bigtable.v2.RowFilter.interleave)
  if (_internal_has_interleave()) {
    clear_has_filter();
    ::google::bigtable::v2::RowFilter_Interleave* temp = filter_.interleave_;
    filter_.interleave_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RowFilter::unsafe_arena_set_allocated_interleave(::google::bigtable::v2::RowFilter_Interleave* interleave) {
  clear_filter();
  if (interleave) {
    set_has_interleave();
    filter_.interleave_ = interleave;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.v2.RowFilter.interleave)
}
inline ::google::bigtable::v2::RowFilter_Interleave* RowFilter::_internal_mutable_interleave() {
  if (!_internal_has_interleave()) {
    clear_filter();
    set_has_interleave();
    filter_.interleave_ = CreateMaybeMessage< ::google::bigtable::v2::RowFilter_Interleave >(GetArena());
  }
  return filter_.interleave_;
}
inline ::google::bigtable::v2::RowFilter_Interleave* RowFilter::mutable_interleave() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.RowFilter.interleave)
  return _internal_mutable_interleave();
}

// .google.bigtable.v2.RowFilter.Condition condition = 3;
inline bool RowFilter::_internal_has_condition() const {
  return filter_case() == kCondition;
}
inline bool RowFilter::has_condition() const {
  return _internal_has_condition();
}
inline void RowFilter::set_has_condition() {
  _oneof_case_[0] = kCondition;
}
inline void RowFilter::clear_condition() {
  if (_internal_has_condition()) {
    if (GetArena() == nullptr) {
      delete filter_.condition_;
    }
    clear_has_filter();
  }
}
inline ::google::bigtable::v2::RowFilter_Condition* RowFilter::release_condition() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.RowFilter.condition)
  if (_internal_has_condition()) {
    clear_has_filter();
      ::google::bigtable::v2::RowFilter_Condition* temp = filter_.condition_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    filter_.condition_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::bigtable::v2::RowFilter_Condition& RowFilter::_internal_condition() const {
  return _internal_has_condition()
      ? *filter_.condition_
      : reinterpret_cast< ::google::bigtable::v2::RowFilter_Condition&>(::google::bigtable::v2::_RowFilter_Condition_default_instance_);
}
inline const ::google::bigtable::v2::RowFilter_Condition& RowFilter::condition() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.RowFilter.condition)
  return _internal_condition();
}
inline ::google::bigtable::v2::RowFilter_Condition* RowFilter::unsafe_arena_release_condition() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.bigtable.v2.RowFilter.condition)
  if (_internal_has_condition()) {
    clear_has_filter();
    ::google::bigtable::v2::RowFilter_Condition* temp = filter_.condition_;
    filter_.condition_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RowFilter::unsafe_arena_set_allocated_condition(::google::bigtable::v2::RowFilter_Condition* condition) {
  clear_filter();
  if (condition) {
    set_has_condition();
    filter_.condition_ = condition;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.v2.RowFilter.condition)
}
inline ::google::bigtable::v2::RowFilter_Condition* RowFilter::_internal_mutable_condition() {
  if (!_internal_has_condition()) {
    clear_filter();
    set_has_condition();
    filter_.condition_ = CreateMaybeMessage< ::google::bigtable::v2::RowFilter_Condition >(GetArena());
  }
  return filter_.condition_;
}
inline ::google::bigtable::v2::RowFilter_Condition* RowFilter::mutable_condition() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.RowFilter.condition)
  return _internal_mutable_condition();
}

// bool sink = 16;
inline bool RowFilter::_internal_has_sink() const {
  return filter_case() == kSink;
}
inline void RowFilter::set_has_sink() {
  _oneof_case_[0] = kSink;
}
inline void RowFilter::clear_sink() {
  if (_internal_has_sink()) {
    filter_.sink_ = false;
    clear_has_filter();
  }
}
inline bool RowFilter::_internal_sink() const {
  if (_internal_has_sink()) {
    return filter_.sink_;
  }
  return false;
}
inline void RowFilter::_internal_set_sink(bool value) {
  if (!_internal_has_sink()) {
    clear_filter();
    set_has_sink();
  }
  filter_.sink_ = value;
}
inline bool RowFilter::sink() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.RowFilter.sink)
  return _internal_sink();
}
inline void RowFilter::set_sink(bool value) {
  _internal_set_sink(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.RowFilter.sink)
}

// bool pass_all_filter = 17;
inline bool RowFilter::_internal_has_pass_all_filter() const {
  return filter_case() == kPassAllFilter;
}
inline void RowFilter::set_has_pass_all_filter() {
  _oneof_case_[0] = kPassAllFilter;
}
inline void RowFilter::clear_pass_all_filter() {
  if (_internal_has_pass_all_filter()) {
    filter_.pass_all_filter_ = false;
    clear_has_filter();
  }
}
inline bool RowFilter::_internal_pass_all_filter() const {
  if (_internal_has_pass_all_filter()) {
    return filter_.pass_all_filter_;
  }
  return false;
}
inline void RowFilter::_internal_set_pass_all_filter(bool value) {
  if (!_internal_has_pass_all_filter()) {
    clear_filter();
    set_has_pass_all_filter();
  }
  filter_.pass_all_filter_ = value;
}
inline bool RowFilter::pass_all_filter() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.RowFilter.pass_all_filter)
  return _internal_pass_all_filter();
}
inline void RowFilter::set_pass_all_filter(bool value) {
  _internal_set_pass_all_filter(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.RowFilter.pass_all_filter)
}

// bool block_all_filter = 18;
inline bool RowFilter::_internal_has_block_all_filter() const {
  return filter_case() == kBlockAllFilter;
}
inline void RowFilter::set_has_block_all_filter() {
  _oneof_case_[0] = kBlockAllFilter;
}
inline void RowFilter::clear_block_all_filter() {
  if (_internal_has_block_all_filter()) {
    filter_.block_all_filter_ = false;
    clear_has_filter();
  }
}
inline bool RowFilter::_internal_block_all_filter() const {
  if (_internal_has_block_all_filter()) {
    return filter_.block_all_filter_;
  }
  return false;
}
inline void RowFilter::_internal_set_block_all_filter(bool value) {
  if (!_internal_has_block_all_filter()) {
    clear_filter();
    set_has_block_all_filter();
  }
  filter_.block_all_filter_ = value;
}
inline bool RowFilter::block_all_filter() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.RowFilter.block_all_filter)
  return _internal_block_all_filter();
}
inline void RowFilter::set_block_all_filter(bool value) {
  _internal_set_block_all_filter(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.RowFilter.block_all_filter)
}

// bytes row_key_regex_filter = 4;
inline bool RowFilter::_internal_has_row_key_regex_filter() const {
  return filter_case() == kRowKeyRegexFilter;
}
inline void RowFilter::set_has_row_key_regex_filter() {
  _oneof_case_[0] = kRowKeyRegexFilter;
}
inline void RowFilter::clear_row_key_regex_filter() {
  if (_internal_has_row_key_regex_filter()) {
    filter_.row_key_regex_filter_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_filter();
  }
}
inline const std::string& RowFilter::row_key_regex_filter() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.RowFilter.row_key_regex_filter)
  return _internal_row_key_regex_filter();
}
inline void RowFilter::set_row_key_regex_filter(const std::string& value) {
  _internal_set_row_key_regex_filter(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.RowFilter.row_key_regex_filter)
}
inline std::string* RowFilter::mutable_row_key_regex_filter() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.RowFilter.row_key_regex_filter)
  return _internal_mutable_row_key_regex_filter();
}
inline const std::string& RowFilter::_internal_row_key_regex_filter() const {
  if (_internal_has_row_key_regex_filter()) {
    return filter_.row_key_regex_filter_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void RowFilter::_internal_set_row_key_regex_filter(const std::string& value) {
  if (!_internal_has_row_key_regex_filter()) {
    clear_filter();
    set_has_row_key_regex_filter();
    filter_.row_key_regex_filter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  filter_.row_key_regex_filter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RowFilter::set_row_key_regex_filter(std::string&& value) {
  // @@protoc_insertion_point(field_set:google.bigtable.v2.RowFilter.row_key_regex_filter)
  if (!_internal_has_row_key_regex_filter()) {
    clear_filter();
    set_has_row_key_regex_filter();
    filter_.row_key_regex_filter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  filter_.row_key_regex_filter_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.v2.RowFilter.row_key_regex_filter)
}
inline void RowFilter::set_row_key_regex_filter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_row_key_regex_filter()) {
    clear_filter();
    set_has_row_key_regex_filter();
    filter_.row_key_regex_filter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  filter_.row_key_regex_filter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.RowFilter.row_key_regex_filter)
}
inline void RowFilter::set_row_key_regex_filter(const void* value,
                             size_t size) {
  if (!_internal_has_row_key_regex_filter()) {
    clear_filter();
    set_has_row_key_regex_filter();
    filter_.row_key_regex_filter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  filter_.row_key_regex_filter_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.RowFilter.row_key_regex_filter)
}
inline std::string* RowFilter::_internal_mutable_row_key_regex_filter() {
  if (!_internal_has_row_key_regex_filter()) {
    clear_filter();
    set_has_row_key_regex_filter();
    filter_.row_key_regex_filter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return filter_.row_key_regex_filter_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RowFilter::release_row_key_regex_filter() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.RowFilter.row_key_regex_filter)
  if (_internal_has_row_key_regex_filter()) {
    clear_has_filter();
    return filter_.row_key_regex_filter_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void RowFilter::set_allocated_row_key_regex_filter(std::string* row_key_regex_filter) {
  if (has_filter()) {
    clear_filter();
  }
  if (row_key_regex_filter != nullptr) {
    set_has_row_key_regex_filter();
    filter_.row_key_regex_filter_.UnsafeSetDefault(row_key_regex_filter);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(row_key_regex_filter);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.RowFilter.row_key_regex_filter)
}

// double row_sample_filter = 14;
inline bool RowFilter::_internal_has_row_sample_filter() const {
  return filter_case() == kRowSampleFilter;
}
inline void RowFilter::set_has_row_sample_filter() {
  _oneof_case_[0] = kRowSampleFilter;
}
inline void RowFilter::clear_row_sample_filter() {
  if (_internal_has_row_sample_filter()) {
    filter_.row_sample_filter_ = 0;
    clear_has_filter();
  }
}
inline double RowFilter::_internal_row_sample_filter() const {
  if (_internal_has_row_sample_filter()) {
    return filter_.row_sample_filter_;
  }
  return 0;
}
inline void RowFilter::_internal_set_row_sample_filter(double value) {
  if (!_internal_has_row_sample_filter()) {
    clear_filter();
    set_has_row_sample_filter();
  }
  filter_.row_sample_filter_ = value;
}
inline double RowFilter::row_sample_filter() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.RowFilter.row_sample_filter)
  return _internal_row_sample_filter();
}
inline void RowFilter::set_row_sample_filter(double value) {
  _internal_set_row_sample_filter(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.RowFilter.row_sample_filter)
}

// string family_name_regex_filter = 5;
inline bool RowFilter::_internal_has_family_name_regex_filter() const {
  return filter_case() == kFamilyNameRegexFilter;
}
inline void RowFilter::set_has_family_name_regex_filter() {
  _oneof_case_[0] = kFamilyNameRegexFilter;
}
inline void RowFilter::clear_family_name_regex_filter() {
  if (_internal_has_family_name_regex_filter()) {
    filter_.family_name_regex_filter_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_filter();
  }
}
inline const std::string& RowFilter::family_name_regex_filter() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.RowFilter.family_name_regex_filter)
  return _internal_family_name_regex_filter();
}
inline void RowFilter::set_family_name_regex_filter(const std::string& value) {
  _internal_set_family_name_regex_filter(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.RowFilter.family_name_regex_filter)
}
inline std::string* RowFilter::mutable_family_name_regex_filter() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.RowFilter.family_name_regex_filter)
  return _internal_mutable_family_name_regex_filter();
}
inline const std::string& RowFilter::_internal_family_name_regex_filter() const {
  if (_internal_has_family_name_regex_filter()) {
    return filter_.family_name_regex_filter_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void RowFilter::_internal_set_family_name_regex_filter(const std::string& value) {
  if (!_internal_has_family_name_regex_filter()) {
    clear_filter();
    set_has_family_name_regex_filter();
    filter_.family_name_regex_filter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  filter_.family_name_regex_filter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RowFilter::set_family_name_regex_filter(std::string&& value) {
  // @@protoc_insertion_point(field_set:google.bigtable.v2.RowFilter.family_name_regex_filter)
  if (!_internal_has_family_name_regex_filter()) {
    clear_filter();
    set_has_family_name_regex_filter();
    filter_.family_name_regex_filter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  filter_.family_name_regex_filter_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.v2.RowFilter.family_name_regex_filter)
}
inline void RowFilter::set_family_name_regex_filter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_family_name_regex_filter()) {
    clear_filter();
    set_has_family_name_regex_filter();
    filter_.family_name_regex_filter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  filter_.family_name_regex_filter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.RowFilter.family_name_regex_filter)
}
inline void RowFilter::set_family_name_regex_filter(const char* value,
                             size_t size) {
  if (!_internal_has_family_name_regex_filter()) {
    clear_filter();
    set_has_family_name_regex_filter();
    filter_.family_name_regex_filter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  filter_.family_name_regex_filter_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.RowFilter.family_name_regex_filter)
}
inline std::string* RowFilter::_internal_mutable_family_name_regex_filter() {
  if (!_internal_has_family_name_regex_filter()) {
    clear_filter();
    set_has_family_name_regex_filter();
    filter_.family_name_regex_filter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return filter_.family_name_regex_filter_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RowFilter::release_family_name_regex_filter() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.RowFilter.family_name_regex_filter)
  if (_internal_has_family_name_regex_filter()) {
    clear_has_filter();
    return filter_.family_name_regex_filter_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void RowFilter::set_allocated_family_name_regex_filter(std::string* family_name_regex_filter) {
  if (has_filter()) {
    clear_filter();
  }
  if (family_name_regex_filter != nullptr) {
    set_has_family_name_regex_filter();
    filter_.family_name_regex_filter_.UnsafeSetDefault(family_name_regex_filter);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(family_name_regex_filter);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.RowFilter.family_name_regex_filter)
}

// bytes column_qualifier_regex_filter = 6;
inline bool RowFilter::_internal_has_column_qualifier_regex_filter() const {
  return filter_case() == kColumnQualifierRegexFilter;
}
inline void RowFilter::set_has_column_qualifier_regex_filter() {
  _oneof_case_[0] = kColumnQualifierRegexFilter;
}
inline void RowFilter::clear_column_qualifier_regex_filter() {
  if (_internal_has_column_qualifier_regex_filter()) {
    filter_.column_qualifier_regex_filter_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_filter();
  }
}
inline const std::string& RowFilter::column_qualifier_regex_filter() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.RowFilter.column_qualifier_regex_filter)
  return _internal_column_qualifier_regex_filter();
}
inline void RowFilter::set_column_qualifier_regex_filter(const std::string& value) {
  _internal_set_column_qualifier_regex_filter(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.RowFilter.column_qualifier_regex_filter)
}
inline std::string* RowFilter::mutable_column_qualifier_regex_filter() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.RowFilter.column_qualifier_regex_filter)
  return _internal_mutable_column_qualifier_regex_filter();
}
inline const std::string& RowFilter::_internal_column_qualifier_regex_filter() const {
  if (_internal_has_column_qualifier_regex_filter()) {
    return filter_.column_qualifier_regex_filter_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void RowFilter::_internal_set_column_qualifier_regex_filter(const std::string& value) {
  if (!_internal_has_column_qualifier_regex_filter()) {
    clear_filter();
    set_has_column_qualifier_regex_filter();
    filter_.column_qualifier_regex_filter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  filter_.column_qualifier_regex_filter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RowFilter::set_column_qualifier_regex_filter(std::string&& value) {
  // @@protoc_insertion_point(field_set:google.bigtable.v2.RowFilter.column_qualifier_regex_filter)
  if (!_internal_has_column_qualifier_regex_filter()) {
    clear_filter();
    set_has_column_qualifier_regex_filter();
    filter_.column_qualifier_regex_filter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  filter_.column_qualifier_regex_filter_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.v2.RowFilter.column_qualifier_regex_filter)
}
inline void RowFilter::set_column_qualifier_regex_filter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_column_qualifier_regex_filter()) {
    clear_filter();
    set_has_column_qualifier_regex_filter();
    filter_.column_qualifier_regex_filter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  filter_.column_qualifier_regex_filter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.RowFilter.column_qualifier_regex_filter)
}
inline void RowFilter::set_column_qualifier_regex_filter(const void* value,
                             size_t size) {
  if (!_internal_has_column_qualifier_regex_filter()) {
    clear_filter();
    set_has_column_qualifier_regex_filter();
    filter_.column_qualifier_regex_filter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  filter_.column_qualifier_regex_filter_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.RowFilter.column_qualifier_regex_filter)
}
inline std::string* RowFilter::_internal_mutable_column_qualifier_regex_filter() {
  if (!_internal_has_column_qualifier_regex_filter()) {
    clear_filter();
    set_has_column_qualifier_regex_filter();
    filter_.column_qualifier_regex_filter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return filter_.column_qualifier_regex_filter_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RowFilter::release_column_qualifier_regex_filter() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.RowFilter.column_qualifier_regex_filter)
  if (_internal_has_column_qualifier_regex_filter()) {
    clear_has_filter();
    return filter_.column_qualifier_regex_filter_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void RowFilter::set_allocated_column_qualifier_regex_filter(std::string* column_qualifier_regex_filter) {
  if (has_filter()) {
    clear_filter();
  }
  if (column_qualifier_regex_filter != nullptr) {
    set_has_column_qualifier_regex_filter();
    filter_.column_qualifier_regex_filter_.UnsafeSetDefault(column_qualifier_regex_filter);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(column_qualifier_regex_filter);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.RowFilter.column_qualifier_regex_filter)
}

// .google.bigtable.v2.ColumnRange column_range_filter = 7;
inline bool RowFilter::_internal_has_column_range_filter() const {
  return filter_case() == kColumnRangeFilter;
}
inline bool RowFilter::has_column_range_filter() const {
  return _internal_has_column_range_filter();
}
inline void RowFilter::set_has_column_range_filter() {
  _oneof_case_[0] = kColumnRangeFilter;
}
inline void RowFilter::clear_column_range_filter() {
  if (_internal_has_column_range_filter()) {
    if (GetArena() == nullptr) {
      delete filter_.column_range_filter_;
    }
    clear_has_filter();
  }
}
inline ::google::bigtable::v2::ColumnRange* RowFilter::release_column_range_filter() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.RowFilter.column_range_filter)
  if (_internal_has_column_range_filter()) {
    clear_has_filter();
      ::google::bigtable::v2::ColumnRange* temp = filter_.column_range_filter_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    filter_.column_range_filter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::bigtable::v2::ColumnRange& RowFilter::_internal_column_range_filter() const {
  return _internal_has_column_range_filter()
      ? *filter_.column_range_filter_
      : reinterpret_cast< ::google::bigtable::v2::ColumnRange&>(::google::bigtable::v2::_ColumnRange_default_instance_);
}
inline const ::google::bigtable::v2::ColumnRange& RowFilter::column_range_filter() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.RowFilter.column_range_filter)
  return _internal_column_range_filter();
}
inline ::google::bigtable::v2::ColumnRange* RowFilter::unsafe_arena_release_column_range_filter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.bigtable.v2.RowFilter.column_range_filter)
  if (_internal_has_column_range_filter()) {
    clear_has_filter();
    ::google::bigtable::v2::ColumnRange* temp = filter_.column_range_filter_;
    filter_.column_range_filter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RowFilter::unsafe_arena_set_allocated_column_range_filter(::google::bigtable::v2::ColumnRange* column_range_filter) {
  clear_filter();
  if (column_range_filter) {
    set_has_column_range_filter();
    filter_.column_range_filter_ = column_range_filter;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.v2.RowFilter.column_range_filter)
}
inline ::google::bigtable::v2::ColumnRange* RowFilter::_internal_mutable_column_range_filter() {
  if (!_internal_has_column_range_filter()) {
    clear_filter();
    set_has_column_range_filter();
    filter_.column_range_filter_ = CreateMaybeMessage< ::google::bigtable::v2::ColumnRange >(GetArena());
  }
  return filter_.column_range_filter_;
}
inline ::google::bigtable::v2::ColumnRange* RowFilter::mutable_column_range_filter() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.RowFilter.column_range_filter)
  return _internal_mutable_column_range_filter();
}

// .google.bigtable.v2.TimestampRange timestamp_range_filter = 8;
inline bool RowFilter::_internal_has_timestamp_range_filter() const {
  return filter_case() == kTimestampRangeFilter;
}
inline bool RowFilter::has_timestamp_range_filter() const {
  return _internal_has_timestamp_range_filter();
}
inline void RowFilter::set_has_timestamp_range_filter() {
  _oneof_case_[0] = kTimestampRangeFilter;
}
inline void RowFilter::clear_timestamp_range_filter() {
  if (_internal_has_timestamp_range_filter()) {
    if (GetArena() == nullptr) {
      delete filter_.timestamp_range_filter_;
    }
    clear_has_filter();
  }
}
inline ::google::bigtable::v2::TimestampRange* RowFilter::release_timestamp_range_filter() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.RowFilter.timestamp_range_filter)
  if (_internal_has_timestamp_range_filter()) {
    clear_has_filter();
      ::google::bigtable::v2::TimestampRange* temp = filter_.timestamp_range_filter_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    filter_.timestamp_range_filter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::bigtable::v2::TimestampRange& RowFilter::_internal_timestamp_range_filter() const {
  return _internal_has_timestamp_range_filter()
      ? *filter_.timestamp_range_filter_
      : reinterpret_cast< ::google::bigtable::v2::TimestampRange&>(::google::bigtable::v2::_TimestampRange_default_instance_);
}
inline const ::google::bigtable::v2::TimestampRange& RowFilter::timestamp_range_filter() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.RowFilter.timestamp_range_filter)
  return _internal_timestamp_range_filter();
}
inline ::google::bigtable::v2::TimestampRange* RowFilter::unsafe_arena_release_timestamp_range_filter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.bigtable.v2.RowFilter.timestamp_range_filter)
  if (_internal_has_timestamp_range_filter()) {
    clear_has_filter();
    ::google::bigtable::v2::TimestampRange* temp = filter_.timestamp_range_filter_;
    filter_.timestamp_range_filter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RowFilter::unsafe_arena_set_allocated_timestamp_range_filter(::google::bigtable::v2::TimestampRange* timestamp_range_filter) {
  clear_filter();
  if (timestamp_range_filter) {
    set_has_timestamp_range_filter();
    filter_.timestamp_range_filter_ = timestamp_range_filter;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.v2.RowFilter.timestamp_range_filter)
}
inline ::google::bigtable::v2::TimestampRange* RowFilter::_internal_mutable_timestamp_range_filter() {
  if (!_internal_has_timestamp_range_filter()) {
    clear_filter();
    set_has_timestamp_range_filter();
    filter_.timestamp_range_filter_ = CreateMaybeMessage< ::google::bigtable::v2::TimestampRange >(GetArena());
  }
  return filter_.timestamp_range_filter_;
}
inline ::google::bigtable::v2::TimestampRange* RowFilter::mutable_timestamp_range_filter() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.RowFilter.timestamp_range_filter)
  return _internal_mutable_timestamp_range_filter();
}

// bytes value_regex_filter = 9;
inline bool RowFilter::_internal_has_value_regex_filter() const {
  return filter_case() == kValueRegexFilter;
}
inline void RowFilter::set_has_value_regex_filter() {
  _oneof_case_[0] = kValueRegexFilter;
}
inline void RowFilter::clear_value_regex_filter() {
  if (_internal_has_value_regex_filter()) {
    filter_.value_regex_filter_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_filter();
  }
}
inline const std::string& RowFilter::value_regex_filter() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.RowFilter.value_regex_filter)
  return _internal_value_regex_filter();
}
inline void RowFilter::set_value_regex_filter(const std::string& value) {
  _internal_set_value_regex_filter(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.RowFilter.value_regex_filter)
}
inline std::string* RowFilter::mutable_value_regex_filter() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.RowFilter.value_regex_filter)
  return _internal_mutable_value_regex_filter();
}
inline const std::string& RowFilter::_internal_value_regex_filter() const {
  if (_internal_has_value_regex_filter()) {
    return filter_.value_regex_filter_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void RowFilter::_internal_set_value_regex_filter(const std::string& value) {
  if (!_internal_has_value_regex_filter()) {
    clear_filter();
    set_has_value_regex_filter();
    filter_.value_regex_filter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  filter_.value_regex_filter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RowFilter::set_value_regex_filter(std::string&& value) {
  // @@protoc_insertion_point(field_set:google.bigtable.v2.RowFilter.value_regex_filter)
  if (!_internal_has_value_regex_filter()) {
    clear_filter();
    set_has_value_regex_filter();
    filter_.value_regex_filter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  filter_.value_regex_filter_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.v2.RowFilter.value_regex_filter)
}
inline void RowFilter::set_value_regex_filter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_value_regex_filter()) {
    clear_filter();
    set_has_value_regex_filter();
    filter_.value_regex_filter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  filter_.value_regex_filter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.RowFilter.value_regex_filter)
}
inline void RowFilter::set_value_regex_filter(const void* value,
                             size_t size) {
  if (!_internal_has_value_regex_filter()) {
    clear_filter();
    set_has_value_regex_filter();
    filter_.value_regex_filter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  filter_.value_regex_filter_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.RowFilter.value_regex_filter)
}
inline std::string* RowFilter::_internal_mutable_value_regex_filter() {
  if (!_internal_has_value_regex_filter()) {
    clear_filter();
    set_has_value_regex_filter();
    filter_.value_regex_filter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return filter_.value_regex_filter_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RowFilter::release_value_regex_filter() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.RowFilter.value_regex_filter)
  if (_internal_has_value_regex_filter()) {
    clear_has_filter();
    return filter_.value_regex_filter_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void RowFilter::set_allocated_value_regex_filter(std::string* value_regex_filter) {
  if (has_filter()) {
    clear_filter();
  }
  if (value_regex_filter != nullptr) {
    set_has_value_regex_filter();
    filter_.value_regex_filter_.UnsafeSetDefault(value_regex_filter);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(value_regex_filter);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.RowFilter.value_regex_filter)
}

// .google.bigtable.v2.ValueRange value_range_filter = 15;
inline bool RowFilter::_internal_has_value_range_filter() const {
  return filter_case() == kValueRangeFilter;
}
inline bool RowFilter::has_value_range_filter() const {
  return _internal_has_value_range_filter();
}
inline void RowFilter::set_has_value_range_filter() {
  _oneof_case_[0] = kValueRangeFilter;
}
inline void RowFilter::clear_value_range_filter() {
  if (_internal_has_value_range_filter()) {
    if (GetArena() == nullptr) {
      delete filter_.value_range_filter_;
    }
    clear_has_filter();
  }
}
inline ::google::bigtable::v2::ValueRange* RowFilter::release_value_range_filter() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.RowFilter.value_range_filter)
  if (_internal_has_value_range_filter()) {
    clear_has_filter();
      ::google::bigtable::v2::ValueRange* temp = filter_.value_range_filter_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    filter_.value_range_filter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::bigtable::v2::ValueRange& RowFilter::_internal_value_range_filter() const {
  return _internal_has_value_range_filter()
      ? *filter_.value_range_filter_
      : reinterpret_cast< ::google::bigtable::v2::ValueRange&>(::google::bigtable::v2::_ValueRange_default_instance_);
}
inline const ::google::bigtable::v2::ValueRange& RowFilter::value_range_filter() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.RowFilter.value_range_filter)
  return _internal_value_range_filter();
}
inline ::google::bigtable::v2::ValueRange* RowFilter::unsafe_arena_release_value_range_filter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.bigtable.v2.RowFilter.value_range_filter)
  if (_internal_has_value_range_filter()) {
    clear_has_filter();
    ::google::bigtable::v2::ValueRange* temp = filter_.value_range_filter_;
    filter_.value_range_filter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RowFilter::unsafe_arena_set_allocated_value_range_filter(::google::bigtable::v2::ValueRange* value_range_filter) {
  clear_filter();
  if (value_range_filter) {
    set_has_value_range_filter();
    filter_.value_range_filter_ = value_range_filter;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.v2.RowFilter.value_range_filter)
}
inline ::google::bigtable::v2::ValueRange* RowFilter::_internal_mutable_value_range_filter() {
  if (!_internal_has_value_range_filter()) {
    clear_filter();
    set_has_value_range_filter();
    filter_.value_range_filter_ = CreateMaybeMessage< ::google::bigtable::v2::ValueRange >(GetArena());
  }
  return filter_.value_range_filter_;
}
inline ::google::bigtable::v2::ValueRange* RowFilter::mutable_value_range_filter() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.RowFilter.value_range_filter)
  return _internal_mutable_value_range_filter();
}

// int32 cells_per_row_offset_filter = 10;
inline bool RowFilter::_internal_has_cells_per_row_offset_filter() const {
  return filter_case() == kCellsPerRowOffsetFilter;
}
inline void RowFilter::set_has_cells_per_row_offset_filter() {
  _oneof_case_[0] = kCellsPerRowOffsetFilter;
}
inline void RowFilter::clear_cells_per_row_offset_filter() {
  if (_internal_has_cells_per_row_offset_filter()) {
    filter_.cells_per_row_offset_filter_ = 0;
    clear_has_filter();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RowFilter::_internal_cells_per_row_offset_filter() const {
  if (_internal_has_cells_per_row_offset_filter()) {
    return filter_.cells_per_row_offset_filter_;
  }
  return 0;
}
inline void RowFilter::_internal_set_cells_per_row_offset_filter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_cells_per_row_offset_filter()) {
    clear_filter();
    set_has_cells_per_row_offset_filter();
  }
  filter_.cells_per_row_offset_filter_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RowFilter::cells_per_row_offset_filter() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.RowFilter.cells_per_row_offset_filter)
  return _internal_cells_per_row_offset_filter();
}
inline void RowFilter::set_cells_per_row_offset_filter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cells_per_row_offset_filter(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.RowFilter.cells_per_row_offset_filter)
}

// int32 cells_per_row_limit_filter = 11;
inline bool RowFilter::_internal_has_cells_per_row_limit_filter() const {
  return filter_case() == kCellsPerRowLimitFilter;
}
inline void RowFilter::set_has_cells_per_row_limit_filter() {
  _oneof_case_[0] = kCellsPerRowLimitFilter;
}
inline void RowFilter::clear_cells_per_row_limit_filter() {
  if (_internal_has_cells_per_row_limit_filter()) {
    filter_.cells_per_row_limit_filter_ = 0;
    clear_has_filter();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RowFilter::_internal_cells_per_row_limit_filter() const {
  if (_internal_has_cells_per_row_limit_filter()) {
    return filter_.cells_per_row_limit_filter_;
  }
  return 0;
}
inline void RowFilter::_internal_set_cells_per_row_limit_filter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_cells_per_row_limit_filter()) {
    clear_filter();
    set_has_cells_per_row_limit_filter();
  }
  filter_.cells_per_row_limit_filter_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RowFilter::cells_per_row_limit_filter() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.RowFilter.cells_per_row_limit_filter)
  return _internal_cells_per_row_limit_filter();
}
inline void RowFilter::set_cells_per_row_limit_filter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cells_per_row_limit_filter(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.RowFilter.cells_per_row_limit_filter)
}

// int32 cells_per_column_limit_filter = 12;
inline bool RowFilter::_internal_has_cells_per_column_limit_filter() const {
  return filter_case() == kCellsPerColumnLimitFilter;
}
inline void RowFilter::set_has_cells_per_column_limit_filter() {
  _oneof_case_[0] = kCellsPerColumnLimitFilter;
}
inline void RowFilter::clear_cells_per_column_limit_filter() {
  if (_internal_has_cells_per_column_limit_filter()) {
    filter_.cells_per_column_limit_filter_ = 0;
    clear_has_filter();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RowFilter::_internal_cells_per_column_limit_filter() const {
  if (_internal_has_cells_per_column_limit_filter()) {
    return filter_.cells_per_column_limit_filter_;
  }
  return 0;
}
inline void RowFilter::_internal_set_cells_per_column_limit_filter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_cells_per_column_limit_filter()) {
    clear_filter();
    set_has_cells_per_column_limit_filter();
  }
  filter_.cells_per_column_limit_filter_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RowFilter::cells_per_column_limit_filter() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.RowFilter.cells_per_column_limit_filter)
  return _internal_cells_per_column_limit_filter();
}
inline void RowFilter::set_cells_per_column_limit_filter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cells_per_column_limit_filter(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.RowFilter.cells_per_column_limit_filter)
}

// bool strip_value_transformer = 13;
inline bool RowFilter::_internal_has_strip_value_transformer() const {
  return filter_case() == kStripValueTransformer;
}
inline void RowFilter::set_has_strip_value_transformer() {
  _oneof_case_[0] = kStripValueTransformer;
}
inline void RowFilter::clear_strip_value_transformer() {
  if (_internal_has_strip_value_transformer()) {
    filter_.strip_value_transformer_ = false;
    clear_has_filter();
  }
}
inline bool RowFilter::_internal_strip_value_transformer() const {
  if (_internal_has_strip_value_transformer()) {
    return filter_.strip_value_transformer_;
  }
  return false;
}
inline void RowFilter::_internal_set_strip_value_transformer(bool value) {
  if (!_internal_has_strip_value_transformer()) {
    clear_filter();
    set_has_strip_value_transformer();
  }
  filter_.strip_value_transformer_ = value;
}
inline bool RowFilter::strip_value_transformer() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.RowFilter.strip_value_transformer)
  return _internal_strip_value_transformer();
}
inline void RowFilter::set_strip_value_transformer(bool value) {
  _internal_set_strip_value_transformer(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.RowFilter.strip_value_transformer)
}

// string apply_label_transformer = 19;
inline bool RowFilter::_internal_has_apply_label_transformer() const {
  return filter_case() == kApplyLabelTransformer;
}
inline void RowFilter::set_has_apply_label_transformer() {
  _oneof_case_[0] = kApplyLabelTransformer;
}
inline void RowFilter::clear_apply_label_transformer() {
  if (_internal_has_apply_label_transformer()) {
    filter_.apply_label_transformer_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_filter();
  }
}
inline const std::string& RowFilter::apply_label_transformer() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.RowFilter.apply_label_transformer)
  return _internal_apply_label_transformer();
}
inline void RowFilter::set_apply_label_transformer(const std::string& value) {
  _internal_set_apply_label_transformer(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.RowFilter.apply_label_transformer)
}
inline std::string* RowFilter::mutable_apply_label_transformer() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.RowFilter.apply_label_transformer)
  return _internal_mutable_apply_label_transformer();
}
inline const std::string& RowFilter::_internal_apply_label_transformer() const {
  if (_internal_has_apply_label_transformer()) {
    return filter_.apply_label_transformer_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void RowFilter::_internal_set_apply_label_transformer(const std::string& value) {
  if (!_internal_has_apply_label_transformer()) {
    clear_filter();
    set_has_apply_label_transformer();
    filter_.apply_label_transformer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  filter_.apply_label_transformer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RowFilter::set_apply_label_transformer(std::string&& value) {
  // @@protoc_insertion_point(field_set:google.bigtable.v2.RowFilter.apply_label_transformer)
  if (!_internal_has_apply_label_transformer()) {
    clear_filter();
    set_has_apply_label_transformer();
    filter_.apply_label_transformer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  filter_.apply_label_transformer_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.v2.RowFilter.apply_label_transformer)
}
inline void RowFilter::set_apply_label_transformer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_apply_label_transformer()) {
    clear_filter();
    set_has_apply_label_transformer();
    filter_.apply_label_transformer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  filter_.apply_label_transformer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.RowFilter.apply_label_transformer)
}
inline void RowFilter::set_apply_label_transformer(const char* value,
                             size_t size) {
  if (!_internal_has_apply_label_transformer()) {
    clear_filter();
    set_has_apply_label_transformer();
    filter_.apply_label_transformer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  filter_.apply_label_transformer_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.RowFilter.apply_label_transformer)
}
inline std::string* RowFilter::_internal_mutable_apply_label_transformer() {
  if (!_internal_has_apply_label_transformer()) {
    clear_filter();
    set_has_apply_label_transformer();
    filter_.apply_label_transformer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return filter_.apply_label_transformer_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RowFilter::release_apply_label_transformer() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.RowFilter.apply_label_transformer)
  if (_internal_has_apply_label_transformer()) {
    clear_has_filter();
    return filter_.apply_label_transformer_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void RowFilter::set_allocated_apply_label_transformer(std::string* apply_label_transformer) {
  if (has_filter()) {
    clear_filter();
  }
  if (apply_label_transformer != nullptr) {
    set_has_apply_label_transformer();
    filter_.apply_label_transformer_.UnsafeSetDefault(apply_label_transformer);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(apply_label_transformer);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.RowFilter.apply_label_transformer)
}

inline bool RowFilter::has_filter() const {
  return filter_case() != FILTER_NOT_SET;
}
inline void RowFilter::clear_has_filter() {
  _oneof_case_[0] = FILTER_NOT_SET;
}
inline RowFilter::FilterCase RowFilter::filter_case() const {
  return RowFilter::FilterCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Mutation_SetCell

// string family_name = 1;
inline void Mutation_SetCell::clear_family_name() {
  family_name_.ClearToEmpty();
}
inline const std::string& Mutation_SetCell::family_name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.Mutation.SetCell.family_name)
  return _internal_family_name();
}
inline void Mutation_SetCell::set_family_name(const std::string& value) {
  _internal_set_family_name(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.Mutation.SetCell.family_name)
}
inline std::string* Mutation_SetCell::mutable_family_name() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.Mutation.SetCell.family_name)
  return _internal_mutable_family_name();
}
inline const std::string& Mutation_SetCell::_internal_family_name() const {
  return family_name_.Get();
}
inline void Mutation_SetCell::_internal_set_family_name(const std::string& value) {
  
  family_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Mutation_SetCell::set_family_name(std::string&& value) {
  
  family_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.v2.Mutation.SetCell.family_name)
}
inline void Mutation_SetCell::set_family_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  family_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.Mutation.SetCell.family_name)
}
inline void Mutation_SetCell::set_family_name(const char* value,
    size_t size) {
  
  family_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.Mutation.SetCell.family_name)
}
inline std::string* Mutation_SetCell::_internal_mutable_family_name() {
  
  return family_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Mutation_SetCell::release_family_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.Mutation.SetCell.family_name)
  return family_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Mutation_SetCell::set_allocated_family_name(std::string* family_name) {
  if (family_name != nullptr) {
    
  } else {
    
  }
  family_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), family_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.Mutation.SetCell.family_name)
}

// bytes column_qualifier = 2;
inline void Mutation_SetCell::clear_column_qualifier() {
  column_qualifier_.ClearToEmpty();
}
inline const std::string& Mutation_SetCell::column_qualifier() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.Mutation.SetCell.column_qualifier)
  return _internal_column_qualifier();
}
inline void Mutation_SetCell::set_column_qualifier(const std::string& value) {
  _internal_set_column_qualifier(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.Mutation.SetCell.column_qualifier)
}
inline std::string* Mutation_SetCell::mutable_column_qualifier() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.Mutation.SetCell.column_qualifier)
  return _internal_mutable_column_qualifier();
}
inline const std::string& Mutation_SetCell::_internal_column_qualifier() const {
  return column_qualifier_.Get();
}
inline void Mutation_SetCell::_internal_set_column_qualifier(const std::string& value) {
  
  column_qualifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Mutation_SetCell::set_column_qualifier(std::string&& value) {
  
  column_qualifier_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.v2.Mutation.SetCell.column_qualifier)
}
inline void Mutation_SetCell::set_column_qualifier(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  column_qualifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.Mutation.SetCell.column_qualifier)
}
inline void Mutation_SetCell::set_column_qualifier(const void* value,
    size_t size) {
  
  column_qualifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.Mutation.SetCell.column_qualifier)
}
inline std::string* Mutation_SetCell::_internal_mutable_column_qualifier() {
  
  return column_qualifier_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Mutation_SetCell::release_column_qualifier() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.Mutation.SetCell.column_qualifier)
  return column_qualifier_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Mutation_SetCell::set_allocated_column_qualifier(std::string* column_qualifier) {
  if (column_qualifier != nullptr) {
    
  } else {
    
  }
  column_qualifier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), column_qualifier,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.Mutation.SetCell.column_qualifier)
}

// int64 timestamp_micros = 3;
inline void Mutation_SetCell::clear_timestamp_micros() {
  timestamp_micros_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Mutation_SetCell::_internal_timestamp_micros() const {
  return timestamp_micros_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Mutation_SetCell::timestamp_micros() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.Mutation.SetCell.timestamp_micros)
  return _internal_timestamp_micros();
}
inline void Mutation_SetCell::_internal_set_timestamp_micros(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_micros_ = value;
}
inline void Mutation_SetCell::set_timestamp_micros(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp_micros(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.Mutation.SetCell.timestamp_micros)
}

// bytes value = 4;
inline void Mutation_SetCell::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& Mutation_SetCell::value() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.Mutation.SetCell.value)
  return _internal_value();
}
inline void Mutation_SetCell::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.Mutation.SetCell.value)
}
inline std::string* Mutation_SetCell::mutable_value() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.Mutation.SetCell.value)
  return _internal_mutable_value();
}
inline const std::string& Mutation_SetCell::_internal_value() const {
  return value_.Get();
}
inline void Mutation_SetCell::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Mutation_SetCell::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.v2.Mutation.SetCell.value)
}
inline void Mutation_SetCell::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.Mutation.SetCell.value)
}
inline void Mutation_SetCell::set_value(const void* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.Mutation.SetCell.value)
}
inline std::string* Mutation_SetCell::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Mutation_SetCell::release_value() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.Mutation.SetCell.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Mutation_SetCell::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.Mutation.SetCell.value)
}

// -------------------------------------------------------------------

// Mutation_DeleteFromColumn

// string family_name = 1;
inline void Mutation_DeleteFromColumn::clear_family_name() {
  family_name_.ClearToEmpty();
}
inline const std::string& Mutation_DeleteFromColumn::family_name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.Mutation.DeleteFromColumn.family_name)
  return _internal_family_name();
}
inline void Mutation_DeleteFromColumn::set_family_name(const std::string& value) {
  _internal_set_family_name(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.Mutation.DeleteFromColumn.family_name)
}
inline std::string* Mutation_DeleteFromColumn::mutable_family_name() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.Mutation.DeleteFromColumn.family_name)
  return _internal_mutable_family_name();
}
inline const std::string& Mutation_DeleteFromColumn::_internal_family_name() const {
  return family_name_.Get();
}
inline void Mutation_DeleteFromColumn::_internal_set_family_name(const std::string& value) {
  
  family_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Mutation_DeleteFromColumn::set_family_name(std::string&& value) {
  
  family_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.v2.Mutation.DeleteFromColumn.family_name)
}
inline void Mutation_DeleteFromColumn::set_family_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  family_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.Mutation.DeleteFromColumn.family_name)
}
inline void Mutation_DeleteFromColumn::set_family_name(const char* value,
    size_t size) {
  
  family_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.Mutation.DeleteFromColumn.family_name)
}
inline std::string* Mutation_DeleteFromColumn::_internal_mutable_family_name() {
  
  return family_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Mutation_DeleteFromColumn::release_family_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.Mutation.DeleteFromColumn.family_name)
  return family_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Mutation_DeleteFromColumn::set_allocated_family_name(std::string* family_name) {
  if (family_name != nullptr) {
    
  } else {
    
  }
  family_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), family_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.Mutation.DeleteFromColumn.family_name)
}

// bytes column_qualifier = 2;
inline void Mutation_DeleteFromColumn::clear_column_qualifier() {
  column_qualifier_.ClearToEmpty();
}
inline const std::string& Mutation_DeleteFromColumn::column_qualifier() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.Mutation.DeleteFromColumn.column_qualifier)
  return _internal_column_qualifier();
}
inline void Mutation_DeleteFromColumn::set_column_qualifier(const std::string& value) {
  _internal_set_column_qualifier(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.Mutation.DeleteFromColumn.column_qualifier)
}
inline std::string* Mutation_DeleteFromColumn::mutable_column_qualifier() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.Mutation.DeleteFromColumn.column_qualifier)
  return _internal_mutable_column_qualifier();
}
inline const std::string& Mutation_DeleteFromColumn::_internal_column_qualifier() const {
  return column_qualifier_.Get();
}
inline void Mutation_DeleteFromColumn::_internal_set_column_qualifier(const std::string& value) {
  
  column_qualifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Mutation_DeleteFromColumn::set_column_qualifier(std::string&& value) {
  
  column_qualifier_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.v2.Mutation.DeleteFromColumn.column_qualifier)
}
inline void Mutation_DeleteFromColumn::set_column_qualifier(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  column_qualifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.Mutation.DeleteFromColumn.column_qualifier)
}
inline void Mutation_DeleteFromColumn::set_column_qualifier(const void* value,
    size_t size) {
  
  column_qualifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.Mutation.DeleteFromColumn.column_qualifier)
}
inline std::string* Mutation_DeleteFromColumn::_internal_mutable_column_qualifier() {
  
  return column_qualifier_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Mutation_DeleteFromColumn::release_column_qualifier() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.Mutation.DeleteFromColumn.column_qualifier)
  return column_qualifier_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Mutation_DeleteFromColumn::set_allocated_column_qualifier(std::string* column_qualifier) {
  if (column_qualifier != nullptr) {
    
  } else {
    
  }
  column_qualifier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), column_qualifier,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.Mutation.DeleteFromColumn.column_qualifier)
}

// .google.bigtable.v2.TimestampRange time_range = 3;
inline bool Mutation_DeleteFromColumn::_internal_has_time_range() const {
  return this != internal_default_instance() && time_range_ != nullptr;
}
inline bool Mutation_DeleteFromColumn::has_time_range() const {
  return _internal_has_time_range();
}
inline void Mutation_DeleteFromColumn::clear_time_range() {
  if (GetArena() == nullptr && time_range_ != nullptr) {
    delete time_range_;
  }
  time_range_ = nullptr;
}
inline const ::google::bigtable::v2::TimestampRange& Mutation_DeleteFromColumn::_internal_time_range() const {
  const ::google::bigtable::v2::TimestampRange* p = time_range_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::bigtable::v2::TimestampRange&>(
      ::google::bigtable::v2::_TimestampRange_default_instance_);
}
inline const ::google::bigtable::v2::TimestampRange& Mutation_DeleteFromColumn::time_range() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.Mutation.DeleteFromColumn.time_range)
  return _internal_time_range();
}
inline void Mutation_DeleteFromColumn::unsafe_arena_set_allocated_time_range(
    ::google::bigtable::v2::TimestampRange* time_range) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_range_);
  }
  time_range_ = time_range;
  if (time_range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.v2.Mutation.DeleteFromColumn.time_range)
}
inline ::google::bigtable::v2::TimestampRange* Mutation_DeleteFromColumn::release_time_range() {
  
  ::google::bigtable::v2::TimestampRange* temp = time_range_;
  time_range_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::bigtable::v2::TimestampRange* Mutation_DeleteFromColumn::unsafe_arena_release_time_range() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.Mutation.DeleteFromColumn.time_range)
  
  ::google::bigtable::v2::TimestampRange* temp = time_range_;
  time_range_ = nullptr;
  return temp;
}
inline ::google::bigtable::v2::TimestampRange* Mutation_DeleteFromColumn::_internal_mutable_time_range() {
  
  if (time_range_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::bigtable::v2::TimestampRange>(GetArena());
    time_range_ = p;
  }
  return time_range_;
}
inline ::google::bigtable::v2::TimestampRange* Mutation_DeleteFromColumn::mutable_time_range() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.Mutation.DeleteFromColumn.time_range)
  return _internal_mutable_time_range();
}
inline void Mutation_DeleteFromColumn::set_allocated_time_range(::google::bigtable::v2::TimestampRange* time_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete time_range_;
  }
  if (time_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(time_range);
    if (message_arena != submessage_arena) {
      time_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_range, submessage_arena);
    }
    
  } else {
    
  }
  time_range_ = time_range;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.Mutation.DeleteFromColumn.time_range)
}

// -------------------------------------------------------------------

// Mutation_DeleteFromFamily

// string family_name = 1;
inline void Mutation_DeleteFromFamily::clear_family_name() {
  family_name_.ClearToEmpty();
}
inline const std::string& Mutation_DeleteFromFamily::family_name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.Mutation.DeleteFromFamily.family_name)
  return _internal_family_name();
}
inline void Mutation_DeleteFromFamily::set_family_name(const std::string& value) {
  _internal_set_family_name(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.Mutation.DeleteFromFamily.family_name)
}
inline std::string* Mutation_DeleteFromFamily::mutable_family_name() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.Mutation.DeleteFromFamily.family_name)
  return _internal_mutable_family_name();
}
inline const std::string& Mutation_DeleteFromFamily::_internal_family_name() const {
  return family_name_.Get();
}
inline void Mutation_DeleteFromFamily::_internal_set_family_name(const std::string& value) {
  
  family_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Mutation_DeleteFromFamily::set_family_name(std::string&& value) {
  
  family_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.v2.Mutation.DeleteFromFamily.family_name)
}
inline void Mutation_DeleteFromFamily::set_family_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  family_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.Mutation.DeleteFromFamily.family_name)
}
inline void Mutation_DeleteFromFamily::set_family_name(const char* value,
    size_t size) {
  
  family_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.Mutation.DeleteFromFamily.family_name)
}
inline std::string* Mutation_DeleteFromFamily::_internal_mutable_family_name() {
  
  return family_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Mutation_DeleteFromFamily::release_family_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.Mutation.DeleteFromFamily.family_name)
  return family_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Mutation_DeleteFromFamily::set_allocated_family_name(std::string* family_name) {
  if (family_name != nullptr) {
    
  } else {
    
  }
  family_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), family_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.Mutation.DeleteFromFamily.family_name)
}

// -------------------------------------------------------------------

// Mutation_DeleteFromRow

// -------------------------------------------------------------------

// Mutation

// .google.bigtable.v2.Mutation.SetCell set_cell = 1;
inline bool Mutation::_internal_has_set_cell() const {
  return mutation_case() == kSetCell;
}
inline bool Mutation::has_set_cell() const {
  return _internal_has_set_cell();
}
inline void Mutation::set_has_set_cell() {
  _oneof_case_[0] = kSetCell;
}
inline void Mutation::clear_set_cell() {
  if (_internal_has_set_cell()) {
    if (GetArena() == nullptr) {
      delete mutation_.set_cell_;
    }
    clear_has_mutation();
  }
}
inline ::google::bigtable::v2::Mutation_SetCell* Mutation::release_set_cell() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.Mutation.set_cell)
  if (_internal_has_set_cell()) {
    clear_has_mutation();
      ::google::bigtable::v2::Mutation_SetCell* temp = mutation_.set_cell_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    mutation_.set_cell_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::bigtable::v2::Mutation_SetCell& Mutation::_internal_set_cell() const {
  return _internal_has_set_cell()
      ? *mutation_.set_cell_
      : reinterpret_cast< ::google::bigtable::v2::Mutation_SetCell&>(::google::bigtable::v2::_Mutation_SetCell_default_instance_);
}
inline const ::google::bigtable::v2::Mutation_SetCell& Mutation::set_cell() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.Mutation.set_cell)
  return _internal_set_cell();
}
inline ::google::bigtable::v2::Mutation_SetCell* Mutation::unsafe_arena_release_set_cell() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.bigtable.v2.Mutation.set_cell)
  if (_internal_has_set_cell()) {
    clear_has_mutation();
    ::google::bigtable::v2::Mutation_SetCell* temp = mutation_.set_cell_;
    mutation_.set_cell_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Mutation::unsafe_arena_set_allocated_set_cell(::google::bigtable::v2::Mutation_SetCell* set_cell) {
  clear_mutation();
  if (set_cell) {
    set_has_set_cell();
    mutation_.set_cell_ = set_cell;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.v2.Mutation.set_cell)
}
inline ::google::bigtable::v2::Mutation_SetCell* Mutation::_internal_mutable_set_cell() {
  if (!_internal_has_set_cell()) {
    clear_mutation();
    set_has_set_cell();
    mutation_.set_cell_ = CreateMaybeMessage< ::google::bigtable::v2::Mutation_SetCell >(GetArena());
  }
  return mutation_.set_cell_;
}
inline ::google::bigtable::v2::Mutation_SetCell* Mutation::mutable_set_cell() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.Mutation.set_cell)
  return _internal_mutable_set_cell();
}

// .google.bigtable.v2.Mutation.DeleteFromColumn delete_from_column = 2;
inline bool Mutation::_internal_has_delete_from_column() const {
  return mutation_case() == kDeleteFromColumn;
}
inline bool Mutation::has_delete_from_column() const {
  return _internal_has_delete_from_column();
}
inline void Mutation::set_has_delete_from_column() {
  _oneof_case_[0] = kDeleteFromColumn;
}
inline void Mutation::clear_delete_from_column() {
  if (_internal_has_delete_from_column()) {
    if (GetArena() == nullptr) {
      delete mutation_.delete_from_column_;
    }
    clear_has_mutation();
  }
}
inline ::google::bigtable::v2::Mutation_DeleteFromColumn* Mutation::release_delete_from_column() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.Mutation.delete_from_column)
  if (_internal_has_delete_from_column()) {
    clear_has_mutation();
      ::google::bigtable::v2::Mutation_DeleteFromColumn* temp = mutation_.delete_from_column_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    mutation_.delete_from_column_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::bigtable::v2::Mutation_DeleteFromColumn& Mutation::_internal_delete_from_column() const {
  return _internal_has_delete_from_column()
      ? *mutation_.delete_from_column_
      : reinterpret_cast< ::google::bigtable::v2::Mutation_DeleteFromColumn&>(::google::bigtable::v2::_Mutation_DeleteFromColumn_default_instance_);
}
inline const ::google::bigtable::v2::Mutation_DeleteFromColumn& Mutation::delete_from_column() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.Mutation.delete_from_column)
  return _internal_delete_from_column();
}
inline ::google::bigtable::v2::Mutation_DeleteFromColumn* Mutation::unsafe_arena_release_delete_from_column() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.bigtable.v2.Mutation.delete_from_column)
  if (_internal_has_delete_from_column()) {
    clear_has_mutation();
    ::google::bigtable::v2::Mutation_DeleteFromColumn* temp = mutation_.delete_from_column_;
    mutation_.delete_from_column_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Mutation::unsafe_arena_set_allocated_delete_from_column(::google::bigtable::v2::Mutation_DeleteFromColumn* delete_from_column) {
  clear_mutation();
  if (delete_from_column) {
    set_has_delete_from_column();
    mutation_.delete_from_column_ = delete_from_column;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.v2.Mutation.delete_from_column)
}
inline ::google::bigtable::v2::Mutation_DeleteFromColumn* Mutation::_internal_mutable_delete_from_column() {
  if (!_internal_has_delete_from_column()) {
    clear_mutation();
    set_has_delete_from_column();
    mutation_.delete_from_column_ = CreateMaybeMessage< ::google::bigtable::v2::Mutation_DeleteFromColumn >(GetArena());
  }
  return mutation_.delete_from_column_;
}
inline ::google::bigtable::v2::Mutation_DeleteFromColumn* Mutation::mutable_delete_from_column() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.Mutation.delete_from_column)
  return _internal_mutable_delete_from_column();
}

// .google.bigtable.v2.Mutation.DeleteFromFamily delete_from_family = 3;
inline bool Mutation::_internal_has_delete_from_family() const {
  return mutation_case() == kDeleteFromFamily;
}
inline bool Mutation::has_delete_from_family() const {
  return _internal_has_delete_from_family();
}
inline void Mutation::set_has_delete_from_family() {
  _oneof_case_[0] = kDeleteFromFamily;
}
inline void Mutation::clear_delete_from_family() {
  if (_internal_has_delete_from_family()) {
    if (GetArena() == nullptr) {
      delete mutation_.delete_from_family_;
    }
    clear_has_mutation();
  }
}
inline ::google::bigtable::v2::Mutation_DeleteFromFamily* Mutation::release_delete_from_family() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.Mutation.delete_from_family)
  if (_internal_has_delete_from_family()) {
    clear_has_mutation();
      ::google::bigtable::v2::Mutation_DeleteFromFamily* temp = mutation_.delete_from_family_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    mutation_.delete_from_family_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::bigtable::v2::Mutation_DeleteFromFamily& Mutation::_internal_delete_from_family() const {
  return _internal_has_delete_from_family()
      ? *mutation_.delete_from_family_
      : reinterpret_cast< ::google::bigtable::v2::Mutation_DeleteFromFamily&>(::google::bigtable::v2::_Mutation_DeleteFromFamily_default_instance_);
}
inline const ::google::bigtable::v2::Mutation_DeleteFromFamily& Mutation::delete_from_family() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.Mutation.delete_from_family)
  return _internal_delete_from_family();
}
inline ::google::bigtable::v2::Mutation_DeleteFromFamily* Mutation::unsafe_arena_release_delete_from_family() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.bigtable.v2.Mutation.delete_from_family)
  if (_internal_has_delete_from_family()) {
    clear_has_mutation();
    ::google::bigtable::v2::Mutation_DeleteFromFamily* temp = mutation_.delete_from_family_;
    mutation_.delete_from_family_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Mutation::unsafe_arena_set_allocated_delete_from_family(::google::bigtable::v2::Mutation_DeleteFromFamily* delete_from_family) {
  clear_mutation();
  if (delete_from_family) {
    set_has_delete_from_family();
    mutation_.delete_from_family_ = delete_from_family;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.v2.Mutation.delete_from_family)
}
inline ::google::bigtable::v2::Mutation_DeleteFromFamily* Mutation::_internal_mutable_delete_from_family() {
  if (!_internal_has_delete_from_family()) {
    clear_mutation();
    set_has_delete_from_family();
    mutation_.delete_from_family_ = CreateMaybeMessage< ::google::bigtable::v2::Mutation_DeleteFromFamily >(GetArena());
  }
  return mutation_.delete_from_family_;
}
inline ::google::bigtable::v2::Mutation_DeleteFromFamily* Mutation::mutable_delete_from_family() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.Mutation.delete_from_family)
  return _internal_mutable_delete_from_family();
}

// .google.bigtable.v2.Mutation.DeleteFromRow delete_from_row = 4;
inline bool Mutation::_internal_has_delete_from_row() const {
  return mutation_case() == kDeleteFromRow;
}
inline bool Mutation::has_delete_from_row() const {
  return _internal_has_delete_from_row();
}
inline void Mutation::set_has_delete_from_row() {
  _oneof_case_[0] = kDeleteFromRow;
}
inline void Mutation::clear_delete_from_row() {
  if (_internal_has_delete_from_row()) {
    if (GetArena() == nullptr) {
      delete mutation_.delete_from_row_;
    }
    clear_has_mutation();
  }
}
inline ::google::bigtable::v2::Mutation_DeleteFromRow* Mutation::release_delete_from_row() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.Mutation.delete_from_row)
  if (_internal_has_delete_from_row()) {
    clear_has_mutation();
      ::google::bigtable::v2::Mutation_DeleteFromRow* temp = mutation_.delete_from_row_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    mutation_.delete_from_row_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::bigtable::v2::Mutation_DeleteFromRow& Mutation::_internal_delete_from_row() const {
  return _internal_has_delete_from_row()
      ? *mutation_.delete_from_row_
      : reinterpret_cast< ::google::bigtable::v2::Mutation_DeleteFromRow&>(::google::bigtable::v2::_Mutation_DeleteFromRow_default_instance_);
}
inline const ::google::bigtable::v2::Mutation_DeleteFromRow& Mutation::delete_from_row() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.Mutation.delete_from_row)
  return _internal_delete_from_row();
}
inline ::google::bigtable::v2::Mutation_DeleteFromRow* Mutation::unsafe_arena_release_delete_from_row() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.bigtable.v2.Mutation.delete_from_row)
  if (_internal_has_delete_from_row()) {
    clear_has_mutation();
    ::google::bigtable::v2::Mutation_DeleteFromRow* temp = mutation_.delete_from_row_;
    mutation_.delete_from_row_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Mutation::unsafe_arena_set_allocated_delete_from_row(::google::bigtable::v2::Mutation_DeleteFromRow* delete_from_row) {
  clear_mutation();
  if (delete_from_row) {
    set_has_delete_from_row();
    mutation_.delete_from_row_ = delete_from_row;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.v2.Mutation.delete_from_row)
}
inline ::google::bigtable::v2::Mutation_DeleteFromRow* Mutation::_internal_mutable_delete_from_row() {
  if (!_internal_has_delete_from_row()) {
    clear_mutation();
    set_has_delete_from_row();
    mutation_.delete_from_row_ = CreateMaybeMessage< ::google::bigtable::v2::Mutation_DeleteFromRow >(GetArena());
  }
  return mutation_.delete_from_row_;
}
inline ::google::bigtable::v2::Mutation_DeleteFromRow* Mutation::mutable_delete_from_row() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.Mutation.delete_from_row)
  return _internal_mutable_delete_from_row();
}

inline bool Mutation::has_mutation() const {
  return mutation_case() != MUTATION_NOT_SET;
}
inline void Mutation::clear_has_mutation() {
  _oneof_case_[0] = MUTATION_NOT_SET;
}
inline Mutation::MutationCase Mutation::mutation_case() const {
  return Mutation::MutationCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ReadModifyWriteRule

// string family_name = 1;
inline void ReadModifyWriteRule::clear_family_name() {
  family_name_.ClearToEmpty();
}
inline const std::string& ReadModifyWriteRule::family_name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadModifyWriteRule.family_name)
  return _internal_family_name();
}
inline void ReadModifyWriteRule::set_family_name(const std::string& value) {
  _internal_set_family_name(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadModifyWriteRule.family_name)
}
inline std::string* ReadModifyWriteRule::mutable_family_name() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadModifyWriteRule.family_name)
  return _internal_mutable_family_name();
}
inline const std::string& ReadModifyWriteRule::_internal_family_name() const {
  return family_name_.Get();
}
inline void ReadModifyWriteRule::_internal_set_family_name(const std::string& value) {
  
  family_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReadModifyWriteRule::set_family_name(std::string&& value) {
  
  family_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.v2.ReadModifyWriteRule.family_name)
}
inline void ReadModifyWriteRule::set_family_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  family_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.ReadModifyWriteRule.family_name)
}
inline void ReadModifyWriteRule::set_family_name(const char* value,
    size_t size) {
  
  family_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.ReadModifyWriteRule.family_name)
}
inline std::string* ReadModifyWriteRule::_internal_mutable_family_name() {
  
  return family_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReadModifyWriteRule::release_family_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ReadModifyWriteRule.family_name)
  return family_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReadModifyWriteRule::set_allocated_family_name(std::string* family_name) {
  if (family_name != nullptr) {
    
  } else {
    
  }
  family_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), family_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ReadModifyWriteRule.family_name)
}

// bytes column_qualifier = 2;
inline void ReadModifyWriteRule::clear_column_qualifier() {
  column_qualifier_.ClearToEmpty();
}
inline const std::string& ReadModifyWriteRule::column_qualifier() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadModifyWriteRule.column_qualifier)
  return _internal_column_qualifier();
}
inline void ReadModifyWriteRule::set_column_qualifier(const std::string& value) {
  _internal_set_column_qualifier(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadModifyWriteRule.column_qualifier)
}
inline std::string* ReadModifyWriteRule::mutable_column_qualifier() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadModifyWriteRule.column_qualifier)
  return _internal_mutable_column_qualifier();
}
inline const std::string& ReadModifyWriteRule::_internal_column_qualifier() const {
  return column_qualifier_.Get();
}
inline void ReadModifyWriteRule::_internal_set_column_qualifier(const std::string& value) {
  
  column_qualifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReadModifyWriteRule::set_column_qualifier(std::string&& value) {
  
  column_qualifier_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.v2.ReadModifyWriteRule.column_qualifier)
}
inline void ReadModifyWriteRule::set_column_qualifier(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  column_qualifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.ReadModifyWriteRule.column_qualifier)
}
inline void ReadModifyWriteRule::set_column_qualifier(const void* value,
    size_t size) {
  
  column_qualifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.ReadModifyWriteRule.column_qualifier)
}
inline std::string* ReadModifyWriteRule::_internal_mutable_column_qualifier() {
  
  return column_qualifier_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReadModifyWriteRule::release_column_qualifier() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ReadModifyWriteRule.column_qualifier)
  return column_qualifier_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReadModifyWriteRule::set_allocated_column_qualifier(std::string* column_qualifier) {
  if (column_qualifier != nullptr) {
    
  } else {
    
  }
  column_qualifier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), column_qualifier,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ReadModifyWriteRule.column_qualifier)
}

// bytes append_value = 3;
inline bool ReadModifyWriteRule::_internal_has_append_value() const {
  return rule_case() == kAppendValue;
}
inline void ReadModifyWriteRule::set_has_append_value() {
  _oneof_case_[0] = kAppendValue;
}
inline void ReadModifyWriteRule::clear_append_value() {
  if (_internal_has_append_value()) {
    rule_.append_value_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_rule();
  }
}
inline const std::string& ReadModifyWriteRule::append_value() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadModifyWriteRule.append_value)
  return _internal_append_value();
}
inline void ReadModifyWriteRule::set_append_value(const std::string& value) {
  _internal_set_append_value(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadModifyWriteRule.append_value)
}
inline std::string* ReadModifyWriteRule::mutable_append_value() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadModifyWriteRule.append_value)
  return _internal_mutable_append_value();
}
inline const std::string& ReadModifyWriteRule::_internal_append_value() const {
  if (_internal_has_append_value()) {
    return rule_.append_value_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ReadModifyWriteRule::_internal_set_append_value(const std::string& value) {
  if (!_internal_has_append_value()) {
    clear_rule();
    set_has_append_value();
    rule_.append_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  rule_.append_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReadModifyWriteRule::set_append_value(std::string&& value) {
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadModifyWriteRule.append_value)
  if (!_internal_has_append_value()) {
    clear_rule();
    set_has_append_value();
    rule_.append_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  rule_.append_value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.v2.ReadModifyWriteRule.append_value)
}
inline void ReadModifyWriteRule::set_append_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_append_value()) {
    clear_rule();
    set_has_append_value();
    rule_.append_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  rule_.append_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.ReadModifyWriteRule.append_value)
}
inline void ReadModifyWriteRule::set_append_value(const void* value,
                             size_t size) {
  if (!_internal_has_append_value()) {
    clear_rule();
    set_has_append_value();
    rule_.append_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  rule_.append_value_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.ReadModifyWriteRule.append_value)
}
inline std::string* ReadModifyWriteRule::_internal_mutable_append_value() {
  if (!_internal_has_append_value()) {
    clear_rule();
    set_has_append_value();
    rule_.append_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return rule_.append_value_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReadModifyWriteRule::release_append_value() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ReadModifyWriteRule.append_value)
  if (_internal_has_append_value()) {
    clear_has_rule();
    return rule_.append_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void ReadModifyWriteRule::set_allocated_append_value(std::string* append_value) {
  if (has_rule()) {
    clear_rule();
  }
  if (append_value != nullptr) {
    set_has_append_value();
    rule_.append_value_.UnsafeSetDefault(append_value);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(append_value);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ReadModifyWriteRule.append_value)
}

// int64 increment_amount = 4;
inline bool ReadModifyWriteRule::_internal_has_increment_amount() const {
  return rule_case() == kIncrementAmount;
}
inline void ReadModifyWriteRule::set_has_increment_amount() {
  _oneof_case_[0] = kIncrementAmount;
}
inline void ReadModifyWriteRule::clear_increment_amount() {
  if (_internal_has_increment_amount()) {
    rule_.increment_amount_ = PROTOBUF_LONGLONG(0);
    clear_has_rule();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReadModifyWriteRule::_internal_increment_amount() const {
  if (_internal_has_increment_amount()) {
    return rule_.increment_amount_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void ReadModifyWriteRule::_internal_set_increment_amount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_increment_amount()) {
    clear_rule();
    set_has_increment_amount();
  }
  rule_.increment_amount_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReadModifyWriteRule::increment_amount() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadModifyWriteRule.increment_amount)
  return _internal_increment_amount();
}
inline void ReadModifyWriteRule::set_increment_amount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_increment_amount(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadModifyWriteRule.increment_amount)
}

inline bool ReadModifyWriteRule::has_rule() const {
  return rule_case() != RULE_NOT_SET;
}
inline void ReadModifyWriteRule::clear_has_rule() {
  _oneof_case_[0] = RULE_NOT_SET;
}
inline ReadModifyWriteRule::RuleCase ReadModifyWriteRule::rule_case() const {
  return ReadModifyWriteRule::RuleCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace bigtable
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fbigtable_2fv2_2fdata_2eproto
