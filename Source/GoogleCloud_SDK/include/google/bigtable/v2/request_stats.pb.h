// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/bigtable/v2/request_stats.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fbigtable_2fv2_2frequest_5fstats_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fbigtable_2fv2_2frequest_5fstats_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021011 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/duration.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fbigtable_2fv2_2frequest_5fstats_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fbigtable_2fv2_2frequest_5fstats_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fbigtable_2fv2_2frequest_5fstats_2eproto;
namespace google {
namespace bigtable {
namespace v2 {
class FullReadStatsView;
struct FullReadStatsViewDefaultTypeInternal;
extern FullReadStatsViewDefaultTypeInternal _FullReadStatsView_default_instance_;
class ReadIterationStats;
struct ReadIterationStatsDefaultTypeInternal;
extern ReadIterationStatsDefaultTypeInternal _ReadIterationStats_default_instance_;
class RequestLatencyStats;
struct RequestLatencyStatsDefaultTypeInternal;
extern RequestLatencyStatsDefaultTypeInternal _RequestLatencyStats_default_instance_;
class RequestStats;
struct RequestStatsDefaultTypeInternal;
extern RequestStatsDefaultTypeInternal _RequestStats_default_instance_;
}  // namespace v2
}  // namespace bigtable
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::bigtable::v2::FullReadStatsView* Arena::CreateMaybeMessage<::google::bigtable::v2::FullReadStatsView>(Arena*);
template<> ::google::bigtable::v2::ReadIterationStats* Arena::CreateMaybeMessage<::google::bigtable::v2::ReadIterationStats>(Arena*);
template<> ::google::bigtable::v2::RequestLatencyStats* Arena::CreateMaybeMessage<::google::bigtable::v2::RequestLatencyStats>(Arena*);
template<> ::google::bigtable::v2::RequestStats* Arena::CreateMaybeMessage<::google::bigtable::v2::RequestStats>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace bigtable {
namespace v2 {

// ===================================================================

class ReadIterationStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v2.ReadIterationStats) */ {
 public:
  inline ReadIterationStats() : ReadIterationStats(nullptr) {}
  ~ReadIterationStats() override;
  explicit PROTOBUF_CONSTEXPR ReadIterationStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadIterationStats(const ReadIterationStats& from);
  ReadIterationStats(ReadIterationStats&& from) noexcept
    : ReadIterationStats() {
    *this = ::std::move(from);
  }

  inline ReadIterationStats& operator=(const ReadIterationStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadIterationStats& operator=(ReadIterationStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadIterationStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadIterationStats* internal_default_instance() {
    return reinterpret_cast<const ReadIterationStats*>(
               &_ReadIterationStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ReadIterationStats& a, ReadIterationStats& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadIterationStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadIterationStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReadIterationStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReadIterationStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReadIterationStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReadIterationStats& from) {
    ReadIterationStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadIterationStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.v2.ReadIterationStats";
  }
  protected:
  explicit ReadIterationStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowsSeenCountFieldNumber = 1,
    kRowsReturnedCountFieldNumber = 2,
    kCellsSeenCountFieldNumber = 3,
    kCellsReturnedCountFieldNumber = 4,
  };
  // int64 rows_seen_count = 1;
  void clear_rows_seen_count();
  int64_t rows_seen_count() const;
  void set_rows_seen_count(int64_t value);
  private:
  int64_t _internal_rows_seen_count() const;
  void _internal_set_rows_seen_count(int64_t value);
  public:

  // int64 rows_returned_count = 2;
  void clear_rows_returned_count();
  int64_t rows_returned_count() const;
  void set_rows_returned_count(int64_t value);
  private:
  int64_t _internal_rows_returned_count() const;
  void _internal_set_rows_returned_count(int64_t value);
  public:

  // int64 cells_seen_count = 3;
  void clear_cells_seen_count();
  int64_t cells_seen_count() const;
  void set_cells_seen_count(int64_t value);
  private:
  int64_t _internal_cells_seen_count() const;
  void _internal_set_cells_seen_count(int64_t value);
  public:

  // int64 cells_returned_count = 4;
  void clear_cells_returned_count();
  int64_t cells_returned_count() const;
  void set_cells_returned_count(int64_t value);
  private:
  int64_t _internal_cells_returned_count() const;
  void _internal_set_cells_returned_count(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.bigtable.v2.ReadIterationStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t rows_seen_count_;
    int64_t rows_returned_count_;
    int64_t cells_seen_count_;
    int64_t cells_returned_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fbigtable_2fv2_2frequest_5fstats_2eproto;
};
// -------------------------------------------------------------------

class RequestLatencyStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v2.RequestLatencyStats) */ {
 public:
  inline RequestLatencyStats() : RequestLatencyStats(nullptr) {}
  ~RequestLatencyStats() override;
  explicit PROTOBUF_CONSTEXPR RequestLatencyStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestLatencyStats(const RequestLatencyStats& from);
  RequestLatencyStats(RequestLatencyStats&& from) noexcept
    : RequestLatencyStats() {
    *this = ::std::move(from);
  }

  inline RequestLatencyStats& operator=(const RequestLatencyStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestLatencyStats& operator=(RequestLatencyStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestLatencyStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestLatencyStats* internal_default_instance() {
    return reinterpret_cast<const RequestLatencyStats*>(
               &_RequestLatencyStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RequestLatencyStats& a, RequestLatencyStats& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestLatencyStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestLatencyStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestLatencyStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestLatencyStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestLatencyStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RequestLatencyStats& from) {
    RequestLatencyStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestLatencyStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.v2.RequestLatencyStats";
  }
  protected:
  explicit RequestLatencyStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrontendServerLatencyFieldNumber = 1,
  };
  // .google.protobuf.Duration frontend_server_latency = 1;
  bool has_frontend_server_latency() const;
  private:
  bool _internal_has_frontend_server_latency() const;
  public:
  void clear_frontend_server_latency();
  const ::PROTOBUF_NAMESPACE_ID::Duration& frontend_server_latency() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_frontend_server_latency();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_frontend_server_latency();
  void set_allocated_frontend_server_latency(::PROTOBUF_NAMESPACE_ID::Duration* frontend_server_latency);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_frontend_server_latency() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_frontend_server_latency();
  public:
  void unsafe_arena_set_allocated_frontend_server_latency(
      ::PROTOBUF_NAMESPACE_ID::Duration* frontend_server_latency);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_frontend_server_latency();

  // @@protoc_insertion_point(class_scope:google.bigtable.v2.RequestLatencyStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::Duration* frontend_server_latency_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fbigtable_2fv2_2frequest_5fstats_2eproto;
};
// -------------------------------------------------------------------

class FullReadStatsView final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v2.FullReadStatsView) */ {
 public:
  inline FullReadStatsView() : FullReadStatsView(nullptr) {}
  ~FullReadStatsView() override;
  explicit PROTOBUF_CONSTEXPR FullReadStatsView(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FullReadStatsView(const FullReadStatsView& from);
  FullReadStatsView(FullReadStatsView&& from) noexcept
    : FullReadStatsView() {
    *this = ::std::move(from);
  }

  inline FullReadStatsView& operator=(const FullReadStatsView& from) {
    CopyFrom(from);
    return *this;
  }
  inline FullReadStatsView& operator=(FullReadStatsView&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FullReadStatsView& default_instance() {
    return *internal_default_instance();
  }
  static inline const FullReadStatsView* internal_default_instance() {
    return reinterpret_cast<const FullReadStatsView*>(
               &_FullReadStatsView_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FullReadStatsView& a, FullReadStatsView& b) {
    a.Swap(&b);
  }
  inline void Swap(FullReadStatsView* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FullReadStatsView* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FullReadStatsView* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FullReadStatsView>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FullReadStatsView& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FullReadStatsView& from) {
    FullReadStatsView::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FullReadStatsView* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.v2.FullReadStatsView";
  }
  protected:
  explicit FullReadStatsView(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReadIterationStatsFieldNumber = 1,
    kRequestLatencyStatsFieldNumber = 2,
  };
  // .google.bigtable.v2.ReadIterationStats read_iteration_stats = 1;
  bool has_read_iteration_stats() const;
  private:
  bool _internal_has_read_iteration_stats() const;
  public:
  void clear_read_iteration_stats();
  const ::google::bigtable::v2::ReadIterationStats& read_iteration_stats() const;
  PROTOBUF_NODISCARD ::google::bigtable::v2::ReadIterationStats* release_read_iteration_stats();
  ::google::bigtable::v2::ReadIterationStats* mutable_read_iteration_stats();
  void set_allocated_read_iteration_stats(::google::bigtable::v2::ReadIterationStats* read_iteration_stats);
  private:
  const ::google::bigtable::v2::ReadIterationStats& _internal_read_iteration_stats() const;
  ::google::bigtable::v2::ReadIterationStats* _internal_mutable_read_iteration_stats();
  public:
  void unsafe_arena_set_allocated_read_iteration_stats(
      ::google::bigtable::v2::ReadIterationStats* read_iteration_stats);
  ::google::bigtable::v2::ReadIterationStats* unsafe_arena_release_read_iteration_stats();

  // .google.bigtable.v2.RequestLatencyStats request_latency_stats = 2;
  bool has_request_latency_stats() const;
  private:
  bool _internal_has_request_latency_stats() const;
  public:
  void clear_request_latency_stats();
  const ::google::bigtable::v2::RequestLatencyStats& request_latency_stats() const;
  PROTOBUF_NODISCARD ::google::bigtable::v2::RequestLatencyStats* release_request_latency_stats();
  ::google::bigtable::v2::RequestLatencyStats* mutable_request_latency_stats();
  void set_allocated_request_latency_stats(::google::bigtable::v2::RequestLatencyStats* request_latency_stats);
  private:
  const ::google::bigtable::v2::RequestLatencyStats& _internal_request_latency_stats() const;
  ::google::bigtable::v2::RequestLatencyStats* _internal_mutable_request_latency_stats();
  public:
  void unsafe_arena_set_allocated_request_latency_stats(
      ::google::bigtable::v2::RequestLatencyStats* request_latency_stats);
  ::google::bigtable::v2::RequestLatencyStats* unsafe_arena_release_request_latency_stats();

  // @@protoc_insertion_point(class_scope:google.bigtable.v2.FullReadStatsView)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::bigtable::v2::ReadIterationStats* read_iteration_stats_;
    ::google::bigtable::v2::RequestLatencyStats* request_latency_stats_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fbigtable_2fv2_2frequest_5fstats_2eproto;
};
// -------------------------------------------------------------------

class RequestStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v2.RequestStats) */ {
 public:
  inline RequestStats() : RequestStats(nullptr) {}
  ~RequestStats() override;
  explicit PROTOBUF_CONSTEXPR RequestStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestStats(const RequestStats& from);
  RequestStats(RequestStats&& from) noexcept
    : RequestStats() {
    *this = ::std::move(from);
  }

  inline RequestStats& operator=(const RequestStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestStats& operator=(RequestStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestStats& default_instance() {
    return *internal_default_instance();
  }
  enum StatsViewCase {
    kFullReadStatsView = 1,
    STATS_VIEW_NOT_SET = 0,
  };

  static inline const RequestStats* internal_default_instance() {
    return reinterpret_cast<const RequestStats*>(
               &_RequestStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RequestStats& a, RequestStats& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RequestStats& from) {
    RequestStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.v2.RequestStats";
  }
  protected:
  explicit RequestStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFullReadStatsViewFieldNumber = 1,
  };
  // .google.bigtable.v2.FullReadStatsView full_read_stats_view = 1;
  bool has_full_read_stats_view() const;
  private:
  bool _internal_has_full_read_stats_view() const;
  public:
  void clear_full_read_stats_view();
  const ::google::bigtable::v2::FullReadStatsView& full_read_stats_view() const;
  PROTOBUF_NODISCARD ::google::bigtable::v2::FullReadStatsView* release_full_read_stats_view();
  ::google::bigtable::v2::FullReadStatsView* mutable_full_read_stats_view();
  void set_allocated_full_read_stats_view(::google::bigtable::v2::FullReadStatsView* full_read_stats_view);
  private:
  const ::google::bigtable::v2::FullReadStatsView& _internal_full_read_stats_view() const;
  ::google::bigtable::v2::FullReadStatsView* _internal_mutable_full_read_stats_view();
  public:
  void unsafe_arena_set_allocated_full_read_stats_view(
      ::google::bigtable::v2::FullReadStatsView* full_read_stats_view);
  ::google::bigtable::v2::FullReadStatsView* unsafe_arena_release_full_read_stats_view();

  void clear_stats_view();
  StatsViewCase stats_view_case() const;
  // @@protoc_insertion_point(class_scope:google.bigtable.v2.RequestStats)
 private:
  class _Internal;
  void set_has_full_read_stats_view();

  inline bool has_stats_view() const;
  inline void clear_has_stats_view();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union StatsViewUnion {
      constexpr StatsViewUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::google::bigtable::v2::FullReadStatsView* full_read_stats_view_;
    } stats_view_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fbigtable_2fv2_2frequest_5fstats_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ReadIterationStats

// int64 rows_seen_count = 1;
inline void ReadIterationStats::clear_rows_seen_count() {
  _impl_.rows_seen_count_ = int64_t{0};
}
inline int64_t ReadIterationStats::_internal_rows_seen_count() const {
  return _impl_.rows_seen_count_;
}
inline int64_t ReadIterationStats::rows_seen_count() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadIterationStats.rows_seen_count)
  return _internal_rows_seen_count();
}
inline void ReadIterationStats::_internal_set_rows_seen_count(int64_t value) {
  
  _impl_.rows_seen_count_ = value;
}
inline void ReadIterationStats::set_rows_seen_count(int64_t value) {
  _internal_set_rows_seen_count(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadIterationStats.rows_seen_count)
}

// int64 rows_returned_count = 2;
inline void ReadIterationStats::clear_rows_returned_count() {
  _impl_.rows_returned_count_ = int64_t{0};
}
inline int64_t ReadIterationStats::_internal_rows_returned_count() const {
  return _impl_.rows_returned_count_;
}
inline int64_t ReadIterationStats::rows_returned_count() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadIterationStats.rows_returned_count)
  return _internal_rows_returned_count();
}
inline void ReadIterationStats::_internal_set_rows_returned_count(int64_t value) {
  
  _impl_.rows_returned_count_ = value;
}
inline void ReadIterationStats::set_rows_returned_count(int64_t value) {
  _internal_set_rows_returned_count(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadIterationStats.rows_returned_count)
}

// int64 cells_seen_count = 3;
inline void ReadIterationStats::clear_cells_seen_count() {
  _impl_.cells_seen_count_ = int64_t{0};
}
inline int64_t ReadIterationStats::_internal_cells_seen_count() const {
  return _impl_.cells_seen_count_;
}
inline int64_t ReadIterationStats::cells_seen_count() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadIterationStats.cells_seen_count)
  return _internal_cells_seen_count();
}
inline void ReadIterationStats::_internal_set_cells_seen_count(int64_t value) {
  
  _impl_.cells_seen_count_ = value;
}
inline void ReadIterationStats::set_cells_seen_count(int64_t value) {
  _internal_set_cells_seen_count(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadIterationStats.cells_seen_count)
}

// int64 cells_returned_count = 4;
inline void ReadIterationStats::clear_cells_returned_count() {
  _impl_.cells_returned_count_ = int64_t{0};
}
inline int64_t ReadIterationStats::_internal_cells_returned_count() const {
  return _impl_.cells_returned_count_;
}
inline int64_t ReadIterationStats::cells_returned_count() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadIterationStats.cells_returned_count)
  return _internal_cells_returned_count();
}
inline void ReadIterationStats::_internal_set_cells_returned_count(int64_t value) {
  
  _impl_.cells_returned_count_ = value;
}
inline void ReadIterationStats::set_cells_returned_count(int64_t value) {
  _internal_set_cells_returned_count(value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadIterationStats.cells_returned_count)
}

// -------------------------------------------------------------------

// RequestLatencyStats

// .google.protobuf.Duration frontend_server_latency = 1;
inline bool RequestLatencyStats::_internal_has_frontend_server_latency() const {
  return this != internal_default_instance() && _impl_.frontend_server_latency_ != nullptr;
}
inline bool RequestLatencyStats::has_frontend_server_latency() const {
  return _internal_has_frontend_server_latency();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& RequestLatencyStats::_internal_frontend_server_latency() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.frontend_server_latency_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& RequestLatencyStats::frontend_server_latency() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.RequestLatencyStats.frontend_server_latency)
  return _internal_frontend_server_latency();
}
inline void RequestLatencyStats::unsafe_arena_set_allocated_frontend_server_latency(
    ::PROTOBUF_NAMESPACE_ID::Duration* frontend_server_latency) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.frontend_server_latency_);
  }
  _impl_.frontend_server_latency_ = frontend_server_latency;
  if (frontend_server_latency) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.v2.RequestLatencyStats.frontend_server_latency)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* RequestLatencyStats::release_frontend_server_latency() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.frontend_server_latency_;
  _impl_.frontend_server_latency_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* RequestLatencyStats::unsafe_arena_release_frontend_server_latency() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.RequestLatencyStats.frontend_server_latency)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.frontend_server_latency_;
  _impl_.frontend_server_latency_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* RequestLatencyStats::_internal_mutable_frontend_server_latency() {
  
  if (_impl_.frontend_server_latency_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.frontend_server_latency_ = p;
  }
  return _impl_.frontend_server_latency_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* RequestLatencyStats::mutable_frontend_server_latency() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_frontend_server_latency();
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.RequestLatencyStats.frontend_server_latency)
  return _msg;
}
inline void RequestLatencyStats::set_allocated_frontend_server_latency(::PROTOBUF_NAMESPACE_ID::Duration* frontend_server_latency) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.frontend_server_latency_);
  }
  if (frontend_server_latency) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(frontend_server_latency));
    if (message_arena != submessage_arena) {
      frontend_server_latency = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, frontend_server_latency, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.frontend_server_latency_ = frontend_server_latency;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.RequestLatencyStats.frontend_server_latency)
}

// -------------------------------------------------------------------

// FullReadStatsView

// .google.bigtable.v2.ReadIterationStats read_iteration_stats = 1;
inline bool FullReadStatsView::_internal_has_read_iteration_stats() const {
  return this != internal_default_instance() && _impl_.read_iteration_stats_ != nullptr;
}
inline bool FullReadStatsView::has_read_iteration_stats() const {
  return _internal_has_read_iteration_stats();
}
inline void FullReadStatsView::clear_read_iteration_stats() {
  if (GetArenaForAllocation() == nullptr && _impl_.read_iteration_stats_ != nullptr) {
    delete _impl_.read_iteration_stats_;
  }
  _impl_.read_iteration_stats_ = nullptr;
}
inline const ::google::bigtable::v2::ReadIterationStats& FullReadStatsView::_internal_read_iteration_stats() const {
  const ::google::bigtable::v2::ReadIterationStats* p = _impl_.read_iteration_stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::bigtable::v2::ReadIterationStats&>(
      ::google::bigtable::v2::_ReadIterationStats_default_instance_);
}
inline const ::google::bigtable::v2::ReadIterationStats& FullReadStatsView::read_iteration_stats() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.FullReadStatsView.read_iteration_stats)
  return _internal_read_iteration_stats();
}
inline void FullReadStatsView::unsafe_arena_set_allocated_read_iteration_stats(
    ::google::bigtable::v2::ReadIterationStats* read_iteration_stats) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.read_iteration_stats_);
  }
  _impl_.read_iteration_stats_ = read_iteration_stats;
  if (read_iteration_stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.v2.FullReadStatsView.read_iteration_stats)
}
inline ::google::bigtable::v2::ReadIterationStats* FullReadStatsView::release_read_iteration_stats() {
  
  ::google::bigtable::v2::ReadIterationStats* temp = _impl_.read_iteration_stats_;
  _impl_.read_iteration_stats_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::bigtable::v2::ReadIterationStats* FullReadStatsView::unsafe_arena_release_read_iteration_stats() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.FullReadStatsView.read_iteration_stats)
  
  ::google::bigtable::v2::ReadIterationStats* temp = _impl_.read_iteration_stats_;
  _impl_.read_iteration_stats_ = nullptr;
  return temp;
}
inline ::google::bigtable::v2::ReadIterationStats* FullReadStatsView::_internal_mutable_read_iteration_stats() {
  
  if (_impl_.read_iteration_stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::bigtable::v2::ReadIterationStats>(GetArenaForAllocation());
    _impl_.read_iteration_stats_ = p;
  }
  return _impl_.read_iteration_stats_;
}
inline ::google::bigtable::v2::ReadIterationStats* FullReadStatsView::mutable_read_iteration_stats() {
  ::google::bigtable::v2::ReadIterationStats* _msg = _internal_mutable_read_iteration_stats();
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.FullReadStatsView.read_iteration_stats)
  return _msg;
}
inline void FullReadStatsView::set_allocated_read_iteration_stats(::google::bigtable::v2::ReadIterationStats* read_iteration_stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.read_iteration_stats_;
  }
  if (read_iteration_stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(read_iteration_stats);
    if (message_arena != submessage_arena) {
      read_iteration_stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, read_iteration_stats, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.read_iteration_stats_ = read_iteration_stats;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.FullReadStatsView.read_iteration_stats)
}

// .google.bigtable.v2.RequestLatencyStats request_latency_stats = 2;
inline bool FullReadStatsView::_internal_has_request_latency_stats() const {
  return this != internal_default_instance() && _impl_.request_latency_stats_ != nullptr;
}
inline bool FullReadStatsView::has_request_latency_stats() const {
  return _internal_has_request_latency_stats();
}
inline void FullReadStatsView::clear_request_latency_stats() {
  if (GetArenaForAllocation() == nullptr && _impl_.request_latency_stats_ != nullptr) {
    delete _impl_.request_latency_stats_;
  }
  _impl_.request_latency_stats_ = nullptr;
}
inline const ::google::bigtable::v2::RequestLatencyStats& FullReadStatsView::_internal_request_latency_stats() const {
  const ::google::bigtable::v2::RequestLatencyStats* p = _impl_.request_latency_stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::bigtable::v2::RequestLatencyStats&>(
      ::google::bigtable::v2::_RequestLatencyStats_default_instance_);
}
inline const ::google::bigtable::v2::RequestLatencyStats& FullReadStatsView::request_latency_stats() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.FullReadStatsView.request_latency_stats)
  return _internal_request_latency_stats();
}
inline void FullReadStatsView::unsafe_arena_set_allocated_request_latency_stats(
    ::google::bigtable::v2::RequestLatencyStats* request_latency_stats) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.request_latency_stats_);
  }
  _impl_.request_latency_stats_ = request_latency_stats;
  if (request_latency_stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.v2.FullReadStatsView.request_latency_stats)
}
inline ::google::bigtable::v2::RequestLatencyStats* FullReadStatsView::release_request_latency_stats() {
  
  ::google::bigtable::v2::RequestLatencyStats* temp = _impl_.request_latency_stats_;
  _impl_.request_latency_stats_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::bigtable::v2::RequestLatencyStats* FullReadStatsView::unsafe_arena_release_request_latency_stats() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.FullReadStatsView.request_latency_stats)
  
  ::google::bigtable::v2::RequestLatencyStats* temp = _impl_.request_latency_stats_;
  _impl_.request_latency_stats_ = nullptr;
  return temp;
}
inline ::google::bigtable::v2::RequestLatencyStats* FullReadStatsView::_internal_mutable_request_latency_stats() {
  
  if (_impl_.request_latency_stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::bigtable::v2::RequestLatencyStats>(GetArenaForAllocation());
    _impl_.request_latency_stats_ = p;
  }
  return _impl_.request_latency_stats_;
}
inline ::google::bigtable::v2::RequestLatencyStats* FullReadStatsView::mutable_request_latency_stats() {
  ::google::bigtable::v2::RequestLatencyStats* _msg = _internal_mutable_request_latency_stats();
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.FullReadStatsView.request_latency_stats)
  return _msg;
}
inline void FullReadStatsView::set_allocated_request_latency_stats(::google::bigtable::v2::RequestLatencyStats* request_latency_stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.request_latency_stats_;
  }
  if (request_latency_stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(request_latency_stats);
    if (message_arena != submessage_arena) {
      request_latency_stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request_latency_stats, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.request_latency_stats_ = request_latency_stats;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.FullReadStatsView.request_latency_stats)
}

// -------------------------------------------------------------------

// RequestStats

// .google.bigtable.v2.FullReadStatsView full_read_stats_view = 1;
inline bool RequestStats::_internal_has_full_read_stats_view() const {
  return stats_view_case() == kFullReadStatsView;
}
inline bool RequestStats::has_full_read_stats_view() const {
  return _internal_has_full_read_stats_view();
}
inline void RequestStats::set_has_full_read_stats_view() {
  _impl_._oneof_case_[0] = kFullReadStatsView;
}
inline void RequestStats::clear_full_read_stats_view() {
  if (_internal_has_full_read_stats_view()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.stats_view_.full_read_stats_view_;
    }
    clear_has_stats_view();
  }
}
inline ::google::bigtable::v2::FullReadStatsView* RequestStats::release_full_read_stats_view() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.RequestStats.full_read_stats_view)
  if (_internal_has_full_read_stats_view()) {
    clear_has_stats_view();
    ::google::bigtable::v2::FullReadStatsView* temp = _impl_.stats_view_.full_read_stats_view_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.stats_view_.full_read_stats_view_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::bigtable::v2::FullReadStatsView& RequestStats::_internal_full_read_stats_view() const {
  return _internal_has_full_read_stats_view()
      ? *_impl_.stats_view_.full_read_stats_view_
      : reinterpret_cast< ::google::bigtable::v2::FullReadStatsView&>(::google::bigtable::v2::_FullReadStatsView_default_instance_);
}
inline const ::google::bigtable::v2::FullReadStatsView& RequestStats::full_read_stats_view() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.RequestStats.full_read_stats_view)
  return _internal_full_read_stats_view();
}
inline ::google::bigtable::v2::FullReadStatsView* RequestStats::unsafe_arena_release_full_read_stats_view() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.bigtable.v2.RequestStats.full_read_stats_view)
  if (_internal_has_full_read_stats_view()) {
    clear_has_stats_view();
    ::google::bigtable::v2::FullReadStatsView* temp = _impl_.stats_view_.full_read_stats_view_;
    _impl_.stats_view_.full_read_stats_view_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RequestStats::unsafe_arena_set_allocated_full_read_stats_view(::google::bigtable::v2::FullReadStatsView* full_read_stats_view) {
  clear_stats_view();
  if (full_read_stats_view) {
    set_has_full_read_stats_view();
    _impl_.stats_view_.full_read_stats_view_ = full_read_stats_view;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.v2.RequestStats.full_read_stats_view)
}
inline ::google::bigtable::v2::FullReadStatsView* RequestStats::_internal_mutable_full_read_stats_view() {
  if (!_internal_has_full_read_stats_view()) {
    clear_stats_view();
    set_has_full_read_stats_view();
    _impl_.stats_view_.full_read_stats_view_ = CreateMaybeMessage< ::google::bigtable::v2::FullReadStatsView >(GetArenaForAllocation());
  }
  return _impl_.stats_view_.full_read_stats_view_;
}
inline ::google::bigtable::v2::FullReadStatsView* RequestStats::mutable_full_read_stats_view() {
  ::google::bigtable::v2::FullReadStatsView* _msg = _internal_mutable_full_read_stats_view();
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.RequestStats.full_read_stats_view)
  return _msg;
}

inline bool RequestStats::has_stats_view() const {
  return stats_view_case() != STATS_VIEW_NOT_SET;
}
inline void RequestStats::clear_has_stats_view() {
  _impl_._oneof_case_[0] = STATS_VIEW_NOT_SET;
}
inline RequestStats::StatsViewCase RequestStats::stats_view_case() const {
  return RequestStats::StatsViewCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace bigtable
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fbigtable_2fv2_2frequest_5fstats_2eproto
