// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/bigtable/admin/v2/bigtable_instance_admin.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fbigtable_2fadmin_2fv2_2fbigtable_5finstance_5fadmin_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fbigtable_2fadmin_2fv2_2fbigtable_5finstance_5fadmin_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include "google/api/field_behavior.pb.h"
#include "google/api/resource.pb.h"
#include "google/bigtable/admin/v2/instance.pb.h"
#include "google/iam/v1/iam_policy.pb.h"
#include "google/iam/v1/policy.pb.h"
#include "google/longrunning/operations.pb.h"
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/field_mask.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fbigtable_2fadmin_2fv2_2fbigtable_5finstance_5fadmin_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fbigtable_2fadmin_2fv2_2fbigtable_5finstance_5fadmin_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fbigtable_2fadmin_2fv2_2fbigtable_5finstance_5fadmin_2eproto;
namespace google {
namespace bigtable {
namespace admin {
namespace v2 {
class CreateAppProfileRequest;
struct CreateAppProfileRequestDefaultTypeInternal;
extern CreateAppProfileRequestDefaultTypeInternal _CreateAppProfileRequest_default_instance_;
class CreateClusterMetadata;
struct CreateClusterMetadataDefaultTypeInternal;
extern CreateClusterMetadataDefaultTypeInternal _CreateClusterMetadata_default_instance_;
class CreateClusterMetadata_TableProgress;
struct CreateClusterMetadata_TableProgressDefaultTypeInternal;
extern CreateClusterMetadata_TableProgressDefaultTypeInternal _CreateClusterMetadata_TableProgress_default_instance_;
class CreateClusterMetadata_TablesEntry_DoNotUse;
struct CreateClusterMetadata_TablesEntry_DoNotUseDefaultTypeInternal;
extern CreateClusterMetadata_TablesEntry_DoNotUseDefaultTypeInternal _CreateClusterMetadata_TablesEntry_DoNotUse_default_instance_;
class CreateClusterRequest;
struct CreateClusterRequestDefaultTypeInternal;
extern CreateClusterRequestDefaultTypeInternal _CreateClusterRequest_default_instance_;
class CreateInstanceMetadata;
struct CreateInstanceMetadataDefaultTypeInternal;
extern CreateInstanceMetadataDefaultTypeInternal _CreateInstanceMetadata_default_instance_;
class CreateInstanceRequest;
struct CreateInstanceRequestDefaultTypeInternal;
extern CreateInstanceRequestDefaultTypeInternal _CreateInstanceRequest_default_instance_;
class CreateInstanceRequest_ClustersEntry_DoNotUse;
struct CreateInstanceRequest_ClustersEntry_DoNotUseDefaultTypeInternal;
extern CreateInstanceRequest_ClustersEntry_DoNotUseDefaultTypeInternal _CreateInstanceRequest_ClustersEntry_DoNotUse_default_instance_;
class DeleteAppProfileRequest;
struct DeleteAppProfileRequestDefaultTypeInternal;
extern DeleteAppProfileRequestDefaultTypeInternal _DeleteAppProfileRequest_default_instance_;
class DeleteClusterRequest;
struct DeleteClusterRequestDefaultTypeInternal;
extern DeleteClusterRequestDefaultTypeInternal _DeleteClusterRequest_default_instance_;
class DeleteInstanceRequest;
struct DeleteInstanceRequestDefaultTypeInternal;
extern DeleteInstanceRequestDefaultTypeInternal _DeleteInstanceRequest_default_instance_;
class GetAppProfileRequest;
struct GetAppProfileRequestDefaultTypeInternal;
extern GetAppProfileRequestDefaultTypeInternal _GetAppProfileRequest_default_instance_;
class GetClusterRequest;
struct GetClusterRequestDefaultTypeInternal;
extern GetClusterRequestDefaultTypeInternal _GetClusterRequest_default_instance_;
class GetInstanceRequest;
struct GetInstanceRequestDefaultTypeInternal;
extern GetInstanceRequestDefaultTypeInternal _GetInstanceRequest_default_instance_;
class ListAppProfilesRequest;
struct ListAppProfilesRequestDefaultTypeInternal;
extern ListAppProfilesRequestDefaultTypeInternal _ListAppProfilesRequest_default_instance_;
class ListAppProfilesResponse;
struct ListAppProfilesResponseDefaultTypeInternal;
extern ListAppProfilesResponseDefaultTypeInternal _ListAppProfilesResponse_default_instance_;
class ListClustersRequest;
struct ListClustersRequestDefaultTypeInternal;
extern ListClustersRequestDefaultTypeInternal _ListClustersRequest_default_instance_;
class ListClustersResponse;
struct ListClustersResponseDefaultTypeInternal;
extern ListClustersResponseDefaultTypeInternal _ListClustersResponse_default_instance_;
class ListHotTabletsRequest;
struct ListHotTabletsRequestDefaultTypeInternal;
extern ListHotTabletsRequestDefaultTypeInternal _ListHotTabletsRequest_default_instance_;
class ListHotTabletsResponse;
struct ListHotTabletsResponseDefaultTypeInternal;
extern ListHotTabletsResponseDefaultTypeInternal _ListHotTabletsResponse_default_instance_;
class ListInstancesRequest;
struct ListInstancesRequestDefaultTypeInternal;
extern ListInstancesRequestDefaultTypeInternal _ListInstancesRequest_default_instance_;
class ListInstancesResponse;
struct ListInstancesResponseDefaultTypeInternal;
extern ListInstancesResponseDefaultTypeInternal _ListInstancesResponse_default_instance_;
class PartialUpdateClusterMetadata;
struct PartialUpdateClusterMetadataDefaultTypeInternal;
extern PartialUpdateClusterMetadataDefaultTypeInternal _PartialUpdateClusterMetadata_default_instance_;
class PartialUpdateClusterRequest;
struct PartialUpdateClusterRequestDefaultTypeInternal;
extern PartialUpdateClusterRequestDefaultTypeInternal _PartialUpdateClusterRequest_default_instance_;
class PartialUpdateInstanceRequest;
struct PartialUpdateInstanceRequestDefaultTypeInternal;
extern PartialUpdateInstanceRequestDefaultTypeInternal _PartialUpdateInstanceRequest_default_instance_;
class UpdateAppProfileMetadata;
struct UpdateAppProfileMetadataDefaultTypeInternal;
extern UpdateAppProfileMetadataDefaultTypeInternal _UpdateAppProfileMetadata_default_instance_;
class UpdateAppProfileRequest;
struct UpdateAppProfileRequestDefaultTypeInternal;
extern UpdateAppProfileRequestDefaultTypeInternal _UpdateAppProfileRequest_default_instance_;
class UpdateClusterMetadata;
struct UpdateClusterMetadataDefaultTypeInternal;
extern UpdateClusterMetadataDefaultTypeInternal _UpdateClusterMetadata_default_instance_;
class UpdateInstanceMetadata;
struct UpdateInstanceMetadataDefaultTypeInternal;
extern UpdateInstanceMetadataDefaultTypeInternal _UpdateInstanceMetadata_default_instance_;
}  // namespace v2
}  // namespace admin
}  // namespace bigtable
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::bigtable::admin::v2::CreateAppProfileRequest* Arena::CreateMaybeMessage<::google::bigtable::admin::v2::CreateAppProfileRequest>(Arena*);
template<> ::google::bigtable::admin::v2::CreateClusterMetadata* Arena::CreateMaybeMessage<::google::bigtable::admin::v2::CreateClusterMetadata>(Arena*);
template<> ::google::bigtable::admin::v2::CreateClusterMetadata_TableProgress* Arena::CreateMaybeMessage<::google::bigtable::admin::v2::CreateClusterMetadata_TableProgress>(Arena*);
template<> ::google::bigtable::admin::v2::CreateClusterMetadata_TablesEntry_DoNotUse* Arena::CreateMaybeMessage<::google::bigtable::admin::v2::CreateClusterMetadata_TablesEntry_DoNotUse>(Arena*);
template<> ::google::bigtable::admin::v2::CreateClusterRequest* Arena::CreateMaybeMessage<::google::bigtable::admin::v2::CreateClusterRequest>(Arena*);
template<> ::google::bigtable::admin::v2::CreateInstanceMetadata* Arena::CreateMaybeMessage<::google::bigtable::admin::v2::CreateInstanceMetadata>(Arena*);
template<> ::google::bigtable::admin::v2::CreateInstanceRequest* Arena::CreateMaybeMessage<::google::bigtable::admin::v2::CreateInstanceRequest>(Arena*);
template<> ::google::bigtable::admin::v2::CreateInstanceRequest_ClustersEntry_DoNotUse* Arena::CreateMaybeMessage<::google::bigtable::admin::v2::CreateInstanceRequest_ClustersEntry_DoNotUse>(Arena*);
template<> ::google::bigtable::admin::v2::DeleteAppProfileRequest* Arena::CreateMaybeMessage<::google::bigtable::admin::v2::DeleteAppProfileRequest>(Arena*);
template<> ::google::bigtable::admin::v2::DeleteClusterRequest* Arena::CreateMaybeMessage<::google::bigtable::admin::v2::DeleteClusterRequest>(Arena*);
template<> ::google::bigtable::admin::v2::DeleteInstanceRequest* Arena::CreateMaybeMessage<::google::bigtable::admin::v2::DeleteInstanceRequest>(Arena*);
template<> ::google::bigtable::admin::v2::GetAppProfileRequest* Arena::CreateMaybeMessage<::google::bigtable::admin::v2::GetAppProfileRequest>(Arena*);
template<> ::google::bigtable::admin::v2::GetClusterRequest* Arena::CreateMaybeMessage<::google::bigtable::admin::v2::GetClusterRequest>(Arena*);
template<> ::google::bigtable::admin::v2::GetInstanceRequest* Arena::CreateMaybeMessage<::google::bigtable::admin::v2::GetInstanceRequest>(Arena*);
template<> ::google::bigtable::admin::v2::ListAppProfilesRequest* Arena::CreateMaybeMessage<::google::bigtable::admin::v2::ListAppProfilesRequest>(Arena*);
template<> ::google::bigtable::admin::v2::ListAppProfilesResponse* Arena::CreateMaybeMessage<::google::bigtable::admin::v2::ListAppProfilesResponse>(Arena*);
template<> ::google::bigtable::admin::v2::ListClustersRequest* Arena::CreateMaybeMessage<::google::bigtable::admin::v2::ListClustersRequest>(Arena*);
template<> ::google::bigtable::admin::v2::ListClustersResponse* Arena::CreateMaybeMessage<::google::bigtable::admin::v2::ListClustersResponse>(Arena*);
template<> ::google::bigtable::admin::v2::ListHotTabletsRequest* Arena::CreateMaybeMessage<::google::bigtable::admin::v2::ListHotTabletsRequest>(Arena*);
template<> ::google::bigtable::admin::v2::ListHotTabletsResponse* Arena::CreateMaybeMessage<::google::bigtable::admin::v2::ListHotTabletsResponse>(Arena*);
template<> ::google::bigtable::admin::v2::ListInstancesRequest* Arena::CreateMaybeMessage<::google::bigtable::admin::v2::ListInstancesRequest>(Arena*);
template<> ::google::bigtable::admin::v2::ListInstancesResponse* Arena::CreateMaybeMessage<::google::bigtable::admin::v2::ListInstancesResponse>(Arena*);
template<> ::google::bigtable::admin::v2::PartialUpdateClusterMetadata* Arena::CreateMaybeMessage<::google::bigtable::admin::v2::PartialUpdateClusterMetadata>(Arena*);
template<> ::google::bigtable::admin::v2::PartialUpdateClusterRequest* Arena::CreateMaybeMessage<::google::bigtable::admin::v2::PartialUpdateClusterRequest>(Arena*);
template<> ::google::bigtable::admin::v2::PartialUpdateInstanceRequest* Arena::CreateMaybeMessage<::google::bigtable::admin::v2::PartialUpdateInstanceRequest>(Arena*);
template<> ::google::bigtable::admin::v2::UpdateAppProfileMetadata* Arena::CreateMaybeMessage<::google::bigtable::admin::v2::UpdateAppProfileMetadata>(Arena*);
template<> ::google::bigtable::admin::v2::UpdateAppProfileRequest* Arena::CreateMaybeMessage<::google::bigtable::admin::v2::UpdateAppProfileRequest>(Arena*);
template<> ::google::bigtable::admin::v2::UpdateClusterMetadata* Arena::CreateMaybeMessage<::google::bigtable::admin::v2::UpdateClusterMetadata>(Arena*);
template<> ::google::bigtable::admin::v2::UpdateInstanceMetadata* Arena::CreateMaybeMessage<::google::bigtable::admin::v2::UpdateInstanceMetadata>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace bigtable {
namespace admin {
namespace v2 {

enum CreateClusterMetadata_TableProgress_State : int {
  CreateClusterMetadata_TableProgress_State_STATE_UNSPECIFIED = 0,
  CreateClusterMetadata_TableProgress_State_PENDING = 1,
  CreateClusterMetadata_TableProgress_State_COPYING = 2,
  CreateClusterMetadata_TableProgress_State_COMPLETED = 3,
  CreateClusterMetadata_TableProgress_State_CANCELLED = 4,
  CreateClusterMetadata_TableProgress_State_CreateClusterMetadata_TableProgress_State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CreateClusterMetadata_TableProgress_State_CreateClusterMetadata_TableProgress_State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CreateClusterMetadata_TableProgress_State_IsValid(int value);
constexpr CreateClusterMetadata_TableProgress_State CreateClusterMetadata_TableProgress_State_State_MIN = CreateClusterMetadata_TableProgress_State_STATE_UNSPECIFIED;
constexpr CreateClusterMetadata_TableProgress_State CreateClusterMetadata_TableProgress_State_State_MAX = CreateClusterMetadata_TableProgress_State_CANCELLED;
constexpr int CreateClusterMetadata_TableProgress_State_State_ARRAYSIZE = CreateClusterMetadata_TableProgress_State_State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CreateClusterMetadata_TableProgress_State_descriptor();
template<typename T>
inline const std::string& CreateClusterMetadata_TableProgress_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CreateClusterMetadata_TableProgress_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CreateClusterMetadata_TableProgress_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CreateClusterMetadata_TableProgress_State_descriptor(), enum_t_value);
}
inline bool CreateClusterMetadata_TableProgress_State_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CreateClusterMetadata_TableProgress_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CreateClusterMetadata_TableProgress_State>(
    CreateClusterMetadata_TableProgress_State_descriptor(), name, value);
}
// ===================================================================

class CreateInstanceRequest_ClustersEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CreateInstanceRequest_ClustersEntry_DoNotUse, 
    std::string, ::google::bigtable::admin::v2::Cluster,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CreateInstanceRequest_ClustersEntry_DoNotUse, 
    std::string, ::google::bigtable::admin::v2::Cluster,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  CreateInstanceRequest_ClustersEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR CreateInstanceRequest_ClustersEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CreateInstanceRequest_ClustersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CreateInstanceRequest_ClustersEntry_DoNotUse& other);
  static const CreateInstanceRequest_ClustersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CreateInstanceRequest_ClustersEntry_DoNotUse*>(&_CreateInstanceRequest_ClustersEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.bigtable.admin.v2.CreateInstanceRequest.ClustersEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fbigtable_2fadmin_2fv2_2fbigtable_5finstance_5fadmin_2eproto;
};

// -------------------------------------------------------------------

class CreateInstanceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.v2.CreateInstanceRequest) */ {
 public:
  inline CreateInstanceRequest() : CreateInstanceRequest(nullptr) {}
  ~CreateInstanceRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateInstanceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateInstanceRequest(const CreateInstanceRequest& from);
  CreateInstanceRequest(CreateInstanceRequest&& from) noexcept
    : CreateInstanceRequest() {
    *this = ::std::move(from);
  }

  inline CreateInstanceRequest& operator=(const CreateInstanceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateInstanceRequest& operator=(CreateInstanceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateInstanceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateInstanceRequest* internal_default_instance() {
    return reinterpret_cast<const CreateInstanceRequest*>(
               &_CreateInstanceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateInstanceRequest& a, CreateInstanceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateInstanceRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateInstanceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateInstanceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateInstanceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateInstanceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateInstanceRequest& from) {
    CreateInstanceRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateInstanceRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.admin.v2.CreateInstanceRequest";
  }
  protected:
  explicit CreateInstanceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kClustersFieldNumber = 4,
    kParentFieldNumber = 1,
    kInstanceIdFieldNumber = 2,
    kInstanceFieldNumber = 3,
  };
  // map<string, .google.bigtable.admin.v2.Cluster> clusters = 4 [(.google.api.field_behavior) = REQUIRED];
  int clusters_size() const;
  private:
  int _internal_clusters_size() const;
  public:
  void clear_clusters();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::google::bigtable::admin::v2::Cluster >&
      _internal_clusters() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::google::bigtable::admin::v2::Cluster >*
      _internal_mutable_clusters();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::google::bigtable::admin::v2::Cluster >&
      clusters() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::google::bigtable::admin::v2::Cluster >*
      mutable_clusters();

  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string instance_id = 2 [(.google.api.field_behavior) = REQUIRED];
  void clear_instance_id();
  const std::string& instance_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_instance_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_instance_id();
  PROTOBUF_NODISCARD std::string* release_instance_id();
  void set_allocated_instance_id(std::string* instance_id);
  private:
  const std::string& _internal_instance_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instance_id(const std::string& value);
  std::string* _internal_mutable_instance_id();
  public:

  // .google.bigtable.admin.v2.Instance instance = 3 [(.google.api.field_behavior) = REQUIRED];
  bool has_instance() const;
  private:
  bool _internal_has_instance() const;
  public:
  void clear_instance();
  const ::google::bigtable::admin::v2::Instance& instance() const;
  PROTOBUF_NODISCARD ::google::bigtable::admin::v2::Instance* release_instance();
  ::google::bigtable::admin::v2::Instance* mutable_instance();
  void set_allocated_instance(::google::bigtable::admin::v2::Instance* instance);
  private:
  const ::google::bigtable::admin::v2::Instance& _internal_instance() const;
  ::google::bigtable::admin::v2::Instance* _internal_mutable_instance();
  public:
  void unsafe_arena_set_allocated_instance(
      ::google::bigtable::admin::v2::Instance* instance);
  ::google::bigtable::admin::v2::Instance* unsafe_arena_release_instance();

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.v2.CreateInstanceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        CreateInstanceRequest_ClustersEntry_DoNotUse,
        std::string, ::google::bigtable::admin::v2::Cluster,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> clusters_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instance_id_;
    ::google::bigtable::admin::v2::Instance* instance_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fbigtable_2fadmin_2fv2_2fbigtable_5finstance_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class GetInstanceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.v2.GetInstanceRequest) */ {
 public:
  inline GetInstanceRequest() : GetInstanceRequest(nullptr) {}
  ~GetInstanceRequest() override;
  explicit PROTOBUF_CONSTEXPR GetInstanceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetInstanceRequest(const GetInstanceRequest& from);
  GetInstanceRequest(GetInstanceRequest&& from) noexcept
    : GetInstanceRequest() {
    *this = ::std::move(from);
  }

  inline GetInstanceRequest& operator=(const GetInstanceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetInstanceRequest& operator=(GetInstanceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetInstanceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetInstanceRequest* internal_default_instance() {
    return reinterpret_cast<const GetInstanceRequest*>(
               &_GetInstanceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetInstanceRequest& a, GetInstanceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetInstanceRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetInstanceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetInstanceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetInstanceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetInstanceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetInstanceRequest& from) {
    GetInstanceRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetInstanceRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.admin.v2.GetInstanceRequest";
  }
  protected:
  explicit GetInstanceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.v2.GetInstanceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fbigtable_2fadmin_2fv2_2fbigtable_5finstance_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class ListInstancesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.v2.ListInstancesRequest) */ {
 public:
  inline ListInstancesRequest() : ListInstancesRequest(nullptr) {}
  ~ListInstancesRequest() override;
  explicit PROTOBUF_CONSTEXPR ListInstancesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListInstancesRequest(const ListInstancesRequest& from);
  ListInstancesRequest(ListInstancesRequest&& from) noexcept
    : ListInstancesRequest() {
    *this = ::std::move(from);
  }

  inline ListInstancesRequest& operator=(const ListInstancesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListInstancesRequest& operator=(ListInstancesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListInstancesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListInstancesRequest* internal_default_instance() {
    return reinterpret_cast<const ListInstancesRequest*>(
               &_ListInstancesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ListInstancesRequest& a, ListInstancesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListInstancesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListInstancesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListInstancesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListInstancesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListInstancesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListInstancesRequest& from) {
    ListInstancesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListInstancesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.admin.v2.ListInstancesRequest";
  }
  protected:
  explicit ListInstancesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 2;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.v2.ListInstancesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fbigtable_2fadmin_2fv2_2fbigtable_5finstance_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class ListInstancesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.v2.ListInstancesResponse) */ {
 public:
  inline ListInstancesResponse() : ListInstancesResponse(nullptr) {}
  ~ListInstancesResponse() override;
  explicit PROTOBUF_CONSTEXPR ListInstancesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListInstancesResponse(const ListInstancesResponse& from);
  ListInstancesResponse(ListInstancesResponse&& from) noexcept
    : ListInstancesResponse() {
    *this = ::std::move(from);
  }

  inline ListInstancesResponse& operator=(const ListInstancesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListInstancesResponse& operator=(ListInstancesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListInstancesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListInstancesResponse* internal_default_instance() {
    return reinterpret_cast<const ListInstancesResponse*>(
               &_ListInstancesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ListInstancesResponse& a, ListInstancesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListInstancesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListInstancesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListInstancesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListInstancesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListInstancesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListInstancesResponse& from) {
    ListInstancesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListInstancesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.admin.v2.ListInstancesResponse";
  }
  protected:
  explicit ListInstancesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstancesFieldNumber = 1,
    kFailedLocationsFieldNumber = 2,
    kNextPageTokenFieldNumber = 3,
  };
  // repeated .google.bigtable.admin.v2.Instance instances = 1;
  int instances_size() const;
  private:
  int _internal_instances_size() const;
  public:
  void clear_instances();
  ::google::bigtable::admin::v2::Instance* mutable_instances(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::admin::v2::Instance >*
      mutable_instances();
  private:
  const ::google::bigtable::admin::v2::Instance& _internal_instances(int index) const;
  ::google::bigtable::admin::v2::Instance* _internal_add_instances();
  public:
  const ::google::bigtable::admin::v2::Instance& instances(int index) const;
  ::google::bigtable::admin::v2::Instance* add_instances();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::admin::v2::Instance >&
      instances() const;

  // repeated string failed_locations = 2;
  int failed_locations_size() const;
  private:
  int _internal_failed_locations_size() const;
  public:
  void clear_failed_locations();
  const std::string& failed_locations(int index) const;
  std::string* mutable_failed_locations(int index);
  void set_failed_locations(int index, const std::string& value);
  void set_failed_locations(int index, std::string&& value);
  void set_failed_locations(int index, const char* value);
  void set_failed_locations(int index, const char* value, size_t size);
  std::string* add_failed_locations();
  void add_failed_locations(const std::string& value);
  void add_failed_locations(std::string&& value);
  void add_failed_locations(const char* value);
  void add_failed_locations(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& failed_locations() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_failed_locations();
  private:
  const std::string& _internal_failed_locations(int index) const;
  std::string* _internal_add_failed_locations();
  public:

  // string next_page_token = 3;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.v2.ListInstancesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::admin::v2::Instance > instances_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> failed_locations_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fbigtable_2fadmin_2fv2_2fbigtable_5finstance_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class PartialUpdateInstanceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.v2.PartialUpdateInstanceRequest) */ {
 public:
  inline PartialUpdateInstanceRequest() : PartialUpdateInstanceRequest(nullptr) {}
  ~PartialUpdateInstanceRequest() override;
  explicit PROTOBUF_CONSTEXPR PartialUpdateInstanceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PartialUpdateInstanceRequest(const PartialUpdateInstanceRequest& from);
  PartialUpdateInstanceRequest(PartialUpdateInstanceRequest&& from) noexcept
    : PartialUpdateInstanceRequest() {
    *this = ::std::move(from);
  }

  inline PartialUpdateInstanceRequest& operator=(const PartialUpdateInstanceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PartialUpdateInstanceRequest& operator=(PartialUpdateInstanceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PartialUpdateInstanceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PartialUpdateInstanceRequest* internal_default_instance() {
    return reinterpret_cast<const PartialUpdateInstanceRequest*>(
               &_PartialUpdateInstanceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PartialUpdateInstanceRequest& a, PartialUpdateInstanceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PartialUpdateInstanceRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PartialUpdateInstanceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PartialUpdateInstanceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PartialUpdateInstanceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PartialUpdateInstanceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PartialUpdateInstanceRequest& from) {
    PartialUpdateInstanceRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PartialUpdateInstanceRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.admin.v2.PartialUpdateInstanceRequest";
  }
  protected:
  explicit PartialUpdateInstanceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstanceFieldNumber = 1,
    kUpdateMaskFieldNumber = 2,
  };
  // .google.bigtable.admin.v2.Instance instance = 1 [(.google.api.field_behavior) = REQUIRED];
  bool has_instance() const;
  private:
  bool _internal_has_instance() const;
  public:
  void clear_instance();
  const ::google::bigtable::admin::v2::Instance& instance() const;
  PROTOBUF_NODISCARD ::google::bigtable::admin::v2::Instance* release_instance();
  ::google::bigtable::admin::v2::Instance* mutable_instance();
  void set_allocated_instance(::google::bigtable::admin::v2::Instance* instance);
  private:
  const ::google::bigtable::admin::v2::Instance& _internal_instance() const;
  ::google::bigtable::admin::v2::Instance* _internal_mutable_instance();
  public:
  void unsafe_arena_set_allocated_instance(
      ::google::bigtable::admin::v2::Instance* instance);
  ::google::bigtable::admin::v2::Instance* unsafe_arena_release_instance();

  // .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.v2.PartialUpdateInstanceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::bigtable::admin::v2::Instance* instance_;
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fbigtable_2fadmin_2fv2_2fbigtable_5finstance_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class DeleteInstanceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.v2.DeleteInstanceRequest) */ {
 public:
  inline DeleteInstanceRequest() : DeleteInstanceRequest(nullptr) {}
  ~DeleteInstanceRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteInstanceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteInstanceRequest(const DeleteInstanceRequest& from);
  DeleteInstanceRequest(DeleteInstanceRequest&& from) noexcept
    : DeleteInstanceRequest() {
    *this = ::std::move(from);
  }

  inline DeleteInstanceRequest& operator=(const DeleteInstanceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteInstanceRequest& operator=(DeleteInstanceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteInstanceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteInstanceRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteInstanceRequest*>(
               &_DeleteInstanceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DeleteInstanceRequest& a, DeleteInstanceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteInstanceRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteInstanceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteInstanceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteInstanceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteInstanceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteInstanceRequest& from) {
    DeleteInstanceRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteInstanceRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.admin.v2.DeleteInstanceRequest";
  }
  protected:
  explicit DeleteInstanceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.v2.DeleteInstanceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fbigtable_2fadmin_2fv2_2fbigtable_5finstance_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class CreateClusterRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.v2.CreateClusterRequest) */ {
 public:
  inline CreateClusterRequest() : CreateClusterRequest(nullptr) {}
  ~CreateClusterRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateClusterRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateClusterRequest(const CreateClusterRequest& from);
  CreateClusterRequest(CreateClusterRequest&& from) noexcept
    : CreateClusterRequest() {
    *this = ::std::move(from);
  }

  inline CreateClusterRequest& operator=(const CreateClusterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateClusterRequest& operator=(CreateClusterRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateClusterRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateClusterRequest* internal_default_instance() {
    return reinterpret_cast<const CreateClusterRequest*>(
               &_CreateClusterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CreateClusterRequest& a, CreateClusterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateClusterRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateClusterRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateClusterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateClusterRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateClusterRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateClusterRequest& from) {
    CreateClusterRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateClusterRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.admin.v2.CreateClusterRequest";
  }
  protected:
  explicit CreateClusterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kClusterIdFieldNumber = 2,
    kClusterFieldNumber = 3,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string cluster_id = 2 [(.google.api.field_behavior) = REQUIRED];
  void clear_cluster_id();
  const std::string& cluster_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cluster_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cluster_id();
  PROTOBUF_NODISCARD std::string* release_cluster_id();
  void set_allocated_cluster_id(std::string* cluster_id);
  private:
  const std::string& _internal_cluster_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cluster_id(const std::string& value);
  std::string* _internal_mutable_cluster_id();
  public:

  // .google.bigtable.admin.v2.Cluster cluster = 3 [(.google.api.field_behavior) = REQUIRED];
  bool has_cluster() const;
  private:
  bool _internal_has_cluster() const;
  public:
  void clear_cluster();
  const ::google::bigtable::admin::v2::Cluster& cluster() const;
  PROTOBUF_NODISCARD ::google::bigtable::admin::v2::Cluster* release_cluster();
  ::google::bigtable::admin::v2::Cluster* mutable_cluster();
  void set_allocated_cluster(::google::bigtable::admin::v2::Cluster* cluster);
  private:
  const ::google::bigtable::admin::v2::Cluster& _internal_cluster() const;
  ::google::bigtable::admin::v2::Cluster* _internal_mutable_cluster();
  public:
  void unsafe_arena_set_allocated_cluster(
      ::google::bigtable::admin::v2::Cluster* cluster);
  ::google::bigtable::admin::v2::Cluster* unsafe_arena_release_cluster();

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.v2.CreateClusterRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cluster_id_;
    ::google::bigtable::admin::v2::Cluster* cluster_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fbigtable_2fadmin_2fv2_2fbigtable_5finstance_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class GetClusterRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.v2.GetClusterRequest) */ {
 public:
  inline GetClusterRequest() : GetClusterRequest(nullptr) {}
  ~GetClusterRequest() override;
  explicit PROTOBUF_CONSTEXPR GetClusterRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetClusterRequest(const GetClusterRequest& from);
  GetClusterRequest(GetClusterRequest&& from) noexcept
    : GetClusterRequest() {
    *this = ::std::move(from);
  }

  inline GetClusterRequest& operator=(const GetClusterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetClusterRequest& operator=(GetClusterRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetClusterRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetClusterRequest* internal_default_instance() {
    return reinterpret_cast<const GetClusterRequest*>(
               &_GetClusterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetClusterRequest& a, GetClusterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetClusterRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetClusterRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetClusterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetClusterRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetClusterRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetClusterRequest& from) {
    GetClusterRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetClusterRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.admin.v2.GetClusterRequest";
  }
  protected:
  explicit GetClusterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.v2.GetClusterRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fbigtable_2fadmin_2fv2_2fbigtable_5finstance_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class ListClustersRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.v2.ListClustersRequest) */ {
 public:
  inline ListClustersRequest() : ListClustersRequest(nullptr) {}
  ~ListClustersRequest() override;
  explicit PROTOBUF_CONSTEXPR ListClustersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListClustersRequest(const ListClustersRequest& from);
  ListClustersRequest(ListClustersRequest&& from) noexcept
    : ListClustersRequest() {
    *this = ::std::move(from);
  }

  inline ListClustersRequest& operator=(const ListClustersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListClustersRequest& operator=(ListClustersRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListClustersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListClustersRequest* internal_default_instance() {
    return reinterpret_cast<const ListClustersRequest*>(
               &_ListClustersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ListClustersRequest& a, ListClustersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListClustersRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListClustersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListClustersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListClustersRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListClustersRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListClustersRequest& from) {
    ListClustersRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListClustersRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.admin.v2.ListClustersRequest";
  }
  protected:
  explicit ListClustersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 2;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.v2.ListClustersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fbigtable_2fadmin_2fv2_2fbigtable_5finstance_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class ListClustersResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.v2.ListClustersResponse) */ {
 public:
  inline ListClustersResponse() : ListClustersResponse(nullptr) {}
  ~ListClustersResponse() override;
  explicit PROTOBUF_CONSTEXPR ListClustersResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListClustersResponse(const ListClustersResponse& from);
  ListClustersResponse(ListClustersResponse&& from) noexcept
    : ListClustersResponse() {
    *this = ::std::move(from);
  }

  inline ListClustersResponse& operator=(const ListClustersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListClustersResponse& operator=(ListClustersResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListClustersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListClustersResponse* internal_default_instance() {
    return reinterpret_cast<const ListClustersResponse*>(
               &_ListClustersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ListClustersResponse& a, ListClustersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListClustersResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListClustersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListClustersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListClustersResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListClustersResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListClustersResponse& from) {
    ListClustersResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListClustersResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.admin.v2.ListClustersResponse";
  }
  protected:
  explicit ListClustersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClustersFieldNumber = 1,
    kFailedLocationsFieldNumber = 2,
    kNextPageTokenFieldNumber = 3,
  };
  // repeated .google.bigtable.admin.v2.Cluster clusters = 1;
  int clusters_size() const;
  private:
  int _internal_clusters_size() const;
  public:
  void clear_clusters();
  ::google::bigtable::admin::v2::Cluster* mutable_clusters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::admin::v2::Cluster >*
      mutable_clusters();
  private:
  const ::google::bigtable::admin::v2::Cluster& _internal_clusters(int index) const;
  ::google::bigtable::admin::v2::Cluster* _internal_add_clusters();
  public:
  const ::google::bigtable::admin::v2::Cluster& clusters(int index) const;
  ::google::bigtable::admin::v2::Cluster* add_clusters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::admin::v2::Cluster >&
      clusters() const;

  // repeated string failed_locations = 2;
  int failed_locations_size() const;
  private:
  int _internal_failed_locations_size() const;
  public:
  void clear_failed_locations();
  const std::string& failed_locations(int index) const;
  std::string* mutable_failed_locations(int index);
  void set_failed_locations(int index, const std::string& value);
  void set_failed_locations(int index, std::string&& value);
  void set_failed_locations(int index, const char* value);
  void set_failed_locations(int index, const char* value, size_t size);
  std::string* add_failed_locations();
  void add_failed_locations(const std::string& value);
  void add_failed_locations(std::string&& value);
  void add_failed_locations(const char* value);
  void add_failed_locations(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& failed_locations() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_failed_locations();
  private:
  const std::string& _internal_failed_locations(int index) const;
  std::string* _internal_add_failed_locations();
  public:

  // string next_page_token = 3;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.v2.ListClustersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::admin::v2::Cluster > clusters_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> failed_locations_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fbigtable_2fadmin_2fv2_2fbigtable_5finstance_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class DeleteClusterRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.v2.DeleteClusterRequest) */ {
 public:
  inline DeleteClusterRequest() : DeleteClusterRequest(nullptr) {}
  ~DeleteClusterRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteClusterRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteClusterRequest(const DeleteClusterRequest& from);
  DeleteClusterRequest(DeleteClusterRequest&& from) noexcept
    : DeleteClusterRequest() {
    *this = ::std::move(from);
  }

  inline DeleteClusterRequest& operator=(const DeleteClusterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteClusterRequest& operator=(DeleteClusterRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteClusterRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteClusterRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteClusterRequest*>(
               &_DeleteClusterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(DeleteClusterRequest& a, DeleteClusterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteClusterRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteClusterRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteClusterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteClusterRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteClusterRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteClusterRequest& from) {
    DeleteClusterRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteClusterRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.admin.v2.DeleteClusterRequest";
  }
  protected:
  explicit DeleteClusterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.v2.DeleteClusterRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fbigtable_2fadmin_2fv2_2fbigtable_5finstance_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class CreateInstanceMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.v2.CreateInstanceMetadata) */ {
 public:
  inline CreateInstanceMetadata() : CreateInstanceMetadata(nullptr) {}
  ~CreateInstanceMetadata() override;
  explicit PROTOBUF_CONSTEXPR CreateInstanceMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateInstanceMetadata(const CreateInstanceMetadata& from);
  CreateInstanceMetadata(CreateInstanceMetadata&& from) noexcept
    : CreateInstanceMetadata() {
    *this = ::std::move(from);
  }

  inline CreateInstanceMetadata& operator=(const CreateInstanceMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateInstanceMetadata& operator=(CreateInstanceMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateInstanceMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateInstanceMetadata* internal_default_instance() {
    return reinterpret_cast<const CreateInstanceMetadata*>(
               &_CreateInstanceMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CreateInstanceMetadata& a, CreateInstanceMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateInstanceMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateInstanceMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateInstanceMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateInstanceMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateInstanceMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateInstanceMetadata& from) {
    CreateInstanceMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateInstanceMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.admin.v2.CreateInstanceMetadata";
  }
  protected:
  explicit CreateInstanceMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOriginalRequestFieldNumber = 1,
    kRequestTimeFieldNumber = 2,
    kFinishTimeFieldNumber = 3,
  };
  // .google.bigtable.admin.v2.CreateInstanceRequest original_request = 1;
  bool has_original_request() const;
  private:
  bool _internal_has_original_request() const;
  public:
  void clear_original_request();
  const ::google::bigtable::admin::v2::CreateInstanceRequest& original_request() const;
  PROTOBUF_NODISCARD ::google::bigtable::admin::v2::CreateInstanceRequest* release_original_request();
  ::google::bigtable::admin::v2::CreateInstanceRequest* mutable_original_request();
  void set_allocated_original_request(::google::bigtable::admin::v2::CreateInstanceRequest* original_request);
  private:
  const ::google::bigtable::admin::v2::CreateInstanceRequest& _internal_original_request() const;
  ::google::bigtable::admin::v2::CreateInstanceRequest* _internal_mutable_original_request();
  public:
  void unsafe_arena_set_allocated_original_request(
      ::google::bigtable::admin::v2::CreateInstanceRequest* original_request);
  ::google::bigtable::admin::v2::CreateInstanceRequest* unsafe_arena_release_original_request();

  // .google.protobuf.Timestamp request_time = 2;
  bool has_request_time() const;
  private:
  bool _internal_has_request_time() const;
  public:
  void clear_request_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& request_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_request_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_request_time();
  void set_allocated_request_time(::PROTOBUF_NAMESPACE_ID::Timestamp* request_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_request_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_request_time();
  public:
  void unsafe_arena_set_allocated_request_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* request_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_request_time();

  // .google.protobuf.Timestamp finish_time = 3;
  bool has_finish_time() const;
  private:
  bool _internal_has_finish_time() const;
  public:
  void clear_finish_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& finish_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_finish_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_finish_time();
  void set_allocated_finish_time(::PROTOBUF_NAMESPACE_ID::Timestamp* finish_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_finish_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_finish_time();
  public:
  void unsafe_arena_set_allocated_finish_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* finish_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_finish_time();

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.v2.CreateInstanceMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::bigtable::admin::v2::CreateInstanceRequest* original_request_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* request_time_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* finish_time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fbigtable_2fadmin_2fv2_2fbigtable_5finstance_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class UpdateInstanceMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.v2.UpdateInstanceMetadata) */ {
 public:
  inline UpdateInstanceMetadata() : UpdateInstanceMetadata(nullptr) {}
  ~UpdateInstanceMetadata() override;
  explicit PROTOBUF_CONSTEXPR UpdateInstanceMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateInstanceMetadata(const UpdateInstanceMetadata& from);
  UpdateInstanceMetadata(UpdateInstanceMetadata&& from) noexcept
    : UpdateInstanceMetadata() {
    *this = ::std::move(from);
  }

  inline UpdateInstanceMetadata& operator=(const UpdateInstanceMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateInstanceMetadata& operator=(UpdateInstanceMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateInstanceMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateInstanceMetadata* internal_default_instance() {
    return reinterpret_cast<const UpdateInstanceMetadata*>(
               &_UpdateInstanceMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(UpdateInstanceMetadata& a, UpdateInstanceMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateInstanceMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateInstanceMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateInstanceMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateInstanceMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateInstanceMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateInstanceMetadata& from) {
    UpdateInstanceMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateInstanceMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.admin.v2.UpdateInstanceMetadata";
  }
  protected:
  explicit UpdateInstanceMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOriginalRequestFieldNumber = 1,
    kRequestTimeFieldNumber = 2,
    kFinishTimeFieldNumber = 3,
  };
  // .google.bigtable.admin.v2.PartialUpdateInstanceRequest original_request = 1;
  bool has_original_request() const;
  private:
  bool _internal_has_original_request() const;
  public:
  void clear_original_request();
  const ::google::bigtable::admin::v2::PartialUpdateInstanceRequest& original_request() const;
  PROTOBUF_NODISCARD ::google::bigtable::admin::v2::PartialUpdateInstanceRequest* release_original_request();
  ::google::bigtable::admin::v2::PartialUpdateInstanceRequest* mutable_original_request();
  void set_allocated_original_request(::google::bigtable::admin::v2::PartialUpdateInstanceRequest* original_request);
  private:
  const ::google::bigtable::admin::v2::PartialUpdateInstanceRequest& _internal_original_request() const;
  ::google::bigtable::admin::v2::PartialUpdateInstanceRequest* _internal_mutable_original_request();
  public:
  void unsafe_arena_set_allocated_original_request(
      ::google::bigtable::admin::v2::PartialUpdateInstanceRequest* original_request);
  ::google::bigtable::admin::v2::PartialUpdateInstanceRequest* unsafe_arena_release_original_request();

  // .google.protobuf.Timestamp request_time = 2;
  bool has_request_time() const;
  private:
  bool _internal_has_request_time() const;
  public:
  void clear_request_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& request_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_request_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_request_time();
  void set_allocated_request_time(::PROTOBUF_NAMESPACE_ID::Timestamp* request_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_request_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_request_time();
  public:
  void unsafe_arena_set_allocated_request_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* request_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_request_time();

  // .google.protobuf.Timestamp finish_time = 3;
  bool has_finish_time() const;
  private:
  bool _internal_has_finish_time() const;
  public:
  void clear_finish_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& finish_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_finish_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_finish_time();
  void set_allocated_finish_time(::PROTOBUF_NAMESPACE_ID::Timestamp* finish_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_finish_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_finish_time();
  public:
  void unsafe_arena_set_allocated_finish_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* finish_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_finish_time();

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.v2.UpdateInstanceMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::bigtable::admin::v2::PartialUpdateInstanceRequest* original_request_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* request_time_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* finish_time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fbigtable_2fadmin_2fv2_2fbigtable_5finstance_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class CreateClusterMetadata_TableProgress final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.v2.CreateClusterMetadata.TableProgress) */ {
 public:
  inline CreateClusterMetadata_TableProgress() : CreateClusterMetadata_TableProgress(nullptr) {}
  ~CreateClusterMetadata_TableProgress() override;
  explicit PROTOBUF_CONSTEXPR CreateClusterMetadata_TableProgress(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateClusterMetadata_TableProgress(const CreateClusterMetadata_TableProgress& from);
  CreateClusterMetadata_TableProgress(CreateClusterMetadata_TableProgress&& from) noexcept
    : CreateClusterMetadata_TableProgress() {
    *this = ::std::move(from);
  }

  inline CreateClusterMetadata_TableProgress& operator=(const CreateClusterMetadata_TableProgress& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateClusterMetadata_TableProgress& operator=(CreateClusterMetadata_TableProgress&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateClusterMetadata_TableProgress& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateClusterMetadata_TableProgress* internal_default_instance() {
    return reinterpret_cast<const CreateClusterMetadata_TableProgress*>(
               &_CreateClusterMetadata_TableProgress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CreateClusterMetadata_TableProgress& a, CreateClusterMetadata_TableProgress& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateClusterMetadata_TableProgress* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateClusterMetadata_TableProgress* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateClusterMetadata_TableProgress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateClusterMetadata_TableProgress>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateClusterMetadata_TableProgress& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateClusterMetadata_TableProgress& from) {
    CreateClusterMetadata_TableProgress::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateClusterMetadata_TableProgress* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.admin.v2.CreateClusterMetadata.TableProgress";
  }
  protected:
  explicit CreateClusterMetadata_TableProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CreateClusterMetadata_TableProgress_State State;
  static constexpr State STATE_UNSPECIFIED =
    CreateClusterMetadata_TableProgress_State_STATE_UNSPECIFIED;
  static constexpr State PENDING =
    CreateClusterMetadata_TableProgress_State_PENDING;
  static constexpr State COPYING =
    CreateClusterMetadata_TableProgress_State_COPYING;
  static constexpr State COMPLETED =
    CreateClusterMetadata_TableProgress_State_COMPLETED;
  static constexpr State CANCELLED =
    CreateClusterMetadata_TableProgress_State_CANCELLED;
  static inline bool State_IsValid(int value) {
    return CreateClusterMetadata_TableProgress_State_IsValid(value);
  }
  static constexpr State State_MIN =
    CreateClusterMetadata_TableProgress_State_State_MIN;
  static constexpr State State_MAX =
    CreateClusterMetadata_TableProgress_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    CreateClusterMetadata_TableProgress_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return CreateClusterMetadata_TableProgress_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return CreateClusterMetadata_TableProgress_State_Name(enum_t_value);
  }
  static inline bool State_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      State* value) {
    return CreateClusterMetadata_TableProgress_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEstimatedSizeBytesFieldNumber = 2,
    kEstimatedCopiedBytesFieldNumber = 3,
    kStateFieldNumber = 4,
  };
  // int64 estimated_size_bytes = 2;
  void clear_estimated_size_bytes();
  int64_t estimated_size_bytes() const;
  void set_estimated_size_bytes(int64_t value);
  private:
  int64_t _internal_estimated_size_bytes() const;
  void _internal_set_estimated_size_bytes(int64_t value);
  public:

  // int64 estimated_copied_bytes = 3;
  void clear_estimated_copied_bytes();
  int64_t estimated_copied_bytes() const;
  void set_estimated_copied_bytes(int64_t value);
  private:
  int64_t _internal_estimated_copied_bytes() const;
  void _internal_set_estimated_copied_bytes(int64_t value);
  public:

  // .google.bigtable.admin.v2.CreateClusterMetadata.TableProgress.State state = 4;
  void clear_state();
  ::google::bigtable::admin::v2::CreateClusterMetadata_TableProgress_State state() const;
  void set_state(::google::bigtable::admin::v2::CreateClusterMetadata_TableProgress_State value);
  private:
  ::google::bigtable::admin::v2::CreateClusterMetadata_TableProgress_State _internal_state() const;
  void _internal_set_state(::google::bigtable::admin::v2::CreateClusterMetadata_TableProgress_State value);
  public:

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.v2.CreateClusterMetadata.TableProgress)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t estimated_size_bytes_;
    int64_t estimated_copied_bytes_;
    int state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fbigtable_2fadmin_2fv2_2fbigtable_5finstance_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class CreateClusterMetadata_TablesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CreateClusterMetadata_TablesEntry_DoNotUse, 
    std::string, ::google::bigtable::admin::v2::CreateClusterMetadata_TableProgress,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CreateClusterMetadata_TablesEntry_DoNotUse, 
    std::string, ::google::bigtable::admin::v2::CreateClusterMetadata_TableProgress,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  CreateClusterMetadata_TablesEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR CreateClusterMetadata_TablesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CreateClusterMetadata_TablesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CreateClusterMetadata_TablesEntry_DoNotUse& other);
  static const CreateClusterMetadata_TablesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CreateClusterMetadata_TablesEntry_DoNotUse*>(&_CreateClusterMetadata_TablesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.bigtable.admin.v2.CreateClusterMetadata.TablesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fbigtable_2fadmin_2fv2_2fbigtable_5finstance_5fadmin_2eproto;
};

// -------------------------------------------------------------------

class CreateClusterMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.v2.CreateClusterMetadata) */ {
 public:
  inline CreateClusterMetadata() : CreateClusterMetadata(nullptr) {}
  ~CreateClusterMetadata() override;
  explicit PROTOBUF_CONSTEXPR CreateClusterMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateClusterMetadata(const CreateClusterMetadata& from);
  CreateClusterMetadata(CreateClusterMetadata&& from) noexcept
    : CreateClusterMetadata() {
    *this = ::std::move(from);
  }

  inline CreateClusterMetadata& operator=(const CreateClusterMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateClusterMetadata& operator=(CreateClusterMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateClusterMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateClusterMetadata* internal_default_instance() {
    return reinterpret_cast<const CreateClusterMetadata*>(
               &_CreateClusterMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CreateClusterMetadata& a, CreateClusterMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateClusterMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateClusterMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateClusterMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateClusterMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateClusterMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateClusterMetadata& from) {
    CreateClusterMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateClusterMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.admin.v2.CreateClusterMetadata";
  }
  protected:
  explicit CreateClusterMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CreateClusterMetadata_TableProgress TableProgress;

  // accessors -------------------------------------------------------

  enum : int {
    kTablesFieldNumber = 4,
    kOriginalRequestFieldNumber = 1,
    kRequestTimeFieldNumber = 2,
    kFinishTimeFieldNumber = 3,
  };
  // map<string, .google.bigtable.admin.v2.CreateClusterMetadata.TableProgress> tables = 4;
  int tables_size() const;
  private:
  int _internal_tables_size() const;
  public:
  void clear_tables();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::google::bigtable::admin::v2::CreateClusterMetadata_TableProgress >&
      _internal_tables() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::google::bigtable::admin::v2::CreateClusterMetadata_TableProgress >*
      _internal_mutable_tables();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::google::bigtable::admin::v2::CreateClusterMetadata_TableProgress >&
      tables() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::google::bigtable::admin::v2::CreateClusterMetadata_TableProgress >*
      mutable_tables();

  // .google.bigtable.admin.v2.CreateClusterRequest original_request = 1;
  bool has_original_request() const;
  private:
  bool _internal_has_original_request() const;
  public:
  void clear_original_request();
  const ::google::bigtable::admin::v2::CreateClusterRequest& original_request() const;
  PROTOBUF_NODISCARD ::google::bigtable::admin::v2::CreateClusterRequest* release_original_request();
  ::google::bigtable::admin::v2::CreateClusterRequest* mutable_original_request();
  void set_allocated_original_request(::google::bigtable::admin::v2::CreateClusterRequest* original_request);
  private:
  const ::google::bigtable::admin::v2::CreateClusterRequest& _internal_original_request() const;
  ::google::bigtable::admin::v2::CreateClusterRequest* _internal_mutable_original_request();
  public:
  void unsafe_arena_set_allocated_original_request(
      ::google::bigtable::admin::v2::CreateClusterRequest* original_request);
  ::google::bigtable::admin::v2::CreateClusterRequest* unsafe_arena_release_original_request();

  // .google.protobuf.Timestamp request_time = 2;
  bool has_request_time() const;
  private:
  bool _internal_has_request_time() const;
  public:
  void clear_request_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& request_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_request_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_request_time();
  void set_allocated_request_time(::PROTOBUF_NAMESPACE_ID::Timestamp* request_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_request_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_request_time();
  public:
  void unsafe_arena_set_allocated_request_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* request_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_request_time();

  // .google.protobuf.Timestamp finish_time = 3;
  bool has_finish_time() const;
  private:
  bool _internal_has_finish_time() const;
  public:
  void clear_finish_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& finish_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_finish_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_finish_time();
  void set_allocated_finish_time(::PROTOBUF_NAMESPACE_ID::Timestamp* finish_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_finish_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_finish_time();
  public:
  void unsafe_arena_set_allocated_finish_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* finish_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_finish_time();

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.v2.CreateClusterMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        CreateClusterMetadata_TablesEntry_DoNotUse,
        std::string, ::google::bigtable::admin::v2::CreateClusterMetadata_TableProgress,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> tables_;
    ::google::bigtable::admin::v2::CreateClusterRequest* original_request_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* request_time_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* finish_time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fbigtable_2fadmin_2fv2_2fbigtable_5finstance_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class UpdateClusterMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.v2.UpdateClusterMetadata) */ {
 public:
  inline UpdateClusterMetadata() : UpdateClusterMetadata(nullptr) {}
  ~UpdateClusterMetadata() override;
  explicit PROTOBUF_CONSTEXPR UpdateClusterMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateClusterMetadata(const UpdateClusterMetadata& from);
  UpdateClusterMetadata(UpdateClusterMetadata&& from) noexcept
    : UpdateClusterMetadata() {
    *this = ::std::move(from);
  }

  inline UpdateClusterMetadata& operator=(const UpdateClusterMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateClusterMetadata& operator=(UpdateClusterMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateClusterMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateClusterMetadata* internal_default_instance() {
    return reinterpret_cast<const UpdateClusterMetadata*>(
               &_UpdateClusterMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(UpdateClusterMetadata& a, UpdateClusterMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateClusterMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateClusterMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateClusterMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateClusterMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateClusterMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateClusterMetadata& from) {
    UpdateClusterMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateClusterMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.admin.v2.UpdateClusterMetadata";
  }
  protected:
  explicit UpdateClusterMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOriginalRequestFieldNumber = 1,
    kRequestTimeFieldNumber = 2,
    kFinishTimeFieldNumber = 3,
  };
  // .google.bigtable.admin.v2.Cluster original_request = 1;
  bool has_original_request() const;
  private:
  bool _internal_has_original_request() const;
  public:
  void clear_original_request();
  const ::google::bigtable::admin::v2::Cluster& original_request() const;
  PROTOBUF_NODISCARD ::google::bigtable::admin::v2::Cluster* release_original_request();
  ::google::bigtable::admin::v2::Cluster* mutable_original_request();
  void set_allocated_original_request(::google::bigtable::admin::v2::Cluster* original_request);
  private:
  const ::google::bigtable::admin::v2::Cluster& _internal_original_request() const;
  ::google::bigtable::admin::v2::Cluster* _internal_mutable_original_request();
  public:
  void unsafe_arena_set_allocated_original_request(
      ::google::bigtable::admin::v2::Cluster* original_request);
  ::google::bigtable::admin::v2::Cluster* unsafe_arena_release_original_request();

  // .google.protobuf.Timestamp request_time = 2;
  bool has_request_time() const;
  private:
  bool _internal_has_request_time() const;
  public:
  void clear_request_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& request_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_request_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_request_time();
  void set_allocated_request_time(::PROTOBUF_NAMESPACE_ID::Timestamp* request_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_request_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_request_time();
  public:
  void unsafe_arena_set_allocated_request_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* request_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_request_time();

  // .google.protobuf.Timestamp finish_time = 3;
  bool has_finish_time() const;
  private:
  bool _internal_has_finish_time() const;
  public:
  void clear_finish_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& finish_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_finish_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_finish_time();
  void set_allocated_finish_time(::PROTOBUF_NAMESPACE_ID::Timestamp* finish_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_finish_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_finish_time();
  public:
  void unsafe_arena_set_allocated_finish_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* finish_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_finish_time();

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.v2.UpdateClusterMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::bigtable::admin::v2::Cluster* original_request_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* request_time_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* finish_time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fbigtable_2fadmin_2fv2_2fbigtable_5finstance_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class PartialUpdateClusterMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.v2.PartialUpdateClusterMetadata) */ {
 public:
  inline PartialUpdateClusterMetadata() : PartialUpdateClusterMetadata(nullptr) {}
  ~PartialUpdateClusterMetadata() override;
  explicit PROTOBUF_CONSTEXPR PartialUpdateClusterMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PartialUpdateClusterMetadata(const PartialUpdateClusterMetadata& from);
  PartialUpdateClusterMetadata(PartialUpdateClusterMetadata&& from) noexcept
    : PartialUpdateClusterMetadata() {
    *this = ::std::move(from);
  }

  inline PartialUpdateClusterMetadata& operator=(const PartialUpdateClusterMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline PartialUpdateClusterMetadata& operator=(PartialUpdateClusterMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PartialUpdateClusterMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const PartialUpdateClusterMetadata* internal_default_instance() {
    return reinterpret_cast<const PartialUpdateClusterMetadata*>(
               &_PartialUpdateClusterMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(PartialUpdateClusterMetadata& a, PartialUpdateClusterMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(PartialUpdateClusterMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PartialUpdateClusterMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PartialUpdateClusterMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PartialUpdateClusterMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PartialUpdateClusterMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PartialUpdateClusterMetadata& from) {
    PartialUpdateClusterMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PartialUpdateClusterMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.admin.v2.PartialUpdateClusterMetadata";
  }
  protected:
  explicit PartialUpdateClusterMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestTimeFieldNumber = 1,
    kFinishTimeFieldNumber = 2,
    kOriginalRequestFieldNumber = 3,
  };
  // .google.protobuf.Timestamp request_time = 1;
  bool has_request_time() const;
  private:
  bool _internal_has_request_time() const;
  public:
  void clear_request_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& request_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_request_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_request_time();
  void set_allocated_request_time(::PROTOBUF_NAMESPACE_ID::Timestamp* request_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_request_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_request_time();
  public:
  void unsafe_arena_set_allocated_request_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* request_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_request_time();

  // .google.protobuf.Timestamp finish_time = 2;
  bool has_finish_time() const;
  private:
  bool _internal_has_finish_time() const;
  public:
  void clear_finish_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& finish_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_finish_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_finish_time();
  void set_allocated_finish_time(::PROTOBUF_NAMESPACE_ID::Timestamp* finish_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_finish_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_finish_time();
  public:
  void unsafe_arena_set_allocated_finish_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* finish_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_finish_time();

  // .google.bigtable.admin.v2.PartialUpdateClusterRequest original_request = 3;
  bool has_original_request() const;
  private:
  bool _internal_has_original_request() const;
  public:
  void clear_original_request();
  const ::google::bigtable::admin::v2::PartialUpdateClusterRequest& original_request() const;
  PROTOBUF_NODISCARD ::google::bigtable::admin::v2::PartialUpdateClusterRequest* release_original_request();
  ::google::bigtable::admin::v2::PartialUpdateClusterRequest* mutable_original_request();
  void set_allocated_original_request(::google::bigtable::admin::v2::PartialUpdateClusterRequest* original_request);
  private:
  const ::google::bigtable::admin::v2::PartialUpdateClusterRequest& _internal_original_request() const;
  ::google::bigtable::admin::v2::PartialUpdateClusterRequest* _internal_mutable_original_request();
  public:
  void unsafe_arena_set_allocated_original_request(
      ::google::bigtable::admin::v2::PartialUpdateClusterRequest* original_request);
  ::google::bigtable::admin::v2::PartialUpdateClusterRequest* unsafe_arena_release_original_request();

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.v2.PartialUpdateClusterMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::Timestamp* request_time_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* finish_time_;
    ::google::bigtable::admin::v2::PartialUpdateClusterRequest* original_request_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fbigtable_2fadmin_2fv2_2fbigtable_5finstance_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class PartialUpdateClusterRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.v2.PartialUpdateClusterRequest) */ {
 public:
  inline PartialUpdateClusterRequest() : PartialUpdateClusterRequest(nullptr) {}
  ~PartialUpdateClusterRequest() override;
  explicit PROTOBUF_CONSTEXPR PartialUpdateClusterRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PartialUpdateClusterRequest(const PartialUpdateClusterRequest& from);
  PartialUpdateClusterRequest(PartialUpdateClusterRequest&& from) noexcept
    : PartialUpdateClusterRequest() {
    *this = ::std::move(from);
  }

  inline PartialUpdateClusterRequest& operator=(const PartialUpdateClusterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PartialUpdateClusterRequest& operator=(PartialUpdateClusterRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PartialUpdateClusterRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PartialUpdateClusterRequest* internal_default_instance() {
    return reinterpret_cast<const PartialUpdateClusterRequest*>(
               &_PartialUpdateClusterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(PartialUpdateClusterRequest& a, PartialUpdateClusterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PartialUpdateClusterRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PartialUpdateClusterRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PartialUpdateClusterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PartialUpdateClusterRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PartialUpdateClusterRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PartialUpdateClusterRequest& from) {
    PartialUpdateClusterRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PartialUpdateClusterRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.admin.v2.PartialUpdateClusterRequest";
  }
  protected:
  explicit PartialUpdateClusterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClusterFieldNumber = 1,
    kUpdateMaskFieldNumber = 2,
  };
  // .google.bigtable.admin.v2.Cluster cluster = 1 [(.google.api.field_behavior) = REQUIRED];
  bool has_cluster() const;
  private:
  bool _internal_has_cluster() const;
  public:
  void clear_cluster();
  const ::google::bigtable::admin::v2::Cluster& cluster() const;
  PROTOBUF_NODISCARD ::google::bigtable::admin::v2::Cluster* release_cluster();
  ::google::bigtable::admin::v2::Cluster* mutable_cluster();
  void set_allocated_cluster(::google::bigtable::admin::v2::Cluster* cluster);
  private:
  const ::google::bigtable::admin::v2::Cluster& _internal_cluster() const;
  ::google::bigtable::admin::v2::Cluster* _internal_mutable_cluster();
  public:
  void unsafe_arena_set_allocated_cluster(
      ::google::bigtable::admin::v2::Cluster* cluster);
  ::google::bigtable::admin::v2::Cluster* unsafe_arena_release_cluster();

  // .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.v2.PartialUpdateClusterRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::bigtable::admin::v2::Cluster* cluster_;
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fbigtable_2fadmin_2fv2_2fbigtable_5finstance_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class CreateAppProfileRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.v2.CreateAppProfileRequest) */ {
 public:
  inline CreateAppProfileRequest() : CreateAppProfileRequest(nullptr) {}
  ~CreateAppProfileRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateAppProfileRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateAppProfileRequest(const CreateAppProfileRequest& from);
  CreateAppProfileRequest(CreateAppProfileRequest&& from) noexcept
    : CreateAppProfileRequest() {
    *this = ::std::move(from);
  }

  inline CreateAppProfileRequest& operator=(const CreateAppProfileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateAppProfileRequest& operator=(CreateAppProfileRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateAppProfileRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateAppProfileRequest* internal_default_instance() {
    return reinterpret_cast<const CreateAppProfileRequest*>(
               &_CreateAppProfileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CreateAppProfileRequest& a, CreateAppProfileRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateAppProfileRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateAppProfileRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateAppProfileRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateAppProfileRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateAppProfileRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateAppProfileRequest& from) {
    CreateAppProfileRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateAppProfileRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.admin.v2.CreateAppProfileRequest";
  }
  protected:
  explicit CreateAppProfileRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kAppProfileIdFieldNumber = 2,
    kAppProfileFieldNumber = 3,
    kIgnoreWarningsFieldNumber = 4,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string app_profile_id = 2 [(.google.api.field_behavior) = REQUIRED];
  void clear_app_profile_id();
  const std::string& app_profile_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_app_profile_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_app_profile_id();
  PROTOBUF_NODISCARD std::string* release_app_profile_id();
  void set_allocated_app_profile_id(std::string* app_profile_id);
  private:
  const std::string& _internal_app_profile_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_profile_id(const std::string& value);
  std::string* _internal_mutable_app_profile_id();
  public:

  // .google.bigtable.admin.v2.AppProfile app_profile = 3 [(.google.api.field_behavior) = REQUIRED];
  bool has_app_profile() const;
  private:
  bool _internal_has_app_profile() const;
  public:
  void clear_app_profile();
  const ::google::bigtable::admin::v2::AppProfile& app_profile() const;
  PROTOBUF_NODISCARD ::google::bigtable::admin::v2::AppProfile* release_app_profile();
  ::google::bigtable::admin::v2::AppProfile* mutable_app_profile();
  void set_allocated_app_profile(::google::bigtable::admin::v2::AppProfile* app_profile);
  private:
  const ::google::bigtable::admin::v2::AppProfile& _internal_app_profile() const;
  ::google::bigtable::admin::v2::AppProfile* _internal_mutable_app_profile();
  public:
  void unsafe_arena_set_allocated_app_profile(
      ::google::bigtable::admin::v2::AppProfile* app_profile);
  ::google::bigtable::admin::v2::AppProfile* unsafe_arena_release_app_profile();

  // bool ignore_warnings = 4;
  void clear_ignore_warnings();
  bool ignore_warnings() const;
  void set_ignore_warnings(bool value);
  private:
  bool _internal_ignore_warnings() const;
  void _internal_set_ignore_warnings(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.v2.CreateAppProfileRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_profile_id_;
    ::google::bigtable::admin::v2::AppProfile* app_profile_;
    bool ignore_warnings_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fbigtable_2fadmin_2fv2_2fbigtable_5finstance_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class GetAppProfileRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.v2.GetAppProfileRequest) */ {
 public:
  inline GetAppProfileRequest() : GetAppProfileRequest(nullptr) {}
  ~GetAppProfileRequest() override;
  explicit PROTOBUF_CONSTEXPR GetAppProfileRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAppProfileRequest(const GetAppProfileRequest& from);
  GetAppProfileRequest(GetAppProfileRequest&& from) noexcept
    : GetAppProfileRequest() {
    *this = ::std::move(from);
  }

  inline GetAppProfileRequest& operator=(const GetAppProfileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAppProfileRequest& operator=(GetAppProfileRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAppProfileRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAppProfileRequest* internal_default_instance() {
    return reinterpret_cast<const GetAppProfileRequest*>(
               &_GetAppProfileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(GetAppProfileRequest& a, GetAppProfileRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAppProfileRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAppProfileRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAppProfileRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAppProfileRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetAppProfileRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetAppProfileRequest& from) {
    GetAppProfileRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAppProfileRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.admin.v2.GetAppProfileRequest";
  }
  protected:
  explicit GetAppProfileRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.v2.GetAppProfileRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fbigtable_2fadmin_2fv2_2fbigtable_5finstance_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class ListAppProfilesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.v2.ListAppProfilesRequest) */ {
 public:
  inline ListAppProfilesRequest() : ListAppProfilesRequest(nullptr) {}
  ~ListAppProfilesRequest() override;
  explicit PROTOBUF_CONSTEXPR ListAppProfilesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListAppProfilesRequest(const ListAppProfilesRequest& from);
  ListAppProfilesRequest(ListAppProfilesRequest&& from) noexcept
    : ListAppProfilesRequest() {
    *this = ::std::move(from);
  }

  inline ListAppProfilesRequest& operator=(const ListAppProfilesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListAppProfilesRequest& operator=(ListAppProfilesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListAppProfilesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListAppProfilesRequest* internal_default_instance() {
    return reinterpret_cast<const ListAppProfilesRequest*>(
               &_ListAppProfilesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(ListAppProfilesRequest& a, ListAppProfilesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListAppProfilesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListAppProfilesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListAppProfilesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListAppProfilesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListAppProfilesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListAppProfilesRequest& from) {
    ListAppProfilesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListAppProfilesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.admin.v2.ListAppProfilesRequest";
  }
  protected:
  explicit ListAppProfilesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 2,
    kPageSizeFieldNumber = 3,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 2;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 3;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.v2.ListAppProfilesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
    int32_t page_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fbigtable_2fadmin_2fv2_2fbigtable_5finstance_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class ListAppProfilesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.v2.ListAppProfilesResponse) */ {
 public:
  inline ListAppProfilesResponse() : ListAppProfilesResponse(nullptr) {}
  ~ListAppProfilesResponse() override;
  explicit PROTOBUF_CONSTEXPR ListAppProfilesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListAppProfilesResponse(const ListAppProfilesResponse& from);
  ListAppProfilesResponse(ListAppProfilesResponse&& from) noexcept
    : ListAppProfilesResponse() {
    *this = ::std::move(from);
  }

  inline ListAppProfilesResponse& operator=(const ListAppProfilesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListAppProfilesResponse& operator=(ListAppProfilesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListAppProfilesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListAppProfilesResponse* internal_default_instance() {
    return reinterpret_cast<const ListAppProfilesResponse*>(
               &_ListAppProfilesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(ListAppProfilesResponse& a, ListAppProfilesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListAppProfilesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListAppProfilesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListAppProfilesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListAppProfilesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListAppProfilesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListAppProfilesResponse& from) {
    ListAppProfilesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListAppProfilesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.admin.v2.ListAppProfilesResponse";
  }
  protected:
  explicit ListAppProfilesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppProfilesFieldNumber = 1,
    kFailedLocationsFieldNumber = 3,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .google.bigtable.admin.v2.AppProfile app_profiles = 1;
  int app_profiles_size() const;
  private:
  int _internal_app_profiles_size() const;
  public:
  void clear_app_profiles();
  ::google::bigtable::admin::v2::AppProfile* mutable_app_profiles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::admin::v2::AppProfile >*
      mutable_app_profiles();
  private:
  const ::google::bigtable::admin::v2::AppProfile& _internal_app_profiles(int index) const;
  ::google::bigtable::admin::v2::AppProfile* _internal_add_app_profiles();
  public:
  const ::google::bigtable::admin::v2::AppProfile& app_profiles(int index) const;
  ::google::bigtable::admin::v2::AppProfile* add_app_profiles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::admin::v2::AppProfile >&
      app_profiles() const;

  // repeated string failed_locations = 3;
  int failed_locations_size() const;
  private:
  int _internal_failed_locations_size() const;
  public:
  void clear_failed_locations();
  const std::string& failed_locations(int index) const;
  std::string* mutable_failed_locations(int index);
  void set_failed_locations(int index, const std::string& value);
  void set_failed_locations(int index, std::string&& value);
  void set_failed_locations(int index, const char* value);
  void set_failed_locations(int index, const char* value, size_t size);
  std::string* add_failed_locations();
  void add_failed_locations(const std::string& value);
  void add_failed_locations(std::string&& value);
  void add_failed_locations(const char* value);
  void add_failed_locations(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& failed_locations() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_failed_locations();
  private:
  const std::string& _internal_failed_locations(int index) const;
  std::string* _internal_add_failed_locations();
  public:

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.v2.ListAppProfilesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::admin::v2::AppProfile > app_profiles_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> failed_locations_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fbigtable_2fadmin_2fv2_2fbigtable_5finstance_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class UpdateAppProfileRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.v2.UpdateAppProfileRequest) */ {
 public:
  inline UpdateAppProfileRequest() : UpdateAppProfileRequest(nullptr) {}
  ~UpdateAppProfileRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateAppProfileRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateAppProfileRequest(const UpdateAppProfileRequest& from);
  UpdateAppProfileRequest(UpdateAppProfileRequest&& from) noexcept
    : UpdateAppProfileRequest() {
    *this = ::std::move(from);
  }

  inline UpdateAppProfileRequest& operator=(const UpdateAppProfileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateAppProfileRequest& operator=(UpdateAppProfileRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateAppProfileRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateAppProfileRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateAppProfileRequest*>(
               &_UpdateAppProfileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(UpdateAppProfileRequest& a, UpdateAppProfileRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateAppProfileRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateAppProfileRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateAppProfileRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateAppProfileRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateAppProfileRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateAppProfileRequest& from) {
    UpdateAppProfileRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateAppProfileRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.admin.v2.UpdateAppProfileRequest";
  }
  protected:
  explicit UpdateAppProfileRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppProfileFieldNumber = 1,
    kUpdateMaskFieldNumber = 2,
    kIgnoreWarningsFieldNumber = 3,
  };
  // .google.bigtable.admin.v2.AppProfile app_profile = 1 [(.google.api.field_behavior) = REQUIRED];
  bool has_app_profile() const;
  private:
  bool _internal_has_app_profile() const;
  public:
  void clear_app_profile();
  const ::google::bigtable::admin::v2::AppProfile& app_profile() const;
  PROTOBUF_NODISCARD ::google::bigtable::admin::v2::AppProfile* release_app_profile();
  ::google::bigtable::admin::v2::AppProfile* mutable_app_profile();
  void set_allocated_app_profile(::google::bigtable::admin::v2::AppProfile* app_profile);
  private:
  const ::google::bigtable::admin::v2::AppProfile& _internal_app_profile() const;
  ::google::bigtable::admin::v2::AppProfile* _internal_mutable_app_profile();
  public:
  void unsafe_arena_set_allocated_app_profile(
      ::google::bigtable::admin::v2::AppProfile* app_profile);
  ::google::bigtable::admin::v2::AppProfile* unsafe_arena_release_app_profile();

  // .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // bool ignore_warnings = 3;
  void clear_ignore_warnings();
  bool ignore_warnings() const;
  void set_ignore_warnings(bool value);
  private:
  bool _internal_ignore_warnings() const;
  void _internal_set_ignore_warnings(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.v2.UpdateAppProfileRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::bigtable::admin::v2::AppProfile* app_profile_;
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
    bool ignore_warnings_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fbigtable_2fadmin_2fv2_2fbigtable_5finstance_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class DeleteAppProfileRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.v2.DeleteAppProfileRequest) */ {
 public:
  inline DeleteAppProfileRequest() : DeleteAppProfileRequest(nullptr) {}
  ~DeleteAppProfileRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteAppProfileRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteAppProfileRequest(const DeleteAppProfileRequest& from);
  DeleteAppProfileRequest(DeleteAppProfileRequest&& from) noexcept
    : DeleteAppProfileRequest() {
    *this = ::std::move(from);
  }

  inline DeleteAppProfileRequest& operator=(const DeleteAppProfileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteAppProfileRequest& operator=(DeleteAppProfileRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteAppProfileRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteAppProfileRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteAppProfileRequest*>(
               &_DeleteAppProfileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(DeleteAppProfileRequest& a, DeleteAppProfileRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteAppProfileRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteAppProfileRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteAppProfileRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteAppProfileRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteAppProfileRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteAppProfileRequest& from) {
    DeleteAppProfileRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteAppProfileRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.admin.v2.DeleteAppProfileRequest";
  }
  protected:
  explicit DeleteAppProfileRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kIgnoreWarningsFieldNumber = 2,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bool ignore_warnings = 2 [(.google.api.field_behavior) = REQUIRED];
  void clear_ignore_warnings();
  bool ignore_warnings() const;
  void set_ignore_warnings(bool value);
  private:
  bool _internal_ignore_warnings() const;
  void _internal_set_ignore_warnings(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.v2.DeleteAppProfileRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    bool ignore_warnings_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fbigtable_2fadmin_2fv2_2fbigtable_5finstance_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class UpdateAppProfileMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:google.bigtable.admin.v2.UpdateAppProfileMetadata) */ {
 public:
  inline UpdateAppProfileMetadata() : UpdateAppProfileMetadata(nullptr) {}
  explicit PROTOBUF_CONSTEXPR UpdateAppProfileMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateAppProfileMetadata(const UpdateAppProfileMetadata& from);
  UpdateAppProfileMetadata(UpdateAppProfileMetadata&& from) noexcept
    : UpdateAppProfileMetadata() {
    *this = ::std::move(from);
  }

  inline UpdateAppProfileMetadata& operator=(const UpdateAppProfileMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateAppProfileMetadata& operator=(UpdateAppProfileMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateAppProfileMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateAppProfileMetadata* internal_default_instance() {
    return reinterpret_cast<const UpdateAppProfileMetadata*>(
               &_UpdateAppProfileMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(UpdateAppProfileMetadata& a, UpdateAppProfileMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateAppProfileMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateAppProfileMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateAppProfileMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateAppProfileMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const UpdateAppProfileMetadata& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const UpdateAppProfileMetadata& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.admin.v2.UpdateAppProfileMetadata";
  }
  protected:
  explicit UpdateAppProfileMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.v2.UpdateAppProfileMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_google_2fbigtable_2fadmin_2fv2_2fbigtable_5finstance_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class ListHotTabletsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.v2.ListHotTabletsRequest) */ {
 public:
  inline ListHotTabletsRequest() : ListHotTabletsRequest(nullptr) {}
  ~ListHotTabletsRequest() override;
  explicit PROTOBUF_CONSTEXPR ListHotTabletsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListHotTabletsRequest(const ListHotTabletsRequest& from);
  ListHotTabletsRequest(ListHotTabletsRequest&& from) noexcept
    : ListHotTabletsRequest() {
    *this = ::std::move(from);
  }

  inline ListHotTabletsRequest& operator=(const ListHotTabletsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListHotTabletsRequest& operator=(ListHotTabletsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListHotTabletsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListHotTabletsRequest* internal_default_instance() {
    return reinterpret_cast<const ListHotTabletsRequest*>(
               &_ListHotTabletsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(ListHotTabletsRequest& a, ListHotTabletsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListHotTabletsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListHotTabletsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListHotTabletsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListHotTabletsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListHotTabletsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListHotTabletsRequest& from) {
    ListHotTabletsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListHotTabletsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.admin.v2.ListHotTabletsRequest";
  }
  protected:
  explicit ListHotTabletsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 5,
    kStartTimeFieldNumber = 2,
    kEndTimeFieldNumber = 3,
    kPageSizeFieldNumber = 4,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 5;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // .google.protobuf.Timestamp start_time = 2;
  bool has_start_time() const;
  private:
  bool _internal_has_start_time() const;
  public:
  void clear_start_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& start_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_start_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_start_time();
  void set_allocated_start_time(::PROTOBUF_NAMESPACE_ID::Timestamp* start_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_start_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_start_time();
  public:
  void unsafe_arena_set_allocated_start_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* start_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_start_time();

  // .google.protobuf.Timestamp end_time = 3;
  bool has_end_time() const;
  private:
  bool _internal_has_end_time() const;
  public:
  void clear_end_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& end_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_end_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_end_time();
  void set_allocated_end_time(::PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_end_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_end_time();
  public:
  void unsafe_arena_set_allocated_end_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_end_time();

  // int32 page_size = 4;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.v2.ListHotTabletsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* start_time_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* end_time_;
    int32_t page_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fbigtable_2fadmin_2fv2_2fbigtable_5finstance_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class ListHotTabletsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.v2.ListHotTabletsResponse) */ {
 public:
  inline ListHotTabletsResponse() : ListHotTabletsResponse(nullptr) {}
  ~ListHotTabletsResponse() override;
  explicit PROTOBUF_CONSTEXPR ListHotTabletsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListHotTabletsResponse(const ListHotTabletsResponse& from);
  ListHotTabletsResponse(ListHotTabletsResponse&& from) noexcept
    : ListHotTabletsResponse() {
    *this = ::std::move(from);
  }

  inline ListHotTabletsResponse& operator=(const ListHotTabletsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListHotTabletsResponse& operator=(ListHotTabletsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListHotTabletsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListHotTabletsResponse* internal_default_instance() {
    return reinterpret_cast<const ListHotTabletsResponse*>(
               &_ListHotTabletsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(ListHotTabletsResponse& a, ListHotTabletsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListHotTabletsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListHotTabletsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListHotTabletsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListHotTabletsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListHotTabletsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListHotTabletsResponse& from) {
    ListHotTabletsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListHotTabletsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.admin.v2.ListHotTabletsResponse";
  }
  protected:
  explicit ListHotTabletsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHotTabletsFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .google.bigtable.admin.v2.HotTablet hot_tablets = 1;
  int hot_tablets_size() const;
  private:
  int _internal_hot_tablets_size() const;
  public:
  void clear_hot_tablets();
  ::google::bigtable::admin::v2::HotTablet* mutable_hot_tablets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::admin::v2::HotTablet >*
      mutable_hot_tablets();
  private:
  const ::google::bigtable::admin::v2::HotTablet& _internal_hot_tablets(int index) const;
  ::google::bigtable::admin::v2::HotTablet* _internal_add_hot_tablets();
  public:
  const ::google::bigtable::admin::v2::HotTablet& hot_tablets(int index) const;
  ::google::bigtable::admin::v2::HotTablet* add_hot_tablets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::admin::v2::HotTablet >&
      hot_tablets() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.v2.ListHotTabletsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::admin::v2::HotTablet > hot_tablets_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fbigtable_2fadmin_2fv2_2fbigtable_5finstance_5fadmin_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// CreateInstanceRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreateInstanceRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& CreateInstanceRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.CreateInstanceRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateInstanceRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.CreateInstanceRequest.parent)
}
inline std::string* CreateInstanceRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.CreateInstanceRequest.parent)
  return _s;
}
inline const std::string& CreateInstanceRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void CreateInstanceRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateInstanceRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateInstanceRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.CreateInstanceRequest.parent)
  return _impl_.parent_.Release();
}
inline void CreateInstanceRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.CreateInstanceRequest.parent)
}

// string instance_id = 2 [(.google.api.field_behavior) = REQUIRED];
inline void CreateInstanceRequest::clear_instance_id() {
  _impl_.instance_id_.ClearToEmpty();
}
inline const std::string& CreateInstanceRequest::instance_id() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.CreateInstanceRequest.instance_id)
  return _internal_instance_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateInstanceRequest::set_instance_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.instance_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.CreateInstanceRequest.instance_id)
}
inline std::string* CreateInstanceRequest::mutable_instance_id() {
  std::string* _s = _internal_mutable_instance_id();
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.CreateInstanceRequest.instance_id)
  return _s;
}
inline const std::string& CreateInstanceRequest::_internal_instance_id() const {
  return _impl_.instance_id_.Get();
}
inline void CreateInstanceRequest::_internal_set_instance_id(const std::string& value) {
  
  _impl_.instance_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateInstanceRequest::_internal_mutable_instance_id() {
  
  return _impl_.instance_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateInstanceRequest::release_instance_id() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.CreateInstanceRequest.instance_id)
  return _impl_.instance_id_.Release();
}
inline void CreateInstanceRequest::set_allocated_instance_id(std::string* instance_id) {
  if (instance_id != nullptr) {
    
  } else {
    
  }
  _impl_.instance_id_.SetAllocated(instance_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.instance_id_.IsDefault()) {
    _impl_.instance_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.CreateInstanceRequest.instance_id)
}

// .google.bigtable.admin.v2.Instance instance = 3 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateInstanceRequest::_internal_has_instance() const {
  return this != internal_default_instance() && _impl_.instance_ != nullptr;
}
inline bool CreateInstanceRequest::has_instance() const {
  return _internal_has_instance();
}
inline const ::google::bigtable::admin::v2::Instance& CreateInstanceRequest::_internal_instance() const {
  const ::google::bigtable::admin::v2::Instance* p = _impl_.instance_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::bigtable::admin::v2::Instance&>(
      ::google::bigtable::admin::v2::_Instance_default_instance_);
}
inline const ::google::bigtable::admin::v2::Instance& CreateInstanceRequest::instance() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.CreateInstanceRequest.instance)
  return _internal_instance();
}
inline void CreateInstanceRequest::unsafe_arena_set_allocated_instance(
    ::google::bigtable::admin::v2::Instance* instance) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.instance_);
  }
  _impl_.instance_ = instance;
  if (instance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.admin.v2.CreateInstanceRequest.instance)
}
inline ::google::bigtable::admin::v2::Instance* CreateInstanceRequest::release_instance() {
  
  ::google::bigtable::admin::v2::Instance* temp = _impl_.instance_;
  _impl_.instance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::bigtable::admin::v2::Instance* CreateInstanceRequest::unsafe_arena_release_instance() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.CreateInstanceRequest.instance)
  
  ::google::bigtable::admin::v2::Instance* temp = _impl_.instance_;
  _impl_.instance_ = nullptr;
  return temp;
}
inline ::google::bigtable::admin::v2::Instance* CreateInstanceRequest::_internal_mutable_instance() {
  
  if (_impl_.instance_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::bigtable::admin::v2::Instance>(GetArenaForAllocation());
    _impl_.instance_ = p;
  }
  return _impl_.instance_;
}
inline ::google::bigtable::admin::v2::Instance* CreateInstanceRequest::mutable_instance() {
  ::google::bigtable::admin::v2::Instance* _msg = _internal_mutable_instance();
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.CreateInstanceRequest.instance)
  return _msg;
}
inline void CreateInstanceRequest::set_allocated_instance(::google::bigtable::admin::v2::Instance* instance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.instance_);
  }
  if (instance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(instance));
    if (message_arena != submessage_arena) {
      instance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, instance, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.instance_ = instance;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.CreateInstanceRequest.instance)
}

// map<string, .google.bigtable.admin.v2.Cluster> clusters = 4 [(.google.api.field_behavior) = REQUIRED];
inline int CreateInstanceRequest::_internal_clusters_size() const {
  return _impl_.clusters_.size();
}
inline int CreateInstanceRequest::clusters_size() const {
  return _internal_clusters_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::google::bigtable::admin::v2::Cluster >&
CreateInstanceRequest::_internal_clusters() const {
  return _impl_.clusters_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::google::bigtable::admin::v2::Cluster >&
CreateInstanceRequest::clusters() const {
  // @@protoc_insertion_point(field_map:google.bigtable.admin.v2.CreateInstanceRequest.clusters)
  return _internal_clusters();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::google::bigtable::admin::v2::Cluster >*
CreateInstanceRequest::_internal_mutable_clusters() {
  return _impl_.clusters_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::google::bigtable::admin::v2::Cluster >*
CreateInstanceRequest::mutable_clusters() {
  // @@protoc_insertion_point(field_mutable_map:google.bigtable.admin.v2.CreateInstanceRequest.clusters)
  return _internal_mutable_clusters();
}

// -------------------------------------------------------------------

// GetInstanceRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetInstanceRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GetInstanceRequest::name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.GetInstanceRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetInstanceRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.GetInstanceRequest.name)
}
inline std::string* GetInstanceRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.GetInstanceRequest.name)
  return _s;
}
inline const std::string& GetInstanceRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GetInstanceRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetInstanceRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetInstanceRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.GetInstanceRequest.name)
  return _impl_.name_.Release();
}
inline void GetInstanceRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.GetInstanceRequest.name)
}

// -------------------------------------------------------------------

// ListInstancesRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListInstancesRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& ListInstancesRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.ListInstancesRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListInstancesRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.ListInstancesRequest.parent)
}
inline std::string* ListInstancesRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.ListInstancesRequest.parent)
  return _s;
}
inline const std::string& ListInstancesRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void ListInstancesRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* ListInstancesRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* ListInstancesRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.ListInstancesRequest.parent)
  return _impl_.parent_.Release();
}
inline void ListInstancesRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.ListInstancesRequest.parent)
}

// string page_token = 2;
inline void ListInstancesRequest::clear_page_token() {
  _impl_.page_token_.ClearToEmpty();
}
inline const std::string& ListInstancesRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.ListInstancesRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListInstancesRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.ListInstancesRequest.page_token)
}
inline std::string* ListInstancesRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.ListInstancesRequest.page_token)
  return _s;
}
inline const std::string& ListInstancesRequest::_internal_page_token() const {
  return _impl_.page_token_.Get();
}
inline void ListInstancesRequest::_internal_set_page_token(const std::string& value) {
  
  _impl_.page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListInstancesRequest::_internal_mutable_page_token() {
  
  return _impl_.page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListInstancesRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.ListInstancesRequest.page_token)
  return _impl_.page_token_.Release();
}
inline void ListInstancesRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  _impl_.page_token_.SetAllocated(page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.page_token_.IsDefault()) {
    _impl_.page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.ListInstancesRequest.page_token)
}

// -------------------------------------------------------------------

// ListInstancesResponse

// repeated .google.bigtable.admin.v2.Instance instances = 1;
inline int ListInstancesResponse::_internal_instances_size() const {
  return _impl_.instances_.size();
}
inline int ListInstancesResponse::instances_size() const {
  return _internal_instances_size();
}
inline ::google::bigtable::admin::v2::Instance* ListInstancesResponse::mutable_instances(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.ListInstancesResponse.instances)
  return _impl_.instances_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::admin::v2::Instance >*
ListInstancesResponse::mutable_instances() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.admin.v2.ListInstancesResponse.instances)
  return &_impl_.instances_;
}
inline const ::google::bigtable::admin::v2::Instance& ListInstancesResponse::_internal_instances(int index) const {
  return _impl_.instances_.Get(index);
}
inline const ::google::bigtable::admin::v2::Instance& ListInstancesResponse::instances(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.ListInstancesResponse.instances)
  return _internal_instances(index);
}
inline ::google::bigtable::admin::v2::Instance* ListInstancesResponse::_internal_add_instances() {
  return _impl_.instances_.Add();
}
inline ::google::bigtable::admin::v2::Instance* ListInstancesResponse::add_instances() {
  ::google::bigtable::admin::v2::Instance* _add = _internal_add_instances();
  // @@protoc_insertion_point(field_add:google.bigtable.admin.v2.ListInstancesResponse.instances)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::admin::v2::Instance >&
ListInstancesResponse::instances() const {
  // @@protoc_insertion_point(field_list:google.bigtable.admin.v2.ListInstancesResponse.instances)
  return _impl_.instances_;
}

// repeated string failed_locations = 2;
inline int ListInstancesResponse::_internal_failed_locations_size() const {
  return _impl_.failed_locations_.size();
}
inline int ListInstancesResponse::failed_locations_size() const {
  return _internal_failed_locations_size();
}
inline void ListInstancesResponse::clear_failed_locations() {
  _impl_.failed_locations_.Clear();
}
inline std::string* ListInstancesResponse::add_failed_locations() {
  std::string* _s = _internal_add_failed_locations();
  // @@protoc_insertion_point(field_add_mutable:google.bigtable.admin.v2.ListInstancesResponse.failed_locations)
  return _s;
}
inline const std::string& ListInstancesResponse::_internal_failed_locations(int index) const {
  return _impl_.failed_locations_.Get(index);
}
inline const std::string& ListInstancesResponse::failed_locations(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.ListInstancesResponse.failed_locations)
  return _internal_failed_locations(index);
}
inline std::string* ListInstancesResponse::mutable_failed_locations(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.ListInstancesResponse.failed_locations)
  return _impl_.failed_locations_.Mutable(index);
}
inline void ListInstancesResponse::set_failed_locations(int index, const std::string& value) {
  _impl_.failed_locations_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.ListInstancesResponse.failed_locations)
}
inline void ListInstancesResponse::set_failed_locations(int index, std::string&& value) {
  _impl_.failed_locations_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.ListInstancesResponse.failed_locations)
}
inline void ListInstancesResponse::set_failed_locations(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.failed_locations_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.v2.ListInstancesResponse.failed_locations)
}
inline void ListInstancesResponse::set_failed_locations(int index, const char* value, size_t size) {
  _impl_.failed_locations_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.v2.ListInstancesResponse.failed_locations)
}
inline std::string* ListInstancesResponse::_internal_add_failed_locations() {
  return _impl_.failed_locations_.Add();
}
inline void ListInstancesResponse::add_failed_locations(const std::string& value) {
  _impl_.failed_locations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.bigtable.admin.v2.ListInstancesResponse.failed_locations)
}
inline void ListInstancesResponse::add_failed_locations(std::string&& value) {
  _impl_.failed_locations_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.bigtable.admin.v2.ListInstancesResponse.failed_locations)
}
inline void ListInstancesResponse::add_failed_locations(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.failed_locations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.bigtable.admin.v2.ListInstancesResponse.failed_locations)
}
inline void ListInstancesResponse::add_failed_locations(const char* value, size_t size) {
  _impl_.failed_locations_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.bigtable.admin.v2.ListInstancesResponse.failed_locations)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListInstancesResponse::failed_locations() const {
  // @@protoc_insertion_point(field_list:google.bigtable.admin.v2.ListInstancesResponse.failed_locations)
  return _impl_.failed_locations_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListInstancesResponse::mutable_failed_locations() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.admin.v2.ListInstancesResponse.failed_locations)
  return &_impl_.failed_locations_;
}

// string next_page_token = 3;
inline void ListInstancesResponse::clear_next_page_token() {
  _impl_.next_page_token_.ClearToEmpty();
}
inline const std::string& ListInstancesResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.ListInstancesResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListInstancesResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.next_page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.ListInstancesResponse.next_page_token)
}
inline std::string* ListInstancesResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.ListInstancesResponse.next_page_token)
  return _s;
}
inline const std::string& ListInstancesResponse::_internal_next_page_token() const {
  return _impl_.next_page_token_.Get();
}
inline void ListInstancesResponse::_internal_set_next_page_token(const std::string& value) {
  
  _impl_.next_page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListInstancesResponse::_internal_mutable_next_page_token() {
  
  return _impl_.next_page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListInstancesResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.ListInstancesResponse.next_page_token)
  return _impl_.next_page_token_.Release();
}
inline void ListInstancesResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  _impl_.next_page_token_.SetAllocated(next_page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.next_page_token_.IsDefault()) {
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.ListInstancesResponse.next_page_token)
}

// -------------------------------------------------------------------

// PartialUpdateInstanceRequest

// .google.bigtable.admin.v2.Instance instance = 1 [(.google.api.field_behavior) = REQUIRED];
inline bool PartialUpdateInstanceRequest::_internal_has_instance() const {
  return this != internal_default_instance() && _impl_.instance_ != nullptr;
}
inline bool PartialUpdateInstanceRequest::has_instance() const {
  return _internal_has_instance();
}
inline const ::google::bigtable::admin::v2::Instance& PartialUpdateInstanceRequest::_internal_instance() const {
  const ::google::bigtable::admin::v2::Instance* p = _impl_.instance_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::bigtable::admin::v2::Instance&>(
      ::google::bigtable::admin::v2::_Instance_default_instance_);
}
inline const ::google::bigtable::admin::v2::Instance& PartialUpdateInstanceRequest::instance() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.PartialUpdateInstanceRequest.instance)
  return _internal_instance();
}
inline void PartialUpdateInstanceRequest::unsafe_arena_set_allocated_instance(
    ::google::bigtable::admin::v2::Instance* instance) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.instance_);
  }
  _impl_.instance_ = instance;
  if (instance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.admin.v2.PartialUpdateInstanceRequest.instance)
}
inline ::google::bigtable::admin::v2::Instance* PartialUpdateInstanceRequest::release_instance() {
  
  ::google::bigtable::admin::v2::Instance* temp = _impl_.instance_;
  _impl_.instance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::bigtable::admin::v2::Instance* PartialUpdateInstanceRequest::unsafe_arena_release_instance() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.PartialUpdateInstanceRequest.instance)
  
  ::google::bigtable::admin::v2::Instance* temp = _impl_.instance_;
  _impl_.instance_ = nullptr;
  return temp;
}
inline ::google::bigtable::admin::v2::Instance* PartialUpdateInstanceRequest::_internal_mutable_instance() {
  
  if (_impl_.instance_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::bigtable::admin::v2::Instance>(GetArenaForAllocation());
    _impl_.instance_ = p;
  }
  return _impl_.instance_;
}
inline ::google::bigtable::admin::v2::Instance* PartialUpdateInstanceRequest::mutable_instance() {
  ::google::bigtable::admin::v2::Instance* _msg = _internal_mutable_instance();
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.PartialUpdateInstanceRequest.instance)
  return _msg;
}
inline void PartialUpdateInstanceRequest::set_allocated_instance(::google::bigtable::admin::v2::Instance* instance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.instance_);
  }
  if (instance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(instance));
    if (message_arena != submessage_arena) {
      instance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, instance, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.instance_ = instance;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.PartialUpdateInstanceRequest.instance)
}

// .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool PartialUpdateInstanceRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && _impl_.update_mask_ != nullptr;
}
inline bool PartialUpdateInstanceRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& PartialUpdateInstanceRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = _impl_.update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& PartialUpdateInstanceRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.PartialUpdateInstanceRequest.update_mask)
  return _internal_update_mask();
}
inline void PartialUpdateInstanceRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  _impl_.update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.admin.v2.PartialUpdateInstanceRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* PartialUpdateInstanceRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* PartialUpdateInstanceRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.PartialUpdateInstanceRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* PartialUpdateInstanceRequest::_internal_mutable_update_mask() {
  
  if (_impl_.update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    _impl_.update_mask_ = p;
  }
  return _impl_.update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* PartialUpdateInstanceRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.PartialUpdateInstanceRequest.update_mask)
  return _msg;
}
inline void PartialUpdateInstanceRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.PartialUpdateInstanceRequest.update_mask)
}

// -------------------------------------------------------------------

// DeleteInstanceRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteInstanceRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DeleteInstanceRequest::name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.DeleteInstanceRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteInstanceRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.DeleteInstanceRequest.name)
}
inline std::string* DeleteInstanceRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.DeleteInstanceRequest.name)
  return _s;
}
inline const std::string& DeleteInstanceRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DeleteInstanceRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteInstanceRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteInstanceRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.DeleteInstanceRequest.name)
  return _impl_.name_.Release();
}
inline void DeleteInstanceRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.DeleteInstanceRequest.name)
}

// -------------------------------------------------------------------

// CreateClusterRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreateClusterRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& CreateClusterRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.CreateClusterRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateClusterRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.CreateClusterRequest.parent)
}
inline std::string* CreateClusterRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.CreateClusterRequest.parent)
  return _s;
}
inline const std::string& CreateClusterRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void CreateClusterRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateClusterRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateClusterRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.CreateClusterRequest.parent)
  return _impl_.parent_.Release();
}
inline void CreateClusterRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.CreateClusterRequest.parent)
}

// string cluster_id = 2 [(.google.api.field_behavior) = REQUIRED];
inline void CreateClusterRequest::clear_cluster_id() {
  _impl_.cluster_id_.ClearToEmpty();
}
inline const std::string& CreateClusterRequest::cluster_id() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.CreateClusterRequest.cluster_id)
  return _internal_cluster_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateClusterRequest::set_cluster_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.cluster_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.CreateClusterRequest.cluster_id)
}
inline std::string* CreateClusterRequest::mutable_cluster_id() {
  std::string* _s = _internal_mutable_cluster_id();
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.CreateClusterRequest.cluster_id)
  return _s;
}
inline const std::string& CreateClusterRequest::_internal_cluster_id() const {
  return _impl_.cluster_id_.Get();
}
inline void CreateClusterRequest::_internal_set_cluster_id(const std::string& value) {
  
  _impl_.cluster_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateClusterRequest::_internal_mutable_cluster_id() {
  
  return _impl_.cluster_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateClusterRequest::release_cluster_id() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.CreateClusterRequest.cluster_id)
  return _impl_.cluster_id_.Release();
}
inline void CreateClusterRequest::set_allocated_cluster_id(std::string* cluster_id) {
  if (cluster_id != nullptr) {
    
  } else {
    
  }
  _impl_.cluster_id_.SetAllocated(cluster_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cluster_id_.IsDefault()) {
    _impl_.cluster_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.CreateClusterRequest.cluster_id)
}

// .google.bigtable.admin.v2.Cluster cluster = 3 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateClusterRequest::_internal_has_cluster() const {
  return this != internal_default_instance() && _impl_.cluster_ != nullptr;
}
inline bool CreateClusterRequest::has_cluster() const {
  return _internal_has_cluster();
}
inline const ::google::bigtable::admin::v2::Cluster& CreateClusterRequest::_internal_cluster() const {
  const ::google::bigtable::admin::v2::Cluster* p = _impl_.cluster_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::bigtable::admin::v2::Cluster&>(
      ::google::bigtable::admin::v2::_Cluster_default_instance_);
}
inline const ::google::bigtable::admin::v2::Cluster& CreateClusterRequest::cluster() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.CreateClusterRequest.cluster)
  return _internal_cluster();
}
inline void CreateClusterRequest::unsafe_arena_set_allocated_cluster(
    ::google::bigtable::admin::v2::Cluster* cluster) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cluster_);
  }
  _impl_.cluster_ = cluster;
  if (cluster) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.admin.v2.CreateClusterRequest.cluster)
}
inline ::google::bigtable::admin::v2::Cluster* CreateClusterRequest::release_cluster() {
  
  ::google::bigtable::admin::v2::Cluster* temp = _impl_.cluster_;
  _impl_.cluster_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::bigtable::admin::v2::Cluster* CreateClusterRequest::unsafe_arena_release_cluster() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.CreateClusterRequest.cluster)
  
  ::google::bigtable::admin::v2::Cluster* temp = _impl_.cluster_;
  _impl_.cluster_ = nullptr;
  return temp;
}
inline ::google::bigtable::admin::v2::Cluster* CreateClusterRequest::_internal_mutable_cluster() {
  
  if (_impl_.cluster_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::bigtable::admin::v2::Cluster>(GetArenaForAllocation());
    _impl_.cluster_ = p;
  }
  return _impl_.cluster_;
}
inline ::google::bigtable::admin::v2::Cluster* CreateClusterRequest::mutable_cluster() {
  ::google::bigtable::admin::v2::Cluster* _msg = _internal_mutable_cluster();
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.CreateClusterRequest.cluster)
  return _msg;
}
inline void CreateClusterRequest::set_allocated_cluster(::google::bigtable::admin::v2::Cluster* cluster) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cluster_);
  }
  if (cluster) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cluster));
    if (message_arena != submessage_arena) {
      cluster = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cluster, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.cluster_ = cluster;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.CreateClusterRequest.cluster)
}

// -------------------------------------------------------------------

// GetClusterRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetClusterRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GetClusterRequest::name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.GetClusterRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetClusterRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.GetClusterRequest.name)
}
inline std::string* GetClusterRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.GetClusterRequest.name)
  return _s;
}
inline const std::string& GetClusterRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GetClusterRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetClusterRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetClusterRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.GetClusterRequest.name)
  return _impl_.name_.Release();
}
inline void GetClusterRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.GetClusterRequest.name)
}

// -------------------------------------------------------------------

// ListClustersRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListClustersRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& ListClustersRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.ListClustersRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListClustersRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.ListClustersRequest.parent)
}
inline std::string* ListClustersRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.ListClustersRequest.parent)
  return _s;
}
inline const std::string& ListClustersRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void ListClustersRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* ListClustersRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* ListClustersRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.ListClustersRequest.parent)
  return _impl_.parent_.Release();
}
inline void ListClustersRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.ListClustersRequest.parent)
}

// string page_token = 2;
inline void ListClustersRequest::clear_page_token() {
  _impl_.page_token_.ClearToEmpty();
}
inline const std::string& ListClustersRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.ListClustersRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListClustersRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.ListClustersRequest.page_token)
}
inline std::string* ListClustersRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.ListClustersRequest.page_token)
  return _s;
}
inline const std::string& ListClustersRequest::_internal_page_token() const {
  return _impl_.page_token_.Get();
}
inline void ListClustersRequest::_internal_set_page_token(const std::string& value) {
  
  _impl_.page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListClustersRequest::_internal_mutable_page_token() {
  
  return _impl_.page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListClustersRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.ListClustersRequest.page_token)
  return _impl_.page_token_.Release();
}
inline void ListClustersRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  _impl_.page_token_.SetAllocated(page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.page_token_.IsDefault()) {
    _impl_.page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.ListClustersRequest.page_token)
}

// -------------------------------------------------------------------

// ListClustersResponse

// repeated .google.bigtable.admin.v2.Cluster clusters = 1;
inline int ListClustersResponse::_internal_clusters_size() const {
  return _impl_.clusters_.size();
}
inline int ListClustersResponse::clusters_size() const {
  return _internal_clusters_size();
}
inline ::google::bigtable::admin::v2::Cluster* ListClustersResponse::mutable_clusters(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.ListClustersResponse.clusters)
  return _impl_.clusters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::admin::v2::Cluster >*
ListClustersResponse::mutable_clusters() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.admin.v2.ListClustersResponse.clusters)
  return &_impl_.clusters_;
}
inline const ::google::bigtable::admin::v2::Cluster& ListClustersResponse::_internal_clusters(int index) const {
  return _impl_.clusters_.Get(index);
}
inline const ::google::bigtable::admin::v2::Cluster& ListClustersResponse::clusters(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.ListClustersResponse.clusters)
  return _internal_clusters(index);
}
inline ::google::bigtable::admin::v2::Cluster* ListClustersResponse::_internal_add_clusters() {
  return _impl_.clusters_.Add();
}
inline ::google::bigtable::admin::v2::Cluster* ListClustersResponse::add_clusters() {
  ::google::bigtable::admin::v2::Cluster* _add = _internal_add_clusters();
  // @@protoc_insertion_point(field_add:google.bigtable.admin.v2.ListClustersResponse.clusters)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::admin::v2::Cluster >&
ListClustersResponse::clusters() const {
  // @@protoc_insertion_point(field_list:google.bigtable.admin.v2.ListClustersResponse.clusters)
  return _impl_.clusters_;
}

// repeated string failed_locations = 2;
inline int ListClustersResponse::_internal_failed_locations_size() const {
  return _impl_.failed_locations_.size();
}
inline int ListClustersResponse::failed_locations_size() const {
  return _internal_failed_locations_size();
}
inline void ListClustersResponse::clear_failed_locations() {
  _impl_.failed_locations_.Clear();
}
inline std::string* ListClustersResponse::add_failed_locations() {
  std::string* _s = _internal_add_failed_locations();
  // @@protoc_insertion_point(field_add_mutable:google.bigtable.admin.v2.ListClustersResponse.failed_locations)
  return _s;
}
inline const std::string& ListClustersResponse::_internal_failed_locations(int index) const {
  return _impl_.failed_locations_.Get(index);
}
inline const std::string& ListClustersResponse::failed_locations(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.ListClustersResponse.failed_locations)
  return _internal_failed_locations(index);
}
inline std::string* ListClustersResponse::mutable_failed_locations(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.ListClustersResponse.failed_locations)
  return _impl_.failed_locations_.Mutable(index);
}
inline void ListClustersResponse::set_failed_locations(int index, const std::string& value) {
  _impl_.failed_locations_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.ListClustersResponse.failed_locations)
}
inline void ListClustersResponse::set_failed_locations(int index, std::string&& value) {
  _impl_.failed_locations_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.ListClustersResponse.failed_locations)
}
inline void ListClustersResponse::set_failed_locations(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.failed_locations_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.v2.ListClustersResponse.failed_locations)
}
inline void ListClustersResponse::set_failed_locations(int index, const char* value, size_t size) {
  _impl_.failed_locations_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.v2.ListClustersResponse.failed_locations)
}
inline std::string* ListClustersResponse::_internal_add_failed_locations() {
  return _impl_.failed_locations_.Add();
}
inline void ListClustersResponse::add_failed_locations(const std::string& value) {
  _impl_.failed_locations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.bigtable.admin.v2.ListClustersResponse.failed_locations)
}
inline void ListClustersResponse::add_failed_locations(std::string&& value) {
  _impl_.failed_locations_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.bigtable.admin.v2.ListClustersResponse.failed_locations)
}
inline void ListClustersResponse::add_failed_locations(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.failed_locations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.bigtable.admin.v2.ListClustersResponse.failed_locations)
}
inline void ListClustersResponse::add_failed_locations(const char* value, size_t size) {
  _impl_.failed_locations_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.bigtable.admin.v2.ListClustersResponse.failed_locations)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListClustersResponse::failed_locations() const {
  // @@protoc_insertion_point(field_list:google.bigtable.admin.v2.ListClustersResponse.failed_locations)
  return _impl_.failed_locations_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListClustersResponse::mutable_failed_locations() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.admin.v2.ListClustersResponse.failed_locations)
  return &_impl_.failed_locations_;
}

// string next_page_token = 3;
inline void ListClustersResponse::clear_next_page_token() {
  _impl_.next_page_token_.ClearToEmpty();
}
inline const std::string& ListClustersResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.ListClustersResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListClustersResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.next_page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.ListClustersResponse.next_page_token)
}
inline std::string* ListClustersResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.ListClustersResponse.next_page_token)
  return _s;
}
inline const std::string& ListClustersResponse::_internal_next_page_token() const {
  return _impl_.next_page_token_.Get();
}
inline void ListClustersResponse::_internal_set_next_page_token(const std::string& value) {
  
  _impl_.next_page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListClustersResponse::_internal_mutable_next_page_token() {
  
  return _impl_.next_page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListClustersResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.ListClustersResponse.next_page_token)
  return _impl_.next_page_token_.Release();
}
inline void ListClustersResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  _impl_.next_page_token_.SetAllocated(next_page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.next_page_token_.IsDefault()) {
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.ListClustersResponse.next_page_token)
}

// -------------------------------------------------------------------

// DeleteClusterRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteClusterRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DeleteClusterRequest::name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.DeleteClusterRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteClusterRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.DeleteClusterRequest.name)
}
inline std::string* DeleteClusterRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.DeleteClusterRequest.name)
  return _s;
}
inline const std::string& DeleteClusterRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DeleteClusterRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteClusterRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteClusterRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.DeleteClusterRequest.name)
  return _impl_.name_.Release();
}
inline void DeleteClusterRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.DeleteClusterRequest.name)
}

// -------------------------------------------------------------------

// CreateInstanceMetadata

// .google.bigtable.admin.v2.CreateInstanceRequest original_request = 1;
inline bool CreateInstanceMetadata::_internal_has_original_request() const {
  return this != internal_default_instance() && _impl_.original_request_ != nullptr;
}
inline bool CreateInstanceMetadata::has_original_request() const {
  return _internal_has_original_request();
}
inline void CreateInstanceMetadata::clear_original_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.original_request_ != nullptr) {
    delete _impl_.original_request_;
  }
  _impl_.original_request_ = nullptr;
}
inline const ::google::bigtable::admin::v2::CreateInstanceRequest& CreateInstanceMetadata::_internal_original_request() const {
  const ::google::bigtable::admin::v2::CreateInstanceRequest* p = _impl_.original_request_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::bigtable::admin::v2::CreateInstanceRequest&>(
      ::google::bigtable::admin::v2::_CreateInstanceRequest_default_instance_);
}
inline const ::google::bigtable::admin::v2::CreateInstanceRequest& CreateInstanceMetadata::original_request() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.CreateInstanceMetadata.original_request)
  return _internal_original_request();
}
inline void CreateInstanceMetadata::unsafe_arena_set_allocated_original_request(
    ::google::bigtable::admin::v2::CreateInstanceRequest* original_request) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.original_request_);
  }
  _impl_.original_request_ = original_request;
  if (original_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.admin.v2.CreateInstanceMetadata.original_request)
}
inline ::google::bigtable::admin::v2::CreateInstanceRequest* CreateInstanceMetadata::release_original_request() {
  
  ::google::bigtable::admin::v2::CreateInstanceRequest* temp = _impl_.original_request_;
  _impl_.original_request_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::bigtable::admin::v2::CreateInstanceRequest* CreateInstanceMetadata::unsafe_arena_release_original_request() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.CreateInstanceMetadata.original_request)
  
  ::google::bigtable::admin::v2::CreateInstanceRequest* temp = _impl_.original_request_;
  _impl_.original_request_ = nullptr;
  return temp;
}
inline ::google::bigtable::admin::v2::CreateInstanceRequest* CreateInstanceMetadata::_internal_mutable_original_request() {
  
  if (_impl_.original_request_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::bigtable::admin::v2::CreateInstanceRequest>(GetArenaForAllocation());
    _impl_.original_request_ = p;
  }
  return _impl_.original_request_;
}
inline ::google::bigtable::admin::v2::CreateInstanceRequest* CreateInstanceMetadata::mutable_original_request() {
  ::google::bigtable::admin::v2::CreateInstanceRequest* _msg = _internal_mutable_original_request();
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.CreateInstanceMetadata.original_request)
  return _msg;
}
inline void CreateInstanceMetadata::set_allocated_original_request(::google::bigtable::admin::v2::CreateInstanceRequest* original_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.original_request_;
  }
  if (original_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(original_request);
    if (message_arena != submessage_arena) {
      original_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, original_request, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.original_request_ = original_request;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.CreateInstanceMetadata.original_request)
}

// .google.protobuf.Timestamp request_time = 2;
inline bool CreateInstanceMetadata::_internal_has_request_time() const {
  return this != internal_default_instance() && _impl_.request_time_ != nullptr;
}
inline bool CreateInstanceMetadata::has_request_time() const {
  return _internal_has_request_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& CreateInstanceMetadata::_internal_request_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.request_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& CreateInstanceMetadata::request_time() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.CreateInstanceMetadata.request_time)
  return _internal_request_time();
}
inline void CreateInstanceMetadata::unsafe_arena_set_allocated_request_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* request_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.request_time_);
  }
  _impl_.request_time_ = request_time;
  if (request_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.admin.v2.CreateInstanceMetadata.request_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CreateInstanceMetadata::release_request_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.request_time_;
  _impl_.request_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CreateInstanceMetadata::unsafe_arena_release_request_time() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.CreateInstanceMetadata.request_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.request_time_;
  _impl_.request_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CreateInstanceMetadata::_internal_mutable_request_time() {
  
  if (_impl_.request_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.request_time_ = p;
  }
  return _impl_.request_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CreateInstanceMetadata::mutable_request_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_request_time();
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.CreateInstanceMetadata.request_time)
  return _msg;
}
inline void CreateInstanceMetadata::set_allocated_request_time(::PROTOBUF_NAMESPACE_ID::Timestamp* request_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.request_time_);
  }
  if (request_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_time));
    if (message_arena != submessage_arena) {
      request_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.request_time_ = request_time;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.CreateInstanceMetadata.request_time)
}

// .google.protobuf.Timestamp finish_time = 3;
inline bool CreateInstanceMetadata::_internal_has_finish_time() const {
  return this != internal_default_instance() && _impl_.finish_time_ != nullptr;
}
inline bool CreateInstanceMetadata::has_finish_time() const {
  return _internal_has_finish_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& CreateInstanceMetadata::_internal_finish_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.finish_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& CreateInstanceMetadata::finish_time() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.CreateInstanceMetadata.finish_time)
  return _internal_finish_time();
}
inline void CreateInstanceMetadata::unsafe_arena_set_allocated_finish_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* finish_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.finish_time_);
  }
  _impl_.finish_time_ = finish_time;
  if (finish_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.admin.v2.CreateInstanceMetadata.finish_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CreateInstanceMetadata::release_finish_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.finish_time_;
  _impl_.finish_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CreateInstanceMetadata::unsafe_arena_release_finish_time() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.CreateInstanceMetadata.finish_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.finish_time_;
  _impl_.finish_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CreateInstanceMetadata::_internal_mutable_finish_time() {
  
  if (_impl_.finish_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.finish_time_ = p;
  }
  return _impl_.finish_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CreateInstanceMetadata::mutable_finish_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_finish_time();
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.CreateInstanceMetadata.finish_time)
  return _msg;
}
inline void CreateInstanceMetadata::set_allocated_finish_time(::PROTOBUF_NAMESPACE_ID::Timestamp* finish_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.finish_time_);
  }
  if (finish_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(finish_time));
    if (message_arena != submessage_arena) {
      finish_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, finish_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.finish_time_ = finish_time;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.CreateInstanceMetadata.finish_time)
}

// -------------------------------------------------------------------

// UpdateInstanceMetadata

// .google.bigtable.admin.v2.PartialUpdateInstanceRequest original_request = 1;
inline bool UpdateInstanceMetadata::_internal_has_original_request() const {
  return this != internal_default_instance() && _impl_.original_request_ != nullptr;
}
inline bool UpdateInstanceMetadata::has_original_request() const {
  return _internal_has_original_request();
}
inline void UpdateInstanceMetadata::clear_original_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.original_request_ != nullptr) {
    delete _impl_.original_request_;
  }
  _impl_.original_request_ = nullptr;
}
inline const ::google::bigtable::admin::v2::PartialUpdateInstanceRequest& UpdateInstanceMetadata::_internal_original_request() const {
  const ::google::bigtable::admin::v2::PartialUpdateInstanceRequest* p = _impl_.original_request_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::bigtable::admin::v2::PartialUpdateInstanceRequest&>(
      ::google::bigtable::admin::v2::_PartialUpdateInstanceRequest_default_instance_);
}
inline const ::google::bigtable::admin::v2::PartialUpdateInstanceRequest& UpdateInstanceMetadata::original_request() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.UpdateInstanceMetadata.original_request)
  return _internal_original_request();
}
inline void UpdateInstanceMetadata::unsafe_arena_set_allocated_original_request(
    ::google::bigtable::admin::v2::PartialUpdateInstanceRequest* original_request) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.original_request_);
  }
  _impl_.original_request_ = original_request;
  if (original_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.admin.v2.UpdateInstanceMetadata.original_request)
}
inline ::google::bigtable::admin::v2::PartialUpdateInstanceRequest* UpdateInstanceMetadata::release_original_request() {
  
  ::google::bigtable::admin::v2::PartialUpdateInstanceRequest* temp = _impl_.original_request_;
  _impl_.original_request_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::bigtable::admin::v2::PartialUpdateInstanceRequest* UpdateInstanceMetadata::unsafe_arena_release_original_request() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.UpdateInstanceMetadata.original_request)
  
  ::google::bigtable::admin::v2::PartialUpdateInstanceRequest* temp = _impl_.original_request_;
  _impl_.original_request_ = nullptr;
  return temp;
}
inline ::google::bigtable::admin::v2::PartialUpdateInstanceRequest* UpdateInstanceMetadata::_internal_mutable_original_request() {
  
  if (_impl_.original_request_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::bigtable::admin::v2::PartialUpdateInstanceRequest>(GetArenaForAllocation());
    _impl_.original_request_ = p;
  }
  return _impl_.original_request_;
}
inline ::google::bigtable::admin::v2::PartialUpdateInstanceRequest* UpdateInstanceMetadata::mutable_original_request() {
  ::google::bigtable::admin::v2::PartialUpdateInstanceRequest* _msg = _internal_mutable_original_request();
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.UpdateInstanceMetadata.original_request)
  return _msg;
}
inline void UpdateInstanceMetadata::set_allocated_original_request(::google::bigtable::admin::v2::PartialUpdateInstanceRequest* original_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.original_request_;
  }
  if (original_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(original_request);
    if (message_arena != submessage_arena) {
      original_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, original_request, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.original_request_ = original_request;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.UpdateInstanceMetadata.original_request)
}

// .google.protobuf.Timestamp request_time = 2;
inline bool UpdateInstanceMetadata::_internal_has_request_time() const {
  return this != internal_default_instance() && _impl_.request_time_ != nullptr;
}
inline bool UpdateInstanceMetadata::has_request_time() const {
  return _internal_has_request_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& UpdateInstanceMetadata::_internal_request_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.request_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& UpdateInstanceMetadata::request_time() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.UpdateInstanceMetadata.request_time)
  return _internal_request_time();
}
inline void UpdateInstanceMetadata::unsafe_arena_set_allocated_request_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* request_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.request_time_);
  }
  _impl_.request_time_ = request_time;
  if (request_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.admin.v2.UpdateInstanceMetadata.request_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* UpdateInstanceMetadata::release_request_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.request_time_;
  _impl_.request_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* UpdateInstanceMetadata::unsafe_arena_release_request_time() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.UpdateInstanceMetadata.request_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.request_time_;
  _impl_.request_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* UpdateInstanceMetadata::_internal_mutable_request_time() {
  
  if (_impl_.request_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.request_time_ = p;
  }
  return _impl_.request_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* UpdateInstanceMetadata::mutable_request_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_request_time();
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.UpdateInstanceMetadata.request_time)
  return _msg;
}
inline void UpdateInstanceMetadata::set_allocated_request_time(::PROTOBUF_NAMESPACE_ID::Timestamp* request_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.request_time_);
  }
  if (request_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_time));
    if (message_arena != submessage_arena) {
      request_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.request_time_ = request_time;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.UpdateInstanceMetadata.request_time)
}

// .google.protobuf.Timestamp finish_time = 3;
inline bool UpdateInstanceMetadata::_internal_has_finish_time() const {
  return this != internal_default_instance() && _impl_.finish_time_ != nullptr;
}
inline bool UpdateInstanceMetadata::has_finish_time() const {
  return _internal_has_finish_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& UpdateInstanceMetadata::_internal_finish_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.finish_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& UpdateInstanceMetadata::finish_time() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.UpdateInstanceMetadata.finish_time)
  return _internal_finish_time();
}
inline void UpdateInstanceMetadata::unsafe_arena_set_allocated_finish_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* finish_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.finish_time_);
  }
  _impl_.finish_time_ = finish_time;
  if (finish_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.admin.v2.UpdateInstanceMetadata.finish_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* UpdateInstanceMetadata::release_finish_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.finish_time_;
  _impl_.finish_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* UpdateInstanceMetadata::unsafe_arena_release_finish_time() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.UpdateInstanceMetadata.finish_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.finish_time_;
  _impl_.finish_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* UpdateInstanceMetadata::_internal_mutable_finish_time() {
  
  if (_impl_.finish_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.finish_time_ = p;
  }
  return _impl_.finish_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* UpdateInstanceMetadata::mutable_finish_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_finish_time();
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.UpdateInstanceMetadata.finish_time)
  return _msg;
}
inline void UpdateInstanceMetadata::set_allocated_finish_time(::PROTOBUF_NAMESPACE_ID::Timestamp* finish_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.finish_time_);
  }
  if (finish_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(finish_time));
    if (message_arena != submessage_arena) {
      finish_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, finish_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.finish_time_ = finish_time;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.UpdateInstanceMetadata.finish_time)
}

// -------------------------------------------------------------------

// CreateClusterMetadata_TableProgress

// int64 estimated_size_bytes = 2;
inline void CreateClusterMetadata_TableProgress::clear_estimated_size_bytes() {
  _impl_.estimated_size_bytes_ = int64_t{0};
}
inline int64_t CreateClusterMetadata_TableProgress::_internal_estimated_size_bytes() const {
  return _impl_.estimated_size_bytes_;
}
inline int64_t CreateClusterMetadata_TableProgress::estimated_size_bytes() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.CreateClusterMetadata.TableProgress.estimated_size_bytes)
  return _internal_estimated_size_bytes();
}
inline void CreateClusterMetadata_TableProgress::_internal_set_estimated_size_bytes(int64_t value) {
  
  _impl_.estimated_size_bytes_ = value;
}
inline void CreateClusterMetadata_TableProgress::set_estimated_size_bytes(int64_t value) {
  _internal_set_estimated_size_bytes(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.CreateClusterMetadata.TableProgress.estimated_size_bytes)
}

// int64 estimated_copied_bytes = 3;
inline void CreateClusterMetadata_TableProgress::clear_estimated_copied_bytes() {
  _impl_.estimated_copied_bytes_ = int64_t{0};
}
inline int64_t CreateClusterMetadata_TableProgress::_internal_estimated_copied_bytes() const {
  return _impl_.estimated_copied_bytes_;
}
inline int64_t CreateClusterMetadata_TableProgress::estimated_copied_bytes() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.CreateClusterMetadata.TableProgress.estimated_copied_bytes)
  return _internal_estimated_copied_bytes();
}
inline void CreateClusterMetadata_TableProgress::_internal_set_estimated_copied_bytes(int64_t value) {
  
  _impl_.estimated_copied_bytes_ = value;
}
inline void CreateClusterMetadata_TableProgress::set_estimated_copied_bytes(int64_t value) {
  _internal_set_estimated_copied_bytes(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.CreateClusterMetadata.TableProgress.estimated_copied_bytes)
}

// .google.bigtable.admin.v2.CreateClusterMetadata.TableProgress.State state = 4;
inline void CreateClusterMetadata_TableProgress::clear_state() {
  _impl_.state_ = 0;
}
inline ::google::bigtable::admin::v2::CreateClusterMetadata_TableProgress_State CreateClusterMetadata_TableProgress::_internal_state() const {
  return static_cast< ::google::bigtable::admin::v2::CreateClusterMetadata_TableProgress_State >(_impl_.state_);
}
inline ::google::bigtable::admin::v2::CreateClusterMetadata_TableProgress_State CreateClusterMetadata_TableProgress::state() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.CreateClusterMetadata.TableProgress.state)
  return _internal_state();
}
inline void CreateClusterMetadata_TableProgress::_internal_set_state(::google::bigtable::admin::v2::CreateClusterMetadata_TableProgress_State value) {
  
  _impl_.state_ = value;
}
inline void CreateClusterMetadata_TableProgress::set_state(::google::bigtable::admin::v2::CreateClusterMetadata_TableProgress_State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.CreateClusterMetadata.TableProgress.state)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CreateClusterMetadata

// .google.bigtable.admin.v2.CreateClusterRequest original_request = 1;
inline bool CreateClusterMetadata::_internal_has_original_request() const {
  return this != internal_default_instance() && _impl_.original_request_ != nullptr;
}
inline bool CreateClusterMetadata::has_original_request() const {
  return _internal_has_original_request();
}
inline void CreateClusterMetadata::clear_original_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.original_request_ != nullptr) {
    delete _impl_.original_request_;
  }
  _impl_.original_request_ = nullptr;
}
inline const ::google::bigtable::admin::v2::CreateClusterRequest& CreateClusterMetadata::_internal_original_request() const {
  const ::google::bigtable::admin::v2::CreateClusterRequest* p = _impl_.original_request_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::bigtable::admin::v2::CreateClusterRequest&>(
      ::google::bigtable::admin::v2::_CreateClusterRequest_default_instance_);
}
inline const ::google::bigtable::admin::v2::CreateClusterRequest& CreateClusterMetadata::original_request() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.CreateClusterMetadata.original_request)
  return _internal_original_request();
}
inline void CreateClusterMetadata::unsafe_arena_set_allocated_original_request(
    ::google::bigtable::admin::v2::CreateClusterRequest* original_request) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.original_request_);
  }
  _impl_.original_request_ = original_request;
  if (original_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.admin.v2.CreateClusterMetadata.original_request)
}
inline ::google::bigtable::admin::v2::CreateClusterRequest* CreateClusterMetadata::release_original_request() {
  
  ::google::bigtable::admin::v2::CreateClusterRequest* temp = _impl_.original_request_;
  _impl_.original_request_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::bigtable::admin::v2::CreateClusterRequest* CreateClusterMetadata::unsafe_arena_release_original_request() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.CreateClusterMetadata.original_request)
  
  ::google::bigtable::admin::v2::CreateClusterRequest* temp = _impl_.original_request_;
  _impl_.original_request_ = nullptr;
  return temp;
}
inline ::google::bigtable::admin::v2::CreateClusterRequest* CreateClusterMetadata::_internal_mutable_original_request() {
  
  if (_impl_.original_request_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::bigtable::admin::v2::CreateClusterRequest>(GetArenaForAllocation());
    _impl_.original_request_ = p;
  }
  return _impl_.original_request_;
}
inline ::google::bigtable::admin::v2::CreateClusterRequest* CreateClusterMetadata::mutable_original_request() {
  ::google::bigtable::admin::v2::CreateClusterRequest* _msg = _internal_mutable_original_request();
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.CreateClusterMetadata.original_request)
  return _msg;
}
inline void CreateClusterMetadata::set_allocated_original_request(::google::bigtable::admin::v2::CreateClusterRequest* original_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.original_request_;
  }
  if (original_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(original_request);
    if (message_arena != submessage_arena) {
      original_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, original_request, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.original_request_ = original_request;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.CreateClusterMetadata.original_request)
}

// .google.protobuf.Timestamp request_time = 2;
inline bool CreateClusterMetadata::_internal_has_request_time() const {
  return this != internal_default_instance() && _impl_.request_time_ != nullptr;
}
inline bool CreateClusterMetadata::has_request_time() const {
  return _internal_has_request_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& CreateClusterMetadata::_internal_request_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.request_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& CreateClusterMetadata::request_time() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.CreateClusterMetadata.request_time)
  return _internal_request_time();
}
inline void CreateClusterMetadata::unsafe_arena_set_allocated_request_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* request_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.request_time_);
  }
  _impl_.request_time_ = request_time;
  if (request_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.admin.v2.CreateClusterMetadata.request_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CreateClusterMetadata::release_request_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.request_time_;
  _impl_.request_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CreateClusterMetadata::unsafe_arena_release_request_time() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.CreateClusterMetadata.request_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.request_time_;
  _impl_.request_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CreateClusterMetadata::_internal_mutable_request_time() {
  
  if (_impl_.request_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.request_time_ = p;
  }
  return _impl_.request_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CreateClusterMetadata::mutable_request_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_request_time();
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.CreateClusterMetadata.request_time)
  return _msg;
}
inline void CreateClusterMetadata::set_allocated_request_time(::PROTOBUF_NAMESPACE_ID::Timestamp* request_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.request_time_);
  }
  if (request_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_time));
    if (message_arena != submessage_arena) {
      request_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.request_time_ = request_time;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.CreateClusterMetadata.request_time)
}

// .google.protobuf.Timestamp finish_time = 3;
inline bool CreateClusterMetadata::_internal_has_finish_time() const {
  return this != internal_default_instance() && _impl_.finish_time_ != nullptr;
}
inline bool CreateClusterMetadata::has_finish_time() const {
  return _internal_has_finish_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& CreateClusterMetadata::_internal_finish_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.finish_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& CreateClusterMetadata::finish_time() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.CreateClusterMetadata.finish_time)
  return _internal_finish_time();
}
inline void CreateClusterMetadata::unsafe_arena_set_allocated_finish_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* finish_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.finish_time_);
  }
  _impl_.finish_time_ = finish_time;
  if (finish_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.admin.v2.CreateClusterMetadata.finish_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CreateClusterMetadata::release_finish_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.finish_time_;
  _impl_.finish_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CreateClusterMetadata::unsafe_arena_release_finish_time() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.CreateClusterMetadata.finish_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.finish_time_;
  _impl_.finish_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CreateClusterMetadata::_internal_mutable_finish_time() {
  
  if (_impl_.finish_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.finish_time_ = p;
  }
  return _impl_.finish_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CreateClusterMetadata::mutable_finish_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_finish_time();
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.CreateClusterMetadata.finish_time)
  return _msg;
}
inline void CreateClusterMetadata::set_allocated_finish_time(::PROTOBUF_NAMESPACE_ID::Timestamp* finish_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.finish_time_);
  }
  if (finish_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(finish_time));
    if (message_arena != submessage_arena) {
      finish_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, finish_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.finish_time_ = finish_time;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.CreateClusterMetadata.finish_time)
}

// map<string, .google.bigtable.admin.v2.CreateClusterMetadata.TableProgress> tables = 4;
inline int CreateClusterMetadata::_internal_tables_size() const {
  return _impl_.tables_.size();
}
inline int CreateClusterMetadata::tables_size() const {
  return _internal_tables_size();
}
inline void CreateClusterMetadata::clear_tables() {
  _impl_.tables_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::google::bigtable::admin::v2::CreateClusterMetadata_TableProgress >&
CreateClusterMetadata::_internal_tables() const {
  return _impl_.tables_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::google::bigtable::admin::v2::CreateClusterMetadata_TableProgress >&
CreateClusterMetadata::tables() const {
  // @@protoc_insertion_point(field_map:google.bigtable.admin.v2.CreateClusterMetadata.tables)
  return _internal_tables();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::google::bigtable::admin::v2::CreateClusterMetadata_TableProgress >*
CreateClusterMetadata::_internal_mutable_tables() {
  return _impl_.tables_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::google::bigtable::admin::v2::CreateClusterMetadata_TableProgress >*
CreateClusterMetadata::mutable_tables() {
  // @@protoc_insertion_point(field_mutable_map:google.bigtable.admin.v2.CreateClusterMetadata.tables)
  return _internal_mutable_tables();
}

// -------------------------------------------------------------------

// UpdateClusterMetadata

// .google.bigtable.admin.v2.Cluster original_request = 1;
inline bool UpdateClusterMetadata::_internal_has_original_request() const {
  return this != internal_default_instance() && _impl_.original_request_ != nullptr;
}
inline bool UpdateClusterMetadata::has_original_request() const {
  return _internal_has_original_request();
}
inline const ::google::bigtable::admin::v2::Cluster& UpdateClusterMetadata::_internal_original_request() const {
  const ::google::bigtable::admin::v2::Cluster* p = _impl_.original_request_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::bigtable::admin::v2::Cluster&>(
      ::google::bigtable::admin::v2::_Cluster_default_instance_);
}
inline const ::google::bigtable::admin::v2::Cluster& UpdateClusterMetadata::original_request() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.UpdateClusterMetadata.original_request)
  return _internal_original_request();
}
inline void UpdateClusterMetadata::unsafe_arena_set_allocated_original_request(
    ::google::bigtable::admin::v2::Cluster* original_request) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.original_request_);
  }
  _impl_.original_request_ = original_request;
  if (original_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.admin.v2.UpdateClusterMetadata.original_request)
}
inline ::google::bigtable::admin::v2::Cluster* UpdateClusterMetadata::release_original_request() {
  
  ::google::bigtable::admin::v2::Cluster* temp = _impl_.original_request_;
  _impl_.original_request_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::bigtable::admin::v2::Cluster* UpdateClusterMetadata::unsafe_arena_release_original_request() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.UpdateClusterMetadata.original_request)
  
  ::google::bigtable::admin::v2::Cluster* temp = _impl_.original_request_;
  _impl_.original_request_ = nullptr;
  return temp;
}
inline ::google::bigtable::admin::v2::Cluster* UpdateClusterMetadata::_internal_mutable_original_request() {
  
  if (_impl_.original_request_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::bigtable::admin::v2::Cluster>(GetArenaForAllocation());
    _impl_.original_request_ = p;
  }
  return _impl_.original_request_;
}
inline ::google::bigtable::admin::v2::Cluster* UpdateClusterMetadata::mutable_original_request() {
  ::google::bigtable::admin::v2::Cluster* _msg = _internal_mutable_original_request();
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.UpdateClusterMetadata.original_request)
  return _msg;
}
inline void UpdateClusterMetadata::set_allocated_original_request(::google::bigtable::admin::v2::Cluster* original_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.original_request_);
  }
  if (original_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(original_request));
    if (message_arena != submessage_arena) {
      original_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, original_request, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.original_request_ = original_request;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.UpdateClusterMetadata.original_request)
}

// .google.protobuf.Timestamp request_time = 2;
inline bool UpdateClusterMetadata::_internal_has_request_time() const {
  return this != internal_default_instance() && _impl_.request_time_ != nullptr;
}
inline bool UpdateClusterMetadata::has_request_time() const {
  return _internal_has_request_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& UpdateClusterMetadata::_internal_request_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.request_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& UpdateClusterMetadata::request_time() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.UpdateClusterMetadata.request_time)
  return _internal_request_time();
}
inline void UpdateClusterMetadata::unsafe_arena_set_allocated_request_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* request_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.request_time_);
  }
  _impl_.request_time_ = request_time;
  if (request_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.admin.v2.UpdateClusterMetadata.request_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* UpdateClusterMetadata::release_request_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.request_time_;
  _impl_.request_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* UpdateClusterMetadata::unsafe_arena_release_request_time() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.UpdateClusterMetadata.request_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.request_time_;
  _impl_.request_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* UpdateClusterMetadata::_internal_mutable_request_time() {
  
  if (_impl_.request_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.request_time_ = p;
  }
  return _impl_.request_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* UpdateClusterMetadata::mutable_request_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_request_time();
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.UpdateClusterMetadata.request_time)
  return _msg;
}
inline void UpdateClusterMetadata::set_allocated_request_time(::PROTOBUF_NAMESPACE_ID::Timestamp* request_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.request_time_);
  }
  if (request_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_time));
    if (message_arena != submessage_arena) {
      request_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.request_time_ = request_time;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.UpdateClusterMetadata.request_time)
}

// .google.protobuf.Timestamp finish_time = 3;
inline bool UpdateClusterMetadata::_internal_has_finish_time() const {
  return this != internal_default_instance() && _impl_.finish_time_ != nullptr;
}
inline bool UpdateClusterMetadata::has_finish_time() const {
  return _internal_has_finish_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& UpdateClusterMetadata::_internal_finish_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.finish_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& UpdateClusterMetadata::finish_time() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.UpdateClusterMetadata.finish_time)
  return _internal_finish_time();
}
inline void UpdateClusterMetadata::unsafe_arena_set_allocated_finish_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* finish_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.finish_time_);
  }
  _impl_.finish_time_ = finish_time;
  if (finish_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.admin.v2.UpdateClusterMetadata.finish_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* UpdateClusterMetadata::release_finish_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.finish_time_;
  _impl_.finish_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* UpdateClusterMetadata::unsafe_arena_release_finish_time() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.UpdateClusterMetadata.finish_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.finish_time_;
  _impl_.finish_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* UpdateClusterMetadata::_internal_mutable_finish_time() {
  
  if (_impl_.finish_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.finish_time_ = p;
  }
  return _impl_.finish_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* UpdateClusterMetadata::mutable_finish_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_finish_time();
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.UpdateClusterMetadata.finish_time)
  return _msg;
}
inline void UpdateClusterMetadata::set_allocated_finish_time(::PROTOBUF_NAMESPACE_ID::Timestamp* finish_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.finish_time_);
  }
  if (finish_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(finish_time));
    if (message_arena != submessage_arena) {
      finish_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, finish_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.finish_time_ = finish_time;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.UpdateClusterMetadata.finish_time)
}

// -------------------------------------------------------------------

// PartialUpdateClusterMetadata

// .google.protobuf.Timestamp request_time = 1;
inline bool PartialUpdateClusterMetadata::_internal_has_request_time() const {
  return this != internal_default_instance() && _impl_.request_time_ != nullptr;
}
inline bool PartialUpdateClusterMetadata::has_request_time() const {
  return _internal_has_request_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& PartialUpdateClusterMetadata::_internal_request_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.request_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& PartialUpdateClusterMetadata::request_time() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.PartialUpdateClusterMetadata.request_time)
  return _internal_request_time();
}
inline void PartialUpdateClusterMetadata::unsafe_arena_set_allocated_request_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* request_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.request_time_);
  }
  _impl_.request_time_ = request_time;
  if (request_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.admin.v2.PartialUpdateClusterMetadata.request_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PartialUpdateClusterMetadata::release_request_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.request_time_;
  _impl_.request_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PartialUpdateClusterMetadata::unsafe_arena_release_request_time() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.PartialUpdateClusterMetadata.request_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.request_time_;
  _impl_.request_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PartialUpdateClusterMetadata::_internal_mutable_request_time() {
  
  if (_impl_.request_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.request_time_ = p;
  }
  return _impl_.request_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PartialUpdateClusterMetadata::mutable_request_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_request_time();
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.PartialUpdateClusterMetadata.request_time)
  return _msg;
}
inline void PartialUpdateClusterMetadata::set_allocated_request_time(::PROTOBUF_NAMESPACE_ID::Timestamp* request_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.request_time_);
  }
  if (request_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_time));
    if (message_arena != submessage_arena) {
      request_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.request_time_ = request_time;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.PartialUpdateClusterMetadata.request_time)
}

// .google.protobuf.Timestamp finish_time = 2;
inline bool PartialUpdateClusterMetadata::_internal_has_finish_time() const {
  return this != internal_default_instance() && _impl_.finish_time_ != nullptr;
}
inline bool PartialUpdateClusterMetadata::has_finish_time() const {
  return _internal_has_finish_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& PartialUpdateClusterMetadata::_internal_finish_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.finish_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& PartialUpdateClusterMetadata::finish_time() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.PartialUpdateClusterMetadata.finish_time)
  return _internal_finish_time();
}
inline void PartialUpdateClusterMetadata::unsafe_arena_set_allocated_finish_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* finish_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.finish_time_);
  }
  _impl_.finish_time_ = finish_time;
  if (finish_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.admin.v2.PartialUpdateClusterMetadata.finish_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PartialUpdateClusterMetadata::release_finish_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.finish_time_;
  _impl_.finish_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PartialUpdateClusterMetadata::unsafe_arena_release_finish_time() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.PartialUpdateClusterMetadata.finish_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.finish_time_;
  _impl_.finish_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PartialUpdateClusterMetadata::_internal_mutable_finish_time() {
  
  if (_impl_.finish_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.finish_time_ = p;
  }
  return _impl_.finish_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PartialUpdateClusterMetadata::mutable_finish_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_finish_time();
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.PartialUpdateClusterMetadata.finish_time)
  return _msg;
}
inline void PartialUpdateClusterMetadata::set_allocated_finish_time(::PROTOBUF_NAMESPACE_ID::Timestamp* finish_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.finish_time_);
  }
  if (finish_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(finish_time));
    if (message_arena != submessage_arena) {
      finish_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, finish_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.finish_time_ = finish_time;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.PartialUpdateClusterMetadata.finish_time)
}

// .google.bigtable.admin.v2.PartialUpdateClusterRequest original_request = 3;
inline bool PartialUpdateClusterMetadata::_internal_has_original_request() const {
  return this != internal_default_instance() && _impl_.original_request_ != nullptr;
}
inline bool PartialUpdateClusterMetadata::has_original_request() const {
  return _internal_has_original_request();
}
inline void PartialUpdateClusterMetadata::clear_original_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.original_request_ != nullptr) {
    delete _impl_.original_request_;
  }
  _impl_.original_request_ = nullptr;
}
inline const ::google::bigtable::admin::v2::PartialUpdateClusterRequest& PartialUpdateClusterMetadata::_internal_original_request() const {
  const ::google::bigtable::admin::v2::PartialUpdateClusterRequest* p = _impl_.original_request_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::bigtable::admin::v2::PartialUpdateClusterRequest&>(
      ::google::bigtable::admin::v2::_PartialUpdateClusterRequest_default_instance_);
}
inline const ::google::bigtable::admin::v2::PartialUpdateClusterRequest& PartialUpdateClusterMetadata::original_request() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.PartialUpdateClusterMetadata.original_request)
  return _internal_original_request();
}
inline void PartialUpdateClusterMetadata::unsafe_arena_set_allocated_original_request(
    ::google::bigtable::admin::v2::PartialUpdateClusterRequest* original_request) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.original_request_);
  }
  _impl_.original_request_ = original_request;
  if (original_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.admin.v2.PartialUpdateClusterMetadata.original_request)
}
inline ::google::bigtable::admin::v2::PartialUpdateClusterRequest* PartialUpdateClusterMetadata::release_original_request() {
  
  ::google::bigtable::admin::v2::PartialUpdateClusterRequest* temp = _impl_.original_request_;
  _impl_.original_request_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::bigtable::admin::v2::PartialUpdateClusterRequest* PartialUpdateClusterMetadata::unsafe_arena_release_original_request() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.PartialUpdateClusterMetadata.original_request)
  
  ::google::bigtable::admin::v2::PartialUpdateClusterRequest* temp = _impl_.original_request_;
  _impl_.original_request_ = nullptr;
  return temp;
}
inline ::google::bigtable::admin::v2::PartialUpdateClusterRequest* PartialUpdateClusterMetadata::_internal_mutable_original_request() {
  
  if (_impl_.original_request_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::bigtable::admin::v2::PartialUpdateClusterRequest>(GetArenaForAllocation());
    _impl_.original_request_ = p;
  }
  return _impl_.original_request_;
}
inline ::google::bigtable::admin::v2::PartialUpdateClusterRequest* PartialUpdateClusterMetadata::mutable_original_request() {
  ::google::bigtable::admin::v2::PartialUpdateClusterRequest* _msg = _internal_mutable_original_request();
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.PartialUpdateClusterMetadata.original_request)
  return _msg;
}
inline void PartialUpdateClusterMetadata::set_allocated_original_request(::google::bigtable::admin::v2::PartialUpdateClusterRequest* original_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.original_request_;
  }
  if (original_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(original_request);
    if (message_arena != submessage_arena) {
      original_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, original_request, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.original_request_ = original_request;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.PartialUpdateClusterMetadata.original_request)
}

// -------------------------------------------------------------------

// PartialUpdateClusterRequest

// .google.bigtable.admin.v2.Cluster cluster = 1 [(.google.api.field_behavior) = REQUIRED];
inline bool PartialUpdateClusterRequest::_internal_has_cluster() const {
  return this != internal_default_instance() && _impl_.cluster_ != nullptr;
}
inline bool PartialUpdateClusterRequest::has_cluster() const {
  return _internal_has_cluster();
}
inline const ::google::bigtable::admin::v2::Cluster& PartialUpdateClusterRequest::_internal_cluster() const {
  const ::google::bigtable::admin::v2::Cluster* p = _impl_.cluster_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::bigtable::admin::v2::Cluster&>(
      ::google::bigtable::admin::v2::_Cluster_default_instance_);
}
inline const ::google::bigtable::admin::v2::Cluster& PartialUpdateClusterRequest::cluster() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.PartialUpdateClusterRequest.cluster)
  return _internal_cluster();
}
inline void PartialUpdateClusterRequest::unsafe_arena_set_allocated_cluster(
    ::google::bigtable::admin::v2::Cluster* cluster) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cluster_);
  }
  _impl_.cluster_ = cluster;
  if (cluster) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.admin.v2.PartialUpdateClusterRequest.cluster)
}
inline ::google::bigtable::admin::v2::Cluster* PartialUpdateClusterRequest::release_cluster() {
  
  ::google::bigtable::admin::v2::Cluster* temp = _impl_.cluster_;
  _impl_.cluster_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::bigtable::admin::v2::Cluster* PartialUpdateClusterRequest::unsafe_arena_release_cluster() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.PartialUpdateClusterRequest.cluster)
  
  ::google::bigtable::admin::v2::Cluster* temp = _impl_.cluster_;
  _impl_.cluster_ = nullptr;
  return temp;
}
inline ::google::bigtable::admin::v2::Cluster* PartialUpdateClusterRequest::_internal_mutable_cluster() {
  
  if (_impl_.cluster_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::bigtable::admin::v2::Cluster>(GetArenaForAllocation());
    _impl_.cluster_ = p;
  }
  return _impl_.cluster_;
}
inline ::google::bigtable::admin::v2::Cluster* PartialUpdateClusterRequest::mutable_cluster() {
  ::google::bigtable::admin::v2::Cluster* _msg = _internal_mutable_cluster();
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.PartialUpdateClusterRequest.cluster)
  return _msg;
}
inline void PartialUpdateClusterRequest::set_allocated_cluster(::google::bigtable::admin::v2::Cluster* cluster) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cluster_);
  }
  if (cluster) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cluster));
    if (message_arena != submessage_arena) {
      cluster = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cluster, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.cluster_ = cluster;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.PartialUpdateClusterRequest.cluster)
}

// .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool PartialUpdateClusterRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && _impl_.update_mask_ != nullptr;
}
inline bool PartialUpdateClusterRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& PartialUpdateClusterRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = _impl_.update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& PartialUpdateClusterRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.PartialUpdateClusterRequest.update_mask)
  return _internal_update_mask();
}
inline void PartialUpdateClusterRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  _impl_.update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.admin.v2.PartialUpdateClusterRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* PartialUpdateClusterRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* PartialUpdateClusterRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.PartialUpdateClusterRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* PartialUpdateClusterRequest::_internal_mutable_update_mask() {
  
  if (_impl_.update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    _impl_.update_mask_ = p;
  }
  return _impl_.update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* PartialUpdateClusterRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.PartialUpdateClusterRequest.update_mask)
  return _msg;
}
inline void PartialUpdateClusterRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.PartialUpdateClusterRequest.update_mask)
}

// -------------------------------------------------------------------

// CreateAppProfileRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreateAppProfileRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& CreateAppProfileRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.CreateAppProfileRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateAppProfileRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.CreateAppProfileRequest.parent)
}
inline std::string* CreateAppProfileRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.CreateAppProfileRequest.parent)
  return _s;
}
inline const std::string& CreateAppProfileRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void CreateAppProfileRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateAppProfileRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateAppProfileRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.CreateAppProfileRequest.parent)
  return _impl_.parent_.Release();
}
inline void CreateAppProfileRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.CreateAppProfileRequest.parent)
}

// string app_profile_id = 2 [(.google.api.field_behavior) = REQUIRED];
inline void CreateAppProfileRequest::clear_app_profile_id() {
  _impl_.app_profile_id_.ClearToEmpty();
}
inline const std::string& CreateAppProfileRequest::app_profile_id() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.CreateAppProfileRequest.app_profile_id)
  return _internal_app_profile_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateAppProfileRequest::set_app_profile_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.app_profile_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.CreateAppProfileRequest.app_profile_id)
}
inline std::string* CreateAppProfileRequest::mutable_app_profile_id() {
  std::string* _s = _internal_mutable_app_profile_id();
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.CreateAppProfileRequest.app_profile_id)
  return _s;
}
inline const std::string& CreateAppProfileRequest::_internal_app_profile_id() const {
  return _impl_.app_profile_id_.Get();
}
inline void CreateAppProfileRequest::_internal_set_app_profile_id(const std::string& value) {
  
  _impl_.app_profile_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateAppProfileRequest::_internal_mutable_app_profile_id() {
  
  return _impl_.app_profile_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateAppProfileRequest::release_app_profile_id() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.CreateAppProfileRequest.app_profile_id)
  return _impl_.app_profile_id_.Release();
}
inline void CreateAppProfileRequest::set_allocated_app_profile_id(std::string* app_profile_id) {
  if (app_profile_id != nullptr) {
    
  } else {
    
  }
  _impl_.app_profile_id_.SetAllocated(app_profile_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.app_profile_id_.IsDefault()) {
    _impl_.app_profile_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.CreateAppProfileRequest.app_profile_id)
}

// .google.bigtable.admin.v2.AppProfile app_profile = 3 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateAppProfileRequest::_internal_has_app_profile() const {
  return this != internal_default_instance() && _impl_.app_profile_ != nullptr;
}
inline bool CreateAppProfileRequest::has_app_profile() const {
  return _internal_has_app_profile();
}
inline const ::google::bigtable::admin::v2::AppProfile& CreateAppProfileRequest::_internal_app_profile() const {
  const ::google::bigtable::admin::v2::AppProfile* p = _impl_.app_profile_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::bigtable::admin::v2::AppProfile&>(
      ::google::bigtable::admin::v2::_AppProfile_default_instance_);
}
inline const ::google::bigtable::admin::v2::AppProfile& CreateAppProfileRequest::app_profile() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.CreateAppProfileRequest.app_profile)
  return _internal_app_profile();
}
inline void CreateAppProfileRequest::unsafe_arena_set_allocated_app_profile(
    ::google::bigtable::admin::v2::AppProfile* app_profile) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.app_profile_);
  }
  _impl_.app_profile_ = app_profile;
  if (app_profile) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.admin.v2.CreateAppProfileRequest.app_profile)
}
inline ::google::bigtable::admin::v2::AppProfile* CreateAppProfileRequest::release_app_profile() {
  
  ::google::bigtable::admin::v2::AppProfile* temp = _impl_.app_profile_;
  _impl_.app_profile_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::bigtable::admin::v2::AppProfile* CreateAppProfileRequest::unsafe_arena_release_app_profile() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.CreateAppProfileRequest.app_profile)
  
  ::google::bigtable::admin::v2::AppProfile* temp = _impl_.app_profile_;
  _impl_.app_profile_ = nullptr;
  return temp;
}
inline ::google::bigtable::admin::v2::AppProfile* CreateAppProfileRequest::_internal_mutable_app_profile() {
  
  if (_impl_.app_profile_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::bigtable::admin::v2::AppProfile>(GetArenaForAllocation());
    _impl_.app_profile_ = p;
  }
  return _impl_.app_profile_;
}
inline ::google::bigtable::admin::v2::AppProfile* CreateAppProfileRequest::mutable_app_profile() {
  ::google::bigtable::admin::v2::AppProfile* _msg = _internal_mutable_app_profile();
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.CreateAppProfileRequest.app_profile)
  return _msg;
}
inline void CreateAppProfileRequest::set_allocated_app_profile(::google::bigtable::admin::v2::AppProfile* app_profile) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.app_profile_);
  }
  if (app_profile) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(app_profile));
    if (message_arena != submessage_arena) {
      app_profile = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, app_profile, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.app_profile_ = app_profile;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.CreateAppProfileRequest.app_profile)
}

// bool ignore_warnings = 4;
inline void CreateAppProfileRequest::clear_ignore_warnings() {
  _impl_.ignore_warnings_ = false;
}
inline bool CreateAppProfileRequest::_internal_ignore_warnings() const {
  return _impl_.ignore_warnings_;
}
inline bool CreateAppProfileRequest::ignore_warnings() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.CreateAppProfileRequest.ignore_warnings)
  return _internal_ignore_warnings();
}
inline void CreateAppProfileRequest::_internal_set_ignore_warnings(bool value) {
  
  _impl_.ignore_warnings_ = value;
}
inline void CreateAppProfileRequest::set_ignore_warnings(bool value) {
  _internal_set_ignore_warnings(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.CreateAppProfileRequest.ignore_warnings)
}

// -------------------------------------------------------------------

// GetAppProfileRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetAppProfileRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GetAppProfileRequest::name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.GetAppProfileRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetAppProfileRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.GetAppProfileRequest.name)
}
inline std::string* GetAppProfileRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.GetAppProfileRequest.name)
  return _s;
}
inline const std::string& GetAppProfileRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GetAppProfileRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetAppProfileRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetAppProfileRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.GetAppProfileRequest.name)
  return _impl_.name_.Release();
}
inline void GetAppProfileRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.GetAppProfileRequest.name)
}

// -------------------------------------------------------------------

// ListAppProfilesRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListAppProfilesRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& ListAppProfilesRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.ListAppProfilesRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListAppProfilesRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.ListAppProfilesRequest.parent)
}
inline std::string* ListAppProfilesRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.ListAppProfilesRequest.parent)
  return _s;
}
inline const std::string& ListAppProfilesRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void ListAppProfilesRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* ListAppProfilesRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* ListAppProfilesRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.ListAppProfilesRequest.parent)
  return _impl_.parent_.Release();
}
inline void ListAppProfilesRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.ListAppProfilesRequest.parent)
}

// int32 page_size = 3;
inline void ListAppProfilesRequest::clear_page_size() {
  _impl_.page_size_ = 0;
}
inline int32_t ListAppProfilesRequest::_internal_page_size() const {
  return _impl_.page_size_;
}
inline int32_t ListAppProfilesRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.ListAppProfilesRequest.page_size)
  return _internal_page_size();
}
inline void ListAppProfilesRequest::_internal_set_page_size(int32_t value) {
  
  _impl_.page_size_ = value;
}
inline void ListAppProfilesRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.ListAppProfilesRequest.page_size)
}

// string page_token = 2;
inline void ListAppProfilesRequest::clear_page_token() {
  _impl_.page_token_.ClearToEmpty();
}
inline const std::string& ListAppProfilesRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.ListAppProfilesRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListAppProfilesRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.ListAppProfilesRequest.page_token)
}
inline std::string* ListAppProfilesRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.ListAppProfilesRequest.page_token)
  return _s;
}
inline const std::string& ListAppProfilesRequest::_internal_page_token() const {
  return _impl_.page_token_.Get();
}
inline void ListAppProfilesRequest::_internal_set_page_token(const std::string& value) {
  
  _impl_.page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListAppProfilesRequest::_internal_mutable_page_token() {
  
  return _impl_.page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListAppProfilesRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.ListAppProfilesRequest.page_token)
  return _impl_.page_token_.Release();
}
inline void ListAppProfilesRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  _impl_.page_token_.SetAllocated(page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.page_token_.IsDefault()) {
    _impl_.page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.ListAppProfilesRequest.page_token)
}

// -------------------------------------------------------------------

// ListAppProfilesResponse

// repeated .google.bigtable.admin.v2.AppProfile app_profiles = 1;
inline int ListAppProfilesResponse::_internal_app_profiles_size() const {
  return _impl_.app_profiles_.size();
}
inline int ListAppProfilesResponse::app_profiles_size() const {
  return _internal_app_profiles_size();
}
inline ::google::bigtable::admin::v2::AppProfile* ListAppProfilesResponse::mutable_app_profiles(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.ListAppProfilesResponse.app_profiles)
  return _impl_.app_profiles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::admin::v2::AppProfile >*
ListAppProfilesResponse::mutable_app_profiles() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.admin.v2.ListAppProfilesResponse.app_profiles)
  return &_impl_.app_profiles_;
}
inline const ::google::bigtable::admin::v2::AppProfile& ListAppProfilesResponse::_internal_app_profiles(int index) const {
  return _impl_.app_profiles_.Get(index);
}
inline const ::google::bigtable::admin::v2::AppProfile& ListAppProfilesResponse::app_profiles(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.ListAppProfilesResponse.app_profiles)
  return _internal_app_profiles(index);
}
inline ::google::bigtable::admin::v2::AppProfile* ListAppProfilesResponse::_internal_add_app_profiles() {
  return _impl_.app_profiles_.Add();
}
inline ::google::bigtable::admin::v2::AppProfile* ListAppProfilesResponse::add_app_profiles() {
  ::google::bigtable::admin::v2::AppProfile* _add = _internal_add_app_profiles();
  // @@protoc_insertion_point(field_add:google.bigtable.admin.v2.ListAppProfilesResponse.app_profiles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::admin::v2::AppProfile >&
ListAppProfilesResponse::app_profiles() const {
  // @@protoc_insertion_point(field_list:google.bigtable.admin.v2.ListAppProfilesResponse.app_profiles)
  return _impl_.app_profiles_;
}

// string next_page_token = 2;
inline void ListAppProfilesResponse::clear_next_page_token() {
  _impl_.next_page_token_.ClearToEmpty();
}
inline const std::string& ListAppProfilesResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.ListAppProfilesResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListAppProfilesResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.next_page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.ListAppProfilesResponse.next_page_token)
}
inline std::string* ListAppProfilesResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.ListAppProfilesResponse.next_page_token)
  return _s;
}
inline const std::string& ListAppProfilesResponse::_internal_next_page_token() const {
  return _impl_.next_page_token_.Get();
}
inline void ListAppProfilesResponse::_internal_set_next_page_token(const std::string& value) {
  
  _impl_.next_page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListAppProfilesResponse::_internal_mutable_next_page_token() {
  
  return _impl_.next_page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListAppProfilesResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.ListAppProfilesResponse.next_page_token)
  return _impl_.next_page_token_.Release();
}
inline void ListAppProfilesResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  _impl_.next_page_token_.SetAllocated(next_page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.next_page_token_.IsDefault()) {
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.ListAppProfilesResponse.next_page_token)
}

// repeated string failed_locations = 3;
inline int ListAppProfilesResponse::_internal_failed_locations_size() const {
  return _impl_.failed_locations_.size();
}
inline int ListAppProfilesResponse::failed_locations_size() const {
  return _internal_failed_locations_size();
}
inline void ListAppProfilesResponse::clear_failed_locations() {
  _impl_.failed_locations_.Clear();
}
inline std::string* ListAppProfilesResponse::add_failed_locations() {
  std::string* _s = _internal_add_failed_locations();
  // @@protoc_insertion_point(field_add_mutable:google.bigtable.admin.v2.ListAppProfilesResponse.failed_locations)
  return _s;
}
inline const std::string& ListAppProfilesResponse::_internal_failed_locations(int index) const {
  return _impl_.failed_locations_.Get(index);
}
inline const std::string& ListAppProfilesResponse::failed_locations(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.ListAppProfilesResponse.failed_locations)
  return _internal_failed_locations(index);
}
inline std::string* ListAppProfilesResponse::mutable_failed_locations(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.ListAppProfilesResponse.failed_locations)
  return _impl_.failed_locations_.Mutable(index);
}
inline void ListAppProfilesResponse::set_failed_locations(int index, const std::string& value) {
  _impl_.failed_locations_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.ListAppProfilesResponse.failed_locations)
}
inline void ListAppProfilesResponse::set_failed_locations(int index, std::string&& value) {
  _impl_.failed_locations_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.ListAppProfilesResponse.failed_locations)
}
inline void ListAppProfilesResponse::set_failed_locations(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.failed_locations_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.v2.ListAppProfilesResponse.failed_locations)
}
inline void ListAppProfilesResponse::set_failed_locations(int index, const char* value, size_t size) {
  _impl_.failed_locations_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.v2.ListAppProfilesResponse.failed_locations)
}
inline std::string* ListAppProfilesResponse::_internal_add_failed_locations() {
  return _impl_.failed_locations_.Add();
}
inline void ListAppProfilesResponse::add_failed_locations(const std::string& value) {
  _impl_.failed_locations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.bigtable.admin.v2.ListAppProfilesResponse.failed_locations)
}
inline void ListAppProfilesResponse::add_failed_locations(std::string&& value) {
  _impl_.failed_locations_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.bigtable.admin.v2.ListAppProfilesResponse.failed_locations)
}
inline void ListAppProfilesResponse::add_failed_locations(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.failed_locations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.bigtable.admin.v2.ListAppProfilesResponse.failed_locations)
}
inline void ListAppProfilesResponse::add_failed_locations(const char* value, size_t size) {
  _impl_.failed_locations_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.bigtable.admin.v2.ListAppProfilesResponse.failed_locations)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListAppProfilesResponse::failed_locations() const {
  // @@protoc_insertion_point(field_list:google.bigtable.admin.v2.ListAppProfilesResponse.failed_locations)
  return _impl_.failed_locations_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListAppProfilesResponse::mutable_failed_locations() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.admin.v2.ListAppProfilesResponse.failed_locations)
  return &_impl_.failed_locations_;
}

// -------------------------------------------------------------------

// UpdateAppProfileRequest

// .google.bigtable.admin.v2.AppProfile app_profile = 1 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateAppProfileRequest::_internal_has_app_profile() const {
  return this != internal_default_instance() && _impl_.app_profile_ != nullptr;
}
inline bool UpdateAppProfileRequest::has_app_profile() const {
  return _internal_has_app_profile();
}
inline const ::google::bigtable::admin::v2::AppProfile& UpdateAppProfileRequest::_internal_app_profile() const {
  const ::google::bigtable::admin::v2::AppProfile* p = _impl_.app_profile_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::bigtable::admin::v2::AppProfile&>(
      ::google::bigtable::admin::v2::_AppProfile_default_instance_);
}
inline const ::google::bigtable::admin::v2::AppProfile& UpdateAppProfileRequest::app_profile() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.UpdateAppProfileRequest.app_profile)
  return _internal_app_profile();
}
inline void UpdateAppProfileRequest::unsafe_arena_set_allocated_app_profile(
    ::google::bigtable::admin::v2::AppProfile* app_profile) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.app_profile_);
  }
  _impl_.app_profile_ = app_profile;
  if (app_profile) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.admin.v2.UpdateAppProfileRequest.app_profile)
}
inline ::google::bigtable::admin::v2::AppProfile* UpdateAppProfileRequest::release_app_profile() {
  
  ::google::bigtable::admin::v2::AppProfile* temp = _impl_.app_profile_;
  _impl_.app_profile_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::bigtable::admin::v2::AppProfile* UpdateAppProfileRequest::unsafe_arena_release_app_profile() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.UpdateAppProfileRequest.app_profile)
  
  ::google::bigtable::admin::v2::AppProfile* temp = _impl_.app_profile_;
  _impl_.app_profile_ = nullptr;
  return temp;
}
inline ::google::bigtable::admin::v2::AppProfile* UpdateAppProfileRequest::_internal_mutable_app_profile() {
  
  if (_impl_.app_profile_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::bigtable::admin::v2::AppProfile>(GetArenaForAllocation());
    _impl_.app_profile_ = p;
  }
  return _impl_.app_profile_;
}
inline ::google::bigtable::admin::v2::AppProfile* UpdateAppProfileRequest::mutable_app_profile() {
  ::google::bigtable::admin::v2::AppProfile* _msg = _internal_mutable_app_profile();
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.UpdateAppProfileRequest.app_profile)
  return _msg;
}
inline void UpdateAppProfileRequest::set_allocated_app_profile(::google::bigtable::admin::v2::AppProfile* app_profile) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.app_profile_);
  }
  if (app_profile) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(app_profile));
    if (message_arena != submessage_arena) {
      app_profile = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, app_profile, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.app_profile_ = app_profile;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.UpdateAppProfileRequest.app_profile)
}

// .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateAppProfileRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && _impl_.update_mask_ != nullptr;
}
inline bool UpdateAppProfileRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateAppProfileRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = _impl_.update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateAppProfileRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.UpdateAppProfileRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateAppProfileRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  _impl_.update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.admin.v2.UpdateAppProfileRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateAppProfileRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateAppProfileRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.UpdateAppProfileRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateAppProfileRequest::_internal_mutable_update_mask() {
  
  if (_impl_.update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    _impl_.update_mask_ = p;
  }
  return _impl_.update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateAppProfileRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.UpdateAppProfileRequest.update_mask)
  return _msg;
}
inline void UpdateAppProfileRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.UpdateAppProfileRequest.update_mask)
}

// bool ignore_warnings = 3;
inline void UpdateAppProfileRequest::clear_ignore_warnings() {
  _impl_.ignore_warnings_ = false;
}
inline bool UpdateAppProfileRequest::_internal_ignore_warnings() const {
  return _impl_.ignore_warnings_;
}
inline bool UpdateAppProfileRequest::ignore_warnings() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.UpdateAppProfileRequest.ignore_warnings)
  return _internal_ignore_warnings();
}
inline void UpdateAppProfileRequest::_internal_set_ignore_warnings(bool value) {
  
  _impl_.ignore_warnings_ = value;
}
inline void UpdateAppProfileRequest::set_ignore_warnings(bool value) {
  _internal_set_ignore_warnings(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.UpdateAppProfileRequest.ignore_warnings)
}

// -------------------------------------------------------------------

// DeleteAppProfileRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteAppProfileRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DeleteAppProfileRequest::name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.DeleteAppProfileRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteAppProfileRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.DeleteAppProfileRequest.name)
}
inline std::string* DeleteAppProfileRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.DeleteAppProfileRequest.name)
  return _s;
}
inline const std::string& DeleteAppProfileRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DeleteAppProfileRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteAppProfileRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteAppProfileRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.DeleteAppProfileRequest.name)
  return _impl_.name_.Release();
}
inline void DeleteAppProfileRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.DeleteAppProfileRequest.name)
}

// bool ignore_warnings = 2 [(.google.api.field_behavior) = REQUIRED];
inline void DeleteAppProfileRequest::clear_ignore_warnings() {
  _impl_.ignore_warnings_ = false;
}
inline bool DeleteAppProfileRequest::_internal_ignore_warnings() const {
  return _impl_.ignore_warnings_;
}
inline bool DeleteAppProfileRequest::ignore_warnings() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.DeleteAppProfileRequest.ignore_warnings)
  return _internal_ignore_warnings();
}
inline void DeleteAppProfileRequest::_internal_set_ignore_warnings(bool value) {
  
  _impl_.ignore_warnings_ = value;
}
inline void DeleteAppProfileRequest::set_ignore_warnings(bool value) {
  _internal_set_ignore_warnings(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.DeleteAppProfileRequest.ignore_warnings)
}

// -------------------------------------------------------------------

// UpdateAppProfileMetadata

// -------------------------------------------------------------------

// ListHotTabletsRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListHotTabletsRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& ListHotTabletsRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.ListHotTabletsRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListHotTabletsRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.ListHotTabletsRequest.parent)
}
inline std::string* ListHotTabletsRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.ListHotTabletsRequest.parent)
  return _s;
}
inline const std::string& ListHotTabletsRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void ListHotTabletsRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* ListHotTabletsRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* ListHotTabletsRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.ListHotTabletsRequest.parent)
  return _impl_.parent_.Release();
}
inline void ListHotTabletsRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.ListHotTabletsRequest.parent)
}

// .google.protobuf.Timestamp start_time = 2;
inline bool ListHotTabletsRequest::_internal_has_start_time() const {
  return this != internal_default_instance() && _impl_.start_time_ != nullptr;
}
inline bool ListHotTabletsRequest::has_start_time() const {
  return _internal_has_start_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ListHotTabletsRequest::_internal_start_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.start_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ListHotTabletsRequest::start_time() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.ListHotTabletsRequest.start_time)
  return _internal_start_time();
}
inline void ListHotTabletsRequest::unsafe_arena_set_allocated_start_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* start_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.start_time_);
  }
  _impl_.start_time_ = start_time;
  if (start_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.admin.v2.ListHotTabletsRequest.start_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ListHotTabletsRequest::release_start_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.start_time_;
  _impl_.start_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ListHotTabletsRequest::unsafe_arena_release_start_time() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.ListHotTabletsRequest.start_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.start_time_;
  _impl_.start_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ListHotTabletsRequest::_internal_mutable_start_time() {
  
  if (_impl_.start_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.start_time_ = p;
  }
  return _impl_.start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ListHotTabletsRequest::mutable_start_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_start_time();
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.ListHotTabletsRequest.start_time)
  return _msg;
}
inline void ListHotTabletsRequest::set_allocated_start_time(::PROTOBUF_NAMESPACE_ID::Timestamp* start_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.start_time_);
  }
  if (start_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time));
    if (message_arena != submessage_arena) {
      start_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.start_time_ = start_time;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.ListHotTabletsRequest.start_time)
}

// .google.protobuf.Timestamp end_time = 3;
inline bool ListHotTabletsRequest::_internal_has_end_time() const {
  return this != internal_default_instance() && _impl_.end_time_ != nullptr;
}
inline bool ListHotTabletsRequest::has_end_time() const {
  return _internal_has_end_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ListHotTabletsRequest::_internal_end_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.end_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ListHotTabletsRequest::end_time() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.ListHotTabletsRequest.end_time)
  return _internal_end_time();
}
inline void ListHotTabletsRequest::unsafe_arena_set_allocated_end_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.end_time_);
  }
  _impl_.end_time_ = end_time;
  if (end_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.admin.v2.ListHotTabletsRequest.end_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ListHotTabletsRequest::release_end_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.end_time_;
  _impl_.end_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ListHotTabletsRequest::unsafe_arena_release_end_time() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.ListHotTabletsRequest.end_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.end_time_;
  _impl_.end_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ListHotTabletsRequest::_internal_mutable_end_time() {
  
  if (_impl_.end_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.end_time_ = p;
  }
  return _impl_.end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ListHotTabletsRequest::mutable_end_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_end_time();
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.ListHotTabletsRequest.end_time)
  return _msg;
}
inline void ListHotTabletsRequest::set_allocated_end_time(::PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.end_time_);
  }
  if (end_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time));
    if (message_arena != submessage_arena) {
      end_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.end_time_ = end_time;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.ListHotTabletsRequest.end_time)
}

// int32 page_size = 4;
inline void ListHotTabletsRequest::clear_page_size() {
  _impl_.page_size_ = 0;
}
inline int32_t ListHotTabletsRequest::_internal_page_size() const {
  return _impl_.page_size_;
}
inline int32_t ListHotTabletsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.ListHotTabletsRequest.page_size)
  return _internal_page_size();
}
inline void ListHotTabletsRequest::_internal_set_page_size(int32_t value) {
  
  _impl_.page_size_ = value;
}
inline void ListHotTabletsRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.ListHotTabletsRequest.page_size)
}

// string page_token = 5;
inline void ListHotTabletsRequest::clear_page_token() {
  _impl_.page_token_.ClearToEmpty();
}
inline const std::string& ListHotTabletsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.ListHotTabletsRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListHotTabletsRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.ListHotTabletsRequest.page_token)
}
inline std::string* ListHotTabletsRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.ListHotTabletsRequest.page_token)
  return _s;
}
inline const std::string& ListHotTabletsRequest::_internal_page_token() const {
  return _impl_.page_token_.Get();
}
inline void ListHotTabletsRequest::_internal_set_page_token(const std::string& value) {
  
  _impl_.page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListHotTabletsRequest::_internal_mutable_page_token() {
  
  return _impl_.page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListHotTabletsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.ListHotTabletsRequest.page_token)
  return _impl_.page_token_.Release();
}
inline void ListHotTabletsRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  _impl_.page_token_.SetAllocated(page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.page_token_.IsDefault()) {
    _impl_.page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.ListHotTabletsRequest.page_token)
}

// -------------------------------------------------------------------

// ListHotTabletsResponse

// repeated .google.bigtable.admin.v2.HotTablet hot_tablets = 1;
inline int ListHotTabletsResponse::_internal_hot_tablets_size() const {
  return _impl_.hot_tablets_.size();
}
inline int ListHotTabletsResponse::hot_tablets_size() const {
  return _internal_hot_tablets_size();
}
inline ::google::bigtable::admin::v2::HotTablet* ListHotTabletsResponse::mutable_hot_tablets(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.ListHotTabletsResponse.hot_tablets)
  return _impl_.hot_tablets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::admin::v2::HotTablet >*
ListHotTabletsResponse::mutable_hot_tablets() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.admin.v2.ListHotTabletsResponse.hot_tablets)
  return &_impl_.hot_tablets_;
}
inline const ::google::bigtable::admin::v2::HotTablet& ListHotTabletsResponse::_internal_hot_tablets(int index) const {
  return _impl_.hot_tablets_.Get(index);
}
inline const ::google::bigtable::admin::v2::HotTablet& ListHotTabletsResponse::hot_tablets(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.ListHotTabletsResponse.hot_tablets)
  return _internal_hot_tablets(index);
}
inline ::google::bigtable::admin::v2::HotTablet* ListHotTabletsResponse::_internal_add_hot_tablets() {
  return _impl_.hot_tablets_.Add();
}
inline ::google::bigtable::admin::v2::HotTablet* ListHotTabletsResponse::add_hot_tablets() {
  ::google::bigtable::admin::v2::HotTablet* _add = _internal_add_hot_tablets();
  // @@protoc_insertion_point(field_add:google.bigtable.admin.v2.ListHotTabletsResponse.hot_tablets)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::admin::v2::HotTablet >&
ListHotTabletsResponse::hot_tablets() const {
  // @@protoc_insertion_point(field_list:google.bigtable.admin.v2.ListHotTabletsResponse.hot_tablets)
  return _impl_.hot_tablets_;
}

// string next_page_token = 2;
inline void ListHotTabletsResponse::clear_next_page_token() {
  _impl_.next_page_token_.ClearToEmpty();
}
inline const std::string& ListHotTabletsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.ListHotTabletsResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListHotTabletsResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.next_page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.ListHotTabletsResponse.next_page_token)
}
inline std::string* ListHotTabletsResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.ListHotTabletsResponse.next_page_token)
  return _s;
}
inline const std::string& ListHotTabletsResponse::_internal_next_page_token() const {
  return _impl_.next_page_token_.Get();
}
inline void ListHotTabletsResponse::_internal_set_next_page_token(const std::string& value) {
  
  _impl_.next_page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListHotTabletsResponse::_internal_mutable_next_page_token() {
  
  return _impl_.next_page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListHotTabletsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.ListHotTabletsResponse.next_page_token)
  return _impl_.next_page_token_.Release();
}
inline void ListHotTabletsResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  _impl_.next_page_token_.SetAllocated(next_page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.next_page_token_.IsDefault()) {
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.ListHotTabletsResponse.next_page_token)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace admin
}  // namespace bigtable
}  // namespace google

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::google::bigtable::admin::v2::CreateClusterMetadata_TableProgress_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::bigtable::admin::v2::CreateClusterMetadata_TableProgress_State>() {
  return ::google::bigtable::admin::v2::CreateClusterMetadata_TableProgress_State_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fbigtable_2fadmin_2fv2_2fbigtable_5finstance_5fadmin_2eproto
