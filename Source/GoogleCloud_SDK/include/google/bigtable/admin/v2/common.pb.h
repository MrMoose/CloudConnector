// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/bigtable/admin/v2/common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fbigtable_2fadmin_2fv2_2fcommon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fbigtable_2fadmin_2fv2_2fcommon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fbigtable_2fadmin_2fv2_2fcommon_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fbigtable_2fadmin_2fv2_2fcommon_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fbigtable_2fadmin_2fv2_2fcommon_2eproto;
namespace google {
namespace bigtable {
namespace admin {
namespace v2 {
class OperationProgress;
class OperationProgressDefaultTypeInternal;
extern OperationProgressDefaultTypeInternal _OperationProgress_default_instance_;
}  // namespace v2
}  // namespace admin
}  // namespace bigtable
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::bigtable::admin::v2::OperationProgress* Arena::CreateMaybeMessage<::google::bigtable::admin::v2::OperationProgress>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace bigtable {
namespace admin {
namespace v2 {

enum StorageType : int {
  STORAGE_TYPE_UNSPECIFIED = 0,
  SSD = 1,
  HDD = 2,
  StorageType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  StorageType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool StorageType_IsValid(int value);
constexpr StorageType StorageType_MIN = STORAGE_TYPE_UNSPECIFIED;
constexpr StorageType StorageType_MAX = HDD;
constexpr int StorageType_ARRAYSIZE = StorageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StorageType_descriptor();
template<typename T>
inline const std::string& StorageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StorageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StorageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StorageType_descriptor(), enum_t_value);
}
inline bool StorageType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StorageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StorageType>(
    StorageType_descriptor(), name, value);
}
// ===================================================================

class OperationProgress PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.v2.OperationProgress) */ {
 public:
  inline OperationProgress() : OperationProgress(nullptr) {}
  virtual ~OperationProgress();

  OperationProgress(const OperationProgress& from);
  OperationProgress(OperationProgress&& from) noexcept
    : OperationProgress() {
    *this = ::std::move(from);
  }

  inline OperationProgress& operator=(const OperationProgress& from) {
    CopyFrom(from);
    return *this;
  }
  inline OperationProgress& operator=(OperationProgress&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OperationProgress& default_instance();

  static inline const OperationProgress* internal_default_instance() {
    return reinterpret_cast<const OperationProgress*>(
               &_OperationProgress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OperationProgress& a, OperationProgress& b) {
    a.Swap(&b);
  }
  inline void Swap(OperationProgress* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OperationProgress* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OperationProgress* New() const final {
    return CreateMaybeMessage<OperationProgress>(nullptr);
  }

  OperationProgress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OperationProgress>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OperationProgress& from);
  void MergeFrom(const OperationProgress& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OperationProgress* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.admin.v2.OperationProgress";
  }
  protected:
  explicit OperationProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fbigtable_2fadmin_2fv2_2fcommon_2eproto);
    return ::descriptor_table_google_2fbigtable_2fadmin_2fv2_2fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartTimeFieldNumber = 2,
    kEndTimeFieldNumber = 3,
    kProgressPercentFieldNumber = 1,
  };
  // .google.protobuf.Timestamp start_time = 2;
  bool has_start_time() const;
  private:
  bool _internal_has_start_time() const;
  public:
  void clear_start_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& start_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_start_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_start_time();
  void set_allocated_start_time(PROTOBUF_NAMESPACE_ID::Timestamp* start_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_start_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_start_time();
  public:
  void unsafe_arena_set_allocated_start_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* start_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_start_time();

  // .google.protobuf.Timestamp end_time = 3;
  bool has_end_time() const;
  private:
  bool _internal_has_end_time() const;
  public:
  void clear_end_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& end_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_end_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_end_time();
  void set_allocated_end_time(PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_end_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_end_time();
  public:
  void unsafe_arena_set_allocated_end_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_end_time();

  // int32 progress_percent = 1;
  void clear_progress_percent();
  ::PROTOBUF_NAMESPACE_ID::int32 progress_percent() const;
  void set_progress_percent(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_progress_percent() const;
  void _internal_set_progress_percent(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.v2.OperationProgress)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::Timestamp* start_time_;
  PROTOBUF_NAMESPACE_ID::Timestamp* end_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 progress_percent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fbigtable_2fadmin_2fv2_2fcommon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OperationProgress

// int32 progress_percent = 1;
inline void OperationProgress::clear_progress_percent() {
  progress_percent_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OperationProgress::_internal_progress_percent() const {
  return progress_percent_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OperationProgress::progress_percent() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.OperationProgress.progress_percent)
  return _internal_progress_percent();
}
inline void OperationProgress::_internal_set_progress_percent(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  progress_percent_ = value;
}
inline void OperationProgress::set_progress_percent(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_progress_percent(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.OperationProgress.progress_percent)
}

// .google.protobuf.Timestamp start_time = 2;
inline bool OperationProgress::_internal_has_start_time() const {
  return this != internal_default_instance() && start_time_ != nullptr;
}
inline bool OperationProgress::has_start_time() const {
  return _internal_has_start_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& OperationProgress::_internal_start_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = start_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& OperationProgress::start_time() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.OperationProgress.start_time)
  return _internal_start_time();
}
inline void OperationProgress::unsafe_arena_set_allocated_start_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* start_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time_);
  }
  start_time_ = start_time;
  if (start_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.admin.v2.OperationProgress.start_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* OperationProgress::release_start_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = start_time_;
  start_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* OperationProgress::unsafe_arena_release_start_time() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.OperationProgress.start_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = start_time_;
  start_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* OperationProgress::_internal_mutable_start_time() {
  
  if (start_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    start_time_ = p;
  }
  return start_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* OperationProgress::mutable_start_time() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.OperationProgress.start_time)
  return _internal_mutable_start_time();
}
inline void OperationProgress::set_allocated_start_time(PROTOBUF_NAMESPACE_ID::Timestamp* start_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time_);
  }
  if (start_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time)->GetArena();
    if (message_arena != submessage_arena) {
      start_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_time, submessage_arena);
    }
    
  } else {
    
  }
  start_time_ = start_time;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.OperationProgress.start_time)
}

// .google.protobuf.Timestamp end_time = 3;
inline bool OperationProgress::_internal_has_end_time() const {
  return this != internal_default_instance() && end_time_ != nullptr;
}
inline bool OperationProgress::has_end_time() const {
  return _internal_has_end_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& OperationProgress::_internal_end_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = end_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& OperationProgress::end_time() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.OperationProgress.end_time)
  return _internal_end_time();
}
inline void OperationProgress::unsafe_arena_set_allocated_end_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time_);
  }
  end_time_ = end_time;
  if (end_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.admin.v2.OperationProgress.end_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* OperationProgress::release_end_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_time_;
  end_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* OperationProgress::unsafe_arena_release_end_time() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.OperationProgress.end_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_time_;
  end_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* OperationProgress::_internal_mutable_end_time() {
  
  if (end_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    end_time_ = p;
  }
  return end_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* OperationProgress::mutable_end_time() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.OperationProgress.end_time)
  return _internal_mutable_end_time();
}
inline void OperationProgress::set_allocated_end_time(PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time_);
  }
  if (end_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time)->GetArena();
    if (message_arena != submessage_arena) {
      end_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_time, submessage_arena);
    }
    
  } else {
    
  }
  end_time_ = end_time;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.OperationProgress.end_time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace admin
}  // namespace bigtable
}  // namespace google

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::google::bigtable::admin::v2::StorageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::bigtable::admin::v2::StorageType>() {
  return ::google::bigtable::admin::v2::StorageType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fbigtable_2fadmin_2fv2_2fcommon_2eproto
