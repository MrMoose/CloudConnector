// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/bigtable/admin/v2/bigtable_table_admin.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include "google/api/field_behavior.pb.h"
#include "google/api/resource.pb.h"
#include "google/bigtable/admin/v2/common.pb.h"
#include "google/bigtable/admin/v2/table.pb.h"
#include "google/iam/v1/iam_policy.pb.h"
#include "google/iam/v1/policy.pb.h"
#include "google/longrunning/operations.pb.h"
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/field_mask.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[31]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto;
namespace google {
namespace bigtable {
namespace admin {
namespace v2 {
class CheckConsistencyRequest;
class CheckConsistencyRequestDefaultTypeInternal;
extern CheckConsistencyRequestDefaultTypeInternal _CheckConsistencyRequest_default_instance_;
class CheckConsistencyResponse;
class CheckConsistencyResponseDefaultTypeInternal;
extern CheckConsistencyResponseDefaultTypeInternal _CheckConsistencyResponse_default_instance_;
class CreateBackupMetadata;
class CreateBackupMetadataDefaultTypeInternal;
extern CreateBackupMetadataDefaultTypeInternal _CreateBackupMetadata_default_instance_;
class CreateBackupRequest;
class CreateBackupRequestDefaultTypeInternal;
extern CreateBackupRequestDefaultTypeInternal _CreateBackupRequest_default_instance_;
class CreateTableFromSnapshotMetadata;
class CreateTableFromSnapshotMetadataDefaultTypeInternal;
extern CreateTableFromSnapshotMetadataDefaultTypeInternal _CreateTableFromSnapshotMetadata_default_instance_;
class CreateTableFromSnapshotRequest;
class CreateTableFromSnapshotRequestDefaultTypeInternal;
extern CreateTableFromSnapshotRequestDefaultTypeInternal _CreateTableFromSnapshotRequest_default_instance_;
class CreateTableRequest;
class CreateTableRequestDefaultTypeInternal;
extern CreateTableRequestDefaultTypeInternal _CreateTableRequest_default_instance_;
class CreateTableRequest_Split;
class CreateTableRequest_SplitDefaultTypeInternal;
extern CreateTableRequest_SplitDefaultTypeInternal _CreateTableRequest_Split_default_instance_;
class DeleteBackupRequest;
class DeleteBackupRequestDefaultTypeInternal;
extern DeleteBackupRequestDefaultTypeInternal _DeleteBackupRequest_default_instance_;
class DeleteSnapshotRequest;
class DeleteSnapshotRequestDefaultTypeInternal;
extern DeleteSnapshotRequestDefaultTypeInternal _DeleteSnapshotRequest_default_instance_;
class DeleteTableRequest;
class DeleteTableRequestDefaultTypeInternal;
extern DeleteTableRequestDefaultTypeInternal _DeleteTableRequest_default_instance_;
class DropRowRangeRequest;
class DropRowRangeRequestDefaultTypeInternal;
extern DropRowRangeRequestDefaultTypeInternal _DropRowRangeRequest_default_instance_;
class GenerateConsistencyTokenRequest;
class GenerateConsistencyTokenRequestDefaultTypeInternal;
extern GenerateConsistencyTokenRequestDefaultTypeInternal _GenerateConsistencyTokenRequest_default_instance_;
class GenerateConsistencyTokenResponse;
class GenerateConsistencyTokenResponseDefaultTypeInternal;
extern GenerateConsistencyTokenResponseDefaultTypeInternal _GenerateConsistencyTokenResponse_default_instance_;
class GetBackupRequest;
class GetBackupRequestDefaultTypeInternal;
extern GetBackupRequestDefaultTypeInternal _GetBackupRequest_default_instance_;
class GetSnapshotRequest;
class GetSnapshotRequestDefaultTypeInternal;
extern GetSnapshotRequestDefaultTypeInternal _GetSnapshotRequest_default_instance_;
class GetTableRequest;
class GetTableRequestDefaultTypeInternal;
extern GetTableRequestDefaultTypeInternal _GetTableRequest_default_instance_;
class ListBackupsRequest;
class ListBackupsRequestDefaultTypeInternal;
extern ListBackupsRequestDefaultTypeInternal _ListBackupsRequest_default_instance_;
class ListBackupsResponse;
class ListBackupsResponseDefaultTypeInternal;
extern ListBackupsResponseDefaultTypeInternal _ListBackupsResponse_default_instance_;
class ListSnapshotsRequest;
class ListSnapshotsRequestDefaultTypeInternal;
extern ListSnapshotsRequestDefaultTypeInternal _ListSnapshotsRequest_default_instance_;
class ListSnapshotsResponse;
class ListSnapshotsResponseDefaultTypeInternal;
extern ListSnapshotsResponseDefaultTypeInternal _ListSnapshotsResponse_default_instance_;
class ListTablesRequest;
class ListTablesRequestDefaultTypeInternal;
extern ListTablesRequestDefaultTypeInternal _ListTablesRequest_default_instance_;
class ListTablesResponse;
class ListTablesResponseDefaultTypeInternal;
extern ListTablesResponseDefaultTypeInternal _ListTablesResponse_default_instance_;
class ModifyColumnFamiliesRequest;
class ModifyColumnFamiliesRequestDefaultTypeInternal;
extern ModifyColumnFamiliesRequestDefaultTypeInternal _ModifyColumnFamiliesRequest_default_instance_;
class ModifyColumnFamiliesRequest_Modification;
class ModifyColumnFamiliesRequest_ModificationDefaultTypeInternal;
extern ModifyColumnFamiliesRequest_ModificationDefaultTypeInternal _ModifyColumnFamiliesRequest_Modification_default_instance_;
class OptimizeRestoredTableMetadata;
class OptimizeRestoredTableMetadataDefaultTypeInternal;
extern OptimizeRestoredTableMetadataDefaultTypeInternal _OptimizeRestoredTableMetadata_default_instance_;
class RestoreTableMetadata;
class RestoreTableMetadataDefaultTypeInternal;
extern RestoreTableMetadataDefaultTypeInternal _RestoreTableMetadata_default_instance_;
class RestoreTableRequest;
class RestoreTableRequestDefaultTypeInternal;
extern RestoreTableRequestDefaultTypeInternal _RestoreTableRequest_default_instance_;
class SnapshotTableMetadata;
class SnapshotTableMetadataDefaultTypeInternal;
extern SnapshotTableMetadataDefaultTypeInternal _SnapshotTableMetadata_default_instance_;
class SnapshotTableRequest;
class SnapshotTableRequestDefaultTypeInternal;
extern SnapshotTableRequestDefaultTypeInternal _SnapshotTableRequest_default_instance_;
class UpdateBackupRequest;
class UpdateBackupRequestDefaultTypeInternal;
extern UpdateBackupRequestDefaultTypeInternal _UpdateBackupRequest_default_instance_;
}  // namespace v2
}  // namespace admin
}  // namespace bigtable
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::bigtable::admin::v2::CheckConsistencyRequest* Arena::CreateMaybeMessage<::google::bigtable::admin::v2::CheckConsistencyRequest>(Arena*);
template<> ::google::bigtable::admin::v2::CheckConsistencyResponse* Arena::CreateMaybeMessage<::google::bigtable::admin::v2::CheckConsistencyResponse>(Arena*);
template<> ::google::bigtable::admin::v2::CreateBackupMetadata* Arena::CreateMaybeMessage<::google::bigtable::admin::v2::CreateBackupMetadata>(Arena*);
template<> ::google::bigtable::admin::v2::CreateBackupRequest* Arena::CreateMaybeMessage<::google::bigtable::admin::v2::CreateBackupRequest>(Arena*);
template<> ::google::bigtable::admin::v2::CreateTableFromSnapshotMetadata* Arena::CreateMaybeMessage<::google::bigtable::admin::v2::CreateTableFromSnapshotMetadata>(Arena*);
template<> ::google::bigtable::admin::v2::CreateTableFromSnapshotRequest* Arena::CreateMaybeMessage<::google::bigtable::admin::v2::CreateTableFromSnapshotRequest>(Arena*);
template<> ::google::bigtable::admin::v2::CreateTableRequest* Arena::CreateMaybeMessage<::google::bigtable::admin::v2::CreateTableRequest>(Arena*);
template<> ::google::bigtable::admin::v2::CreateTableRequest_Split* Arena::CreateMaybeMessage<::google::bigtable::admin::v2::CreateTableRequest_Split>(Arena*);
template<> ::google::bigtable::admin::v2::DeleteBackupRequest* Arena::CreateMaybeMessage<::google::bigtable::admin::v2::DeleteBackupRequest>(Arena*);
template<> ::google::bigtable::admin::v2::DeleteSnapshotRequest* Arena::CreateMaybeMessage<::google::bigtable::admin::v2::DeleteSnapshotRequest>(Arena*);
template<> ::google::bigtable::admin::v2::DeleteTableRequest* Arena::CreateMaybeMessage<::google::bigtable::admin::v2::DeleteTableRequest>(Arena*);
template<> ::google::bigtable::admin::v2::DropRowRangeRequest* Arena::CreateMaybeMessage<::google::bigtable::admin::v2::DropRowRangeRequest>(Arena*);
template<> ::google::bigtable::admin::v2::GenerateConsistencyTokenRequest* Arena::CreateMaybeMessage<::google::bigtable::admin::v2::GenerateConsistencyTokenRequest>(Arena*);
template<> ::google::bigtable::admin::v2::GenerateConsistencyTokenResponse* Arena::CreateMaybeMessage<::google::bigtable::admin::v2::GenerateConsistencyTokenResponse>(Arena*);
template<> ::google::bigtable::admin::v2::GetBackupRequest* Arena::CreateMaybeMessage<::google::bigtable::admin::v2::GetBackupRequest>(Arena*);
template<> ::google::bigtable::admin::v2::GetSnapshotRequest* Arena::CreateMaybeMessage<::google::bigtable::admin::v2::GetSnapshotRequest>(Arena*);
template<> ::google::bigtable::admin::v2::GetTableRequest* Arena::CreateMaybeMessage<::google::bigtable::admin::v2::GetTableRequest>(Arena*);
template<> ::google::bigtable::admin::v2::ListBackupsRequest* Arena::CreateMaybeMessage<::google::bigtable::admin::v2::ListBackupsRequest>(Arena*);
template<> ::google::bigtable::admin::v2::ListBackupsResponse* Arena::CreateMaybeMessage<::google::bigtable::admin::v2::ListBackupsResponse>(Arena*);
template<> ::google::bigtable::admin::v2::ListSnapshotsRequest* Arena::CreateMaybeMessage<::google::bigtable::admin::v2::ListSnapshotsRequest>(Arena*);
template<> ::google::bigtable::admin::v2::ListSnapshotsResponse* Arena::CreateMaybeMessage<::google::bigtable::admin::v2::ListSnapshotsResponse>(Arena*);
template<> ::google::bigtable::admin::v2::ListTablesRequest* Arena::CreateMaybeMessage<::google::bigtable::admin::v2::ListTablesRequest>(Arena*);
template<> ::google::bigtable::admin::v2::ListTablesResponse* Arena::CreateMaybeMessage<::google::bigtable::admin::v2::ListTablesResponse>(Arena*);
template<> ::google::bigtable::admin::v2::ModifyColumnFamiliesRequest* Arena::CreateMaybeMessage<::google::bigtable::admin::v2::ModifyColumnFamiliesRequest>(Arena*);
template<> ::google::bigtable::admin::v2::ModifyColumnFamiliesRequest_Modification* Arena::CreateMaybeMessage<::google::bigtable::admin::v2::ModifyColumnFamiliesRequest_Modification>(Arena*);
template<> ::google::bigtable::admin::v2::OptimizeRestoredTableMetadata* Arena::CreateMaybeMessage<::google::bigtable::admin::v2::OptimizeRestoredTableMetadata>(Arena*);
template<> ::google::bigtable::admin::v2::RestoreTableMetadata* Arena::CreateMaybeMessage<::google::bigtable::admin::v2::RestoreTableMetadata>(Arena*);
template<> ::google::bigtable::admin::v2::RestoreTableRequest* Arena::CreateMaybeMessage<::google::bigtable::admin::v2::RestoreTableRequest>(Arena*);
template<> ::google::bigtable::admin::v2::SnapshotTableMetadata* Arena::CreateMaybeMessage<::google::bigtable::admin::v2::SnapshotTableMetadata>(Arena*);
template<> ::google::bigtable::admin::v2::SnapshotTableRequest* Arena::CreateMaybeMessage<::google::bigtable::admin::v2::SnapshotTableRequest>(Arena*);
template<> ::google::bigtable::admin::v2::UpdateBackupRequest* Arena::CreateMaybeMessage<::google::bigtable::admin::v2::UpdateBackupRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace bigtable {
namespace admin {
namespace v2 {

// ===================================================================

class RestoreTableRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.v2.RestoreTableRequest) */ {
 public:
  inline RestoreTableRequest() : RestoreTableRequest(nullptr) {}
  virtual ~RestoreTableRequest();

  RestoreTableRequest(const RestoreTableRequest& from);
  RestoreTableRequest(RestoreTableRequest&& from) noexcept
    : RestoreTableRequest() {
    *this = ::std::move(from);
  }

  inline RestoreTableRequest& operator=(const RestoreTableRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RestoreTableRequest& operator=(RestoreTableRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RestoreTableRequest& default_instance();

  enum SourceCase {
    kBackup = 3,
    SOURCE_NOT_SET = 0,
  };

  static inline const RestoreTableRequest* internal_default_instance() {
    return reinterpret_cast<const RestoreTableRequest*>(
               &_RestoreTableRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RestoreTableRequest& a, RestoreTableRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RestoreTableRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RestoreTableRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RestoreTableRequest* New() const final {
    return CreateMaybeMessage<RestoreTableRequest>(nullptr);
  }

  RestoreTableRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RestoreTableRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RestoreTableRequest& from);
  void MergeFrom(const RestoreTableRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RestoreTableRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.admin.v2.RestoreTableRequest";
  }
  protected:
  explicit RestoreTableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto);
    return ::descriptor_table_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kTableIdFieldNumber = 2,
    kBackupFieldNumber = 3,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  void set_parent(const std::string& value);
  void set_parent(std::string&& value);
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  std::string* mutable_parent();
  std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string table_id = 2 [(.google.api.field_behavior) = REQUIRED];
  void clear_table_id();
  const std::string& table_id() const;
  void set_table_id(const std::string& value);
  void set_table_id(std::string&& value);
  void set_table_id(const char* value);
  void set_table_id(const char* value, size_t size);
  std::string* mutable_table_id();
  std::string* release_table_id();
  void set_allocated_table_id(std::string* table_id);
  private:
  const std::string& _internal_table_id() const;
  void _internal_set_table_id(const std::string& value);
  std::string* _internal_mutable_table_id();
  public:

  // string backup = 3 [(.google.api.resource_reference) = {
  private:
  bool _internal_has_backup() const;
  public:
  void clear_backup();
  const std::string& backup() const;
  void set_backup(const std::string& value);
  void set_backup(std::string&& value);
  void set_backup(const char* value);
  void set_backup(const char* value, size_t size);
  std::string* mutable_backup();
  std::string* release_backup();
  void set_allocated_backup(std::string* backup);
  private:
  const std::string& _internal_backup() const;
  void _internal_set_backup(const std::string& value);
  std::string* _internal_mutable_backup();
  public:

  void clear_source();
  SourceCase source_case() const;
  // @@protoc_insertion_point(class_scope:google.bigtable.admin.v2.RestoreTableRequest)
 private:
  class _Internal;
  void set_has_backup();

  inline bool has_source() const;
  inline void clear_has_source();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_id_;
  union SourceUnion {
    SourceUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr backup_;
  } source_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class RestoreTableMetadata PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.v2.RestoreTableMetadata) */ {
 public:
  inline RestoreTableMetadata() : RestoreTableMetadata(nullptr) {}
  virtual ~RestoreTableMetadata();

  RestoreTableMetadata(const RestoreTableMetadata& from);
  RestoreTableMetadata(RestoreTableMetadata&& from) noexcept
    : RestoreTableMetadata() {
    *this = ::std::move(from);
  }

  inline RestoreTableMetadata& operator=(const RestoreTableMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline RestoreTableMetadata& operator=(RestoreTableMetadata&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RestoreTableMetadata& default_instance();

  enum SourceInfoCase {
    kBackupInfo = 3,
    SOURCE_INFO_NOT_SET = 0,
  };

  static inline const RestoreTableMetadata* internal_default_instance() {
    return reinterpret_cast<const RestoreTableMetadata*>(
               &_RestoreTableMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RestoreTableMetadata& a, RestoreTableMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(RestoreTableMetadata* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RestoreTableMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RestoreTableMetadata* New() const final {
    return CreateMaybeMessage<RestoreTableMetadata>(nullptr);
  }

  RestoreTableMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RestoreTableMetadata>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RestoreTableMetadata& from);
  void MergeFrom(const RestoreTableMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RestoreTableMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.admin.v2.RestoreTableMetadata";
  }
  protected:
  explicit RestoreTableMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto);
    return ::descriptor_table_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kOptimizeTableOperationNameFieldNumber = 4,
    kProgressFieldNumber = 5,
    kSourceTypeFieldNumber = 2,
    kBackupInfoFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string optimize_table_operation_name = 4;
  void clear_optimize_table_operation_name();
  const std::string& optimize_table_operation_name() const;
  void set_optimize_table_operation_name(const std::string& value);
  void set_optimize_table_operation_name(std::string&& value);
  void set_optimize_table_operation_name(const char* value);
  void set_optimize_table_operation_name(const char* value, size_t size);
  std::string* mutable_optimize_table_operation_name();
  std::string* release_optimize_table_operation_name();
  void set_allocated_optimize_table_operation_name(std::string* optimize_table_operation_name);
  private:
  const std::string& _internal_optimize_table_operation_name() const;
  void _internal_set_optimize_table_operation_name(const std::string& value);
  std::string* _internal_mutable_optimize_table_operation_name();
  public:

  // .google.bigtable.admin.v2.OperationProgress progress = 5;
  bool has_progress() const;
  private:
  bool _internal_has_progress() const;
  public:
  void clear_progress();
  const ::google::bigtable::admin::v2::OperationProgress& progress() const;
  ::google::bigtable::admin::v2::OperationProgress* release_progress();
  ::google::bigtable::admin::v2::OperationProgress* mutable_progress();
  void set_allocated_progress(::google::bigtable::admin::v2::OperationProgress* progress);
  private:
  const ::google::bigtable::admin::v2::OperationProgress& _internal_progress() const;
  ::google::bigtable::admin::v2::OperationProgress* _internal_mutable_progress();
  public:
  void unsafe_arena_set_allocated_progress(
      ::google::bigtable::admin::v2::OperationProgress* progress);
  ::google::bigtable::admin::v2::OperationProgress* unsafe_arena_release_progress();

  // .google.bigtable.admin.v2.RestoreSourceType source_type = 2;
  void clear_source_type();
  ::google::bigtable::admin::v2::RestoreSourceType source_type() const;
  void set_source_type(::google::bigtable::admin::v2::RestoreSourceType value);
  private:
  ::google::bigtable::admin::v2::RestoreSourceType _internal_source_type() const;
  void _internal_set_source_type(::google::bigtable::admin::v2::RestoreSourceType value);
  public:

  // .google.bigtable.admin.v2.BackupInfo backup_info = 3;
  bool has_backup_info() const;
  private:
  bool _internal_has_backup_info() const;
  public:
  void clear_backup_info();
  const ::google::bigtable::admin::v2::BackupInfo& backup_info() const;
  ::google::bigtable::admin::v2::BackupInfo* release_backup_info();
  ::google::bigtable::admin::v2::BackupInfo* mutable_backup_info();
  void set_allocated_backup_info(::google::bigtable::admin::v2::BackupInfo* backup_info);
  private:
  const ::google::bigtable::admin::v2::BackupInfo& _internal_backup_info() const;
  ::google::bigtable::admin::v2::BackupInfo* _internal_mutable_backup_info();
  public:
  void unsafe_arena_set_allocated_backup_info(
      ::google::bigtable::admin::v2::BackupInfo* backup_info);
  ::google::bigtable::admin::v2::BackupInfo* unsafe_arena_release_backup_info();

  void clear_source_info();
  SourceInfoCase source_info_case() const;
  // @@protoc_insertion_point(class_scope:google.bigtable.admin.v2.RestoreTableMetadata)
 private:
  class _Internal;
  void set_has_backup_info();

  inline bool has_source_info() const;
  inline void clear_has_source_info();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr optimize_table_operation_name_;
  ::google::bigtable::admin::v2::OperationProgress* progress_;
  int source_type_;
  union SourceInfoUnion {
    SourceInfoUnion() {}
    ::google::bigtable::admin::v2::BackupInfo* backup_info_;
  } source_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class OptimizeRestoredTableMetadata PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.v2.OptimizeRestoredTableMetadata) */ {
 public:
  inline OptimizeRestoredTableMetadata() : OptimizeRestoredTableMetadata(nullptr) {}
  virtual ~OptimizeRestoredTableMetadata();

  OptimizeRestoredTableMetadata(const OptimizeRestoredTableMetadata& from);
  OptimizeRestoredTableMetadata(OptimizeRestoredTableMetadata&& from) noexcept
    : OptimizeRestoredTableMetadata() {
    *this = ::std::move(from);
  }

  inline OptimizeRestoredTableMetadata& operator=(const OptimizeRestoredTableMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline OptimizeRestoredTableMetadata& operator=(OptimizeRestoredTableMetadata&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OptimizeRestoredTableMetadata& default_instance();

  static inline const OptimizeRestoredTableMetadata* internal_default_instance() {
    return reinterpret_cast<const OptimizeRestoredTableMetadata*>(
               &_OptimizeRestoredTableMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(OptimizeRestoredTableMetadata& a, OptimizeRestoredTableMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(OptimizeRestoredTableMetadata* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OptimizeRestoredTableMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OptimizeRestoredTableMetadata* New() const final {
    return CreateMaybeMessage<OptimizeRestoredTableMetadata>(nullptr);
  }

  OptimizeRestoredTableMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OptimizeRestoredTableMetadata>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OptimizeRestoredTableMetadata& from);
  void MergeFrom(const OptimizeRestoredTableMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptimizeRestoredTableMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.admin.v2.OptimizeRestoredTableMetadata";
  }
  protected:
  explicit OptimizeRestoredTableMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto);
    return ::descriptor_table_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kProgressFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.bigtable.admin.v2.OperationProgress progress = 2;
  bool has_progress() const;
  private:
  bool _internal_has_progress() const;
  public:
  void clear_progress();
  const ::google::bigtable::admin::v2::OperationProgress& progress() const;
  ::google::bigtable::admin::v2::OperationProgress* release_progress();
  ::google::bigtable::admin::v2::OperationProgress* mutable_progress();
  void set_allocated_progress(::google::bigtable::admin::v2::OperationProgress* progress);
  private:
  const ::google::bigtable::admin::v2::OperationProgress& _internal_progress() const;
  ::google::bigtable::admin::v2::OperationProgress* _internal_mutable_progress();
  public:
  void unsafe_arena_set_allocated_progress(
      ::google::bigtable::admin::v2::OperationProgress* progress);
  ::google::bigtable::admin::v2::OperationProgress* unsafe_arena_release_progress();

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.v2.OptimizeRestoredTableMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::google::bigtable::admin::v2::OperationProgress* progress_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class CreateTableRequest_Split PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.v2.CreateTableRequest.Split) */ {
 public:
  inline CreateTableRequest_Split() : CreateTableRequest_Split(nullptr) {}
  virtual ~CreateTableRequest_Split();

  CreateTableRequest_Split(const CreateTableRequest_Split& from);
  CreateTableRequest_Split(CreateTableRequest_Split&& from) noexcept
    : CreateTableRequest_Split() {
    *this = ::std::move(from);
  }

  inline CreateTableRequest_Split& operator=(const CreateTableRequest_Split& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateTableRequest_Split& operator=(CreateTableRequest_Split&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateTableRequest_Split& default_instance();

  static inline const CreateTableRequest_Split* internal_default_instance() {
    return reinterpret_cast<const CreateTableRequest_Split*>(
               &_CreateTableRequest_Split_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CreateTableRequest_Split& a, CreateTableRequest_Split& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateTableRequest_Split* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateTableRequest_Split* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateTableRequest_Split* New() const final {
    return CreateMaybeMessage<CreateTableRequest_Split>(nullptr);
  }

  CreateTableRequest_Split* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateTableRequest_Split>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateTableRequest_Split& from);
  void MergeFrom(const CreateTableRequest_Split& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateTableRequest_Split* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.admin.v2.CreateTableRequest.Split";
  }
  protected:
  explicit CreateTableRequest_Split(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto);
    return ::descriptor_table_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
  };
  // bytes key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.v2.CreateTableRequest.Split)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class CreateTableRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.v2.CreateTableRequest) */ {
 public:
  inline CreateTableRequest() : CreateTableRequest(nullptr) {}
  virtual ~CreateTableRequest();

  CreateTableRequest(const CreateTableRequest& from);
  CreateTableRequest(CreateTableRequest&& from) noexcept
    : CreateTableRequest() {
    *this = ::std::move(from);
  }

  inline CreateTableRequest& operator=(const CreateTableRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateTableRequest& operator=(CreateTableRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateTableRequest& default_instance();

  static inline const CreateTableRequest* internal_default_instance() {
    return reinterpret_cast<const CreateTableRequest*>(
               &_CreateTableRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CreateTableRequest& a, CreateTableRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateTableRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateTableRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateTableRequest* New() const final {
    return CreateMaybeMessage<CreateTableRequest>(nullptr);
  }

  CreateTableRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateTableRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateTableRequest& from);
  void MergeFrom(const CreateTableRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateTableRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.admin.v2.CreateTableRequest";
  }
  protected:
  explicit CreateTableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto);
    return ::descriptor_table_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CreateTableRequest_Split Split;

  // accessors -------------------------------------------------------

  enum : int {
    kInitialSplitsFieldNumber = 4,
    kParentFieldNumber = 1,
    kTableIdFieldNumber = 2,
    kTableFieldNumber = 3,
  };
  // repeated .google.bigtable.admin.v2.CreateTableRequest.Split initial_splits = 4;
  int initial_splits_size() const;
  private:
  int _internal_initial_splits_size() const;
  public:
  void clear_initial_splits();
  ::google::bigtable::admin::v2::CreateTableRequest_Split* mutable_initial_splits(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::admin::v2::CreateTableRequest_Split >*
      mutable_initial_splits();
  private:
  const ::google::bigtable::admin::v2::CreateTableRequest_Split& _internal_initial_splits(int index) const;
  ::google::bigtable::admin::v2::CreateTableRequest_Split* _internal_add_initial_splits();
  public:
  const ::google::bigtable::admin::v2::CreateTableRequest_Split& initial_splits(int index) const;
  ::google::bigtable::admin::v2::CreateTableRequest_Split* add_initial_splits();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::admin::v2::CreateTableRequest_Split >&
      initial_splits() const;

  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  void set_parent(const std::string& value);
  void set_parent(std::string&& value);
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  std::string* mutable_parent();
  std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string table_id = 2 [(.google.api.field_behavior) = REQUIRED];
  void clear_table_id();
  const std::string& table_id() const;
  void set_table_id(const std::string& value);
  void set_table_id(std::string&& value);
  void set_table_id(const char* value);
  void set_table_id(const char* value, size_t size);
  std::string* mutable_table_id();
  std::string* release_table_id();
  void set_allocated_table_id(std::string* table_id);
  private:
  const std::string& _internal_table_id() const;
  void _internal_set_table_id(const std::string& value);
  std::string* _internal_mutable_table_id();
  public:

  // .google.bigtable.admin.v2.Table table = 3 [(.google.api.field_behavior) = REQUIRED];
  bool has_table() const;
  private:
  bool _internal_has_table() const;
  public:
  void clear_table();
  const ::google::bigtable::admin::v2::Table& table() const;
  ::google::bigtable::admin::v2::Table* release_table();
  ::google::bigtable::admin::v2::Table* mutable_table();
  void set_allocated_table(::google::bigtable::admin::v2::Table* table);
  private:
  const ::google::bigtable::admin::v2::Table& _internal_table() const;
  ::google::bigtable::admin::v2::Table* _internal_mutable_table();
  public:
  void unsafe_arena_set_allocated_table(
      ::google::bigtable::admin::v2::Table* table);
  ::google::bigtable::admin::v2::Table* unsafe_arena_release_table();

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.v2.CreateTableRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::admin::v2::CreateTableRequest_Split > initial_splits_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_id_;
  ::google::bigtable::admin::v2::Table* table_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class CreateTableFromSnapshotRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.v2.CreateTableFromSnapshotRequest) */ {
 public:
  inline CreateTableFromSnapshotRequest() : CreateTableFromSnapshotRequest(nullptr) {}
  virtual ~CreateTableFromSnapshotRequest();

  CreateTableFromSnapshotRequest(const CreateTableFromSnapshotRequest& from);
  CreateTableFromSnapshotRequest(CreateTableFromSnapshotRequest&& from) noexcept
    : CreateTableFromSnapshotRequest() {
    *this = ::std::move(from);
  }

  inline CreateTableFromSnapshotRequest& operator=(const CreateTableFromSnapshotRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateTableFromSnapshotRequest& operator=(CreateTableFromSnapshotRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateTableFromSnapshotRequest& default_instance();

  static inline const CreateTableFromSnapshotRequest* internal_default_instance() {
    return reinterpret_cast<const CreateTableFromSnapshotRequest*>(
               &_CreateTableFromSnapshotRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CreateTableFromSnapshotRequest& a, CreateTableFromSnapshotRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateTableFromSnapshotRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateTableFromSnapshotRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateTableFromSnapshotRequest* New() const final {
    return CreateMaybeMessage<CreateTableFromSnapshotRequest>(nullptr);
  }

  CreateTableFromSnapshotRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateTableFromSnapshotRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateTableFromSnapshotRequest& from);
  void MergeFrom(const CreateTableFromSnapshotRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateTableFromSnapshotRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.admin.v2.CreateTableFromSnapshotRequest";
  }
  protected:
  explicit CreateTableFromSnapshotRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto);
    return ::descriptor_table_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kTableIdFieldNumber = 2,
    kSourceSnapshotFieldNumber = 3,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  void set_parent(const std::string& value);
  void set_parent(std::string&& value);
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  std::string* mutable_parent();
  std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string table_id = 2 [(.google.api.field_behavior) = REQUIRED];
  void clear_table_id();
  const std::string& table_id() const;
  void set_table_id(const std::string& value);
  void set_table_id(std::string&& value);
  void set_table_id(const char* value);
  void set_table_id(const char* value, size_t size);
  std::string* mutable_table_id();
  std::string* release_table_id();
  void set_allocated_table_id(std::string* table_id);
  private:
  const std::string& _internal_table_id() const;
  void _internal_set_table_id(const std::string& value);
  std::string* _internal_mutable_table_id();
  public:

  // string source_snapshot = 3 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_source_snapshot();
  const std::string& source_snapshot() const;
  void set_source_snapshot(const std::string& value);
  void set_source_snapshot(std::string&& value);
  void set_source_snapshot(const char* value);
  void set_source_snapshot(const char* value, size_t size);
  std::string* mutable_source_snapshot();
  std::string* release_source_snapshot();
  void set_allocated_source_snapshot(std::string* source_snapshot);
  private:
  const std::string& _internal_source_snapshot() const;
  void _internal_set_source_snapshot(const std::string& value);
  std::string* _internal_mutable_source_snapshot();
  public:

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.v2.CreateTableFromSnapshotRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_snapshot_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class DropRowRangeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.v2.DropRowRangeRequest) */ {
 public:
  inline DropRowRangeRequest() : DropRowRangeRequest(nullptr) {}
  virtual ~DropRowRangeRequest();

  DropRowRangeRequest(const DropRowRangeRequest& from);
  DropRowRangeRequest(DropRowRangeRequest&& from) noexcept
    : DropRowRangeRequest() {
    *this = ::std::move(from);
  }

  inline DropRowRangeRequest& operator=(const DropRowRangeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DropRowRangeRequest& operator=(DropRowRangeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DropRowRangeRequest& default_instance();

  enum TargetCase {
    kRowKeyPrefix = 2,
    kDeleteAllDataFromTable = 3,
    TARGET_NOT_SET = 0,
  };

  static inline const DropRowRangeRequest* internal_default_instance() {
    return reinterpret_cast<const DropRowRangeRequest*>(
               &_DropRowRangeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DropRowRangeRequest& a, DropRowRangeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DropRowRangeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DropRowRangeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DropRowRangeRequest* New() const final {
    return CreateMaybeMessage<DropRowRangeRequest>(nullptr);
  }

  DropRowRangeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DropRowRangeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DropRowRangeRequest& from);
  void MergeFrom(const DropRowRangeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DropRowRangeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.admin.v2.DropRowRangeRequest";
  }
  protected:
  explicit DropRowRangeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto);
    return ::descriptor_table_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kRowKeyPrefixFieldNumber = 2,
    kDeleteAllDataFromTableFieldNumber = 3,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes row_key_prefix = 2;
  private:
  bool _internal_has_row_key_prefix() const;
  public:
  void clear_row_key_prefix();
  const std::string& row_key_prefix() const;
  void set_row_key_prefix(const std::string& value);
  void set_row_key_prefix(std::string&& value);
  void set_row_key_prefix(const char* value);
  void set_row_key_prefix(const void* value, size_t size);
  std::string* mutable_row_key_prefix();
  std::string* release_row_key_prefix();
  void set_allocated_row_key_prefix(std::string* row_key_prefix);
  private:
  const std::string& _internal_row_key_prefix() const;
  void _internal_set_row_key_prefix(const std::string& value);
  std::string* _internal_mutable_row_key_prefix();
  public:

  // bool delete_all_data_from_table = 3;
  private:
  bool _internal_has_delete_all_data_from_table() const;
  public:
  void clear_delete_all_data_from_table();
  bool delete_all_data_from_table() const;
  void set_delete_all_data_from_table(bool value);
  private:
  bool _internal_delete_all_data_from_table() const;
  void _internal_set_delete_all_data_from_table(bool value);
  public:

  void clear_target();
  TargetCase target_case() const;
  // @@protoc_insertion_point(class_scope:google.bigtable.admin.v2.DropRowRangeRequest)
 private:
  class _Internal;
  void set_has_row_key_prefix();
  void set_has_delete_all_data_from_table();

  inline bool has_target() const;
  inline void clear_has_target();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  union TargetUnion {
    TargetUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr row_key_prefix_;
    bool delete_all_data_from_table_;
  } target_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class ListTablesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.v2.ListTablesRequest) */ {
 public:
  inline ListTablesRequest() : ListTablesRequest(nullptr) {}
  virtual ~ListTablesRequest();

  ListTablesRequest(const ListTablesRequest& from);
  ListTablesRequest(ListTablesRequest&& from) noexcept
    : ListTablesRequest() {
    *this = ::std::move(from);
  }

  inline ListTablesRequest& operator=(const ListTablesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListTablesRequest& operator=(ListTablesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListTablesRequest& default_instance();

  static inline const ListTablesRequest* internal_default_instance() {
    return reinterpret_cast<const ListTablesRequest*>(
               &_ListTablesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ListTablesRequest& a, ListTablesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListTablesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListTablesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListTablesRequest* New() const final {
    return CreateMaybeMessage<ListTablesRequest>(nullptr);
  }

  ListTablesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListTablesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListTablesRequest& from);
  void MergeFrom(const ListTablesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListTablesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.admin.v2.ListTablesRequest";
  }
  protected:
  explicit ListTablesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto);
    return ::descriptor_table_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kViewFieldNumber = 2,
    kPageSizeFieldNumber = 4,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  void set_parent(const std::string& value);
  void set_parent(std::string&& value);
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  std::string* mutable_parent();
  std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 3;
  void clear_page_token();
  const std::string& page_token() const;
  void set_page_token(const std::string& value);
  void set_page_token(std::string&& value);
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  std::string* mutable_page_token();
  std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // .google.bigtable.admin.v2.Table.View view = 2;
  void clear_view();
  ::google::bigtable::admin::v2::Table_View view() const;
  void set_view(::google::bigtable::admin::v2::Table_View value);
  private:
  ::google::bigtable::admin::v2::Table_View _internal_view() const;
  void _internal_set_view(::google::bigtable::admin::v2::Table_View value);
  public:

  // int32 page_size = 4;
  void clear_page_size();
  ::PROTOBUF_NAMESPACE_ID::int32 page_size() const;
  void set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_page_size() const;
  void _internal_set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.v2.ListTablesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
  int view_;
  ::PROTOBUF_NAMESPACE_ID::int32 page_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class ListTablesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.v2.ListTablesResponse) */ {
 public:
  inline ListTablesResponse() : ListTablesResponse(nullptr) {}
  virtual ~ListTablesResponse();

  ListTablesResponse(const ListTablesResponse& from);
  ListTablesResponse(ListTablesResponse&& from) noexcept
    : ListTablesResponse() {
    *this = ::std::move(from);
  }

  inline ListTablesResponse& operator=(const ListTablesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListTablesResponse& operator=(ListTablesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListTablesResponse& default_instance();

  static inline const ListTablesResponse* internal_default_instance() {
    return reinterpret_cast<const ListTablesResponse*>(
               &_ListTablesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ListTablesResponse& a, ListTablesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListTablesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListTablesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListTablesResponse* New() const final {
    return CreateMaybeMessage<ListTablesResponse>(nullptr);
  }

  ListTablesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListTablesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListTablesResponse& from);
  void MergeFrom(const ListTablesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListTablesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.admin.v2.ListTablesResponse";
  }
  protected:
  explicit ListTablesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto);
    return ::descriptor_table_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTablesFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .google.bigtable.admin.v2.Table tables = 1;
  int tables_size() const;
  private:
  int _internal_tables_size() const;
  public:
  void clear_tables();
  ::google::bigtable::admin::v2::Table* mutable_tables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::admin::v2::Table >*
      mutable_tables();
  private:
  const ::google::bigtable::admin::v2::Table& _internal_tables(int index) const;
  ::google::bigtable::admin::v2::Table* _internal_add_tables();
  public:
  const ::google::bigtable::admin::v2::Table& tables(int index) const;
  ::google::bigtable::admin::v2::Table* add_tables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::admin::v2::Table >&
      tables() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  void set_next_page_token(const std::string& value);
  void set_next_page_token(std::string&& value);
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  std::string* mutable_next_page_token();
  std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.v2.ListTablesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::admin::v2::Table > tables_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class GetTableRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.v2.GetTableRequest) */ {
 public:
  inline GetTableRequest() : GetTableRequest(nullptr) {}
  virtual ~GetTableRequest();

  GetTableRequest(const GetTableRequest& from);
  GetTableRequest(GetTableRequest&& from) noexcept
    : GetTableRequest() {
    *this = ::std::move(from);
  }

  inline GetTableRequest& operator=(const GetTableRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTableRequest& operator=(GetTableRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTableRequest& default_instance();

  static inline const GetTableRequest* internal_default_instance() {
    return reinterpret_cast<const GetTableRequest*>(
               &_GetTableRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetTableRequest& a, GetTableRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTableRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTableRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTableRequest* New() const final {
    return CreateMaybeMessage<GetTableRequest>(nullptr);
  }

  GetTableRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTableRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTableRequest& from);
  void MergeFrom(const GetTableRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTableRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.admin.v2.GetTableRequest";
  }
  protected:
  explicit GetTableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto);
    return ::descriptor_table_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kViewFieldNumber = 2,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.bigtable.admin.v2.Table.View view = 2;
  void clear_view();
  ::google::bigtable::admin::v2::Table_View view() const;
  void set_view(::google::bigtable::admin::v2::Table_View value);
  private:
  ::google::bigtable::admin::v2::Table_View _internal_view() const;
  void _internal_set_view(::google::bigtable::admin::v2::Table_View value);
  public:

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.v2.GetTableRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int view_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class DeleteTableRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.v2.DeleteTableRequest) */ {
 public:
  inline DeleteTableRequest() : DeleteTableRequest(nullptr) {}
  virtual ~DeleteTableRequest();

  DeleteTableRequest(const DeleteTableRequest& from);
  DeleteTableRequest(DeleteTableRequest&& from) noexcept
    : DeleteTableRequest() {
    *this = ::std::move(from);
  }

  inline DeleteTableRequest& operator=(const DeleteTableRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteTableRequest& operator=(DeleteTableRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteTableRequest& default_instance();

  static inline const DeleteTableRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteTableRequest*>(
               &_DeleteTableRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(DeleteTableRequest& a, DeleteTableRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteTableRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteTableRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteTableRequest* New() const final {
    return CreateMaybeMessage<DeleteTableRequest>(nullptr);
  }

  DeleteTableRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteTableRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteTableRequest& from);
  void MergeFrom(const DeleteTableRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteTableRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.admin.v2.DeleteTableRequest";
  }
  protected:
  explicit DeleteTableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto);
    return ::descriptor_table_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.v2.DeleteTableRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class ModifyColumnFamiliesRequest_Modification PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification) */ {
 public:
  inline ModifyColumnFamiliesRequest_Modification() : ModifyColumnFamiliesRequest_Modification(nullptr) {}
  virtual ~ModifyColumnFamiliesRequest_Modification();

  ModifyColumnFamiliesRequest_Modification(const ModifyColumnFamiliesRequest_Modification& from);
  ModifyColumnFamiliesRequest_Modification(ModifyColumnFamiliesRequest_Modification&& from) noexcept
    : ModifyColumnFamiliesRequest_Modification() {
    *this = ::std::move(from);
  }

  inline ModifyColumnFamiliesRequest_Modification& operator=(const ModifyColumnFamiliesRequest_Modification& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModifyColumnFamiliesRequest_Modification& operator=(ModifyColumnFamiliesRequest_Modification&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModifyColumnFamiliesRequest_Modification& default_instance();

  enum ModCase {
    kCreate = 2,
    kUpdate = 3,
    kDrop = 4,
    MOD_NOT_SET = 0,
  };

  static inline const ModifyColumnFamiliesRequest_Modification* internal_default_instance() {
    return reinterpret_cast<const ModifyColumnFamiliesRequest_Modification*>(
               &_ModifyColumnFamiliesRequest_Modification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ModifyColumnFamiliesRequest_Modification& a, ModifyColumnFamiliesRequest_Modification& b) {
    a.Swap(&b);
  }
  inline void Swap(ModifyColumnFamiliesRequest_Modification* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModifyColumnFamiliesRequest_Modification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModifyColumnFamiliesRequest_Modification* New() const final {
    return CreateMaybeMessage<ModifyColumnFamiliesRequest_Modification>(nullptr);
  }

  ModifyColumnFamiliesRequest_Modification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModifyColumnFamiliesRequest_Modification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModifyColumnFamiliesRequest_Modification& from);
  void MergeFrom(const ModifyColumnFamiliesRequest_Modification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModifyColumnFamiliesRequest_Modification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification";
  }
  protected:
  explicit ModifyColumnFamiliesRequest_Modification(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto);
    return ::descriptor_table_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kCreateFieldNumber = 2,
    kUpdateFieldNumber = 3,
    kDropFieldNumber = 4,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .google.bigtable.admin.v2.ColumnFamily create = 2;
  bool has_create() const;
  private:
  bool _internal_has_create() const;
  public:
  void clear_create();
  const ::google::bigtable::admin::v2::ColumnFamily& create() const;
  ::google::bigtable::admin::v2::ColumnFamily* release_create();
  ::google::bigtable::admin::v2::ColumnFamily* mutable_create();
  void set_allocated_create(::google::bigtable::admin::v2::ColumnFamily* create);
  private:
  const ::google::bigtable::admin::v2::ColumnFamily& _internal_create() const;
  ::google::bigtable::admin::v2::ColumnFamily* _internal_mutable_create();
  public:
  void unsafe_arena_set_allocated_create(
      ::google::bigtable::admin::v2::ColumnFamily* create);
  ::google::bigtable::admin::v2::ColumnFamily* unsafe_arena_release_create();

  // .google.bigtable.admin.v2.ColumnFamily update = 3;
  bool has_update() const;
  private:
  bool _internal_has_update() const;
  public:
  void clear_update();
  const ::google::bigtable::admin::v2::ColumnFamily& update() const;
  ::google::bigtable::admin::v2::ColumnFamily* release_update();
  ::google::bigtable::admin::v2::ColumnFamily* mutable_update();
  void set_allocated_update(::google::bigtable::admin::v2::ColumnFamily* update);
  private:
  const ::google::bigtable::admin::v2::ColumnFamily& _internal_update() const;
  ::google::bigtable::admin::v2::ColumnFamily* _internal_mutable_update();
  public:
  void unsafe_arena_set_allocated_update(
      ::google::bigtable::admin::v2::ColumnFamily* update);
  ::google::bigtable::admin::v2::ColumnFamily* unsafe_arena_release_update();

  // bool drop = 4;
  private:
  bool _internal_has_drop() const;
  public:
  void clear_drop();
  bool drop() const;
  void set_drop(bool value);
  private:
  bool _internal_drop() const;
  void _internal_set_drop(bool value);
  public:

  void clear_mod();
  ModCase mod_case() const;
  // @@protoc_insertion_point(class_scope:google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification)
 private:
  class _Internal;
  void set_has_create();
  void set_has_update();
  void set_has_drop();

  inline bool has_mod() const;
  inline void clear_has_mod();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  union ModUnion {
    ModUnion() {}
    ::google::bigtable::admin::v2::ColumnFamily* create_;
    ::google::bigtable::admin::v2::ColumnFamily* update_;
    bool drop_;
  } mod_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class ModifyColumnFamiliesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.v2.ModifyColumnFamiliesRequest) */ {
 public:
  inline ModifyColumnFamiliesRequest() : ModifyColumnFamiliesRequest(nullptr) {}
  virtual ~ModifyColumnFamiliesRequest();

  ModifyColumnFamiliesRequest(const ModifyColumnFamiliesRequest& from);
  ModifyColumnFamiliesRequest(ModifyColumnFamiliesRequest&& from) noexcept
    : ModifyColumnFamiliesRequest() {
    *this = ::std::move(from);
  }

  inline ModifyColumnFamiliesRequest& operator=(const ModifyColumnFamiliesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModifyColumnFamiliesRequest& operator=(ModifyColumnFamiliesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModifyColumnFamiliesRequest& default_instance();

  static inline const ModifyColumnFamiliesRequest* internal_default_instance() {
    return reinterpret_cast<const ModifyColumnFamiliesRequest*>(
               &_ModifyColumnFamiliesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ModifyColumnFamiliesRequest& a, ModifyColumnFamiliesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ModifyColumnFamiliesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModifyColumnFamiliesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModifyColumnFamiliesRequest* New() const final {
    return CreateMaybeMessage<ModifyColumnFamiliesRequest>(nullptr);
  }

  ModifyColumnFamiliesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModifyColumnFamiliesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModifyColumnFamiliesRequest& from);
  void MergeFrom(const ModifyColumnFamiliesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModifyColumnFamiliesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.admin.v2.ModifyColumnFamiliesRequest";
  }
  protected:
  explicit ModifyColumnFamiliesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto);
    return ::descriptor_table_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ModifyColumnFamiliesRequest_Modification Modification;

  // accessors -------------------------------------------------------

  enum : int {
    kModificationsFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated .google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification modifications = 2 [(.google.api.field_behavior) = REQUIRED];
  int modifications_size() const;
  private:
  int _internal_modifications_size() const;
  public:
  void clear_modifications();
  ::google::bigtable::admin::v2::ModifyColumnFamiliesRequest_Modification* mutable_modifications(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::admin::v2::ModifyColumnFamiliesRequest_Modification >*
      mutable_modifications();
  private:
  const ::google::bigtable::admin::v2::ModifyColumnFamiliesRequest_Modification& _internal_modifications(int index) const;
  ::google::bigtable::admin::v2::ModifyColumnFamiliesRequest_Modification* _internal_add_modifications();
  public:
  const ::google::bigtable::admin::v2::ModifyColumnFamiliesRequest_Modification& modifications(int index) const;
  ::google::bigtable::admin::v2::ModifyColumnFamiliesRequest_Modification* add_modifications();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::admin::v2::ModifyColumnFamiliesRequest_Modification >&
      modifications() const;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.v2.ModifyColumnFamiliesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::admin::v2::ModifyColumnFamiliesRequest_Modification > modifications_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class GenerateConsistencyTokenRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.v2.GenerateConsistencyTokenRequest) */ {
 public:
  inline GenerateConsistencyTokenRequest() : GenerateConsistencyTokenRequest(nullptr) {}
  virtual ~GenerateConsistencyTokenRequest();

  GenerateConsistencyTokenRequest(const GenerateConsistencyTokenRequest& from);
  GenerateConsistencyTokenRequest(GenerateConsistencyTokenRequest&& from) noexcept
    : GenerateConsistencyTokenRequest() {
    *this = ::std::move(from);
  }

  inline GenerateConsistencyTokenRequest& operator=(const GenerateConsistencyTokenRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenerateConsistencyTokenRequest& operator=(GenerateConsistencyTokenRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GenerateConsistencyTokenRequest& default_instance();

  static inline const GenerateConsistencyTokenRequest* internal_default_instance() {
    return reinterpret_cast<const GenerateConsistencyTokenRequest*>(
               &_GenerateConsistencyTokenRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(GenerateConsistencyTokenRequest& a, GenerateConsistencyTokenRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GenerateConsistencyTokenRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenerateConsistencyTokenRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenerateConsistencyTokenRequest* New() const final {
    return CreateMaybeMessage<GenerateConsistencyTokenRequest>(nullptr);
  }

  GenerateConsistencyTokenRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenerateConsistencyTokenRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GenerateConsistencyTokenRequest& from);
  void MergeFrom(const GenerateConsistencyTokenRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenerateConsistencyTokenRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.admin.v2.GenerateConsistencyTokenRequest";
  }
  protected:
  explicit GenerateConsistencyTokenRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto);
    return ::descriptor_table_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.v2.GenerateConsistencyTokenRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class GenerateConsistencyTokenResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.v2.GenerateConsistencyTokenResponse) */ {
 public:
  inline GenerateConsistencyTokenResponse() : GenerateConsistencyTokenResponse(nullptr) {}
  virtual ~GenerateConsistencyTokenResponse();

  GenerateConsistencyTokenResponse(const GenerateConsistencyTokenResponse& from);
  GenerateConsistencyTokenResponse(GenerateConsistencyTokenResponse&& from) noexcept
    : GenerateConsistencyTokenResponse() {
    *this = ::std::move(from);
  }

  inline GenerateConsistencyTokenResponse& operator=(const GenerateConsistencyTokenResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenerateConsistencyTokenResponse& operator=(GenerateConsistencyTokenResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GenerateConsistencyTokenResponse& default_instance();

  static inline const GenerateConsistencyTokenResponse* internal_default_instance() {
    return reinterpret_cast<const GenerateConsistencyTokenResponse*>(
               &_GenerateConsistencyTokenResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(GenerateConsistencyTokenResponse& a, GenerateConsistencyTokenResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GenerateConsistencyTokenResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenerateConsistencyTokenResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenerateConsistencyTokenResponse* New() const final {
    return CreateMaybeMessage<GenerateConsistencyTokenResponse>(nullptr);
  }

  GenerateConsistencyTokenResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenerateConsistencyTokenResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GenerateConsistencyTokenResponse& from);
  void MergeFrom(const GenerateConsistencyTokenResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenerateConsistencyTokenResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.admin.v2.GenerateConsistencyTokenResponse";
  }
  protected:
  explicit GenerateConsistencyTokenResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto);
    return ::descriptor_table_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConsistencyTokenFieldNumber = 1,
  };
  // string consistency_token = 1;
  void clear_consistency_token();
  const std::string& consistency_token() const;
  void set_consistency_token(const std::string& value);
  void set_consistency_token(std::string&& value);
  void set_consistency_token(const char* value);
  void set_consistency_token(const char* value, size_t size);
  std::string* mutable_consistency_token();
  std::string* release_consistency_token();
  void set_allocated_consistency_token(std::string* consistency_token);
  private:
  const std::string& _internal_consistency_token() const;
  void _internal_set_consistency_token(const std::string& value);
  std::string* _internal_mutable_consistency_token();
  public:

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.v2.GenerateConsistencyTokenResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr consistency_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class CheckConsistencyRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.v2.CheckConsistencyRequest) */ {
 public:
  inline CheckConsistencyRequest() : CheckConsistencyRequest(nullptr) {}
  virtual ~CheckConsistencyRequest();

  CheckConsistencyRequest(const CheckConsistencyRequest& from);
  CheckConsistencyRequest(CheckConsistencyRequest&& from) noexcept
    : CheckConsistencyRequest() {
    *this = ::std::move(from);
  }

  inline CheckConsistencyRequest& operator=(const CheckConsistencyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckConsistencyRequest& operator=(CheckConsistencyRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CheckConsistencyRequest& default_instance();

  static inline const CheckConsistencyRequest* internal_default_instance() {
    return reinterpret_cast<const CheckConsistencyRequest*>(
               &_CheckConsistencyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CheckConsistencyRequest& a, CheckConsistencyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckConsistencyRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckConsistencyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CheckConsistencyRequest* New() const final {
    return CreateMaybeMessage<CheckConsistencyRequest>(nullptr);
  }

  CheckConsistencyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CheckConsistencyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CheckConsistencyRequest& from);
  void MergeFrom(const CheckConsistencyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckConsistencyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.admin.v2.CheckConsistencyRequest";
  }
  protected:
  explicit CheckConsistencyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto);
    return ::descriptor_table_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kConsistencyTokenFieldNumber = 2,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string consistency_token = 2 [(.google.api.field_behavior) = REQUIRED];
  void clear_consistency_token();
  const std::string& consistency_token() const;
  void set_consistency_token(const std::string& value);
  void set_consistency_token(std::string&& value);
  void set_consistency_token(const char* value);
  void set_consistency_token(const char* value, size_t size);
  std::string* mutable_consistency_token();
  std::string* release_consistency_token();
  void set_allocated_consistency_token(std::string* consistency_token);
  private:
  const std::string& _internal_consistency_token() const;
  void _internal_set_consistency_token(const std::string& value);
  std::string* _internal_mutable_consistency_token();
  public:

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.v2.CheckConsistencyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr consistency_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class CheckConsistencyResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.v2.CheckConsistencyResponse) */ {
 public:
  inline CheckConsistencyResponse() : CheckConsistencyResponse(nullptr) {}
  virtual ~CheckConsistencyResponse();

  CheckConsistencyResponse(const CheckConsistencyResponse& from);
  CheckConsistencyResponse(CheckConsistencyResponse&& from) noexcept
    : CheckConsistencyResponse() {
    *this = ::std::move(from);
  }

  inline CheckConsistencyResponse& operator=(const CheckConsistencyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckConsistencyResponse& operator=(CheckConsistencyResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CheckConsistencyResponse& default_instance();

  static inline const CheckConsistencyResponse* internal_default_instance() {
    return reinterpret_cast<const CheckConsistencyResponse*>(
               &_CheckConsistencyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CheckConsistencyResponse& a, CheckConsistencyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckConsistencyResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckConsistencyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CheckConsistencyResponse* New() const final {
    return CreateMaybeMessage<CheckConsistencyResponse>(nullptr);
  }

  CheckConsistencyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CheckConsistencyResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CheckConsistencyResponse& from);
  void MergeFrom(const CheckConsistencyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckConsistencyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.admin.v2.CheckConsistencyResponse";
  }
  protected:
  explicit CheckConsistencyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto);
    return ::descriptor_table_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConsistentFieldNumber = 1,
  };
  // bool consistent = 1;
  void clear_consistent();
  bool consistent() const;
  void set_consistent(bool value);
  private:
  bool _internal_consistent() const;
  void _internal_set_consistent(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.v2.CheckConsistencyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool consistent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class SnapshotTableRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.v2.SnapshotTableRequest) */ {
 public:
  inline SnapshotTableRequest() : SnapshotTableRequest(nullptr) {}
  virtual ~SnapshotTableRequest();

  SnapshotTableRequest(const SnapshotTableRequest& from);
  SnapshotTableRequest(SnapshotTableRequest&& from) noexcept
    : SnapshotTableRequest() {
    *this = ::std::move(from);
  }

  inline SnapshotTableRequest& operator=(const SnapshotTableRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SnapshotTableRequest& operator=(SnapshotTableRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SnapshotTableRequest& default_instance();

  static inline const SnapshotTableRequest* internal_default_instance() {
    return reinterpret_cast<const SnapshotTableRequest*>(
               &_SnapshotTableRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(SnapshotTableRequest& a, SnapshotTableRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SnapshotTableRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SnapshotTableRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SnapshotTableRequest* New() const final {
    return CreateMaybeMessage<SnapshotTableRequest>(nullptr);
  }

  SnapshotTableRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SnapshotTableRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SnapshotTableRequest& from);
  void MergeFrom(const SnapshotTableRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SnapshotTableRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.admin.v2.SnapshotTableRequest";
  }
  protected:
  explicit SnapshotTableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto);
    return ::descriptor_table_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kClusterFieldNumber = 2,
    kSnapshotIdFieldNumber = 3,
    kDescriptionFieldNumber = 5,
    kTtlFieldNumber = 4,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string cluster = 2 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_cluster();
  const std::string& cluster() const;
  void set_cluster(const std::string& value);
  void set_cluster(std::string&& value);
  void set_cluster(const char* value);
  void set_cluster(const char* value, size_t size);
  std::string* mutable_cluster();
  std::string* release_cluster();
  void set_allocated_cluster(std::string* cluster);
  private:
  const std::string& _internal_cluster() const;
  void _internal_set_cluster(const std::string& value);
  std::string* _internal_mutable_cluster();
  public:

  // string snapshot_id = 3 [(.google.api.field_behavior) = REQUIRED];
  void clear_snapshot_id();
  const std::string& snapshot_id() const;
  void set_snapshot_id(const std::string& value);
  void set_snapshot_id(std::string&& value);
  void set_snapshot_id(const char* value);
  void set_snapshot_id(const char* value, size_t size);
  std::string* mutable_snapshot_id();
  std::string* release_snapshot_id();
  void set_allocated_snapshot_id(std::string* snapshot_id);
  private:
  const std::string& _internal_snapshot_id() const;
  void _internal_set_snapshot_id(const std::string& value);
  std::string* _internal_mutable_snapshot_id();
  public:

  // string description = 5;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // .google.protobuf.Duration ttl = 4;
  bool has_ttl() const;
  private:
  bool _internal_has_ttl() const;
  public:
  void clear_ttl();
  const PROTOBUF_NAMESPACE_ID::Duration& ttl() const;
  PROTOBUF_NAMESPACE_ID::Duration* release_ttl();
  PROTOBUF_NAMESPACE_ID::Duration* mutable_ttl();
  void set_allocated_ttl(PROTOBUF_NAMESPACE_ID::Duration* ttl);
  private:
  const PROTOBUF_NAMESPACE_ID::Duration& _internal_ttl() const;
  PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_ttl();
  public:
  void unsafe_arena_set_allocated_ttl(
      PROTOBUF_NAMESPACE_ID::Duration* ttl);
  PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_ttl();

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.v2.SnapshotTableRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cluster_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr snapshot_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  PROTOBUF_NAMESPACE_ID::Duration* ttl_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class GetSnapshotRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.v2.GetSnapshotRequest) */ {
 public:
  inline GetSnapshotRequest() : GetSnapshotRequest(nullptr) {}
  virtual ~GetSnapshotRequest();

  GetSnapshotRequest(const GetSnapshotRequest& from);
  GetSnapshotRequest(GetSnapshotRequest&& from) noexcept
    : GetSnapshotRequest() {
    *this = ::std::move(from);
  }

  inline GetSnapshotRequest& operator=(const GetSnapshotRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSnapshotRequest& operator=(GetSnapshotRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSnapshotRequest& default_instance();

  static inline const GetSnapshotRequest* internal_default_instance() {
    return reinterpret_cast<const GetSnapshotRequest*>(
               &_GetSnapshotRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(GetSnapshotRequest& a, GetSnapshotRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSnapshotRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSnapshotRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSnapshotRequest* New() const final {
    return CreateMaybeMessage<GetSnapshotRequest>(nullptr);
  }

  GetSnapshotRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSnapshotRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSnapshotRequest& from);
  void MergeFrom(const GetSnapshotRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSnapshotRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.admin.v2.GetSnapshotRequest";
  }
  protected:
  explicit GetSnapshotRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto);
    return ::descriptor_table_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.v2.GetSnapshotRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class ListSnapshotsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.v2.ListSnapshotsRequest) */ {
 public:
  inline ListSnapshotsRequest() : ListSnapshotsRequest(nullptr) {}
  virtual ~ListSnapshotsRequest();

  ListSnapshotsRequest(const ListSnapshotsRequest& from);
  ListSnapshotsRequest(ListSnapshotsRequest&& from) noexcept
    : ListSnapshotsRequest() {
    *this = ::std::move(from);
  }

  inline ListSnapshotsRequest& operator=(const ListSnapshotsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListSnapshotsRequest& operator=(ListSnapshotsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListSnapshotsRequest& default_instance();

  static inline const ListSnapshotsRequest* internal_default_instance() {
    return reinterpret_cast<const ListSnapshotsRequest*>(
               &_ListSnapshotsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(ListSnapshotsRequest& a, ListSnapshotsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListSnapshotsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListSnapshotsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListSnapshotsRequest* New() const final {
    return CreateMaybeMessage<ListSnapshotsRequest>(nullptr);
  }

  ListSnapshotsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListSnapshotsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListSnapshotsRequest& from);
  void MergeFrom(const ListSnapshotsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListSnapshotsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.admin.v2.ListSnapshotsRequest";
  }
  protected:
  explicit ListSnapshotsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto);
    return ::descriptor_table_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kPageSizeFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  void set_parent(const std::string& value);
  void set_parent(std::string&& value);
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  std::string* mutable_parent();
  std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 3;
  void clear_page_token();
  const std::string& page_token() const;
  void set_page_token(const std::string& value);
  void set_page_token(std::string&& value);
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  std::string* mutable_page_token();
  std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 2;
  void clear_page_size();
  ::PROTOBUF_NAMESPACE_ID::int32 page_size() const;
  void set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_page_size() const;
  void _internal_set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.v2.ListSnapshotsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
  ::PROTOBUF_NAMESPACE_ID::int32 page_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class ListSnapshotsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.v2.ListSnapshotsResponse) */ {
 public:
  inline ListSnapshotsResponse() : ListSnapshotsResponse(nullptr) {}
  virtual ~ListSnapshotsResponse();

  ListSnapshotsResponse(const ListSnapshotsResponse& from);
  ListSnapshotsResponse(ListSnapshotsResponse&& from) noexcept
    : ListSnapshotsResponse() {
    *this = ::std::move(from);
  }

  inline ListSnapshotsResponse& operator=(const ListSnapshotsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListSnapshotsResponse& operator=(ListSnapshotsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListSnapshotsResponse& default_instance();

  static inline const ListSnapshotsResponse* internal_default_instance() {
    return reinterpret_cast<const ListSnapshotsResponse*>(
               &_ListSnapshotsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(ListSnapshotsResponse& a, ListSnapshotsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListSnapshotsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListSnapshotsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListSnapshotsResponse* New() const final {
    return CreateMaybeMessage<ListSnapshotsResponse>(nullptr);
  }

  ListSnapshotsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListSnapshotsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListSnapshotsResponse& from);
  void MergeFrom(const ListSnapshotsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListSnapshotsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.admin.v2.ListSnapshotsResponse";
  }
  protected:
  explicit ListSnapshotsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto);
    return ::descriptor_table_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSnapshotsFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .google.bigtable.admin.v2.Snapshot snapshots = 1;
  int snapshots_size() const;
  private:
  int _internal_snapshots_size() const;
  public:
  void clear_snapshots();
  ::google::bigtable::admin::v2::Snapshot* mutable_snapshots(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::admin::v2::Snapshot >*
      mutable_snapshots();
  private:
  const ::google::bigtable::admin::v2::Snapshot& _internal_snapshots(int index) const;
  ::google::bigtable::admin::v2::Snapshot* _internal_add_snapshots();
  public:
  const ::google::bigtable::admin::v2::Snapshot& snapshots(int index) const;
  ::google::bigtable::admin::v2::Snapshot* add_snapshots();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::admin::v2::Snapshot >&
      snapshots() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  void set_next_page_token(const std::string& value);
  void set_next_page_token(std::string&& value);
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  std::string* mutable_next_page_token();
  std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.v2.ListSnapshotsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::admin::v2::Snapshot > snapshots_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class DeleteSnapshotRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.v2.DeleteSnapshotRequest) */ {
 public:
  inline DeleteSnapshotRequest() : DeleteSnapshotRequest(nullptr) {}
  virtual ~DeleteSnapshotRequest();

  DeleteSnapshotRequest(const DeleteSnapshotRequest& from);
  DeleteSnapshotRequest(DeleteSnapshotRequest&& from) noexcept
    : DeleteSnapshotRequest() {
    *this = ::std::move(from);
  }

  inline DeleteSnapshotRequest& operator=(const DeleteSnapshotRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteSnapshotRequest& operator=(DeleteSnapshotRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteSnapshotRequest& default_instance();

  static inline const DeleteSnapshotRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteSnapshotRequest*>(
               &_DeleteSnapshotRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(DeleteSnapshotRequest& a, DeleteSnapshotRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteSnapshotRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteSnapshotRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteSnapshotRequest* New() const final {
    return CreateMaybeMessage<DeleteSnapshotRequest>(nullptr);
  }

  DeleteSnapshotRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteSnapshotRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteSnapshotRequest& from);
  void MergeFrom(const DeleteSnapshotRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteSnapshotRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.admin.v2.DeleteSnapshotRequest";
  }
  protected:
  explicit DeleteSnapshotRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto);
    return ::descriptor_table_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.v2.DeleteSnapshotRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class SnapshotTableMetadata PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.v2.SnapshotTableMetadata) */ {
 public:
  inline SnapshotTableMetadata() : SnapshotTableMetadata(nullptr) {}
  virtual ~SnapshotTableMetadata();

  SnapshotTableMetadata(const SnapshotTableMetadata& from);
  SnapshotTableMetadata(SnapshotTableMetadata&& from) noexcept
    : SnapshotTableMetadata() {
    *this = ::std::move(from);
  }

  inline SnapshotTableMetadata& operator=(const SnapshotTableMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline SnapshotTableMetadata& operator=(SnapshotTableMetadata&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SnapshotTableMetadata& default_instance();

  static inline const SnapshotTableMetadata* internal_default_instance() {
    return reinterpret_cast<const SnapshotTableMetadata*>(
               &_SnapshotTableMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(SnapshotTableMetadata& a, SnapshotTableMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(SnapshotTableMetadata* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SnapshotTableMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SnapshotTableMetadata* New() const final {
    return CreateMaybeMessage<SnapshotTableMetadata>(nullptr);
  }

  SnapshotTableMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SnapshotTableMetadata>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SnapshotTableMetadata& from);
  void MergeFrom(const SnapshotTableMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SnapshotTableMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.admin.v2.SnapshotTableMetadata";
  }
  protected:
  explicit SnapshotTableMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto);
    return ::descriptor_table_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOriginalRequestFieldNumber = 1,
    kRequestTimeFieldNumber = 2,
    kFinishTimeFieldNumber = 3,
  };
  // .google.bigtable.admin.v2.SnapshotTableRequest original_request = 1;
  bool has_original_request() const;
  private:
  bool _internal_has_original_request() const;
  public:
  void clear_original_request();
  const ::google::bigtable::admin::v2::SnapshotTableRequest& original_request() const;
  ::google::bigtable::admin::v2::SnapshotTableRequest* release_original_request();
  ::google::bigtable::admin::v2::SnapshotTableRequest* mutable_original_request();
  void set_allocated_original_request(::google::bigtable::admin::v2::SnapshotTableRequest* original_request);
  private:
  const ::google::bigtable::admin::v2::SnapshotTableRequest& _internal_original_request() const;
  ::google::bigtable::admin::v2::SnapshotTableRequest* _internal_mutable_original_request();
  public:
  void unsafe_arena_set_allocated_original_request(
      ::google::bigtable::admin::v2::SnapshotTableRequest* original_request);
  ::google::bigtable::admin::v2::SnapshotTableRequest* unsafe_arena_release_original_request();

  // .google.protobuf.Timestamp request_time = 2;
  bool has_request_time() const;
  private:
  bool _internal_has_request_time() const;
  public:
  void clear_request_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& request_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_request_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_request_time();
  void set_allocated_request_time(PROTOBUF_NAMESPACE_ID::Timestamp* request_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_request_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_request_time();
  public:
  void unsafe_arena_set_allocated_request_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* request_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_request_time();

  // .google.protobuf.Timestamp finish_time = 3;
  bool has_finish_time() const;
  private:
  bool _internal_has_finish_time() const;
  public:
  void clear_finish_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& finish_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_finish_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_finish_time();
  void set_allocated_finish_time(PROTOBUF_NAMESPACE_ID::Timestamp* finish_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_finish_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_finish_time();
  public:
  void unsafe_arena_set_allocated_finish_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* finish_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_finish_time();

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.v2.SnapshotTableMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::bigtable::admin::v2::SnapshotTableRequest* original_request_;
  PROTOBUF_NAMESPACE_ID::Timestamp* request_time_;
  PROTOBUF_NAMESPACE_ID::Timestamp* finish_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class CreateTableFromSnapshotMetadata PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.v2.CreateTableFromSnapshotMetadata) */ {
 public:
  inline CreateTableFromSnapshotMetadata() : CreateTableFromSnapshotMetadata(nullptr) {}
  virtual ~CreateTableFromSnapshotMetadata();

  CreateTableFromSnapshotMetadata(const CreateTableFromSnapshotMetadata& from);
  CreateTableFromSnapshotMetadata(CreateTableFromSnapshotMetadata&& from) noexcept
    : CreateTableFromSnapshotMetadata() {
    *this = ::std::move(from);
  }

  inline CreateTableFromSnapshotMetadata& operator=(const CreateTableFromSnapshotMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateTableFromSnapshotMetadata& operator=(CreateTableFromSnapshotMetadata&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateTableFromSnapshotMetadata& default_instance();

  static inline const CreateTableFromSnapshotMetadata* internal_default_instance() {
    return reinterpret_cast<const CreateTableFromSnapshotMetadata*>(
               &_CreateTableFromSnapshotMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(CreateTableFromSnapshotMetadata& a, CreateTableFromSnapshotMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateTableFromSnapshotMetadata* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateTableFromSnapshotMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateTableFromSnapshotMetadata* New() const final {
    return CreateMaybeMessage<CreateTableFromSnapshotMetadata>(nullptr);
  }

  CreateTableFromSnapshotMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateTableFromSnapshotMetadata>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateTableFromSnapshotMetadata& from);
  void MergeFrom(const CreateTableFromSnapshotMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateTableFromSnapshotMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.admin.v2.CreateTableFromSnapshotMetadata";
  }
  protected:
  explicit CreateTableFromSnapshotMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto);
    return ::descriptor_table_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOriginalRequestFieldNumber = 1,
    kRequestTimeFieldNumber = 2,
    kFinishTimeFieldNumber = 3,
  };
  // .google.bigtable.admin.v2.CreateTableFromSnapshotRequest original_request = 1;
  bool has_original_request() const;
  private:
  bool _internal_has_original_request() const;
  public:
  void clear_original_request();
  const ::google::bigtable::admin::v2::CreateTableFromSnapshotRequest& original_request() const;
  ::google::bigtable::admin::v2::CreateTableFromSnapshotRequest* release_original_request();
  ::google::bigtable::admin::v2::CreateTableFromSnapshotRequest* mutable_original_request();
  void set_allocated_original_request(::google::bigtable::admin::v2::CreateTableFromSnapshotRequest* original_request);
  private:
  const ::google::bigtable::admin::v2::CreateTableFromSnapshotRequest& _internal_original_request() const;
  ::google::bigtable::admin::v2::CreateTableFromSnapshotRequest* _internal_mutable_original_request();
  public:
  void unsafe_arena_set_allocated_original_request(
      ::google::bigtable::admin::v2::CreateTableFromSnapshotRequest* original_request);
  ::google::bigtable::admin::v2::CreateTableFromSnapshotRequest* unsafe_arena_release_original_request();

  // .google.protobuf.Timestamp request_time = 2;
  bool has_request_time() const;
  private:
  bool _internal_has_request_time() const;
  public:
  void clear_request_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& request_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_request_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_request_time();
  void set_allocated_request_time(PROTOBUF_NAMESPACE_ID::Timestamp* request_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_request_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_request_time();
  public:
  void unsafe_arena_set_allocated_request_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* request_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_request_time();

  // .google.protobuf.Timestamp finish_time = 3;
  bool has_finish_time() const;
  private:
  bool _internal_has_finish_time() const;
  public:
  void clear_finish_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& finish_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_finish_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_finish_time();
  void set_allocated_finish_time(PROTOBUF_NAMESPACE_ID::Timestamp* finish_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_finish_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_finish_time();
  public:
  void unsafe_arena_set_allocated_finish_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* finish_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_finish_time();

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.v2.CreateTableFromSnapshotMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::bigtable::admin::v2::CreateTableFromSnapshotRequest* original_request_;
  PROTOBUF_NAMESPACE_ID::Timestamp* request_time_;
  PROTOBUF_NAMESPACE_ID::Timestamp* finish_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class CreateBackupRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.v2.CreateBackupRequest) */ {
 public:
  inline CreateBackupRequest() : CreateBackupRequest(nullptr) {}
  virtual ~CreateBackupRequest();

  CreateBackupRequest(const CreateBackupRequest& from);
  CreateBackupRequest(CreateBackupRequest&& from) noexcept
    : CreateBackupRequest() {
    *this = ::std::move(from);
  }

  inline CreateBackupRequest& operator=(const CreateBackupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateBackupRequest& operator=(CreateBackupRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateBackupRequest& default_instance();

  static inline const CreateBackupRequest* internal_default_instance() {
    return reinterpret_cast<const CreateBackupRequest*>(
               &_CreateBackupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(CreateBackupRequest& a, CreateBackupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateBackupRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateBackupRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateBackupRequest* New() const final {
    return CreateMaybeMessage<CreateBackupRequest>(nullptr);
  }

  CreateBackupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateBackupRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateBackupRequest& from);
  void MergeFrom(const CreateBackupRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateBackupRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.admin.v2.CreateBackupRequest";
  }
  protected:
  explicit CreateBackupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto);
    return ::descriptor_table_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kBackupIdFieldNumber = 2,
    kBackupFieldNumber = 3,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  void set_parent(const std::string& value);
  void set_parent(std::string&& value);
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  std::string* mutable_parent();
  std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string backup_id = 2 [(.google.api.field_behavior) = REQUIRED];
  void clear_backup_id();
  const std::string& backup_id() const;
  void set_backup_id(const std::string& value);
  void set_backup_id(std::string&& value);
  void set_backup_id(const char* value);
  void set_backup_id(const char* value, size_t size);
  std::string* mutable_backup_id();
  std::string* release_backup_id();
  void set_allocated_backup_id(std::string* backup_id);
  private:
  const std::string& _internal_backup_id() const;
  void _internal_set_backup_id(const std::string& value);
  std::string* _internal_mutable_backup_id();
  public:

  // .google.bigtable.admin.v2.Backup backup = 3 [(.google.api.field_behavior) = REQUIRED];
  bool has_backup() const;
  private:
  bool _internal_has_backup() const;
  public:
  void clear_backup();
  const ::google::bigtable::admin::v2::Backup& backup() const;
  ::google::bigtable::admin::v2::Backup* release_backup();
  ::google::bigtable::admin::v2::Backup* mutable_backup();
  void set_allocated_backup(::google::bigtable::admin::v2::Backup* backup);
  private:
  const ::google::bigtable::admin::v2::Backup& _internal_backup() const;
  ::google::bigtable::admin::v2::Backup* _internal_mutable_backup();
  public:
  void unsafe_arena_set_allocated_backup(
      ::google::bigtable::admin::v2::Backup* backup);
  ::google::bigtable::admin::v2::Backup* unsafe_arena_release_backup();

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.v2.CreateBackupRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr backup_id_;
  ::google::bigtable::admin::v2::Backup* backup_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class CreateBackupMetadata PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.v2.CreateBackupMetadata) */ {
 public:
  inline CreateBackupMetadata() : CreateBackupMetadata(nullptr) {}
  virtual ~CreateBackupMetadata();

  CreateBackupMetadata(const CreateBackupMetadata& from);
  CreateBackupMetadata(CreateBackupMetadata&& from) noexcept
    : CreateBackupMetadata() {
    *this = ::std::move(from);
  }

  inline CreateBackupMetadata& operator=(const CreateBackupMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateBackupMetadata& operator=(CreateBackupMetadata&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateBackupMetadata& default_instance();

  static inline const CreateBackupMetadata* internal_default_instance() {
    return reinterpret_cast<const CreateBackupMetadata*>(
               &_CreateBackupMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(CreateBackupMetadata& a, CreateBackupMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateBackupMetadata* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateBackupMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateBackupMetadata* New() const final {
    return CreateMaybeMessage<CreateBackupMetadata>(nullptr);
  }

  CreateBackupMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateBackupMetadata>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateBackupMetadata& from);
  void MergeFrom(const CreateBackupMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateBackupMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.admin.v2.CreateBackupMetadata";
  }
  protected:
  explicit CreateBackupMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto);
    return ::descriptor_table_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kSourceTableFieldNumber = 2,
    kStartTimeFieldNumber = 3,
    kEndTimeFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string source_table = 2;
  void clear_source_table();
  const std::string& source_table() const;
  void set_source_table(const std::string& value);
  void set_source_table(std::string&& value);
  void set_source_table(const char* value);
  void set_source_table(const char* value, size_t size);
  std::string* mutable_source_table();
  std::string* release_source_table();
  void set_allocated_source_table(std::string* source_table);
  private:
  const std::string& _internal_source_table() const;
  void _internal_set_source_table(const std::string& value);
  std::string* _internal_mutable_source_table();
  public:

  // .google.protobuf.Timestamp start_time = 3;
  bool has_start_time() const;
  private:
  bool _internal_has_start_time() const;
  public:
  void clear_start_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& start_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_start_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_start_time();
  void set_allocated_start_time(PROTOBUF_NAMESPACE_ID::Timestamp* start_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_start_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_start_time();
  public:
  void unsafe_arena_set_allocated_start_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* start_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_start_time();

  // .google.protobuf.Timestamp end_time = 4;
  bool has_end_time() const;
  private:
  bool _internal_has_end_time() const;
  public:
  void clear_end_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& end_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_end_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_end_time();
  void set_allocated_end_time(PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_end_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_end_time();
  public:
  void unsafe_arena_set_allocated_end_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_end_time();

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.v2.CreateBackupMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_table_;
  PROTOBUF_NAMESPACE_ID::Timestamp* start_time_;
  PROTOBUF_NAMESPACE_ID::Timestamp* end_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class UpdateBackupRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.v2.UpdateBackupRequest) */ {
 public:
  inline UpdateBackupRequest() : UpdateBackupRequest(nullptr) {}
  virtual ~UpdateBackupRequest();

  UpdateBackupRequest(const UpdateBackupRequest& from);
  UpdateBackupRequest(UpdateBackupRequest&& from) noexcept
    : UpdateBackupRequest() {
    *this = ::std::move(from);
  }

  inline UpdateBackupRequest& operator=(const UpdateBackupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateBackupRequest& operator=(UpdateBackupRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateBackupRequest& default_instance();

  static inline const UpdateBackupRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateBackupRequest*>(
               &_UpdateBackupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(UpdateBackupRequest& a, UpdateBackupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateBackupRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateBackupRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateBackupRequest* New() const final {
    return CreateMaybeMessage<UpdateBackupRequest>(nullptr);
  }

  UpdateBackupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateBackupRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateBackupRequest& from);
  void MergeFrom(const UpdateBackupRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateBackupRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.admin.v2.UpdateBackupRequest";
  }
  protected:
  explicit UpdateBackupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto);
    return ::descriptor_table_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBackupFieldNumber = 1,
    kUpdateMaskFieldNumber = 2,
  };
  // .google.bigtable.admin.v2.Backup backup = 1 [(.google.api.field_behavior) = REQUIRED];
  bool has_backup() const;
  private:
  bool _internal_has_backup() const;
  public:
  void clear_backup();
  const ::google::bigtable::admin::v2::Backup& backup() const;
  ::google::bigtable::admin::v2::Backup* release_backup();
  ::google::bigtable::admin::v2::Backup* mutable_backup();
  void set_allocated_backup(::google::bigtable::admin::v2::Backup* backup);
  private:
  const ::google::bigtable::admin::v2::Backup& _internal_backup() const;
  ::google::bigtable::admin::v2::Backup* _internal_mutable_backup();
  public:
  void unsafe_arena_set_allocated_backup(
      ::google::bigtable::admin::v2::Backup* backup);
  ::google::bigtable::admin::v2::Backup* unsafe_arena_release_backup();

  // .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.v2.UpdateBackupRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::bigtable::admin::v2::Backup* backup_;
  PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class GetBackupRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.v2.GetBackupRequest) */ {
 public:
  inline GetBackupRequest() : GetBackupRequest(nullptr) {}
  virtual ~GetBackupRequest();

  GetBackupRequest(const GetBackupRequest& from);
  GetBackupRequest(GetBackupRequest&& from) noexcept
    : GetBackupRequest() {
    *this = ::std::move(from);
  }

  inline GetBackupRequest& operator=(const GetBackupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBackupRequest& operator=(GetBackupRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetBackupRequest& default_instance();

  static inline const GetBackupRequest* internal_default_instance() {
    return reinterpret_cast<const GetBackupRequest*>(
               &_GetBackupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(GetBackupRequest& a, GetBackupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBackupRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBackupRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBackupRequest* New() const final {
    return CreateMaybeMessage<GetBackupRequest>(nullptr);
  }

  GetBackupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBackupRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetBackupRequest& from);
  void MergeFrom(const GetBackupRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBackupRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.admin.v2.GetBackupRequest";
  }
  protected:
  explicit GetBackupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto);
    return ::descriptor_table_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.v2.GetBackupRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class DeleteBackupRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.v2.DeleteBackupRequest) */ {
 public:
  inline DeleteBackupRequest() : DeleteBackupRequest(nullptr) {}
  virtual ~DeleteBackupRequest();

  DeleteBackupRequest(const DeleteBackupRequest& from);
  DeleteBackupRequest(DeleteBackupRequest&& from) noexcept
    : DeleteBackupRequest() {
    *this = ::std::move(from);
  }

  inline DeleteBackupRequest& operator=(const DeleteBackupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteBackupRequest& operator=(DeleteBackupRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteBackupRequest& default_instance();

  static inline const DeleteBackupRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteBackupRequest*>(
               &_DeleteBackupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(DeleteBackupRequest& a, DeleteBackupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteBackupRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteBackupRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteBackupRequest* New() const final {
    return CreateMaybeMessage<DeleteBackupRequest>(nullptr);
  }

  DeleteBackupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteBackupRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteBackupRequest& from);
  void MergeFrom(const DeleteBackupRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteBackupRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.admin.v2.DeleteBackupRequest";
  }
  protected:
  explicit DeleteBackupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto);
    return ::descriptor_table_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.v2.DeleteBackupRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class ListBackupsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.v2.ListBackupsRequest) */ {
 public:
  inline ListBackupsRequest() : ListBackupsRequest(nullptr) {}
  virtual ~ListBackupsRequest();

  ListBackupsRequest(const ListBackupsRequest& from);
  ListBackupsRequest(ListBackupsRequest&& from) noexcept
    : ListBackupsRequest() {
    *this = ::std::move(from);
  }

  inline ListBackupsRequest& operator=(const ListBackupsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListBackupsRequest& operator=(ListBackupsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListBackupsRequest& default_instance();

  static inline const ListBackupsRequest* internal_default_instance() {
    return reinterpret_cast<const ListBackupsRequest*>(
               &_ListBackupsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(ListBackupsRequest& a, ListBackupsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListBackupsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListBackupsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListBackupsRequest* New() const final {
    return CreateMaybeMessage<ListBackupsRequest>(nullptr);
  }

  ListBackupsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListBackupsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListBackupsRequest& from);
  void MergeFrom(const ListBackupsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListBackupsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.admin.v2.ListBackupsRequest";
  }
  protected:
  explicit ListBackupsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto);
    return ::descriptor_table_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kFilterFieldNumber = 2,
    kOrderByFieldNumber = 3,
    kPageTokenFieldNumber = 5,
    kPageSizeFieldNumber = 4,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  void set_parent(const std::string& value);
  void set_parent(std::string&& value);
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  std::string* mutable_parent();
  std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string filter = 2;
  void clear_filter();
  const std::string& filter() const;
  void set_filter(const std::string& value);
  void set_filter(std::string&& value);
  void set_filter(const char* value);
  void set_filter(const char* value, size_t size);
  std::string* mutable_filter();
  std::string* release_filter();
  void set_allocated_filter(std::string* filter);
  private:
  const std::string& _internal_filter() const;
  void _internal_set_filter(const std::string& value);
  std::string* _internal_mutable_filter();
  public:

  // string order_by = 3;
  void clear_order_by();
  const std::string& order_by() const;
  void set_order_by(const std::string& value);
  void set_order_by(std::string&& value);
  void set_order_by(const char* value);
  void set_order_by(const char* value, size_t size);
  std::string* mutable_order_by();
  std::string* release_order_by();
  void set_allocated_order_by(std::string* order_by);
  private:
  const std::string& _internal_order_by() const;
  void _internal_set_order_by(const std::string& value);
  std::string* _internal_mutable_order_by();
  public:

  // string page_token = 5;
  void clear_page_token();
  const std::string& page_token() const;
  void set_page_token(const std::string& value);
  void set_page_token(std::string&& value);
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  std::string* mutable_page_token();
  std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 4;
  void clear_page_size();
  ::PROTOBUF_NAMESPACE_ID::int32 page_size() const;
  void set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_page_size() const;
  void _internal_set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.v2.ListBackupsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filter_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_by_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
  ::PROTOBUF_NAMESPACE_ID::int32 page_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class ListBackupsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.v2.ListBackupsResponse) */ {
 public:
  inline ListBackupsResponse() : ListBackupsResponse(nullptr) {}
  virtual ~ListBackupsResponse();

  ListBackupsResponse(const ListBackupsResponse& from);
  ListBackupsResponse(ListBackupsResponse&& from) noexcept
    : ListBackupsResponse() {
    *this = ::std::move(from);
  }

  inline ListBackupsResponse& operator=(const ListBackupsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListBackupsResponse& operator=(ListBackupsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListBackupsResponse& default_instance();

  static inline const ListBackupsResponse* internal_default_instance() {
    return reinterpret_cast<const ListBackupsResponse*>(
               &_ListBackupsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(ListBackupsResponse& a, ListBackupsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListBackupsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListBackupsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListBackupsResponse* New() const final {
    return CreateMaybeMessage<ListBackupsResponse>(nullptr);
  }

  ListBackupsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListBackupsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListBackupsResponse& from);
  void MergeFrom(const ListBackupsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListBackupsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.admin.v2.ListBackupsResponse";
  }
  protected:
  explicit ListBackupsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto);
    return ::descriptor_table_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBackupsFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .google.bigtable.admin.v2.Backup backups = 1;
  int backups_size() const;
  private:
  int _internal_backups_size() const;
  public:
  void clear_backups();
  ::google::bigtable::admin::v2::Backup* mutable_backups(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::admin::v2::Backup >*
      mutable_backups();
  private:
  const ::google::bigtable::admin::v2::Backup& _internal_backups(int index) const;
  ::google::bigtable::admin::v2::Backup* _internal_add_backups();
  public:
  const ::google::bigtable::admin::v2::Backup& backups(int index) const;
  ::google::bigtable::admin::v2::Backup* add_backups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::admin::v2::Backup >&
      backups() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  void set_next_page_token(const std::string& value);
  void set_next_page_token(std::string&& value);
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  std::string* mutable_next_page_token();
  std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.v2.ListBackupsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::admin::v2::Backup > backups_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RestoreTableRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void RestoreTableRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& RestoreTableRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.RestoreTableRequest.parent)
  return _internal_parent();
}
inline void RestoreTableRequest::set_parent(const std::string& value) {
  _internal_set_parent(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.RestoreTableRequest.parent)
}
inline std::string* RestoreTableRequest::mutable_parent() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.RestoreTableRequest.parent)
  return _internal_mutable_parent();
}
inline const std::string& RestoreTableRequest::_internal_parent() const {
  return parent_.Get();
}
inline void RestoreTableRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RestoreTableRequest::set_parent(std::string&& value) {
  
  parent_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.admin.v2.RestoreTableRequest.parent)
}
inline void RestoreTableRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.v2.RestoreTableRequest.parent)
}
inline void RestoreTableRequest::set_parent(const char* value,
    size_t size) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.v2.RestoreTableRequest.parent)
}
inline std::string* RestoreTableRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RestoreTableRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.RestoreTableRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RestoreTableRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.RestoreTableRequest.parent)
}

// string table_id = 2 [(.google.api.field_behavior) = REQUIRED];
inline void RestoreTableRequest::clear_table_id() {
  table_id_.ClearToEmpty();
}
inline const std::string& RestoreTableRequest::table_id() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.RestoreTableRequest.table_id)
  return _internal_table_id();
}
inline void RestoreTableRequest::set_table_id(const std::string& value) {
  _internal_set_table_id(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.RestoreTableRequest.table_id)
}
inline std::string* RestoreTableRequest::mutable_table_id() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.RestoreTableRequest.table_id)
  return _internal_mutable_table_id();
}
inline const std::string& RestoreTableRequest::_internal_table_id() const {
  return table_id_.Get();
}
inline void RestoreTableRequest::_internal_set_table_id(const std::string& value) {
  
  table_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RestoreTableRequest::set_table_id(std::string&& value) {
  
  table_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.admin.v2.RestoreTableRequest.table_id)
}
inline void RestoreTableRequest::set_table_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  table_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.v2.RestoreTableRequest.table_id)
}
inline void RestoreTableRequest::set_table_id(const char* value,
    size_t size) {
  
  table_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.v2.RestoreTableRequest.table_id)
}
inline std::string* RestoreTableRequest::_internal_mutable_table_id() {
  
  return table_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RestoreTableRequest::release_table_id() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.RestoreTableRequest.table_id)
  return table_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RestoreTableRequest::set_allocated_table_id(std::string* table_id) {
  if (table_id != nullptr) {
    
  } else {
    
  }
  table_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), table_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.RestoreTableRequest.table_id)
}

// string backup = 3 [(.google.api.resource_reference) = {
inline bool RestoreTableRequest::_internal_has_backup() const {
  return source_case() == kBackup;
}
inline void RestoreTableRequest::set_has_backup() {
  _oneof_case_[0] = kBackup;
}
inline void RestoreTableRequest::clear_backup() {
  if (_internal_has_backup()) {
    source_.backup_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_source();
  }
}
inline const std::string& RestoreTableRequest::backup() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.RestoreTableRequest.backup)
  return _internal_backup();
}
inline void RestoreTableRequest::set_backup(const std::string& value) {
  _internal_set_backup(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.RestoreTableRequest.backup)
}
inline std::string* RestoreTableRequest::mutable_backup() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.RestoreTableRequest.backup)
  return _internal_mutable_backup();
}
inline const std::string& RestoreTableRequest::_internal_backup() const {
  if (_internal_has_backup()) {
    return source_.backup_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void RestoreTableRequest::_internal_set_backup(const std::string& value) {
  if (!_internal_has_backup()) {
    clear_source();
    set_has_backup();
    source_.backup_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  source_.backup_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RestoreTableRequest::set_backup(std::string&& value) {
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.RestoreTableRequest.backup)
  if (!_internal_has_backup()) {
    clear_source();
    set_has_backup();
    source_.backup_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  source_.backup_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.admin.v2.RestoreTableRequest.backup)
}
inline void RestoreTableRequest::set_backup(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_backup()) {
    clear_source();
    set_has_backup();
    source_.backup_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  source_.backup_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.v2.RestoreTableRequest.backup)
}
inline void RestoreTableRequest::set_backup(const char* value,
                             size_t size) {
  if (!_internal_has_backup()) {
    clear_source();
    set_has_backup();
    source_.backup_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  source_.backup_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.v2.RestoreTableRequest.backup)
}
inline std::string* RestoreTableRequest::_internal_mutable_backup() {
  if (!_internal_has_backup()) {
    clear_source();
    set_has_backup();
    source_.backup_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return source_.backup_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RestoreTableRequest::release_backup() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.RestoreTableRequest.backup)
  if (_internal_has_backup()) {
    clear_has_source();
    return source_.backup_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void RestoreTableRequest::set_allocated_backup(std::string* backup) {
  if (has_source()) {
    clear_source();
  }
  if (backup != nullptr) {
    set_has_backup();
    source_.backup_.UnsafeSetDefault(backup);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(backup);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.RestoreTableRequest.backup)
}

inline bool RestoreTableRequest::has_source() const {
  return source_case() != SOURCE_NOT_SET;
}
inline void RestoreTableRequest::clear_has_source() {
  _oneof_case_[0] = SOURCE_NOT_SET;
}
inline RestoreTableRequest::SourceCase RestoreTableRequest::source_case() const {
  return RestoreTableRequest::SourceCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// RestoreTableMetadata

// string name = 1;
inline void RestoreTableMetadata::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& RestoreTableMetadata::name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.RestoreTableMetadata.name)
  return _internal_name();
}
inline void RestoreTableMetadata::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.RestoreTableMetadata.name)
}
inline std::string* RestoreTableMetadata::mutable_name() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.RestoreTableMetadata.name)
  return _internal_mutable_name();
}
inline const std::string& RestoreTableMetadata::_internal_name() const {
  return name_.Get();
}
inline void RestoreTableMetadata::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RestoreTableMetadata::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.admin.v2.RestoreTableMetadata.name)
}
inline void RestoreTableMetadata::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.v2.RestoreTableMetadata.name)
}
inline void RestoreTableMetadata::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.v2.RestoreTableMetadata.name)
}
inline std::string* RestoreTableMetadata::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RestoreTableMetadata::release_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.RestoreTableMetadata.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RestoreTableMetadata::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.RestoreTableMetadata.name)
}

// .google.bigtable.admin.v2.RestoreSourceType source_type = 2;
inline void RestoreTableMetadata::clear_source_type() {
  source_type_ = 0;
}
inline ::google::bigtable::admin::v2::RestoreSourceType RestoreTableMetadata::_internal_source_type() const {
  return static_cast< ::google::bigtable::admin::v2::RestoreSourceType >(source_type_);
}
inline ::google::bigtable::admin::v2::RestoreSourceType RestoreTableMetadata::source_type() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.RestoreTableMetadata.source_type)
  return _internal_source_type();
}
inline void RestoreTableMetadata::_internal_set_source_type(::google::bigtable::admin::v2::RestoreSourceType value) {
  
  source_type_ = value;
}
inline void RestoreTableMetadata::set_source_type(::google::bigtable::admin::v2::RestoreSourceType value) {
  _internal_set_source_type(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.RestoreTableMetadata.source_type)
}

// .google.bigtable.admin.v2.BackupInfo backup_info = 3;
inline bool RestoreTableMetadata::_internal_has_backup_info() const {
  return source_info_case() == kBackupInfo;
}
inline bool RestoreTableMetadata::has_backup_info() const {
  return _internal_has_backup_info();
}
inline void RestoreTableMetadata::set_has_backup_info() {
  _oneof_case_[0] = kBackupInfo;
}
inline ::google::bigtable::admin::v2::BackupInfo* RestoreTableMetadata::release_backup_info() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.RestoreTableMetadata.backup_info)
  if (_internal_has_backup_info()) {
    clear_has_source_info();
      ::google::bigtable::admin::v2::BackupInfo* temp = source_info_.backup_info_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    source_info_.backup_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::bigtable::admin::v2::BackupInfo& RestoreTableMetadata::_internal_backup_info() const {
  return _internal_has_backup_info()
      ? *source_info_.backup_info_
      : reinterpret_cast< ::google::bigtable::admin::v2::BackupInfo&>(::google::bigtable::admin::v2::_BackupInfo_default_instance_);
}
inline const ::google::bigtable::admin::v2::BackupInfo& RestoreTableMetadata::backup_info() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.RestoreTableMetadata.backup_info)
  return _internal_backup_info();
}
inline ::google::bigtable::admin::v2::BackupInfo* RestoreTableMetadata::unsafe_arena_release_backup_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.bigtable.admin.v2.RestoreTableMetadata.backup_info)
  if (_internal_has_backup_info()) {
    clear_has_source_info();
    ::google::bigtable::admin::v2::BackupInfo* temp = source_info_.backup_info_;
    source_info_.backup_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RestoreTableMetadata::unsafe_arena_set_allocated_backup_info(::google::bigtable::admin::v2::BackupInfo* backup_info) {
  clear_source_info();
  if (backup_info) {
    set_has_backup_info();
    source_info_.backup_info_ = backup_info;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.admin.v2.RestoreTableMetadata.backup_info)
}
inline ::google::bigtable::admin::v2::BackupInfo* RestoreTableMetadata::_internal_mutable_backup_info() {
  if (!_internal_has_backup_info()) {
    clear_source_info();
    set_has_backup_info();
    source_info_.backup_info_ = CreateMaybeMessage< ::google::bigtable::admin::v2::BackupInfo >(GetArena());
  }
  return source_info_.backup_info_;
}
inline ::google::bigtable::admin::v2::BackupInfo* RestoreTableMetadata::mutable_backup_info() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.RestoreTableMetadata.backup_info)
  return _internal_mutable_backup_info();
}

// string optimize_table_operation_name = 4;
inline void RestoreTableMetadata::clear_optimize_table_operation_name() {
  optimize_table_operation_name_.ClearToEmpty();
}
inline const std::string& RestoreTableMetadata::optimize_table_operation_name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.RestoreTableMetadata.optimize_table_operation_name)
  return _internal_optimize_table_operation_name();
}
inline void RestoreTableMetadata::set_optimize_table_operation_name(const std::string& value) {
  _internal_set_optimize_table_operation_name(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.RestoreTableMetadata.optimize_table_operation_name)
}
inline std::string* RestoreTableMetadata::mutable_optimize_table_operation_name() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.RestoreTableMetadata.optimize_table_operation_name)
  return _internal_mutable_optimize_table_operation_name();
}
inline const std::string& RestoreTableMetadata::_internal_optimize_table_operation_name() const {
  return optimize_table_operation_name_.Get();
}
inline void RestoreTableMetadata::_internal_set_optimize_table_operation_name(const std::string& value) {
  
  optimize_table_operation_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RestoreTableMetadata::set_optimize_table_operation_name(std::string&& value) {
  
  optimize_table_operation_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.admin.v2.RestoreTableMetadata.optimize_table_operation_name)
}
inline void RestoreTableMetadata::set_optimize_table_operation_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  optimize_table_operation_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.v2.RestoreTableMetadata.optimize_table_operation_name)
}
inline void RestoreTableMetadata::set_optimize_table_operation_name(const char* value,
    size_t size) {
  
  optimize_table_operation_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.v2.RestoreTableMetadata.optimize_table_operation_name)
}
inline std::string* RestoreTableMetadata::_internal_mutable_optimize_table_operation_name() {
  
  return optimize_table_operation_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RestoreTableMetadata::release_optimize_table_operation_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.RestoreTableMetadata.optimize_table_operation_name)
  return optimize_table_operation_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RestoreTableMetadata::set_allocated_optimize_table_operation_name(std::string* optimize_table_operation_name) {
  if (optimize_table_operation_name != nullptr) {
    
  } else {
    
  }
  optimize_table_operation_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), optimize_table_operation_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.RestoreTableMetadata.optimize_table_operation_name)
}

// .google.bigtable.admin.v2.OperationProgress progress = 5;
inline bool RestoreTableMetadata::_internal_has_progress() const {
  return this != internal_default_instance() && progress_ != nullptr;
}
inline bool RestoreTableMetadata::has_progress() const {
  return _internal_has_progress();
}
inline const ::google::bigtable::admin::v2::OperationProgress& RestoreTableMetadata::_internal_progress() const {
  const ::google::bigtable::admin::v2::OperationProgress* p = progress_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::bigtable::admin::v2::OperationProgress&>(
      ::google::bigtable::admin::v2::_OperationProgress_default_instance_);
}
inline const ::google::bigtable::admin::v2::OperationProgress& RestoreTableMetadata::progress() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.RestoreTableMetadata.progress)
  return _internal_progress();
}
inline void RestoreTableMetadata::unsafe_arena_set_allocated_progress(
    ::google::bigtable::admin::v2::OperationProgress* progress) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(progress_);
  }
  progress_ = progress;
  if (progress) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.admin.v2.RestoreTableMetadata.progress)
}
inline ::google::bigtable::admin::v2::OperationProgress* RestoreTableMetadata::release_progress() {
  
  ::google::bigtable::admin::v2::OperationProgress* temp = progress_;
  progress_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::bigtable::admin::v2::OperationProgress* RestoreTableMetadata::unsafe_arena_release_progress() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.RestoreTableMetadata.progress)
  
  ::google::bigtable::admin::v2::OperationProgress* temp = progress_;
  progress_ = nullptr;
  return temp;
}
inline ::google::bigtable::admin::v2::OperationProgress* RestoreTableMetadata::_internal_mutable_progress() {
  
  if (progress_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::bigtable::admin::v2::OperationProgress>(GetArena());
    progress_ = p;
  }
  return progress_;
}
inline ::google::bigtable::admin::v2::OperationProgress* RestoreTableMetadata::mutable_progress() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.RestoreTableMetadata.progress)
  return _internal_mutable_progress();
}
inline void RestoreTableMetadata::set_allocated_progress(::google::bigtable::admin::v2::OperationProgress* progress) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(progress_);
  }
  if (progress) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(progress)->GetArena();
    if (message_arena != submessage_arena) {
      progress = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, progress, submessage_arena);
    }
    
  } else {
    
  }
  progress_ = progress;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.RestoreTableMetadata.progress)
}

inline bool RestoreTableMetadata::has_source_info() const {
  return source_info_case() != SOURCE_INFO_NOT_SET;
}
inline void RestoreTableMetadata::clear_has_source_info() {
  _oneof_case_[0] = SOURCE_INFO_NOT_SET;
}
inline RestoreTableMetadata::SourceInfoCase RestoreTableMetadata::source_info_case() const {
  return RestoreTableMetadata::SourceInfoCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// OptimizeRestoredTableMetadata

// string name = 1;
inline void OptimizeRestoredTableMetadata::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& OptimizeRestoredTableMetadata::name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.OptimizeRestoredTableMetadata.name)
  return _internal_name();
}
inline void OptimizeRestoredTableMetadata::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.OptimizeRestoredTableMetadata.name)
}
inline std::string* OptimizeRestoredTableMetadata::mutable_name() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.OptimizeRestoredTableMetadata.name)
  return _internal_mutable_name();
}
inline const std::string& OptimizeRestoredTableMetadata::_internal_name() const {
  return name_.Get();
}
inline void OptimizeRestoredTableMetadata::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OptimizeRestoredTableMetadata::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.admin.v2.OptimizeRestoredTableMetadata.name)
}
inline void OptimizeRestoredTableMetadata::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.v2.OptimizeRestoredTableMetadata.name)
}
inline void OptimizeRestoredTableMetadata::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.v2.OptimizeRestoredTableMetadata.name)
}
inline std::string* OptimizeRestoredTableMetadata::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OptimizeRestoredTableMetadata::release_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.OptimizeRestoredTableMetadata.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OptimizeRestoredTableMetadata::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.OptimizeRestoredTableMetadata.name)
}

// .google.bigtable.admin.v2.OperationProgress progress = 2;
inline bool OptimizeRestoredTableMetadata::_internal_has_progress() const {
  return this != internal_default_instance() && progress_ != nullptr;
}
inline bool OptimizeRestoredTableMetadata::has_progress() const {
  return _internal_has_progress();
}
inline const ::google::bigtable::admin::v2::OperationProgress& OptimizeRestoredTableMetadata::_internal_progress() const {
  const ::google::bigtable::admin::v2::OperationProgress* p = progress_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::bigtable::admin::v2::OperationProgress&>(
      ::google::bigtable::admin::v2::_OperationProgress_default_instance_);
}
inline const ::google::bigtable::admin::v2::OperationProgress& OptimizeRestoredTableMetadata::progress() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.OptimizeRestoredTableMetadata.progress)
  return _internal_progress();
}
inline void OptimizeRestoredTableMetadata::unsafe_arena_set_allocated_progress(
    ::google::bigtable::admin::v2::OperationProgress* progress) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(progress_);
  }
  progress_ = progress;
  if (progress) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.admin.v2.OptimizeRestoredTableMetadata.progress)
}
inline ::google::bigtable::admin::v2::OperationProgress* OptimizeRestoredTableMetadata::release_progress() {
  
  ::google::bigtable::admin::v2::OperationProgress* temp = progress_;
  progress_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::bigtable::admin::v2::OperationProgress* OptimizeRestoredTableMetadata::unsafe_arena_release_progress() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.OptimizeRestoredTableMetadata.progress)
  
  ::google::bigtable::admin::v2::OperationProgress* temp = progress_;
  progress_ = nullptr;
  return temp;
}
inline ::google::bigtable::admin::v2::OperationProgress* OptimizeRestoredTableMetadata::_internal_mutable_progress() {
  
  if (progress_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::bigtable::admin::v2::OperationProgress>(GetArena());
    progress_ = p;
  }
  return progress_;
}
inline ::google::bigtable::admin::v2::OperationProgress* OptimizeRestoredTableMetadata::mutable_progress() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.OptimizeRestoredTableMetadata.progress)
  return _internal_mutable_progress();
}
inline void OptimizeRestoredTableMetadata::set_allocated_progress(::google::bigtable::admin::v2::OperationProgress* progress) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(progress_);
  }
  if (progress) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(progress)->GetArena();
    if (message_arena != submessage_arena) {
      progress = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, progress, submessage_arena);
    }
    
  } else {
    
  }
  progress_ = progress;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.OptimizeRestoredTableMetadata.progress)
}

// -------------------------------------------------------------------

// CreateTableRequest_Split

// bytes key = 1;
inline void CreateTableRequest_Split::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& CreateTableRequest_Split::key() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.CreateTableRequest.Split.key)
  return _internal_key();
}
inline void CreateTableRequest_Split::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.CreateTableRequest.Split.key)
}
inline std::string* CreateTableRequest_Split::mutable_key() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.CreateTableRequest.Split.key)
  return _internal_mutable_key();
}
inline const std::string& CreateTableRequest_Split::_internal_key() const {
  return key_.Get();
}
inline void CreateTableRequest_Split::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateTableRequest_Split::set_key(std::string&& value) {
  
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.admin.v2.CreateTableRequest.Split.key)
}
inline void CreateTableRequest_Split::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.v2.CreateTableRequest.Split.key)
}
inline void CreateTableRequest_Split::set_key(const void* value,
    size_t size) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.v2.CreateTableRequest.Split.key)
}
inline std::string* CreateTableRequest_Split::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateTableRequest_Split::release_key() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.CreateTableRequest.Split.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateTableRequest_Split::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.CreateTableRequest.Split.key)
}

// -------------------------------------------------------------------

// CreateTableRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreateTableRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& CreateTableRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.CreateTableRequest.parent)
  return _internal_parent();
}
inline void CreateTableRequest::set_parent(const std::string& value) {
  _internal_set_parent(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.CreateTableRequest.parent)
}
inline std::string* CreateTableRequest::mutable_parent() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.CreateTableRequest.parent)
  return _internal_mutable_parent();
}
inline const std::string& CreateTableRequest::_internal_parent() const {
  return parent_.Get();
}
inline void CreateTableRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateTableRequest::set_parent(std::string&& value) {
  
  parent_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.admin.v2.CreateTableRequest.parent)
}
inline void CreateTableRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.v2.CreateTableRequest.parent)
}
inline void CreateTableRequest::set_parent(const char* value,
    size_t size) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.v2.CreateTableRequest.parent)
}
inline std::string* CreateTableRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateTableRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.CreateTableRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateTableRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.CreateTableRequest.parent)
}

// string table_id = 2 [(.google.api.field_behavior) = REQUIRED];
inline void CreateTableRequest::clear_table_id() {
  table_id_.ClearToEmpty();
}
inline const std::string& CreateTableRequest::table_id() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.CreateTableRequest.table_id)
  return _internal_table_id();
}
inline void CreateTableRequest::set_table_id(const std::string& value) {
  _internal_set_table_id(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.CreateTableRequest.table_id)
}
inline std::string* CreateTableRequest::mutable_table_id() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.CreateTableRequest.table_id)
  return _internal_mutable_table_id();
}
inline const std::string& CreateTableRequest::_internal_table_id() const {
  return table_id_.Get();
}
inline void CreateTableRequest::_internal_set_table_id(const std::string& value) {
  
  table_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateTableRequest::set_table_id(std::string&& value) {
  
  table_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.admin.v2.CreateTableRequest.table_id)
}
inline void CreateTableRequest::set_table_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  table_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.v2.CreateTableRequest.table_id)
}
inline void CreateTableRequest::set_table_id(const char* value,
    size_t size) {
  
  table_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.v2.CreateTableRequest.table_id)
}
inline std::string* CreateTableRequest::_internal_mutable_table_id() {
  
  return table_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateTableRequest::release_table_id() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.CreateTableRequest.table_id)
  return table_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateTableRequest::set_allocated_table_id(std::string* table_id) {
  if (table_id != nullptr) {
    
  } else {
    
  }
  table_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), table_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.CreateTableRequest.table_id)
}

// .google.bigtable.admin.v2.Table table = 3 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateTableRequest::_internal_has_table() const {
  return this != internal_default_instance() && table_ != nullptr;
}
inline bool CreateTableRequest::has_table() const {
  return _internal_has_table();
}
inline const ::google::bigtable::admin::v2::Table& CreateTableRequest::_internal_table() const {
  const ::google::bigtable::admin::v2::Table* p = table_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::bigtable::admin::v2::Table&>(
      ::google::bigtable::admin::v2::_Table_default_instance_);
}
inline const ::google::bigtable::admin::v2::Table& CreateTableRequest::table() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.CreateTableRequest.table)
  return _internal_table();
}
inline void CreateTableRequest::unsafe_arena_set_allocated_table(
    ::google::bigtable::admin::v2::Table* table) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_);
  }
  table_ = table;
  if (table) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.admin.v2.CreateTableRequest.table)
}
inline ::google::bigtable::admin::v2::Table* CreateTableRequest::release_table() {
  
  ::google::bigtable::admin::v2::Table* temp = table_;
  table_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::bigtable::admin::v2::Table* CreateTableRequest::unsafe_arena_release_table() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.CreateTableRequest.table)
  
  ::google::bigtable::admin::v2::Table* temp = table_;
  table_ = nullptr;
  return temp;
}
inline ::google::bigtable::admin::v2::Table* CreateTableRequest::_internal_mutable_table() {
  
  if (table_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::bigtable::admin::v2::Table>(GetArena());
    table_ = p;
  }
  return table_;
}
inline ::google::bigtable::admin::v2::Table* CreateTableRequest::mutable_table() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.CreateTableRequest.table)
  return _internal_mutable_table();
}
inline void CreateTableRequest::set_allocated_table(::google::bigtable::admin::v2::Table* table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_);
  }
  if (table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table)->GetArena();
    if (message_arena != submessage_arena) {
      table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table, submessage_arena);
    }
    
  } else {
    
  }
  table_ = table;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.CreateTableRequest.table)
}

// repeated .google.bigtable.admin.v2.CreateTableRequest.Split initial_splits = 4;
inline int CreateTableRequest::_internal_initial_splits_size() const {
  return initial_splits_.size();
}
inline int CreateTableRequest::initial_splits_size() const {
  return _internal_initial_splits_size();
}
inline void CreateTableRequest::clear_initial_splits() {
  initial_splits_.Clear();
}
inline ::google::bigtable::admin::v2::CreateTableRequest_Split* CreateTableRequest::mutable_initial_splits(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.CreateTableRequest.initial_splits)
  return initial_splits_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::admin::v2::CreateTableRequest_Split >*
CreateTableRequest::mutable_initial_splits() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.admin.v2.CreateTableRequest.initial_splits)
  return &initial_splits_;
}
inline const ::google::bigtable::admin::v2::CreateTableRequest_Split& CreateTableRequest::_internal_initial_splits(int index) const {
  return initial_splits_.Get(index);
}
inline const ::google::bigtable::admin::v2::CreateTableRequest_Split& CreateTableRequest::initial_splits(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.CreateTableRequest.initial_splits)
  return _internal_initial_splits(index);
}
inline ::google::bigtable::admin::v2::CreateTableRequest_Split* CreateTableRequest::_internal_add_initial_splits() {
  return initial_splits_.Add();
}
inline ::google::bigtable::admin::v2::CreateTableRequest_Split* CreateTableRequest::add_initial_splits() {
  // @@protoc_insertion_point(field_add:google.bigtable.admin.v2.CreateTableRequest.initial_splits)
  return _internal_add_initial_splits();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::admin::v2::CreateTableRequest_Split >&
CreateTableRequest::initial_splits() const {
  // @@protoc_insertion_point(field_list:google.bigtable.admin.v2.CreateTableRequest.initial_splits)
  return initial_splits_;
}

// -------------------------------------------------------------------

// CreateTableFromSnapshotRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreateTableFromSnapshotRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& CreateTableFromSnapshotRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.CreateTableFromSnapshotRequest.parent)
  return _internal_parent();
}
inline void CreateTableFromSnapshotRequest::set_parent(const std::string& value) {
  _internal_set_parent(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.CreateTableFromSnapshotRequest.parent)
}
inline std::string* CreateTableFromSnapshotRequest::mutable_parent() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.CreateTableFromSnapshotRequest.parent)
  return _internal_mutable_parent();
}
inline const std::string& CreateTableFromSnapshotRequest::_internal_parent() const {
  return parent_.Get();
}
inline void CreateTableFromSnapshotRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateTableFromSnapshotRequest::set_parent(std::string&& value) {
  
  parent_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.admin.v2.CreateTableFromSnapshotRequest.parent)
}
inline void CreateTableFromSnapshotRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.v2.CreateTableFromSnapshotRequest.parent)
}
inline void CreateTableFromSnapshotRequest::set_parent(const char* value,
    size_t size) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.v2.CreateTableFromSnapshotRequest.parent)
}
inline std::string* CreateTableFromSnapshotRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateTableFromSnapshotRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.CreateTableFromSnapshotRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateTableFromSnapshotRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.CreateTableFromSnapshotRequest.parent)
}

// string table_id = 2 [(.google.api.field_behavior) = REQUIRED];
inline void CreateTableFromSnapshotRequest::clear_table_id() {
  table_id_.ClearToEmpty();
}
inline const std::string& CreateTableFromSnapshotRequest::table_id() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.CreateTableFromSnapshotRequest.table_id)
  return _internal_table_id();
}
inline void CreateTableFromSnapshotRequest::set_table_id(const std::string& value) {
  _internal_set_table_id(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.CreateTableFromSnapshotRequest.table_id)
}
inline std::string* CreateTableFromSnapshotRequest::mutable_table_id() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.CreateTableFromSnapshotRequest.table_id)
  return _internal_mutable_table_id();
}
inline const std::string& CreateTableFromSnapshotRequest::_internal_table_id() const {
  return table_id_.Get();
}
inline void CreateTableFromSnapshotRequest::_internal_set_table_id(const std::string& value) {
  
  table_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateTableFromSnapshotRequest::set_table_id(std::string&& value) {
  
  table_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.admin.v2.CreateTableFromSnapshotRequest.table_id)
}
inline void CreateTableFromSnapshotRequest::set_table_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  table_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.v2.CreateTableFromSnapshotRequest.table_id)
}
inline void CreateTableFromSnapshotRequest::set_table_id(const char* value,
    size_t size) {
  
  table_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.v2.CreateTableFromSnapshotRequest.table_id)
}
inline std::string* CreateTableFromSnapshotRequest::_internal_mutable_table_id() {
  
  return table_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateTableFromSnapshotRequest::release_table_id() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.CreateTableFromSnapshotRequest.table_id)
  return table_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateTableFromSnapshotRequest::set_allocated_table_id(std::string* table_id) {
  if (table_id != nullptr) {
    
  } else {
    
  }
  table_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), table_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.CreateTableFromSnapshotRequest.table_id)
}

// string source_snapshot = 3 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreateTableFromSnapshotRequest::clear_source_snapshot() {
  source_snapshot_.ClearToEmpty();
}
inline const std::string& CreateTableFromSnapshotRequest::source_snapshot() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.CreateTableFromSnapshotRequest.source_snapshot)
  return _internal_source_snapshot();
}
inline void CreateTableFromSnapshotRequest::set_source_snapshot(const std::string& value) {
  _internal_set_source_snapshot(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.CreateTableFromSnapshotRequest.source_snapshot)
}
inline std::string* CreateTableFromSnapshotRequest::mutable_source_snapshot() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.CreateTableFromSnapshotRequest.source_snapshot)
  return _internal_mutable_source_snapshot();
}
inline const std::string& CreateTableFromSnapshotRequest::_internal_source_snapshot() const {
  return source_snapshot_.Get();
}
inline void CreateTableFromSnapshotRequest::_internal_set_source_snapshot(const std::string& value) {
  
  source_snapshot_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateTableFromSnapshotRequest::set_source_snapshot(std::string&& value) {
  
  source_snapshot_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.admin.v2.CreateTableFromSnapshotRequest.source_snapshot)
}
inline void CreateTableFromSnapshotRequest::set_source_snapshot(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_snapshot_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.v2.CreateTableFromSnapshotRequest.source_snapshot)
}
inline void CreateTableFromSnapshotRequest::set_source_snapshot(const char* value,
    size_t size) {
  
  source_snapshot_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.v2.CreateTableFromSnapshotRequest.source_snapshot)
}
inline std::string* CreateTableFromSnapshotRequest::_internal_mutable_source_snapshot() {
  
  return source_snapshot_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateTableFromSnapshotRequest::release_source_snapshot() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.CreateTableFromSnapshotRequest.source_snapshot)
  return source_snapshot_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateTableFromSnapshotRequest::set_allocated_source_snapshot(std::string* source_snapshot) {
  if (source_snapshot != nullptr) {
    
  } else {
    
  }
  source_snapshot_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source_snapshot,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.CreateTableFromSnapshotRequest.source_snapshot)
}

// -------------------------------------------------------------------

// DropRowRangeRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DropRowRangeRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& DropRowRangeRequest::name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.DropRowRangeRequest.name)
  return _internal_name();
}
inline void DropRowRangeRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.DropRowRangeRequest.name)
}
inline std::string* DropRowRangeRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.DropRowRangeRequest.name)
  return _internal_mutable_name();
}
inline const std::string& DropRowRangeRequest::_internal_name() const {
  return name_.Get();
}
inline void DropRowRangeRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DropRowRangeRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.admin.v2.DropRowRangeRequest.name)
}
inline void DropRowRangeRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.v2.DropRowRangeRequest.name)
}
inline void DropRowRangeRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.v2.DropRowRangeRequest.name)
}
inline std::string* DropRowRangeRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DropRowRangeRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.DropRowRangeRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DropRowRangeRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.DropRowRangeRequest.name)
}

// bytes row_key_prefix = 2;
inline bool DropRowRangeRequest::_internal_has_row_key_prefix() const {
  return target_case() == kRowKeyPrefix;
}
inline void DropRowRangeRequest::set_has_row_key_prefix() {
  _oneof_case_[0] = kRowKeyPrefix;
}
inline void DropRowRangeRequest::clear_row_key_prefix() {
  if (_internal_has_row_key_prefix()) {
    target_.row_key_prefix_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_target();
  }
}
inline const std::string& DropRowRangeRequest::row_key_prefix() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.DropRowRangeRequest.row_key_prefix)
  return _internal_row_key_prefix();
}
inline void DropRowRangeRequest::set_row_key_prefix(const std::string& value) {
  _internal_set_row_key_prefix(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.DropRowRangeRequest.row_key_prefix)
}
inline std::string* DropRowRangeRequest::mutable_row_key_prefix() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.DropRowRangeRequest.row_key_prefix)
  return _internal_mutable_row_key_prefix();
}
inline const std::string& DropRowRangeRequest::_internal_row_key_prefix() const {
  if (_internal_has_row_key_prefix()) {
    return target_.row_key_prefix_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void DropRowRangeRequest::_internal_set_row_key_prefix(const std::string& value) {
  if (!_internal_has_row_key_prefix()) {
    clear_target();
    set_has_row_key_prefix();
    target_.row_key_prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  target_.row_key_prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DropRowRangeRequest::set_row_key_prefix(std::string&& value) {
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.DropRowRangeRequest.row_key_prefix)
  if (!_internal_has_row_key_prefix()) {
    clear_target();
    set_has_row_key_prefix();
    target_.row_key_prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  target_.row_key_prefix_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.admin.v2.DropRowRangeRequest.row_key_prefix)
}
inline void DropRowRangeRequest::set_row_key_prefix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_row_key_prefix()) {
    clear_target();
    set_has_row_key_prefix();
    target_.row_key_prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  target_.row_key_prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.v2.DropRowRangeRequest.row_key_prefix)
}
inline void DropRowRangeRequest::set_row_key_prefix(const void* value,
                             size_t size) {
  if (!_internal_has_row_key_prefix()) {
    clear_target();
    set_has_row_key_prefix();
    target_.row_key_prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  target_.row_key_prefix_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.v2.DropRowRangeRequest.row_key_prefix)
}
inline std::string* DropRowRangeRequest::_internal_mutable_row_key_prefix() {
  if (!_internal_has_row_key_prefix()) {
    clear_target();
    set_has_row_key_prefix();
    target_.row_key_prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return target_.row_key_prefix_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DropRowRangeRequest::release_row_key_prefix() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.DropRowRangeRequest.row_key_prefix)
  if (_internal_has_row_key_prefix()) {
    clear_has_target();
    return target_.row_key_prefix_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void DropRowRangeRequest::set_allocated_row_key_prefix(std::string* row_key_prefix) {
  if (has_target()) {
    clear_target();
  }
  if (row_key_prefix != nullptr) {
    set_has_row_key_prefix();
    target_.row_key_prefix_.UnsafeSetDefault(row_key_prefix);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(row_key_prefix);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.DropRowRangeRequest.row_key_prefix)
}

// bool delete_all_data_from_table = 3;
inline bool DropRowRangeRequest::_internal_has_delete_all_data_from_table() const {
  return target_case() == kDeleteAllDataFromTable;
}
inline void DropRowRangeRequest::set_has_delete_all_data_from_table() {
  _oneof_case_[0] = kDeleteAllDataFromTable;
}
inline void DropRowRangeRequest::clear_delete_all_data_from_table() {
  if (_internal_has_delete_all_data_from_table()) {
    target_.delete_all_data_from_table_ = false;
    clear_has_target();
  }
}
inline bool DropRowRangeRequest::_internal_delete_all_data_from_table() const {
  if (_internal_has_delete_all_data_from_table()) {
    return target_.delete_all_data_from_table_;
  }
  return false;
}
inline void DropRowRangeRequest::_internal_set_delete_all_data_from_table(bool value) {
  if (!_internal_has_delete_all_data_from_table()) {
    clear_target();
    set_has_delete_all_data_from_table();
  }
  target_.delete_all_data_from_table_ = value;
}
inline bool DropRowRangeRequest::delete_all_data_from_table() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.DropRowRangeRequest.delete_all_data_from_table)
  return _internal_delete_all_data_from_table();
}
inline void DropRowRangeRequest::set_delete_all_data_from_table(bool value) {
  _internal_set_delete_all_data_from_table(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.DropRowRangeRequest.delete_all_data_from_table)
}

inline bool DropRowRangeRequest::has_target() const {
  return target_case() != TARGET_NOT_SET;
}
inline void DropRowRangeRequest::clear_has_target() {
  _oneof_case_[0] = TARGET_NOT_SET;
}
inline DropRowRangeRequest::TargetCase DropRowRangeRequest::target_case() const {
  return DropRowRangeRequest::TargetCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ListTablesRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListTablesRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& ListTablesRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.ListTablesRequest.parent)
  return _internal_parent();
}
inline void ListTablesRequest::set_parent(const std::string& value) {
  _internal_set_parent(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.ListTablesRequest.parent)
}
inline std::string* ListTablesRequest::mutable_parent() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.ListTablesRequest.parent)
  return _internal_mutable_parent();
}
inline const std::string& ListTablesRequest::_internal_parent() const {
  return parent_.Get();
}
inline void ListTablesRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListTablesRequest::set_parent(std::string&& value) {
  
  parent_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.admin.v2.ListTablesRequest.parent)
}
inline void ListTablesRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.v2.ListTablesRequest.parent)
}
inline void ListTablesRequest::set_parent(const char* value,
    size_t size) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.v2.ListTablesRequest.parent)
}
inline std::string* ListTablesRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListTablesRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.ListTablesRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListTablesRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.ListTablesRequest.parent)
}

// .google.bigtable.admin.v2.Table.View view = 2;
inline void ListTablesRequest::clear_view() {
  view_ = 0;
}
inline ::google::bigtable::admin::v2::Table_View ListTablesRequest::_internal_view() const {
  return static_cast< ::google::bigtable::admin::v2::Table_View >(view_);
}
inline ::google::bigtable::admin::v2::Table_View ListTablesRequest::view() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.ListTablesRequest.view)
  return _internal_view();
}
inline void ListTablesRequest::_internal_set_view(::google::bigtable::admin::v2::Table_View value) {
  
  view_ = value;
}
inline void ListTablesRequest::set_view(::google::bigtable::admin::v2::Table_View value) {
  _internal_set_view(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.ListTablesRequest.view)
}

// int32 page_size = 4;
inline void ListTablesRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListTablesRequest::_internal_page_size() const {
  return page_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListTablesRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.ListTablesRequest.page_size)
  return _internal_page_size();
}
inline void ListTablesRequest::_internal_set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  page_size_ = value;
}
inline void ListTablesRequest::set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.ListTablesRequest.page_size)
}

// string page_token = 3;
inline void ListTablesRequest::clear_page_token() {
  page_token_.ClearToEmpty();
}
inline const std::string& ListTablesRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.ListTablesRequest.page_token)
  return _internal_page_token();
}
inline void ListTablesRequest::set_page_token(const std::string& value) {
  _internal_set_page_token(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.ListTablesRequest.page_token)
}
inline std::string* ListTablesRequest::mutable_page_token() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.ListTablesRequest.page_token)
  return _internal_mutable_page_token();
}
inline const std::string& ListTablesRequest::_internal_page_token() const {
  return page_token_.Get();
}
inline void ListTablesRequest::_internal_set_page_token(const std::string& value) {
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListTablesRequest::set_page_token(std::string&& value) {
  
  page_token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.admin.v2.ListTablesRequest.page_token)
}
inline void ListTablesRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.v2.ListTablesRequest.page_token)
}
inline void ListTablesRequest::set_page_token(const char* value,
    size_t size) {
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.v2.ListTablesRequest.page_token)
}
inline std::string* ListTablesRequest::_internal_mutable_page_token() {
  
  return page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListTablesRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.ListTablesRequest.page_token)
  return page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListTablesRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.ListTablesRequest.page_token)
}

// -------------------------------------------------------------------

// ListTablesResponse

// repeated .google.bigtable.admin.v2.Table tables = 1;
inline int ListTablesResponse::_internal_tables_size() const {
  return tables_.size();
}
inline int ListTablesResponse::tables_size() const {
  return _internal_tables_size();
}
inline ::google::bigtable::admin::v2::Table* ListTablesResponse::mutable_tables(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.ListTablesResponse.tables)
  return tables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::admin::v2::Table >*
ListTablesResponse::mutable_tables() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.admin.v2.ListTablesResponse.tables)
  return &tables_;
}
inline const ::google::bigtable::admin::v2::Table& ListTablesResponse::_internal_tables(int index) const {
  return tables_.Get(index);
}
inline const ::google::bigtable::admin::v2::Table& ListTablesResponse::tables(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.ListTablesResponse.tables)
  return _internal_tables(index);
}
inline ::google::bigtable::admin::v2::Table* ListTablesResponse::_internal_add_tables() {
  return tables_.Add();
}
inline ::google::bigtable::admin::v2::Table* ListTablesResponse::add_tables() {
  // @@protoc_insertion_point(field_add:google.bigtable.admin.v2.ListTablesResponse.tables)
  return _internal_add_tables();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::admin::v2::Table >&
ListTablesResponse::tables() const {
  // @@protoc_insertion_point(field_list:google.bigtable.admin.v2.ListTablesResponse.tables)
  return tables_;
}

// string next_page_token = 2;
inline void ListTablesResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty();
}
inline const std::string& ListTablesResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.ListTablesResponse.next_page_token)
  return _internal_next_page_token();
}
inline void ListTablesResponse::set_next_page_token(const std::string& value) {
  _internal_set_next_page_token(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.ListTablesResponse.next_page_token)
}
inline std::string* ListTablesResponse::mutable_next_page_token() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.ListTablesResponse.next_page_token)
  return _internal_mutable_next_page_token();
}
inline const std::string& ListTablesResponse::_internal_next_page_token() const {
  return next_page_token_.Get();
}
inline void ListTablesResponse::_internal_set_next_page_token(const std::string& value) {
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListTablesResponse::set_next_page_token(std::string&& value) {
  
  next_page_token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.admin.v2.ListTablesResponse.next_page_token)
}
inline void ListTablesResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.v2.ListTablesResponse.next_page_token)
}
inline void ListTablesResponse::set_next_page_token(const char* value,
    size_t size) {
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.v2.ListTablesResponse.next_page_token)
}
inline std::string* ListTablesResponse::_internal_mutable_next_page_token() {
  
  return next_page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListTablesResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.ListTablesResponse.next_page_token)
  return next_page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListTablesResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.ListTablesResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetTableRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetTableRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GetTableRequest::name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.GetTableRequest.name)
  return _internal_name();
}
inline void GetTableRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.GetTableRequest.name)
}
inline std::string* GetTableRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.GetTableRequest.name)
  return _internal_mutable_name();
}
inline const std::string& GetTableRequest::_internal_name() const {
  return name_.Get();
}
inline void GetTableRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetTableRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.admin.v2.GetTableRequest.name)
}
inline void GetTableRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.v2.GetTableRequest.name)
}
inline void GetTableRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.v2.GetTableRequest.name)
}
inline std::string* GetTableRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetTableRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.GetTableRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetTableRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.GetTableRequest.name)
}

// .google.bigtable.admin.v2.Table.View view = 2;
inline void GetTableRequest::clear_view() {
  view_ = 0;
}
inline ::google::bigtable::admin::v2::Table_View GetTableRequest::_internal_view() const {
  return static_cast< ::google::bigtable::admin::v2::Table_View >(view_);
}
inline ::google::bigtable::admin::v2::Table_View GetTableRequest::view() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.GetTableRequest.view)
  return _internal_view();
}
inline void GetTableRequest::_internal_set_view(::google::bigtable::admin::v2::Table_View value) {
  
  view_ = value;
}
inline void GetTableRequest::set_view(::google::bigtable::admin::v2::Table_View value) {
  _internal_set_view(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.GetTableRequest.view)
}

// -------------------------------------------------------------------

// DeleteTableRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteTableRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& DeleteTableRequest::name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.DeleteTableRequest.name)
  return _internal_name();
}
inline void DeleteTableRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.DeleteTableRequest.name)
}
inline std::string* DeleteTableRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.DeleteTableRequest.name)
  return _internal_mutable_name();
}
inline const std::string& DeleteTableRequest::_internal_name() const {
  return name_.Get();
}
inline void DeleteTableRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeleteTableRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.admin.v2.DeleteTableRequest.name)
}
inline void DeleteTableRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.v2.DeleteTableRequest.name)
}
inline void DeleteTableRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.v2.DeleteTableRequest.name)
}
inline std::string* DeleteTableRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeleteTableRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.DeleteTableRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteTableRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.DeleteTableRequest.name)
}

// -------------------------------------------------------------------

// ModifyColumnFamiliesRequest_Modification

// string id = 1;
inline void ModifyColumnFamiliesRequest_Modification::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& ModifyColumnFamiliesRequest_Modification::id() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification.id)
  return _internal_id();
}
inline void ModifyColumnFamiliesRequest_Modification::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification.id)
}
inline std::string* ModifyColumnFamiliesRequest_Modification::mutable_id() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification.id)
  return _internal_mutable_id();
}
inline const std::string& ModifyColumnFamiliesRequest_Modification::_internal_id() const {
  return id_.Get();
}
inline void ModifyColumnFamiliesRequest_Modification::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ModifyColumnFamiliesRequest_Modification::set_id(std::string&& value) {
  
  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification.id)
}
inline void ModifyColumnFamiliesRequest_Modification::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification.id)
}
inline void ModifyColumnFamiliesRequest_Modification::set_id(const char* value,
    size_t size) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification.id)
}
inline std::string* ModifyColumnFamiliesRequest_Modification::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ModifyColumnFamiliesRequest_Modification::release_id() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ModifyColumnFamiliesRequest_Modification::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification.id)
}

// .google.bigtable.admin.v2.ColumnFamily create = 2;
inline bool ModifyColumnFamiliesRequest_Modification::_internal_has_create() const {
  return mod_case() == kCreate;
}
inline bool ModifyColumnFamiliesRequest_Modification::has_create() const {
  return _internal_has_create();
}
inline void ModifyColumnFamiliesRequest_Modification::set_has_create() {
  _oneof_case_[0] = kCreate;
}
inline ::google::bigtable::admin::v2::ColumnFamily* ModifyColumnFamiliesRequest_Modification::release_create() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification.create)
  if (_internal_has_create()) {
    clear_has_mod();
      ::google::bigtable::admin::v2::ColumnFamily* temp = mod_.create_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    mod_.create_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::bigtable::admin::v2::ColumnFamily& ModifyColumnFamiliesRequest_Modification::_internal_create() const {
  return _internal_has_create()
      ? *mod_.create_
      : reinterpret_cast< ::google::bigtable::admin::v2::ColumnFamily&>(::google::bigtable::admin::v2::_ColumnFamily_default_instance_);
}
inline const ::google::bigtable::admin::v2::ColumnFamily& ModifyColumnFamiliesRequest_Modification::create() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification.create)
  return _internal_create();
}
inline ::google::bigtable::admin::v2::ColumnFamily* ModifyColumnFamiliesRequest_Modification::unsafe_arena_release_create() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification.create)
  if (_internal_has_create()) {
    clear_has_mod();
    ::google::bigtable::admin::v2::ColumnFamily* temp = mod_.create_;
    mod_.create_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ModifyColumnFamiliesRequest_Modification::unsafe_arena_set_allocated_create(::google::bigtable::admin::v2::ColumnFamily* create) {
  clear_mod();
  if (create) {
    set_has_create();
    mod_.create_ = create;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification.create)
}
inline ::google::bigtable::admin::v2::ColumnFamily* ModifyColumnFamiliesRequest_Modification::_internal_mutable_create() {
  if (!_internal_has_create()) {
    clear_mod();
    set_has_create();
    mod_.create_ = CreateMaybeMessage< ::google::bigtable::admin::v2::ColumnFamily >(GetArena());
  }
  return mod_.create_;
}
inline ::google::bigtable::admin::v2::ColumnFamily* ModifyColumnFamiliesRequest_Modification::mutable_create() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification.create)
  return _internal_mutable_create();
}

// .google.bigtable.admin.v2.ColumnFamily update = 3;
inline bool ModifyColumnFamiliesRequest_Modification::_internal_has_update() const {
  return mod_case() == kUpdate;
}
inline bool ModifyColumnFamiliesRequest_Modification::has_update() const {
  return _internal_has_update();
}
inline void ModifyColumnFamiliesRequest_Modification::set_has_update() {
  _oneof_case_[0] = kUpdate;
}
inline ::google::bigtable::admin::v2::ColumnFamily* ModifyColumnFamiliesRequest_Modification::release_update() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification.update)
  if (_internal_has_update()) {
    clear_has_mod();
      ::google::bigtable::admin::v2::ColumnFamily* temp = mod_.update_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    mod_.update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::bigtable::admin::v2::ColumnFamily& ModifyColumnFamiliesRequest_Modification::_internal_update() const {
  return _internal_has_update()
      ? *mod_.update_
      : reinterpret_cast< ::google::bigtable::admin::v2::ColumnFamily&>(::google::bigtable::admin::v2::_ColumnFamily_default_instance_);
}
inline const ::google::bigtable::admin::v2::ColumnFamily& ModifyColumnFamiliesRequest_Modification::update() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification.update)
  return _internal_update();
}
inline ::google::bigtable::admin::v2::ColumnFamily* ModifyColumnFamiliesRequest_Modification::unsafe_arena_release_update() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification.update)
  if (_internal_has_update()) {
    clear_has_mod();
    ::google::bigtable::admin::v2::ColumnFamily* temp = mod_.update_;
    mod_.update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ModifyColumnFamiliesRequest_Modification::unsafe_arena_set_allocated_update(::google::bigtable::admin::v2::ColumnFamily* update) {
  clear_mod();
  if (update) {
    set_has_update();
    mod_.update_ = update;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification.update)
}
inline ::google::bigtable::admin::v2::ColumnFamily* ModifyColumnFamiliesRequest_Modification::_internal_mutable_update() {
  if (!_internal_has_update()) {
    clear_mod();
    set_has_update();
    mod_.update_ = CreateMaybeMessage< ::google::bigtable::admin::v2::ColumnFamily >(GetArena());
  }
  return mod_.update_;
}
inline ::google::bigtable::admin::v2::ColumnFamily* ModifyColumnFamiliesRequest_Modification::mutable_update() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification.update)
  return _internal_mutable_update();
}

// bool drop = 4;
inline bool ModifyColumnFamiliesRequest_Modification::_internal_has_drop() const {
  return mod_case() == kDrop;
}
inline void ModifyColumnFamiliesRequest_Modification::set_has_drop() {
  _oneof_case_[0] = kDrop;
}
inline void ModifyColumnFamiliesRequest_Modification::clear_drop() {
  if (_internal_has_drop()) {
    mod_.drop_ = false;
    clear_has_mod();
  }
}
inline bool ModifyColumnFamiliesRequest_Modification::_internal_drop() const {
  if (_internal_has_drop()) {
    return mod_.drop_;
  }
  return false;
}
inline void ModifyColumnFamiliesRequest_Modification::_internal_set_drop(bool value) {
  if (!_internal_has_drop()) {
    clear_mod();
    set_has_drop();
  }
  mod_.drop_ = value;
}
inline bool ModifyColumnFamiliesRequest_Modification::drop() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification.drop)
  return _internal_drop();
}
inline void ModifyColumnFamiliesRequest_Modification::set_drop(bool value) {
  _internal_set_drop(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification.drop)
}

inline bool ModifyColumnFamiliesRequest_Modification::has_mod() const {
  return mod_case() != MOD_NOT_SET;
}
inline void ModifyColumnFamiliesRequest_Modification::clear_has_mod() {
  _oneof_case_[0] = MOD_NOT_SET;
}
inline ModifyColumnFamiliesRequest_Modification::ModCase ModifyColumnFamiliesRequest_Modification::mod_case() const {
  return ModifyColumnFamiliesRequest_Modification::ModCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ModifyColumnFamiliesRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ModifyColumnFamiliesRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ModifyColumnFamiliesRequest::name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.ModifyColumnFamiliesRequest.name)
  return _internal_name();
}
inline void ModifyColumnFamiliesRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.ModifyColumnFamiliesRequest.name)
}
inline std::string* ModifyColumnFamiliesRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.ModifyColumnFamiliesRequest.name)
  return _internal_mutable_name();
}
inline const std::string& ModifyColumnFamiliesRequest::_internal_name() const {
  return name_.Get();
}
inline void ModifyColumnFamiliesRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ModifyColumnFamiliesRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.admin.v2.ModifyColumnFamiliesRequest.name)
}
inline void ModifyColumnFamiliesRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.v2.ModifyColumnFamiliesRequest.name)
}
inline void ModifyColumnFamiliesRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.v2.ModifyColumnFamiliesRequest.name)
}
inline std::string* ModifyColumnFamiliesRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ModifyColumnFamiliesRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.ModifyColumnFamiliesRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ModifyColumnFamiliesRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.ModifyColumnFamiliesRequest.name)
}

// repeated .google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification modifications = 2 [(.google.api.field_behavior) = REQUIRED];
inline int ModifyColumnFamiliesRequest::_internal_modifications_size() const {
  return modifications_.size();
}
inline int ModifyColumnFamiliesRequest::modifications_size() const {
  return _internal_modifications_size();
}
inline void ModifyColumnFamiliesRequest::clear_modifications() {
  modifications_.Clear();
}
inline ::google::bigtable::admin::v2::ModifyColumnFamiliesRequest_Modification* ModifyColumnFamiliesRequest::mutable_modifications(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.ModifyColumnFamiliesRequest.modifications)
  return modifications_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::admin::v2::ModifyColumnFamiliesRequest_Modification >*
ModifyColumnFamiliesRequest::mutable_modifications() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.admin.v2.ModifyColumnFamiliesRequest.modifications)
  return &modifications_;
}
inline const ::google::bigtable::admin::v2::ModifyColumnFamiliesRequest_Modification& ModifyColumnFamiliesRequest::_internal_modifications(int index) const {
  return modifications_.Get(index);
}
inline const ::google::bigtable::admin::v2::ModifyColumnFamiliesRequest_Modification& ModifyColumnFamiliesRequest::modifications(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.ModifyColumnFamiliesRequest.modifications)
  return _internal_modifications(index);
}
inline ::google::bigtable::admin::v2::ModifyColumnFamiliesRequest_Modification* ModifyColumnFamiliesRequest::_internal_add_modifications() {
  return modifications_.Add();
}
inline ::google::bigtable::admin::v2::ModifyColumnFamiliesRequest_Modification* ModifyColumnFamiliesRequest::add_modifications() {
  // @@protoc_insertion_point(field_add:google.bigtable.admin.v2.ModifyColumnFamiliesRequest.modifications)
  return _internal_add_modifications();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::admin::v2::ModifyColumnFamiliesRequest_Modification >&
ModifyColumnFamiliesRequest::modifications() const {
  // @@protoc_insertion_point(field_list:google.bigtable.admin.v2.ModifyColumnFamiliesRequest.modifications)
  return modifications_;
}

// -------------------------------------------------------------------

// GenerateConsistencyTokenRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GenerateConsistencyTokenRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GenerateConsistencyTokenRequest::name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.GenerateConsistencyTokenRequest.name)
  return _internal_name();
}
inline void GenerateConsistencyTokenRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.GenerateConsistencyTokenRequest.name)
}
inline std::string* GenerateConsistencyTokenRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.GenerateConsistencyTokenRequest.name)
  return _internal_mutable_name();
}
inline const std::string& GenerateConsistencyTokenRequest::_internal_name() const {
  return name_.Get();
}
inline void GenerateConsistencyTokenRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GenerateConsistencyTokenRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.admin.v2.GenerateConsistencyTokenRequest.name)
}
inline void GenerateConsistencyTokenRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.v2.GenerateConsistencyTokenRequest.name)
}
inline void GenerateConsistencyTokenRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.v2.GenerateConsistencyTokenRequest.name)
}
inline std::string* GenerateConsistencyTokenRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GenerateConsistencyTokenRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.GenerateConsistencyTokenRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GenerateConsistencyTokenRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.GenerateConsistencyTokenRequest.name)
}

// -------------------------------------------------------------------

// GenerateConsistencyTokenResponse

// string consistency_token = 1;
inline void GenerateConsistencyTokenResponse::clear_consistency_token() {
  consistency_token_.ClearToEmpty();
}
inline const std::string& GenerateConsistencyTokenResponse::consistency_token() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.GenerateConsistencyTokenResponse.consistency_token)
  return _internal_consistency_token();
}
inline void GenerateConsistencyTokenResponse::set_consistency_token(const std::string& value) {
  _internal_set_consistency_token(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.GenerateConsistencyTokenResponse.consistency_token)
}
inline std::string* GenerateConsistencyTokenResponse::mutable_consistency_token() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.GenerateConsistencyTokenResponse.consistency_token)
  return _internal_mutable_consistency_token();
}
inline const std::string& GenerateConsistencyTokenResponse::_internal_consistency_token() const {
  return consistency_token_.Get();
}
inline void GenerateConsistencyTokenResponse::_internal_set_consistency_token(const std::string& value) {
  
  consistency_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GenerateConsistencyTokenResponse::set_consistency_token(std::string&& value) {
  
  consistency_token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.admin.v2.GenerateConsistencyTokenResponse.consistency_token)
}
inline void GenerateConsistencyTokenResponse::set_consistency_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  consistency_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.v2.GenerateConsistencyTokenResponse.consistency_token)
}
inline void GenerateConsistencyTokenResponse::set_consistency_token(const char* value,
    size_t size) {
  
  consistency_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.v2.GenerateConsistencyTokenResponse.consistency_token)
}
inline std::string* GenerateConsistencyTokenResponse::_internal_mutable_consistency_token() {
  
  return consistency_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GenerateConsistencyTokenResponse::release_consistency_token() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.GenerateConsistencyTokenResponse.consistency_token)
  return consistency_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GenerateConsistencyTokenResponse::set_allocated_consistency_token(std::string* consistency_token) {
  if (consistency_token != nullptr) {
    
  } else {
    
  }
  consistency_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), consistency_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.GenerateConsistencyTokenResponse.consistency_token)
}

// -------------------------------------------------------------------

// CheckConsistencyRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CheckConsistencyRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& CheckConsistencyRequest::name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.CheckConsistencyRequest.name)
  return _internal_name();
}
inline void CheckConsistencyRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.CheckConsistencyRequest.name)
}
inline std::string* CheckConsistencyRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.CheckConsistencyRequest.name)
  return _internal_mutable_name();
}
inline const std::string& CheckConsistencyRequest::_internal_name() const {
  return name_.Get();
}
inline void CheckConsistencyRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CheckConsistencyRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.admin.v2.CheckConsistencyRequest.name)
}
inline void CheckConsistencyRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.v2.CheckConsistencyRequest.name)
}
inline void CheckConsistencyRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.v2.CheckConsistencyRequest.name)
}
inline std::string* CheckConsistencyRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CheckConsistencyRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.CheckConsistencyRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CheckConsistencyRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.CheckConsistencyRequest.name)
}

// string consistency_token = 2 [(.google.api.field_behavior) = REQUIRED];
inline void CheckConsistencyRequest::clear_consistency_token() {
  consistency_token_.ClearToEmpty();
}
inline const std::string& CheckConsistencyRequest::consistency_token() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.CheckConsistencyRequest.consistency_token)
  return _internal_consistency_token();
}
inline void CheckConsistencyRequest::set_consistency_token(const std::string& value) {
  _internal_set_consistency_token(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.CheckConsistencyRequest.consistency_token)
}
inline std::string* CheckConsistencyRequest::mutable_consistency_token() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.CheckConsistencyRequest.consistency_token)
  return _internal_mutable_consistency_token();
}
inline const std::string& CheckConsistencyRequest::_internal_consistency_token() const {
  return consistency_token_.Get();
}
inline void CheckConsistencyRequest::_internal_set_consistency_token(const std::string& value) {
  
  consistency_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CheckConsistencyRequest::set_consistency_token(std::string&& value) {
  
  consistency_token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.admin.v2.CheckConsistencyRequest.consistency_token)
}
inline void CheckConsistencyRequest::set_consistency_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  consistency_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.v2.CheckConsistencyRequest.consistency_token)
}
inline void CheckConsistencyRequest::set_consistency_token(const char* value,
    size_t size) {
  
  consistency_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.v2.CheckConsistencyRequest.consistency_token)
}
inline std::string* CheckConsistencyRequest::_internal_mutable_consistency_token() {
  
  return consistency_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CheckConsistencyRequest::release_consistency_token() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.CheckConsistencyRequest.consistency_token)
  return consistency_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CheckConsistencyRequest::set_allocated_consistency_token(std::string* consistency_token) {
  if (consistency_token != nullptr) {
    
  } else {
    
  }
  consistency_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), consistency_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.CheckConsistencyRequest.consistency_token)
}

// -------------------------------------------------------------------

// CheckConsistencyResponse

// bool consistent = 1;
inline void CheckConsistencyResponse::clear_consistent() {
  consistent_ = false;
}
inline bool CheckConsistencyResponse::_internal_consistent() const {
  return consistent_;
}
inline bool CheckConsistencyResponse::consistent() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.CheckConsistencyResponse.consistent)
  return _internal_consistent();
}
inline void CheckConsistencyResponse::_internal_set_consistent(bool value) {
  
  consistent_ = value;
}
inline void CheckConsistencyResponse::set_consistent(bool value) {
  _internal_set_consistent(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.CheckConsistencyResponse.consistent)
}

// -------------------------------------------------------------------

// SnapshotTableRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void SnapshotTableRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& SnapshotTableRequest::name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.SnapshotTableRequest.name)
  return _internal_name();
}
inline void SnapshotTableRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.SnapshotTableRequest.name)
}
inline std::string* SnapshotTableRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.SnapshotTableRequest.name)
  return _internal_mutable_name();
}
inline const std::string& SnapshotTableRequest::_internal_name() const {
  return name_.Get();
}
inline void SnapshotTableRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SnapshotTableRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.admin.v2.SnapshotTableRequest.name)
}
inline void SnapshotTableRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.v2.SnapshotTableRequest.name)
}
inline void SnapshotTableRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.v2.SnapshotTableRequest.name)
}
inline std::string* SnapshotTableRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SnapshotTableRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.SnapshotTableRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SnapshotTableRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.SnapshotTableRequest.name)
}

// string cluster = 2 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void SnapshotTableRequest::clear_cluster() {
  cluster_.ClearToEmpty();
}
inline const std::string& SnapshotTableRequest::cluster() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.SnapshotTableRequest.cluster)
  return _internal_cluster();
}
inline void SnapshotTableRequest::set_cluster(const std::string& value) {
  _internal_set_cluster(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.SnapshotTableRequest.cluster)
}
inline std::string* SnapshotTableRequest::mutable_cluster() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.SnapshotTableRequest.cluster)
  return _internal_mutable_cluster();
}
inline const std::string& SnapshotTableRequest::_internal_cluster() const {
  return cluster_.Get();
}
inline void SnapshotTableRequest::_internal_set_cluster(const std::string& value) {
  
  cluster_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SnapshotTableRequest::set_cluster(std::string&& value) {
  
  cluster_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.admin.v2.SnapshotTableRequest.cluster)
}
inline void SnapshotTableRequest::set_cluster(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cluster_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.v2.SnapshotTableRequest.cluster)
}
inline void SnapshotTableRequest::set_cluster(const char* value,
    size_t size) {
  
  cluster_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.v2.SnapshotTableRequest.cluster)
}
inline std::string* SnapshotTableRequest::_internal_mutable_cluster() {
  
  return cluster_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SnapshotTableRequest::release_cluster() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.SnapshotTableRequest.cluster)
  return cluster_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SnapshotTableRequest::set_allocated_cluster(std::string* cluster) {
  if (cluster != nullptr) {
    
  } else {
    
  }
  cluster_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cluster,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.SnapshotTableRequest.cluster)
}

// string snapshot_id = 3 [(.google.api.field_behavior) = REQUIRED];
inline void SnapshotTableRequest::clear_snapshot_id() {
  snapshot_id_.ClearToEmpty();
}
inline const std::string& SnapshotTableRequest::snapshot_id() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.SnapshotTableRequest.snapshot_id)
  return _internal_snapshot_id();
}
inline void SnapshotTableRequest::set_snapshot_id(const std::string& value) {
  _internal_set_snapshot_id(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.SnapshotTableRequest.snapshot_id)
}
inline std::string* SnapshotTableRequest::mutable_snapshot_id() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.SnapshotTableRequest.snapshot_id)
  return _internal_mutable_snapshot_id();
}
inline const std::string& SnapshotTableRequest::_internal_snapshot_id() const {
  return snapshot_id_.Get();
}
inline void SnapshotTableRequest::_internal_set_snapshot_id(const std::string& value) {
  
  snapshot_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SnapshotTableRequest::set_snapshot_id(std::string&& value) {
  
  snapshot_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.admin.v2.SnapshotTableRequest.snapshot_id)
}
inline void SnapshotTableRequest::set_snapshot_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  snapshot_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.v2.SnapshotTableRequest.snapshot_id)
}
inline void SnapshotTableRequest::set_snapshot_id(const char* value,
    size_t size) {
  
  snapshot_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.v2.SnapshotTableRequest.snapshot_id)
}
inline std::string* SnapshotTableRequest::_internal_mutable_snapshot_id() {
  
  return snapshot_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SnapshotTableRequest::release_snapshot_id() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.SnapshotTableRequest.snapshot_id)
  return snapshot_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SnapshotTableRequest::set_allocated_snapshot_id(std::string* snapshot_id) {
  if (snapshot_id != nullptr) {
    
  } else {
    
  }
  snapshot_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), snapshot_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.SnapshotTableRequest.snapshot_id)
}

// .google.protobuf.Duration ttl = 4;
inline bool SnapshotTableRequest::_internal_has_ttl() const {
  return this != internal_default_instance() && ttl_ != nullptr;
}
inline bool SnapshotTableRequest::has_ttl() const {
  return _internal_has_ttl();
}
inline const PROTOBUF_NAMESPACE_ID::Duration& SnapshotTableRequest::_internal_ttl() const {
  const PROTOBUF_NAMESPACE_ID::Duration* p = ttl_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Duration&>(
      PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Duration& SnapshotTableRequest::ttl() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.SnapshotTableRequest.ttl)
  return _internal_ttl();
}
inline void SnapshotTableRequest::unsafe_arena_set_allocated_ttl(
    PROTOBUF_NAMESPACE_ID::Duration* ttl) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ttl_);
  }
  ttl_ = ttl;
  if (ttl) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.admin.v2.SnapshotTableRequest.ttl)
}
inline PROTOBUF_NAMESPACE_ID::Duration* SnapshotTableRequest::release_ttl() {
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = ttl_;
  ttl_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* SnapshotTableRequest::unsafe_arena_release_ttl() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.SnapshotTableRequest.ttl)
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = ttl_;
  ttl_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* SnapshotTableRequest::_internal_mutable_ttl() {
  
  if (ttl_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Duration>(GetArena());
    ttl_ = p;
  }
  return ttl_;
}
inline PROTOBUF_NAMESPACE_ID::Duration* SnapshotTableRequest::mutable_ttl() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.SnapshotTableRequest.ttl)
  return _internal_mutable_ttl();
}
inline void SnapshotTableRequest::set_allocated_ttl(PROTOBUF_NAMESPACE_ID::Duration* ttl) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ttl_);
  }
  if (ttl) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ttl)->GetArena();
    if (message_arena != submessage_arena) {
      ttl = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ttl, submessage_arena);
    }
    
  } else {
    
  }
  ttl_ = ttl;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.SnapshotTableRequest.ttl)
}

// string description = 5;
inline void SnapshotTableRequest::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& SnapshotTableRequest::description() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.SnapshotTableRequest.description)
  return _internal_description();
}
inline void SnapshotTableRequest::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.SnapshotTableRequest.description)
}
inline std::string* SnapshotTableRequest::mutable_description() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.SnapshotTableRequest.description)
  return _internal_mutable_description();
}
inline const std::string& SnapshotTableRequest::_internal_description() const {
  return description_.Get();
}
inline void SnapshotTableRequest::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SnapshotTableRequest::set_description(std::string&& value) {
  
  description_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.admin.v2.SnapshotTableRequest.description)
}
inline void SnapshotTableRequest::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.v2.SnapshotTableRequest.description)
}
inline void SnapshotTableRequest::set_description(const char* value,
    size_t size) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.v2.SnapshotTableRequest.description)
}
inline std::string* SnapshotTableRequest::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SnapshotTableRequest::release_description() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.SnapshotTableRequest.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SnapshotTableRequest::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.SnapshotTableRequest.description)
}

// -------------------------------------------------------------------

// GetSnapshotRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetSnapshotRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GetSnapshotRequest::name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.GetSnapshotRequest.name)
  return _internal_name();
}
inline void GetSnapshotRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.GetSnapshotRequest.name)
}
inline std::string* GetSnapshotRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.GetSnapshotRequest.name)
  return _internal_mutable_name();
}
inline const std::string& GetSnapshotRequest::_internal_name() const {
  return name_.Get();
}
inline void GetSnapshotRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetSnapshotRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.admin.v2.GetSnapshotRequest.name)
}
inline void GetSnapshotRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.v2.GetSnapshotRequest.name)
}
inline void GetSnapshotRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.v2.GetSnapshotRequest.name)
}
inline std::string* GetSnapshotRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetSnapshotRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.GetSnapshotRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetSnapshotRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.GetSnapshotRequest.name)
}

// -------------------------------------------------------------------

// ListSnapshotsRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListSnapshotsRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& ListSnapshotsRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.ListSnapshotsRequest.parent)
  return _internal_parent();
}
inline void ListSnapshotsRequest::set_parent(const std::string& value) {
  _internal_set_parent(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.ListSnapshotsRequest.parent)
}
inline std::string* ListSnapshotsRequest::mutable_parent() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.ListSnapshotsRequest.parent)
  return _internal_mutable_parent();
}
inline const std::string& ListSnapshotsRequest::_internal_parent() const {
  return parent_.Get();
}
inline void ListSnapshotsRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListSnapshotsRequest::set_parent(std::string&& value) {
  
  parent_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.admin.v2.ListSnapshotsRequest.parent)
}
inline void ListSnapshotsRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.v2.ListSnapshotsRequest.parent)
}
inline void ListSnapshotsRequest::set_parent(const char* value,
    size_t size) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.v2.ListSnapshotsRequest.parent)
}
inline std::string* ListSnapshotsRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListSnapshotsRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.ListSnapshotsRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListSnapshotsRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.ListSnapshotsRequest.parent)
}

// int32 page_size = 2;
inline void ListSnapshotsRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListSnapshotsRequest::_internal_page_size() const {
  return page_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListSnapshotsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.ListSnapshotsRequest.page_size)
  return _internal_page_size();
}
inline void ListSnapshotsRequest::_internal_set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  page_size_ = value;
}
inline void ListSnapshotsRequest::set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.ListSnapshotsRequest.page_size)
}

// string page_token = 3;
inline void ListSnapshotsRequest::clear_page_token() {
  page_token_.ClearToEmpty();
}
inline const std::string& ListSnapshotsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.ListSnapshotsRequest.page_token)
  return _internal_page_token();
}
inline void ListSnapshotsRequest::set_page_token(const std::string& value) {
  _internal_set_page_token(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.ListSnapshotsRequest.page_token)
}
inline std::string* ListSnapshotsRequest::mutable_page_token() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.ListSnapshotsRequest.page_token)
  return _internal_mutable_page_token();
}
inline const std::string& ListSnapshotsRequest::_internal_page_token() const {
  return page_token_.Get();
}
inline void ListSnapshotsRequest::_internal_set_page_token(const std::string& value) {
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListSnapshotsRequest::set_page_token(std::string&& value) {
  
  page_token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.admin.v2.ListSnapshotsRequest.page_token)
}
inline void ListSnapshotsRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.v2.ListSnapshotsRequest.page_token)
}
inline void ListSnapshotsRequest::set_page_token(const char* value,
    size_t size) {
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.v2.ListSnapshotsRequest.page_token)
}
inline std::string* ListSnapshotsRequest::_internal_mutable_page_token() {
  
  return page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListSnapshotsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.ListSnapshotsRequest.page_token)
  return page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListSnapshotsRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.ListSnapshotsRequest.page_token)
}

// -------------------------------------------------------------------

// ListSnapshotsResponse

// repeated .google.bigtable.admin.v2.Snapshot snapshots = 1;
inline int ListSnapshotsResponse::_internal_snapshots_size() const {
  return snapshots_.size();
}
inline int ListSnapshotsResponse::snapshots_size() const {
  return _internal_snapshots_size();
}
inline ::google::bigtable::admin::v2::Snapshot* ListSnapshotsResponse::mutable_snapshots(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.ListSnapshotsResponse.snapshots)
  return snapshots_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::admin::v2::Snapshot >*
ListSnapshotsResponse::mutable_snapshots() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.admin.v2.ListSnapshotsResponse.snapshots)
  return &snapshots_;
}
inline const ::google::bigtable::admin::v2::Snapshot& ListSnapshotsResponse::_internal_snapshots(int index) const {
  return snapshots_.Get(index);
}
inline const ::google::bigtable::admin::v2::Snapshot& ListSnapshotsResponse::snapshots(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.ListSnapshotsResponse.snapshots)
  return _internal_snapshots(index);
}
inline ::google::bigtable::admin::v2::Snapshot* ListSnapshotsResponse::_internal_add_snapshots() {
  return snapshots_.Add();
}
inline ::google::bigtable::admin::v2::Snapshot* ListSnapshotsResponse::add_snapshots() {
  // @@protoc_insertion_point(field_add:google.bigtable.admin.v2.ListSnapshotsResponse.snapshots)
  return _internal_add_snapshots();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::admin::v2::Snapshot >&
ListSnapshotsResponse::snapshots() const {
  // @@protoc_insertion_point(field_list:google.bigtable.admin.v2.ListSnapshotsResponse.snapshots)
  return snapshots_;
}

// string next_page_token = 2;
inline void ListSnapshotsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty();
}
inline const std::string& ListSnapshotsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.ListSnapshotsResponse.next_page_token)
  return _internal_next_page_token();
}
inline void ListSnapshotsResponse::set_next_page_token(const std::string& value) {
  _internal_set_next_page_token(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.ListSnapshotsResponse.next_page_token)
}
inline std::string* ListSnapshotsResponse::mutable_next_page_token() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.ListSnapshotsResponse.next_page_token)
  return _internal_mutable_next_page_token();
}
inline const std::string& ListSnapshotsResponse::_internal_next_page_token() const {
  return next_page_token_.Get();
}
inline void ListSnapshotsResponse::_internal_set_next_page_token(const std::string& value) {
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListSnapshotsResponse::set_next_page_token(std::string&& value) {
  
  next_page_token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.admin.v2.ListSnapshotsResponse.next_page_token)
}
inline void ListSnapshotsResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.v2.ListSnapshotsResponse.next_page_token)
}
inline void ListSnapshotsResponse::set_next_page_token(const char* value,
    size_t size) {
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.v2.ListSnapshotsResponse.next_page_token)
}
inline std::string* ListSnapshotsResponse::_internal_mutable_next_page_token() {
  
  return next_page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListSnapshotsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.ListSnapshotsResponse.next_page_token)
  return next_page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListSnapshotsResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.ListSnapshotsResponse.next_page_token)
}

// -------------------------------------------------------------------

// DeleteSnapshotRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteSnapshotRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& DeleteSnapshotRequest::name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.DeleteSnapshotRequest.name)
  return _internal_name();
}
inline void DeleteSnapshotRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.DeleteSnapshotRequest.name)
}
inline std::string* DeleteSnapshotRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.DeleteSnapshotRequest.name)
  return _internal_mutable_name();
}
inline const std::string& DeleteSnapshotRequest::_internal_name() const {
  return name_.Get();
}
inline void DeleteSnapshotRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeleteSnapshotRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.admin.v2.DeleteSnapshotRequest.name)
}
inline void DeleteSnapshotRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.v2.DeleteSnapshotRequest.name)
}
inline void DeleteSnapshotRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.v2.DeleteSnapshotRequest.name)
}
inline std::string* DeleteSnapshotRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeleteSnapshotRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.DeleteSnapshotRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteSnapshotRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.DeleteSnapshotRequest.name)
}

// -------------------------------------------------------------------

// SnapshotTableMetadata

// .google.bigtable.admin.v2.SnapshotTableRequest original_request = 1;
inline bool SnapshotTableMetadata::_internal_has_original_request() const {
  return this != internal_default_instance() && original_request_ != nullptr;
}
inline bool SnapshotTableMetadata::has_original_request() const {
  return _internal_has_original_request();
}
inline void SnapshotTableMetadata::clear_original_request() {
  if (GetArena() == nullptr && original_request_ != nullptr) {
    delete original_request_;
  }
  original_request_ = nullptr;
}
inline const ::google::bigtable::admin::v2::SnapshotTableRequest& SnapshotTableMetadata::_internal_original_request() const {
  const ::google::bigtable::admin::v2::SnapshotTableRequest* p = original_request_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::bigtable::admin::v2::SnapshotTableRequest&>(
      ::google::bigtable::admin::v2::_SnapshotTableRequest_default_instance_);
}
inline const ::google::bigtable::admin::v2::SnapshotTableRequest& SnapshotTableMetadata::original_request() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.SnapshotTableMetadata.original_request)
  return _internal_original_request();
}
inline void SnapshotTableMetadata::unsafe_arena_set_allocated_original_request(
    ::google::bigtable::admin::v2::SnapshotTableRequest* original_request) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(original_request_);
  }
  original_request_ = original_request;
  if (original_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.admin.v2.SnapshotTableMetadata.original_request)
}
inline ::google::bigtable::admin::v2::SnapshotTableRequest* SnapshotTableMetadata::release_original_request() {
  
  ::google::bigtable::admin::v2::SnapshotTableRequest* temp = original_request_;
  original_request_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::bigtable::admin::v2::SnapshotTableRequest* SnapshotTableMetadata::unsafe_arena_release_original_request() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.SnapshotTableMetadata.original_request)
  
  ::google::bigtable::admin::v2::SnapshotTableRequest* temp = original_request_;
  original_request_ = nullptr;
  return temp;
}
inline ::google::bigtable::admin::v2::SnapshotTableRequest* SnapshotTableMetadata::_internal_mutable_original_request() {
  
  if (original_request_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::bigtable::admin::v2::SnapshotTableRequest>(GetArena());
    original_request_ = p;
  }
  return original_request_;
}
inline ::google::bigtable::admin::v2::SnapshotTableRequest* SnapshotTableMetadata::mutable_original_request() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.SnapshotTableMetadata.original_request)
  return _internal_mutable_original_request();
}
inline void SnapshotTableMetadata::set_allocated_original_request(::google::bigtable::admin::v2::SnapshotTableRequest* original_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete original_request_;
  }
  if (original_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(original_request);
    if (message_arena != submessage_arena) {
      original_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, original_request, submessage_arena);
    }
    
  } else {
    
  }
  original_request_ = original_request;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.SnapshotTableMetadata.original_request)
}

// .google.protobuf.Timestamp request_time = 2;
inline bool SnapshotTableMetadata::_internal_has_request_time() const {
  return this != internal_default_instance() && request_time_ != nullptr;
}
inline bool SnapshotTableMetadata::has_request_time() const {
  return _internal_has_request_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& SnapshotTableMetadata::_internal_request_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = request_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& SnapshotTableMetadata::request_time() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.SnapshotTableMetadata.request_time)
  return _internal_request_time();
}
inline void SnapshotTableMetadata::unsafe_arena_set_allocated_request_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* request_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_time_);
  }
  request_time_ = request_time;
  if (request_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.admin.v2.SnapshotTableMetadata.request_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* SnapshotTableMetadata::release_request_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = request_time_;
  request_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* SnapshotTableMetadata::unsafe_arena_release_request_time() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.SnapshotTableMetadata.request_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = request_time_;
  request_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* SnapshotTableMetadata::_internal_mutable_request_time() {
  
  if (request_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    request_time_ = p;
  }
  return request_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* SnapshotTableMetadata::mutable_request_time() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.SnapshotTableMetadata.request_time)
  return _internal_mutable_request_time();
}
inline void SnapshotTableMetadata::set_allocated_request_time(PROTOBUF_NAMESPACE_ID::Timestamp* request_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_time_);
  }
  if (request_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_time)->GetArena();
    if (message_arena != submessage_arena) {
      request_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request_time, submessage_arena);
    }
    
  } else {
    
  }
  request_time_ = request_time;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.SnapshotTableMetadata.request_time)
}

// .google.protobuf.Timestamp finish_time = 3;
inline bool SnapshotTableMetadata::_internal_has_finish_time() const {
  return this != internal_default_instance() && finish_time_ != nullptr;
}
inline bool SnapshotTableMetadata::has_finish_time() const {
  return _internal_has_finish_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& SnapshotTableMetadata::_internal_finish_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = finish_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& SnapshotTableMetadata::finish_time() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.SnapshotTableMetadata.finish_time)
  return _internal_finish_time();
}
inline void SnapshotTableMetadata::unsafe_arena_set_allocated_finish_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* finish_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(finish_time_);
  }
  finish_time_ = finish_time;
  if (finish_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.admin.v2.SnapshotTableMetadata.finish_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* SnapshotTableMetadata::release_finish_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = finish_time_;
  finish_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* SnapshotTableMetadata::unsafe_arena_release_finish_time() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.SnapshotTableMetadata.finish_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = finish_time_;
  finish_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* SnapshotTableMetadata::_internal_mutable_finish_time() {
  
  if (finish_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    finish_time_ = p;
  }
  return finish_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* SnapshotTableMetadata::mutable_finish_time() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.SnapshotTableMetadata.finish_time)
  return _internal_mutable_finish_time();
}
inline void SnapshotTableMetadata::set_allocated_finish_time(PROTOBUF_NAMESPACE_ID::Timestamp* finish_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(finish_time_);
  }
  if (finish_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(finish_time)->GetArena();
    if (message_arena != submessage_arena) {
      finish_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, finish_time, submessage_arena);
    }
    
  } else {
    
  }
  finish_time_ = finish_time;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.SnapshotTableMetadata.finish_time)
}

// -------------------------------------------------------------------

// CreateTableFromSnapshotMetadata

// .google.bigtable.admin.v2.CreateTableFromSnapshotRequest original_request = 1;
inline bool CreateTableFromSnapshotMetadata::_internal_has_original_request() const {
  return this != internal_default_instance() && original_request_ != nullptr;
}
inline bool CreateTableFromSnapshotMetadata::has_original_request() const {
  return _internal_has_original_request();
}
inline void CreateTableFromSnapshotMetadata::clear_original_request() {
  if (GetArena() == nullptr && original_request_ != nullptr) {
    delete original_request_;
  }
  original_request_ = nullptr;
}
inline const ::google::bigtable::admin::v2::CreateTableFromSnapshotRequest& CreateTableFromSnapshotMetadata::_internal_original_request() const {
  const ::google::bigtable::admin::v2::CreateTableFromSnapshotRequest* p = original_request_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::bigtable::admin::v2::CreateTableFromSnapshotRequest&>(
      ::google::bigtable::admin::v2::_CreateTableFromSnapshotRequest_default_instance_);
}
inline const ::google::bigtable::admin::v2::CreateTableFromSnapshotRequest& CreateTableFromSnapshotMetadata::original_request() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.CreateTableFromSnapshotMetadata.original_request)
  return _internal_original_request();
}
inline void CreateTableFromSnapshotMetadata::unsafe_arena_set_allocated_original_request(
    ::google::bigtable::admin::v2::CreateTableFromSnapshotRequest* original_request) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(original_request_);
  }
  original_request_ = original_request;
  if (original_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.admin.v2.CreateTableFromSnapshotMetadata.original_request)
}
inline ::google::bigtable::admin::v2::CreateTableFromSnapshotRequest* CreateTableFromSnapshotMetadata::release_original_request() {
  
  ::google::bigtable::admin::v2::CreateTableFromSnapshotRequest* temp = original_request_;
  original_request_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::bigtable::admin::v2::CreateTableFromSnapshotRequest* CreateTableFromSnapshotMetadata::unsafe_arena_release_original_request() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.CreateTableFromSnapshotMetadata.original_request)
  
  ::google::bigtable::admin::v2::CreateTableFromSnapshotRequest* temp = original_request_;
  original_request_ = nullptr;
  return temp;
}
inline ::google::bigtable::admin::v2::CreateTableFromSnapshotRequest* CreateTableFromSnapshotMetadata::_internal_mutable_original_request() {
  
  if (original_request_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::bigtable::admin::v2::CreateTableFromSnapshotRequest>(GetArena());
    original_request_ = p;
  }
  return original_request_;
}
inline ::google::bigtable::admin::v2::CreateTableFromSnapshotRequest* CreateTableFromSnapshotMetadata::mutable_original_request() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.CreateTableFromSnapshotMetadata.original_request)
  return _internal_mutable_original_request();
}
inline void CreateTableFromSnapshotMetadata::set_allocated_original_request(::google::bigtable::admin::v2::CreateTableFromSnapshotRequest* original_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete original_request_;
  }
  if (original_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(original_request);
    if (message_arena != submessage_arena) {
      original_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, original_request, submessage_arena);
    }
    
  } else {
    
  }
  original_request_ = original_request;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.CreateTableFromSnapshotMetadata.original_request)
}

// .google.protobuf.Timestamp request_time = 2;
inline bool CreateTableFromSnapshotMetadata::_internal_has_request_time() const {
  return this != internal_default_instance() && request_time_ != nullptr;
}
inline bool CreateTableFromSnapshotMetadata::has_request_time() const {
  return _internal_has_request_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& CreateTableFromSnapshotMetadata::_internal_request_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = request_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& CreateTableFromSnapshotMetadata::request_time() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.CreateTableFromSnapshotMetadata.request_time)
  return _internal_request_time();
}
inline void CreateTableFromSnapshotMetadata::unsafe_arena_set_allocated_request_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* request_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_time_);
  }
  request_time_ = request_time;
  if (request_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.admin.v2.CreateTableFromSnapshotMetadata.request_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CreateTableFromSnapshotMetadata::release_request_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = request_time_;
  request_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CreateTableFromSnapshotMetadata::unsafe_arena_release_request_time() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.CreateTableFromSnapshotMetadata.request_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = request_time_;
  request_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CreateTableFromSnapshotMetadata::_internal_mutable_request_time() {
  
  if (request_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    request_time_ = p;
  }
  return request_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CreateTableFromSnapshotMetadata::mutable_request_time() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.CreateTableFromSnapshotMetadata.request_time)
  return _internal_mutable_request_time();
}
inline void CreateTableFromSnapshotMetadata::set_allocated_request_time(PROTOBUF_NAMESPACE_ID::Timestamp* request_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_time_);
  }
  if (request_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_time)->GetArena();
    if (message_arena != submessage_arena) {
      request_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request_time, submessage_arena);
    }
    
  } else {
    
  }
  request_time_ = request_time;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.CreateTableFromSnapshotMetadata.request_time)
}

// .google.protobuf.Timestamp finish_time = 3;
inline bool CreateTableFromSnapshotMetadata::_internal_has_finish_time() const {
  return this != internal_default_instance() && finish_time_ != nullptr;
}
inline bool CreateTableFromSnapshotMetadata::has_finish_time() const {
  return _internal_has_finish_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& CreateTableFromSnapshotMetadata::_internal_finish_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = finish_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& CreateTableFromSnapshotMetadata::finish_time() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.CreateTableFromSnapshotMetadata.finish_time)
  return _internal_finish_time();
}
inline void CreateTableFromSnapshotMetadata::unsafe_arena_set_allocated_finish_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* finish_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(finish_time_);
  }
  finish_time_ = finish_time;
  if (finish_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.admin.v2.CreateTableFromSnapshotMetadata.finish_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CreateTableFromSnapshotMetadata::release_finish_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = finish_time_;
  finish_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CreateTableFromSnapshotMetadata::unsafe_arena_release_finish_time() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.CreateTableFromSnapshotMetadata.finish_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = finish_time_;
  finish_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CreateTableFromSnapshotMetadata::_internal_mutable_finish_time() {
  
  if (finish_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    finish_time_ = p;
  }
  return finish_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CreateTableFromSnapshotMetadata::mutable_finish_time() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.CreateTableFromSnapshotMetadata.finish_time)
  return _internal_mutable_finish_time();
}
inline void CreateTableFromSnapshotMetadata::set_allocated_finish_time(PROTOBUF_NAMESPACE_ID::Timestamp* finish_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(finish_time_);
  }
  if (finish_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(finish_time)->GetArena();
    if (message_arena != submessage_arena) {
      finish_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, finish_time, submessage_arena);
    }
    
  } else {
    
  }
  finish_time_ = finish_time;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.CreateTableFromSnapshotMetadata.finish_time)
}

// -------------------------------------------------------------------

// CreateBackupRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreateBackupRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& CreateBackupRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.CreateBackupRequest.parent)
  return _internal_parent();
}
inline void CreateBackupRequest::set_parent(const std::string& value) {
  _internal_set_parent(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.CreateBackupRequest.parent)
}
inline std::string* CreateBackupRequest::mutable_parent() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.CreateBackupRequest.parent)
  return _internal_mutable_parent();
}
inline const std::string& CreateBackupRequest::_internal_parent() const {
  return parent_.Get();
}
inline void CreateBackupRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateBackupRequest::set_parent(std::string&& value) {
  
  parent_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.admin.v2.CreateBackupRequest.parent)
}
inline void CreateBackupRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.v2.CreateBackupRequest.parent)
}
inline void CreateBackupRequest::set_parent(const char* value,
    size_t size) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.v2.CreateBackupRequest.parent)
}
inline std::string* CreateBackupRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateBackupRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.CreateBackupRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateBackupRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.CreateBackupRequest.parent)
}

// string backup_id = 2 [(.google.api.field_behavior) = REQUIRED];
inline void CreateBackupRequest::clear_backup_id() {
  backup_id_.ClearToEmpty();
}
inline const std::string& CreateBackupRequest::backup_id() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.CreateBackupRequest.backup_id)
  return _internal_backup_id();
}
inline void CreateBackupRequest::set_backup_id(const std::string& value) {
  _internal_set_backup_id(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.CreateBackupRequest.backup_id)
}
inline std::string* CreateBackupRequest::mutable_backup_id() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.CreateBackupRequest.backup_id)
  return _internal_mutable_backup_id();
}
inline const std::string& CreateBackupRequest::_internal_backup_id() const {
  return backup_id_.Get();
}
inline void CreateBackupRequest::_internal_set_backup_id(const std::string& value) {
  
  backup_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateBackupRequest::set_backup_id(std::string&& value) {
  
  backup_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.admin.v2.CreateBackupRequest.backup_id)
}
inline void CreateBackupRequest::set_backup_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  backup_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.v2.CreateBackupRequest.backup_id)
}
inline void CreateBackupRequest::set_backup_id(const char* value,
    size_t size) {
  
  backup_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.v2.CreateBackupRequest.backup_id)
}
inline std::string* CreateBackupRequest::_internal_mutable_backup_id() {
  
  return backup_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateBackupRequest::release_backup_id() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.CreateBackupRequest.backup_id)
  return backup_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateBackupRequest::set_allocated_backup_id(std::string* backup_id) {
  if (backup_id != nullptr) {
    
  } else {
    
  }
  backup_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), backup_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.CreateBackupRequest.backup_id)
}

// .google.bigtable.admin.v2.Backup backup = 3 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateBackupRequest::_internal_has_backup() const {
  return this != internal_default_instance() && backup_ != nullptr;
}
inline bool CreateBackupRequest::has_backup() const {
  return _internal_has_backup();
}
inline const ::google::bigtable::admin::v2::Backup& CreateBackupRequest::_internal_backup() const {
  const ::google::bigtable::admin::v2::Backup* p = backup_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::bigtable::admin::v2::Backup&>(
      ::google::bigtable::admin::v2::_Backup_default_instance_);
}
inline const ::google::bigtable::admin::v2::Backup& CreateBackupRequest::backup() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.CreateBackupRequest.backup)
  return _internal_backup();
}
inline void CreateBackupRequest::unsafe_arena_set_allocated_backup(
    ::google::bigtable::admin::v2::Backup* backup) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(backup_);
  }
  backup_ = backup;
  if (backup) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.admin.v2.CreateBackupRequest.backup)
}
inline ::google::bigtable::admin::v2::Backup* CreateBackupRequest::release_backup() {
  
  ::google::bigtable::admin::v2::Backup* temp = backup_;
  backup_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::bigtable::admin::v2::Backup* CreateBackupRequest::unsafe_arena_release_backup() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.CreateBackupRequest.backup)
  
  ::google::bigtable::admin::v2::Backup* temp = backup_;
  backup_ = nullptr;
  return temp;
}
inline ::google::bigtable::admin::v2::Backup* CreateBackupRequest::_internal_mutable_backup() {
  
  if (backup_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::bigtable::admin::v2::Backup>(GetArena());
    backup_ = p;
  }
  return backup_;
}
inline ::google::bigtable::admin::v2::Backup* CreateBackupRequest::mutable_backup() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.CreateBackupRequest.backup)
  return _internal_mutable_backup();
}
inline void CreateBackupRequest::set_allocated_backup(::google::bigtable::admin::v2::Backup* backup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(backup_);
  }
  if (backup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(backup)->GetArena();
    if (message_arena != submessage_arena) {
      backup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, backup, submessage_arena);
    }
    
  } else {
    
  }
  backup_ = backup;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.CreateBackupRequest.backup)
}

// -------------------------------------------------------------------

// CreateBackupMetadata

// string name = 1;
inline void CreateBackupMetadata::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& CreateBackupMetadata::name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.CreateBackupMetadata.name)
  return _internal_name();
}
inline void CreateBackupMetadata::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.CreateBackupMetadata.name)
}
inline std::string* CreateBackupMetadata::mutable_name() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.CreateBackupMetadata.name)
  return _internal_mutable_name();
}
inline const std::string& CreateBackupMetadata::_internal_name() const {
  return name_.Get();
}
inline void CreateBackupMetadata::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateBackupMetadata::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.admin.v2.CreateBackupMetadata.name)
}
inline void CreateBackupMetadata::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.v2.CreateBackupMetadata.name)
}
inline void CreateBackupMetadata::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.v2.CreateBackupMetadata.name)
}
inline std::string* CreateBackupMetadata::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateBackupMetadata::release_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.CreateBackupMetadata.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateBackupMetadata::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.CreateBackupMetadata.name)
}

// string source_table = 2;
inline void CreateBackupMetadata::clear_source_table() {
  source_table_.ClearToEmpty();
}
inline const std::string& CreateBackupMetadata::source_table() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.CreateBackupMetadata.source_table)
  return _internal_source_table();
}
inline void CreateBackupMetadata::set_source_table(const std::string& value) {
  _internal_set_source_table(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.CreateBackupMetadata.source_table)
}
inline std::string* CreateBackupMetadata::mutable_source_table() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.CreateBackupMetadata.source_table)
  return _internal_mutable_source_table();
}
inline const std::string& CreateBackupMetadata::_internal_source_table() const {
  return source_table_.Get();
}
inline void CreateBackupMetadata::_internal_set_source_table(const std::string& value) {
  
  source_table_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateBackupMetadata::set_source_table(std::string&& value) {
  
  source_table_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.admin.v2.CreateBackupMetadata.source_table)
}
inline void CreateBackupMetadata::set_source_table(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_table_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.v2.CreateBackupMetadata.source_table)
}
inline void CreateBackupMetadata::set_source_table(const char* value,
    size_t size) {
  
  source_table_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.v2.CreateBackupMetadata.source_table)
}
inline std::string* CreateBackupMetadata::_internal_mutable_source_table() {
  
  return source_table_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateBackupMetadata::release_source_table() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.CreateBackupMetadata.source_table)
  return source_table_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateBackupMetadata::set_allocated_source_table(std::string* source_table) {
  if (source_table != nullptr) {
    
  } else {
    
  }
  source_table_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source_table,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.CreateBackupMetadata.source_table)
}

// .google.protobuf.Timestamp start_time = 3;
inline bool CreateBackupMetadata::_internal_has_start_time() const {
  return this != internal_default_instance() && start_time_ != nullptr;
}
inline bool CreateBackupMetadata::has_start_time() const {
  return _internal_has_start_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& CreateBackupMetadata::_internal_start_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = start_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& CreateBackupMetadata::start_time() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.CreateBackupMetadata.start_time)
  return _internal_start_time();
}
inline void CreateBackupMetadata::unsafe_arena_set_allocated_start_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* start_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time_);
  }
  start_time_ = start_time;
  if (start_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.admin.v2.CreateBackupMetadata.start_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CreateBackupMetadata::release_start_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = start_time_;
  start_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CreateBackupMetadata::unsafe_arena_release_start_time() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.CreateBackupMetadata.start_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = start_time_;
  start_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CreateBackupMetadata::_internal_mutable_start_time() {
  
  if (start_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    start_time_ = p;
  }
  return start_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CreateBackupMetadata::mutable_start_time() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.CreateBackupMetadata.start_time)
  return _internal_mutable_start_time();
}
inline void CreateBackupMetadata::set_allocated_start_time(PROTOBUF_NAMESPACE_ID::Timestamp* start_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time_);
  }
  if (start_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time)->GetArena();
    if (message_arena != submessage_arena) {
      start_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_time, submessage_arena);
    }
    
  } else {
    
  }
  start_time_ = start_time;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.CreateBackupMetadata.start_time)
}

// .google.protobuf.Timestamp end_time = 4;
inline bool CreateBackupMetadata::_internal_has_end_time() const {
  return this != internal_default_instance() && end_time_ != nullptr;
}
inline bool CreateBackupMetadata::has_end_time() const {
  return _internal_has_end_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& CreateBackupMetadata::_internal_end_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = end_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& CreateBackupMetadata::end_time() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.CreateBackupMetadata.end_time)
  return _internal_end_time();
}
inline void CreateBackupMetadata::unsafe_arena_set_allocated_end_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time_);
  }
  end_time_ = end_time;
  if (end_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.admin.v2.CreateBackupMetadata.end_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CreateBackupMetadata::release_end_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_time_;
  end_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CreateBackupMetadata::unsafe_arena_release_end_time() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.CreateBackupMetadata.end_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_time_;
  end_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CreateBackupMetadata::_internal_mutable_end_time() {
  
  if (end_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    end_time_ = p;
  }
  return end_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CreateBackupMetadata::mutable_end_time() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.CreateBackupMetadata.end_time)
  return _internal_mutable_end_time();
}
inline void CreateBackupMetadata::set_allocated_end_time(PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time_);
  }
  if (end_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time)->GetArena();
    if (message_arena != submessage_arena) {
      end_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_time, submessage_arena);
    }
    
  } else {
    
  }
  end_time_ = end_time;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.CreateBackupMetadata.end_time)
}

// -------------------------------------------------------------------

// UpdateBackupRequest

// .google.bigtable.admin.v2.Backup backup = 1 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateBackupRequest::_internal_has_backup() const {
  return this != internal_default_instance() && backup_ != nullptr;
}
inline bool UpdateBackupRequest::has_backup() const {
  return _internal_has_backup();
}
inline const ::google::bigtable::admin::v2::Backup& UpdateBackupRequest::_internal_backup() const {
  const ::google::bigtable::admin::v2::Backup* p = backup_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::bigtable::admin::v2::Backup&>(
      ::google::bigtable::admin::v2::_Backup_default_instance_);
}
inline const ::google::bigtable::admin::v2::Backup& UpdateBackupRequest::backup() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.UpdateBackupRequest.backup)
  return _internal_backup();
}
inline void UpdateBackupRequest::unsafe_arena_set_allocated_backup(
    ::google::bigtable::admin::v2::Backup* backup) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(backup_);
  }
  backup_ = backup;
  if (backup) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.admin.v2.UpdateBackupRequest.backup)
}
inline ::google::bigtable::admin::v2::Backup* UpdateBackupRequest::release_backup() {
  
  ::google::bigtable::admin::v2::Backup* temp = backup_;
  backup_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::bigtable::admin::v2::Backup* UpdateBackupRequest::unsafe_arena_release_backup() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.UpdateBackupRequest.backup)
  
  ::google::bigtable::admin::v2::Backup* temp = backup_;
  backup_ = nullptr;
  return temp;
}
inline ::google::bigtable::admin::v2::Backup* UpdateBackupRequest::_internal_mutable_backup() {
  
  if (backup_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::bigtable::admin::v2::Backup>(GetArena());
    backup_ = p;
  }
  return backup_;
}
inline ::google::bigtable::admin::v2::Backup* UpdateBackupRequest::mutable_backup() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.UpdateBackupRequest.backup)
  return _internal_mutable_backup();
}
inline void UpdateBackupRequest::set_allocated_backup(::google::bigtable::admin::v2::Backup* backup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(backup_);
  }
  if (backup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(backup)->GetArena();
    if (message_arena != submessage_arena) {
      backup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, backup, submessage_arena);
    }
    
  } else {
    
  }
  backup_ = backup;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.UpdateBackupRequest.backup)
}

// .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateBackupRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != nullptr;
}
inline bool UpdateBackupRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const PROTOBUF_NAMESPACE_ID::FieldMask& UpdateBackupRequest::_internal_update_mask() const {
  const PROTOBUF_NAMESPACE_ID::FieldMask* p = update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FieldMask&>(
      PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FieldMask& UpdateBackupRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.UpdateBackupRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateBackupRequest::unsafe_arena_set_allocated_update_mask(
    PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.admin.v2.UpdateBackupRequest.update_mask)
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* UpdateBackupRequest::release_update_mask() {
  
  PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* UpdateBackupRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.UpdateBackupRequest.update_mask)
  
  PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* UpdateBackupRequest::_internal_mutable_update_mask() {
  
  if (update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FieldMask>(GetArena());
    update_mask_ = p;
  }
  return update_mask_;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* UpdateBackupRequest::mutable_update_mask() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.UpdateBackupRequest.update_mask)
  return _internal_mutable_update_mask();
}
inline void UpdateBackupRequest::set_allocated_update_mask(PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask)->GetArena();
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.UpdateBackupRequest.update_mask)
}

// -------------------------------------------------------------------

// GetBackupRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetBackupRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GetBackupRequest::name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.GetBackupRequest.name)
  return _internal_name();
}
inline void GetBackupRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.GetBackupRequest.name)
}
inline std::string* GetBackupRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.GetBackupRequest.name)
  return _internal_mutable_name();
}
inline const std::string& GetBackupRequest::_internal_name() const {
  return name_.Get();
}
inline void GetBackupRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetBackupRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.admin.v2.GetBackupRequest.name)
}
inline void GetBackupRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.v2.GetBackupRequest.name)
}
inline void GetBackupRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.v2.GetBackupRequest.name)
}
inline std::string* GetBackupRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetBackupRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.GetBackupRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetBackupRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.GetBackupRequest.name)
}

// -------------------------------------------------------------------

// DeleteBackupRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteBackupRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& DeleteBackupRequest::name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.DeleteBackupRequest.name)
  return _internal_name();
}
inline void DeleteBackupRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.DeleteBackupRequest.name)
}
inline std::string* DeleteBackupRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.DeleteBackupRequest.name)
  return _internal_mutable_name();
}
inline const std::string& DeleteBackupRequest::_internal_name() const {
  return name_.Get();
}
inline void DeleteBackupRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeleteBackupRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.admin.v2.DeleteBackupRequest.name)
}
inline void DeleteBackupRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.v2.DeleteBackupRequest.name)
}
inline void DeleteBackupRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.v2.DeleteBackupRequest.name)
}
inline std::string* DeleteBackupRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeleteBackupRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.DeleteBackupRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteBackupRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.DeleteBackupRequest.name)
}

// -------------------------------------------------------------------

// ListBackupsRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListBackupsRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& ListBackupsRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.ListBackupsRequest.parent)
  return _internal_parent();
}
inline void ListBackupsRequest::set_parent(const std::string& value) {
  _internal_set_parent(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.ListBackupsRequest.parent)
}
inline std::string* ListBackupsRequest::mutable_parent() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.ListBackupsRequest.parent)
  return _internal_mutable_parent();
}
inline const std::string& ListBackupsRequest::_internal_parent() const {
  return parent_.Get();
}
inline void ListBackupsRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListBackupsRequest::set_parent(std::string&& value) {
  
  parent_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.admin.v2.ListBackupsRequest.parent)
}
inline void ListBackupsRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.v2.ListBackupsRequest.parent)
}
inline void ListBackupsRequest::set_parent(const char* value,
    size_t size) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.v2.ListBackupsRequest.parent)
}
inline std::string* ListBackupsRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListBackupsRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.ListBackupsRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListBackupsRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.ListBackupsRequest.parent)
}

// string filter = 2;
inline void ListBackupsRequest::clear_filter() {
  filter_.ClearToEmpty();
}
inline const std::string& ListBackupsRequest::filter() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.ListBackupsRequest.filter)
  return _internal_filter();
}
inline void ListBackupsRequest::set_filter(const std::string& value) {
  _internal_set_filter(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.ListBackupsRequest.filter)
}
inline std::string* ListBackupsRequest::mutable_filter() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.ListBackupsRequest.filter)
  return _internal_mutable_filter();
}
inline const std::string& ListBackupsRequest::_internal_filter() const {
  return filter_.Get();
}
inline void ListBackupsRequest::_internal_set_filter(const std::string& value) {
  
  filter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListBackupsRequest::set_filter(std::string&& value) {
  
  filter_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.admin.v2.ListBackupsRequest.filter)
}
inline void ListBackupsRequest::set_filter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.v2.ListBackupsRequest.filter)
}
inline void ListBackupsRequest::set_filter(const char* value,
    size_t size) {
  
  filter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.v2.ListBackupsRequest.filter)
}
inline std::string* ListBackupsRequest::_internal_mutable_filter() {
  
  return filter_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListBackupsRequest::release_filter() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.ListBackupsRequest.filter)
  return filter_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListBackupsRequest::set_allocated_filter(std::string* filter) {
  if (filter != nullptr) {
    
  } else {
    
  }
  filter_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filter,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.ListBackupsRequest.filter)
}

// string order_by = 3;
inline void ListBackupsRequest::clear_order_by() {
  order_by_.ClearToEmpty();
}
inline const std::string& ListBackupsRequest::order_by() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.ListBackupsRequest.order_by)
  return _internal_order_by();
}
inline void ListBackupsRequest::set_order_by(const std::string& value) {
  _internal_set_order_by(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.ListBackupsRequest.order_by)
}
inline std::string* ListBackupsRequest::mutable_order_by() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.ListBackupsRequest.order_by)
  return _internal_mutable_order_by();
}
inline const std::string& ListBackupsRequest::_internal_order_by() const {
  return order_by_.Get();
}
inline void ListBackupsRequest::_internal_set_order_by(const std::string& value) {
  
  order_by_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListBackupsRequest::set_order_by(std::string&& value) {
  
  order_by_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.admin.v2.ListBackupsRequest.order_by)
}
inline void ListBackupsRequest::set_order_by(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  order_by_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.v2.ListBackupsRequest.order_by)
}
inline void ListBackupsRequest::set_order_by(const char* value,
    size_t size) {
  
  order_by_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.v2.ListBackupsRequest.order_by)
}
inline std::string* ListBackupsRequest::_internal_mutable_order_by() {
  
  return order_by_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListBackupsRequest::release_order_by() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.ListBackupsRequest.order_by)
  return order_by_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListBackupsRequest::set_allocated_order_by(std::string* order_by) {
  if (order_by != nullptr) {
    
  } else {
    
  }
  order_by_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), order_by,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.ListBackupsRequest.order_by)
}

// int32 page_size = 4;
inline void ListBackupsRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListBackupsRequest::_internal_page_size() const {
  return page_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListBackupsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.ListBackupsRequest.page_size)
  return _internal_page_size();
}
inline void ListBackupsRequest::_internal_set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  page_size_ = value;
}
inline void ListBackupsRequest::set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.ListBackupsRequest.page_size)
}

// string page_token = 5;
inline void ListBackupsRequest::clear_page_token() {
  page_token_.ClearToEmpty();
}
inline const std::string& ListBackupsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.ListBackupsRequest.page_token)
  return _internal_page_token();
}
inline void ListBackupsRequest::set_page_token(const std::string& value) {
  _internal_set_page_token(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.ListBackupsRequest.page_token)
}
inline std::string* ListBackupsRequest::mutable_page_token() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.ListBackupsRequest.page_token)
  return _internal_mutable_page_token();
}
inline const std::string& ListBackupsRequest::_internal_page_token() const {
  return page_token_.Get();
}
inline void ListBackupsRequest::_internal_set_page_token(const std::string& value) {
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListBackupsRequest::set_page_token(std::string&& value) {
  
  page_token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.admin.v2.ListBackupsRequest.page_token)
}
inline void ListBackupsRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.v2.ListBackupsRequest.page_token)
}
inline void ListBackupsRequest::set_page_token(const char* value,
    size_t size) {
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.v2.ListBackupsRequest.page_token)
}
inline std::string* ListBackupsRequest::_internal_mutable_page_token() {
  
  return page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListBackupsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.ListBackupsRequest.page_token)
  return page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListBackupsRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.ListBackupsRequest.page_token)
}

// -------------------------------------------------------------------

// ListBackupsResponse

// repeated .google.bigtable.admin.v2.Backup backups = 1;
inline int ListBackupsResponse::_internal_backups_size() const {
  return backups_.size();
}
inline int ListBackupsResponse::backups_size() const {
  return _internal_backups_size();
}
inline ::google::bigtable::admin::v2::Backup* ListBackupsResponse::mutable_backups(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.ListBackupsResponse.backups)
  return backups_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::admin::v2::Backup >*
ListBackupsResponse::mutable_backups() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.admin.v2.ListBackupsResponse.backups)
  return &backups_;
}
inline const ::google::bigtable::admin::v2::Backup& ListBackupsResponse::_internal_backups(int index) const {
  return backups_.Get(index);
}
inline const ::google::bigtable::admin::v2::Backup& ListBackupsResponse::backups(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.ListBackupsResponse.backups)
  return _internal_backups(index);
}
inline ::google::bigtable::admin::v2::Backup* ListBackupsResponse::_internal_add_backups() {
  return backups_.Add();
}
inline ::google::bigtable::admin::v2::Backup* ListBackupsResponse::add_backups() {
  // @@protoc_insertion_point(field_add:google.bigtable.admin.v2.ListBackupsResponse.backups)
  return _internal_add_backups();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::bigtable::admin::v2::Backup >&
ListBackupsResponse::backups() const {
  // @@protoc_insertion_point(field_list:google.bigtable.admin.v2.ListBackupsResponse.backups)
  return backups_;
}

// string next_page_token = 2;
inline void ListBackupsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty();
}
inline const std::string& ListBackupsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.ListBackupsResponse.next_page_token)
  return _internal_next_page_token();
}
inline void ListBackupsResponse::set_next_page_token(const std::string& value) {
  _internal_set_next_page_token(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.ListBackupsResponse.next_page_token)
}
inline std::string* ListBackupsResponse::mutable_next_page_token() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.ListBackupsResponse.next_page_token)
  return _internal_mutable_next_page_token();
}
inline const std::string& ListBackupsResponse::_internal_next_page_token() const {
  return next_page_token_.Get();
}
inline void ListBackupsResponse::_internal_set_next_page_token(const std::string& value) {
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListBackupsResponse::set_next_page_token(std::string&& value) {
  
  next_page_token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.admin.v2.ListBackupsResponse.next_page_token)
}
inline void ListBackupsResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.v2.ListBackupsResponse.next_page_token)
}
inline void ListBackupsResponse::set_next_page_token(const char* value,
    size_t size) {
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.v2.ListBackupsResponse.next_page_token)
}
inline std::string* ListBackupsResponse::_internal_mutable_next_page_token() {
  
  return next_page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListBackupsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.ListBackupsResponse.next_page_token)
  return next_page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListBackupsResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.ListBackupsResponse.next_page_token)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace admin
}  // namespace bigtable
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fbigtable_2fadmin_2fv2_2fbigtable_5ftable_5fadmin_2eproto
