// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/bigtable/admin/v2/instance.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fbigtable_2fadmin_2fv2_2finstance_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fbigtable_2fadmin_2fv2_2finstance_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/field_behavior.pb.h"
#include "google/api/resource.pb.h"
#include "google/bigtable/admin/v2/common.pb.h"
#include <google/protobuf/timestamp.pb.h>
#include "google/api/annotations.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fbigtable_2fadmin_2fv2_2finstance_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fbigtable_2fadmin_2fv2_2finstance_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fbigtable_2fadmin_2fv2_2finstance_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_google_2fbigtable_2fadmin_2fv2_2finstance_2eproto_metadata_getter(int index);
namespace google {
namespace bigtable {
namespace admin {
namespace v2 {
class AppProfile;
struct AppProfileDefaultTypeInternal;
extern AppProfileDefaultTypeInternal _AppProfile_default_instance_;
class AppProfile_MultiClusterRoutingUseAny;
struct AppProfile_MultiClusterRoutingUseAnyDefaultTypeInternal;
extern AppProfile_MultiClusterRoutingUseAnyDefaultTypeInternal _AppProfile_MultiClusterRoutingUseAny_default_instance_;
class AppProfile_SingleClusterRouting;
struct AppProfile_SingleClusterRoutingDefaultTypeInternal;
extern AppProfile_SingleClusterRoutingDefaultTypeInternal _AppProfile_SingleClusterRouting_default_instance_;
class AutoscalingLimits;
struct AutoscalingLimitsDefaultTypeInternal;
extern AutoscalingLimitsDefaultTypeInternal _AutoscalingLimits_default_instance_;
class AutoscalingTargets;
struct AutoscalingTargetsDefaultTypeInternal;
extern AutoscalingTargetsDefaultTypeInternal _AutoscalingTargets_default_instance_;
class Cluster;
struct ClusterDefaultTypeInternal;
extern ClusterDefaultTypeInternal _Cluster_default_instance_;
class Cluster_ClusterAutoscalingConfig;
struct Cluster_ClusterAutoscalingConfigDefaultTypeInternal;
extern Cluster_ClusterAutoscalingConfigDefaultTypeInternal _Cluster_ClusterAutoscalingConfig_default_instance_;
class Cluster_ClusterConfig;
struct Cluster_ClusterConfigDefaultTypeInternal;
extern Cluster_ClusterConfigDefaultTypeInternal _Cluster_ClusterConfig_default_instance_;
class Cluster_EncryptionConfig;
struct Cluster_EncryptionConfigDefaultTypeInternal;
extern Cluster_EncryptionConfigDefaultTypeInternal _Cluster_EncryptionConfig_default_instance_;
class Instance;
struct InstanceDefaultTypeInternal;
extern InstanceDefaultTypeInternal _Instance_default_instance_;
class Instance_LabelsEntry_DoNotUse;
struct Instance_LabelsEntry_DoNotUseDefaultTypeInternal;
extern Instance_LabelsEntry_DoNotUseDefaultTypeInternal _Instance_LabelsEntry_DoNotUse_default_instance_;
}  // namespace v2
}  // namespace admin
}  // namespace bigtable
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::bigtable::admin::v2::AppProfile* Arena::CreateMaybeMessage<::google::bigtable::admin::v2::AppProfile>(Arena*);
template<> ::google::bigtable::admin::v2::AppProfile_MultiClusterRoutingUseAny* Arena::CreateMaybeMessage<::google::bigtable::admin::v2::AppProfile_MultiClusterRoutingUseAny>(Arena*);
template<> ::google::bigtable::admin::v2::AppProfile_SingleClusterRouting* Arena::CreateMaybeMessage<::google::bigtable::admin::v2::AppProfile_SingleClusterRouting>(Arena*);
template<> ::google::bigtable::admin::v2::AutoscalingLimits* Arena::CreateMaybeMessage<::google::bigtable::admin::v2::AutoscalingLimits>(Arena*);
template<> ::google::bigtable::admin::v2::AutoscalingTargets* Arena::CreateMaybeMessage<::google::bigtable::admin::v2::AutoscalingTargets>(Arena*);
template<> ::google::bigtable::admin::v2::Cluster* Arena::CreateMaybeMessage<::google::bigtable::admin::v2::Cluster>(Arena*);
template<> ::google::bigtable::admin::v2::Cluster_ClusterAutoscalingConfig* Arena::CreateMaybeMessage<::google::bigtable::admin::v2::Cluster_ClusterAutoscalingConfig>(Arena*);
template<> ::google::bigtable::admin::v2::Cluster_ClusterConfig* Arena::CreateMaybeMessage<::google::bigtable::admin::v2::Cluster_ClusterConfig>(Arena*);
template<> ::google::bigtable::admin::v2::Cluster_EncryptionConfig* Arena::CreateMaybeMessage<::google::bigtable::admin::v2::Cluster_EncryptionConfig>(Arena*);
template<> ::google::bigtable::admin::v2::Instance* Arena::CreateMaybeMessage<::google::bigtable::admin::v2::Instance>(Arena*);
template<> ::google::bigtable::admin::v2::Instance_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage<::google::bigtable::admin::v2::Instance_LabelsEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace bigtable {
namespace admin {
namespace v2 {

enum Instance_State : int {
  Instance_State_STATE_NOT_KNOWN = 0,
  Instance_State_READY = 1,
  Instance_State_CREATING = 2,
  Instance_State_Instance_State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Instance_State_Instance_State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Instance_State_IsValid(int value);
constexpr Instance_State Instance_State_State_MIN = Instance_State_STATE_NOT_KNOWN;
constexpr Instance_State Instance_State_State_MAX = Instance_State_CREATING;
constexpr int Instance_State_State_ARRAYSIZE = Instance_State_State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Instance_State_descriptor();
template<typename T>
inline const std::string& Instance_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Instance_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Instance_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Instance_State_descriptor(), enum_t_value);
}
inline bool Instance_State_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Instance_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Instance_State>(
    Instance_State_descriptor(), name, value);
}
enum Instance_Type : int {
  Instance_Type_TYPE_UNSPECIFIED = 0,
  Instance_Type_PRODUCTION = 1,
  Instance_Type_DEVELOPMENT = 2,
  Instance_Type_Instance_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Instance_Type_Instance_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Instance_Type_IsValid(int value);
constexpr Instance_Type Instance_Type_Type_MIN = Instance_Type_TYPE_UNSPECIFIED;
constexpr Instance_Type Instance_Type_Type_MAX = Instance_Type_DEVELOPMENT;
constexpr int Instance_Type_Type_ARRAYSIZE = Instance_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Instance_Type_descriptor();
template<typename T>
inline const std::string& Instance_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Instance_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Instance_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Instance_Type_descriptor(), enum_t_value);
}
inline bool Instance_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Instance_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Instance_Type>(
    Instance_Type_descriptor(), name, value);
}
enum Cluster_State : int {
  Cluster_State_STATE_NOT_KNOWN = 0,
  Cluster_State_READY = 1,
  Cluster_State_CREATING = 2,
  Cluster_State_RESIZING = 3,
  Cluster_State_DISABLED = 4,
  Cluster_State_Cluster_State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Cluster_State_Cluster_State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Cluster_State_IsValid(int value);
constexpr Cluster_State Cluster_State_State_MIN = Cluster_State_STATE_NOT_KNOWN;
constexpr Cluster_State Cluster_State_State_MAX = Cluster_State_DISABLED;
constexpr int Cluster_State_State_ARRAYSIZE = Cluster_State_State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Cluster_State_descriptor();
template<typename T>
inline const std::string& Cluster_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Cluster_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Cluster_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Cluster_State_descriptor(), enum_t_value);
}
inline bool Cluster_State_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Cluster_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Cluster_State>(
    Cluster_State_descriptor(), name, value);
}
// ===================================================================

class Instance_LabelsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Instance_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Instance_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  Instance_LabelsEntry_DoNotUse();
  explicit constexpr Instance_LabelsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Instance_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Instance_LabelsEntry_DoNotUse& other);
  static const Instance_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Instance_LabelsEntry_DoNotUse*>(&_Instance_LabelsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.bigtable.admin.v2.Instance.LabelsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.bigtable.admin.v2.Instance.LabelsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fbigtable_2fadmin_2fv2_2finstance_2eproto);
    return ::descriptor_table_google_2fbigtable_2fadmin_2fv2_2finstance_2eproto.file_level_metadata[0];
  }

  public:
};

// -------------------------------------------------------------------

class Instance PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.v2.Instance) */ {
 public:
  inline Instance() : Instance(nullptr) {}
  virtual ~Instance();
  explicit constexpr Instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Instance(const Instance& from);
  Instance(Instance&& from) noexcept
    : Instance() {
    *this = ::std::move(from);
  }

  inline Instance& operator=(const Instance& from) {
    CopyFrom(from);
    return *this;
  }
  inline Instance& operator=(Instance&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Instance& default_instance() {
    return *internal_default_instance();
  }
  static inline const Instance* internal_default_instance() {
    return reinterpret_cast<const Instance*>(
               &_Instance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Instance& a, Instance& b) {
    a.Swap(&b);
  }
  inline void Swap(Instance* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Instance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Instance* New() const final {
    return CreateMaybeMessage<Instance>(nullptr);
  }

  Instance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Instance>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Instance& from);
  void MergeFrom(const Instance& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Instance* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.admin.v2.Instance";
  }
  protected:
  explicit Instance(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fbigtable_2fadmin_2fv2_2finstance_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------


  typedef Instance_State State;
  static constexpr State STATE_NOT_KNOWN =
    Instance_State_STATE_NOT_KNOWN;
  static constexpr State READY =
    Instance_State_READY;
  static constexpr State CREATING =
    Instance_State_CREATING;
  static inline bool State_IsValid(int value) {
    return Instance_State_IsValid(value);
  }
  static constexpr State State_MIN =
    Instance_State_State_MIN;
  static constexpr State State_MAX =
    Instance_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    Instance_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return Instance_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return Instance_State_Name(enum_t_value);
  }
  static inline bool State_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      State* value) {
    return Instance_State_Parse(name, value);
  }

  typedef Instance_Type Type;
  static constexpr Type TYPE_UNSPECIFIED =
    Instance_Type_TYPE_UNSPECIFIED;
  static constexpr Type PRODUCTION =
    Instance_Type_PRODUCTION;
  static constexpr Type DEVELOPMENT =
    Instance_Type_DEVELOPMENT;
  static inline bool Type_IsValid(int value) {
    return Instance_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Instance_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Instance_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Instance_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Instance_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Instance_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return Instance_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 5,
    kNameFieldNumber = 1,
    kDisplayNameFieldNumber = 2,
    kCreateTimeFieldNumber = 7,
    kStateFieldNumber = 3,
    kTypeFieldNumber = 4,
  };
  // map<string, string> labels = 5;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_labels();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_labels();

  // string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string display_name = 2 [(.google.api.field_behavior) = REQUIRED];
  void clear_display_name();
  const std::string& display_name() const;
  void set_display_name(const std::string& value);
  void set_display_name(std::string&& value);
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  std::string* mutable_display_name();
  std::string* release_display_name();
  void set_allocated_display_name(std::string* display_name);
  private:
  const std::string& _internal_display_name() const;
  void _internal_set_display_name(const std::string& value);
  std::string* _internal_mutable_display_name();
  public:

  // .google.protobuf.Timestamp create_time = 7 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_create_time() const;
  private:
  bool _internal_has_create_time() const;
  public:
  void clear_create_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& create_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_create_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_create_time();
  void set_allocated_create_time(PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_create_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_create_time();
  public:
  void unsafe_arena_set_allocated_create_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_create_time();

  // .google.bigtable.admin.v2.Instance.State state = 3;
  void clear_state();
  ::google::bigtable::admin::v2::Instance_State state() const;
  void set_state(::google::bigtable::admin::v2::Instance_State value);
  private:
  ::google::bigtable::admin::v2::Instance_State _internal_state() const;
  void _internal_set_state(::google::bigtable::admin::v2::Instance_State value);
  public:

  // .google.bigtable.admin.v2.Instance.Type type = 4;
  void clear_type();
  ::google::bigtable::admin::v2::Instance_Type type() const;
  void set_type(::google::bigtable::admin::v2::Instance_Type value);
  private:
  ::google::bigtable::admin::v2::Instance_Type _internal_type() const;
  void _internal_set_type(::google::bigtable::admin::v2::Instance_Type value);
  public:

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.v2.Instance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Instance_LabelsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> labels_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
  PROTOBUF_NAMESPACE_ID::Timestamp* create_time_;
  int state_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fbigtable_2fadmin_2fv2_2finstance_2eproto;
};
// -------------------------------------------------------------------

class AutoscalingTargets PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.v2.AutoscalingTargets) */ {
 public:
  inline AutoscalingTargets() : AutoscalingTargets(nullptr) {}
  virtual ~AutoscalingTargets();
  explicit constexpr AutoscalingTargets(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AutoscalingTargets(const AutoscalingTargets& from);
  AutoscalingTargets(AutoscalingTargets&& from) noexcept
    : AutoscalingTargets() {
    *this = ::std::move(from);
  }

  inline AutoscalingTargets& operator=(const AutoscalingTargets& from) {
    CopyFrom(from);
    return *this;
  }
  inline AutoscalingTargets& operator=(AutoscalingTargets&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AutoscalingTargets& default_instance() {
    return *internal_default_instance();
  }
  static inline const AutoscalingTargets* internal_default_instance() {
    return reinterpret_cast<const AutoscalingTargets*>(
               &_AutoscalingTargets_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AutoscalingTargets& a, AutoscalingTargets& b) {
    a.Swap(&b);
  }
  inline void Swap(AutoscalingTargets* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AutoscalingTargets* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AutoscalingTargets* New() const final {
    return CreateMaybeMessage<AutoscalingTargets>(nullptr);
  }

  AutoscalingTargets* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AutoscalingTargets>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AutoscalingTargets& from);
  void MergeFrom(const AutoscalingTargets& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AutoscalingTargets* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.admin.v2.AutoscalingTargets";
  }
  protected:
  explicit AutoscalingTargets(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fbigtable_2fadmin_2fv2_2finstance_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCpuUtilizationPercentFieldNumber = 2,
  };
  // int32 cpu_utilization_percent = 2;
  void clear_cpu_utilization_percent();
  ::PROTOBUF_NAMESPACE_ID::int32 cpu_utilization_percent() const;
  void set_cpu_utilization_percent(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cpu_utilization_percent() const;
  void _internal_set_cpu_utilization_percent(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.v2.AutoscalingTargets)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 cpu_utilization_percent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fbigtable_2fadmin_2fv2_2finstance_2eproto;
};
// -------------------------------------------------------------------

class AutoscalingLimits PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.v2.AutoscalingLimits) */ {
 public:
  inline AutoscalingLimits() : AutoscalingLimits(nullptr) {}
  virtual ~AutoscalingLimits();
  explicit constexpr AutoscalingLimits(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AutoscalingLimits(const AutoscalingLimits& from);
  AutoscalingLimits(AutoscalingLimits&& from) noexcept
    : AutoscalingLimits() {
    *this = ::std::move(from);
  }

  inline AutoscalingLimits& operator=(const AutoscalingLimits& from) {
    CopyFrom(from);
    return *this;
  }
  inline AutoscalingLimits& operator=(AutoscalingLimits&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AutoscalingLimits& default_instance() {
    return *internal_default_instance();
  }
  static inline const AutoscalingLimits* internal_default_instance() {
    return reinterpret_cast<const AutoscalingLimits*>(
               &_AutoscalingLimits_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AutoscalingLimits& a, AutoscalingLimits& b) {
    a.Swap(&b);
  }
  inline void Swap(AutoscalingLimits* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AutoscalingLimits* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AutoscalingLimits* New() const final {
    return CreateMaybeMessage<AutoscalingLimits>(nullptr);
  }

  AutoscalingLimits* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AutoscalingLimits>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AutoscalingLimits& from);
  void MergeFrom(const AutoscalingLimits& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AutoscalingLimits* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.admin.v2.AutoscalingLimits";
  }
  protected:
  explicit AutoscalingLimits(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fbigtable_2fadmin_2fv2_2finstance_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinServeNodesFieldNumber = 1,
    kMaxServeNodesFieldNumber = 2,
  };
  // int32 min_serve_nodes = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_min_serve_nodes();
  ::PROTOBUF_NAMESPACE_ID::int32 min_serve_nodes() const;
  void set_min_serve_nodes(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_min_serve_nodes() const;
  void _internal_set_min_serve_nodes(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 max_serve_nodes = 2 [(.google.api.field_behavior) = REQUIRED];
  void clear_max_serve_nodes();
  ::PROTOBUF_NAMESPACE_ID::int32 max_serve_nodes() const;
  void set_max_serve_nodes(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_serve_nodes() const;
  void _internal_set_max_serve_nodes(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.v2.AutoscalingLimits)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_serve_nodes_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_serve_nodes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fbigtable_2fadmin_2fv2_2finstance_2eproto;
};
// -------------------------------------------------------------------

class Cluster_ClusterAutoscalingConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.v2.Cluster.ClusterAutoscalingConfig) */ {
 public:
  inline Cluster_ClusterAutoscalingConfig() : Cluster_ClusterAutoscalingConfig(nullptr) {}
  virtual ~Cluster_ClusterAutoscalingConfig();
  explicit constexpr Cluster_ClusterAutoscalingConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Cluster_ClusterAutoscalingConfig(const Cluster_ClusterAutoscalingConfig& from);
  Cluster_ClusterAutoscalingConfig(Cluster_ClusterAutoscalingConfig&& from) noexcept
    : Cluster_ClusterAutoscalingConfig() {
    *this = ::std::move(from);
  }

  inline Cluster_ClusterAutoscalingConfig& operator=(const Cluster_ClusterAutoscalingConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cluster_ClusterAutoscalingConfig& operator=(Cluster_ClusterAutoscalingConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cluster_ClusterAutoscalingConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const Cluster_ClusterAutoscalingConfig* internal_default_instance() {
    return reinterpret_cast<const Cluster_ClusterAutoscalingConfig*>(
               &_Cluster_ClusterAutoscalingConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Cluster_ClusterAutoscalingConfig& a, Cluster_ClusterAutoscalingConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(Cluster_ClusterAutoscalingConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cluster_ClusterAutoscalingConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cluster_ClusterAutoscalingConfig* New() const final {
    return CreateMaybeMessage<Cluster_ClusterAutoscalingConfig>(nullptr);
  }

  Cluster_ClusterAutoscalingConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cluster_ClusterAutoscalingConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cluster_ClusterAutoscalingConfig& from);
  void MergeFrom(const Cluster_ClusterAutoscalingConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cluster_ClusterAutoscalingConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.admin.v2.Cluster.ClusterAutoscalingConfig";
  }
  protected:
  explicit Cluster_ClusterAutoscalingConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fbigtable_2fadmin_2fv2_2finstance_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAutoscalingLimitsFieldNumber = 1,
    kAutoscalingTargetsFieldNumber = 2,
  };
  // .google.bigtable.admin.v2.AutoscalingLimits autoscaling_limits = 1 [(.google.api.field_behavior) = REQUIRED];
  bool has_autoscaling_limits() const;
  private:
  bool _internal_has_autoscaling_limits() const;
  public:
  void clear_autoscaling_limits();
  const ::google::bigtable::admin::v2::AutoscalingLimits& autoscaling_limits() const;
  ::google::bigtable::admin::v2::AutoscalingLimits* release_autoscaling_limits();
  ::google::bigtable::admin::v2::AutoscalingLimits* mutable_autoscaling_limits();
  void set_allocated_autoscaling_limits(::google::bigtable::admin::v2::AutoscalingLimits* autoscaling_limits);
  private:
  const ::google::bigtable::admin::v2::AutoscalingLimits& _internal_autoscaling_limits() const;
  ::google::bigtable::admin::v2::AutoscalingLimits* _internal_mutable_autoscaling_limits();
  public:
  void unsafe_arena_set_allocated_autoscaling_limits(
      ::google::bigtable::admin::v2::AutoscalingLimits* autoscaling_limits);
  ::google::bigtable::admin::v2::AutoscalingLimits* unsafe_arena_release_autoscaling_limits();

  // .google.bigtable.admin.v2.AutoscalingTargets autoscaling_targets = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_autoscaling_targets() const;
  private:
  bool _internal_has_autoscaling_targets() const;
  public:
  void clear_autoscaling_targets();
  const ::google::bigtable::admin::v2::AutoscalingTargets& autoscaling_targets() const;
  ::google::bigtable::admin::v2::AutoscalingTargets* release_autoscaling_targets();
  ::google::bigtable::admin::v2::AutoscalingTargets* mutable_autoscaling_targets();
  void set_allocated_autoscaling_targets(::google::bigtable::admin::v2::AutoscalingTargets* autoscaling_targets);
  private:
  const ::google::bigtable::admin::v2::AutoscalingTargets& _internal_autoscaling_targets() const;
  ::google::bigtable::admin::v2::AutoscalingTargets* _internal_mutable_autoscaling_targets();
  public:
  void unsafe_arena_set_allocated_autoscaling_targets(
      ::google::bigtable::admin::v2::AutoscalingTargets* autoscaling_targets);
  ::google::bigtable::admin::v2::AutoscalingTargets* unsafe_arena_release_autoscaling_targets();

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.v2.Cluster.ClusterAutoscalingConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::bigtable::admin::v2::AutoscalingLimits* autoscaling_limits_;
  ::google::bigtable::admin::v2::AutoscalingTargets* autoscaling_targets_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fbigtable_2fadmin_2fv2_2finstance_2eproto;
};
// -------------------------------------------------------------------

class Cluster_ClusterConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.v2.Cluster.ClusterConfig) */ {
 public:
  inline Cluster_ClusterConfig() : Cluster_ClusterConfig(nullptr) {}
  virtual ~Cluster_ClusterConfig();
  explicit constexpr Cluster_ClusterConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Cluster_ClusterConfig(const Cluster_ClusterConfig& from);
  Cluster_ClusterConfig(Cluster_ClusterConfig&& from) noexcept
    : Cluster_ClusterConfig() {
    *this = ::std::move(from);
  }

  inline Cluster_ClusterConfig& operator=(const Cluster_ClusterConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cluster_ClusterConfig& operator=(Cluster_ClusterConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cluster_ClusterConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const Cluster_ClusterConfig* internal_default_instance() {
    return reinterpret_cast<const Cluster_ClusterConfig*>(
               &_Cluster_ClusterConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Cluster_ClusterConfig& a, Cluster_ClusterConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(Cluster_ClusterConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cluster_ClusterConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cluster_ClusterConfig* New() const final {
    return CreateMaybeMessage<Cluster_ClusterConfig>(nullptr);
  }

  Cluster_ClusterConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cluster_ClusterConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cluster_ClusterConfig& from);
  void MergeFrom(const Cluster_ClusterConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cluster_ClusterConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.admin.v2.Cluster.ClusterConfig";
  }
  protected:
  explicit Cluster_ClusterConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fbigtable_2fadmin_2fv2_2finstance_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClusterAutoscalingConfigFieldNumber = 1,
  };
  // .google.bigtable.admin.v2.Cluster.ClusterAutoscalingConfig cluster_autoscaling_config = 1;
  bool has_cluster_autoscaling_config() const;
  private:
  bool _internal_has_cluster_autoscaling_config() const;
  public:
  void clear_cluster_autoscaling_config();
  const ::google::bigtable::admin::v2::Cluster_ClusterAutoscalingConfig& cluster_autoscaling_config() const;
  ::google::bigtable::admin::v2::Cluster_ClusterAutoscalingConfig* release_cluster_autoscaling_config();
  ::google::bigtable::admin::v2::Cluster_ClusterAutoscalingConfig* mutable_cluster_autoscaling_config();
  void set_allocated_cluster_autoscaling_config(::google::bigtable::admin::v2::Cluster_ClusterAutoscalingConfig* cluster_autoscaling_config);
  private:
  const ::google::bigtable::admin::v2::Cluster_ClusterAutoscalingConfig& _internal_cluster_autoscaling_config() const;
  ::google::bigtable::admin::v2::Cluster_ClusterAutoscalingConfig* _internal_mutable_cluster_autoscaling_config();
  public:
  void unsafe_arena_set_allocated_cluster_autoscaling_config(
      ::google::bigtable::admin::v2::Cluster_ClusterAutoscalingConfig* cluster_autoscaling_config);
  ::google::bigtable::admin::v2::Cluster_ClusterAutoscalingConfig* unsafe_arena_release_cluster_autoscaling_config();

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.v2.Cluster.ClusterConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::bigtable::admin::v2::Cluster_ClusterAutoscalingConfig* cluster_autoscaling_config_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fbigtable_2fadmin_2fv2_2finstance_2eproto;
};
// -------------------------------------------------------------------

class Cluster_EncryptionConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.v2.Cluster.EncryptionConfig) */ {
 public:
  inline Cluster_EncryptionConfig() : Cluster_EncryptionConfig(nullptr) {}
  virtual ~Cluster_EncryptionConfig();
  explicit constexpr Cluster_EncryptionConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Cluster_EncryptionConfig(const Cluster_EncryptionConfig& from);
  Cluster_EncryptionConfig(Cluster_EncryptionConfig&& from) noexcept
    : Cluster_EncryptionConfig() {
    *this = ::std::move(from);
  }

  inline Cluster_EncryptionConfig& operator=(const Cluster_EncryptionConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cluster_EncryptionConfig& operator=(Cluster_EncryptionConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cluster_EncryptionConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const Cluster_EncryptionConfig* internal_default_instance() {
    return reinterpret_cast<const Cluster_EncryptionConfig*>(
               &_Cluster_EncryptionConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Cluster_EncryptionConfig& a, Cluster_EncryptionConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(Cluster_EncryptionConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cluster_EncryptionConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cluster_EncryptionConfig* New() const final {
    return CreateMaybeMessage<Cluster_EncryptionConfig>(nullptr);
  }

  Cluster_EncryptionConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cluster_EncryptionConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cluster_EncryptionConfig& from);
  void MergeFrom(const Cluster_EncryptionConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cluster_EncryptionConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.admin.v2.Cluster.EncryptionConfig";
  }
  protected:
  explicit Cluster_EncryptionConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fbigtable_2fadmin_2fv2_2finstance_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKmsKeyNameFieldNumber = 1,
  };
  // string kms_key_name = 1 [(.google.api.resource_reference) = {
  void clear_kms_key_name();
  const std::string& kms_key_name() const;
  void set_kms_key_name(const std::string& value);
  void set_kms_key_name(std::string&& value);
  void set_kms_key_name(const char* value);
  void set_kms_key_name(const char* value, size_t size);
  std::string* mutable_kms_key_name();
  std::string* release_kms_key_name();
  void set_allocated_kms_key_name(std::string* kms_key_name);
  private:
  const std::string& _internal_kms_key_name() const;
  void _internal_set_kms_key_name(const std::string& value);
  std::string* _internal_mutable_kms_key_name();
  public:

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.v2.Cluster.EncryptionConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kms_key_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fbigtable_2fadmin_2fv2_2finstance_2eproto;
};
// -------------------------------------------------------------------

class Cluster PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.v2.Cluster) */ {
 public:
  inline Cluster() : Cluster(nullptr) {}
  virtual ~Cluster();
  explicit constexpr Cluster(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Cluster(const Cluster& from);
  Cluster(Cluster&& from) noexcept
    : Cluster() {
    *this = ::std::move(from);
  }

  inline Cluster& operator=(const Cluster& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cluster& operator=(Cluster&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cluster& default_instance() {
    return *internal_default_instance();
  }
  enum ConfigCase {
    kClusterConfig = 7,
    CONFIG_NOT_SET = 0,
  };

  static inline const Cluster* internal_default_instance() {
    return reinterpret_cast<const Cluster*>(
               &_Cluster_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Cluster& a, Cluster& b) {
    a.Swap(&b);
  }
  inline void Swap(Cluster* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cluster* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cluster* New() const final {
    return CreateMaybeMessage<Cluster>(nullptr);
  }

  Cluster* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cluster>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cluster& from);
  void MergeFrom(const Cluster& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cluster* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.admin.v2.Cluster";
  }
  protected:
  explicit Cluster(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fbigtable_2fadmin_2fv2_2finstance_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef Cluster_ClusterAutoscalingConfig ClusterAutoscalingConfig;
  typedef Cluster_ClusterConfig ClusterConfig;
  typedef Cluster_EncryptionConfig EncryptionConfig;

  typedef Cluster_State State;
  static constexpr State STATE_NOT_KNOWN =
    Cluster_State_STATE_NOT_KNOWN;
  static constexpr State READY =
    Cluster_State_READY;
  static constexpr State CREATING =
    Cluster_State_CREATING;
  static constexpr State RESIZING =
    Cluster_State_RESIZING;
  static constexpr State DISABLED =
    Cluster_State_DISABLED;
  static inline bool State_IsValid(int value) {
    return Cluster_State_IsValid(value);
  }
  static constexpr State State_MIN =
    Cluster_State_State_MIN;
  static constexpr State State_MAX =
    Cluster_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    Cluster_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return Cluster_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return Cluster_State_Name(enum_t_value);
  }
  static inline bool State_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      State* value) {
    return Cluster_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kLocationFieldNumber = 2,
    kEncryptionConfigFieldNumber = 6,
    kStateFieldNumber = 3,
    kServeNodesFieldNumber = 4,
    kDefaultStorageTypeFieldNumber = 5,
    kClusterConfigFieldNumber = 7,
  };
  // string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string location = 2 [(.google.api.resource_reference) = {
  void clear_location();
  const std::string& location() const;
  void set_location(const std::string& value);
  void set_location(std::string&& value);
  void set_location(const char* value);
  void set_location(const char* value, size_t size);
  std::string* mutable_location();
  std::string* release_location();
  void set_allocated_location(std::string* location);
  private:
  const std::string& _internal_location() const;
  void _internal_set_location(const std::string& value);
  std::string* _internal_mutable_location();
  public:

  // .google.bigtable.admin.v2.Cluster.EncryptionConfig encryption_config = 6 [(.google.api.field_behavior) = IMMUTABLE];
  bool has_encryption_config() const;
  private:
  bool _internal_has_encryption_config() const;
  public:
  void clear_encryption_config();
  const ::google::bigtable::admin::v2::Cluster_EncryptionConfig& encryption_config() const;
  ::google::bigtable::admin::v2::Cluster_EncryptionConfig* release_encryption_config();
  ::google::bigtable::admin::v2::Cluster_EncryptionConfig* mutable_encryption_config();
  void set_allocated_encryption_config(::google::bigtable::admin::v2::Cluster_EncryptionConfig* encryption_config);
  private:
  const ::google::bigtable::admin::v2::Cluster_EncryptionConfig& _internal_encryption_config() const;
  ::google::bigtable::admin::v2::Cluster_EncryptionConfig* _internal_mutable_encryption_config();
  public:
  void unsafe_arena_set_allocated_encryption_config(
      ::google::bigtable::admin::v2::Cluster_EncryptionConfig* encryption_config);
  ::google::bigtable::admin::v2::Cluster_EncryptionConfig* unsafe_arena_release_encryption_config();

  // .google.bigtable.admin.v2.Cluster.State state = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_state();
  ::google::bigtable::admin::v2::Cluster_State state() const;
  void set_state(::google::bigtable::admin::v2::Cluster_State value);
  private:
  ::google::bigtable::admin::v2::Cluster_State _internal_state() const;
  void _internal_set_state(::google::bigtable::admin::v2::Cluster_State value);
  public:

  // int32 serve_nodes = 4;
  void clear_serve_nodes();
  ::PROTOBUF_NAMESPACE_ID::int32 serve_nodes() const;
  void set_serve_nodes(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_serve_nodes() const;
  void _internal_set_serve_nodes(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .google.bigtable.admin.v2.StorageType default_storage_type = 5;
  void clear_default_storage_type();
  ::google::bigtable::admin::v2::StorageType default_storage_type() const;
  void set_default_storage_type(::google::bigtable::admin::v2::StorageType value);
  private:
  ::google::bigtable::admin::v2::StorageType _internal_default_storage_type() const;
  void _internal_set_default_storage_type(::google::bigtable::admin::v2::StorageType value);
  public:

  // .google.bigtable.admin.v2.Cluster.ClusterConfig cluster_config = 7;
  bool has_cluster_config() const;
  private:
  bool _internal_has_cluster_config() const;
  public:
  void clear_cluster_config();
  const ::google::bigtable::admin::v2::Cluster_ClusterConfig& cluster_config() const;
  ::google::bigtable::admin::v2::Cluster_ClusterConfig* release_cluster_config();
  ::google::bigtable::admin::v2::Cluster_ClusterConfig* mutable_cluster_config();
  void set_allocated_cluster_config(::google::bigtable::admin::v2::Cluster_ClusterConfig* cluster_config);
  private:
  const ::google::bigtable::admin::v2::Cluster_ClusterConfig& _internal_cluster_config() const;
  ::google::bigtable::admin::v2::Cluster_ClusterConfig* _internal_mutable_cluster_config();
  public:
  void unsafe_arena_set_allocated_cluster_config(
      ::google::bigtable::admin::v2::Cluster_ClusterConfig* cluster_config);
  ::google::bigtable::admin::v2::Cluster_ClusterConfig* unsafe_arena_release_cluster_config();

  void clear_config();
  ConfigCase config_case() const;
  // @@protoc_insertion_point(class_scope:google.bigtable.admin.v2.Cluster)
 private:
  class _Internal;
  void set_has_cluster_config();

  inline bool has_config() const;
  inline void clear_has_config();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr location_;
  ::google::bigtable::admin::v2::Cluster_EncryptionConfig* encryption_config_;
  int state_;
  ::PROTOBUF_NAMESPACE_ID::int32 serve_nodes_;
  int default_storage_type_;
  union ConfigUnion {
    constexpr ConfigUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::google::bigtable::admin::v2::Cluster_ClusterConfig* cluster_config_;
  } config_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_google_2fbigtable_2fadmin_2fv2_2finstance_2eproto;
};
// -------------------------------------------------------------------

class AppProfile_MultiClusterRoutingUseAny PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.v2.AppProfile.MultiClusterRoutingUseAny) */ {
 public:
  inline AppProfile_MultiClusterRoutingUseAny() : AppProfile_MultiClusterRoutingUseAny(nullptr) {}
  virtual ~AppProfile_MultiClusterRoutingUseAny();
  explicit constexpr AppProfile_MultiClusterRoutingUseAny(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AppProfile_MultiClusterRoutingUseAny(const AppProfile_MultiClusterRoutingUseAny& from);
  AppProfile_MultiClusterRoutingUseAny(AppProfile_MultiClusterRoutingUseAny&& from) noexcept
    : AppProfile_MultiClusterRoutingUseAny() {
    *this = ::std::move(from);
  }

  inline AppProfile_MultiClusterRoutingUseAny& operator=(const AppProfile_MultiClusterRoutingUseAny& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppProfile_MultiClusterRoutingUseAny& operator=(AppProfile_MultiClusterRoutingUseAny&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppProfile_MultiClusterRoutingUseAny& default_instance() {
    return *internal_default_instance();
  }
  static inline const AppProfile_MultiClusterRoutingUseAny* internal_default_instance() {
    return reinterpret_cast<const AppProfile_MultiClusterRoutingUseAny*>(
               &_AppProfile_MultiClusterRoutingUseAny_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(AppProfile_MultiClusterRoutingUseAny& a, AppProfile_MultiClusterRoutingUseAny& b) {
    a.Swap(&b);
  }
  inline void Swap(AppProfile_MultiClusterRoutingUseAny* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppProfile_MultiClusterRoutingUseAny* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppProfile_MultiClusterRoutingUseAny* New() const final {
    return CreateMaybeMessage<AppProfile_MultiClusterRoutingUseAny>(nullptr);
  }

  AppProfile_MultiClusterRoutingUseAny* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppProfile_MultiClusterRoutingUseAny>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppProfile_MultiClusterRoutingUseAny& from);
  void MergeFrom(const AppProfile_MultiClusterRoutingUseAny& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppProfile_MultiClusterRoutingUseAny* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.admin.v2.AppProfile.MultiClusterRoutingUseAny";
  }
  protected:
  explicit AppProfile_MultiClusterRoutingUseAny(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fbigtable_2fadmin_2fv2_2finstance_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClusterIdsFieldNumber = 1,
  };
  // repeated string cluster_ids = 1;
  int cluster_ids_size() const;
  private:
  int _internal_cluster_ids_size() const;
  public:
  void clear_cluster_ids();
  const std::string& cluster_ids(int index) const;
  std::string* mutable_cluster_ids(int index);
  void set_cluster_ids(int index, const std::string& value);
  void set_cluster_ids(int index, std::string&& value);
  void set_cluster_ids(int index, const char* value);
  void set_cluster_ids(int index, const char* value, size_t size);
  std::string* add_cluster_ids();
  void add_cluster_ids(const std::string& value);
  void add_cluster_ids(std::string&& value);
  void add_cluster_ids(const char* value);
  void add_cluster_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& cluster_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_cluster_ids();
  private:
  const std::string& _internal_cluster_ids(int index) const;
  std::string* _internal_add_cluster_ids();
  public:

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.v2.AppProfile.MultiClusterRoutingUseAny)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> cluster_ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fbigtable_2fadmin_2fv2_2finstance_2eproto;
};
// -------------------------------------------------------------------

class AppProfile_SingleClusterRouting PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.v2.AppProfile.SingleClusterRouting) */ {
 public:
  inline AppProfile_SingleClusterRouting() : AppProfile_SingleClusterRouting(nullptr) {}
  virtual ~AppProfile_SingleClusterRouting();
  explicit constexpr AppProfile_SingleClusterRouting(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AppProfile_SingleClusterRouting(const AppProfile_SingleClusterRouting& from);
  AppProfile_SingleClusterRouting(AppProfile_SingleClusterRouting&& from) noexcept
    : AppProfile_SingleClusterRouting() {
    *this = ::std::move(from);
  }

  inline AppProfile_SingleClusterRouting& operator=(const AppProfile_SingleClusterRouting& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppProfile_SingleClusterRouting& operator=(AppProfile_SingleClusterRouting&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppProfile_SingleClusterRouting& default_instance() {
    return *internal_default_instance();
  }
  static inline const AppProfile_SingleClusterRouting* internal_default_instance() {
    return reinterpret_cast<const AppProfile_SingleClusterRouting*>(
               &_AppProfile_SingleClusterRouting_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(AppProfile_SingleClusterRouting& a, AppProfile_SingleClusterRouting& b) {
    a.Swap(&b);
  }
  inline void Swap(AppProfile_SingleClusterRouting* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppProfile_SingleClusterRouting* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppProfile_SingleClusterRouting* New() const final {
    return CreateMaybeMessage<AppProfile_SingleClusterRouting>(nullptr);
  }

  AppProfile_SingleClusterRouting* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppProfile_SingleClusterRouting>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppProfile_SingleClusterRouting& from);
  void MergeFrom(const AppProfile_SingleClusterRouting& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppProfile_SingleClusterRouting* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.admin.v2.AppProfile.SingleClusterRouting";
  }
  protected:
  explicit AppProfile_SingleClusterRouting(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fbigtable_2fadmin_2fv2_2finstance_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClusterIdFieldNumber = 1,
    kAllowTransactionalWritesFieldNumber = 2,
  };
  // string cluster_id = 1;
  void clear_cluster_id();
  const std::string& cluster_id() const;
  void set_cluster_id(const std::string& value);
  void set_cluster_id(std::string&& value);
  void set_cluster_id(const char* value);
  void set_cluster_id(const char* value, size_t size);
  std::string* mutable_cluster_id();
  std::string* release_cluster_id();
  void set_allocated_cluster_id(std::string* cluster_id);
  private:
  const std::string& _internal_cluster_id() const;
  void _internal_set_cluster_id(const std::string& value);
  std::string* _internal_mutable_cluster_id();
  public:

  // bool allow_transactional_writes = 2;
  void clear_allow_transactional_writes();
  bool allow_transactional_writes() const;
  void set_allow_transactional_writes(bool value);
  private:
  bool _internal_allow_transactional_writes() const;
  void _internal_set_allow_transactional_writes(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.v2.AppProfile.SingleClusterRouting)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cluster_id_;
  bool allow_transactional_writes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fbigtable_2fadmin_2fv2_2finstance_2eproto;
};
// -------------------------------------------------------------------

class AppProfile PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.v2.AppProfile) */ {
 public:
  inline AppProfile() : AppProfile(nullptr) {}
  virtual ~AppProfile();
  explicit constexpr AppProfile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AppProfile(const AppProfile& from);
  AppProfile(AppProfile&& from) noexcept
    : AppProfile() {
    *this = ::std::move(from);
  }

  inline AppProfile& operator=(const AppProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppProfile& operator=(AppProfile&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppProfile& default_instance() {
    return *internal_default_instance();
  }
  enum RoutingPolicyCase {
    kMultiClusterRoutingUseAny = 5,
    kSingleClusterRouting = 6,
    ROUTING_POLICY_NOT_SET = 0,
  };

  static inline const AppProfile* internal_default_instance() {
    return reinterpret_cast<const AppProfile*>(
               &_AppProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(AppProfile& a, AppProfile& b) {
    a.Swap(&b);
  }
  inline void Swap(AppProfile* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppProfile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppProfile* New() const final {
    return CreateMaybeMessage<AppProfile>(nullptr);
  }

  AppProfile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppProfile>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppProfile& from);
  void MergeFrom(const AppProfile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppProfile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.bigtable.admin.v2.AppProfile";
  }
  protected:
  explicit AppProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fbigtable_2fadmin_2fv2_2finstance_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef AppProfile_MultiClusterRoutingUseAny MultiClusterRoutingUseAny;
  typedef AppProfile_SingleClusterRouting SingleClusterRouting;

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kEtagFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kMultiClusterRoutingUseAnyFieldNumber = 5,
    kSingleClusterRoutingFieldNumber = 6,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string etag = 2;
  void clear_etag();
  const std::string& etag() const;
  void set_etag(const std::string& value);
  void set_etag(std::string&& value);
  void set_etag(const char* value);
  void set_etag(const char* value, size_t size);
  std::string* mutable_etag();
  std::string* release_etag();
  void set_allocated_etag(std::string* etag);
  private:
  const std::string& _internal_etag() const;
  void _internal_set_etag(const std::string& value);
  std::string* _internal_mutable_etag();
  public:

  // string description = 3;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // .google.bigtable.admin.v2.AppProfile.MultiClusterRoutingUseAny multi_cluster_routing_use_any = 5;
  bool has_multi_cluster_routing_use_any() const;
  private:
  bool _internal_has_multi_cluster_routing_use_any() const;
  public:
  void clear_multi_cluster_routing_use_any();
  const ::google::bigtable::admin::v2::AppProfile_MultiClusterRoutingUseAny& multi_cluster_routing_use_any() const;
  ::google::bigtable::admin::v2::AppProfile_MultiClusterRoutingUseAny* release_multi_cluster_routing_use_any();
  ::google::bigtable::admin::v2::AppProfile_MultiClusterRoutingUseAny* mutable_multi_cluster_routing_use_any();
  void set_allocated_multi_cluster_routing_use_any(::google::bigtable::admin::v2::AppProfile_MultiClusterRoutingUseAny* multi_cluster_routing_use_any);
  private:
  const ::google::bigtable::admin::v2::AppProfile_MultiClusterRoutingUseAny& _internal_multi_cluster_routing_use_any() const;
  ::google::bigtable::admin::v2::AppProfile_MultiClusterRoutingUseAny* _internal_mutable_multi_cluster_routing_use_any();
  public:
  void unsafe_arena_set_allocated_multi_cluster_routing_use_any(
      ::google::bigtable::admin::v2::AppProfile_MultiClusterRoutingUseAny* multi_cluster_routing_use_any);
  ::google::bigtable::admin::v2::AppProfile_MultiClusterRoutingUseAny* unsafe_arena_release_multi_cluster_routing_use_any();

  // .google.bigtable.admin.v2.AppProfile.SingleClusterRouting single_cluster_routing = 6;
  bool has_single_cluster_routing() const;
  private:
  bool _internal_has_single_cluster_routing() const;
  public:
  void clear_single_cluster_routing();
  const ::google::bigtable::admin::v2::AppProfile_SingleClusterRouting& single_cluster_routing() const;
  ::google::bigtable::admin::v2::AppProfile_SingleClusterRouting* release_single_cluster_routing();
  ::google::bigtable::admin::v2::AppProfile_SingleClusterRouting* mutable_single_cluster_routing();
  void set_allocated_single_cluster_routing(::google::bigtable::admin::v2::AppProfile_SingleClusterRouting* single_cluster_routing);
  private:
  const ::google::bigtable::admin::v2::AppProfile_SingleClusterRouting& _internal_single_cluster_routing() const;
  ::google::bigtable::admin::v2::AppProfile_SingleClusterRouting* _internal_mutable_single_cluster_routing();
  public:
  void unsafe_arena_set_allocated_single_cluster_routing(
      ::google::bigtable::admin::v2::AppProfile_SingleClusterRouting* single_cluster_routing);
  ::google::bigtable::admin::v2::AppProfile_SingleClusterRouting* unsafe_arena_release_single_cluster_routing();

  void clear_routing_policy();
  RoutingPolicyCase routing_policy_case() const;
  // @@protoc_insertion_point(class_scope:google.bigtable.admin.v2.AppProfile)
 private:
  class _Internal;
  void set_has_multi_cluster_routing_use_any();
  void set_has_single_cluster_routing();

  inline bool has_routing_policy() const;
  inline void clear_has_routing_policy();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr etag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  union RoutingPolicyUnion {
    constexpr RoutingPolicyUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::google::bigtable::admin::v2::AppProfile_MultiClusterRoutingUseAny* multi_cluster_routing_use_any_;
    ::google::bigtable::admin::v2::AppProfile_SingleClusterRouting* single_cluster_routing_;
  } routing_policy_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_google_2fbigtable_2fadmin_2fv2_2finstance_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Instance

// string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void Instance::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Instance::name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.Instance.name)
  return _internal_name();
}
inline void Instance::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.Instance.name)
}
inline std::string* Instance::mutable_name() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.Instance.name)
  return _internal_mutable_name();
}
inline const std::string& Instance::_internal_name() const {
  return name_.Get();
}
inline void Instance::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Instance::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.admin.v2.Instance.name)
}
inline void Instance::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.v2.Instance.name)
}
inline void Instance::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.v2.Instance.name)
}
inline std::string* Instance::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Instance::release_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.Instance.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Instance::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.Instance.name)
}

// string display_name = 2 [(.google.api.field_behavior) = REQUIRED];
inline void Instance::clear_display_name() {
  display_name_.ClearToEmpty();
}
inline const std::string& Instance::display_name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.Instance.display_name)
  return _internal_display_name();
}
inline void Instance::set_display_name(const std::string& value) {
  _internal_set_display_name(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.Instance.display_name)
}
inline std::string* Instance::mutable_display_name() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.Instance.display_name)
  return _internal_mutable_display_name();
}
inline const std::string& Instance::_internal_display_name() const {
  return display_name_.Get();
}
inline void Instance::_internal_set_display_name(const std::string& value) {
  
  display_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Instance::set_display_name(std::string&& value) {
  
  display_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.admin.v2.Instance.display_name)
}
inline void Instance::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  display_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.v2.Instance.display_name)
}
inline void Instance::set_display_name(const char* value,
    size_t size) {
  
  display_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.v2.Instance.display_name)
}
inline std::string* Instance::_internal_mutable_display_name() {
  
  return display_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Instance::release_display_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.Instance.display_name)
  return display_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Instance::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    
  } else {
    
  }
  display_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), display_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.Instance.display_name)
}

// .google.bigtable.admin.v2.Instance.State state = 3;
inline void Instance::clear_state() {
  state_ = 0;
}
inline ::google::bigtable::admin::v2::Instance_State Instance::_internal_state() const {
  return static_cast< ::google::bigtable::admin::v2::Instance_State >(state_);
}
inline ::google::bigtable::admin::v2::Instance_State Instance::state() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.Instance.state)
  return _internal_state();
}
inline void Instance::_internal_set_state(::google::bigtable::admin::v2::Instance_State value) {
  
  state_ = value;
}
inline void Instance::set_state(::google::bigtable::admin::v2::Instance_State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.Instance.state)
}

// .google.bigtable.admin.v2.Instance.Type type = 4;
inline void Instance::clear_type() {
  type_ = 0;
}
inline ::google::bigtable::admin::v2::Instance_Type Instance::_internal_type() const {
  return static_cast< ::google::bigtable::admin::v2::Instance_Type >(type_);
}
inline ::google::bigtable::admin::v2::Instance_Type Instance::type() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.Instance.type)
  return _internal_type();
}
inline void Instance::_internal_set_type(::google::bigtable::admin::v2::Instance_Type value) {
  
  type_ = value;
}
inline void Instance::set_type(::google::bigtable::admin::v2::Instance_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.Instance.type)
}

// map<string, string> labels = 5;
inline int Instance::_internal_labels_size() const {
  return labels_.size();
}
inline int Instance::labels_size() const {
  return _internal_labels_size();
}
inline void Instance::clear_labels() {
  labels_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Instance::_internal_labels() const {
  return labels_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Instance::labels() const {
  // @@protoc_insertion_point(field_map:google.bigtable.admin.v2.Instance.labels)
  return _internal_labels();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Instance::_internal_mutable_labels() {
  return labels_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Instance::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:google.bigtable.admin.v2.Instance.labels)
  return _internal_mutable_labels();
}

// .google.protobuf.Timestamp create_time = 7 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool Instance::_internal_has_create_time() const {
  return this != internal_default_instance() && create_time_ != nullptr;
}
inline bool Instance::has_create_time() const {
  return _internal_has_create_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Instance::_internal_create_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = create_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Instance::create_time() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.Instance.create_time)
  return _internal_create_time();
}
inline void Instance::unsafe_arena_set_allocated_create_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time_);
  }
  create_time_ = create_time;
  if (create_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.admin.v2.Instance.create_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Instance::release_create_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = create_time_;
  create_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Instance::unsafe_arena_release_create_time() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.Instance.create_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = create_time_;
  create_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Instance::_internal_mutable_create_time() {
  
  if (create_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    create_time_ = p;
  }
  return create_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Instance::mutable_create_time() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.Instance.create_time)
  return _internal_mutable_create_time();
}
inline void Instance::set_allocated_create_time(PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time_);
  }
  if (create_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time)->GetArena();
    if (message_arena != submessage_arena) {
      create_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.Instance.create_time)
}

// -------------------------------------------------------------------

// AutoscalingTargets

// int32 cpu_utilization_percent = 2;
inline void AutoscalingTargets::clear_cpu_utilization_percent() {
  cpu_utilization_percent_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AutoscalingTargets::_internal_cpu_utilization_percent() const {
  return cpu_utilization_percent_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AutoscalingTargets::cpu_utilization_percent() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.AutoscalingTargets.cpu_utilization_percent)
  return _internal_cpu_utilization_percent();
}
inline void AutoscalingTargets::_internal_set_cpu_utilization_percent(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cpu_utilization_percent_ = value;
}
inline void AutoscalingTargets::set_cpu_utilization_percent(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cpu_utilization_percent(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.AutoscalingTargets.cpu_utilization_percent)
}

// -------------------------------------------------------------------

// AutoscalingLimits

// int32 min_serve_nodes = 1 [(.google.api.field_behavior) = REQUIRED];
inline void AutoscalingLimits::clear_min_serve_nodes() {
  min_serve_nodes_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AutoscalingLimits::_internal_min_serve_nodes() const {
  return min_serve_nodes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AutoscalingLimits::min_serve_nodes() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.AutoscalingLimits.min_serve_nodes)
  return _internal_min_serve_nodes();
}
inline void AutoscalingLimits::_internal_set_min_serve_nodes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  min_serve_nodes_ = value;
}
inline void AutoscalingLimits::set_min_serve_nodes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_min_serve_nodes(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.AutoscalingLimits.min_serve_nodes)
}

// int32 max_serve_nodes = 2 [(.google.api.field_behavior) = REQUIRED];
inline void AutoscalingLimits::clear_max_serve_nodes() {
  max_serve_nodes_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AutoscalingLimits::_internal_max_serve_nodes() const {
  return max_serve_nodes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AutoscalingLimits::max_serve_nodes() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.AutoscalingLimits.max_serve_nodes)
  return _internal_max_serve_nodes();
}
inline void AutoscalingLimits::_internal_set_max_serve_nodes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_serve_nodes_ = value;
}
inline void AutoscalingLimits::set_max_serve_nodes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_serve_nodes(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.AutoscalingLimits.max_serve_nodes)
}

// -------------------------------------------------------------------

// Cluster_ClusterAutoscalingConfig

// .google.bigtable.admin.v2.AutoscalingLimits autoscaling_limits = 1 [(.google.api.field_behavior) = REQUIRED];
inline bool Cluster_ClusterAutoscalingConfig::_internal_has_autoscaling_limits() const {
  return this != internal_default_instance() && autoscaling_limits_ != nullptr;
}
inline bool Cluster_ClusterAutoscalingConfig::has_autoscaling_limits() const {
  return _internal_has_autoscaling_limits();
}
inline void Cluster_ClusterAutoscalingConfig::clear_autoscaling_limits() {
  if (GetArena() == nullptr && autoscaling_limits_ != nullptr) {
    delete autoscaling_limits_;
  }
  autoscaling_limits_ = nullptr;
}
inline const ::google::bigtable::admin::v2::AutoscalingLimits& Cluster_ClusterAutoscalingConfig::_internal_autoscaling_limits() const {
  const ::google::bigtable::admin::v2::AutoscalingLimits* p = autoscaling_limits_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::bigtable::admin::v2::AutoscalingLimits&>(
      ::google::bigtable::admin::v2::_AutoscalingLimits_default_instance_);
}
inline const ::google::bigtable::admin::v2::AutoscalingLimits& Cluster_ClusterAutoscalingConfig::autoscaling_limits() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.Cluster.ClusterAutoscalingConfig.autoscaling_limits)
  return _internal_autoscaling_limits();
}
inline void Cluster_ClusterAutoscalingConfig::unsafe_arena_set_allocated_autoscaling_limits(
    ::google::bigtable::admin::v2::AutoscalingLimits* autoscaling_limits) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(autoscaling_limits_);
  }
  autoscaling_limits_ = autoscaling_limits;
  if (autoscaling_limits) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.admin.v2.Cluster.ClusterAutoscalingConfig.autoscaling_limits)
}
inline ::google::bigtable::admin::v2::AutoscalingLimits* Cluster_ClusterAutoscalingConfig::release_autoscaling_limits() {
  
  ::google::bigtable::admin::v2::AutoscalingLimits* temp = autoscaling_limits_;
  autoscaling_limits_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::bigtable::admin::v2::AutoscalingLimits* Cluster_ClusterAutoscalingConfig::unsafe_arena_release_autoscaling_limits() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.Cluster.ClusterAutoscalingConfig.autoscaling_limits)
  
  ::google::bigtable::admin::v2::AutoscalingLimits* temp = autoscaling_limits_;
  autoscaling_limits_ = nullptr;
  return temp;
}
inline ::google::bigtable::admin::v2::AutoscalingLimits* Cluster_ClusterAutoscalingConfig::_internal_mutable_autoscaling_limits() {
  
  if (autoscaling_limits_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::bigtable::admin::v2::AutoscalingLimits>(GetArena());
    autoscaling_limits_ = p;
  }
  return autoscaling_limits_;
}
inline ::google::bigtable::admin::v2::AutoscalingLimits* Cluster_ClusterAutoscalingConfig::mutable_autoscaling_limits() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.Cluster.ClusterAutoscalingConfig.autoscaling_limits)
  return _internal_mutable_autoscaling_limits();
}
inline void Cluster_ClusterAutoscalingConfig::set_allocated_autoscaling_limits(::google::bigtable::admin::v2::AutoscalingLimits* autoscaling_limits) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete autoscaling_limits_;
  }
  if (autoscaling_limits) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(autoscaling_limits);
    if (message_arena != submessage_arena) {
      autoscaling_limits = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, autoscaling_limits, submessage_arena);
    }
    
  } else {
    
  }
  autoscaling_limits_ = autoscaling_limits;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.Cluster.ClusterAutoscalingConfig.autoscaling_limits)
}

// .google.bigtable.admin.v2.AutoscalingTargets autoscaling_targets = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool Cluster_ClusterAutoscalingConfig::_internal_has_autoscaling_targets() const {
  return this != internal_default_instance() && autoscaling_targets_ != nullptr;
}
inline bool Cluster_ClusterAutoscalingConfig::has_autoscaling_targets() const {
  return _internal_has_autoscaling_targets();
}
inline void Cluster_ClusterAutoscalingConfig::clear_autoscaling_targets() {
  if (GetArena() == nullptr && autoscaling_targets_ != nullptr) {
    delete autoscaling_targets_;
  }
  autoscaling_targets_ = nullptr;
}
inline const ::google::bigtable::admin::v2::AutoscalingTargets& Cluster_ClusterAutoscalingConfig::_internal_autoscaling_targets() const {
  const ::google::bigtable::admin::v2::AutoscalingTargets* p = autoscaling_targets_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::bigtable::admin::v2::AutoscalingTargets&>(
      ::google::bigtable::admin::v2::_AutoscalingTargets_default_instance_);
}
inline const ::google::bigtable::admin::v2::AutoscalingTargets& Cluster_ClusterAutoscalingConfig::autoscaling_targets() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.Cluster.ClusterAutoscalingConfig.autoscaling_targets)
  return _internal_autoscaling_targets();
}
inline void Cluster_ClusterAutoscalingConfig::unsafe_arena_set_allocated_autoscaling_targets(
    ::google::bigtable::admin::v2::AutoscalingTargets* autoscaling_targets) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(autoscaling_targets_);
  }
  autoscaling_targets_ = autoscaling_targets;
  if (autoscaling_targets) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.admin.v2.Cluster.ClusterAutoscalingConfig.autoscaling_targets)
}
inline ::google::bigtable::admin::v2::AutoscalingTargets* Cluster_ClusterAutoscalingConfig::release_autoscaling_targets() {
  
  ::google::bigtable::admin::v2::AutoscalingTargets* temp = autoscaling_targets_;
  autoscaling_targets_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::bigtable::admin::v2::AutoscalingTargets* Cluster_ClusterAutoscalingConfig::unsafe_arena_release_autoscaling_targets() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.Cluster.ClusterAutoscalingConfig.autoscaling_targets)
  
  ::google::bigtable::admin::v2::AutoscalingTargets* temp = autoscaling_targets_;
  autoscaling_targets_ = nullptr;
  return temp;
}
inline ::google::bigtable::admin::v2::AutoscalingTargets* Cluster_ClusterAutoscalingConfig::_internal_mutable_autoscaling_targets() {
  
  if (autoscaling_targets_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::bigtable::admin::v2::AutoscalingTargets>(GetArena());
    autoscaling_targets_ = p;
  }
  return autoscaling_targets_;
}
inline ::google::bigtable::admin::v2::AutoscalingTargets* Cluster_ClusterAutoscalingConfig::mutable_autoscaling_targets() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.Cluster.ClusterAutoscalingConfig.autoscaling_targets)
  return _internal_mutable_autoscaling_targets();
}
inline void Cluster_ClusterAutoscalingConfig::set_allocated_autoscaling_targets(::google::bigtable::admin::v2::AutoscalingTargets* autoscaling_targets) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete autoscaling_targets_;
  }
  if (autoscaling_targets) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(autoscaling_targets);
    if (message_arena != submessage_arena) {
      autoscaling_targets = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, autoscaling_targets, submessage_arena);
    }
    
  } else {
    
  }
  autoscaling_targets_ = autoscaling_targets;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.Cluster.ClusterAutoscalingConfig.autoscaling_targets)
}

// -------------------------------------------------------------------

// Cluster_ClusterConfig

// .google.bigtable.admin.v2.Cluster.ClusterAutoscalingConfig cluster_autoscaling_config = 1;
inline bool Cluster_ClusterConfig::_internal_has_cluster_autoscaling_config() const {
  return this != internal_default_instance() && cluster_autoscaling_config_ != nullptr;
}
inline bool Cluster_ClusterConfig::has_cluster_autoscaling_config() const {
  return _internal_has_cluster_autoscaling_config();
}
inline void Cluster_ClusterConfig::clear_cluster_autoscaling_config() {
  if (GetArena() == nullptr && cluster_autoscaling_config_ != nullptr) {
    delete cluster_autoscaling_config_;
  }
  cluster_autoscaling_config_ = nullptr;
}
inline const ::google::bigtable::admin::v2::Cluster_ClusterAutoscalingConfig& Cluster_ClusterConfig::_internal_cluster_autoscaling_config() const {
  const ::google::bigtable::admin::v2::Cluster_ClusterAutoscalingConfig* p = cluster_autoscaling_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::bigtable::admin::v2::Cluster_ClusterAutoscalingConfig&>(
      ::google::bigtable::admin::v2::_Cluster_ClusterAutoscalingConfig_default_instance_);
}
inline const ::google::bigtable::admin::v2::Cluster_ClusterAutoscalingConfig& Cluster_ClusterConfig::cluster_autoscaling_config() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.Cluster.ClusterConfig.cluster_autoscaling_config)
  return _internal_cluster_autoscaling_config();
}
inline void Cluster_ClusterConfig::unsafe_arena_set_allocated_cluster_autoscaling_config(
    ::google::bigtable::admin::v2::Cluster_ClusterAutoscalingConfig* cluster_autoscaling_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cluster_autoscaling_config_);
  }
  cluster_autoscaling_config_ = cluster_autoscaling_config;
  if (cluster_autoscaling_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.admin.v2.Cluster.ClusterConfig.cluster_autoscaling_config)
}
inline ::google::bigtable::admin::v2::Cluster_ClusterAutoscalingConfig* Cluster_ClusterConfig::release_cluster_autoscaling_config() {
  
  ::google::bigtable::admin::v2::Cluster_ClusterAutoscalingConfig* temp = cluster_autoscaling_config_;
  cluster_autoscaling_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::bigtable::admin::v2::Cluster_ClusterAutoscalingConfig* Cluster_ClusterConfig::unsafe_arena_release_cluster_autoscaling_config() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.Cluster.ClusterConfig.cluster_autoscaling_config)
  
  ::google::bigtable::admin::v2::Cluster_ClusterAutoscalingConfig* temp = cluster_autoscaling_config_;
  cluster_autoscaling_config_ = nullptr;
  return temp;
}
inline ::google::bigtable::admin::v2::Cluster_ClusterAutoscalingConfig* Cluster_ClusterConfig::_internal_mutable_cluster_autoscaling_config() {
  
  if (cluster_autoscaling_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::bigtable::admin::v2::Cluster_ClusterAutoscalingConfig>(GetArena());
    cluster_autoscaling_config_ = p;
  }
  return cluster_autoscaling_config_;
}
inline ::google::bigtable::admin::v2::Cluster_ClusterAutoscalingConfig* Cluster_ClusterConfig::mutable_cluster_autoscaling_config() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.Cluster.ClusterConfig.cluster_autoscaling_config)
  return _internal_mutable_cluster_autoscaling_config();
}
inline void Cluster_ClusterConfig::set_allocated_cluster_autoscaling_config(::google::bigtable::admin::v2::Cluster_ClusterAutoscalingConfig* cluster_autoscaling_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cluster_autoscaling_config_;
  }
  if (cluster_autoscaling_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cluster_autoscaling_config);
    if (message_arena != submessage_arena) {
      cluster_autoscaling_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cluster_autoscaling_config, submessage_arena);
    }
    
  } else {
    
  }
  cluster_autoscaling_config_ = cluster_autoscaling_config;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.Cluster.ClusterConfig.cluster_autoscaling_config)
}

// -------------------------------------------------------------------

// Cluster_EncryptionConfig

// string kms_key_name = 1 [(.google.api.resource_reference) = {
inline void Cluster_EncryptionConfig::clear_kms_key_name() {
  kms_key_name_.ClearToEmpty();
}
inline const std::string& Cluster_EncryptionConfig::kms_key_name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.Cluster.EncryptionConfig.kms_key_name)
  return _internal_kms_key_name();
}
inline void Cluster_EncryptionConfig::set_kms_key_name(const std::string& value) {
  _internal_set_kms_key_name(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.Cluster.EncryptionConfig.kms_key_name)
}
inline std::string* Cluster_EncryptionConfig::mutable_kms_key_name() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.Cluster.EncryptionConfig.kms_key_name)
  return _internal_mutable_kms_key_name();
}
inline const std::string& Cluster_EncryptionConfig::_internal_kms_key_name() const {
  return kms_key_name_.Get();
}
inline void Cluster_EncryptionConfig::_internal_set_kms_key_name(const std::string& value) {
  
  kms_key_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cluster_EncryptionConfig::set_kms_key_name(std::string&& value) {
  
  kms_key_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.admin.v2.Cluster.EncryptionConfig.kms_key_name)
}
inline void Cluster_EncryptionConfig::set_kms_key_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  kms_key_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.v2.Cluster.EncryptionConfig.kms_key_name)
}
inline void Cluster_EncryptionConfig::set_kms_key_name(const char* value,
    size_t size) {
  
  kms_key_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.v2.Cluster.EncryptionConfig.kms_key_name)
}
inline std::string* Cluster_EncryptionConfig::_internal_mutable_kms_key_name() {
  
  return kms_key_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cluster_EncryptionConfig::release_kms_key_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.Cluster.EncryptionConfig.kms_key_name)
  return kms_key_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cluster_EncryptionConfig::set_allocated_kms_key_name(std::string* kms_key_name) {
  if (kms_key_name != nullptr) {
    
  } else {
    
  }
  kms_key_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), kms_key_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.Cluster.EncryptionConfig.kms_key_name)
}

// -------------------------------------------------------------------

// Cluster

// string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void Cluster::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Cluster::name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.Cluster.name)
  return _internal_name();
}
inline void Cluster::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.Cluster.name)
}
inline std::string* Cluster::mutable_name() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.Cluster.name)
  return _internal_mutable_name();
}
inline const std::string& Cluster::_internal_name() const {
  return name_.Get();
}
inline void Cluster::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cluster::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.admin.v2.Cluster.name)
}
inline void Cluster::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.v2.Cluster.name)
}
inline void Cluster::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.v2.Cluster.name)
}
inline std::string* Cluster::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cluster::release_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.Cluster.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cluster::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.Cluster.name)
}

// string location = 2 [(.google.api.resource_reference) = {
inline void Cluster::clear_location() {
  location_.ClearToEmpty();
}
inline const std::string& Cluster::location() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.Cluster.location)
  return _internal_location();
}
inline void Cluster::set_location(const std::string& value) {
  _internal_set_location(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.Cluster.location)
}
inline std::string* Cluster::mutable_location() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.Cluster.location)
  return _internal_mutable_location();
}
inline const std::string& Cluster::_internal_location() const {
  return location_.Get();
}
inline void Cluster::_internal_set_location(const std::string& value) {
  
  location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cluster::set_location(std::string&& value) {
  
  location_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.admin.v2.Cluster.location)
}
inline void Cluster::set_location(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.v2.Cluster.location)
}
inline void Cluster::set_location(const char* value,
    size_t size) {
  
  location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.v2.Cluster.location)
}
inline std::string* Cluster::_internal_mutable_location() {
  
  return location_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cluster::release_location() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.Cluster.location)
  return location_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cluster::set_allocated_location(std::string* location) {
  if (location != nullptr) {
    
  } else {
    
  }
  location_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), location,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.Cluster.location)
}

// .google.bigtable.admin.v2.Cluster.State state = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void Cluster::clear_state() {
  state_ = 0;
}
inline ::google::bigtable::admin::v2::Cluster_State Cluster::_internal_state() const {
  return static_cast< ::google::bigtable::admin::v2::Cluster_State >(state_);
}
inline ::google::bigtable::admin::v2::Cluster_State Cluster::state() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.Cluster.state)
  return _internal_state();
}
inline void Cluster::_internal_set_state(::google::bigtable::admin::v2::Cluster_State value) {
  
  state_ = value;
}
inline void Cluster::set_state(::google::bigtable::admin::v2::Cluster_State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.Cluster.state)
}

// int32 serve_nodes = 4;
inline void Cluster::clear_serve_nodes() {
  serve_nodes_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Cluster::_internal_serve_nodes() const {
  return serve_nodes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Cluster::serve_nodes() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.Cluster.serve_nodes)
  return _internal_serve_nodes();
}
inline void Cluster::_internal_set_serve_nodes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  serve_nodes_ = value;
}
inline void Cluster::set_serve_nodes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_serve_nodes(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.Cluster.serve_nodes)
}

// .google.bigtable.admin.v2.Cluster.ClusterConfig cluster_config = 7;
inline bool Cluster::_internal_has_cluster_config() const {
  return config_case() == kClusterConfig;
}
inline bool Cluster::has_cluster_config() const {
  return _internal_has_cluster_config();
}
inline void Cluster::set_has_cluster_config() {
  _oneof_case_[0] = kClusterConfig;
}
inline void Cluster::clear_cluster_config() {
  if (_internal_has_cluster_config()) {
    if (GetArena() == nullptr) {
      delete config_.cluster_config_;
    }
    clear_has_config();
  }
}
inline ::google::bigtable::admin::v2::Cluster_ClusterConfig* Cluster::release_cluster_config() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.Cluster.cluster_config)
  if (_internal_has_cluster_config()) {
    clear_has_config();
      ::google::bigtable::admin::v2::Cluster_ClusterConfig* temp = config_.cluster_config_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    config_.cluster_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::bigtable::admin::v2::Cluster_ClusterConfig& Cluster::_internal_cluster_config() const {
  return _internal_has_cluster_config()
      ? *config_.cluster_config_
      : reinterpret_cast< ::google::bigtable::admin::v2::Cluster_ClusterConfig&>(::google::bigtable::admin::v2::_Cluster_ClusterConfig_default_instance_);
}
inline const ::google::bigtable::admin::v2::Cluster_ClusterConfig& Cluster::cluster_config() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.Cluster.cluster_config)
  return _internal_cluster_config();
}
inline ::google::bigtable::admin::v2::Cluster_ClusterConfig* Cluster::unsafe_arena_release_cluster_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.bigtable.admin.v2.Cluster.cluster_config)
  if (_internal_has_cluster_config()) {
    clear_has_config();
    ::google::bigtable::admin::v2::Cluster_ClusterConfig* temp = config_.cluster_config_;
    config_.cluster_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Cluster::unsafe_arena_set_allocated_cluster_config(::google::bigtable::admin::v2::Cluster_ClusterConfig* cluster_config) {
  clear_config();
  if (cluster_config) {
    set_has_cluster_config();
    config_.cluster_config_ = cluster_config;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.admin.v2.Cluster.cluster_config)
}
inline ::google::bigtable::admin::v2::Cluster_ClusterConfig* Cluster::_internal_mutable_cluster_config() {
  if (!_internal_has_cluster_config()) {
    clear_config();
    set_has_cluster_config();
    config_.cluster_config_ = CreateMaybeMessage< ::google::bigtable::admin::v2::Cluster_ClusterConfig >(GetArena());
  }
  return config_.cluster_config_;
}
inline ::google::bigtable::admin::v2::Cluster_ClusterConfig* Cluster::mutable_cluster_config() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.Cluster.cluster_config)
  return _internal_mutable_cluster_config();
}

// .google.bigtable.admin.v2.StorageType default_storage_type = 5;
inline void Cluster::clear_default_storage_type() {
  default_storage_type_ = 0;
}
inline ::google::bigtable::admin::v2::StorageType Cluster::_internal_default_storage_type() const {
  return static_cast< ::google::bigtable::admin::v2::StorageType >(default_storage_type_);
}
inline ::google::bigtable::admin::v2::StorageType Cluster::default_storage_type() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.Cluster.default_storage_type)
  return _internal_default_storage_type();
}
inline void Cluster::_internal_set_default_storage_type(::google::bigtable::admin::v2::StorageType value) {
  
  default_storage_type_ = value;
}
inline void Cluster::set_default_storage_type(::google::bigtable::admin::v2::StorageType value) {
  _internal_set_default_storage_type(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.Cluster.default_storage_type)
}

// .google.bigtable.admin.v2.Cluster.EncryptionConfig encryption_config = 6 [(.google.api.field_behavior) = IMMUTABLE];
inline bool Cluster::_internal_has_encryption_config() const {
  return this != internal_default_instance() && encryption_config_ != nullptr;
}
inline bool Cluster::has_encryption_config() const {
  return _internal_has_encryption_config();
}
inline void Cluster::clear_encryption_config() {
  if (GetArena() == nullptr && encryption_config_ != nullptr) {
    delete encryption_config_;
  }
  encryption_config_ = nullptr;
}
inline const ::google::bigtable::admin::v2::Cluster_EncryptionConfig& Cluster::_internal_encryption_config() const {
  const ::google::bigtable::admin::v2::Cluster_EncryptionConfig* p = encryption_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::bigtable::admin::v2::Cluster_EncryptionConfig&>(
      ::google::bigtable::admin::v2::_Cluster_EncryptionConfig_default_instance_);
}
inline const ::google::bigtable::admin::v2::Cluster_EncryptionConfig& Cluster::encryption_config() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.Cluster.encryption_config)
  return _internal_encryption_config();
}
inline void Cluster::unsafe_arena_set_allocated_encryption_config(
    ::google::bigtable::admin::v2::Cluster_EncryptionConfig* encryption_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(encryption_config_);
  }
  encryption_config_ = encryption_config;
  if (encryption_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.admin.v2.Cluster.encryption_config)
}
inline ::google::bigtable::admin::v2::Cluster_EncryptionConfig* Cluster::release_encryption_config() {
  
  ::google::bigtable::admin::v2::Cluster_EncryptionConfig* temp = encryption_config_;
  encryption_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::bigtable::admin::v2::Cluster_EncryptionConfig* Cluster::unsafe_arena_release_encryption_config() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.Cluster.encryption_config)
  
  ::google::bigtable::admin::v2::Cluster_EncryptionConfig* temp = encryption_config_;
  encryption_config_ = nullptr;
  return temp;
}
inline ::google::bigtable::admin::v2::Cluster_EncryptionConfig* Cluster::_internal_mutable_encryption_config() {
  
  if (encryption_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::bigtable::admin::v2::Cluster_EncryptionConfig>(GetArena());
    encryption_config_ = p;
  }
  return encryption_config_;
}
inline ::google::bigtable::admin::v2::Cluster_EncryptionConfig* Cluster::mutable_encryption_config() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.Cluster.encryption_config)
  return _internal_mutable_encryption_config();
}
inline void Cluster::set_allocated_encryption_config(::google::bigtable::admin::v2::Cluster_EncryptionConfig* encryption_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete encryption_config_;
  }
  if (encryption_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(encryption_config);
    if (message_arena != submessage_arena) {
      encryption_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, encryption_config, submessage_arena);
    }
    
  } else {
    
  }
  encryption_config_ = encryption_config;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.Cluster.encryption_config)
}

inline bool Cluster::has_config() const {
  return config_case() != CONFIG_NOT_SET;
}
inline void Cluster::clear_has_config() {
  _oneof_case_[0] = CONFIG_NOT_SET;
}
inline Cluster::ConfigCase Cluster::config_case() const {
  return Cluster::ConfigCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// AppProfile_MultiClusterRoutingUseAny

// repeated string cluster_ids = 1;
inline int AppProfile_MultiClusterRoutingUseAny::_internal_cluster_ids_size() const {
  return cluster_ids_.size();
}
inline int AppProfile_MultiClusterRoutingUseAny::cluster_ids_size() const {
  return _internal_cluster_ids_size();
}
inline void AppProfile_MultiClusterRoutingUseAny::clear_cluster_ids() {
  cluster_ids_.Clear();
}
inline std::string* AppProfile_MultiClusterRoutingUseAny::add_cluster_ids() {
  // @@protoc_insertion_point(field_add_mutable:google.bigtable.admin.v2.AppProfile.MultiClusterRoutingUseAny.cluster_ids)
  return _internal_add_cluster_ids();
}
inline const std::string& AppProfile_MultiClusterRoutingUseAny::_internal_cluster_ids(int index) const {
  return cluster_ids_.Get(index);
}
inline const std::string& AppProfile_MultiClusterRoutingUseAny::cluster_ids(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.AppProfile.MultiClusterRoutingUseAny.cluster_ids)
  return _internal_cluster_ids(index);
}
inline std::string* AppProfile_MultiClusterRoutingUseAny::mutable_cluster_ids(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.AppProfile.MultiClusterRoutingUseAny.cluster_ids)
  return cluster_ids_.Mutable(index);
}
inline void AppProfile_MultiClusterRoutingUseAny::set_cluster_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.AppProfile.MultiClusterRoutingUseAny.cluster_ids)
  cluster_ids_.Mutable(index)->assign(value);
}
inline void AppProfile_MultiClusterRoutingUseAny::set_cluster_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.AppProfile.MultiClusterRoutingUseAny.cluster_ids)
  cluster_ids_.Mutable(index)->assign(std::move(value));
}
inline void AppProfile_MultiClusterRoutingUseAny::set_cluster_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  cluster_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.v2.AppProfile.MultiClusterRoutingUseAny.cluster_ids)
}
inline void AppProfile_MultiClusterRoutingUseAny::set_cluster_ids(int index, const char* value, size_t size) {
  cluster_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.v2.AppProfile.MultiClusterRoutingUseAny.cluster_ids)
}
inline std::string* AppProfile_MultiClusterRoutingUseAny::_internal_add_cluster_ids() {
  return cluster_ids_.Add();
}
inline void AppProfile_MultiClusterRoutingUseAny::add_cluster_ids(const std::string& value) {
  cluster_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.bigtable.admin.v2.AppProfile.MultiClusterRoutingUseAny.cluster_ids)
}
inline void AppProfile_MultiClusterRoutingUseAny::add_cluster_ids(std::string&& value) {
  cluster_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.bigtable.admin.v2.AppProfile.MultiClusterRoutingUseAny.cluster_ids)
}
inline void AppProfile_MultiClusterRoutingUseAny::add_cluster_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  cluster_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.bigtable.admin.v2.AppProfile.MultiClusterRoutingUseAny.cluster_ids)
}
inline void AppProfile_MultiClusterRoutingUseAny::add_cluster_ids(const char* value, size_t size) {
  cluster_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.bigtable.admin.v2.AppProfile.MultiClusterRoutingUseAny.cluster_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AppProfile_MultiClusterRoutingUseAny::cluster_ids() const {
  // @@protoc_insertion_point(field_list:google.bigtable.admin.v2.AppProfile.MultiClusterRoutingUseAny.cluster_ids)
  return cluster_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AppProfile_MultiClusterRoutingUseAny::mutable_cluster_ids() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.admin.v2.AppProfile.MultiClusterRoutingUseAny.cluster_ids)
  return &cluster_ids_;
}

// -------------------------------------------------------------------

// AppProfile_SingleClusterRouting

// string cluster_id = 1;
inline void AppProfile_SingleClusterRouting::clear_cluster_id() {
  cluster_id_.ClearToEmpty();
}
inline const std::string& AppProfile_SingleClusterRouting::cluster_id() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.AppProfile.SingleClusterRouting.cluster_id)
  return _internal_cluster_id();
}
inline void AppProfile_SingleClusterRouting::set_cluster_id(const std::string& value) {
  _internal_set_cluster_id(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.AppProfile.SingleClusterRouting.cluster_id)
}
inline std::string* AppProfile_SingleClusterRouting::mutable_cluster_id() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.AppProfile.SingleClusterRouting.cluster_id)
  return _internal_mutable_cluster_id();
}
inline const std::string& AppProfile_SingleClusterRouting::_internal_cluster_id() const {
  return cluster_id_.Get();
}
inline void AppProfile_SingleClusterRouting::_internal_set_cluster_id(const std::string& value) {
  
  cluster_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AppProfile_SingleClusterRouting::set_cluster_id(std::string&& value) {
  
  cluster_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.admin.v2.AppProfile.SingleClusterRouting.cluster_id)
}
inline void AppProfile_SingleClusterRouting::set_cluster_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cluster_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.v2.AppProfile.SingleClusterRouting.cluster_id)
}
inline void AppProfile_SingleClusterRouting::set_cluster_id(const char* value,
    size_t size) {
  
  cluster_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.v2.AppProfile.SingleClusterRouting.cluster_id)
}
inline std::string* AppProfile_SingleClusterRouting::_internal_mutable_cluster_id() {
  
  return cluster_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AppProfile_SingleClusterRouting::release_cluster_id() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.AppProfile.SingleClusterRouting.cluster_id)
  return cluster_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AppProfile_SingleClusterRouting::set_allocated_cluster_id(std::string* cluster_id) {
  if (cluster_id != nullptr) {
    
  } else {
    
  }
  cluster_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cluster_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.AppProfile.SingleClusterRouting.cluster_id)
}

// bool allow_transactional_writes = 2;
inline void AppProfile_SingleClusterRouting::clear_allow_transactional_writes() {
  allow_transactional_writes_ = false;
}
inline bool AppProfile_SingleClusterRouting::_internal_allow_transactional_writes() const {
  return allow_transactional_writes_;
}
inline bool AppProfile_SingleClusterRouting::allow_transactional_writes() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.AppProfile.SingleClusterRouting.allow_transactional_writes)
  return _internal_allow_transactional_writes();
}
inline void AppProfile_SingleClusterRouting::_internal_set_allow_transactional_writes(bool value) {
  
  allow_transactional_writes_ = value;
}
inline void AppProfile_SingleClusterRouting::set_allow_transactional_writes(bool value) {
  _internal_set_allow_transactional_writes(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.AppProfile.SingleClusterRouting.allow_transactional_writes)
}

// -------------------------------------------------------------------

// AppProfile

// string name = 1;
inline void AppProfile::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& AppProfile::name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.AppProfile.name)
  return _internal_name();
}
inline void AppProfile::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.AppProfile.name)
}
inline std::string* AppProfile::mutable_name() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.AppProfile.name)
  return _internal_mutable_name();
}
inline const std::string& AppProfile::_internal_name() const {
  return name_.Get();
}
inline void AppProfile::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AppProfile::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.admin.v2.AppProfile.name)
}
inline void AppProfile::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.v2.AppProfile.name)
}
inline void AppProfile::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.v2.AppProfile.name)
}
inline std::string* AppProfile::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AppProfile::release_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.AppProfile.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AppProfile::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.AppProfile.name)
}

// string etag = 2;
inline void AppProfile::clear_etag() {
  etag_.ClearToEmpty();
}
inline const std::string& AppProfile::etag() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.AppProfile.etag)
  return _internal_etag();
}
inline void AppProfile::set_etag(const std::string& value) {
  _internal_set_etag(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.AppProfile.etag)
}
inline std::string* AppProfile::mutable_etag() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.AppProfile.etag)
  return _internal_mutable_etag();
}
inline const std::string& AppProfile::_internal_etag() const {
  return etag_.Get();
}
inline void AppProfile::_internal_set_etag(const std::string& value) {
  
  etag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AppProfile::set_etag(std::string&& value) {
  
  etag_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.admin.v2.AppProfile.etag)
}
inline void AppProfile::set_etag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  etag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.v2.AppProfile.etag)
}
inline void AppProfile::set_etag(const char* value,
    size_t size) {
  
  etag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.v2.AppProfile.etag)
}
inline std::string* AppProfile::_internal_mutable_etag() {
  
  return etag_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AppProfile::release_etag() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.AppProfile.etag)
  return etag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AppProfile::set_allocated_etag(std::string* etag) {
  if (etag != nullptr) {
    
  } else {
    
  }
  etag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), etag,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.AppProfile.etag)
}

// string description = 3;
inline void AppProfile::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& AppProfile::description() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.AppProfile.description)
  return _internal_description();
}
inline void AppProfile::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.AppProfile.description)
}
inline std::string* AppProfile::mutable_description() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.AppProfile.description)
  return _internal_mutable_description();
}
inline const std::string& AppProfile::_internal_description() const {
  return description_.Get();
}
inline void AppProfile::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AppProfile::set_description(std::string&& value) {
  
  description_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.admin.v2.AppProfile.description)
}
inline void AppProfile::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.v2.AppProfile.description)
}
inline void AppProfile::set_description(const char* value,
    size_t size) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.v2.AppProfile.description)
}
inline std::string* AppProfile::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AppProfile::release_description() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.AppProfile.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AppProfile::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.AppProfile.description)
}

// .google.bigtable.admin.v2.AppProfile.MultiClusterRoutingUseAny multi_cluster_routing_use_any = 5;
inline bool AppProfile::_internal_has_multi_cluster_routing_use_any() const {
  return routing_policy_case() == kMultiClusterRoutingUseAny;
}
inline bool AppProfile::has_multi_cluster_routing_use_any() const {
  return _internal_has_multi_cluster_routing_use_any();
}
inline void AppProfile::set_has_multi_cluster_routing_use_any() {
  _oneof_case_[0] = kMultiClusterRoutingUseAny;
}
inline void AppProfile::clear_multi_cluster_routing_use_any() {
  if (_internal_has_multi_cluster_routing_use_any()) {
    if (GetArena() == nullptr) {
      delete routing_policy_.multi_cluster_routing_use_any_;
    }
    clear_has_routing_policy();
  }
}
inline ::google::bigtable::admin::v2::AppProfile_MultiClusterRoutingUseAny* AppProfile::release_multi_cluster_routing_use_any() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.AppProfile.multi_cluster_routing_use_any)
  if (_internal_has_multi_cluster_routing_use_any()) {
    clear_has_routing_policy();
      ::google::bigtable::admin::v2::AppProfile_MultiClusterRoutingUseAny* temp = routing_policy_.multi_cluster_routing_use_any_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    routing_policy_.multi_cluster_routing_use_any_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::bigtable::admin::v2::AppProfile_MultiClusterRoutingUseAny& AppProfile::_internal_multi_cluster_routing_use_any() const {
  return _internal_has_multi_cluster_routing_use_any()
      ? *routing_policy_.multi_cluster_routing_use_any_
      : reinterpret_cast< ::google::bigtable::admin::v2::AppProfile_MultiClusterRoutingUseAny&>(::google::bigtable::admin::v2::_AppProfile_MultiClusterRoutingUseAny_default_instance_);
}
inline const ::google::bigtable::admin::v2::AppProfile_MultiClusterRoutingUseAny& AppProfile::multi_cluster_routing_use_any() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.AppProfile.multi_cluster_routing_use_any)
  return _internal_multi_cluster_routing_use_any();
}
inline ::google::bigtable::admin::v2::AppProfile_MultiClusterRoutingUseAny* AppProfile::unsafe_arena_release_multi_cluster_routing_use_any() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.bigtable.admin.v2.AppProfile.multi_cluster_routing_use_any)
  if (_internal_has_multi_cluster_routing_use_any()) {
    clear_has_routing_policy();
    ::google::bigtable::admin::v2::AppProfile_MultiClusterRoutingUseAny* temp = routing_policy_.multi_cluster_routing_use_any_;
    routing_policy_.multi_cluster_routing_use_any_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AppProfile::unsafe_arena_set_allocated_multi_cluster_routing_use_any(::google::bigtable::admin::v2::AppProfile_MultiClusterRoutingUseAny* multi_cluster_routing_use_any) {
  clear_routing_policy();
  if (multi_cluster_routing_use_any) {
    set_has_multi_cluster_routing_use_any();
    routing_policy_.multi_cluster_routing_use_any_ = multi_cluster_routing_use_any;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.admin.v2.AppProfile.multi_cluster_routing_use_any)
}
inline ::google::bigtable::admin::v2::AppProfile_MultiClusterRoutingUseAny* AppProfile::_internal_mutable_multi_cluster_routing_use_any() {
  if (!_internal_has_multi_cluster_routing_use_any()) {
    clear_routing_policy();
    set_has_multi_cluster_routing_use_any();
    routing_policy_.multi_cluster_routing_use_any_ = CreateMaybeMessage< ::google::bigtable::admin::v2::AppProfile_MultiClusterRoutingUseAny >(GetArena());
  }
  return routing_policy_.multi_cluster_routing_use_any_;
}
inline ::google::bigtable::admin::v2::AppProfile_MultiClusterRoutingUseAny* AppProfile::mutable_multi_cluster_routing_use_any() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.AppProfile.multi_cluster_routing_use_any)
  return _internal_mutable_multi_cluster_routing_use_any();
}

// .google.bigtable.admin.v2.AppProfile.SingleClusterRouting single_cluster_routing = 6;
inline bool AppProfile::_internal_has_single_cluster_routing() const {
  return routing_policy_case() == kSingleClusterRouting;
}
inline bool AppProfile::has_single_cluster_routing() const {
  return _internal_has_single_cluster_routing();
}
inline void AppProfile::set_has_single_cluster_routing() {
  _oneof_case_[0] = kSingleClusterRouting;
}
inline void AppProfile::clear_single_cluster_routing() {
  if (_internal_has_single_cluster_routing()) {
    if (GetArena() == nullptr) {
      delete routing_policy_.single_cluster_routing_;
    }
    clear_has_routing_policy();
  }
}
inline ::google::bigtable::admin::v2::AppProfile_SingleClusterRouting* AppProfile::release_single_cluster_routing() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.AppProfile.single_cluster_routing)
  if (_internal_has_single_cluster_routing()) {
    clear_has_routing_policy();
      ::google::bigtable::admin::v2::AppProfile_SingleClusterRouting* temp = routing_policy_.single_cluster_routing_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    routing_policy_.single_cluster_routing_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::bigtable::admin::v2::AppProfile_SingleClusterRouting& AppProfile::_internal_single_cluster_routing() const {
  return _internal_has_single_cluster_routing()
      ? *routing_policy_.single_cluster_routing_
      : reinterpret_cast< ::google::bigtable::admin::v2::AppProfile_SingleClusterRouting&>(::google::bigtable::admin::v2::_AppProfile_SingleClusterRouting_default_instance_);
}
inline const ::google::bigtable::admin::v2::AppProfile_SingleClusterRouting& AppProfile::single_cluster_routing() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.AppProfile.single_cluster_routing)
  return _internal_single_cluster_routing();
}
inline ::google::bigtable::admin::v2::AppProfile_SingleClusterRouting* AppProfile::unsafe_arena_release_single_cluster_routing() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.bigtable.admin.v2.AppProfile.single_cluster_routing)
  if (_internal_has_single_cluster_routing()) {
    clear_has_routing_policy();
    ::google::bigtable::admin::v2::AppProfile_SingleClusterRouting* temp = routing_policy_.single_cluster_routing_;
    routing_policy_.single_cluster_routing_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AppProfile::unsafe_arena_set_allocated_single_cluster_routing(::google::bigtable::admin::v2::AppProfile_SingleClusterRouting* single_cluster_routing) {
  clear_routing_policy();
  if (single_cluster_routing) {
    set_has_single_cluster_routing();
    routing_policy_.single_cluster_routing_ = single_cluster_routing;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.bigtable.admin.v2.AppProfile.single_cluster_routing)
}
inline ::google::bigtable::admin::v2::AppProfile_SingleClusterRouting* AppProfile::_internal_mutable_single_cluster_routing() {
  if (!_internal_has_single_cluster_routing()) {
    clear_routing_policy();
    set_has_single_cluster_routing();
    routing_policy_.single_cluster_routing_ = CreateMaybeMessage< ::google::bigtable::admin::v2::AppProfile_SingleClusterRouting >(GetArena());
  }
  return routing_policy_.single_cluster_routing_;
}
inline ::google::bigtable::admin::v2::AppProfile_SingleClusterRouting* AppProfile::mutable_single_cluster_routing() {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.AppProfile.single_cluster_routing)
  return _internal_mutable_single_cluster_routing();
}

inline bool AppProfile::has_routing_policy() const {
  return routing_policy_case() != ROUTING_POLICY_NOT_SET;
}
inline void AppProfile::clear_has_routing_policy() {
  _oneof_case_[0] = ROUTING_POLICY_NOT_SET;
}
inline AppProfile::RoutingPolicyCase AppProfile::routing_policy_case() const {
  return AppProfile::RoutingPolicyCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace admin
}  // namespace bigtable
}  // namespace google

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::google::bigtable::admin::v2::Instance_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::bigtable::admin::v2::Instance_State>() {
  return ::google::bigtable::admin::v2::Instance_State_descriptor();
}
template <> struct is_proto_enum< ::google::bigtable::admin::v2::Instance_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::bigtable::admin::v2::Instance_Type>() {
  return ::google::bigtable::admin::v2::Instance_Type_descriptor();
}
template <> struct is_proto_enum< ::google::bigtable::admin::v2::Cluster_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::bigtable::admin::v2::Cluster_State>() {
  return ::google::bigtable::admin::v2::Cluster_State_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fbigtable_2fadmin_2fv2_2finstance_2eproto
