// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/pubsub/v1/schema.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fpubsub_2fv1_2fschema_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fpubsub_2fv1_2fschema_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include "google/api/field_behavior.pb.h"
#include "google/api/resource.pb.h"
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fpubsub_2fv1_2fschema_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fpubsub_2fv1_2fschema_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fpubsub_2fv1_2fschema_2eproto;
namespace google {
namespace pubsub {
namespace v1 {
class CreateSchemaRequest;
struct CreateSchemaRequestDefaultTypeInternal;
extern CreateSchemaRequestDefaultTypeInternal _CreateSchemaRequest_default_instance_;
class DeleteSchemaRequest;
struct DeleteSchemaRequestDefaultTypeInternal;
extern DeleteSchemaRequestDefaultTypeInternal _DeleteSchemaRequest_default_instance_;
class GetSchemaRequest;
struct GetSchemaRequestDefaultTypeInternal;
extern GetSchemaRequestDefaultTypeInternal _GetSchemaRequest_default_instance_;
class ListSchemasRequest;
struct ListSchemasRequestDefaultTypeInternal;
extern ListSchemasRequestDefaultTypeInternal _ListSchemasRequest_default_instance_;
class ListSchemasResponse;
struct ListSchemasResponseDefaultTypeInternal;
extern ListSchemasResponseDefaultTypeInternal _ListSchemasResponse_default_instance_;
class Schema;
struct SchemaDefaultTypeInternal;
extern SchemaDefaultTypeInternal _Schema_default_instance_;
class ValidateMessageRequest;
struct ValidateMessageRequestDefaultTypeInternal;
extern ValidateMessageRequestDefaultTypeInternal _ValidateMessageRequest_default_instance_;
class ValidateMessageResponse;
struct ValidateMessageResponseDefaultTypeInternal;
extern ValidateMessageResponseDefaultTypeInternal _ValidateMessageResponse_default_instance_;
class ValidateSchemaRequest;
struct ValidateSchemaRequestDefaultTypeInternal;
extern ValidateSchemaRequestDefaultTypeInternal _ValidateSchemaRequest_default_instance_;
class ValidateSchemaResponse;
struct ValidateSchemaResponseDefaultTypeInternal;
extern ValidateSchemaResponseDefaultTypeInternal _ValidateSchemaResponse_default_instance_;
}  // namespace v1
}  // namespace pubsub
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::pubsub::v1::CreateSchemaRequest* Arena::CreateMaybeMessage<::google::pubsub::v1::CreateSchemaRequest>(Arena*);
template<> ::google::pubsub::v1::DeleteSchemaRequest* Arena::CreateMaybeMessage<::google::pubsub::v1::DeleteSchemaRequest>(Arena*);
template<> ::google::pubsub::v1::GetSchemaRequest* Arena::CreateMaybeMessage<::google::pubsub::v1::GetSchemaRequest>(Arena*);
template<> ::google::pubsub::v1::ListSchemasRequest* Arena::CreateMaybeMessage<::google::pubsub::v1::ListSchemasRequest>(Arena*);
template<> ::google::pubsub::v1::ListSchemasResponse* Arena::CreateMaybeMessage<::google::pubsub::v1::ListSchemasResponse>(Arena*);
template<> ::google::pubsub::v1::Schema* Arena::CreateMaybeMessage<::google::pubsub::v1::Schema>(Arena*);
template<> ::google::pubsub::v1::ValidateMessageRequest* Arena::CreateMaybeMessage<::google::pubsub::v1::ValidateMessageRequest>(Arena*);
template<> ::google::pubsub::v1::ValidateMessageResponse* Arena::CreateMaybeMessage<::google::pubsub::v1::ValidateMessageResponse>(Arena*);
template<> ::google::pubsub::v1::ValidateSchemaRequest* Arena::CreateMaybeMessage<::google::pubsub::v1::ValidateSchemaRequest>(Arena*);
template<> ::google::pubsub::v1::ValidateSchemaResponse* Arena::CreateMaybeMessage<::google::pubsub::v1::ValidateSchemaResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace pubsub {
namespace v1 {

enum Schema_Type : int {
  Schema_Type_TYPE_UNSPECIFIED = 0,
  Schema_Type_PROTOCOL_BUFFER = 1,
  Schema_Type_AVRO = 2,
  Schema_Type_Schema_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Schema_Type_Schema_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Schema_Type_IsValid(int value);
constexpr Schema_Type Schema_Type_Type_MIN = Schema_Type_TYPE_UNSPECIFIED;
constexpr Schema_Type Schema_Type_Type_MAX = Schema_Type_AVRO;
constexpr int Schema_Type_Type_ARRAYSIZE = Schema_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Schema_Type_descriptor();
template<typename T>
inline const std::string& Schema_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Schema_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Schema_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Schema_Type_descriptor(), enum_t_value);
}
inline bool Schema_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Schema_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Schema_Type>(
    Schema_Type_descriptor(), name, value);
}
enum SchemaView : int {
  SCHEMA_VIEW_UNSPECIFIED = 0,
  BASIC = 1,
  FULL = 2,
  SchemaView_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SchemaView_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SchemaView_IsValid(int value);
constexpr SchemaView SchemaView_MIN = SCHEMA_VIEW_UNSPECIFIED;
constexpr SchemaView SchemaView_MAX = FULL;
constexpr int SchemaView_ARRAYSIZE = SchemaView_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SchemaView_descriptor();
template<typename T>
inline const std::string& SchemaView_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SchemaView>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SchemaView_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SchemaView_descriptor(), enum_t_value);
}
inline bool SchemaView_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SchemaView* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SchemaView>(
    SchemaView_descriptor(), name, value);
}
enum Encoding : int {
  ENCODING_UNSPECIFIED = 0,
  JSON = 1,
  BINARY = 2,
  Encoding_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Encoding_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Encoding_IsValid(int value);
constexpr Encoding Encoding_MIN = ENCODING_UNSPECIFIED;
constexpr Encoding Encoding_MAX = BINARY;
constexpr int Encoding_ARRAYSIZE = Encoding_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Encoding_descriptor();
template<typename T>
inline const std::string& Encoding_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Encoding>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Encoding_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Encoding_descriptor(), enum_t_value);
}
inline bool Encoding_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Encoding* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Encoding>(
    Encoding_descriptor(), name, value);
}
// ===================================================================

class Schema final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.Schema) */ {
 public:
  inline Schema() : Schema(nullptr) {}
  ~Schema() override;
  explicit PROTOBUF_CONSTEXPR Schema(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Schema(const Schema& from);
  Schema(Schema&& from) noexcept
    : Schema() {
    *this = ::std::move(from);
  }

  inline Schema& operator=(const Schema& from) {
    CopyFrom(from);
    return *this;
  }
  inline Schema& operator=(Schema&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Schema& default_instance() {
    return *internal_default_instance();
  }
  static inline const Schema* internal_default_instance() {
    return reinterpret_cast<const Schema*>(
               &_Schema_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Schema& a, Schema& b) {
    a.Swap(&b);
  }
  inline void Swap(Schema* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Schema* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Schema* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Schema>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Schema& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Schema& from) {
    Schema::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Schema* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.pubsub.v1.Schema";
  }
  protected:
  explicit Schema(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Schema_Type Type;
  static constexpr Type TYPE_UNSPECIFIED =
    Schema_Type_TYPE_UNSPECIFIED;
  static constexpr Type PROTOCOL_BUFFER =
    Schema_Type_PROTOCOL_BUFFER;
  static constexpr Type AVRO =
    Schema_Type_AVRO;
  static inline bool Type_IsValid(int value) {
    return Schema_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Schema_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Schema_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Schema_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Schema_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Schema_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return Schema_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDefinitionFieldNumber = 3,
    kTypeFieldNumber = 2,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string definition = 3;
  void clear_definition();
  const std::string& definition() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_definition(ArgT0&& arg0, ArgT... args);
  std::string* mutable_definition();
  PROTOBUF_NODISCARD std::string* release_definition();
  void set_allocated_definition(std::string* definition);
  private:
  const std::string& _internal_definition() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_definition(const std::string& value);
  std::string* _internal_mutable_definition();
  public:

  // .google.pubsub.v1.Schema.Type type = 2;
  void clear_type();
  ::google::pubsub::v1::Schema_Type type() const;
  void set_type(::google::pubsub::v1::Schema_Type value);
  private:
  ::google::pubsub::v1::Schema_Type _internal_type() const;
  void _internal_set_type(::google::pubsub::v1::Schema_Type value);
  public:

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.Schema)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr definition_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fschema_2eproto;
};
// -------------------------------------------------------------------

class CreateSchemaRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.CreateSchemaRequest) */ {
 public:
  inline CreateSchemaRequest() : CreateSchemaRequest(nullptr) {}
  ~CreateSchemaRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateSchemaRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateSchemaRequest(const CreateSchemaRequest& from);
  CreateSchemaRequest(CreateSchemaRequest&& from) noexcept
    : CreateSchemaRequest() {
    *this = ::std::move(from);
  }

  inline CreateSchemaRequest& operator=(const CreateSchemaRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateSchemaRequest& operator=(CreateSchemaRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateSchemaRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateSchemaRequest* internal_default_instance() {
    return reinterpret_cast<const CreateSchemaRequest*>(
               &_CreateSchemaRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateSchemaRequest& a, CreateSchemaRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateSchemaRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateSchemaRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateSchemaRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateSchemaRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateSchemaRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateSchemaRequest& from) {
    CreateSchemaRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateSchemaRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.pubsub.v1.CreateSchemaRequest";
  }
  protected:
  explicit CreateSchemaRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kSchemaIdFieldNumber = 3,
    kSchemaFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string schema_id = 3;
  void clear_schema_id();
  const std::string& schema_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_schema_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_schema_id();
  PROTOBUF_NODISCARD std::string* release_schema_id();
  void set_allocated_schema_id(std::string* schema_id);
  private:
  const std::string& _internal_schema_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_schema_id(const std::string& value);
  std::string* _internal_mutable_schema_id();
  public:

  // .google.pubsub.v1.Schema schema = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_schema() const;
  private:
  bool _internal_has_schema() const;
  public:
  void clear_schema();
  const ::google::pubsub::v1::Schema& schema() const;
  PROTOBUF_NODISCARD ::google::pubsub::v1::Schema* release_schema();
  ::google::pubsub::v1::Schema* mutable_schema();
  void set_allocated_schema(::google::pubsub::v1::Schema* schema);
  private:
  const ::google::pubsub::v1::Schema& _internal_schema() const;
  ::google::pubsub::v1::Schema* _internal_mutable_schema();
  public:
  void unsafe_arena_set_allocated_schema(
      ::google::pubsub::v1::Schema* schema);
  ::google::pubsub::v1::Schema* unsafe_arena_release_schema();

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.CreateSchemaRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr schema_id_;
    ::google::pubsub::v1::Schema* schema_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fschema_2eproto;
};
// -------------------------------------------------------------------

class GetSchemaRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.GetSchemaRequest) */ {
 public:
  inline GetSchemaRequest() : GetSchemaRequest(nullptr) {}
  ~GetSchemaRequest() override;
  explicit PROTOBUF_CONSTEXPR GetSchemaRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSchemaRequest(const GetSchemaRequest& from);
  GetSchemaRequest(GetSchemaRequest&& from) noexcept
    : GetSchemaRequest() {
    *this = ::std::move(from);
  }

  inline GetSchemaRequest& operator=(const GetSchemaRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSchemaRequest& operator=(GetSchemaRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSchemaRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSchemaRequest* internal_default_instance() {
    return reinterpret_cast<const GetSchemaRequest*>(
               &_GetSchemaRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetSchemaRequest& a, GetSchemaRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSchemaRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSchemaRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSchemaRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetSchemaRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetSchemaRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetSchemaRequest& from) {
    GetSchemaRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSchemaRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.pubsub.v1.GetSchemaRequest";
  }
  protected:
  explicit GetSchemaRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kViewFieldNumber = 2,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.pubsub.v1.SchemaView view = 2;
  void clear_view();
  ::google::pubsub::v1::SchemaView view() const;
  void set_view(::google::pubsub::v1::SchemaView value);
  private:
  ::google::pubsub::v1::SchemaView _internal_view() const;
  void _internal_set_view(::google::pubsub::v1::SchemaView value);
  public:

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.GetSchemaRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int view_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fschema_2eproto;
};
// -------------------------------------------------------------------

class ListSchemasRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.ListSchemasRequest) */ {
 public:
  inline ListSchemasRequest() : ListSchemasRequest(nullptr) {}
  ~ListSchemasRequest() override;
  explicit PROTOBUF_CONSTEXPR ListSchemasRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListSchemasRequest(const ListSchemasRequest& from);
  ListSchemasRequest(ListSchemasRequest&& from) noexcept
    : ListSchemasRequest() {
    *this = ::std::move(from);
  }

  inline ListSchemasRequest& operator=(const ListSchemasRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListSchemasRequest& operator=(ListSchemasRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListSchemasRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListSchemasRequest* internal_default_instance() {
    return reinterpret_cast<const ListSchemasRequest*>(
               &_ListSchemasRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ListSchemasRequest& a, ListSchemasRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListSchemasRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListSchemasRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListSchemasRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListSchemasRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListSchemasRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListSchemasRequest& from) {
    ListSchemasRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListSchemasRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.pubsub.v1.ListSchemasRequest";
  }
  protected:
  explicit ListSchemasRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 4,
    kViewFieldNumber = 2,
    kPageSizeFieldNumber = 3,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 4;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // .google.pubsub.v1.SchemaView view = 2;
  void clear_view();
  ::google::pubsub::v1::SchemaView view() const;
  void set_view(::google::pubsub::v1::SchemaView value);
  private:
  ::google::pubsub::v1::SchemaView _internal_view() const;
  void _internal_set_view(::google::pubsub::v1::SchemaView value);
  public:

  // int32 page_size = 3;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.ListSchemasRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
    int view_;
    int32_t page_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fschema_2eproto;
};
// -------------------------------------------------------------------

class ListSchemasResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.ListSchemasResponse) */ {
 public:
  inline ListSchemasResponse() : ListSchemasResponse(nullptr) {}
  ~ListSchemasResponse() override;
  explicit PROTOBUF_CONSTEXPR ListSchemasResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListSchemasResponse(const ListSchemasResponse& from);
  ListSchemasResponse(ListSchemasResponse&& from) noexcept
    : ListSchemasResponse() {
    *this = ::std::move(from);
  }

  inline ListSchemasResponse& operator=(const ListSchemasResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListSchemasResponse& operator=(ListSchemasResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListSchemasResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListSchemasResponse* internal_default_instance() {
    return reinterpret_cast<const ListSchemasResponse*>(
               &_ListSchemasResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ListSchemasResponse& a, ListSchemasResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListSchemasResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListSchemasResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListSchemasResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListSchemasResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListSchemasResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListSchemasResponse& from) {
    ListSchemasResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListSchemasResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.pubsub.v1.ListSchemasResponse";
  }
  protected:
  explicit ListSchemasResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSchemasFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .google.pubsub.v1.Schema schemas = 1;
  int schemas_size() const;
  private:
  int _internal_schemas_size() const;
  public:
  void clear_schemas();
  ::google::pubsub::v1::Schema* mutable_schemas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::pubsub::v1::Schema >*
      mutable_schemas();
  private:
  const ::google::pubsub::v1::Schema& _internal_schemas(int index) const;
  ::google::pubsub::v1::Schema* _internal_add_schemas();
  public:
  const ::google::pubsub::v1::Schema& schemas(int index) const;
  ::google::pubsub::v1::Schema* add_schemas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::pubsub::v1::Schema >&
      schemas() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.ListSchemasResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::pubsub::v1::Schema > schemas_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fschema_2eproto;
};
// -------------------------------------------------------------------

class DeleteSchemaRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.DeleteSchemaRequest) */ {
 public:
  inline DeleteSchemaRequest() : DeleteSchemaRequest(nullptr) {}
  ~DeleteSchemaRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteSchemaRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteSchemaRequest(const DeleteSchemaRequest& from);
  DeleteSchemaRequest(DeleteSchemaRequest&& from) noexcept
    : DeleteSchemaRequest() {
    *this = ::std::move(from);
  }

  inline DeleteSchemaRequest& operator=(const DeleteSchemaRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteSchemaRequest& operator=(DeleteSchemaRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteSchemaRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteSchemaRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteSchemaRequest*>(
               &_DeleteSchemaRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DeleteSchemaRequest& a, DeleteSchemaRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteSchemaRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteSchemaRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteSchemaRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteSchemaRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteSchemaRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteSchemaRequest& from) {
    DeleteSchemaRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteSchemaRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.pubsub.v1.DeleteSchemaRequest";
  }
  protected:
  explicit DeleteSchemaRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.DeleteSchemaRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fschema_2eproto;
};
// -------------------------------------------------------------------

class ValidateSchemaRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.ValidateSchemaRequest) */ {
 public:
  inline ValidateSchemaRequest() : ValidateSchemaRequest(nullptr) {}
  ~ValidateSchemaRequest() override;
  explicit PROTOBUF_CONSTEXPR ValidateSchemaRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ValidateSchemaRequest(const ValidateSchemaRequest& from);
  ValidateSchemaRequest(ValidateSchemaRequest&& from) noexcept
    : ValidateSchemaRequest() {
    *this = ::std::move(from);
  }

  inline ValidateSchemaRequest& operator=(const ValidateSchemaRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidateSchemaRequest& operator=(ValidateSchemaRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ValidateSchemaRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ValidateSchemaRequest* internal_default_instance() {
    return reinterpret_cast<const ValidateSchemaRequest*>(
               &_ValidateSchemaRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ValidateSchemaRequest& a, ValidateSchemaRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ValidateSchemaRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidateSchemaRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ValidateSchemaRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ValidateSchemaRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ValidateSchemaRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ValidateSchemaRequest& from) {
    ValidateSchemaRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidateSchemaRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.pubsub.v1.ValidateSchemaRequest";
  }
  protected:
  explicit ValidateSchemaRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kSchemaFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // .google.pubsub.v1.Schema schema = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_schema() const;
  private:
  bool _internal_has_schema() const;
  public:
  void clear_schema();
  const ::google::pubsub::v1::Schema& schema() const;
  PROTOBUF_NODISCARD ::google::pubsub::v1::Schema* release_schema();
  ::google::pubsub::v1::Schema* mutable_schema();
  void set_allocated_schema(::google::pubsub::v1::Schema* schema);
  private:
  const ::google::pubsub::v1::Schema& _internal_schema() const;
  ::google::pubsub::v1::Schema* _internal_mutable_schema();
  public:
  void unsafe_arena_set_allocated_schema(
      ::google::pubsub::v1::Schema* schema);
  ::google::pubsub::v1::Schema* unsafe_arena_release_schema();

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.ValidateSchemaRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::google::pubsub::v1::Schema* schema_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fschema_2eproto;
};
// -------------------------------------------------------------------

class ValidateSchemaResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:google.pubsub.v1.ValidateSchemaResponse) */ {
 public:
  inline ValidateSchemaResponse() : ValidateSchemaResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ValidateSchemaResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ValidateSchemaResponse(const ValidateSchemaResponse& from);
  ValidateSchemaResponse(ValidateSchemaResponse&& from) noexcept
    : ValidateSchemaResponse() {
    *this = ::std::move(from);
  }

  inline ValidateSchemaResponse& operator=(const ValidateSchemaResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidateSchemaResponse& operator=(ValidateSchemaResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ValidateSchemaResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ValidateSchemaResponse* internal_default_instance() {
    return reinterpret_cast<const ValidateSchemaResponse*>(
               &_ValidateSchemaResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ValidateSchemaResponse& a, ValidateSchemaResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ValidateSchemaResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidateSchemaResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ValidateSchemaResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ValidateSchemaResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ValidateSchemaResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ValidateSchemaResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.pubsub.v1.ValidateSchemaResponse";
  }
  protected:
  explicit ValidateSchemaResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.ValidateSchemaResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fschema_2eproto;
};
// -------------------------------------------------------------------

class ValidateMessageRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.ValidateMessageRequest) */ {
 public:
  inline ValidateMessageRequest() : ValidateMessageRequest(nullptr) {}
  ~ValidateMessageRequest() override;
  explicit PROTOBUF_CONSTEXPR ValidateMessageRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ValidateMessageRequest(const ValidateMessageRequest& from);
  ValidateMessageRequest(ValidateMessageRequest&& from) noexcept
    : ValidateMessageRequest() {
    *this = ::std::move(from);
  }

  inline ValidateMessageRequest& operator=(const ValidateMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidateMessageRequest& operator=(ValidateMessageRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ValidateMessageRequest& default_instance() {
    return *internal_default_instance();
  }
  enum SchemaSpecCase {
    kName = 2,
    kSchema = 3,
    SCHEMA_SPEC_NOT_SET = 0,
  };

  static inline const ValidateMessageRequest* internal_default_instance() {
    return reinterpret_cast<const ValidateMessageRequest*>(
               &_ValidateMessageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ValidateMessageRequest& a, ValidateMessageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ValidateMessageRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidateMessageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ValidateMessageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ValidateMessageRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ValidateMessageRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ValidateMessageRequest& from) {
    ValidateMessageRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidateMessageRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.pubsub.v1.ValidateMessageRequest";
  }
  protected:
  explicit ValidateMessageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kMessageFieldNumber = 4,
    kEncodingFieldNumber = 5,
    kNameFieldNumber = 2,
    kSchemaFieldNumber = 3,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // bytes message = 4;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .google.pubsub.v1.Encoding encoding = 5;
  void clear_encoding();
  ::google::pubsub::v1::Encoding encoding() const;
  void set_encoding(::google::pubsub::v1::Encoding value);
  private:
  ::google::pubsub::v1::Encoding _internal_encoding() const;
  void _internal_set_encoding(::google::pubsub::v1::Encoding value);
  public:

  // string name = 2 [(.google.api.resource_reference) = {
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.pubsub.v1.Schema schema = 3;
  bool has_schema() const;
  private:
  bool _internal_has_schema() const;
  public:
  void clear_schema();
  const ::google::pubsub::v1::Schema& schema() const;
  PROTOBUF_NODISCARD ::google::pubsub::v1::Schema* release_schema();
  ::google::pubsub::v1::Schema* mutable_schema();
  void set_allocated_schema(::google::pubsub::v1::Schema* schema);
  private:
  const ::google::pubsub::v1::Schema& _internal_schema() const;
  ::google::pubsub::v1::Schema* _internal_mutable_schema();
  public:
  void unsafe_arena_set_allocated_schema(
      ::google::pubsub::v1::Schema* schema);
  ::google::pubsub::v1::Schema* unsafe_arena_release_schema();

  void clear_schema_spec();
  SchemaSpecCase schema_spec_case() const;
  // @@protoc_insertion_point(class_scope:google.pubsub.v1.ValidateMessageRequest)
 private:
  class _Internal;
  void set_has_name();
  void set_has_schema();

  inline bool has_schema_spec() const;
  inline void clear_has_schema_spec();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    int encoding_;
    union SchemaSpecUnion {
      constexpr SchemaSpecUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
      ::google::pubsub::v1::Schema* schema_;
    } schema_spec_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fschema_2eproto;
};
// -------------------------------------------------------------------

class ValidateMessageResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:google.pubsub.v1.ValidateMessageResponse) */ {
 public:
  inline ValidateMessageResponse() : ValidateMessageResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ValidateMessageResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ValidateMessageResponse(const ValidateMessageResponse& from);
  ValidateMessageResponse(ValidateMessageResponse&& from) noexcept
    : ValidateMessageResponse() {
    *this = ::std::move(from);
  }

  inline ValidateMessageResponse& operator=(const ValidateMessageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidateMessageResponse& operator=(ValidateMessageResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ValidateMessageResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ValidateMessageResponse* internal_default_instance() {
    return reinterpret_cast<const ValidateMessageResponse*>(
               &_ValidateMessageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ValidateMessageResponse& a, ValidateMessageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ValidateMessageResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidateMessageResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ValidateMessageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ValidateMessageResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ValidateMessageResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ValidateMessageResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.pubsub.v1.ValidateMessageResponse";
  }
  protected:
  explicit ValidateMessageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.ValidateMessageResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fschema_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Schema

// string name = 1 [(.google.api.field_behavior) = REQUIRED];
inline void Schema::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Schema::name() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.Schema.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Schema::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.Schema.name)
}
inline std::string* Schema::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.Schema.name)
  return _s;
}
inline const std::string& Schema::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Schema::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Schema::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Schema::release_name() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.Schema.name)
  return _impl_.name_.Release();
}
inline void Schema::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.Schema.name)
}

// .google.pubsub.v1.Schema.Type type = 2;
inline void Schema::clear_type() {
  _impl_.type_ = 0;
}
inline ::google::pubsub::v1::Schema_Type Schema::_internal_type() const {
  return static_cast< ::google::pubsub::v1::Schema_Type >(_impl_.type_);
}
inline ::google::pubsub::v1::Schema_Type Schema::type() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.Schema.type)
  return _internal_type();
}
inline void Schema::_internal_set_type(::google::pubsub::v1::Schema_Type value) {
  
  _impl_.type_ = value;
}
inline void Schema::set_type(::google::pubsub::v1::Schema_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:google.pubsub.v1.Schema.type)
}

// string definition = 3;
inline void Schema::clear_definition() {
  _impl_.definition_.ClearToEmpty();
}
inline const std::string& Schema::definition() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.Schema.definition)
  return _internal_definition();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Schema::set_definition(ArgT0&& arg0, ArgT... args) {
 
 _impl_.definition_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.Schema.definition)
}
inline std::string* Schema::mutable_definition() {
  std::string* _s = _internal_mutable_definition();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.Schema.definition)
  return _s;
}
inline const std::string& Schema::_internal_definition() const {
  return _impl_.definition_.Get();
}
inline void Schema::_internal_set_definition(const std::string& value) {
  
  _impl_.definition_.Set(value, GetArenaForAllocation());
}
inline std::string* Schema::_internal_mutable_definition() {
  
  return _impl_.definition_.Mutable(GetArenaForAllocation());
}
inline std::string* Schema::release_definition() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.Schema.definition)
  return _impl_.definition_.Release();
}
inline void Schema::set_allocated_definition(std::string* definition) {
  if (definition != nullptr) {
    
  } else {
    
  }
  _impl_.definition_.SetAllocated(definition, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.definition_.IsDefault()) {
    _impl_.definition_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.Schema.definition)
}

// -------------------------------------------------------------------

// CreateSchemaRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreateSchemaRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& CreateSchemaRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.CreateSchemaRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateSchemaRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.CreateSchemaRequest.parent)
}
inline std::string* CreateSchemaRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.CreateSchemaRequest.parent)
  return _s;
}
inline const std::string& CreateSchemaRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void CreateSchemaRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateSchemaRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateSchemaRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.CreateSchemaRequest.parent)
  return _impl_.parent_.Release();
}
inline void CreateSchemaRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.CreateSchemaRequest.parent)
}

// .google.pubsub.v1.Schema schema = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateSchemaRequest::_internal_has_schema() const {
  return this != internal_default_instance() && _impl_.schema_ != nullptr;
}
inline bool CreateSchemaRequest::has_schema() const {
  return _internal_has_schema();
}
inline void CreateSchemaRequest::clear_schema() {
  if (GetArenaForAllocation() == nullptr && _impl_.schema_ != nullptr) {
    delete _impl_.schema_;
  }
  _impl_.schema_ = nullptr;
}
inline const ::google::pubsub::v1::Schema& CreateSchemaRequest::_internal_schema() const {
  const ::google::pubsub::v1::Schema* p = _impl_.schema_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::pubsub::v1::Schema&>(
      ::google::pubsub::v1::_Schema_default_instance_);
}
inline const ::google::pubsub::v1::Schema& CreateSchemaRequest::schema() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.CreateSchemaRequest.schema)
  return _internal_schema();
}
inline void CreateSchemaRequest::unsafe_arena_set_allocated_schema(
    ::google::pubsub::v1::Schema* schema) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.schema_);
  }
  _impl_.schema_ = schema;
  if (schema) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.CreateSchemaRequest.schema)
}
inline ::google::pubsub::v1::Schema* CreateSchemaRequest::release_schema() {
  
  ::google::pubsub::v1::Schema* temp = _impl_.schema_;
  _impl_.schema_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::pubsub::v1::Schema* CreateSchemaRequest::unsafe_arena_release_schema() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.CreateSchemaRequest.schema)
  
  ::google::pubsub::v1::Schema* temp = _impl_.schema_;
  _impl_.schema_ = nullptr;
  return temp;
}
inline ::google::pubsub::v1::Schema* CreateSchemaRequest::_internal_mutable_schema() {
  
  if (_impl_.schema_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::pubsub::v1::Schema>(GetArenaForAllocation());
    _impl_.schema_ = p;
  }
  return _impl_.schema_;
}
inline ::google::pubsub::v1::Schema* CreateSchemaRequest::mutable_schema() {
  ::google::pubsub::v1::Schema* _msg = _internal_mutable_schema();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.CreateSchemaRequest.schema)
  return _msg;
}
inline void CreateSchemaRequest::set_allocated_schema(::google::pubsub::v1::Schema* schema) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.schema_;
  }
  if (schema) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(schema);
    if (message_arena != submessage_arena) {
      schema = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, schema, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.schema_ = schema;
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.CreateSchemaRequest.schema)
}

// string schema_id = 3;
inline void CreateSchemaRequest::clear_schema_id() {
  _impl_.schema_id_.ClearToEmpty();
}
inline const std::string& CreateSchemaRequest::schema_id() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.CreateSchemaRequest.schema_id)
  return _internal_schema_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateSchemaRequest::set_schema_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.schema_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.CreateSchemaRequest.schema_id)
}
inline std::string* CreateSchemaRequest::mutable_schema_id() {
  std::string* _s = _internal_mutable_schema_id();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.CreateSchemaRequest.schema_id)
  return _s;
}
inline const std::string& CreateSchemaRequest::_internal_schema_id() const {
  return _impl_.schema_id_.Get();
}
inline void CreateSchemaRequest::_internal_set_schema_id(const std::string& value) {
  
  _impl_.schema_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateSchemaRequest::_internal_mutable_schema_id() {
  
  return _impl_.schema_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateSchemaRequest::release_schema_id() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.CreateSchemaRequest.schema_id)
  return _impl_.schema_id_.Release();
}
inline void CreateSchemaRequest::set_allocated_schema_id(std::string* schema_id) {
  if (schema_id != nullptr) {
    
  } else {
    
  }
  _impl_.schema_id_.SetAllocated(schema_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.schema_id_.IsDefault()) {
    _impl_.schema_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.CreateSchemaRequest.schema_id)
}

// -------------------------------------------------------------------

// GetSchemaRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetSchemaRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GetSchemaRequest::name() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.GetSchemaRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetSchemaRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.GetSchemaRequest.name)
}
inline std::string* GetSchemaRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.GetSchemaRequest.name)
  return _s;
}
inline const std::string& GetSchemaRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GetSchemaRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetSchemaRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetSchemaRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.GetSchemaRequest.name)
  return _impl_.name_.Release();
}
inline void GetSchemaRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.GetSchemaRequest.name)
}

// .google.pubsub.v1.SchemaView view = 2;
inline void GetSchemaRequest::clear_view() {
  _impl_.view_ = 0;
}
inline ::google::pubsub::v1::SchemaView GetSchemaRequest::_internal_view() const {
  return static_cast< ::google::pubsub::v1::SchemaView >(_impl_.view_);
}
inline ::google::pubsub::v1::SchemaView GetSchemaRequest::view() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.GetSchemaRequest.view)
  return _internal_view();
}
inline void GetSchemaRequest::_internal_set_view(::google::pubsub::v1::SchemaView value) {
  
  _impl_.view_ = value;
}
inline void GetSchemaRequest::set_view(::google::pubsub::v1::SchemaView value) {
  _internal_set_view(value);
  // @@protoc_insertion_point(field_set:google.pubsub.v1.GetSchemaRequest.view)
}

// -------------------------------------------------------------------

// ListSchemasRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListSchemasRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& ListSchemasRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListSchemasRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListSchemasRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListSchemasRequest.parent)
}
inline std::string* ListSchemasRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ListSchemasRequest.parent)
  return _s;
}
inline const std::string& ListSchemasRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void ListSchemasRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* ListSchemasRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* ListSchemasRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ListSchemasRequest.parent)
  return _impl_.parent_.Release();
}
inline void ListSchemasRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ListSchemasRequest.parent)
}

// .google.pubsub.v1.SchemaView view = 2;
inline void ListSchemasRequest::clear_view() {
  _impl_.view_ = 0;
}
inline ::google::pubsub::v1::SchemaView ListSchemasRequest::_internal_view() const {
  return static_cast< ::google::pubsub::v1::SchemaView >(_impl_.view_);
}
inline ::google::pubsub::v1::SchemaView ListSchemasRequest::view() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListSchemasRequest.view)
  return _internal_view();
}
inline void ListSchemasRequest::_internal_set_view(::google::pubsub::v1::SchemaView value) {
  
  _impl_.view_ = value;
}
inline void ListSchemasRequest::set_view(::google::pubsub::v1::SchemaView value) {
  _internal_set_view(value);
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListSchemasRequest.view)
}

// int32 page_size = 3;
inline void ListSchemasRequest::clear_page_size() {
  _impl_.page_size_ = 0;
}
inline int32_t ListSchemasRequest::_internal_page_size() const {
  return _impl_.page_size_;
}
inline int32_t ListSchemasRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListSchemasRequest.page_size)
  return _internal_page_size();
}
inline void ListSchemasRequest::_internal_set_page_size(int32_t value) {
  
  _impl_.page_size_ = value;
}
inline void ListSchemasRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListSchemasRequest.page_size)
}

// string page_token = 4;
inline void ListSchemasRequest::clear_page_token() {
  _impl_.page_token_.ClearToEmpty();
}
inline const std::string& ListSchemasRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListSchemasRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListSchemasRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListSchemasRequest.page_token)
}
inline std::string* ListSchemasRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ListSchemasRequest.page_token)
  return _s;
}
inline const std::string& ListSchemasRequest::_internal_page_token() const {
  return _impl_.page_token_.Get();
}
inline void ListSchemasRequest::_internal_set_page_token(const std::string& value) {
  
  _impl_.page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListSchemasRequest::_internal_mutable_page_token() {
  
  return _impl_.page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListSchemasRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ListSchemasRequest.page_token)
  return _impl_.page_token_.Release();
}
inline void ListSchemasRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  _impl_.page_token_.SetAllocated(page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.page_token_.IsDefault()) {
    _impl_.page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ListSchemasRequest.page_token)
}

// -------------------------------------------------------------------

// ListSchemasResponse

// repeated .google.pubsub.v1.Schema schemas = 1;
inline int ListSchemasResponse::_internal_schemas_size() const {
  return _impl_.schemas_.size();
}
inline int ListSchemasResponse::schemas_size() const {
  return _internal_schemas_size();
}
inline void ListSchemasResponse::clear_schemas() {
  _impl_.schemas_.Clear();
}
inline ::google::pubsub::v1::Schema* ListSchemasResponse::mutable_schemas(int index) {
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ListSchemasResponse.schemas)
  return _impl_.schemas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::pubsub::v1::Schema >*
ListSchemasResponse::mutable_schemas() {
  // @@protoc_insertion_point(field_mutable_list:google.pubsub.v1.ListSchemasResponse.schemas)
  return &_impl_.schemas_;
}
inline const ::google::pubsub::v1::Schema& ListSchemasResponse::_internal_schemas(int index) const {
  return _impl_.schemas_.Get(index);
}
inline const ::google::pubsub::v1::Schema& ListSchemasResponse::schemas(int index) const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListSchemasResponse.schemas)
  return _internal_schemas(index);
}
inline ::google::pubsub::v1::Schema* ListSchemasResponse::_internal_add_schemas() {
  return _impl_.schemas_.Add();
}
inline ::google::pubsub::v1::Schema* ListSchemasResponse::add_schemas() {
  ::google::pubsub::v1::Schema* _add = _internal_add_schemas();
  // @@protoc_insertion_point(field_add:google.pubsub.v1.ListSchemasResponse.schemas)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::pubsub::v1::Schema >&
ListSchemasResponse::schemas() const {
  // @@protoc_insertion_point(field_list:google.pubsub.v1.ListSchemasResponse.schemas)
  return _impl_.schemas_;
}

// string next_page_token = 2;
inline void ListSchemasResponse::clear_next_page_token() {
  _impl_.next_page_token_.ClearToEmpty();
}
inline const std::string& ListSchemasResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListSchemasResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListSchemasResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.next_page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListSchemasResponse.next_page_token)
}
inline std::string* ListSchemasResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ListSchemasResponse.next_page_token)
  return _s;
}
inline const std::string& ListSchemasResponse::_internal_next_page_token() const {
  return _impl_.next_page_token_.Get();
}
inline void ListSchemasResponse::_internal_set_next_page_token(const std::string& value) {
  
  _impl_.next_page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListSchemasResponse::_internal_mutable_next_page_token() {
  
  return _impl_.next_page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListSchemasResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ListSchemasResponse.next_page_token)
  return _impl_.next_page_token_.Release();
}
inline void ListSchemasResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  _impl_.next_page_token_.SetAllocated(next_page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.next_page_token_.IsDefault()) {
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ListSchemasResponse.next_page_token)
}

// -------------------------------------------------------------------

// DeleteSchemaRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteSchemaRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DeleteSchemaRequest::name() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.DeleteSchemaRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteSchemaRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.DeleteSchemaRequest.name)
}
inline std::string* DeleteSchemaRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.DeleteSchemaRequest.name)
  return _s;
}
inline const std::string& DeleteSchemaRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DeleteSchemaRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteSchemaRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteSchemaRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.DeleteSchemaRequest.name)
  return _impl_.name_.Release();
}
inline void DeleteSchemaRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.DeleteSchemaRequest.name)
}

// -------------------------------------------------------------------

// ValidateSchemaRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ValidateSchemaRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& ValidateSchemaRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ValidateSchemaRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ValidateSchemaRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ValidateSchemaRequest.parent)
}
inline std::string* ValidateSchemaRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ValidateSchemaRequest.parent)
  return _s;
}
inline const std::string& ValidateSchemaRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void ValidateSchemaRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* ValidateSchemaRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* ValidateSchemaRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ValidateSchemaRequest.parent)
  return _impl_.parent_.Release();
}
inline void ValidateSchemaRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ValidateSchemaRequest.parent)
}

// .google.pubsub.v1.Schema schema = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool ValidateSchemaRequest::_internal_has_schema() const {
  return this != internal_default_instance() && _impl_.schema_ != nullptr;
}
inline bool ValidateSchemaRequest::has_schema() const {
  return _internal_has_schema();
}
inline void ValidateSchemaRequest::clear_schema() {
  if (GetArenaForAllocation() == nullptr && _impl_.schema_ != nullptr) {
    delete _impl_.schema_;
  }
  _impl_.schema_ = nullptr;
}
inline const ::google::pubsub::v1::Schema& ValidateSchemaRequest::_internal_schema() const {
  const ::google::pubsub::v1::Schema* p = _impl_.schema_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::pubsub::v1::Schema&>(
      ::google::pubsub::v1::_Schema_default_instance_);
}
inline const ::google::pubsub::v1::Schema& ValidateSchemaRequest::schema() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ValidateSchemaRequest.schema)
  return _internal_schema();
}
inline void ValidateSchemaRequest::unsafe_arena_set_allocated_schema(
    ::google::pubsub::v1::Schema* schema) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.schema_);
  }
  _impl_.schema_ = schema;
  if (schema) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.ValidateSchemaRequest.schema)
}
inline ::google::pubsub::v1::Schema* ValidateSchemaRequest::release_schema() {
  
  ::google::pubsub::v1::Schema* temp = _impl_.schema_;
  _impl_.schema_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::pubsub::v1::Schema* ValidateSchemaRequest::unsafe_arena_release_schema() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ValidateSchemaRequest.schema)
  
  ::google::pubsub::v1::Schema* temp = _impl_.schema_;
  _impl_.schema_ = nullptr;
  return temp;
}
inline ::google::pubsub::v1::Schema* ValidateSchemaRequest::_internal_mutable_schema() {
  
  if (_impl_.schema_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::pubsub::v1::Schema>(GetArenaForAllocation());
    _impl_.schema_ = p;
  }
  return _impl_.schema_;
}
inline ::google::pubsub::v1::Schema* ValidateSchemaRequest::mutable_schema() {
  ::google::pubsub::v1::Schema* _msg = _internal_mutable_schema();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ValidateSchemaRequest.schema)
  return _msg;
}
inline void ValidateSchemaRequest::set_allocated_schema(::google::pubsub::v1::Schema* schema) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.schema_;
  }
  if (schema) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(schema);
    if (message_arena != submessage_arena) {
      schema = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, schema, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.schema_ = schema;
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ValidateSchemaRequest.schema)
}

// -------------------------------------------------------------------

// ValidateSchemaResponse

// -------------------------------------------------------------------

// ValidateMessageRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ValidateMessageRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& ValidateMessageRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ValidateMessageRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ValidateMessageRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ValidateMessageRequest.parent)
}
inline std::string* ValidateMessageRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ValidateMessageRequest.parent)
  return _s;
}
inline const std::string& ValidateMessageRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void ValidateMessageRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* ValidateMessageRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* ValidateMessageRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ValidateMessageRequest.parent)
  return _impl_.parent_.Release();
}
inline void ValidateMessageRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ValidateMessageRequest.parent)
}

// string name = 2 [(.google.api.resource_reference) = {
inline bool ValidateMessageRequest::_internal_has_name() const {
  return schema_spec_case() == kName;
}
inline bool ValidateMessageRequest::has_name() const {
  return _internal_has_name();
}
inline void ValidateMessageRequest::set_has_name() {
  _impl_._oneof_case_[0] = kName;
}
inline void ValidateMessageRequest::clear_name() {
  if (_internal_has_name()) {
    _impl_.schema_spec_.name_.Destroy();
    clear_has_schema_spec();
  }
}
inline const std::string& ValidateMessageRequest::name() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ValidateMessageRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline void ValidateMessageRequest::set_name(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_name()) {
    clear_schema_spec();
    set_has_name();
    _impl_.schema_spec_.name_.InitDefault();
  }
  _impl_.schema_spec_.name_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ValidateMessageRequest.name)
}
inline std::string* ValidateMessageRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ValidateMessageRequest.name)
  return _s;
}
inline const std::string& ValidateMessageRequest::_internal_name() const {
  if (_internal_has_name()) {
    return _impl_.schema_spec_.name_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ValidateMessageRequest::_internal_set_name(const std::string& value) {
  if (!_internal_has_name()) {
    clear_schema_spec();
    set_has_name();
    _impl_.schema_spec_.name_.InitDefault();
  }
  _impl_.schema_spec_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ValidateMessageRequest::_internal_mutable_name() {
  if (!_internal_has_name()) {
    clear_schema_spec();
    set_has_name();
    _impl_.schema_spec_.name_.InitDefault();
  }
  return _impl_.schema_spec_.name_.Mutable(      GetArenaForAllocation());
}
inline std::string* ValidateMessageRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ValidateMessageRequest.name)
  if (_internal_has_name()) {
    clear_has_schema_spec();
    return _impl_.schema_spec_.name_.Release();
  } else {
    return nullptr;
  }
}
inline void ValidateMessageRequest::set_allocated_name(std::string* name) {
  if (has_schema_spec()) {
    clear_schema_spec();
  }
  if (name != nullptr) {
    set_has_name();
    _impl_.schema_spec_.name_.InitAllocated(name, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ValidateMessageRequest.name)
}

// .google.pubsub.v1.Schema schema = 3;
inline bool ValidateMessageRequest::_internal_has_schema() const {
  return schema_spec_case() == kSchema;
}
inline bool ValidateMessageRequest::has_schema() const {
  return _internal_has_schema();
}
inline void ValidateMessageRequest::set_has_schema() {
  _impl_._oneof_case_[0] = kSchema;
}
inline void ValidateMessageRequest::clear_schema() {
  if (_internal_has_schema()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.schema_spec_.schema_;
    }
    clear_has_schema_spec();
  }
}
inline ::google::pubsub::v1::Schema* ValidateMessageRequest::release_schema() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ValidateMessageRequest.schema)
  if (_internal_has_schema()) {
    clear_has_schema_spec();
    ::google::pubsub::v1::Schema* temp = _impl_.schema_spec_.schema_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.schema_spec_.schema_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::pubsub::v1::Schema& ValidateMessageRequest::_internal_schema() const {
  return _internal_has_schema()
      ? *_impl_.schema_spec_.schema_
      : reinterpret_cast< ::google::pubsub::v1::Schema&>(::google::pubsub::v1::_Schema_default_instance_);
}
inline const ::google::pubsub::v1::Schema& ValidateMessageRequest::schema() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ValidateMessageRequest.schema)
  return _internal_schema();
}
inline ::google::pubsub::v1::Schema* ValidateMessageRequest::unsafe_arena_release_schema() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.ValidateMessageRequest.schema)
  if (_internal_has_schema()) {
    clear_has_schema_spec();
    ::google::pubsub::v1::Schema* temp = _impl_.schema_spec_.schema_;
    _impl_.schema_spec_.schema_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ValidateMessageRequest::unsafe_arena_set_allocated_schema(::google::pubsub::v1::Schema* schema) {
  clear_schema_spec();
  if (schema) {
    set_has_schema();
    _impl_.schema_spec_.schema_ = schema;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.ValidateMessageRequest.schema)
}
inline ::google::pubsub::v1::Schema* ValidateMessageRequest::_internal_mutable_schema() {
  if (!_internal_has_schema()) {
    clear_schema_spec();
    set_has_schema();
    _impl_.schema_spec_.schema_ = CreateMaybeMessage< ::google::pubsub::v1::Schema >(GetArenaForAllocation());
  }
  return _impl_.schema_spec_.schema_;
}
inline ::google::pubsub::v1::Schema* ValidateMessageRequest::mutable_schema() {
  ::google::pubsub::v1::Schema* _msg = _internal_mutable_schema();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ValidateMessageRequest.schema)
  return _msg;
}

// bytes message = 4;
inline void ValidateMessageRequest::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& ValidateMessageRequest::message() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ValidateMessageRequest.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ValidateMessageRequest::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ValidateMessageRequest.message)
}
inline std::string* ValidateMessageRequest::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ValidateMessageRequest.message)
  return _s;
}
inline const std::string& ValidateMessageRequest::_internal_message() const {
  return _impl_.message_.Get();
}
inline void ValidateMessageRequest::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* ValidateMessageRequest::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* ValidateMessageRequest::release_message() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ValidateMessageRequest.message)
  return _impl_.message_.Release();
}
inline void ValidateMessageRequest::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ValidateMessageRequest.message)
}

// .google.pubsub.v1.Encoding encoding = 5;
inline void ValidateMessageRequest::clear_encoding() {
  _impl_.encoding_ = 0;
}
inline ::google::pubsub::v1::Encoding ValidateMessageRequest::_internal_encoding() const {
  return static_cast< ::google::pubsub::v1::Encoding >(_impl_.encoding_);
}
inline ::google::pubsub::v1::Encoding ValidateMessageRequest::encoding() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ValidateMessageRequest.encoding)
  return _internal_encoding();
}
inline void ValidateMessageRequest::_internal_set_encoding(::google::pubsub::v1::Encoding value) {
  
  _impl_.encoding_ = value;
}
inline void ValidateMessageRequest::set_encoding(::google::pubsub::v1::Encoding value) {
  _internal_set_encoding(value);
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ValidateMessageRequest.encoding)
}

inline bool ValidateMessageRequest::has_schema_spec() const {
  return schema_spec_case() != SCHEMA_SPEC_NOT_SET;
}
inline void ValidateMessageRequest::clear_has_schema_spec() {
  _impl_._oneof_case_[0] = SCHEMA_SPEC_NOT_SET;
}
inline ValidateMessageRequest::SchemaSpecCase ValidateMessageRequest::schema_spec_case() const {
  return ValidateMessageRequest::SchemaSpecCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ValidateMessageResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace pubsub
}  // namespace google

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::google::pubsub::v1::Schema_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::pubsub::v1::Schema_Type>() {
  return ::google::pubsub::v1::Schema_Type_descriptor();
}
template <> struct is_proto_enum< ::google::pubsub::v1::SchemaView> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::pubsub::v1::SchemaView>() {
  return ::google::pubsub::v1::SchemaView_descriptor();
}
template <> struct is_proto_enum< ::google::pubsub::v1::Encoding> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::pubsub::v1::Encoding>() {
  return ::google::pubsub::v1::Encoding_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fpubsub_2fv1_2fschema_2eproto
