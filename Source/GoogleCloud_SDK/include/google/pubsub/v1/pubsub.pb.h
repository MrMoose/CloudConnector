// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/pubsub/v1/pubsub.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fpubsub_2fv1_2fpubsub_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fpubsub_2fv1_2fpubsub_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include "google/api/field_behavior.pb.h"
#include "google/api/resource.pb.h"
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/field_mask.pb.h>
#include <google/protobuf/timestamp.pb.h>
#include "google/pubsub/v1/schema.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fpubsub_2fv1_2fpubsub_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fpubsub_2fv1_2fpubsub_2eproto;
namespace google {
namespace pubsub {
namespace v1 {
class AcknowledgeRequest;
struct AcknowledgeRequestDefaultTypeInternal;
extern AcknowledgeRequestDefaultTypeInternal _AcknowledgeRequest_default_instance_;
class BigQueryConfig;
struct BigQueryConfigDefaultTypeInternal;
extern BigQueryConfigDefaultTypeInternal _BigQueryConfig_default_instance_;
class CreateSnapshotRequest;
struct CreateSnapshotRequestDefaultTypeInternal;
extern CreateSnapshotRequestDefaultTypeInternal _CreateSnapshotRequest_default_instance_;
class CreateSnapshotRequest_LabelsEntry_DoNotUse;
struct CreateSnapshotRequest_LabelsEntry_DoNotUseDefaultTypeInternal;
extern CreateSnapshotRequest_LabelsEntry_DoNotUseDefaultTypeInternal _CreateSnapshotRequest_LabelsEntry_DoNotUse_default_instance_;
class DeadLetterPolicy;
struct DeadLetterPolicyDefaultTypeInternal;
extern DeadLetterPolicyDefaultTypeInternal _DeadLetterPolicy_default_instance_;
class DeleteSnapshotRequest;
struct DeleteSnapshotRequestDefaultTypeInternal;
extern DeleteSnapshotRequestDefaultTypeInternal _DeleteSnapshotRequest_default_instance_;
class DeleteSubscriptionRequest;
struct DeleteSubscriptionRequestDefaultTypeInternal;
extern DeleteSubscriptionRequestDefaultTypeInternal _DeleteSubscriptionRequest_default_instance_;
class DeleteTopicRequest;
struct DeleteTopicRequestDefaultTypeInternal;
extern DeleteTopicRequestDefaultTypeInternal _DeleteTopicRequest_default_instance_;
class DetachSubscriptionRequest;
struct DetachSubscriptionRequestDefaultTypeInternal;
extern DetachSubscriptionRequestDefaultTypeInternal _DetachSubscriptionRequest_default_instance_;
class DetachSubscriptionResponse;
struct DetachSubscriptionResponseDefaultTypeInternal;
extern DetachSubscriptionResponseDefaultTypeInternal _DetachSubscriptionResponse_default_instance_;
class ExpirationPolicy;
struct ExpirationPolicyDefaultTypeInternal;
extern ExpirationPolicyDefaultTypeInternal _ExpirationPolicy_default_instance_;
class GetSnapshotRequest;
struct GetSnapshotRequestDefaultTypeInternal;
extern GetSnapshotRequestDefaultTypeInternal _GetSnapshotRequest_default_instance_;
class GetSubscriptionRequest;
struct GetSubscriptionRequestDefaultTypeInternal;
extern GetSubscriptionRequestDefaultTypeInternal _GetSubscriptionRequest_default_instance_;
class GetTopicRequest;
struct GetTopicRequestDefaultTypeInternal;
extern GetTopicRequestDefaultTypeInternal _GetTopicRequest_default_instance_;
class ListSnapshotsRequest;
struct ListSnapshotsRequestDefaultTypeInternal;
extern ListSnapshotsRequestDefaultTypeInternal _ListSnapshotsRequest_default_instance_;
class ListSnapshotsResponse;
struct ListSnapshotsResponseDefaultTypeInternal;
extern ListSnapshotsResponseDefaultTypeInternal _ListSnapshotsResponse_default_instance_;
class ListSubscriptionsRequest;
struct ListSubscriptionsRequestDefaultTypeInternal;
extern ListSubscriptionsRequestDefaultTypeInternal _ListSubscriptionsRequest_default_instance_;
class ListSubscriptionsResponse;
struct ListSubscriptionsResponseDefaultTypeInternal;
extern ListSubscriptionsResponseDefaultTypeInternal _ListSubscriptionsResponse_default_instance_;
class ListTopicSnapshotsRequest;
struct ListTopicSnapshotsRequestDefaultTypeInternal;
extern ListTopicSnapshotsRequestDefaultTypeInternal _ListTopicSnapshotsRequest_default_instance_;
class ListTopicSnapshotsResponse;
struct ListTopicSnapshotsResponseDefaultTypeInternal;
extern ListTopicSnapshotsResponseDefaultTypeInternal _ListTopicSnapshotsResponse_default_instance_;
class ListTopicSubscriptionsRequest;
struct ListTopicSubscriptionsRequestDefaultTypeInternal;
extern ListTopicSubscriptionsRequestDefaultTypeInternal _ListTopicSubscriptionsRequest_default_instance_;
class ListTopicSubscriptionsResponse;
struct ListTopicSubscriptionsResponseDefaultTypeInternal;
extern ListTopicSubscriptionsResponseDefaultTypeInternal _ListTopicSubscriptionsResponse_default_instance_;
class ListTopicsRequest;
struct ListTopicsRequestDefaultTypeInternal;
extern ListTopicsRequestDefaultTypeInternal _ListTopicsRequest_default_instance_;
class ListTopicsResponse;
struct ListTopicsResponseDefaultTypeInternal;
extern ListTopicsResponseDefaultTypeInternal _ListTopicsResponse_default_instance_;
class MessageStoragePolicy;
struct MessageStoragePolicyDefaultTypeInternal;
extern MessageStoragePolicyDefaultTypeInternal _MessageStoragePolicy_default_instance_;
class ModifyAckDeadlineRequest;
struct ModifyAckDeadlineRequestDefaultTypeInternal;
extern ModifyAckDeadlineRequestDefaultTypeInternal _ModifyAckDeadlineRequest_default_instance_;
class ModifyPushConfigRequest;
struct ModifyPushConfigRequestDefaultTypeInternal;
extern ModifyPushConfigRequestDefaultTypeInternal _ModifyPushConfigRequest_default_instance_;
class PublishRequest;
struct PublishRequestDefaultTypeInternal;
extern PublishRequestDefaultTypeInternal _PublishRequest_default_instance_;
class PublishResponse;
struct PublishResponseDefaultTypeInternal;
extern PublishResponseDefaultTypeInternal _PublishResponse_default_instance_;
class PubsubMessage;
struct PubsubMessageDefaultTypeInternal;
extern PubsubMessageDefaultTypeInternal _PubsubMessage_default_instance_;
class PubsubMessage_AttributesEntry_DoNotUse;
struct PubsubMessage_AttributesEntry_DoNotUseDefaultTypeInternal;
extern PubsubMessage_AttributesEntry_DoNotUseDefaultTypeInternal _PubsubMessage_AttributesEntry_DoNotUse_default_instance_;
class PullRequest;
struct PullRequestDefaultTypeInternal;
extern PullRequestDefaultTypeInternal _PullRequest_default_instance_;
class PullResponse;
struct PullResponseDefaultTypeInternal;
extern PullResponseDefaultTypeInternal _PullResponse_default_instance_;
class PushConfig;
struct PushConfigDefaultTypeInternal;
extern PushConfigDefaultTypeInternal _PushConfig_default_instance_;
class PushConfig_AttributesEntry_DoNotUse;
struct PushConfig_AttributesEntry_DoNotUseDefaultTypeInternal;
extern PushConfig_AttributesEntry_DoNotUseDefaultTypeInternal _PushConfig_AttributesEntry_DoNotUse_default_instance_;
class PushConfig_OidcToken;
struct PushConfig_OidcTokenDefaultTypeInternal;
extern PushConfig_OidcTokenDefaultTypeInternal _PushConfig_OidcToken_default_instance_;
class ReceivedMessage;
struct ReceivedMessageDefaultTypeInternal;
extern ReceivedMessageDefaultTypeInternal _ReceivedMessage_default_instance_;
class RetryPolicy;
struct RetryPolicyDefaultTypeInternal;
extern RetryPolicyDefaultTypeInternal _RetryPolicy_default_instance_;
class SchemaSettings;
struct SchemaSettingsDefaultTypeInternal;
extern SchemaSettingsDefaultTypeInternal _SchemaSettings_default_instance_;
class SeekRequest;
struct SeekRequestDefaultTypeInternal;
extern SeekRequestDefaultTypeInternal _SeekRequest_default_instance_;
class SeekResponse;
struct SeekResponseDefaultTypeInternal;
extern SeekResponseDefaultTypeInternal _SeekResponse_default_instance_;
class Snapshot;
struct SnapshotDefaultTypeInternal;
extern SnapshotDefaultTypeInternal _Snapshot_default_instance_;
class Snapshot_LabelsEntry_DoNotUse;
struct Snapshot_LabelsEntry_DoNotUseDefaultTypeInternal;
extern Snapshot_LabelsEntry_DoNotUseDefaultTypeInternal _Snapshot_LabelsEntry_DoNotUse_default_instance_;
class StreamingPullRequest;
struct StreamingPullRequestDefaultTypeInternal;
extern StreamingPullRequestDefaultTypeInternal _StreamingPullRequest_default_instance_;
class StreamingPullResponse;
struct StreamingPullResponseDefaultTypeInternal;
extern StreamingPullResponseDefaultTypeInternal _StreamingPullResponse_default_instance_;
class StreamingPullResponse_AcknowledgeConfirmation;
struct StreamingPullResponse_AcknowledgeConfirmationDefaultTypeInternal;
extern StreamingPullResponse_AcknowledgeConfirmationDefaultTypeInternal _StreamingPullResponse_AcknowledgeConfirmation_default_instance_;
class StreamingPullResponse_ModifyAckDeadlineConfirmation;
struct StreamingPullResponse_ModifyAckDeadlineConfirmationDefaultTypeInternal;
extern StreamingPullResponse_ModifyAckDeadlineConfirmationDefaultTypeInternal _StreamingPullResponse_ModifyAckDeadlineConfirmation_default_instance_;
class StreamingPullResponse_SubscriptionProperties;
struct StreamingPullResponse_SubscriptionPropertiesDefaultTypeInternal;
extern StreamingPullResponse_SubscriptionPropertiesDefaultTypeInternal _StreamingPullResponse_SubscriptionProperties_default_instance_;
class Subscription;
struct SubscriptionDefaultTypeInternal;
extern SubscriptionDefaultTypeInternal _Subscription_default_instance_;
class Subscription_LabelsEntry_DoNotUse;
struct Subscription_LabelsEntry_DoNotUseDefaultTypeInternal;
extern Subscription_LabelsEntry_DoNotUseDefaultTypeInternal _Subscription_LabelsEntry_DoNotUse_default_instance_;
class Topic;
struct TopicDefaultTypeInternal;
extern TopicDefaultTypeInternal _Topic_default_instance_;
class Topic_LabelsEntry_DoNotUse;
struct Topic_LabelsEntry_DoNotUseDefaultTypeInternal;
extern Topic_LabelsEntry_DoNotUseDefaultTypeInternal _Topic_LabelsEntry_DoNotUse_default_instance_;
class UpdateSnapshotRequest;
struct UpdateSnapshotRequestDefaultTypeInternal;
extern UpdateSnapshotRequestDefaultTypeInternal _UpdateSnapshotRequest_default_instance_;
class UpdateSubscriptionRequest;
struct UpdateSubscriptionRequestDefaultTypeInternal;
extern UpdateSubscriptionRequestDefaultTypeInternal _UpdateSubscriptionRequest_default_instance_;
class UpdateTopicRequest;
struct UpdateTopicRequestDefaultTypeInternal;
extern UpdateTopicRequestDefaultTypeInternal _UpdateTopicRequest_default_instance_;
}  // namespace v1
}  // namespace pubsub
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::pubsub::v1::AcknowledgeRequest* Arena::CreateMaybeMessage<::google::pubsub::v1::AcknowledgeRequest>(Arena*);
template<> ::google::pubsub::v1::BigQueryConfig* Arena::CreateMaybeMessage<::google::pubsub::v1::BigQueryConfig>(Arena*);
template<> ::google::pubsub::v1::CreateSnapshotRequest* Arena::CreateMaybeMessage<::google::pubsub::v1::CreateSnapshotRequest>(Arena*);
template<> ::google::pubsub::v1::CreateSnapshotRequest_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage<::google::pubsub::v1::CreateSnapshotRequest_LabelsEntry_DoNotUse>(Arena*);
template<> ::google::pubsub::v1::DeadLetterPolicy* Arena::CreateMaybeMessage<::google::pubsub::v1::DeadLetterPolicy>(Arena*);
template<> ::google::pubsub::v1::DeleteSnapshotRequest* Arena::CreateMaybeMessage<::google::pubsub::v1::DeleteSnapshotRequest>(Arena*);
template<> ::google::pubsub::v1::DeleteSubscriptionRequest* Arena::CreateMaybeMessage<::google::pubsub::v1::DeleteSubscriptionRequest>(Arena*);
template<> ::google::pubsub::v1::DeleteTopicRequest* Arena::CreateMaybeMessage<::google::pubsub::v1::DeleteTopicRequest>(Arena*);
template<> ::google::pubsub::v1::DetachSubscriptionRequest* Arena::CreateMaybeMessage<::google::pubsub::v1::DetachSubscriptionRequest>(Arena*);
template<> ::google::pubsub::v1::DetachSubscriptionResponse* Arena::CreateMaybeMessage<::google::pubsub::v1::DetachSubscriptionResponse>(Arena*);
template<> ::google::pubsub::v1::ExpirationPolicy* Arena::CreateMaybeMessage<::google::pubsub::v1::ExpirationPolicy>(Arena*);
template<> ::google::pubsub::v1::GetSnapshotRequest* Arena::CreateMaybeMessage<::google::pubsub::v1::GetSnapshotRequest>(Arena*);
template<> ::google::pubsub::v1::GetSubscriptionRequest* Arena::CreateMaybeMessage<::google::pubsub::v1::GetSubscriptionRequest>(Arena*);
template<> ::google::pubsub::v1::GetTopicRequest* Arena::CreateMaybeMessage<::google::pubsub::v1::GetTopicRequest>(Arena*);
template<> ::google::pubsub::v1::ListSnapshotsRequest* Arena::CreateMaybeMessage<::google::pubsub::v1::ListSnapshotsRequest>(Arena*);
template<> ::google::pubsub::v1::ListSnapshotsResponse* Arena::CreateMaybeMessage<::google::pubsub::v1::ListSnapshotsResponse>(Arena*);
template<> ::google::pubsub::v1::ListSubscriptionsRequest* Arena::CreateMaybeMessage<::google::pubsub::v1::ListSubscriptionsRequest>(Arena*);
template<> ::google::pubsub::v1::ListSubscriptionsResponse* Arena::CreateMaybeMessage<::google::pubsub::v1::ListSubscriptionsResponse>(Arena*);
template<> ::google::pubsub::v1::ListTopicSnapshotsRequest* Arena::CreateMaybeMessage<::google::pubsub::v1::ListTopicSnapshotsRequest>(Arena*);
template<> ::google::pubsub::v1::ListTopicSnapshotsResponse* Arena::CreateMaybeMessage<::google::pubsub::v1::ListTopicSnapshotsResponse>(Arena*);
template<> ::google::pubsub::v1::ListTopicSubscriptionsRequest* Arena::CreateMaybeMessage<::google::pubsub::v1::ListTopicSubscriptionsRequest>(Arena*);
template<> ::google::pubsub::v1::ListTopicSubscriptionsResponse* Arena::CreateMaybeMessage<::google::pubsub::v1::ListTopicSubscriptionsResponse>(Arena*);
template<> ::google::pubsub::v1::ListTopicsRequest* Arena::CreateMaybeMessage<::google::pubsub::v1::ListTopicsRequest>(Arena*);
template<> ::google::pubsub::v1::ListTopicsResponse* Arena::CreateMaybeMessage<::google::pubsub::v1::ListTopicsResponse>(Arena*);
template<> ::google::pubsub::v1::MessageStoragePolicy* Arena::CreateMaybeMessage<::google::pubsub::v1::MessageStoragePolicy>(Arena*);
template<> ::google::pubsub::v1::ModifyAckDeadlineRequest* Arena::CreateMaybeMessage<::google::pubsub::v1::ModifyAckDeadlineRequest>(Arena*);
template<> ::google::pubsub::v1::ModifyPushConfigRequest* Arena::CreateMaybeMessage<::google::pubsub::v1::ModifyPushConfigRequest>(Arena*);
template<> ::google::pubsub::v1::PublishRequest* Arena::CreateMaybeMessage<::google::pubsub::v1::PublishRequest>(Arena*);
template<> ::google::pubsub::v1::PublishResponse* Arena::CreateMaybeMessage<::google::pubsub::v1::PublishResponse>(Arena*);
template<> ::google::pubsub::v1::PubsubMessage* Arena::CreateMaybeMessage<::google::pubsub::v1::PubsubMessage>(Arena*);
template<> ::google::pubsub::v1::PubsubMessage_AttributesEntry_DoNotUse* Arena::CreateMaybeMessage<::google::pubsub::v1::PubsubMessage_AttributesEntry_DoNotUse>(Arena*);
template<> ::google::pubsub::v1::PullRequest* Arena::CreateMaybeMessage<::google::pubsub::v1::PullRequest>(Arena*);
template<> ::google::pubsub::v1::PullResponse* Arena::CreateMaybeMessage<::google::pubsub::v1::PullResponse>(Arena*);
template<> ::google::pubsub::v1::PushConfig* Arena::CreateMaybeMessage<::google::pubsub::v1::PushConfig>(Arena*);
template<> ::google::pubsub::v1::PushConfig_AttributesEntry_DoNotUse* Arena::CreateMaybeMessage<::google::pubsub::v1::PushConfig_AttributesEntry_DoNotUse>(Arena*);
template<> ::google::pubsub::v1::PushConfig_OidcToken* Arena::CreateMaybeMessage<::google::pubsub::v1::PushConfig_OidcToken>(Arena*);
template<> ::google::pubsub::v1::ReceivedMessage* Arena::CreateMaybeMessage<::google::pubsub::v1::ReceivedMessage>(Arena*);
template<> ::google::pubsub::v1::RetryPolicy* Arena::CreateMaybeMessage<::google::pubsub::v1::RetryPolicy>(Arena*);
template<> ::google::pubsub::v1::SchemaSettings* Arena::CreateMaybeMessage<::google::pubsub::v1::SchemaSettings>(Arena*);
template<> ::google::pubsub::v1::SeekRequest* Arena::CreateMaybeMessage<::google::pubsub::v1::SeekRequest>(Arena*);
template<> ::google::pubsub::v1::SeekResponse* Arena::CreateMaybeMessage<::google::pubsub::v1::SeekResponse>(Arena*);
template<> ::google::pubsub::v1::Snapshot* Arena::CreateMaybeMessage<::google::pubsub::v1::Snapshot>(Arena*);
template<> ::google::pubsub::v1::Snapshot_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage<::google::pubsub::v1::Snapshot_LabelsEntry_DoNotUse>(Arena*);
template<> ::google::pubsub::v1::StreamingPullRequest* Arena::CreateMaybeMessage<::google::pubsub::v1::StreamingPullRequest>(Arena*);
template<> ::google::pubsub::v1::StreamingPullResponse* Arena::CreateMaybeMessage<::google::pubsub::v1::StreamingPullResponse>(Arena*);
template<> ::google::pubsub::v1::StreamingPullResponse_AcknowledgeConfirmation* Arena::CreateMaybeMessage<::google::pubsub::v1::StreamingPullResponse_AcknowledgeConfirmation>(Arena*);
template<> ::google::pubsub::v1::StreamingPullResponse_ModifyAckDeadlineConfirmation* Arena::CreateMaybeMessage<::google::pubsub::v1::StreamingPullResponse_ModifyAckDeadlineConfirmation>(Arena*);
template<> ::google::pubsub::v1::StreamingPullResponse_SubscriptionProperties* Arena::CreateMaybeMessage<::google::pubsub::v1::StreamingPullResponse_SubscriptionProperties>(Arena*);
template<> ::google::pubsub::v1::Subscription* Arena::CreateMaybeMessage<::google::pubsub::v1::Subscription>(Arena*);
template<> ::google::pubsub::v1::Subscription_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage<::google::pubsub::v1::Subscription_LabelsEntry_DoNotUse>(Arena*);
template<> ::google::pubsub::v1::Topic* Arena::CreateMaybeMessage<::google::pubsub::v1::Topic>(Arena*);
template<> ::google::pubsub::v1::Topic_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage<::google::pubsub::v1::Topic_LabelsEntry_DoNotUse>(Arena*);
template<> ::google::pubsub::v1::UpdateSnapshotRequest* Arena::CreateMaybeMessage<::google::pubsub::v1::UpdateSnapshotRequest>(Arena*);
template<> ::google::pubsub::v1::UpdateSubscriptionRequest* Arena::CreateMaybeMessage<::google::pubsub::v1::UpdateSubscriptionRequest>(Arena*);
template<> ::google::pubsub::v1::UpdateTopicRequest* Arena::CreateMaybeMessage<::google::pubsub::v1::UpdateTopicRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace pubsub {
namespace v1 {

enum Subscription_State : int {
  Subscription_State_STATE_UNSPECIFIED = 0,
  Subscription_State_ACTIVE = 1,
  Subscription_State_RESOURCE_ERROR = 2,
  Subscription_State_Subscription_State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Subscription_State_Subscription_State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Subscription_State_IsValid(int value);
constexpr Subscription_State Subscription_State_State_MIN = Subscription_State_STATE_UNSPECIFIED;
constexpr Subscription_State Subscription_State_State_MAX = Subscription_State_RESOURCE_ERROR;
constexpr int Subscription_State_State_ARRAYSIZE = Subscription_State_State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Subscription_State_descriptor();
template<typename T>
inline const std::string& Subscription_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Subscription_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Subscription_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Subscription_State_descriptor(), enum_t_value);
}
inline bool Subscription_State_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Subscription_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Subscription_State>(
    Subscription_State_descriptor(), name, value);
}
enum BigQueryConfig_State : int {
  BigQueryConfig_State_STATE_UNSPECIFIED = 0,
  BigQueryConfig_State_ACTIVE = 1,
  BigQueryConfig_State_PERMISSION_DENIED = 2,
  BigQueryConfig_State_NOT_FOUND = 3,
  BigQueryConfig_State_SCHEMA_MISMATCH = 4,
  BigQueryConfig_State_BigQueryConfig_State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  BigQueryConfig_State_BigQueryConfig_State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool BigQueryConfig_State_IsValid(int value);
constexpr BigQueryConfig_State BigQueryConfig_State_State_MIN = BigQueryConfig_State_STATE_UNSPECIFIED;
constexpr BigQueryConfig_State BigQueryConfig_State_State_MAX = BigQueryConfig_State_SCHEMA_MISMATCH;
constexpr int BigQueryConfig_State_State_ARRAYSIZE = BigQueryConfig_State_State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BigQueryConfig_State_descriptor();
template<typename T>
inline const std::string& BigQueryConfig_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BigQueryConfig_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BigQueryConfig_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BigQueryConfig_State_descriptor(), enum_t_value);
}
inline bool BigQueryConfig_State_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BigQueryConfig_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BigQueryConfig_State>(
    BigQueryConfig_State_descriptor(), name, value);
}
// ===================================================================

class MessageStoragePolicy final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.MessageStoragePolicy) */ {
 public:
  inline MessageStoragePolicy() : MessageStoragePolicy(nullptr) {}
  ~MessageStoragePolicy() override;
  explicit PROTOBUF_CONSTEXPR MessageStoragePolicy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MessageStoragePolicy(const MessageStoragePolicy& from);
  MessageStoragePolicy(MessageStoragePolicy&& from) noexcept
    : MessageStoragePolicy() {
    *this = ::std::move(from);
  }

  inline MessageStoragePolicy& operator=(const MessageStoragePolicy& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageStoragePolicy& operator=(MessageStoragePolicy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MessageStoragePolicy& default_instance() {
    return *internal_default_instance();
  }
  static inline const MessageStoragePolicy* internal_default_instance() {
    return reinterpret_cast<const MessageStoragePolicy*>(
               &_MessageStoragePolicy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MessageStoragePolicy& a, MessageStoragePolicy& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageStoragePolicy* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageStoragePolicy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MessageStoragePolicy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MessageStoragePolicy>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MessageStoragePolicy& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MessageStoragePolicy& from) {
    MessageStoragePolicy::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageStoragePolicy* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.pubsub.v1.MessageStoragePolicy";
  }
  protected:
  explicit MessageStoragePolicy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAllowedPersistenceRegionsFieldNumber = 1,
  };
  // repeated string allowed_persistence_regions = 1;
  int allowed_persistence_regions_size() const;
  private:
  int _internal_allowed_persistence_regions_size() const;
  public:
  void clear_allowed_persistence_regions();
  const std::string& allowed_persistence_regions(int index) const;
  std::string* mutable_allowed_persistence_regions(int index);
  void set_allowed_persistence_regions(int index, const std::string& value);
  void set_allowed_persistence_regions(int index, std::string&& value);
  void set_allowed_persistence_regions(int index, const char* value);
  void set_allowed_persistence_regions(int index, const char* value, size_t size);
  std::string* add_allowed_persistence_regions();
  void add_allowed_persistence_regions(const std::string& value);
  void add_allowed_persistence_regions(std::string&& value);
  void add_allowed_persistence_regions(const char* value);
  void add_allowed_persistence_regions(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& allowed_persistence_regions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_allowed_persistence_regions();
  private:
  const std::string& _internal_allowed_persistence_regions(int index) const;
  std::string* _internal_add_allowed_persistence_regions();
  public:

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.MessageStoragePolicy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> allowed_persistence_regions_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class SchemaSettings final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.SchemaSettings) */ {
 public:
  inline SchemaSettings() : SchemaSettings(nullptr) {}
  ~SchemaSettings() override;
  explicit PROTOBUF_CONSTEXPR SchemaSettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SchemaSettings(const SchemaSettings& from);
  SchemaSettings(SchemaSettings&& from) noexcept
    : SchemaSettings() {
    *this = ::std::move(from);
  }

  inline SchemaSettings& operator=(const SchemaSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline SchemaSettings& operator=(SchemaSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SchemaSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const SchemaSettings* internal_default_instance() {
    return reinterpret_cast<const SchemaSettings*>(
               &_SchemaSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SchemaSettings& a, SchemaSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(SchemaSettings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SchemaSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SchemaSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SchemaSettings>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SchemaSettings& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SchemaSettings& from) {
    SchemaSettings::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SchemaSettings* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.pubsub.v1.SchemaSettings";
  }
  protected:
  explicit SchemaSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSchemaFieldNumber = 1,
    kEncodingFieldNumber = 2,
  };
  // string schema = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_schema();
  const std::string& schema() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_schema(ArgT0&& arg0, ArgT... args);
  std::string* mutable_schema();
  PROTOBUF_NODISCARD std::string* release_schema();
  void set_allocated_schema(std::string* schema);
  private:
  const std::string& _internal_schema() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_schema(const std::string& value);
  std::string* _internal_mutable_schema();
  public:

  // .google.pubsub.v1.Encoding encoding = 2;
  void clear_encoding();
  ::google::pubsub::v1::Encoding encoding() const;
  void set_encoding(::google::pubsub::v1::Encoding value);
  private:
  ::google::pubsub::v1::Encoding _internal_encoding() const;
  void _internal_set_encoding(::google::pubsub::v1::Encoding value);
  public:

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.SchemaSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr schema_;
    int encoding_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class Topic_LabelsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Topic_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Topic_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  Topic_LabelsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR Topic_LabelsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Topic_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Topic_LabelsEntry_DoNotUse& other);
  static const Topic_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Topic_LabelsEntry_DoNotUse*>(&_Topic_LabelsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.pubsub.v1.Topic.LabelsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.pubsub.v1.Topic.LabelsEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};

// -------------------------------------------------------------------

class Topic final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.Topic) */ {
 public:
  inline Topic() : Topic(nullptr) {}
  ~Topic() override;
  explicit PROTOBUF_CONSTEXPR Topic(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Topic(const Topic& from);
  Topic(Topic&& from) noexcept
    : Topic() {
    *this = ::std::move(from);
  }

  inline Topic& operator=(const Topic& from) {
    CopyFrom(from);
    return *this;
  }
  inline Topic& operator=(Topic&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Topic& default_instance() {
    return *internal_default_instance();
  }
  static inline const Topic* internal_default_instance() {
    return reinterpret_cast<const Topic*>(
               &_Topic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Topic& a, Topic& b) {
    a.Swap(&b);
  }
  inline void Swap(Topic* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Topic* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Topic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Topic>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Topic& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Topic& from) {
    Topic::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Topic* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.pubsub.v1.Topic";
  }
  protected:
  explicit Topic(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 2,
    kNameFieldNumber = 1,
    kKmsKeyNameFieldNumber = 5,
    kMessageStoragePolicyFieldNumber = 3,
    kSchemaSettingsFieldNumber = 6,
    kMessageRetentionDurationFieldNumber = 8,
    kSatisfiesPzsFieldNumber = 7,
  };
  // map<string, string> labels = 2;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_labels();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_labels();

  // string name = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string kms_key_name = 5;
  void clear_kms_key_name();
  const std::string& kms_key_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_kms_key_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_kms_key_name();
  PROTOBUF_NODISCARD std::string* release_kms_key_name();
  void set_allocated_kms_key_name(std::string* kms_key_name);
  private:
  const std::string& _internal_kms_key_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_kms_key_name(const std::string& value);
  std::string* _internal_mutable_kms_key_name();
  public:

  // .google.pubsub.v1.MessageStoragePolicy message_storage_policy = 3;
  bool has_message_storage_policy() const;
  private:
  bool _internal_has_message_storage_policy() const;
  public:
  void clear_message_storage_policy();
  const ::google::pubsub::v1::MessageStoragePolicy& message_storage_policy() const;
  PROTOBUF_NODISCARD ::google::pubsub::v1::MessageStoragePolicy* release_message_storage_policy();
  ::google::pubsub::v1::MessageStoragePolicy* mutable_message_storage_policy();
  void set_allocated_message_storage_policy(::google::pubsub::v1::MessageStoragePolicy* message_storage_policy);
  private:
  const ::google::pubsub::v1::MessageStoragePolicy& _internal_message_storage_policy() const;
  ::google::pubsub::v1::MessageStoragePolicy* _internal_mutable_message_storage_policy();
  public:
  void unsafe_arena_set_allocated_message_storage_policy(
      ::google::pubsub::v1::MessageStoragePolicy* message_storage_policy);
  ::google::pubsub::v1::MessageStoragePolicy* unsafe_arena_release_message_storage_policy();

  // .google.pubsub.v1.SchemaSettings schema_settings = 6;
  bool has_schema_settings() const;
  private:
  bool _internal_has_schema_settings() const;
  public:
  void clear_schema_settings();
  const ::google::pubsub::v1::SchemaSettings& schema_settings() const;
  PROTOBUF_NODISCARD ::google::pubsub::v1::SchemaSettings* release_schema_settings();
  ::google::pubsub::v1::SchemaSettings* mutable_schema_settings();
  void set_allocated_schema_settings(::google::pubsub::v1::SchemaSettings* schema_settings);
  private:
  const ::google::pubsub::v1::SchemaSettings& _internal_schema_settings() const;
  ::google::pubsub::v1::SchemaSettings* _internal_mutable_schema_settings();
  public:
  void unsafe_arena_set_allocated_schema_settings(
      ::google::pubsub::v1::SchemaSettings* schema_settings);
  ::google::pubsub::v1::SchemaSettings* unsafe_arena_release_schema_settings();

  // .google.protobuf.Duration message_retention_duration = 8;
  bool has_message_retention_duration() const;
  private:
  bool _internal_has_message_retention_duration() const;
  public:
  void clear_message_retention_duration();
  const ::PROTOBUF_NAMESPACE_ID::Duration& message_retention_duration() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_message_retention_duration();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_message_retention_duration();
  void set_allocated_message_retention_duration(::PROTOBUF_NAMESPACE_ID::Duration* message_retention_duration);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_message_retention_duration() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_message_retention_duration();
  public:
  void unsafe_arena_set_allocated_message_retention_duration(
      ::PROTOBUF_NAMESPACE_ID::Duration* message_retention_duration);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_message_retention_duration();

  // bool satisfies_pzs = 7;
  void clear_satisfies_pzs();
  bool satisfies_pzs() const;
  void set_satisfies_pzs(bool value);
  private:
  bool _internal_satisfies_pzs() const;
  void _internal_set_satisfies_pzs(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.Topic)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        Topic_LabelsEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> labels_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kms_key_name_;
    ::google::pubsub::v1::MessageStoragePolicy* message_storage_policy_;
    ::google::pubsub::v1::SchemaSettings* schema_settings_;
    ::PROTOBUF_NAMESPACE_ID::Duration* message_retention_duration_;
    bool satisfies_pzs_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class PubsubMessage_AttributesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PubsubMessage_AttributesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PubsubMessage_AttributesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  PubsubMessage_AttributesEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR PubsubMessage_AttributesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit PubsubMessage_AttributesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PubsubMessage_AttributesEntry_DoNotUse& other);
  static const PubsubMessage_AttributesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PubsubMessage_AttributesEntry_DoNotUse*>(&_PubsubMessage_AttributesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.pubsub.v1.PubsubMessage.AttributesEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.pubsub.v1.PubsubMessage.AttributesEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};

// -------------------------------------------------------------------

class PubsubMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.PubsubMessage) */ {
 public:
  inline PubsubMessage() : PubsubMessage(nullptr) {}
  ~PubsubMessage() override;
  explicit PROTOBUF_CONSTEXPR PubsubMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PubsubMessage(const PubsubMessage& from);
  PubsubMessage(PubsubMessage&& from) noexcept
    : PubsubMessage() {
    *this = ::std::move(from);
  }

  inline PubsubMessage& operator=(const PubsubMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline PubsubMessage& operator=(PubsubMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PubsubMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const PubsubMessage* internal_default_instance() {
    return reinterpret_cast<const PubsubMessage*>(
               &_PubsubMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PubsubMessage& a, PubsubMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(PubsubMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PubsubMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PubsubMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PubsubMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PubsubMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PubsubMessage& from) {
    PubsubMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PubsubMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.pubsub.v1.PubsubMessage";
  }
  protected:
  explicit PubsubMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kAttributesFieldNumber = 2,
    kDataFieldNumber = 1,
    kMessageIdFieldNumber = 3,
    kOrderingKeyFieldNumber = 5,
    kPublishTimeFieldNumber = 4,
  };
  // map<string, string> attributes = 2;
  int attributes_size() const;
  private:
  int _internal_attributes_size() const;
  public:
  void clear_attributes();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_attributes() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_attributes();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      attributes() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_attributes();

  // bytes data = 1;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // string message_id = 3;
  void clear_message_id();
  const std::string& message_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message_id();
  PROTOBUF_NODISCARD std::string* release_message_id();
  void set_allocated_message_id(std::string* message_id);
  private:
  const std::string& _internal_message_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message_id(const std::string& value);
  std::string* _internal_mutable_message_id();
  public:

  // string ordering_key = 5;
  void clear_ordering_key();
  const std::string& ordering_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ordering_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ordering_key();
  PROTOBUF_NODISCARD std::string* release_ordering_key();
  void set_allocated_ordering_key(std::string* ordering_key);
  private:
  const std::string& _internal_ordering_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ordering_key(const std::string& value);
  std::string* _internal_mutable_ordering_key();
  public:

  // .google.protobuf.Timestamp publish_time = 4;
  bool has_publish_time() const;
  private:
  bool _internal_has_publish_time() const;
  public:
  void clear_publish_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& publish_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_publish_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_publish_time();
  void set_allocated_publish_time(::PROTOBUF_NAMESPACE_ID::Timestamp* publish_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_publish_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_publish_time();
  public:
  void unsafe_arena_set_allocated_publish_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* publish_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_publish_time();

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.PubsubMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        PubsubMessage_AttributesEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> attributes_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ordering_key_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* publish_time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class GetTopicRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.GetTopicRequest) */ {
 public:
  inline GetTopicRequest() : GetTopicRequest(nullptr) {}
  ~GetTopicRequest() override;
  explicit PROTOBUF_CONSTEXPR GetTopicRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetTopicRequest(const GetTopicRequest& from);
  GetTopicRequest(GetTopicRequest&& from) noexcept
    : GetTopicRequest() {
    *this = ::std::move(from);
  }

  inline GetTopicRequest& operator=(const GetTopicRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTopicRequest& operator=(GetTopicRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetTopicRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTopicRequest* internal_default_instance() {
    return reinterpret_cast<const GetTopicRequest*>(
               &_GetTopicRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetTopicRequest& a, GetTopicRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTopicRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTopicRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetTopicRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetTopicRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetTopicRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetTopicRequest& from) {
    GetTopicRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTopicRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.pubsub.v1.GetTopicRequest";
  }
  protected:
  explicit GetTopicRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopicFieldNumber = 1,
  };
  // string topic = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_topic();
  const std::string& topic() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_topic(ArgT0&& arg0, ArgT... args);
  std::string* mutable_topic();
  PROTOBUF_NODISCARD std::string* release_topic();
  void set_allocated_topic(std::string* topic);
  private:
  const std::string& _internal_topic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_topic(const std::string& value);
  std::string* _internal_mutable_topic();
  public:

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.GetTopicRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr topic_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class UpdateTopicRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.UpdateTopicRequest) */ {
 public:
  inline UpdateTopicRequest() : UpdateTopicRequest(nullptr) {}
  ~UpdateTopicRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateTopicRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateTopicRequest(const UpdateTopicRequest& from);
  UpdateTopicRequest(UpdateTopicRequest&& from) noexcept
    : UpdateTopicRequest() {
    *this = ::std::move(from);
  }

  inline UpdateTopicRequest& operator=(const UpdateTopicRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateTopicRequest& operator=(UpdateTopicRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateTopicRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateTopicRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateTopicRequest*>(
               &_UpdateTopicRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UpdateTopicRequest& a, UpdateTopicRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateTopicRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateTopicRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateTopicRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateTopicRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateTopicRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateTopicRequest& from) {
    UpdateTopicRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateTopicRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.pubsub.v1.UpdateTopicRequest";
  }
  protected:
  explicit UpdateTopicRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopicFieldNumber = 1,
    kUpdateMaskFieldNumber = 2,
  };
  // .google.pubsub.v1.Topic topic = 1 [(.google.api.field_behavior) = REQUIRED];
  bool has_topic() const;
  private:
  bool _internal_has_topic() const;
  public:
  void clear_topic();
  const ::google::pubsub::v1::Topic& topic() const;
  PROTOBUF_NODISCARD ::google::pubsub::v1::Topic* release_topic();
  ::google::pubsub::v1::Topic* mutable_topic();
  void set_allocated_topic(::google::pubsub::v1::Topic* topic);
  private:
  const ::google::pubsub::v1::Topic& _internal_topic() const;
  ::google::pubsub::v1::Topic* _internal_mutable_topic();
  public:
  void unsafe_arena_set_allocated_topic(
      ::google::pubsub::v1::Topic* topic);
  ::google::pubsub::v1::Topic* unsafe_arena_release_topic();

  // .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.UpdateTopicRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::pubsub::v1::Topic* topic_;
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class PublishRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.PublishRequest) */ {
 public:
  inline PublishRequest() : PublishRequest(nullptr) {}
  ~PublishRequest() override;
  explicit PROTOBUF_CONSTEXPR PublishRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublishRequest(const PublishRequest& from);
  PublishRequest(PublishRequest&& from) noexcept
    : PublishRequest() {
    *this = ::std::move(from);
  }

  inline PublishRequest& operator=(const PublishRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishRequest& operator=(PublishRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishRequest* internal_default_instance() {
    return reinterpret_cast<const PublishRequest*>(
               &_PublishRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(PublishRequest& a, PublishRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PublishRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PublishRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PublishRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PublishRequest& from) {
    PublishRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.pubsub.v1.PublishRequest";
  }
  protected:
  explicit PublishRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessagesFieldNumber = 2,
    kTopicFieldNumber = 1,
  };
  // repeated .google.pubsub.v1.PubsubMessage messages = 2 [(.google.api.field_behavior) = REQUIRED];
  int messages_size() const;
  private:
  int _internal_messages_size() const;
  public:
  void clear_messages();
  ::google::pubsub::v1::PubsubMessage* mutable_messages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::pubsub::v1::PubsubMessage >*
      mutable_messages();
  private:
  const ::google::pubsub::v1::PubsubMessage& _internal_messages(int index) const;
  ::google::pubsub::v1::PubsubMessage* _internal_add_messages();
  public:
  const ::google::pubsub::v1::PubsubMessage& messages(int index) const;
  ::google::pubsub::v1::PubsubMessage* add_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::pubsub::v1::PubsubMessage >&
      messages() const;

  // string topic = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_topic();
  const std::string& topic() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_topic(ArgT0&& arg0, ArgT... args);
  std::string* mutable_topic();
  PROTOBUF_NODISCARD std::string* release_topic();
  void set_allocated_topic(std::string* topic);
  private:
  const std::string& _internal_topic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_topic(const std::string& value);
  std::string* _internal_mutable_topic();
  public:

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.PublishRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::pubsub::v1::PubsubMessage > messages_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr topic_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class PublishResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.PublishResponse) */ {
 public:
  inline PublishResponse() : PublishResponse(nullptr) {}
  ~PublishResponse() override;
  explicit PROTOBUF_CONSTEXPR PublishResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublishResponse(const PublishResponse& from);
  PublishResponse(PublishResponse&& from) noexcept
    : PublishResponse() {
    *this = ::std::move(from);
  }

  inline PublishResponse& operator=(const PublishResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishResponse& operator=(PublishResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishResponse* internal_default_instance() {
    return reinterpret_cast<const PublishResponse*>(
               &_PublishResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(PublishResponse& a, PublishResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PublishResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PublishResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PublishResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PublishResponse& from) {
    PublishResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.pubsub.v1.PublishResponse";
  }
  protected:
  explicit PublishResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageIdsFieldNumber = 1,
  };
  // repeated string message_ids = 1;
  int message_ids_size() const;
  private:
  int _internal_message_ids_size() const;
  public:
  void clear_message_ids();
  const std::string& message_ids(int index) const;
  std::string* mutable_message_ids(int index);
  void set_message_ids(int index, const std::string& value);
  void set_message_ids(int index, std::string&& value);
  void set_message_ids(int index, const char* value);
  void set_message_ids(int index, const char* value, size_t size);
  std::string* add_message_ids();
  void add_message_ids(const std::string& value);
  void add_message_ids(std::string&& value);
  void add_message_ids(const char* value);
  void add_message_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& message_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_message_ids();
  private:
  const std::string& _internal_message_ids(int index) const;
  std::string* _internal_add_message_ids();
  public:

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.PublishResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> message_ids_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class ListTopicsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.ListTopicsRequest) */ {
 public:
  inline ListTopicsRequest() : ListTopicsRequest(nullptr) {}
  ~ListTopicsRequest() override;
  explicit PROTOBUF_CONSTEXPR ListTopicsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListTopicsRequest(const ListTopicsRequest& from);
  ListTopicsRequest(ListTopicsRequest&& from) noexcept
    : ListTopicsRequest() {
    *this = ::std::move(from);
  }

  inline ListTopicsRequest& operator=(const ListTopicsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListTopicsRequest& operator=(ListTopicsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListTopicsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListTopicsRequest* internal_default_instance() {
    return reinterpret_cast<const ListTopicsRequest*>(
               &_ListTopicsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ListTopicsRequest& a, ListTopicsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListTopicsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListTopicsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListTopicsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListTopicsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListTopicsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListTopicsRequest& from) {
    ListTopicsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListTopicsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.pubsub.v1.ListTopicsRequest";
  }
  protected:
  explicit ListTopicsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjectFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kPageSizeFieldNumber = 2,
  };
  // string project = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_project();
  const std::string& project() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_project(ArgT0&& arg0, ArgT... args);
  std::string* mutable_project();
  PROTOBUF_NODISCARD std::string* release_project();
  void set_allocated_project(std::string* project);
  private:
  const std::string& _internal_project() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_project(const std::string& value);
  std::string* _internal_mutable_project();
  public:

  // string page_token = 3;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 2;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.ListTopicsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr project_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
    int32_t page_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class ListTopicsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.ListTopicsResponse) */ {
 public:
  inline ListTopicsResponse() : ListTopicsResponse(nullptr) {}
  ~ListTopicsResponse() override;
  explicit PROTOBUF_CONSTEXPR ListTopicsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListTopicsResponse(const ListTopicsResponse& from);
  ListTopicsResponse(ListTopicsResponse&& from) noexcept
    : ListTopicsResponse() {
    *this = ::std::move(from);
  }

  inline ListTopicsResponse& operator=(const ListTopicsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListTopicsResponse& operator=(ListTopicsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListTopicsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListTopicsResponse* internal_default_instance() {
    return reinterpret_cast<const ListTopicsResponse*>(
               &_ListTopicsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ListTopicsResponse& a, ListTopicsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListTopicsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListTopicsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListTopicsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListTopicsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListTopicsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListTopicsResponse& from) {
    ListTopicsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListTopicsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.pubsub.v1.ListTopicsResponse";
  }
  protected:
  explicit ListTopicsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopicsFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .google.pubsub.v1.Topic topics = 1;
  int topics_size() const;
  private:
  int _internal_topics_size() const;
  public:
  void clear_topics();
  ::google::pubsub::v1::Topic* mutable_topics(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::pubsub::v1::Topic >*
      mutable_topics();
  private:
  const ::google::pubsub::v1::Topic& _internal_topics(int index) const;
  ::google::pubsub::v1::Topic* _internal_add_topics();
  public:
  const ::google::pubsub::v1::Topic& topics(int index) const;
  ::google::pubsub::v1::Topic* add_topics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::pubsub::v1::Topic >&
      topics() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.ListTopicsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::pubsub::v1::Topic > topics_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class ListTopicSubscriptionsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.ListTopicSubscriptionsRequest) */ {
 public:
  inline ListTopicSubscriptionsRequest() : ListTopicSubscriptionsRequest(nullptr) {}
  ~ListTopicSubscriptionsRequest() override;
  explicit PROTOBUF_CONSTEXPR ListTopicSubscriptionsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListTopicSubscriptionsRequest(const ListTopicSubscriptionsRequest& from);
  ListTopicSubscriptionsRequest(ListTopicSubscriptionsRequest&& from) noexcept
    : ListTopicSubscriptionsRequest() {
    *this = ::std::move(from);
  }

  inline ListTopicSubscriptionsRequest& operator=(const ListTopicSubscriptionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListTopicSubscriptionsRequest& operator=(ListTopicSubscriptionsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListTopicSubscriptionsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListTopicSubscriptionsRequest* internal_default_instance() {
    return reinterpret_cast<const ListTopicSubscriptionsRequest*>(
               &_ListTopicSubscriptionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ListTopicSubscriptionsRequest& a, ListTopicSubscriptionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListTopicSubscriptionsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListTopicSubscriptionsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListTopicSubscriptionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListTopicSubscriptionsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListTopicSubscriptionsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListTopicSubscriptionsRequest& from) {
    ListTopicSubscriptionsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListTopicSubscriptionsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.pubsub.v1.ListTopicSubscriptionsRequest";
  }
  protected:
  explicit ListTopicSubscriptionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopicFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kPageSizeFieldNumber = 2,
  };
  // string topic = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_topic();
  const std::string& topic() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_topic(ArgT0&& arg0, ArgT... args);
  std::string* mutable_topic();
  PROTOBUF_NODISCARD std::string* release_topic();
  void set_allocated_topic(std::string* topic);
  private:
  const std::string& _internal_topic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_topic(const std::string& value);
  std::string* _internal_mutable_topic();
  public:

  // string page_token = 3;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 2;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.ListTopicSubscriptionsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr topic_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
    int32_t page_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class ListTopicSubscriptionsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.ListTopicSubscriptionsResponse) */ {
 public:
  inline ListTopicSubscriptionsResponse() : ListTopicSubscriptionsResponse(nullptr) {}
  ~ListTopicSubscriptionsResponse() override;
  explicit PROTOBUF_CONSTEXPR ListTopicSubscriptionsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListTopicSubscriptionsResponse(const ListTopicSubscriptionsResponse& from);
  ListTopicSubscriptionsResponse(ListTopicSubscriptionsResponse&& from) noexcept
    : ListTopicSubscriptionsResponse() {
    *this = ::std::move(from);
  }

  inline ListTopicSubscriptionsResponse& operator=(const ListTopicSubscriptionsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListTopicSubscriptionsResponse& operator=(ListTopicSubscriptionsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListTopicSubscriptionsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListTopicSubscriptionsResponse* internal_default_instance() {
    return reinterpret_cast<const ListTopicSubscriptionsResponse*>(
               &_ListTopicSubscriptionsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ListTopicSubscriptionsResponse& a, ListTopicSubscriptionsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListTopicSubscriptionsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListTopicSubscriptionsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListTopicSubscriptionsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListTopicSubscriptionsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListTopicSubscriptionsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListTopicSubscriptionsResponse& from) {
    ListTopicSubscriptionsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListTopicSubscriptionsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.pubsub.v1.ListTopicSubscriptionsResponse";
  }
  protected:
  explicit ListTopicSubscriptionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubscriptionsFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated string subscriptions = 1 [(.google.api.resource_reference) = {
  int subscriptions_size() const;
  private:
  int _internal_subscriptions_size() const;
  public:
  void clear_subscriptions();
  const std::string& subscriptions(int index) const;
  std::string* mutable_subscriptions(int index);
  void set_subscriptions(int index, const std::string& value);
  void set_subscriptions(int index, std::string&& value);
  void set_subscriptions(int index, const char* value);
  void set_subscriptions(int index, const char* value, size_t size);
  std::string* add_subscriptions();
  void add_subscriptions(const std::string& value);
  void add_subscriptions(std::string&& value);
  void add_subscriptions(const char* value);
  void add_subscriptions(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& subscriptions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_subscriptions();
  private:
  const std::string& _internal_subscriptions(int index) const;
  std::string* _internal_add_subscriptions();
  public:

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.ListTopicSubscriptionsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> subscriptions_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class ListTopicSnapshotsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.ListTopicSnapshotsRequest) */ {
 public:
  inline ListTopicSnapshotsRequest() : ListTopicSnapshotsRequest(nullptr) {}
  ~ListTopicSnapshotsRequest() override;
  explicit PROTOBUF_CONSTEXPR ListTopicSnapshotsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListTopicSnapshotsRequest(const ListTopicSnapshotsRequest& from);
  ListTopicSnapshotsRequest(ListTopicSnapshotsRequest&& from) noexcept
    : ListTopicSnapshotsRequest() {
    *this = ::std::move(from);
  }

  inline ListTopicSnapshotsRequest& operator=(const ListTopicSnapshotsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListTopicSnapshotsRequest& operator=(ListTopicSnapshotsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListTopicSnapshotsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListTopicSnapshotsRequest* internal_default_instance() {
    return reinterpret_cast<const ListTopicSnapshotsRequest*>(
               &_ListTopicSnapshotsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ListTopicSnapshotsRequest& a, ListTopicSnapshotsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListTopicSnapshotsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListTopicSnapshotsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListTopicSnapshotsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListTopicSnapshotsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListTopicSnapshotsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListTopicSnapshotsRequest& from) {
    ListTopicSnapshotsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListTopicSnapshotsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.pubsub.v1.ListTopicSnapshotsRequest";
  }
  protected:
  explicit ListTopicSnapshotsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopicFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kPageSizeFieldNumber = 2,
  };
  // string topic = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_topic();
  const std::string& topic() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_topic(ArgT0&& arg0, ArgT... args);
  std::string* mutable_topic();
  PROTOBUF_NODISCARD std::string* release_topic();
  void set_allocated_topic(std::string* topic);
  private:
  const std::string& _internal_topic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_topic(const std::string& value);
  std::string* _internal_mutable_topic();
  public:

  // string page_token = 3;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 2;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.ListTopicSnapshotsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr topic_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
    int32_t page_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class ListTopicSnapshotsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.ListTopicSnapshotsResponse) */ {
 public:
  inline ListTopicSnapshotsResponse() : ListTopicSnapshotsResponse(nullptr) {}
  ~ListTopicSnapshotsResponse() override;
  explicit PROTOBUF_CONSTEXPR ListTopicSnapshotsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListTopicSnapshotsResponse(const ListTopicSnapshotsResponse& from);
  ListTopicSnapshotsResponse(ListTopicSnapshotsResponse&& from) noexcept
    : ListTopicSnapshotsResponse() {
    *this = ::std::move(from);
  }

  inline ListTopicSnapshotsResponse& operator=(const ListTopicSnapshotsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListTopicSnapshotsResponse& operator=(ListTopicSnapshotsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListTopicSnapshotsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListTopicSnapshotsResponse* internal_default_instance() {
    return reinterpret_cast<const ListTopicSnapshotsResponse*>(
               &_ListTopicSnapshotsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ListTopicSnapshotsResponse& a, ListTopicSnapshotsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListTopicSnapshotsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListTopicSnapshotsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListTopicSnapshotsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListTopicSnapshotsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListTopicSnapshotsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListTopicSnapshotsResponse& from) {
    ListTopicSnapshotsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListTopicSnapshotsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.pubsub.v1.ListTopicSnapshotsResponse";
  }
  protected:
  explicit ListTopicSnapshotsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSnapshotsFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated string snapshots = 1;
  int snapshots_size() const;
  private:
  int _internal_snapshots_size() const;
  public:
  void clear_snapshots();
  const std::string& snapshots(int index) const;
  std::string* mutable_snapshots(int index);
  void set_snapshots(int index, const std::string& value);
  void set_snapshots(int index, std::string&& value);
  void set_snapshots(int index, const char* value);
  void set_snapshots(int index, const char* value, size_t size);
  std::string* add_snapshots();
  void add_snapshots(const std::string& value);
  void add_snapshots(std::string&& value);
  void add_snapshots(const char* value);
  void add_snapshots(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& snapshots() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_snapshots();
  private:
  const std::string& _internal_snapshots(int index) const;
  std::string* _internal_add_snapshots();
  public:

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.ListTopicSnapshotsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> snapshots_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class DeleteTopicRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.DeleteTopicRequest) */ {
 public:
  inline DeleteTopicRequest() : DeleteTopicRequest(nullptr) {}
  ~DeleteTopicRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteTopicRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteTopicRequest(const DeleteTopicRequest& from);
  DeleteTopicRequest(DeleteTopicRequest&& from) noexcept
    : DeleteTopicRequest() {
    *this = ::std::move(from);
  }

  inline DeleteTopicRequest& operator=(const DeleteTopicRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteTopicRequest& operator=(DeleteTopicRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteTopicRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteTopicRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteTopicRequest*>(
               &_DeleteTopicRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(DeleteTopicRequest& a, DeleteTopicRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteTopicRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteTopicRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteTopicRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteTopicRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteTopicRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteTopicRequest& from) {
    DeleteTopicRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteTopicRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.pubsub.v1.DeleteTopicRequest";
  }
  protected:
  explicit DeleteTopicRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopicFieldNumber = 1,
  };
  // string topic = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_topic();
  const std::string& topic() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_topic(ArgT0&& arg0, ArgT... args);
  std::string* mutable_topic();
  PROTOBUF_NODISCARD std::string* release_topic();
  void set_allocated_topic(std::string* topic);
  private:
  const std::string& _internal_topic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_topic(const std::string& value);
  std::string* _internal_mutable_topic();
  public:

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.DeleteTopicRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr topic_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class DetachSubscriptionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.DetachSubscriptionRequest) */ {
 public:
  inline DetachSubscriptionRequest() : DetachSubscriptionRequest(nullptr) {}
  ~DetachSubscriptionRequest() override;
  explicit PROTOBUF_CONSTEXPR DetachSubscriptionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DetachSubscriptionRequest(const DetachSubscriptionRequest& from);
  DetachSubscriptionRequest(DetachSubscriptionRequest&& from) noexcept
    : DetachSubscriptionRequest() {
    *this = ::std::move(from);
  }

  inline DetachSubscriptionRequest& operator=(const DetachSubscriptionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetachSubscriptionRequest& operator=(DetachSubscriptionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DetachSubscriptionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DetachSubscriptionRequest* internal_default_instance() {
    return reinterpret_cast<const DetachSubscriptionRequest*>(
               &_DetachSubscriptionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(DetachSubscriptionRequest& a, DetachSubscriptionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DetachSubscriptionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DetachSubscriptionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DetachSubscriptionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DetachSubscriptionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DetachSubscriptionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DetachSubscriptionRequest& from) {
    DetachSubscriptionRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetachSubscriptionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.pubsub.v1.DetachSubscriptionRequest";
  }
  protected:
  explicit DetachSubscriptionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubscriptionFieldNumber = 1,
  };
  // string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_subscription();
  const std::string& subscription() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_subscription(ArgT0&& arg0, ArgT... args);
  std::string* mutable_subscription();
  PROTOBUF_NODISCARD std::string* release_subscription();
  void set_allocated_subscription(std::string* subscription);
  private:
  const std::string& _internal_subscription() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subscription(const std::string& value);
  std::string* _internal_mutable_subscription();
  public:

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.DetachSubscriptionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subscription_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class DetachSubscriptionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:google.pubsub.v1.DetachSubscriptionResponse) */ {
 public:
  inline DetachSubscriptionResponse() : DetachSubscriptionResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR DetachSubscriptionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DetachSubscriptionResponse(const DetachSubscriptionResponse& from);
  DetachSubscriptionResponse(DetachSubscriptionResponse&& from) noexcept
    : DetachSubscriptionResponse() {
    *this = ::std::move(from);
  }

  inline DetachSubscriptionResponse& operator=(const DetachSubscriptionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetachSubscriptionResponse& operator=(DetachSubscriptionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DetachSubscriptionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DetachSubscriptionResponse* internal_default_instance() {
    return reinterpret_cast<const DetachSubscriptionResponse*>(
               &_DetachSubscriptionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(DetachSubscriptionResponse& a, DetachSubscriptionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DetachSubscriptionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DetachSubscriptionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DetachSubscriptionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DetachSubscriptionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const DetachSubscriptionResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const DetachSubscriptionResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.pubsub.v1.DetachSubscriptionResponse";
  }
  protected:
  explicit DetachSubscriptionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.DetachSubscriptionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class Subscription_LabelsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Subscription_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Subscription_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  Subscription_LabelsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR Subscription_LabelsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Subscription_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Subscription_LabelsEntry_DoNotUse& other);
  static const Subscription_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Subscription_LabelsEntry_DoNotUse*>(&_Subscription_LabelsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.pubsub.v1.Subscription.LabelsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.pubsub.v1.Subscription.LabelsEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};

// -------------------------------------------------------------------

class Subscription final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.Subscription) */ {
 public:
  inline Subscription() : Subscription(nullptr) {}
  ~Subscription() override;
  explicit PROTOBUF_CONSTEXPR Subscription(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Subscription(const Subscription& from);
  Subscription(Subscription&& from) noexcept
    : Subscription() {
    *this = ::std::move(from);
  }

  inline Subscription& operator=(const Subscription& from) {
    CopyFrom(from);
    return *this;
  }
  inline Subscription& operator=(Subscription&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Subscription& default_instance() {
    return *internal_default_instance();
  }
  static inline const Subscription* internal_default_instance() {
    return reinterpret_cast<const Subscription*>(
               &_Subscription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(Subscription& a, Subscription& b) {
    a.Swap(&b);
  }
  inline void Swap(Subscription* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Subscription* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Subscription* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Subscription>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Subscription& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Subscription& from) {
    Subscription::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Subscription* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.pubsub.v1.Subscription";
  }
  protected:
  explicit Subscription(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  typedef Subscription_State State;
  static constexpr State STATE_UNSPECIFIED =
    Subscription_State_STATE_UNSPECIFIED;
  static constexpr State ACTIVE =
    Subscription_State_ACTIVE;
  static constexpr State RESOURCE_ERROR =
    Subscription_State_RESOURCE_ERROR;
  static inline bool State_IsValid(int value) {
    return Subscription_State_IsValid(value);
  }
  static constexpr State State_MIN =
    Subscription_State_State_MIN;
  static constexpr State State_MAX =
    Subscription_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    Subscription_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return Subscription_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return Subscription_State_Name(enum_t_value);
  }
  static inline bool State_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      State* value) {
    return Subscription_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 9,
    kNameFieldNumber = 1,
    kTopicFieldNumber = 2,
    kFilterFieldNumber = 12,
    kPushConfigFieldNumber = 4,
    kMessageRetentionDurationFieldNumber = 8,
    kExpirationPolicyFieldNumber = 11,
    kDeadLetterPolicyFieldNumber = 13,
    kRetryPolicyFieldNumber = 14,
    kTopicMessageRetentionDurationFieldNumber = 17,
    kBigqueryConfigFieldNumber = 18,
    kAckDeadlineSecondsFieldNumber = 5,
    kRetainAckedMessagesFieldNumber = 7,
    kEnableMessageOrderingFieldNumber = 10,
    kDetachedFieldNumber = 15,
    kEnableExactlyOnceDeliveryFieldNumber = 16,
    kStateFieldNumber = 19,
  };
  // map<string, string> labels = 9;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_labels();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_labels();

  // string name = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string topic = 2 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_topic();
  const std::string& topic() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_topic(ArgT0&& arg0, ArgT... args);
  std::string* mutable_topic();
  PROTOBUF_NODISCARD std::string* release_topic();
  void set_allocated_topic(std::string* topic);
  private:
  const std::string& _internal_topic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_topic(const std::string& value);
  std::string* _internal_mutable_topic();
  public:

  // string filter = 12;
  void clear_filter();
  const std::string& filter() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filter(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filter();
  PROTOBUF_NODISCARD std::string* release_filter();
  void set_allocated_filter(std::string* filter);
  private:
  const std::string& _internal_filter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filter(const std::string& value);
  std::string* _internal_mutable_filter();
  public:

  // .google.pubsub.v1.PushConfig push_config = 4;
  bool has_push_config() const;
  private:
  bool _internal_has_push_config() const;
  public:
  void clear_push_config();
  const ::google::pubsub::v1::PushConfig& push_config() const;
  PROTOBUF_NODISCARD ::google::pubsub::v1::PushConfig* release_push_config();
  ::google::pubsub::v1::PushConfig* mutable_push_config();
  void set_allocated_push_config(::google::pubsub::v1::PushConfig* push_config);
  private:
  const ::google::pubsub::v1::PushConfig& _internal_push_config() const;
  ::google::pubsub::v1::PushConfig* _internal_mutable_push_config();
  public:
  void unsafe_arena_set_allocated_push_config(
      ::google::pubsub::v1::PushConfig* push_config);
  ::google::pubsub::v1::PushConfig* unsafe_arena_release_push_config();

  // .google.protobuf.Duration message_retention_duration = 8;
  bool has_message_retention_duration() const;
  private:
  bool _internal_has_message_retention_duration() const;
  public:
  void clear_message_retention_duration();
  const ::PROTOBUF_NAMESPACE_ID::Duration& message_retention_duration() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_message_retention_duration();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_message_retention_duration();
  void set_allocated_message_retention_duration(::PROTOBUF_NAMESPACE_ID::Duration* message_retention_duration);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_message_retention_duration() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_message_retention_duration();
  public:
  void unsafe_arena_set_allocated_message_retention_duration(
      ::PROTOBUF_NAMESPACE_ID::Duration* message_retention_duration);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_message_retention_duration();

  // .google.pubsub.v1.ExpirationPolicy expiration_policy = 11;
  bool has_expiration_policy() const;
  private:
  bool _internal_has_expiration_policy() const;
  public:
  void clear_expiration_policy();
  const ::google::pubsub::v1::ExpirationPolicy& expiration_policy() const;
  PROTOBUF_NODISCARD ::google::pubsub::v1::ExpirationPolicy* release_expiration_policy();
  ::google::pubsub::v1::ExpirationPolicy* mutable_expiration_policy();
  void set_allocated_expiration_policy(::google::pubsub::v1::ExpirationPolicy* expiration_policy);
  private:
  const ::google::pubsub::v1::ExpirationPolicy& _internal_expiration_policy() const;
  ::google::pubsub::v1::ExpirationPolicy* _internal_mutable_expiration_policy();
  public:
  void unsafe_arena_set_allocated_expiration_policy(
      ::google::pubsub::v1::ExpirationPolicy* expiration_policy);
  ::google::pubsub::v1::ExpirationPolicy* unsafe_arena_release_expiration_policy();

  // .google.pubsub.v1.DeadLetterPolicy dead_letter_policy = 13;
  bool has_dead_letter_policy() const;
  private:
  bool _internal_has_dead_letter_policy() const;
  public:
  void clear_dead_letter_policy();
  const ::google::pubsub::v1::DeadLetterPolicy& dead_letter_policy() const;
  PROTOBUF_NODISCARD ::google::pubsub::v1::DeadLetterPolicy* release_dead_letter_policy();
  ::google::pubsub::v1::DeadLetterPolicy* mutable_dead_letter_policy();
  void set_allocated_dead_letter_policy(::google::pubsub::v1::DeadLetterPolicy* dead_letter_policy);
  private:
  const ::google::pubsub::v1::DeadLetterPolicy& _internal_dead_letter_policy() const;
  ::google::pubsub::v1::DeadLetterPolicy* _internal_mutable_dead_letter_policy();
  public:
  void unsafe_arena_set_allocated_dead_letter_policy(
      ::google::pubsub::v1::DeadLetterPolicy* dead_letter_policy);
  ::google::pubsub::v1::DeadLetterPolicy* unsafe_arena_release_dead_letter_policy();

  // .google.pubsub.v1.RetryPolicy retry_policy = 14;
  bool has_retry_policy() const;
  private:
  bool _internal_has_retry_policy() const;
  public:
  void clear_retry_policy();
  const ::google::pubsub::v1::RetryPolicy& retry_policy() const;
  PROTOBUF_NODISCARD ::google::pubsub::v1::RetryPolicy* release_retry_policy();
  ::google::pubsub::v1::RetryPolicy* mutable_retry_policy();
  void set_allocated_retry_policy(::google::pubsub::v1::RetryPolicy* retry_policy);
  private:
  const ::google::pubsub::v1::RetryPolicy& _internal_retry_policy() const;
  ::google::pubsub::v1::RetryPolicy* _internal_mutable_retry_policy();
  public:
  void unsafe_arena_set_allocated_retry_policy(
      ::google::pubsub::v1::RetryPolicy* retry_policy);
  ::google::pubsub::v1::RetryPolicy* unsafe_arena_release_retry_policy();

  // .google.protobuf.Duration topic_message_retention_duration = 17 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_topic_message_retention_duration() const;
  private:
  bool _internal_has_topic_message_retention_duration() const;
  public:
  void clear_topic_message_retention_duration();
  const ::PROTOBUF_NAMESPACE_ID::Duration& topic_message_retention_duration() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_topic_message_retention_duration();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_topic_message_retention_duration();
  void set_allocated_topic_message_retention_duration(::PROTOBUF_NAMESPACE_ID::Duration* topic_message_retention_duration);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_topic_message_retention_duration() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_topic_message_retention_duration();
  public:
  void unsafe_arena_set_allocated_topic_message_retention_duration(
      ::PROTOBUF_NAMESPACE_ID::Duration* topic_message_retention_duration);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_topic_message_retention_duration();

  // .google.pubsub.v1.BigQueryConfig bigquery_config = 18;
  bool has_bigquery_config() const;
  private:
  bool _internal_has_bigquery_config() const;
  public:
  void clear_bigquery_config();
  const ::google::pubsub::v1::BigQueryConfig& bigquery_config() const;
  PROTOBUF_NODISCARD ::google::pubsub::v1::BigQueryConfig* release_bigquery_config();
  ::google::pubsub::v1::BigQueryConfig* mutable_bigquery_config();
  void set_allocated_bigquery_config(::google::pubsub::v1::BigQueryConfig* bigquery_config);
  private:
  const ::google::pubsub::v1::BigQueryConfig& _internal_bigquery_config() const;
  ::google::pubsub::v1::BigQueryConfig* _internal_mutable_bigquery_config();
  public:
  void unsafe_arena_set_allocated_bigquery_config(
      ::google::pubsub::v1::BigQueryConfig* bigquery_config);
  ::google::pubsub::v1::BigQueryConfig* unsafe_arena_release_bigquery_config();

  // int32 ack_deadline_seconds = 5;
  void clear_ack_deadline_seconds();
  int32_t ack_deadline_seconds() const;
  void set_ack_deadline_seconds(int32_t value);
  private:
  int32_t _internal_ack_deadline_seconds() const;
  void _internal_set_ack_deadline_seconds(int32_t value);
  public:

  // bool retain_acked_messages = 7;
  void clear_retain_acked_messages();
  bool retain_acked_messages() const;
  void set_retain_acked_messages(bool value);
  private:
  bool _internal_retain_acked_messages() const;
  void _internal_set_retain_acked_messages(bool value);
  public:

  // bool enable_message_ordering = 10;
  void clear_enable_message_ordering();
  bool enable_message_ordering() const;
  void set_enable_message_ordering(bool value);
  private:
  bool _internal_enable_message_ordering() const;
  void _internal_set_enable_message_ordering(bool value);
  public:

  // bool detached = 15;
  void clear_detached();
  bool detached() const;
  void set_detached(bool value);
  private:
  bool _internal_detached() const;
  void _internal_set_detached(bool value);
  public:

  // bool enable_exactly_once_delivery = 16;
  void clear_enable_exactly_once_delivery();
  bool enable_exactly_once_delivery() const;
  void set_enable_exactly_once_delivery(bool value);
  private:
  bool _internal_enable_exactly_once_delivery() const;
  void _internal_set_enable_exactly_once_delivery(bool value);
  public:

  // .google.pubsub.v1.Subscription.State state = 19 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_state();
  ::google::pubsub::v1::Subscription_State state() const;
  void set_state(::google::pubsub::v1::Subscription_State value);
  private:
  ::google::pubsub::v1::Subscription_State _internal_state() const;
  void _internal_set_state(::google::pubsub::v1::Subscription_State value);
  public:

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.Subscription)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        Subscription_LabelsEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> labels_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr topic_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filter_;
    ::google::pubsub::v1::PushConfig* push_config_;
    ::PROTOBUF_NAMESPACE_ID::Duration* message_retention_duration_;
    ::google::pubsub::v1::ExpirationPolicy* expiration_policy_;
    ::google::pubsub::v1::DeadLetterPolicy* dead_letter_policy_;
    ::google::pubsub::v1::RetryPolicy* retry_policy_;
    ::PROTOBUF_NAMESPACE_ID::Duration* topic_message_retention_duration_;
    ::google::pubsub::v1::BigQueryConfig* bigquery_config_;
    int32_t ack_deadline_seconds_;
    bool retain_acked_messages_;
    bool enable_message_ordering_;
    bool detached_;
    bool enable_exactly_once_delivery_;
    int state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class RetryPolicy final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.RetryPolicy) */ {
 public:
  inline RetryPolicy() : RetryPolicy(nullptr) {}
  ~RetryPolicy() override;
  explicit PROTOBUF_CONSTEXPR RetryPolicy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RetryPolicy(const RetryPolicy& from);
  RetryPolicy(RetryPolicy&& from) noexcept
    : RetryPolicy() {
    *this = ::std::move(from);
  }

  inline RetryPolicy& operator=(const RetryPolicy& from) {
    CopyFrom(from);
    return *this;
  }
  inline RetryPolicy& operator=(RetryPolicy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RetryPolicy& default_instance() {
    return *internal_default_instance();
  }
  static inline const RetryPolicy* internal_default_instance() {
    return reinterpret_cast<const RetryPolicy*>(
               &_RetryPolicy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(RetryPolicy& a, RetryPolicy& b) {
    a.Swap(&b);
  }
  inline void Swap(RetryPolicy* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RetryPolicy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RetryPolicy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RetryPolicy>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RetryPolicy& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RetryPolicy& from) {
    RetryPolicy::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RetryPolicy* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.pubsub.v1.RetryPolicy";
  }
  protected:
  explicit RetryPolicy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinimumBackoffFieldNumber = 1,
    kMaximumBackoffFieldNumber = 2,
  };
  // .google.protobuf.Duration minimum_backoff = 1;
  bool has_minimum_backoff() const;
  private:
  bool _internal_has_minimum_backoff() const;
  public:
  void clear_minimum_backoff();
  const ::PROTOBUF_NAMESPACE_ID::Duration& minimum_backoff() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_minimum_backoff();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_minimum_backoff();
  void set_allocated_minimum_backoff(::PROTOBUF_NAMESPACE_ID::Duration* minimum_backoff);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_minimum_backoff() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_minimum_backoff();
  public:
  void unsafe_arena_set_allocated_minimum_backoff(
      ::PROTOBUF_NAMESPACE_ID::Duration* minimum_backoff);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_minimum_backoff();

  // .google.protobuf.Duration maximum_backoff = 2;
  bool has_maximum_backoff() const;
  private:
  bool _internal_has_maximum_backoff() const;
  public:
  void clear_maximum_backoff();
  const ::PROTOBUF_NAMESPACE_ID::Duration& maximum_backoff() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_maximum_backoff();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_maximum_backoff();
  void set_allocated_maximum_backoff(::PROTOBUF_NAMESPACE_ID::Duration* maximum_backoff);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_maximum_backoff() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_maximum_backoff();
  public:
  void unsafe_arena_set_allocated_maximum_backoff(
      ::PROTOBUF_NAMESPACE_ID::Duration* maximum_backoff);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_maximum_backoff();

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.RetryPolicy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::Duration* minimum_backoff_;
    ::PROTOBUF_NAMESPACE_ID::Duration* maximum_backoff_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class DeadLetterPolicy final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.DeadLetterPolicy) */ {
 public:
  inline DeadLetterPolicy() : DeadLetterPolicy(nullptr) {}
  ~DeadLetterPolicy() override;
  explicit PROTOBUF_CONSTEXPR DeadLetterPolicy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeadLetterPolicy(const DeadLetterPolicy& from);
  DeadLetterPolicy(DeadLetterPolicy&& from) noexcept
    : DeadLetterPolicy() {
    *this = ::std::move(from);
  }

  inline DeadLetterPolicy& operator=(const DeadLetterPolicy& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeadLetterPolicy& operator=(DeadLetterPolicy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeadLetterPolicy& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeadLetterPolicy* internal_default_instance() {
    return reinterpret_cast<const DeadLetterPolicy*>(
               &_DeadLetterPolicy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(DeadLetterPolicy& a, DeadLetterPolicy& b) {
    a.Swap(&b);
  }
  inline void Swap(DeadLetterPolicy* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeadLetterPolicy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeadLetterPolicy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeadLetterPolicy>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeadLetterPolicy& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeadLetterPolicy& from) {
    DeadLetterPolicy::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeadLetterPolicy* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.pubsub.v1.DeadLetterPolicy";
  }
  protected:
  explicit DeadLetterPolicy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeadLetterTopicFieldNumber = 1,
    kMaxDeliveryAttemptsFieldNumber = 2,
  };
  // string dead_letter_topic = 1;
  void clear_dead_letter_topic();
  const std::string& dead_letter_topic() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dead_letter_topic(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dead_letter_topic();
  PROTOBUF_NODISCARD std::string* release_dead_letter_topic();
  void set_allocated_dead_letter_topic(std::string* dead_letter_topic);
  private:
  const std::string& _internal_dead_letter_topic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dead_letter_topic(const std::string& value);
  std::string* _internal_mutable_dead_letter_topic();
  public:

  // int32 max_delivery_attempts = 2;
  void clear_max_delivery_attempts();
  int32_t max_delivery_attempts() const;
  void set_max_delivery_attempts(int32_t value);
  private:
  int32_t _internal_max_delivery_attempts() const;
  void _internal_set_max_delivery_attempts(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.DeadLetterPolicy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dead_letter_topic_;
    int32_t max_delivery_attempts_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class ExpirationPolicy final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.ExpirationPolicy) */ {
 public:
  inline ExpirationPolicy() : ExpirationPolicy(nullptr) {}
  ~ExpirationPolicy() override;
  explicit PROTOBUF_CONSTEXPR ExpirationPolicy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExpirationPolicy(const ExpirationPolicy& from);
  ExpirationPolicy(ExpirationPolicy&& from) noexcept
    : ExpirationPolicy() {
    *this = ::std::move(from);
  }

  inline ExpirationPolicy& operator=(const ExpirationPolicy& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExpirationPolicy& operator=(ExpirationPolicy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExpirationPolicy& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExpirationPolicy* internal_default_instance() {
    return reinterpret_cast<const ExpirationPolicy*>(
               &_ExpirationPolicy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(ExpirationPolicy& a, ExpirationPolicy& b) {
    a.Swap(&b);
  }
  inline void Swap(ExpirationPolicy* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExpirationPolicy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExpirationPolicy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExpirationPolicy>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExpirationPolicy& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ExpirationPolicy& from) {
    ExpirationPolicy::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExpirationPolicy* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.pubsub.v1.ExpirationPolicy";
  }
  protected:
  explicit ExpirationPolicy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTtlFieldNumber = 1,
  };
  // .google.protobuf.Duration ttl = 1;
  bool has_ttl() const;
  private:
  bool _internal_has_ttl() const;
  public:
  void clear_ttl();
  const ::PROTOBUF_NAMESPACE_ID::Duration& ttl() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_ttl();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_ttl();
  void set_allocated_ttl(::PROTOBUF_NAMESPACE_ID::Duration* ttl);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_ttl() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_ttl();
  public:
  void unsafe_arena_set_allocated_ttl(
      ::PROTOBUF_NAMESPACE_ID::Duration* ttl);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_ttl();

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.ExpirationPolicy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::Duration* ttl_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class PushConfig_OidcToken final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.PushConfig.OidcToken) */ {
 public:
  inline PushConfig_OidcToken() : PushConfig_OidcToken(nullptr) {}
  ~PushConfig_OidcToken() override;
  explicit PROTOBUF_CONSTEXPR PushConfig_OidcToken(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PushConfig_OidcToken(const PushConfig_OidcToken& from);
  PushConfig_OidcToken(PushConfig_OidcToken&& from) noexcept
    : PushConfig_OidcToken() {
    *this = ::std::move(from);
  }

  inline PushConfig_OidcToken& operator=(const PushConfig_OidcToken& from) {
    CopyFrom(from);
    return *this;
  }
  inline PushConfig_OidcToken& operator=(PushConfig_OidcToken&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PushConfig_OidcToken& default_instance() {
    return *internal_default_instance();
  }
  static inline const PushConfig_OidcToken* internal_default_instance() {
    return reinterpret_cast<const PushConfig_OidcToken*>(
               &_PushConfig_OidcToken_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(PushConfig_OidcToken& a, PushConfig_OidcToken& b) {
    a.Swap(&b);
  }
  inline void Swap(PushConfig_OidcToken* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PushConfig_OidcToken* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PushConfig_OidcToken* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PushConfig_OidcToken>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PushConfig_OidcToken& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PushConfig_OidcToken& from) {
    PushConfig_OidcToken::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PushConfig_OidcToken* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.pubsub.v1.PushConfig.OidcToken";
  }
  protected:
  explicit PushConfig_OidcToken(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceAccountEmailFieldNumber = 1,
    kAudienceFieldNumber = 2,
  };
  // string service_account_email = 1;
  void clear_service_account_email();
  const std::string& service_account_email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_service_account_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_service_account_email();
  PROTOBUF_NODISCARD std::string* release_service_account_email();
  void set_allocated_service_account_email(std::string* service_account_email);
  private:
  const std::string& _internal_service_account_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service_account_email(const std::string& value);
  std::string* _internal_mutable_service_account_email();
  public:

  // string audience = 2;
  void clear_audience();
  const std::string& audience() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_audience(ArgT0&& arg0, ArgT... args);
  std::string* mutable_audience();
  PROTOBUF_NODISCARD std::string* release_audience();
  void set_allocated_audience(std::string* audience);
  private:
  const std::string& _internal_audience() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_audience(const std::string& value);
  std::string* _internal_mutable_audience();
  public:

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.PushConfig.OidcToken)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_account_email_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr audience_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class PushConfig_AttributesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PushConfig_AttributesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PushConfig_AttributesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  PushConfig_AttributesEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR PushConfig_AttributesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit PushConfig_AttributesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PushConfig_AttributesEntry_DoNotUse& other);
  static const PushConfig_AttributesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PushConfig_AttributesEntry_DoNotUse*>(&_PushConfig_AttributesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.pubsub.v1.PushConfig.AttributesEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.pubsub.v1.PushConfig.AttributesEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};

// -------------------------------------------------------------------

class PushConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.PushConfig) */ {
 public:
  inline PushConfig() : PushConfig(nullptr) {}
  ~PushConfig() override;
  explicit PROTOBUF_CONSTEXPR PushConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PushConfig(const PushConfig& from);
  PushConfig(PushConfig&& from) noexcept
    : PushConfig() {
    *this = ::std::move(from);
  }

  inline PushConfig& operator=(const PushConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline PushConfig& operator=(PushConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PushConfig& default_instance() {
    return *internal_default_instance();
  }
  enum AuthenticationMethodCase {
    kOidcToken = 3,
    AUTHENTICATION_METHOD_NOT_SET = 0,
  };

  static inline const PushConfig* internal_default_instance() {
    return reinterpret_cast<const PushConfig*>(
               &_PushConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(PushConfig& a, PushConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(PushConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PushConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PushConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PushConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PushConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PushConfig& from) {
    PushConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PushConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.pubsub.v1.PushConfig";
  }
  protected:
  explicit PushConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PushConfig_OidcToken OidcToken;

  // accessors -------------------------------------------------------

  enum : int {
    kAttributesFieldNumber = 2,
    kPushEndpointFieldNumber = 1,
    kOidcTokenFieldNumber = 3,
  };
  // map<string, string> attributes = 2;
  int attributes_size() const;
  private:
  int _internal_attributes_size() const;
  public:
  void clear_attributes();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_attributes() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_attributes();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      attributes() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_attributes();

  // string push_endpoint = 1;
  void clear_push_endpoint();
  const std::string& push_endpoint() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_push_endpoint(ArgT0&& arg0, ArgT... args);
  std::string* mutable_push_endpoint();
  PROTOBUF_NODISCARD std::string* release_push_endpoint();
  void set_allocated_push_endpoint(std::string* push_endpoint);
  private:
  const std::string& _internal_push_endpoint() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_push_endpoint(const std::string& value);
  std::string* _internal_mutable_push_endpoint();
  public:

  // .google.pubsub.v1.PushConfig.OidcToken oidc_token = 3;
  bool has_oidc_token() const;
  private:
  bool _internal_has_oidc_token() const;
  public:
  void clear_oidc_token();
  const ::google::pubsub::v1::PushConfig_OidcToken& oidc_token() const;
  PROTOBUF_NODISCARD ::google::pubsub::v1::PushConfig_OidcToken* release_oidc_token();
  ::google::pubsub::v1::PushConfig_OidcToken* mutable_oidc_token();
  void set_allocated_oidc_token(::google::pubsub::v1::PushConfig_OidcToken* oidc_token);
  private:
  const ::google::pubsub::v1::PushConfig_OidcToken& _internal_oidc_token() const;
  ::google::pubsub::v1::PushConfig_OidcToken* _internal_mutable_oidc_token();
  public:
  void unsafe_arena_set_allocated_oidc_token(
      ::google::pubsub::v1::PushConfig_OidcToken* oidc_token);
  ::google::pubsub::v1::PushConfig_OidcToken* unsafe_arena_release_oidc_token();

  void clear_authentication_method();
  AuthenticationMethodCase authentication_method_case() const;
  // @@protoc_insertion_point(class_scope:google.pubsub.v1.PushConfig)
 private:
  class _Internal;
  void set_has_oidc_token();

  inline bool has_authentication_method() const;
  inline void clear_has_authentication_method();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        PushConfig_AttributesEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> attributes_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr push_endpoint_;
    union AuthenticationMethodUnion {
      constexpr AuthenticationMethodUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::google::pubsub::v1::PushConfig_OidcToken* oidc_token_;
    } authentication_method_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class BigQueryConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.BigQueryConfig) */ {
 public:
  inline BigQueryConfig() : BigQueryConfig(nullptr) {}
  ~BigQueryConfig() override;
  explicit PROTOBUF_CONSTEXPR BigQueryConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BigQueryConfig(const BigQueryConfig& from);
  BigQueryConfig(BigQueryConfig&& from) noexcept
    : BigQueryConfig() {
    *this = ::std::move(from);
  }

  inline BigQueryConfig& operator=(const BigQueryConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline BigQueryConfig& operator=(BigQueryConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BigQueryConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const BigQueryConfig* internal_default_instance() {
    return reinterpret_cast<const BigQueryConfig*>(
               &_BigQueryConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(BigQueryConfig& a, BigQueryConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(BigQueryConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BigQueryConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BigQueryConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BigQueryConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BigQueryConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BigQueryConfig& from) {
    BigQueryConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BigQueryConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.pubsub.v1.BigQueryConfig";
  }
  protected:
  explicit BigQueryConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef BigQueryConfig_State State;
  static constexpr State STATE_UNSPECIFIED =
    BigQueryConfig_State_STATE_UNSPECIFIED;
  static constexpr State ACTIVE =
    BigQueryConfig_State_ACTIVE;
  static constexpr State PERMISSION_DENIED =
    BigQueryConfig_State_PERMISSION_DENIED;
  static constexpr State NOT_FOUND =
    BigQueryConfig_State_NOT_FOUND;
  static constexpr State SCHEMA_MISMATCH =
    BigQueryConfig_State_SCHEMA_MISMATCH;
  static inline bool State_IsValid(int value) {
    return BigQueryConfig_State_IsValid(value);
  }
  static constexpr State State_MIN =
    BigQueryConfig_State_State_MIN;
  static constexpr State State_MAX =
    BigQueryConfig_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    BigQueryConfig_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return BigQueryConfig_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return BigQueryConfig_State_Name(enum_t_value);
  }
  static inline bool State_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      State* value) {
    return BigQueryConfig_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTableFieldNumber = 1,
    kUseTopicSchemaFieldNumber = 2,
    kWriteMetadataFieldNumber = 3,
    kDropUnknownFieldsFieldNumber = 4,
    kStateFieldNumber = 5,
  };
  // string table = 1;
  void clear_table();
  const std::string& table() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_table(ArgT0&& arg0, ArgT... args);
  std::string* mutable_table();
  PROTOBUF_NODISCARD std::string* release_table();
  void set_allocated_table(std::string* table);
  private:
  const std::string& _internal_table() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_table(const std::string& value);
  std::string* _internal_mutable_table();
  public:

  // bool use_topic_schema = 2;
  void clear_use_topic_schema();
  bool use_topic_schema() const;
  void set_use_topic_schema(bool value);
  private:
  bool _internal_use_topic_schema() const;
  void _internal_set_use_topic_schema(bool value);
  public:

  // bool write_metadata = 3;
  void clear_write_metadata();
  bool write_metadata() const;
  void set_write_metadata(bool value);
  private:
  bool _internal_write_metadata() const;
  void _internal_set_write_metadata(bool value);
  public:

  // bool drop_unknown_fields = 4;
  void clear_drop_unknown_fields();
  bool drop_unknown_fields() const;
  void set_drop_unknown_fields(bool value);
  private:
  bool _internal_drop_unknown_fields() const;
  void _internal_set_drop_unknown_fields(bool value);
  public:

  // .google.pubsub.v1.BigQueryConfig.State state = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_state();
  ::google::pubsub::v1::BigQueryConfig_State state() const;
  void set_state(::google::pubsub::v1::BigQueryConfig_State value);
  private:
  ::google::pubsub::v1::BigQueryConfig_State _internal_state() const;
  void _internal_set_state(::google::pubsub::v1::BigQueryConfig_State value);
  public:

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.BigQueryConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_;
    bool use_topic_schema_;
    bool write_metadata_;
    bool drop_unknown_fields_;
    int state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class ReceivedMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.ReceivedMessage) */ {
 public:
  inline ReceivedMessage() : ReceivedMessage(nullptr) {}
  ~ReceivedMessage() override;
  explicit PROTOBUF_CONSTEXPR ReceivedMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReceivedMessage(const ReceivedMessage& from);
  ReceivedMessage(ReceivedMessage&& from) noexcept
    : ReceivedMessage() {
    *this = ::std::move(from);
  }

  inline ReceivedMessage& operator=(const ReceivedMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReceivedMessage& operator=(ReceivedMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReceivedMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReceivedMessage* internal_default_instance() {
    return reinterpret_cast<const ReceivedMessage*>(
               &_ReceivedMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(ReceivedMessage& a, ReceivedMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ReceivedMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReceivedMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReceivedMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReceivedMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReceivedMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReceivedMessage& from) {
    ReceivedMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReceivedMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.pubsub.v1.ReceivedMessage";
  }
  protected:
  explicit ReceivedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAckIdFieldNumber = 1,
    kMessageFieldNumber = 2,
    kDeliveryAttemptFieldNumber = 3,
  };
  // string ack_id = 1;
  void clear_ack_id();
  const std::string& ack_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ack_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ack_id();
  PROTOBUF_NODISCARD std::string* release_ack_id();
  void set_allocated_ack_id(std::string* ack_id);
  private:
  const std::string& _internal_ack_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ack_id(const std::string& value);
  std::string* _internal_mutable_ack_id();
  public:

  // .google.pubsub.v1.PubsubMessage message = 2;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::google::pubsub::v1::PubsubMessage& message() const;
  PROTOBUF_NODISCARD ::google::pubsub::v1::PubsubMessage* release_message();
  ::google::pubsub::v1::PubsubMessage* mutable_message();
  void set_allocated_message(::google::pubsub::v1::PubsubMessage* message);
  private:
  const ::google::pubsub::v1::PubsubMessage& _internal_message() const;
  ::google::pubsub::v1::PubsubMessage* _internal_mutable_message();
  public:
  void unsafe_arena_set_allocated_message(
      ::google::pubsub::v1::PubsubMessage* message);
  ::google::pubsub::v1::PubsubMessage* unsafe_arena_release_message();

  // int32 delivery_attempt = 3;
  void clear_delivery_attempt();
  int32_t delivery_attempt() const;
  void set_delivery_attempt(int32_t value);
  private:
  int32_t _internal_delivery_attempt() const;
  void _internal_set_delivery_attempt(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.ReceivedMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ack_id_;
    ::google::pubsub::v1::PubsubMessage* message_;
    int32_t delivery_attempt_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class GetSubscriptionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.GetSubscriptionRequest) */ {
 public:
  inline GetSubscriptionRequest() : GetSubscriptionRequest(nullptr) {}
  ~GetSubscriptionRequest() override;
  explicit PROTOBUF_CONSTEXPR GetSubscriptionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSubscriptionRequest(const GetSubscriptionRequest& from);
  GetSubscriptionRequest(GetSubscriptionRequest&& from) noexcept
    : GetSubscriptionRequest() {
    *this = ::std::move(from);
  }

  inline GetSubscriptionRequest& operator=(const GetSubscriptionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSubscriptionRequest& operator=(GetSubscriptionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSubscriptionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSubscriptionRequest* internal_default_instance() {
    return reinterpret_cast<const GetSubscriptionRequest*>(
               &_GetSubscriptionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(GetSubscriptionRequest& a, GetSubscriptionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSubscriptionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSubscriptionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSubscriptionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetSubscriptionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetSubscriptionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetSubscriptionRequest& from) {
    GetSubscriptionRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSubscriptionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.pubsub.v1.GetSubscriptionRequest";
  }
  protected:
  explicit GetSubscriptionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubscriptionFieldNumber = 1,
  };
  // string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_subscription();
  const std::string& subscription() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_subscription(ArgT0&& arg0, ArgT... args);
  std::string* mutable_subscription();
  PROTOBUF_NODISCARD std::string* release_subscription();
  void set_allocated_subscription(std::string* subscription);
  private:
  const std::string& _internal_subscription() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subscription(const std::string& value);
  std::string* _internal_mutable_subscription();
  public:

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.GetSubscriptionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subscription_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class UpdateSubscriptionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.UpdateSubscriptionRequest) */ {
 public:
  inline UpdateSubscriptionRequest() : UpdateSubscriptionRequest(nullptr) {}
  ~UpdateSubscriptionRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateSubscriptionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateSubscriptionRequest(const UpdateSubscriptionRequest& from);
  UpdateSubscriptionRequest(UpdateSubscriptionRequest&& from) noexcept
    : UpdateSubscriptionRequest() {
    *this = ::std::move(from);
  }

  inline UpdateSubscriptionRequest& operator=(const UpdateSubscriptionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateSubscriptionRequest& operator=(UpdateSubscriptionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateSubscriptionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateSubscriptionRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateSubscriptionRequest*>(
               &_UpdateSubscriptionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(UpdateSubscriptionRequest& a, UpdateSubscriptionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateSubscriptionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateSubscriptionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateSubscriptionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateSubscriptionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateSubscriptionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateSubscriptionRequest& from) {
    UpdateSubscriptionRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateSubscriptionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.pubsub.v1.UpdateSubscriptionRequest";
  }
  protected:
  explicit UpdateSubscriptionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubscriptionFieldNumber = 1,
    kUpdateMaskFieldNumber = 2,
  };
  // .google.pubsub.v1.Subscription subscription = 1 [(.google.api.field_behavior) = REQUIRED];
  bool has_subscription() const;
  private:
  bool _internal_has_subscription() const;
  public:
  void clear_subscription();
  const ::google::pubsub::v1::Subscription& subscription() const;
  PROTOBUF_NODISCARD ::google::pubsub::v1::Subscription* release_subscription();
  ::google::pubsub::v1::Subscription* mutable_subscription();
  void set_allocated_subscription(::google::pubsub::v1::Subscription* subscription);
  private:
  const ::google::pubsub::v1::Subscription& _internal_subscription() const;
  ::google::pubsub::v1::Subscription* _internal_mutable_subscription();
  public:
  void unsafe_arena_set_allocated_subscription(
      ::google::pubsub::v1::Subscription* subscription);
  ::google::pubsub::v1::Subscription* unsafe_arena_release_subscription();

  // .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.UpdateSubscriptionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::pubsub::v1::Subscription* subscription_;
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class ListSubscriptionsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.ListSubscriptionsRequest) */ {
 public:
  inline ListSubscriptionsRequest() : ListSubscriptionsRequest(nullptr) {}
  ~ListSubscriptionsRequest() override;
  explicit PROTOBUF_CONSTEXPR ListSubscriptionsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListSubscriptionsRequest(const ListSubscriptionsRequest& from);
  ListSubscriptionsRequest(ListSubscriptionsRequest&& from) noexcept
    : ListSubscriptionsRequest() {
    *this = ::std::move(from);
  }

  inline ListSubscriptionsRequest& operator=(const ListSubscriptionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListSubscriptionsRequest& operator=(ListSubscriptionsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListSubscriptionsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListSubscriptionsRequest* internal_default_instance() {
    return reinterpret_cast<const ListSubscriptionsRequest*>(
               &_ListSubscriptionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(ListSubscriptionsRequest& a, ListSubscriptionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListSubscriptionsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListSubscriptionsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListSubscriptionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListSubscriptionsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListSubscriptionsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListSubscriptionsRequest& from) {
    ListSubscriptionsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListSubscriptionsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.pubsub.v1.ListSubscriptionsRequest";
  }
  protected:
  explicit ListSubscriptionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjectFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kPageSizeFieldNumber = 2,
  };
  // string project = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_project();
  const std::string& project() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_project(ArgT0&& arg0, ArgT... args);
  std::string* mutable_project();
  PROTOBUF_NODISCARD std::string* release_project();
  void set_allocated_project(std::string* project);
  private:
  const std::string& _internal_project() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_project(const std::string& value);
  std::string* _internal_mutable_project();
  public:

  // string page_token = 3;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 2;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.ListSubscriptionsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr project_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
    int32_t page_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class ListSubscriptionsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.ListSubscriptionsResponse) */ {
 public:
  inline ListSubscriptionsResponse() : ListSubscriptionsResponse(nullptr) {}
  ~ListSubscriptionsResponse() override;
  explicit PROTOBUF_CONSTEXPR ListSubscriptionsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListSubscriptionsResponse(const ListSubscriptionsResponse& from);
  ListSubscriptionsResponse(ListSubscriptionsResponse&& from) noexcept
    : ListSubscriptionsResponse() {
    *this = ::std::move(from);
  }

  inline ListSubscriptionsResponse& operator=(const ListSubscriptionsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListSubscriptionsResponse& operator=(ListSubscriptionsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListSubscriptionsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListSubscriptionsResponse* internal_default_instance() {
    return reinterpret_cast<const ListSubscriptionsResponse*>(
               &_ListSubscriptionsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(ListSubscriptionsResponse& a, ListSubscriptionsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListSubscriptionsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListSubscriptionsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListSubscriptionsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListSubscriptionsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListSubscriptionsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListSubscriptionsResponse& from) {
    ListSubscriptionsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListSubscriptionsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.pubsub.v1.ListSubscriptionsResponse";
  }
  protected:
  explicit ListSubscriptionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubscriptionsFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .google.pubsub.v1.Subscription subscriptions = 1;
  int subscriptions_size() const;
  private:
  int _internal_subscriptions_size() const;
  public:
  void clear_subscriptions();
  ::google::pubsub::v1::Subscription* mutable_subscriptions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::pubsub::v1::Subscription >*
      mutable_subscriptions();
  private:
  const ::google::pubsub::v1::Subscription& _internal_subscriptions(int index) const;
  ::google::pubsub::v1::Subscription* _internal_add_subscriptions();
  public:
  const ::google::pubsub::v1::Subscription& subscriptions(int index) const;
  ::google::pubsub::v1::Subscription* add_subscriptions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::pubsub::v1::Subscription >&
      subscriptions() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.ListSubscriptionsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::pubsub::v1::Subscription > subscriptions_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class DeleteSubscriptionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.DeleteSubscriptionRequest) */ {
 public:
  inline DeleteSubscriptionRequest() : DeleteSubscriptionRequest(nullptr) {}
  ~DeleteSubscriptionRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteSubscriptionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteSubscriptionRequest(const DeleteSubscriptionRequest& from);
  DeleteSubscriptionRequest(DeleteSubscriptionRequest&& from) noexcept
    : DeleteSubscriptionRequest() {
    *this = ::std::move(from);
  }

  inline DeleteSubscriptionRequest& operator=(const DeleteSubscriptionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteSubscriptionRequest& operator=(DeleteSubscriptionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteSubscriptionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteSubscriptionRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteSubscriptionRequest*>(
               &_DeleteSubscriptionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(DeleteSubscriptionRequest& a, DeleteSubscriptionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteSubscriptionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteSubscriptionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteSubscriptionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteSubscriptionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteSubscriptionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteSubscriptionRequest& from) {
    DeleteSubscriptionRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteSubscriptionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.pubsub.v1.DeleteSubscriptionRequest";
  }
  protected:
  explicit DeleteSubscriptionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubscriptionFieldNumber = 1,
  };
  // string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_subscription();
  const std::string& subscription() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_subscription(ArgT0&& arg0, ArgT... args);
  std::string* mutable_subscription();
  PROTOBUF_NODISCARD std::string* release_subscription();
  void set_allocated_subscription(std::string* subscription);
  private:
  const std::string& _internal_subscription() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subscription(const std::string& value);
  std::string* _internal_mutable_subscription();
  public:

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.DeleteSubscriptionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subscription_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class ModifyPushConfigRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.ModifyPushConfigRequest) */ {
 public:
  inline ModifyPushConfigRequest() : ModifyPushConfigRequest(nullptr) {}
  ~ModifyPushConfigRequest() override;
  explicit PROTOBUF_CONSTEXPR ModifyPushConfigRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModifyPushConfigRequest(const ModifyPushConfigRequest& from);
  ModifyPushConfigRequest(ModifyPushConfigRequest&& from) noexcept
    : ModifyPushConfigRequest() {
    *this = ::std::move(from);
  }

  inline ModifyPushConfigRequest& operator=(const ModifyPushConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModifyPushConfigRequest& operator=(ModifyPushConfigRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModifyPushConfigRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModifyPushConfigRequest* internal_default_instance() {
    return reinterpret_cast<const ModifyPushConfigRequest*>(
               &_ModifyPushConfigRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(ModifyPushConfigRequest& a, ModifyPushConfigRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ModifyPushConfigRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModifyPushConfigRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModifyPushConfigRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModifyPushConfigRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModifyPushConfigRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ModifyPushConfigRequest& from) {
    ModifyPushConfigRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModifyPushConfigRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.pubsub.v1.ModifyPushConfigRequest";
  }
  protected:
  explicit ModifyPushConfigRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubscriptionFieldNumber = 1,
    kPushConfigFieldNumber = 2,
  };
  // string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_subscription();
  const std::string& subscription() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_subscription(ArgT0&& arg0, ArgT... args);
  std::string* mutable_subscription();
  PROTOBUF_NODISCARD std::string* release_subscription();
  void set_allocated_subscription(std::string* subscription);
  private:
  const std::string& _internal_subscription() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subscription(const std::string& value);
  std::string* _internal_mutable_subscription();
  public:

  // .google.pubsub.v1.PushConfig push_config = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_push_config() const;
  private:
  bool _internal_has_push_config() const;
  public:
  void clear_push_config();
  const ::google::pubsub::v1::PushConfig& push_config() const;
  PROTOBUF_NODISCARD ::google::pubsub::v1::PushConfig* release_push_config();
  ::google::pubsub::v1::PushConfig* mutable_push_config();
  void set_allocated_push_config(::google::pubsub::v1::PushConfig* push_config);
  private:
  const ::google::pubsub::v1::PushConfig& _internal_push_config() const;
  ::google::pubsub::v1::PushConfig* _internal_mutable_push_config();
  public:
  void unsafe_arena_set_allocated_push_config(
      ::google::pubsub::v1::PushConfig* push_config);
  ::google::pubsub::v1::PushConfig* unsafe_arena_release_push_config();

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.ModifyPushConfigRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subscription_;
    ::google::pubsub::v1::PushConfig* push_config_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class PullRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.PullRequest) */ {
 public:
  inline PullRequest() : PullRequest(nullptr) {}
  ~PullRequest() override;
  explicit PROTOBUF_CONSTEXPR PullRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PullRequest(const PullRequest& from);
  PullRequest(PullRequest&& from) noexcept
    : PullRequest() {
    *this = ::std::move(from);
  }

  inline PullRequest& operator=(const PullRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PullRequest& operator=(PullRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PullRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PullRequest* internal_default_instance() {
    return reinterpret_cast<const PullRequest*>(
               &_PullRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(PullRequest& a, PullRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PullRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PullRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PullRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PullRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PullRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PullRequest& from) {
    PullRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PullRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.pubsub.v1.PullRequest";
  }
  protected:
  explicit PullRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubscriptionFieldNumber = 1,
    kReturnImmediatelyFieldNumber = 2,
    kMaxMessagesFieldNumber = 3,
  };
  // string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_subscription();
  const std::string& subscription() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_subscription(ArgT0&& arg0, ArgT... args);
  std::string* mutable_subscription();
  PROTOBUF_NODISCARD std::string* release_subscription();
  void set_allocated_subscription(std::string* subscription);
  private:
  const std::string& _internal_subscription() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subscription(const std::string& value);
  std::string* _internal_mutable_subscription();
  public:

  // bool return_immediately = 2 [deprecated = true, (.google.api.field_behavior) = OPTIONAL];
  PROTOBUF_DEPRECATED void clear_return_immediately();
  PROTOBUF_DEPRECATED bool return_immediately() const;
  PROTOBUF_DEPRECATED void set_return_immediately(bool value);
  private:
  bool _internal_return_immediately() const;
  void _internal_set_return_immediately(bool value);
  public:

  // int32 max_messages = 3 [(.google.api.field_behavior) = REQUIRED];
  void clear_max_messages();
  int32_t max_messages() const;
  void set_max_messages(int32_t value);
  private:
  int32_t _internal_max_messages() const;
  void _internal_set_max_messages(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.PullRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subscription_;
    bool return_immediately_;
    int32_t max_messages_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class PullResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.PullResponse) */ {
 public:
  inline PullResponse() : PullResponse(nullptr) {}
  ~PullResponse() override;
  explicit PROTOBUF_CONSTEXPR PullResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PullResponse(const PullResponse& from);
  PullResponse(PullResponse&& from) noexcept
    : PullResponse() {
    *this = ::std::move(from);
  }

  inline PullResponse& operator=(const PullResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PullResponse& operator=(PullResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PullResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PullResponse* internal_default_instance() {
    return reinterpret_cast<const PullResponse*>(
               &_PullResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(PullResponse& a, PullResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PullResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PullResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PullResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PullResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PullResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PullResponse& from) {
    PullResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PullResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.pubsub.v1.PullResponse";
  }
  protected:
  explicit PullResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReceivedMessagesFieldNumber = 1,
  };
  // repeated .google.pubsub.v1.ReceivedMessage received_messages = 1;
  int received_messages_size() const;
  private:
  int _internal_received_messages_size() const;
  public:
  void clear_received_messages();
  ::google::pubsub::v1::ReceivedMessage* mutable_received_messages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::pubsub::v1::ReceivedMessage >*
      mutable_received_messages();
  private:
  const ::google::pubsub::v1::ReceivedMessage& _internal_received_messages(int index) const;
  ::google::pubsub::v1::ReceivedMessage* _internal_add_received_messages();
  public:
  const ::google::pubsub::v1::ReceivedMessage& received_messages(int index) const;
  ::google::pubsub::v1::ReceivedMessage* add_received_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::pubsub::v1::ReceivedMessage >&
      received_messages() const;

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.PullResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::pubsub::v1::ReceivedMessage > received_messages_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class ModifyAckDeadlineRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.ModifyAckDeadlineRequest) */ {
 public:
  inline ModifyAckDeadlineRequest() : ModifyAckDeadlineRequest(nullptr) {}
  ~ModifyAckDeadlineRequest() override;
  explicit PROTOBUF_CONSTEXPR ModifyAckDeadlineRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModifyAckDeadlineRequest(const ModifyAckDeadlineRequest& from);
  ModifyAckDeadlineRequest(ModifyAckDeadlineRequest&& from) noexcept
    : ModifyAckDeadlineRequest() {
    *this = ::std::move(from);
  }

  inline ModifyAckDeadlineRequest& operator=(const ModifyAckDeadlineRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModifyAckDeadlineRequest& operator=(ModifyAckDeadlineRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModifyAckDeadlineRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModifyAckDeadlineRequest* internal_default_instance() {
    return reinterpret_cast<const ModifyAckDeadlineRequest*>(
               &_ModifyAckDeadlineRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(ModifyAckDeadlineRequest& a, ModifyAckDeadlineRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ModifyAckDeadlineRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModifyAckDeadlineRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModifyAckDeadlineRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModifyAckDeadlineRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModifyAckDeadlineRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ModifyAckDeadlineRequest& from) {
    ModifyAckDeadlineRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModifyAckDeadlineRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.pubsub.v1.ModifyAckDeadlineRequest";
  }
  protected:
  explicit ModifyAckDeadlineRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAckIdsFieldNumber = 4,
    kSubscriptionFieldNumber = 1,
    kAckDeadlineSecondsFieldNumber = 3,
  };
  // repeated string ack_ids = 4 [(.google.api.field_behavior) = REQUIRED];
  int ack_ids_size() const;
  private:
  int _internal_ack_ids_size() const;
  public:
  void clear_ack_ids();
  const std::string& ack_ids(int index) const;
  std::string* mutable_ack_ids(int index);
  void set_ack_ids(int index, const std::string& value);
  void set_ack_ids(int index, std::string&& value);
  void set_ack_ids(int index, const char* value);
  void set_ack_ids(int index, const char* value, size_t size);
  std::string* add_ack_ids();
  void add_ack_ids(const std::string& value);
  void add_ack_ids(std::string&& value);
  void add_ack_ids(const char* value);
  void add_ack_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ack_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ack_ids();
  private:
  const std::string& _internal_ack_ids(int index) const;
  std::string* _internal_add_ack_ids();
  public:

  // string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_subscription();
  const std::string& subscription() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_subscription(ArgT0&& arg0, ArgT... args);
  std::string* mutable_subscription();
  PROTOBUF_NODISCARD std::string* release_subscription();
  void set_allocated_subscription(std::string* subscription);
  private:
  const std::string& _internal_subscription() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subscription(const std::string& value);
  std::string* _internal_mutable_subscription();
  public:

  // int32 ack_deadline_seconds = 3 [(.google.api.field_behavior) = REQUIRED];
  void clear_ack_deadline_seconds();
  int32_t ack_deadline_seconds() const;
  void set_ack_deadline_seconds(int32_t value);
  private:
  int32_t _internal_ack_deadline_seconds() const;
  void _internal_set_ack_deadline_seconds(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.ModifyAckDeadlineRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ack_ids_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subscription_;
    int32_t ack_deadline_seconds_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class AcknowledgeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.AcknowledgeRequest) */ {
 public:
  inline AcknowledgeRequest() : AcknowledgeRequest(nullptr) {}
  ~AcknowledgeRequest() override;
  explicit PROTOBUF_CONSTEXPR AcknowledgeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AcknowledgeRequest(const AcknowledgeRequest& from);
  AcknowledgeRequest(AcknowledgeRequest&& from) noexcept
    : AcknowledgeRequest() {
    *this = ::std::move(from);
  }

  inline AcknowledgeRequest& operator=(const AcknowledgeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AcknowledgeRequest& operator=(AcknowledgeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AcknowledgeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AcknowledgeRequest* internal_default_instance() {
    return reinterpret_cast<const AcknowledgeRequest*>(
               &_AcknowledgeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(AcknowledgeRequest& a, AcknowledgeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AcknowledgeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AcknowledgeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AcknowledgeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AcknowledgeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AcknowledgeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AcknowledgeRequest& from) {
    AcknowledgeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AcknowledgeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.pubsub.v1.AcknowledgeRequest";
  }
  protected:
  explicit AcknowledgeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAckIdsFieldNumber = 2,
    kSubscriptionFieldNumber = 1,
  };
  // repeated string ack_ids = 2 [(.google.api.field_behavior) = REQUIRED];
  int ack_ids_size() const;
  private:
  int _internal_ack_ids_size() const;
  public:
  void clear_ack_ids();
  const std::string& ack_ids(int index) const;
  std::string* mutable_ack_ids(int index);
  void set_ack_ids(int index, const std::string& value);
  void set_ack_ids(int index, std::string&& value);
  void set_ack_ids(int index, const char* value);
  void set_ack_ids(int index, const char* value, size_t size);
  std::string* add_ack_ids();
  void add_ack_ids(const std::string& value);
  void add_ack_ids(std::string&& value);
  void add_ack_ids(const char* value);
  void add_ack_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ack_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ack_ids();
  private:
  const std::string& _internal_ack_ids(int index) const;
  std::string* _internal_add_ack_ids();
  public:

  // string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_subscription();
  const std::string& subscription() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_subscription(ArgT0&& arg0, ArgT... args);
  std::string* mutable_subscription();
  PROTOBUF_NODISCARD std::string* release_subscription();
  void set_allocated_subscription(std::string* subscription);
  private:
  const std::string& _internal_subscription() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subscription(const std::string& value);
  std::string* _internal_mutable_subscription();
  public:

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.AcknowledgeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ack_ids_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subscription_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class StreamingPullRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.StreamingPullRequest) */ {
 public:
  inline StreamingPullRequest() : StreamingPullRequest(nullptr) {}
  ~StreamingPullRequest() override;
  explicit PROTOBUF_CONSTEXPR StreamingPullRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamingPullRequest(const StreamingPullRequest& from);
  StreamingPullRequest(StreamingPullRequest&& from) noexcept
    : StreamingPullRequest() {
    *this = ::std::move(from);
  }

  inline StreamingPullRequest& operator=(const StreamingPullRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamingPullRequest& operator=(StreamingPullRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamingPullRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamingPullRequest* internal_default_instance() {
    return reinterpret_cast<const StreamingPullRequest*>(
               &_StreamingPullRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(StreamingPullRequest& a, StreamingPullRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamingPullRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamingPullRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamingPullRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamingPullRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamingPullRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StreamingPullRequest& from) {
    StreamingPullRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamingPullRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.pubsub.v1.StreamingPullRequest";
  }
  protected:
  explicit StreamingPullRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAckIdsFieldNumber = 2,
    kModifyDeadlineSecondsFieldNumber = 3,
    kModifyDeadlineAckIdsFieldNumber = 4,
    kSubscriptionFieldNumber = 1,
    kClientIdFieldNumber = 6,
    kMaxOutstandingMessagesFieldNumber = 7,
    kMaxOutstandingBytesFieldNumber = 8,
    kStreamAckDeadlineSecondsFieldNumber = 5,
  };
  // repeated string ack_ids = 2;
  int ack_ids_size() const;
  private:
  int _internal_ack_ids_size() const;
  public:
  void clear_ack_ids();
  const std::string& ack_ids(int index) const;
  std::string* mutable_ack_ids(int index);
  void set_ack_ids(int index, const std::string& value);
  void set_ack_ids(int index, std::string&& value);
  void set_ack_ids(int index, const char* value);
  void set_ack_ids(int index, const char* value, size_t size);
  std::string* add_ack_ids();
  void add_ack_ids(const std::string& value);
  void add_ack_ids(std::string&& value);
  void add_ack_ids(const char* value);
  void add_ack_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ack_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ack_ids();
  private:
  const std::string& _internal_ack_ids(int index) const;
  std::string* _internal_add_ack_ids();
  public:

  // repeated int32 modify_deadline_seconds = 3;
  int modify_deadline_seconds_size() const;
  private:
  int _internal_modify_deadline_seconds_size() const;
  public:
  void clear_modify_deadline_seconds();
  private:
  int32_t _internal_modify_deadline_seconds(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_modify_deadline_seconds() const;
  void _internal_add_modify_deadline_seconds(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_modify_deadline_seconds();
  public:
  int32_t modify_deadline_seconds(int index) const;
  void set_modify_deadline_seconds(int index, int32_t value);
  void add_modify_deadline_seconds(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      modify_deadline_seconds() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_modify_deadline_seconds();

  // repeated string modify_deadline_ack_ids = 4;
  int modify_deadline_ack_ids_size() const;
  private:
  int _internal_modify_deadline_ack_ids_size() const;
  public:
  void clear_modify_deadline_ack_ids();
  const std::string& modify_deadline_ack_ids(int index) const;
  std::string* mutable_modify_deadline_ack_ids(int index);
  void set_modify_deadline_ack_ids(int index, const std::string& value);
  void set_modify_deadline_ack_ids(int index, std::string&& value);
  void set_modify_deadline_ack_ids(int index, const char* value);
  void set_modify_deadline_ack_ids(int index, const char* value, size_t size);
  std::string* add_modify_deadline_ack_ids();
  void add_modify_deadline_ack_ids(const std::string& value);
  void add_modify_deadline_ack_ids(std::string&& value);
  void add_modify_deadline_ack_ids(const char* value);
  void add_modify_deadline_ack_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& modify_deadline_ack_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_modify_deadline_ack_ids();
  private:
  const std::string& _internal_modify_deadline_ack_ids(int index) const;
  std::string* _internal_add_modify_deadline_ack_ids();
  public:

  // string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_subscription();
  const std::string& subscription() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_subscription(ArgT0&& arg0, ArgT... args);
  std::string* mutable_subscription();
  PROTOBUF_NODISCARD std::string* release_subscription();
  void set_allocated_subscription(std::string* subscription);
  private:
  const std::string& _internal_subscription() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subscription(const std::string& value);
  std::string* _internal_mutable_subscription();
  public:

  // string client_id = 6;
  void clear_client_id();
  const std::string& client_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_client_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_client_id();
  PROTOBUF_NODISCARD std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // int64 max_outstanding_messages = 7;
  void clear_max_outstanding_messages();
  int64_t max_outstanding_messages() const;
  void set_max_outstanding_messages(int64_t value);
  private:
  int64_t _internal_max_outstanding_messages() const;
  void _internal_set_max_outstanding_messages(int64_t value);
  public:

  // int64 max_outstanding_bytes = 8;
  void clear_max_outstanding_bytes();
  int64_t max_outstanding_bytes() const;
  void set_max_outstanding_bytes(int64_t value);
  private:
  int64_t _internal_max_outstanding_bytes() const;
  void _internal_set_max_outstanding_bytes(int64_t value);
  public:

  // int32 stream_ack_deadline_seconds = 5 [(.google.api.field_behavior) = REQUIRED];
  void clear_stream_ack_deadline_seconds();
  int32_t stream_ack_deadline_seconds() const;
  void set_stream_ack_deadline_seconds(int32_t value);
  private:
  int32_t _internal_stream_ack_deadline_seconds() const;
  void _internal_set_stream_ack_deadline_seconds(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.StreamingPullRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ack_ids_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > modify_deadline_seconds_;
    mutable std::atomic<int> _modify_deadline_seconds_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> modify_deadline_ack_ids_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subscription_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
    int64_t max_outstanding_messages_;
    int64_t max_outstanding_bytes_;
    int32_t stream_ack_deadline_seconds_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class StreamingPullResponse_AcknowledgeConfirmation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.StreamingPullResponse.AcknowledgeConfirmation) */ {
 public:
  inline StreamingPullResponse_AcknowledgeConfirmation() : StreamingPullResponse_AcknowledgeConfirmation(nullptr) {}
  ~StreamingPullResponse_AcknowledgeConfirmation() override;
  explicit PROTOBUF_CONSTEXPR StreamingPullResponse_AcknowledgeConfirmation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamingPullResponse_AcknowledgeConfirmation(const StreamingPullResponse_AcknowledgeConfirmation& from);
  StreamingPullResponse_AcknowledgeConfirmation(StreamingPullResponse_AcknowledgeConfirmation&& from) noexcept
    : StreamingPullResponse_AcknowledgeConfirmation() {
    *this = ::std::move(from);
  }

  inline StreamingPullResponse_AcknowledgeConfirmation& operator=(const StreamingPullResponse_AcknowledgeConfirmation& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamingPullResponse_AcknowledgeConfirmation& operator=(StreamingPullResponse_AcknowledgeConfirmation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamingPullResponse_AcknowledgeConfirmation& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamingPullResponse_AcknowledgeConfirmation* internal_default_instance() {
    return reinterpret_cast<const StreamingPullResponse_AcknowledgeConfirmation*>(
               &_StreamingPullResponse_AcknowledgeConfirmation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(StreamingPullResponse_AcknowledgeConfirmation& a, StreamingPullResponse_AcknowledgeConfirmation& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamingPullResponse_AcknowledgeConfirmation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamingPullResponse_AcknowledgeConfirmation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamingPullResponse_AcknowledgeConfirmation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamingPullResponse_AcknowledgeConfirmation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamingPullResponse_AcknowledgeConfirmation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StreamingPullResponse_AcknowledgeConfirmation& from) {
    StreamingPullResponse_AcknowledgeConfirmation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamingPullResponse_AcknowledgeConfirmation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.pubsub.v1.StreamingPullResponse.AcknowledgeConfirmation";
  }
  protected:
  explicit StreamingPullResponse_AcknowledgeConfirmation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAckIdsFieldNumber = 1,
    kInvalidAckIdsFieldNumber = 2,
    kUnorderedAckIdsFieldNumber = 3,
  };
  // repeated string ack_ids = 1 [ctype = CORD];
  int ack_ids_size() const;
  private:
  int _internal_ack_ids_size() const;
  public:
  void clear_ack_ids();
 private:
  // Hidden due to unknown ctype option.
  const std::string& ack_ids(int index) const;
  std::string* mutable_ack_ids(int index);
  void set_ack_ids(int index, const std::string& value);
  void set_ack_ids(int index, std::string&& value);
  void set_ack_ids(int index, const char* value);
  void set_ack_ids(int index, const char* value, size_t size);
  std::string* add_ack_ids();
  void add_ack_ids(const std::string& value);
  void add_ack_ids(std::string&& value);
  void add_ack_ids(const char* value);
  void add_ack_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ack_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ack_ids();
  private:
  const std::string& _internal_ack_ids(int index) const;
  std::string* _internal_add_ack_ids();
  public:
 public:

  // repeated string invalid_ack_ids = 2 [ctype = CORD];
  int invalid_ack_ids_size() const;
  private:
  int _internal_invalid_ack_ids_size() const;
  public:
  void clear_invalid_ack_ids();
 private:
  // Hidden due to unknown ctype option.
  const std::string& invalid_ack_ids(int index) const;
  std::string* mutable_invalid_ack_ids(int index);
  void set_invalid_ack_ids(int index, const std::string& value);
  void set_invalid_ack_ids(int index, std::string&& value);
  void set_invalid_ack_ids(int index, const char* value);
  void set_invalid_ack_ids(int index, const char* value, size_t size);
  std::string* add_invalid_ack_ids();
  void add_invalid_ack_ids(const std::string& value);
  void add_invalid_ack_ids(std::string&& value);
  void add_invalid_ack_ids(const char* value);
  void add_invalid_ack_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& invalid_ack_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_invalid_ack_ids();
  private:
  const std::string& _internal_invalid_ack_ids(int index) const;
  std::string* _internal_add_invalid_ack_ids();
  public:
 public:

  // repeated string unordered_ack_ids = 3 [ctype = CORD];
  int unordered_ack_ids_size() const;
  private:
  int _internal_unordered_ack_ids_size() const;
  public:
  void clear_unordered_ack_ids();
 private:
  // Hidden due to unknown ctype option.
  const std::string& unordered_ack_ids(int index) const;
  std::string* mutable_unordered_ack_ids(int index);
  void set_unordered_ack_ids(int index, const std::string& value);
  void set_unordered_ack_ids(int index, std::string&& value);
  void set_unordered_ack_ids(int index, const char* value);
  void set_unordered_ack_ids(int index, const char* value, size_t size);
  std::string* add_unordered_ack_ids();
  void add_unordered_ack_ids(const std::string& value);
  void add_unordered_ack_ids(std::string&& value);
  void add_unordered_ack_ids(const char* value);
  void add_unordered_ack_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& unordered_ack_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_unordered_ack_ids();
  private:
  const std::string& _internal_unordered_ack_ids(int index) const;
  std::string* _internal_add_unordered_ack_ids();
  public:
 public:

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.StreamingPullResponse.AcknowledgeConfirmation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ack_ids_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> invalid_ack_ids_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> unordered_ack_ids_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class StreamingPullResponse_ModifyAckDeadlineConfirmation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.StreamingPullResponse.ModifyAckDeadlineConfirmation) */ {
 public:
  inline StreamingPullResponse_ModifyAckDeadlineConfirmation() : StreamingPullResponse_ModifyAckDeadlineConfirmation(nullptr) {}
  ~StreamingPullResponse_ModifyAckDeadlineConfirmation() override;
  explicit PROTOBUF_CONSTEXPR StreamingPullResponse_ModifyAckDeadlineConfirmation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamingPullResponse_ModifyAckDeadlineConfirmation(const StreamingPullResponse_ModifyAckDeadlineConfirmation& from);
  StreamingPullResponse_ModifyAckDeadlineConfirmation(StreamingPullResponse_ModifyAckDeadlineConfirmation&& from) noexcept
    : StreamingPullResponse_ModifyAckDeadlineConfirmation() {
    *this = ::std::move(from);
  }

  inline StreamingPullResponse_ModifyAckDeadlineConfirmation& operator=(const StreamingPullResponse_ModifyAckDeadlineConfirmation& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamingPullResponse_ModifyAckDeadlineConfirmation& operator=(StreamingPullResponse_ModifyAckDeadlineConfirmation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamingPullResponse_ModifyAckDeadlineConfirmation& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamingPullResponse_ModifyAckDeadlineConfirmation* internal_default_instance() {
    return reinterpret_cast<const StreamingPullResponse_ModifyAckDeadlineConfirmation*>(
               &_StreamingPullResponse_ModifyAckDeadlineConfirmation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(StreamingPullResponse_ModifyAckDeadlineConfirmation& a, StreamingPullResponse_ModifyAckDeadlineConfirmation& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamingPullResponse_ModifyAckDeadlineConfirmation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamingPullResponse_ModifyAckDeadlineConfirmation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamingPullResponse_ModifyAckDeadlineConfirmation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamingPullResponse_ModifyAckDeadlineConfirmation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamingPullResponse_ModifyAckDeadlineConfirmation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StreamingPullResponse_ModifyAckDeadlineConfirmation& from) {
    StreamingPullResponse_ModifyAckDeadlineConfirmation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamingPullResponse_ModifyAckDeadlineConfirmation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.pubsub.v1.StreamingPullResponse.ModifyAckDeadlineConfirmation";
  }
  protected:
  explicit StreamingPullResponse_ModifyAckDeadlineConfirmation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAckIdsFieldNumber = 1,
    kInvalidAckIdsFieldNumber = 2,
  };
  // repeated string ack_ids = 1 [ctype = CORD];
  int ack_ids_size() const;
  private:
  int _internal_ack_ids_size() const;
  public:
  void clear_ack_ids();
 private:
  // Hidden due to unknown ctype option.
  const std::string& ack_ids(int index) const;
  std::string* mutable_ack_ids(int index);
  void set_ack_ids(int index, const std::string& value);
  void set_ack_ids(int index, std::string&& value);
  void set_ack_ids(int index, const char* value);
  void set_ack_ids(int index, const char* value, size_t size);
  std::string* add_ack_ids();
  void add_ack_ids(const std::string& value);
  void add_ack_ids(std::string&& value);
  void add_ack_ids(const char* value);
  void add_ack_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ack_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ack_ids();
  private:
  const std::string& _internal_ack_ids(int index) const;
  std::string* _internal_add_ack_ids();
  public:
 public:

  // repeated string invalid_ack_ids = 2 [ctype = CORD];
  int invalid_ack_ids_size() const;
  private:
  int _internal_invalid_ack_ids_size() const;
  public:
  void clear_invalid_ack_ids();
 private:
  // Hidden due to unknown ctype option.
  const std::string& invalid_ack_ids(int index) const;
  std::string* mutable_invalid_ack_ids(int index);
  void set_invalid_ack_ids(int index, const std::string& value);
  void set_invalid_ack_ids(int index, std::string&& value);
  void set_invalid_ack_ids(int index, const char* value);
  void set_invalid_ack_ids(int index, const char* value, size_t size);
  std::string* add_invalid_ack_ids();
  void add_invalid_ack_ids(const std::string& value);
  void add_invalid_ack_ids(std::string&& value);
  void add_invalid_ack_ids(const char* value);
  void add_invalid_ack_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& invalid_ack_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_invalid_ack_ids();
  private:
  const std::string& _internal_invalid_ack_ids(int index) const;
  std::string* _internal_add_invalid_ack_ids();
  public:
 public:

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.StreamingPullResponse.ModifyAckDeadlineConfirmation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ack_ids_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> invalid_ack_ids_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class StreamingPullResponse_SubscriptionProperties final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.StreamingPullResponse.SubscriptionProperties) */ {
 public:
  inline StreamingPullResponse_SubscriptionProperties() : StreamingPullResponse_SubscriptionProperties(nullptr) {}
  ~StreamingPullResponse_SubscriptionProperties() override;
  explicit PROTOBUF_CONSTEXPR StreamingPullResponse_SubscriptionProperties(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamingPullResponse_SubscriptionProperties(const StreamingPullResponse_SubscriptionProperties& from);
  StreamingPullResponse_SubscriptionProperties(StreamingPullResponse_SubscriptionProperties&& from) noexcept
    : StreamingPullResponse_SubscriptionProperties() {
    *this = ::std::move(from);
  }

  inline StreamingPullResponse_SubscriptionProperties& operator=(const StreamingPullResponse_SubscriptionProperties& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamingPullResponse_SubscriptionProperties& operator=(StreamingPullResponse_SubscriptionProperties&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamingPullResponse_SubscriptionProperties& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamingPullResponse_SubscriptionProperties* internal_default_instance() {
    return reinterpret_cast<const StreamingPullResponse_SubscriptionProperties*>(
               &_StreamingPullResponse_SubscriptionProperties_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(StreamingPullResponse_SubscriptionProperties& a, StreamingPullResponse_SubscriptionProperties& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamingPullResponse_SubscriptionProperties* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamingPullResponse_SubscriptionProperties* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamingPullResponse_SubscriptionProperties* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamingPullResponse_SubscriptionProperties>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamingPullResponse_SubscriptionProperties& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StreamingPullResponse_SubscriptionProperties& from) {
    StreamingPullResponse_SubscriptionProperties::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamingPullResponse_SubscriptionProperties* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.pubsub.v1.StreamingPullResponse.SubscriptionProperties";
  }
  protected:
  explicit StreamingPullResponse_SubscriptionProperties(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExactlyOnceDeliveryEnabledFieldNumber = 1,
    kMessageOrderingEnabledFieldNumber = 2,
  };
  // bool exactly_once_delivery_enabled = 1;
  void clear_exactly_once_delivery_enabled();
  bool exactly_once_delivery_enabled() const;
  void set_exactly_once_delivery_enabled(bool value);
  private:
  bool _internal_exactly_once_delivery_enabled() const;
  void _internal_set_exactly_once_delivery_enabled(bool value);
  public:

  // bool message_ordering_enabled = 2;
  void clear_message_ordering_enabled();
  bool message_ordering_enabled() const;
  void set_message_ordering_enabled(bool value);
  private:
  bool _internal_message_ordering_enabled() const;
  void _internal_set_message_ordering_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.StreamingPullResponse.SubscriptionProperties)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool exactly_once_delivery_enabled_;
    bool message_ordering_enabled_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class StreamingPullResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.StreamingPullResponse) */ {
 public:
  inline StreamingPullResponse() : StreamingPullResponse(nullptr) {}
  ~StreamingPullResponse() override;
  explicit PROTOBUF_CONSTEXPR StreamingPullResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamingPullResponse(const StreamingPullResponse& from);
  StreamingPullResponse(StreamingPullResponse&& from) noexcept
    : StreamingPullResponse() {
    *this = ::std::move(from);
  }

  inline StreamingPullResponse& operator=(const StreamingPullResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamingPullResponse& operator=(StreamingPullResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamingPullResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamingPullResponse* internal_default_instance() {
    return reinterpret_cast<const StreamingPullResponse*>(
               &_StreamingPullResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(StreamingPullResponse& a, StreamingPullResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamingPullResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamingPullResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamingPullResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamingPullResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamingPullResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StreamingPullResponse& from) {
    StreamingPullResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamingPullResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.pubsub.v1.StreamingPullResponse";
  }
  protected:
  explicit StreamingPullResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef StreamingPullResponse_AcknowledgeConfirmation AcknowledgeConfirmation;
  typedef StreamingPullResponse_ModifyAckDeadlineConfirmation ModifyAckDeadlineConfirmation;
  typedef StreamingPullResponse_SubscriptionProperties SubscriptionProperties;

  // accessors -------------------------------------------------------

  enum : int {
    kReceivedMessagesFieldNumber = 1,
    kModifyAckDeadlineConfirmationFieldNumber = 3,
    kSubscriptionPropertiesFieldNumber = 4,
    kAcknowledgeConfirmationFieldNumber = 5,
  };
  // repeated .google.pubsub.v1.ReceivedMessage received_messages = 1;
  int received_messages_size() const;
  private:
  int _internal_received_messages_size() const;
  public:
  void clear_received_messages();
  ::google::pubsub::v1::ReceivedMessage* mutable_received_messages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::pubsub::v1::ReceivedMessage >*
      mutable_received_messages();
  private:
  const ::google::pubsub::v1::ReceivedMessage& _internal_received_messages(int index) const;
  ::google::pubsub::v1::ReceivedMessage* _internal_add_received_messages();
  public:
  const ::google::pubsub::v1::ReceivedMessage& received_messages(int index) const;
  ::google::pubsub::v1::ReceivedMessage* add_received_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::pubsub::v1::ReceivedMessage >&
      received_messages() const;

  // .google.pubsub.v1.StreamingPullResponse.ModifyAckDeadlineConfirmation modify_ack_deadline_confirmation = 3;
  bool has_modify_ack_deadline_confirmation() const;
  private:
  bool _internal_has_modify_ack_deadline_confirmation() const;
  public:
  void clear_modify_ack_deadline_confirmation();
  const ::google::pubsub::v1::StreamingPullResponse_ModifyAckDeadlineConfirmation& modify_ack_deadline_confirmation() const;
  PROTOBUF_NODISCARD ::google::pubsub::v1::StreamingPullResponse_ModifyAckDeadlineConfirmation* release_modify_ack_deadline_confirmation();
  ::google::pubsub::v1::StreamingPullResponse_ModifyAckDeadlineConfirmation* mutable_modify_ack_deadline_confirmation();
  void set_allocated_modify_ack_deadline_confirmation(::google::pubsub::v1::StreamingPullResponse_ModifyAckDeadlineConfirmation* modify_ack_deadline_confirmation);
  private:
  const ::google::pubsub::v1::StreamingPullResponse_ModifyAckDeadlineConfirmation& _internal_modify_ack_deadline_confirmation() const;
  ::google::pubsub::v1::StreamingPullResponse_ModifyAckDeadlineConfirmation* _internal_mutable_modify_ack_deadline_confirmation();
  public:
  void unsafe_arena_set_allocated_modify_ack_deadline_confirmation(
      ::google::pubsub::v1::StreamingPullResponse_ModifyAckDeadlineConfirmation* modify_ack_deadline_confirmation);
  ::google::pubsub::v1::StreamingPullResponse_ModifyAckDeadlineConfirmation* unsafe_arena_release_modify_ack_deadline_confirmation();

  // .google.pubsub.v1.StreamingPullResponse.SubscriptionProperties subscription_properties = 4;
  bool has_subscription_properties() const;
  private:
  bool _internal_has_subscription_properties() const;
  public:
  void clear_subscription_properties();
  const ::google::pubsub::v1::StreamingPullResponse_SubscriptionProperties& subscription_properties() const;
  PROTOBUF_NODISCARD ::google::pubsub::v1::StreamingPullResponse_SubscriptionProperties* release_subscription_properties();
  ::google::pubsub::v1::StreamingPullResponse_SubscriptionProperties* mutable_subscription_properties();
  void set_allocated_subscription_properties(::google::pubsub::v1::StreamingPullResponse_SubscriptionProperties* subscription_properties);
  private:
  const ::google::pubsub::v1::StreamingPullResponse_SubscriptionProperties& _internal_subscription_properties() const;
  ::google::pubsub::v1::StreamingPullResponse_SubscriptionProperties* _internal_mutable_subscription_properties();
  public:
  void unsafe_arena_set_allocated_subscription_properties(
      ::google::pubsub::v1::StreamingPullResponse_SubscriptionProperties* subscription_properties);
  ::google::pubsub::v1::StreamingPullResponse_SubscriptionProperties* unsafe_arena_release_subscription_properties();

  // .google.pubsub.v1.StreamingPullResponse.AcknowledgeConfirmation acknowledge_confirmation = 5;
  bool has_acknowledge_confirmation() const;
  private:
  bool _internal_has_acknowledge_confirmation() const;
  public:
  void clear_acknowledge_confirmation();
  const ::google::pubsub::v1::StreamingPullResponse_AcknowledgeConfirmation& acknowledge_confirmation() const;
  PROTOBUF_NODISCARD ::google::pubsub::v1::StreamingPullResponse_AcknowledgeConfirmation* release_acknowledge_confirmation();
  ::google::pubsub::v1::StreamingPullResponse_AcknowledgeConfirmation* mutable_acknowledge_confirmation();
  void set_allocated_acknowledge_confirmation(::google::pubsub::v1::StreamingPullResponse_AcknowledgeConfirmation* acknowledge_confirmation);
  private:
  const ::google::pubsub::v1::StreamingPullResponse_AcknowledgeConfirmation& _internal_acknowledge_confirmation() const;
  ::google::pubsub::v1::StreamingPullResponse_AcknowledgeConfirmation* _internal_mutable_acknowledge_confirmation();
  public:
  void unsafe_arena_set_allocated_acknowledge_confirmation(
      ::google::pubsub::v1::StreamingPullResponse_AcknowledgeConfirmation* acknowledge_confirmation);
  ::google::pubsub::v1::StreamingPullResponse_AcknowledgeConfirmation* unsafe_arena_release_acknowledge_confirmation();

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.StreamingPullResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::pubsub::v1::ReceivedMessage > received_messages_;
    ::google::pubsub::v1::StreamingPullResponse_ModifyAckDeadlineConfirmation* modify_ack_deadline_confirmation_;
    ::google::pubsub::v1::StreamingPullResponse_SubscriptionProperties* subscription_properties_;
    ::google::pubsub::v1::StreamingPullResponse_AcknowledgeConfirmation* acknowledge_confirmation_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class CreateSnapshotRequest_LabelsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CreateSnapshotRequest_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CreateSnapshotRequest_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  CreateSnapshotRequest_LabelsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR CreateSnapshotRequest_LabelsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CreateSnapshotRequest_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CreateSnapshotRequest_LabelsEntry_DoNotUse& other);
  static const CreateSnapshotRequest_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CreateSnapshotRequest_LabelsEntry_DoNotUse*>(&_CreateSnapshotRequest_LabelsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.pubsub.v1.CreateSnapshotRequest.LabelsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.pubsub.v1.CreateSnapshotRequest.LabelsEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};

// -------------------------------------------------------------------

class CreateSnapshotRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.CreateSnapshotRequest) */ {
 public:
  inline CreateSnapshotRequest() : CreateSnapshotRequest(nullptr) {}
  ~CreateSnapshotRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateSnapshotRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateSnapshotRequest(const CreateSnapshotRequest& from);
  CreateSnapshotRequest(CreateSnapshotRequest&& from) noexcept
    : CreateSnapshotRequest() {
    *this = ::std::move(from);
  }

  inline CreateSnapshotRequest& operator=(const CreateSnapshotRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateSnapshotRequest& operator=(CreateSnapshotRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateSnapshotRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateSnapshotRequest* internal_default_instance() {
    return reinterpret_cast<const CreateSnapshotRequest*>(
               &_CreateSnapshotRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(CreateSnapshotRequest& a, CreateSnapshotRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateSnapshotRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateSnapshotRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateSnapshotRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateSnapshotRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateSnapshotRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateSnapshotRequest& from) {
    CreateSnapshotRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateSnapshotRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.pubsub.v1.CreateSnapshotRequest";
  }
  protected:
  explicit CreateSnapshotRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 3,
    kNameFieldNumber = 1,
    kSubscriptionFieldNumber = 2,
  };
  // map<string, string> labels = 3;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_labels();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_labels();

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string subscription = 2 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_subscription();
  const std::string& subscription() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_subscription(ArgT0&& arg0, ArgT... args);
  std::string* mutable_subscription();
  PROTOBUF_NODISCARD std::string* release_subscription();
  void set_allocated_subscription(std::string* subscription);
  private:
  const std::string& _internal_subscription() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subscription(const std::string& value);
  std::string* _internal_mutable_subscription();
  public:

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.CreateSnapshotRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        CreateSnapshotRequest_LabelsEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> labels_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subscription_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class UpdateSnapshotRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.UpdateSnapshotRequest) */ {
 public:
  inline UpdateSnapshotRequest() : UpdateSnapshotRequest(nullptr) {}
  ~UpdateSnapshotRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateSnapshotRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateSnapshotRequest(const UpdateSnapshotRequest& from);
  UpdateSnapshotRequest(UpdateSnapshotRequest&& from) noexcept
    : UpdateSnapshotRequest() {
    *this = ::std::move(from);
  }

  inline UpdateSnapshotRequest& operator=(const UpdateSnapshotRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateSnapshotRequest& operator=(UpdateSnapshotRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateSnapshotRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateSnapshotRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateSnapshotRequest*>(
               &_UpdateSnapshotRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(UpdateSnapshotRequest& a, UpdateSnapshotRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateSnapshotRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateSnapshotRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateSnapshotRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateSnapshotRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateSnapshotRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateSnapshotRequest& from) {
    UpdateSnapshotRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateSnapshotRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.pubsub.v1.UpdateSnapshotRequest";
  }
  protected:
  explicit UpdateSnapshotRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSnapshotFieldNumber = 1,
    kUpdateMaskFieldNumber = 2,
  };
  // .google.pubsub.v1.Snapshot snapshot = 1 [(.google.api.field_behavior) = REQUIRED];
  bool has_snapshot() const;
  private:
  bool _internal_has_snapshot() const;
  public:
  void clear_snapshot();
  const ::google::pubsub::v1::Snapshot& snapshot() const;
  PROTOBUF_NODISCARD ::google::pubsub::v1::Snapshot* release_snapshot();
  ::google::pubsub::v1::Snapshot* mutable_snapshot();
  void set_allocated_snapshot(::google::pubsub::v1::Snapshot* snapshot);
  private:
  const ::google::pubsub::v1::Snapshot& _internal_snapshot() const;
  ::google::pubsub::v1::Snapshot* _internal_mutable_snapshot();
  public:
  void unsafe_arena_set_allocated_snapshot(
      ::google::pubsub::v1::Snapshot* snapshot);
  ::google::pubsub::v1::Snapshot* unsafe_arena_release_snapshot();

  // .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.UpdateSnapshotRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::pubsub::v1::Snapshot* snapshot_;
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class Snapshot_LabelsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Snapshot_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Snapshot_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  Snapshot_LabelsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR Snapshot_LabelsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Snapshot_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Snapshot_LabelsEntry_DoNotUse& other);
  static const Snapshot_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Snapshot_LabelsEntry_DoNotUse*>(&_Snapshot_LabelsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.pubsub.v1.Snapshot.LabelsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.pubsub.v1.Snapshot.LabelsEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};

// -------------------------------------------------------------------

class Snapshot final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.Snapshot) */ {
 public:
  inline Snapshot() : Snapshot(nullptr) {}
  ~Snapshot() override;
  explicit PROTOBUF_CONSTEXPR Snapshot(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Snapshot(const Snapshot& from);
  Snapshot(Snapshot&& from) noexcept
    : Snapshot() {
    *this = ::std::move(from);
  }

  inline Snapshot& operator=(const Snapshot& from) {
    CopyFrom(from);
    return *this;
  }
  inline Snapshot& operator=(Snapshot&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Snapshot& default_instance() {
    return *internal_default_instance();
  }
  static inline const Snapshot* internal_default_instance() {
    return reinterpret_cast<const Snapshot*>(
               &_Snapshot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(Snapshot& a, Snapshot& b) {
    a.Swap(&b);
  }
  inline void Swap(Snapshot* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Snapshot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Snapshot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Snapshot>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Snapshot& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Snapshot& from) {
    Snapshot::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Snapshot* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.pubsub.v1.Snapshot";
  }
  protected:
  explicit Snapshot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 4,
    kNameFieldNumber = 1,
    kTopicFieldNumber = 2,
    kExpireTimeFieldNumber = 3,
  };
  // map<string, string> labels = 4;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_labels();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_labels();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string topic = 2 [(.google.api.resource_reference) = {
  void clear_topic();
  const std::string& topic() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_topic(ArgT0&& arg0, ArgT... args);
  std::string* mutable_topic();
  PROTOBUF_NODISCARD std::string* release_topic();
  void set_allocated_topic(std::string* topic);
  private:
  const std::string& _internal_topic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_topic(const std::string& value);
  std::string* _internal_mutable_topic();
  public:

  // .google.protobuf.Timestamp expire_time = 3;
  bool has_expire_time() const;
  private:
  bool _internal_has_expire_time() const;
  public:
  void clear_expire_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& expire_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_expire_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_expire_time();
  void set_allocated_expire_time(::PROTOBUF_NAMESPACE_ID::Timestamp* expire_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_expire_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_expire_time();
  public:
  void unsafe_arena_set_allocated_expire_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* expire_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_expire_time();

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.Snapshot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        Snapshot_LabelsEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> labels_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr topic_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* expire_time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class GetSnapshotRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.GetSnapshotRequest) */ {
 public:
  inline GetSnapshotRequest() : GetSnapshotRequest(nullptr) {}
  ~GetSnapshotRequest() override;
  explicit PROTOBUF_CONSTEXPR GetSnapshotRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSnapshotRequest(const GetSnapshotRequest& from);
  GetSnapshotRequest(GetSnapshotRequest&& from) noexcept
    : GetSnapshotRequest() {
    *this = ::std::move(from);
  }

  inline GetSnapshotRequest& operator=(const GetSnapshotRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSnapshotRequest& operator=(GetSnapshotRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSnapshotRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSnapshotRequest* internal_default_instance() {
    return reinterpret_cast<const GetSnapshotRequest*>(
               &_GetSnapshotRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(GetSnapshotRequest& a, GetSnapshotRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSnapshotRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSnapshotRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSnapshotRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetSnapshotRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetSnapshotRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetSnapshotRequest& from) {
    GetSnapshotRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSnapshotRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.pubsub.v1.GetSnapshotRequest";
  }
  protected:
  explicit GetSnapshotRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSnapshotFieldNumber = 1,
  };
  // string snapshot = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_snapshot();
  const std::string& snapshot() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_snapshot(ArgT0&& arg0, ArgT... args);
  std::string* mutable_snapshot();
  PROTOBUF_NODISCARD std::string* release_snapshot();
  void set_allocated_snapshot(std::string* snapshot);
  private:
  const std::string& _internal_snapshot() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_snapshot(const std::string& value);
  std::string* _internal_mutable_snapshot();
  public:

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.GetSnapshotRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr snapshot_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class ListSnapshotsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.ListSnapshotsRequest) */ {
 public:
  inline ListSnapshotsRequest() : ListSnapshotsRequest(nullptr) {}
  ~ListSnapshotsRequest() override;
  explicit PROTOBUF_CONSTEXPR ListSnapshotsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListSnapshotsRequest(const ListSnapshotsRequest& from);
  ListSnapshotsRequest(ListSnapshotsRequest&& from) noexcept
    : ListSnapshotsRequest() {
    *this = ::std::move(from);
  }

  inline ListSnapshotsRequest& operator=(const ListSnapshotsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListSnapshotsRequest& operator=(ListSnapshotsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListSnapshotsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListSnapshotsRequest* internal_default_instance() {
    return reinterpret_cast<const ListSnapshotsRequest*>(
               &_ListSnapshotsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(ListSnapshotsRequest& a, ListSnapshotsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListSnapshotsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListSnapshotsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListSnapshotsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListSnapshotsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListSnapshotsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListSnapshotsRequest& from) {
    ListSnapshotsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListSnapshotsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.pubsub.v1.ListSnapshotsRequest";
  }
  protected:
  explicit ListSnapshotsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjectFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kPageSizeFieldNumber = 2,
  };
  // string project = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_project();
  const std::string& project() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_project(ArgT0&& arg0, ArgT... args);
  std::string* mutable_project();
  PROTOBUF_NODISCARD std::string* release_project();
  void set_allocated_project(std::string* project);
  private:
  const std::string& _internal_project() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_project(const std::string& value);
  std::string* _internal_mutable_project();
  public:

  // string page_token = 3;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 2;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.ListSnapshotsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr project_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
    int32_t page_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class ListSnapshotsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.ListSnapshotsResponse) */ {
 public:
  inline ListSnapshotsResponse() : ListSnapshotsResponse(nullptr) {}
  ~ListSnapshotsResponse() override;
  explicit PROTOBUF_CONSTEXPR ListSnapshotsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListSnapshotsResponse(const ListSnapshotsResponse& from);
  ListSnapshotsResponse(ListSnapshotsResponse&& from) noexcept
    : ListSnapshotsResponse() {
    *this = ::std::move(from);
  }

  inline ListSnapshotsResponse& operator=(const ListSnapshotsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListSnapshotsResponse& operator=(ListSnapshotsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListSnapshotsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListSnapshotsResponse* internal_default_instance() {
    return reinterpret_cast<const ListSnapshotsResponse*>(
               &_ListSnapshotsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(ListSnapshotsResponse& a, ListSnapshotsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListSnapshotsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListSnapshotsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListSnapshotsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListSnapshotsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListSnapshotsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListSnapshotsResponse& from) {
    ListSnapshotsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListSnapshotsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.pubsub.v1.ListSnapshotsResponse";
  }
  protected:
  explicit ListSnapshotsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSnapshotsFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .google.pubsub.v1.Snapshot snapshots = 1;
  int snapshots_size() const;
  private:
  int _internal_snapshots_size() const;
  public:
  void clear_snapshots();
  ::google::pubsub::v1::Snapshot* mutable_snapshots(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::pubsub::v1::Snapshot >*
      mutable_snapshots();
  private:
  const ::google::pubsub::v1::Snapshot& _internal_snapshots(int index) const;
  ::google::pubsub::v1::Snapshot* _internal_add_snapshots();
  public:
  const ::google::pubsub::v1::Snapshot& snapshots(int index) const;
  ::google::pubsub::v1::Snapshot* add_snapshots();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::pubsub::v1::Snapshot >&
      snapshots() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.ListSnapshotsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::pubsub::v1::Snapshot > snapshots_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class DeleteSnapshotRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.DeleteSnapshotRequest) */ {
 public:
  inline DeleteSnapshotRequest() : DeleteSnapshotRequest(nullptr) {}
  ~DeleteSnapshotRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteSnapshotRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteSnapshotRequest(const DeleteSnapshotRequest& from);
  DeleteSnapshotRequest(DeleteSnapshotRequest&& from) noexcept
    : DeleteSnapshotRequest() {
    *this = ::std::move(from);
  }

  inline DeleteSnapshotRequest& operator=(const DeleteSnapshotRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteSnapshotRequest& operator=(DeleteSnapshotRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteSnapshotRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteSnapshotRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteSnapshotRequest*>(
               &_DeleteSnapshotRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(DeleteSnapshotRequest& a, DeleteSnapshotRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteSnapshotRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteSnapshotRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteSnapshotRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteSnapshotRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteSnapshotRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteSnapshotRequest& from) {
    DeleteSnapshotRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteSnapshotRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.pubsub.v1.DeleteSnapshotRequest";
  }
  protected:
  explicit DeleteSnapshotRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSnapshotFieldNumber = 1,
  };
  // string snapshot = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_snapshot();
  const std::string& snapshot() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_snapshot(ArgT0&& arg0, ArgT... args);
  std::string* mutable_snapshot();
  PROTOBUF_NODISCARD std::string* release_snapshot();
  void set_allocated_snapshot(std::string* snapshot);
  private:
  const std::string& _internal_snapshot() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_snapshot(const std::string& value);
  std::string* _internal_mutable_snapshot();
  public:

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.DeleteSnapshotRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr snapshot_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class SeekRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.SeekRequest) */ {
 public:
  inline SeekRequest() : SeekRequest(nullptr) {}
  ~SeekRequest() override;
  explicit PROTOBUF_CONSTEXPR SeekRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SeekRequest(const SeekRequest& from);
  SeekRequest(SeekRequest&& from) noexcept
    : SeekRequest() {
    *this = ::std::move(from);
  }

  inline SeekRequest& operator=(const SeekRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SeekRequest& operator=(SeekRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SeekRequest& default_instance() {
    return *internal_default_instance();
  }
  enum TargetCase {
    kTime = 2,
    kSnapshot = 3,
    TARGET_NOT_SET = 0,
  };

  static inline const SeekRequest* internal_default_instance() {
    return reinterpret_cast<const SeekRequest*>(
               &_SeekRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(SeekRequest& a, SeekRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SeekRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SeekRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SeekRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SeekRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SeekRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SeekRequest& from) {
    SeekRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SeekRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.pubsub.v1.SeekRequest";
  }
  protected:
  explicit SeekRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubscriptionFieldNumber = 1,
    kTimeFieldNumber = 2,
    kSnapshotFieldNumber = 3,
  };
  // string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_subscription();
  const std::string& subscription() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_subscription(ArgT0&& arg0, ArgT... args);
  std::string* mutable_subscription();
  PROTOBUF_NODISCARD std::string* release_subscription();
  void set_allocated_subscription(std::string* subscription);
  private:
  const std::string& _internal_subscription() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subscription(const std::string& value);
  std::string* _internal_mutable_subscription();
  public:

  // .google.protobuf.Timestamp time = 2;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_time();
  void set_allocated_time(::PROTOBUF_NAMESPACE_ID::Timestamp* time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_time();
  public:
  void unsafe_arena_set_allocated_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_time();

  // string snapshot = 3 [(.google.api.resource_reference) = {
  bool has_snapshot() const;
  private:
  bool _internal_has_snapshot() const;
  public:
  void clear_snapshot();
  const std::string& snapshot() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_snapshot(ArgT0&& arg0, ArgT... args);
  std::string* mutable_snapshot();
  PROTOBUF_NODISCARD std::string* release_snapshot();
  void set_allocated_snapshot(std::string* snapshot);
  private:
  const std::string& _internal_snapshot() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_snapshot(const std::string& value);
  std::string* _internal_mutable_snapshot();
  public:

  void clear_target();
  TargetCase target_case() const;
  // @@protoc_insertion_point(class_scope:google.pubsub.v1.SeekRequest)
 private:
  class _Internal;
  void set_has_time();
  void set_has_snapshot();

  inline bool has_target() const;
  inline void clear_has_target();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subscription_;
    union TargetUnion {
      constexpr TargetUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::Timestamp* time_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr snapshot_;
    } target_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class SeekResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:google.pubsub.v1.SeekResponse) */ {
 public:
  inline SeekResponse() : SeekResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SeekResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SeekResponse(const SeekResponse& from);
  SeekResponse(SeekResponse&& from) noexcept
    : SeekResponse() {
    *this = ::std::move(from);
  }

  inline SeekResponse& operator=(const SeekResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SeekResponse& operator=(SeekResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SeekResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SeekResponse* internal_default_instance() {
    return reinterpret_cast<const SeekResponse*>(
               &_SeekResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(SeekResponse& a, SeekResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SeekResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SeekResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SeekResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SeekResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SeekResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SeekResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.pubsub.v1.SeekResponse";
  }
  protected:
  explicit SeekResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.SeekResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MessageStoragePolicy

// repeated string allowed_persistence_regions = 1;
inline int MessageStoragePolicy::_internal_allowed_persistence_regions_size() const {
  return _impl_.allowed_persistence_regions_.size();
}
inline int MessageStoragePolicy::allowed_persistence_regions_size() const {
  return _internal_allowed_persistence_regions_size();
}
inline void MessageStoragePolicy::clear_allowed_persistence_regions() {
  _impl_.allowed_persistence_regions_.Clear();
}
inline std::string* MessageStoragePolicy::add_allowed_persistence_regions() {
  std::string* _s = _internal_add_allowed_persistence_regions();
  // @@protoc_insertion_point(field_add_mutable:google.pubsub.v1.MessageStoragePolicy.allowed_persistence_regions)
  return _s;
}
inline const std::string& MessageStoragePolicy::_internal_allowed_persistence_regions(int index) const {
  return _impl_.allowed_persistence_regions_.Get(index);
}
inline const std::string& MessageStoragePolicy::allowed_persistence_regions(int index) const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.MessageStoragePolicy.allowed_persistence_regions)
  return _internal_allowed_persistence_regions(index);
}
inline std::string* MessageStoragePolicy::mutable_allowed_persistence_regions(int index) {
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.MessageStoragePolicy.allowed_persistence_regions)
  return _impl_.allowed_persistence_regions_.Mutable(index);
}
inline void MessageStoragePolicy::set_allowed_persistence_regions(int index, const std::string& value) {
  _impl_.allowed_persistence_regions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.pubsub.v1.MessageStoragePolicy.allowed_persistence_regions)
}
inline void MessageStoragePolicy::set_allowed_persistence_regions(int index, std::string&& value) {
  _impl_.allowed_persistence_regions_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.pubsub.v1.MessageStoragePolicy.allowed_persistence_regions)
}
inline void MessageStoragePolicy::set_allowed_persistence_regions(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.allowed_persistence_regions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.MessageStoragePolicy.allowed_persistence_regions)
}
inline void MessageStoragePolicy::set_allowed_persistence_regions(int index, const char* value, size_t size) {
  _impl_.allowed_persistence_regions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.MessageStoragePolicy.allowed_persistence_regions)
}
inline std::string* MessageStoragePolicy::_internal_add_allowed_persistence_regions() {
  return _impl_.allowed_persistence_regions_.Add();
}
inline void MessageStoragePolicy::add_allowed_persistence_regions(const std::string& value) {
  _impl_.allowed_persistence_regions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.pubsub.v1.MessageStoragePolicy.allowed_persistence_regions)
}
inline void MessageStoragePolicy::add_allowed_persistence_regions(std::string&& value) {
  _impl_.allowed_persistence_regions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.pubsub.v1.MessageStoragePolicy.allowed_persistence_regions)
}
inline void MessageStoragePolicy::add_allowed_persistence_regions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.allowed_persistence_regions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.pubsub.v1.MessageStoragePolicy.allowed_persistence_regions)
}
inline void MessageStoragePolicy::add_allowed_persistence_regions(const char* value, size_t size) {
  _impl_.allowed_persistence_regions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.pubsub.v1.MessageStoragePolicy.allowed_persistence_regions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MessageStoragePolicy::allowed_persistence_regions() const {
  // @@protoc_insertion_point(field_list:google.pubsub.v1.MessageStoragePolicy.allowed_persistence_regions)
  return _impl_.allowed_persistence_regions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MessageStoragePolicy::mutable_allowed_persistence_regions() {
  // @@protoc_insertion_point(field_mutable_list:google.pubsub.v1.MessageStoragePolicy.allowed_persistence_regions)
  return &_impl_.allowed_persistence_regions_;
}

// -------------------------------------------------------------------

// SchemaSettings

// string schema = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void SchemaSettings::clear_schema() {
  _impl_.schema_.ClearToEmpty();
}
inline const std::string& SchemaSettings::schema() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.SchemaSettings.schema)
  return _internal_schema();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SchemaSettings::set_schema(ArgT0&& arg0, ArgT... args) {
 
 _impl_.schema_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.SchemaSettings.schema)
}
inline std::string* SchemaSettings::mutable_schema() {
  std::string* _s = _internal_mutable_schema();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.SchemaSettings.schema)
  return _s;
}
inline const std::string& SchemaSettings::_internal_schema() const {
  return _impl_.schema_.Get();
}
inline void SchemaSettings::_internal_set_schema(const std::string& value) {
  
  _impl_.schema_.Set(value, GetArenaForAllocation());
}
inline std::string* SchemaSettings::_internal_mutable_schema() {
  
  return _impl_.schema_.Mutable(GetArenaForAllocation());
}
inline std::string* SchemaSettings::release_schema() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.SchemaSettings.schema)
  return _impl_.schema_.Release();
}
inline void SchemaSettings::set_allocated_schema(std::string* schema) {
  if (schema != nullptr) {
    
  } else {
    
  }
  _impl_.schema_.SetAllocated(schema, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.schema_.IsDefault()) {
    _impl_.schema_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.SchemaSettings.schema)
}

// .google.pubsub.v1.Encoding encoding = 2;
inline void SchemaSettings::clear_encoding() {
  _impl_.encoding_ = 0;
}
inline ::google::pubsub::v1::Encoding SchemaSettings::_internal_encoding() const {
  return static_cast< ::google::pubsub::v1::Encoding >(_impl_.encoding_);
}
inline ::google::pubsub::v1::Encoding SchemaSettings::encoding() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.SchemaSettings.encoding)
  return _internal_encoding();
}
inline void SchemaSettings::_internal_set_encoding(::google::pubsub::v1::Encoding value) {
  
  _impl_.encoding_ = value;
}
inline void SchemaSettings::set_encoding(::google::pubsub::v1::Encoding value) {
  _internal_set_encoding(value);
  // @@protoc_insertion_point(field_set:google.pubsub.v1.SchemaSettings.encoding)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Topic

// string name = 1 [(.google.api.field_behavior) = REQUIRED];
inline void Topic::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Topic::name() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.Topic.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Topic::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.Topic.name)
}
inline std::string* Topic::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.Topic.name)
  return _s;
}
inline const std::string& Topic::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Topic::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Topic::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Topic::release_name() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.Topic.name)
  return _impl_.name_.Release();
}
inline void Topic::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.Topic.name)
}

// map<string, string> labels = 2;
inline int Topic::_internal_labels_size() const {
  return _impl_.labels_.size();
}
inline int Topic::labels_size() const {
  return _internal_labels_size();
}
inline void Topic::clear_labels() {
  _impl_.labels_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Topic::_internal_labels() const {
  return _impl_.labels_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Topic::labels() const {
  // @@protoc_insertion_point(field_map:google.pubsub.v1.Topic.labels)
  return _internal_labels();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Topic::_internal_mutable_labels() {
  return _impl_.labels_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Topic::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:google.pubsub.v1.Topic.labels)
  return _internal_mutable_labels();
}

// .google.pubsub.v1.MessageStoragePolicy message_storage_policy = 3;
inline bool Topic::_internal_has_message_storage_policy() const {
  return this != internal_default_instance() && _impl_.message_storage_policy_ != nullptr;
}
inline bool Topic::has_message_storage_policy() const {
  return _internal_has_message_storage_policy();
}
inline void Topic::clear_message_storage_policy() {
  if (GetArenaForAllocation() == nullptr && _impl_.message_storage_policy_ != nullptr) {
    delete _impl_.message_storage_policy_;
  }
  _impl_.message_storage_policy_ = nullptr;
}
inline const ::google::pubsub::v1::MessageStoragePolicy& Topic::_internal_message_storage_policy() const {
  const ::google::pubsub::v1::MessageStoragePolicy* p = _impl_.message_storage_policy_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::pubsub::v1::MessageStoragePolicy&>(
      ::google::pubsub::v1::_MessageStoragePolicy_default_instance_);
}
inline const ::google::pubsub::v1::MessageStoragePolicy& Topic::message_storage_policy() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.Topic.message_storage_policy)
  return _internal_message_storage_policy();
}
inline void Topic::unsafe_arena_set_allocated_message_storage_policy(
    ::google::pubsub::v1::MessageStoragePolicy* message_storage_policy) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.message_storage_policy_);
  }
  _impl_.message_storage_policy_ = message_storage_policy;
  if (message_storage_policy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.Topic.message_storage_policy)
}
inline ::google::pubsub::v1::MessageStoragePolicy* Topic::release_message_storage_policy() {
  
  ::google::pubsub::v1::MessageStoragePolicy* temp = _impl_.message_storage_policy_;
  _impl_.message_storage_policy_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::pubsub::v1::MessageStoragePolicy* Topic::unsafe_arena_release_message_storage_policy() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.Topic.message_storage_policy)
  
  ::google::pubsub::v1::MessageStoragePolicy* temp = _impl_.message_storage_policy_;
  _impl_.message_storage_policy_ = nullptr;
  return temp;
}
inline ::google::pubsub::v1::MessageStoragePolicy* Topic::_internal_mutable_message_storage_policy() {
  
  if (_impl_.message_storage_policy_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::pubsub::v1::MessageStoragePolicy>(GetArenaForAllocation());
    _impl_.message_storage_policy_ = p;
  }
  return _impl_.message_storage_policy_;
}
inline ::google::pubsub::v1::MessageStoragePolicy* Topic::mutable_message_storage_policy() {
  ::google::pubsub::v1::MessageStoragePolicy* _msg = _internal_mutable_message_storage_policy();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.Topic.message_storage_policy)
  return _msg;
}
inline void Topic::set_allocated_message_storage_policy(::google::pubsub::v1::MessageStoragePolicy* message_storage_policy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.message_storage_policy_;
  }
  if (message_storage_policy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(message_storage_policy);
    if (message_arena != submessage_arena) {
      message_storage_policy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message_storage_policy, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.message_storage_policy_ = message_storage_policy;
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.Topic.message_storage_policy)
}

// string kms_key_name = 5;
inline void Topic::clear_kms_key_name() {
  _impl_.kms_key_name_.ClearToEmpty();
}
inline const std::string& Topic::kms_key_name() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.Topic.kms_key_name)
  return _internal_kms_key_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Topic::set_kms_key_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.kms_key_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.Topic.kms_key_name)
}
inline std::string* Topic::mutable_kms_key_name() {
  std::string* _s = _internal_mutable_kms_key_name();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.Topic.kms_key_name)
  return _s;
}
inline const std::string& Topic::_internal_kms_key_name() const {
  return _impl_.kms_key_name_.Get();
}
inline void Topic::_internal_set_kms_key_name(const std::string& value) {
  
  _impl_.kms_key_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Topic::_internal_mutable_kms_key_name() {
  
  return _impl_.kms_key_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Topic::release_kms_key_name() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.Topic.kms_key_name)
  return _impl_.kms_key_name_.Release();
}
inline void Topic::set_allocated_kms_key_name(std::string* kms_key_name) {
  if (kms_key_name != nullptr) {
    
  } else {
    
  }
  _impl_.kms_key_name_.SetAllocated(kms_key_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.kms_key_name_.IsDefault()) {
    _impl_.kms_key_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.Topic.kms_key_name)
}

// .google.pubsub.v1.SchemaSettings schema_settings = 6;
inline bool Topic::_internal_has_schema_settings() const {
  return this != internal_default_instance() && _impl_.schema_settings_ != nullptr;
}
inline bool Topic::has_schema_settings() const {
  return _internal_has_schema_settings();
}
inline void Topic::clear_schema_settings() {
  if (GetArenaForAllocation() == nullptr && _impl_.schema_settings_ != nullptr) {
    delete _impl_.schema_settings_;
  }
  _impl_.schema_settings_ = nullptr;
}
inline const ::google::pubsub::v1::SchemaSettings& Topic::_internal_schema_settings() const {
  const ::google::pubsub::v1::SchemaSettings* p = _impl_.schema_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::pubsub::v1::SchemaSettings&>(
      ::google::pubsub::v1::_SchemaSettings_default_instance_);
}
inline const ::google::pubsub::v1::SchemaSettings& Topic::schema_settings() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.Topic.schema_settings)
  return _internal_schema_settings();
}
inline void Topic::unsafe_arena_set_allocated_schema_settings(
    ::google::pubsub::v1::SchemaSettings* schema_settings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.schema_settings_);
  }
  _impl_.schema_settings_ = schema_settings;
  if (schema_settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.Topic.schema_settings)
}
inline ::google::pubsub::v1::SchemaSettings* Topic::release_schema_settings() {
  
  ::google::pubsub::v1::SchemaSettings* temp = _impl_.schema_settings_;
  _impl_.schema_settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::pubsub::v1::SchemaSettings* Topic::unsafe_arena_release_schema_settings() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.Topic.schema_settings)
  
  ::google::pubsub::v1::SchemaSettings* temp = _impl_.schema_settings_;
  _impl_.schema_settings_ = nullptr;
  return temp;
}
inline ::google::pubsub::v1::SchemaSettings* Topic::_internal_mutable_schema_settings() {
  
  if (_impl_.schema_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::pubsub::v1::SchemaSettings>(GetArenaForAllocation());
    _impl_.schema_settings_ = p;
  }
  return _impl_.schema_settings_;
}
inline ::google::pubsub::v1::SchemaSettings* Topic::mutable_schema_settings() {
  ::google::pubsub::v1::SchemaSettings* _msg = _internal_mutable_schema_settings();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.Topic.schema_settings)
  return _msg;
}
inline void Topic::set_allocated_schema_settings(::google::pubsub::v1::SchemaSettings* schema_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.schema_settings_;
  }
  if (schema_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(schema_settings);
    if (message_arena != submessage_arena) {
      schema_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, schema_settings, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.schema_settings_ = schema_settings;
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.Topic.schema_settings)
}

// bool satisfies_pzs = 7;
inline void Topic::clear_satisfies_pzs() {
  _impl_.satisfies_pzs_ = false;
}
inline bool Topic::_internal_satisfies_pzs() const {
  return _impl_.satisfies_pzs_;
}
inline bool Topic::satisfies_pzs() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.Topic.satisfies_pzs)
  return _internal_satisfies_pzs();
}
inline void Topic::_internal_set_satisfies_pzs(bool value) {
  
  _impl_.satisfies_pzs_ = value;
}
inline void Topic::set_satisfies_pzs(bool value) {
  _internal_set_satisfies_pzs(value);
  // @@protoc_insertion_point(field_set:google.pubsub.v1.Topic.satisfies_pzs)
}

// .google.protobuf.Duration message_retention_duration = 8;
inline bool Topic::_internal_has_message_retention_duration() const {
  return this != internal_default_instance() && _impl_.message_retention_duration_ != nullptr;
}
inline bool Topic::has_message_retention_duration() const {
  return _internal_has_message_retention_duration();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& Topic::_internal_message_retention_duration() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.message_retention_duration_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& Topic::message_retention_duration() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.Topic.message_retention_duration)
  return _internal_message_retention_duration();
}
inline void Topic::unsafe_arena_set_allocated_message_retention_duration(
    ::PROTOBUF_NAMESPACE_ID::Duration* message_retention_duration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.message_retention_duration_);
  }
  _impl_.message_retention_duration_ = message_retention_duration;
  if (message_retention_duration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.Topic.message_retention_duration)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* Topic::release_message_retention_duration() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.message_retention_duration_;
  _impl_.message_retention_duration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* Topic::unsafe_arena_release_message_retention_duration() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.Topic.message_retention_duration)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.message_retention_duration_;
  _impl_.message_retention_duration_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* Topic::_internal_mutable_message_retention_duration() {
  
  if (_impl_.message_retention_duration_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.message_retention_duration_ = p;
  }
  return _impl_.message_retention_duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* Topic::mutable_message_retention_duration() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_message_retention_duration();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.Topic.message_retention_duration)
  return _msg;
}
inline void Topic::set_allocated_message_retention_duration(::PROTOBUF_NAMESPACE_ID::Duration* message_retention_duration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.message_retention_duration_);
  }
  if (message_retention_duration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_retention_duration));
    if (message_arena != submessage_arena) {
      message_retention_duration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message_retention_duration, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.message_retention_duration_ = message_retention_duration;
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.Topic.message_retention_duration)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PubsubMessage

// bytes data = 1;
inline void PubsubMessage::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& PubsubMessage::data() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.PubsubMessage.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PubsubMessage::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.PubsubMessage.data)
}
inline std::string* PubsubMessage::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.PubsubMessage.data)
  return _s;
}
inline const std::string& PubsubMessage::_internal_data() const {
  return _impl_.data_.Get();
}
inline void PubsubMessage::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* PubsubMessage::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* PubsubMessage::release_data() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.PubsubMessage.data)
  return _impl_.data_.Release();
}
inline void PubsubMessage::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.PubsubMessage.data)
}

// map<string, string> attributes = 2;
inline int PubsubMessage::_internal_attributes_size() const {
  return _impl_.attributes_.size();
}
inline int PubsubMessage::attributes_size() const {
  return _internal_attributes_size();
}
inline void PubsubMessage::clear_attributes() {
  _impl_.attributes_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
PubsubMessage::_internal_attributes() const {
  return _impl_.attributes_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
PubsubMessage::attributes() const {
  // @@protoc_insertion_point(field_map:google.pubsub.v1.PubsubMessage.attributes)
  return _internal_attributes();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
PubsubMessage::_internal_mutable_attributes() {
  return _impl_.attributes_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
PubsubMessage::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_map:google.pubsub.v1.PubsubMessage.attributes)
  return _internal_mutable_attributes();
}

// string message_id = 3;
inline void PubsubMessage::clear_message_id() {
  _impl_.message_id_.ClearToEmpty();
}
inline const std::string& PubsubMessage::message_id() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.PubsubMessage.message_id)
  return _internal_message_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PubsubMessage::set_message_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.PubsubMessage.message_id)
}
inline std::string* PubsubMessage::mutable_message_id() {
  std::string* _s = _internal_mutable_message_id();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.PubsubMessage.message_id)
  return _s;
}
inline const std::string& PubsubMessage::_internal_message_id() const {
  return _impl_.message_id_.Get();
}
inline void PubsubMessage::_internal_set_message_id(const std::string& value) {
  
  _impl_.message_id_.Set(value, GetArenaForAllocation());
}
inline std::string* PubsubMessage::_internal_mutable_message_id() {
  
  return _impl_.message_id_.Mutable(GetArenaForAllocation());
}
inline std::string* PubsubMessage::release_message_id() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.PubsubMessage.message_id)
  return _impl_.message_id_.Release();
}
inline void PubsubMessage::set_allocated_message_id(std::string* message_id) {
  if (message_id != nullptr) {
    
  } else {
    
  }
  _impl_.message_id_.SetAllocated(message_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_id_.IsDefault()) {
    _impl_.message_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.PubsubMessage.message_id)
}

// .google.protobuf.Timestamp publish_time = 4;
inline bool PubsubMessage::_internal_has_publish_time() const {
  return this != internal_default_instance() && _impl_.publish_time_ != nullptr;
}
inline bool PubsubMessage::has_publish_time() const {
  return _internal_has_publish_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& PubsubMessage::_internal_publish_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.publish_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& PubsubMessage::publish_time() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.PubsubMessage.publish_time)
  return _internal_publish_time();
}
inline void PubsubMessage::unsafe_arena_set_allocated_publish_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* publish_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.publish_time_);
  }
  _impl_.publish_time_ = publish_time;
  if (publish_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.PubsubMessage.publish_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PubsubMessage::release_publish_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.publish_time_;
  _impl_.publish_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PubsubMessage::unsafe_arena_release_publish_time() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.PubsubMessage.publish_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.publish_time_;
  _impl_.publish_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PubsubMessage::_internal_mutable_publish_time() {
  
  if (_impl_.publish_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.publish_time_ = p;
  }
  return _impl_.publish_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PubsubMessage::mutable_publish_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_publish_time();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.PubsubMessage.publish_time)
  return _msg;
}
inline void PubsubMessage::set_allocated_publish_time(::PROTOBUF_NAMESPACE_ID::Timestamp* publish_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.publish_time_);
  }
  if (publish_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(publish_time));
    if (message_arena != submessage_arena) {
      publish_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, publish_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.publish_time_ = publish_time;
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.PubsubMessage.publish_time)
}

// string ordering_key = 5;
inline void PubsubMessage::clear_ordering_key() {
  _impl_.ordering_key_.ClearToEmpty();
}
inline const std::string& PubsubMessage::ordering_key() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.PubsubMessage.ordering_key)
  return _internal_ordering_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PubsubMessage::set_ordering_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ordering_key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.PubsubMessage.ordering_key)
}
inline std::string* PubsubMessage::mutable_ordering_key() {
  std::string* _s = _internal_mutable_ordering_key();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.PubsubMessage.ordering_key)
  return _s;
}
inline const std::string& PubsubMessage::_internal_ordering_key() const {
  return _impl_.ordering_key_.Get();
}
inline void PubsubMessage::_internal_set_ordering_key(const std::string& value) {
  
  _impl_.ordering_key_.Set(value, GetArenaForAllocation());
}
inline std::string* PubsubMessage::_internal_mutable_ordering_key() {
  
  return _impl_.ordering_key_.Mutable(GetArenaForAllocation());
}
inline std::string* PubsubMessage::release_ordering_key() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.PubsubMessage.ordering_key)
  return _impl_.ordering_key_.Release();
}
inline void PubsubMessage::set_allocated_ordering_key(std::string* ordering_key) {
  if (ordering_key != nullptr) {
    
  } else {
    
  }
  _impl_.ordering_key_.SetAllocated(ordering_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ordering_key_.IsDefault()) {
    _impl_.ordering_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.PubsubMessage.ordering_key)
}

// -------------------------------------------------------------------

// GetTopicRequest

// string topic = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetTopicRequest::clear_topic() {
  _impl_.topic_.ClearToEmpty();
}
inline const std::string& GetTopicRequest::topic() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.GetTopicRequest.topic)
  return _internal_topic();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetTopicRequest::set_topic(ArgT0&& arg0, ArgT... args) {
 
 _impl_.topic_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.GetTopicRequest.topic)
}
inline std::string* GetTopicRequest::mutable_topic() {
  std::string* _s = _internal_mutable_topic();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.GetTopicRequest.topic)
  return _s;
}
inline const std::string& GetTopicRequest::_internal_topic() const {
  return _impl_.topic_.Get();
}
inline void GetTopicRequest::_internal_set_topic(const std::string& value) {
  
  _impl_.topic_.Set(value, GetArenaForAllocation());
}
inline std::string* GetTopicRequest::_internal_mutable_topic() {
  
  return _impl_.topic_.Mutable(GetArenaForAllocation());
}
inline std::string* GetTopicRequest::release_topic() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.GetTopicRequest.topic)
  return _impl_.topic_.Release();
}
inline void GetTopicRequest::set_allocated_topic(std::string* topic) {
  if (topic != nullptr) {
    
  } else {
    
  }
  _impl_.topic_.SetAllocated(topic, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.topic_.IsDefault()) {
    _impl_.topic_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.GetTopicRequest.topic)
}

// -------------------------------------------------------------------

// UpdateTopicRequest

// .google.pubsub.v1.Topic topic = 1 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateTopicRequest::_internal_has_topic() const {
  return this != internal_default_instance() && _impl_.topic_ != nullptr;
}
inline bool UpdateTopicRequest::has_topic() const {
  return _internal_has_topic();
}
inline void UpdateTopicRequest::clear_topic() {
  if (GetArenaForAllocation() == nullptr && _impl_.topic_ != nullptr) {
    delete _impl_.topic_;
  }
  _impl_.topic_ = nullptr;
}
inline const ::google::pubsub::v1::Topic& UpdateTopicRequest::_internal_topic() const {
  const ::google::pubsub::v1::Topic* p = _impl_.topic_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::pubsub::v1::Topic&>(
      ::google::pubsub::v1::_Topic_default_instance_);
}
inline const ::google::pubsub::v1::Topic& UpdateTopicRequest::topic() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.UpdateTopicRequest.topic)
  return _internal_topic();
}
inline void UpdateTopicRequest::unsafe_arena_set_allocated_topic(
    ::google::pubsub::v1::Topic* topic) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.topic_);
  }
  _impl_.topic_ = topic;
  if (topic) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.UpdateTopicRequest.topic)
}
inline ::google::pubsub::v1::Topic* UpdateTopicRequest::release_topic() {
  
  ::google::pubsub::v1::Topic* temp = _impl_.topic_;
  _impl_.topic_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::pubsub::v1::Topic* UpdateTopicRequest::unsafe_arena_release_topic() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.UpdateTopicRequest.topic)
  
  ::google::pubsub::v1::Topic* temp = _impl_.topic_;
  _impl_.topic_ = nullptr;
  return temp;
}
inline ::google::pubsub::v1::Topic* UpdateTopicRequest::_internal_mutable_topic() {
  
  if (_impl_.topic_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::pubsub::v1::Topic>(GetArenaForAllocation());
    _impl_.topic_ = p;
  }
  return _impl_.topic_;
}
inline ::google::pubsub::v1::Topic* UpdateTopicRequest::mutable_topic() {
  ::google::pubsub::v1::Topic* _msg = _internal_mutable_topic();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.UpdateTopicRequest.topic)
  return _msg;
}
inline void UpdateTopicRequest::set_allocated_topic(::google::pubsub::v1::Topic* topic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.topic_;
  }
  if (topic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(topic);
    if (message_arena != submessage_arena) {
      topic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, topic, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.topic_ = topic;
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.UpdateTopicRequest.topic)
}

// .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateTopicRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && _impl_.update_mask_ != nullptr;
}
inline bool UpdateTopicRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateTopicRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = _impl_.update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateTopicRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.UpdateTopicRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateTopicRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  _impl_.update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.UpdateTopicRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateTopicRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateTopicRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.UpdateTopicRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateTopicRequest::_internal_mutable_update_mask() {
  
  if (_impl_.update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    _impl_.update_mask_ = p;
  }
  return _impl_.update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateTopicRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.UpdateTopicRequest.update_mask)
  return _msg;
}
inline void UpdateTopicRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.UpdateTopicRequest.update_mask)
}

// -------------------------------------------------------------------

// PublishRequest

// string topic = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void PublishRequest::clear_topic() {
  _impl_.topic_.ClearToEmpty();
}
inline const std::string& PublishRequest::topic() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.PublishRequest.topic)
  return _internal_topic();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PublishRequest::set_topic(ArgT0&& arg0, ArgT... args) {
 
 _impl_.topic_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.PublishRequest.topic)
}
inline std::string* PublishRequest::mutable_topic() {
  std::string* _s = _internal_mutable_topic();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.PublishRequest.topic)
  return _s;
}
inline const std::string& PublishRequest::_internal_topic() const {
  return _impl_.topic_.Get();
}
inline void PublishRequest::_internal_set_topic(const std::string& value) {
  
  _impl_.topic_.Set(value, GetArenaForAllocation());
}
inline std::string* PublishRequest::_internal_mutable_topic() {
  
  return _impl_.topic_.Mutable(GetArenaForAllocation());
}
inline std::string* PublishRequest::release_topic() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.PublishRequest.topic)
  return _impl_.topic_.Release();
}
inline void PublishRequest::set_allocated_topic(std::string* topic) {
  if (topic != nullptr) {
    
  } else {
    
  }
  _impl_.topic_.SetAllocated(topic, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.topic_.IsDefault()) {
    _impl_.topic_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.PublishRequest.topic)
}

// repeated .google.pubsub.v1.PubsubMessage messages = 2 [(.google.api.field_behavior) = REQUIRED];
inline int PublishRequest::_internal_messages_size() const {
  return _impl_.messages_.size();
}
inline int PublishRequest::messages_size() const {
  return _internal_messages_size();
}
inline void PublishRequest::clear_messages() {
  _impl_.messages_.Clear();
}
inline ::google::pubsub::v1::PubsubMessage* PublishRequest::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.PublishRequest.messages)
  return _impl_.messages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::pubsub::v1::PubsubMessage >*
PublishRequest::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:google.pubsub.v1.PublishRequest.messages)
  return &_impl_.messages_;
}
inline const ::google::pubsub::v1::PubsubMessage& PublishRequest::_internal_messages(int index) const {
  return _impl_.messages_.Get(index);
}
inline const ::google::pubsub::v1::PubsubMessage& PublishRequest::messages(int index) const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.PublishRequest.messages)
  return _internal_messages(index);
}
inline ::google::pubsub::v1::PubsubMessage* PublishRequest::_internal_add_messages() {
  return _impl_.messages_.Add();
}
inline ::google::pubsub::v1::PubsubMessage* PublishRequest::add_messages() {
  ::google::pubsub::v1::PubsubMessage* _add = _internal_add_messages();
  // @@protoc_insertion_point(field_add:google.pubsub.v1.PublishRequest.messages)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::pubsub::v1::PubsubMessage >&
PublishRequest::messages() const {
  // @@protoc_insertion_point(field_list:google.pubsub.v1.PublishRequest.messages)
  return _impl_.messages_;
}

// -------------------------------------------------------------------

// PublishResponse

// repeated string message_ids = 1;
inline int PublishResponse::_internal_message_ids_size() const {
  return _impl_.message_ids_.size();
}
inline int PublishResponse::message_ids_size() const {
  return _internal_message_ids_size();
}
inline void PublishResponse::clear_message_ids() {
  _impl_.message_ids_.Clear();
}
inline std::string* PublishResponse::add_message_ids() {
  std::string* _s = _internal_add_message_ids();
  // @@protoc_insertion_point(field_add_mutable:google.pubsub.v1.PublishResponse.message_ids)
  return _s;
}
inline const std::string& PublishResponse::_internal_message_ids(int index) const {
  return _impl_.message_ids_.Get(index);
}
inline const std::string& PublishResponse::message_ids(int index) const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.PublishResponse.message_ids)
  return _internal_message_ids(index);
}
inline std::string* PublishResponse::mutable_message_ids(int index) {
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.PublishResponse.message_ids)
  return _impl_.message_ids_.Mutable(index);
}
inline void PublishResponse::set_message_ids(int index, const std::string& value) {
  _impl_.message_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.pubsub.v1.PublishResponse.message_ids)
}
inline void PublishResponse::set_message_ids(int index, std::string&& value) {
  _impl_.message_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.pubsub.v1.PublishResponse.message_ids)
}
inline void PublishResponse::set_message_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.message_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.PublishResponse.message_ids)
}
inline void PublishResponse::set_message_ids(int index, const char* value, size_t size) {
  _impl_.message_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.PublishResponse.message_ids)
}
inline std::string* PublishResponse::_internal_add_message_ids() {
  return _impl_.message_ids_.Add();
}
inline void PublishResponse::add_message_ids(const std::string& value) {
  _impl_.message_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.pubsub.v1.PublishResponse.message_ids)
}
inline void PublishResponse::add_message_ids(std::string&& value) {
  _impl_.message_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.pubsub.v1.PublishResponse.message_ids)
}
inline void PublishResponse::add_message_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.message_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.pubsub.v1.PublishResponse.message_ids)
}
inline void PublishResponse::add_message_ids(const char* value, size_t size) {
  _impl_.message_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.pubsub.v1.PublishResponse.message_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PublishResponse::message_ids() const {
  // @@protoc_insertion_point(field_list:google.pubsub.v1.PublishResponse.message_ids)
  return _impl_.message_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PublishResponse::mutable_message_ids() {
  // @@protoc_insertion_point(field_mutable_list:google.pubsub.v1.PublishResponse.message_ids)
  return &_impl_.message_ids_;
}

// -------------------------------------------------------------------

// ListTopicsRequest

// string project = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListTopicsRequest::clear_project() {
  _impl_.project_.ClearToEmpty();
}
inline const std::string& ListTopicsRequest::project() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListTopicsRequest.project)
  return _internal_project();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListTopicsRequest::set_project(ArgT0&& arg0, ArgT... args) {
 
 _impl_.project_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListTopicsRequest.project)
}
inline std::string* ListTopicsRequest::mutable_project() {
  std::string* _s = _internal_mutable_project();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ListTopicsRequest.project)
  return _s;
}
inline const std::string& ListTopicsRequest::_internal_project() const {
  return _impl_.project_.Get();
}
inline void ListTopicsRequest::_internal_set_project(const std::string& value) {
  
  _impl_.project_.Set(value, GetArenaForAllocation());
}
inline std::string* ListTopicsRequest::_internal_mutable_project() {
  
  return _impl_.project_.Mutable(GetArenaForAllocation());
}
inline std::string* ListTopicsRequest::release_project() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ListTopicsRequest.project)
  return _impl_.project_.Release();
}
inline void ListTopicsRequest::set_allocated_project(std::string* project) {
  if (project != nullptr) {
    
  } else {
    
  }
  _impl_.project_.SetAllocated(project, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.project_.IsDefault()) {
    _impl_.project_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ListTopicsRequest.project)
}

// int32 page_size = 2;
inline void ListTopicsRequest::clear_page_size() {
  _impl_.page_size_ = 0;
}
inline int32_t ListTopicsRequest::_internal_page_size() const {
  return _impl_.page_size_;
}
inline int32_t ListTopicsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListTopicsRequest.page_size)
  return _internal_page_size();
}
inline void ListTopicsRequest::_internal_set_page_size(int32_t value) {
  
  _impl_.page_size_ = value;
}
inline void ListTopicsRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListTopicsRequest.page_size)
}

// string page_token = 3;
inline void ListTopicsRequest::clear_page_token() {
  _impl_.page_token_.ClearToEmpty();
}
inline const std::string& ListTopicsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListTopicsRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListTopicsRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListTopicsRequest.page_token)
}
inline std::string* ListTopicsRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ListTopicsRequest.page_token)
  return _s;
}
inline const std::string& ListTopicsRequest::_internal_page_token() const {
  return _impl_.page_token_.Get();
}
inline void ListTopicsRequest::_internal_set_page_token(const std::string& value) {
  
  _impl_.page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListTopicsRequest::_internal_mutable_page_token() {
  
  return _impl_.page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListTopicsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ListTopicsRequest.page_token)
  return _impl_.page_token_.Release();
}
inline void ListTopicsRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  _impl_.page_token_.SetAllocated(page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.page_token_.IsDefault()) {
    _impl_.page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ListTopicsRequest.page_token)
}

// -------------------------------------------------------------------

// ListTopicsResponse

// repeated .google.pubsub.v1.Topic topics = 1;
inline int ListTopicsResponse::_internal_topics_size() const {
  return _impl_.topics_.size();
}
inline int ListTopicsResponse::topics_size() const {
  return _internal_topics_size();
}
inline void ListTopicsResponse::clear_topics() {
  _impl_.topics_.Clear();
}
inline ::google::pubsub::v1::Topic* ListTopicsResponse::mutable_topics(int index) {
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ListTopicsResponse.topics)
  return _impl_.topics_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::pubsub::v1::Topic >*
ListTopicsResponse::mutable_topics() {
  // @@protoc_insertion_point(field_mutable_list:google.pubsub.v1.ListTopicsResponse.topics)
  return &_impl_.topics_;
}
inline const ::google::pubsub::v1::Topic& ListTopicsResponse::_internal_topics(int index) const {
  return _impl_.topics_.Get(index);
}
inline const ::google::pubsub::v1::Topic& ListTopicsResponse::topics(int index) const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListTopicsResponse.topics)
  return _internal_topics(index);
}
inline ::google::pubsub::v1::Topic* ListTopicsResponse::_internal_add_topics() {
  return _impl_.topics_.Add();
}
inline ::google::pubsub::v1::Topic* ListTopicsResponse::add_topics() {
  ::google::pubsub::v1::Topic* _add = _internal_add_topics();
  // @@protoc_insertion_point(field_add:google.pubsub.v1.ListTopicsResponse.topics)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::pubsub::v1::Topic >&
ListTopicsResponse::topics() const {
  // @@protoc_insertion_point(field_list:google.pubsub.v1.ListTopicsResponse.topics)
  return _impl_.topics_;
}

// string next_page_token = 2;
inline void ListTopicsResponse::clear_next_page_token() {
  _impl_.next_page_token_.ClearToEmpty();
}
inline const std::string& ListTopicsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListTopicsResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListTopicsResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.next_page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListTopicsResponse.next_page_token)
}
inline std::string* ListTopicsResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ListTopicsResponse.next_page_token)
  return _s;
}
inline const std::string& ListTopicsResponse::_internal_next_page_token() const {
  return _impl_.next_page_token_.Get();
}
inline void ListTopicsResponse::_internal_set_next_page_token(const std::string& value) {
  
  _impl_.next_page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListTopicsResponse::_internal_mutable_next_page_token() {
  
  return _impl_.next_page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListTopicsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ListTopicsResponse.next_page_token)
  return _impl_.next_page_token_.Release();
}
inline void ListTopicsResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  _impl_.next_page_token_.SetAllocated(next_page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.next_page_token_.IsDefault()) {
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ListTopicsResponse.next_page_token)
}

// -------------------------------------------------------------------

// ListTopicSubscriptionsRequest

// string topic = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListTopicSubscriptionsRequest::clear_topic() {
  _impl_.topic_.ClearToEmpty();
}
inline const std::string& ListTopicSubscriptionsRequest::topic() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListTopicSubscriptionsRequest.topic)
  return _internal_topic();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListTopicSubscriptionsRequest::set_topic(ArgT0&& arg0, ArgT... args) {
 
 _impl_.topic_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListTopicSubscriptionsRequest.topic)
}
inline std::string* ListTopicSubscriptionsRequest::mutable_topic() {
  std::string* _s = _internal_mutable_topic();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ListTopicSubscriptionsRequest.topic)
  return _s;
}
inline const std::string& ListTopicSubscriptionsRequest::_internal_topic() const {
  return _impl_.topic_.Get();
}
inline void ListTopicSubscriptionsRequest::_internal_set_topic(const std::string& value) {
  
  _impl_.topic_.Set(value, GetArenaForAllocation());
}
inline std::string* ListTopicSubscriptionsRequest::_internal_mutable_topic() {
  
  return _impl_.topic_.Mutable(GetArenaForAllocation());
}
inline std::string* ListTopicSubscriptionsRequest::release_topic() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ListTopicSubscriptionsRequest.topic)
  return _impl_.topic_.Release();
}
inline void ListTopicSubscriptionsRequest::set_allocated_topic(std::string* topic) {
  if (topic != nullptr) {
    
  } else {
    
  }
  _impl_.topic_.SetAllocated(topic, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.topic_.IsDefault()) {
    _impl_.topic_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ListTopicSubscriptionsRequest.topic)
}

// int32 page_size = 2;
inline void ListTopicSubscriptionsRequest::clear_page_size() {
  _impl_.page_size_ = 0;
}
inline int32_t ListTopicSubscriptionsRequest::_internal_page_size() const {
  return _impl_.page_size_;
}
inline int32_t ListTopicSubscriptionsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListTopicSubscriptionsRequest.page_size)
  return _internal_page_size();
}
inline void ListTopicSubscriptionsRequest::_internal_set_page_size(int32_t value) {
  
  _impl_.page_size_ = value;
}
inline void ListTopicSubscriptionsRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListTopicSubscriptionsRequest.page_size)
}

// string page_token = 3;
inline void ListTopicSubscriptionsRequest::clear_page_token() {
  _impl_.page_token_.ClearToEmpty();
}
inline const std::string& ListTopicSubscriptionsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListTopicSubscriptionsRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListTopicSubscriptionsRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListTopicSubscriptionsRequest.page_token)
}
inline std::string* ListTopicSubscriptionsRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ListTopicSubscriptionsRequest.page_token)
  return _s;
}
inline const std::string& ListTopicSubscriptionsRequest::_internal_page_token() const {
  return _impl_.page_token_.Get();
}
inline void ListTopicSubscriptionsRequest::_internal_set_page_token(const std::string& value) {
  
  _impl_.page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListTopicSubscriptionsRequest::_internal_mutable_page_token() {
  
  return _impl_.page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListTopicSubscriptionsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ListTopicSubscriptionsRequest.page_token)
  return _impl_.page_token_.Release();
}
inline void ListTopicSubscriptionsRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  _impl_.page_token_.SetAllocated(page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.page_token_.IsDefault()) {
    _impl_.page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ListTopicSubscriptionsRequest.page_token)
}

// -------------------------------------------------------------------

// ListTopicSubscriptionsResponse

// repeated string subscriptions = 1 [(.google.api.resource_reference) = {
inline int ListTopicSubscriptionsResponse::_internal_subscriptions_size() const {
  return _impl_.subscriptions_.size();
}
inline int ListTopicSubscriptionsResponse::subscriptions_size() const {
  return _internal_subscriptions_size();
}
inline void ListTopicSubscriptionsResponse::clear_subscriptions() {
  _impl_.subscriptions_.Clear();
}
inline std::string* ListTopicSubscriptionsResponse::add_subscriptions() {
  std::string* _s = _internal_add_subscriptions();
  // @@protoc_insertion_point(field_add_mutable:google.pubsub.v1.ListTopicSubscriptionsResponse.subscriptions)
  return _s;
}
inline const std::string& ListTopicSubscriptionsResponse::_internal_subscriptions(int index) const {
  return _impl_.subscriptions_.Get(index);
}
inline const std::string& ListTopicSubscriptionsResponse::subscriptions(int index) const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListTopicSubscriptionsResponse.subscriptions)
  return _internal_subscriptions(index);
}
inline std::string* ListTopicSubscriptionsResponse::mutable_subscriptions(int index) {
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ListTopicSubscriptionsResponse.subscriptions)
  return _impl_.subscriptions_.Mutable(index);
}
inline void ListTopicSubscriptionsResponse::set_subscriptions(int index, const std::string& value) {
  _impl_.subscriptions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListTopicSubscriptionsResponse.subscriptions)
}
inline void ListTopicSubscriptionsResponse::set_subscriptions(int index, std::string&& value) {
  _impl_.subscriptions_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListTopicSubscriptionsResponse.subscriptions)
}
inline void ListTopicSubscriptionsResponse::set_subscriptions(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.subscriptions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.ListTopicSubscriptionsResponse.subscriptions)
}
inline void ListTopicSubscriptionsResponse::set_subscriptions(int index, const char* value, size_t size) {
  _impl_.subscriptions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.ListTopicSubscriptionsResponse.subscriptions)
}
inline std::string* ListTopicSubscriptionsResponse::_internal_add_subscriptions() {
  return _impl_.subscriptions_.Add();
}
inline void ListTopicSubscriptionsResponse::add_subscriptions(const std::string& value) {
  _impl_.subscriptions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.pubsub.v1.ListTopicSubscriptionsResponse.subscriptions)
}
inline void ListTopicSubscriptionsResponse::add_subscriptions(std::string&& value) {
  _impl_.subscriptions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.pubsub.v1.ListTopicSubscriptionsResponse.subscriptions)
}
inline void ListTopicSubscriptionsResponse::add_subscriptions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.subscriptions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.pubsub.v1.ListTopicSubscriptionsResponse.subscriptions)
}
inline void ListTopicSubscriptionsResponse::add_subscriptions(const char* value, size_t size) {
  _impl_.subscriptions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.pubsub.v1.ListTopicSubscriptionsResponse.subscriptions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListTopicSubscriptionsResponse::subscriptions() const {
  // @@protoc_insertion_point(field_list:google.pubsub.v1.ListTopicSubscriptionsResponse.subscriptions)
  return _impl_.subscriptions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListTopicSubscriptionsResponse::mutable_subscriptions() {
  // @@protoc_insertion_point(field_mutable_list:google.pubsub.v1.ListTopicSubscriptionsResponse.subscriptions)
  return &_impl_.subscriptions_;
}

// string next_page_token = 2;
inline void ListTopicSubscriptionsResponse::clear_next_page_token() {
  _impl_.next_page_token_.ClearToEmpty();
}
inline const std::string& ListTopicSubscriptionsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListTopicSubscriptionsResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListTopicSubscriptionsResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.next_page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListTopicSubscriptionsResponse.next_page_token)
}
inline std::string* ListTopicSubscriptionsResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ListTopicSubscriptionsResponse.next_page_token)
  return _s;
}
inline const std::string& ListTopicSubscriptionsResponse::_internal_next_page_token() const {
  return _impl_.next_page_token_.Get();
}
inline void ListTopicSubscriptionsResponse::_internal_set_next_page_token(const std::string& value) {
  
  _impl_.next_page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListTopicSubscriptionsResponse::_internal_mutable_next_page_token() {
  
  return _impl_.next_page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListTopicSubscriptionsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ListTopicSubscriptionsResponse.next_page_token)
  return _impl_.next_page_token_.Release();
}
inline void ListTopicSubscriptionsResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  _impl_.next_page_token_.SetAllocated(next_page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.next_page_token_.IsDefault()) {
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ListTopicSubscriptionsResponse.next_page_token)
}

// -------------------------------------------------------------------

// ListTopicSnapshotsRequest

// string topic = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListTopicSnapshotsRequest::clear_topic() {
  _impl_.topic_.ClearToEmpty();
}
inline const std::string& ListTopicSnapshotsRequest::topic() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListTopicSnapshotsRequest.topic)
  return _internal_topic();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListTopicSnapshotsRequest::set_topic(ArgT0&& arg0, ArgT... args) {
 
 _impl_.topic_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListTopicSnapshotsRequest.topic)
}
inline std::string* ListTopicSnapshotsRequest::mutable_topic() {
  std::string* _s = _internal_mutable_topic();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ListTopicSnapshotsRequest.topic)
  return _s;
}
inline const std::string& ListTopicSnapshotsRequest::_internal_topic() const {
  return _impl_.topic_.Get();
}
inline void ListTopicSnapshotsRequest::_internal_set_topic(const std::string& value) {
  
  _impl_.topic_.Set(value, GetArenaForAllocation());
}
inline std::string* ListTopicSnapshotsRequest::_internal_mutable_topic() {
  
  return _impl_.topic_.Mutable(GetArenaForAllocation());
}
inline std::string* ListTopicSnapshotsRequest::release_topic() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ListTopicSnapshotsRequest.topic)
  return _impl_.topic_.Release();
}
inline void ListTopicSnapshotsRequest::set_allocated_topic(std::string* topic) {
  if (topic != nullptr) {
    
  } else {
    
  }
  _impl_.topic_.SetAllocated(topic, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.topic_.IsDefault()) {
    _impl_.topic_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ListTopicSnapshotsRequest.topic)
}

// int32 page_size = 2;
inline void ListTopicSnapshotsRequest::clear_page_size() {
  _impl_.page_size_ = 0;
}
inline int32_t ListTopicSnapshotsRequest::_internal_page_size() const {
  return _impl_.page_size_;
}
inline int32_t ListTopicSnapshotsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListTopicSnapshotsRequest.page_size)
  return _internal_page_size();
}
inline void ListTopicSnapshotsRequest::_internal_set_page_size(int32_t value) {
  
  _impl_.page_size_ = value;
}
inline void ListTopicSnapshotsRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListTopicSnapshotsRequest.page_size)
}

// string page_token = 3;
inline void ListTopicSnapshotsRequest::clear_page_token() {
  _impl_.page_token_.ClearToEmpty();
}
inline const std::string& ListTopicSnapshotsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListTopicSnapshotsRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListTopicSnapshotsRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListTopicSnapshotsRequest.page_token)
}
inline std::string* ListTopicSnapshotsRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ListTopicSnapshotsRequest.page_token)
  return _s;
}
inline const std::string& ListTopicSnapshotsRequest::_internal_page_token() const {
  return _impl_.page_token_.Get();
}
inline void ListTopicSnapshotsRequest::_internal_set_page_token(const std::string& value) {
  
  _impl_.page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListTopicSnapshotsRequest::_internal_mutable_page_token() {
  
  return _impl_.page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListTopicSnapshotsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ListTopicSnapshotsRequest.page_token)
  return _impl_.page_token_.Release();
}
inline void ListTopicSnapshotsRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  _impl_.page_token_.SetAllocated(page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.page_token_.IsDefault()) {
    _impl_.page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ListTopicSnapshotsRequest.page_token)
}

// -------------------------------------------------------------------

// ListTopicSnapshotsResponse

// repeated string snapshots = 1;
inline int ListTopicSnapshotsResponse::_internal_snapshots_size() const {
  return _impl_.snapshots_.size();
}
inline int ListTopicSnapshotsResponse::snapshots_size() const {
  return _internal_snapshots_size();
}
inline void ListTopicSnapshotsResponse::clear_snapshots() {
  _impl_.snapshots_.Clear();
}
inline std::string* ListTopicSnapshotsResponse::add_snapshots() {
  std::string* _s = _internal_add_snapshots();
  // @@protoc_insertion_point(field_add_mutable:google.pubsub.v1.ListTopicSnapshotsResponse.snapshots)
  return _s;
}
inline const std::string& ListTopicSnapshotsResponse::_internal_snapshots(int index) const {
  return _impl_.snapshots_.Get(index);
}
inline const std::string& ListTopicSnapshotsResponse::snapshots(int index) const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListTopicSnapshotsResponse.snapshots)
  return _internal_snapshots(index);
}
inline std::string* ListTopicSnapshotsResponse::mutable_snapshots(int index) {
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ListTopicSnapshotsResponse.snapshots)
  return _impl_.snapshots_.Mutable(index);
}
inline void ListTopicSnapshotsResponse::set_snapshots(int index, const std::string& value) {
  _impl_.snapshots_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListTopicSnapshotsResponse.snapshots)
}
inline void ListTopicSnapshotsResponse::set_snapshots(int index, std::string&& value) {
  _impl_.snapshots_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListTopicSnapshotsResponse.snapshots)
}
inline void ListTopicSnapshotsResponse::set_snapshots(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.snapshots_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.ListTopicSnapshotsResponse.snapshots)
}
inline void ListTopicSnapshotsResponse::set_snapshots(int index, const char* value, size_t size) {
  _impl_.snapshots_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.ListTopicSnapshotsResponse.snapshots)
}
inline std::string* ListTopicSnapshotsResponse::_internal_add_snapshots() {
  return _impl_.snapshots_.Add();
}
inline void ListTopicSnapshotsResponse::add_snapshots(const std::string& value) {
  _impl_.snapshots_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.pubsub.v1.ListTopicSnapshotsResponse.snapshots)
}
inline void ListTopicSnapshotsResponse::add_snapshots(std::string&& value) {
  _impl_.snapshots_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.pubsub.v1.ListTopicSnapshotsResponse.snapshots)
}
inline void ListTopicSnapshotsResponse::add_snapshots(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.snapshots_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.pubsub.v1.ListTopicSnapshotsResponse.snapshots)
}
inline void ListTopicSnapshotsResponse::add_snapshots(const char* value, size_t size) {
  _impl_.snapshots_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.pubsub.v1.ListTopicSnapshotsResponse.snapshots)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListTopicSnapshotsResponse::snapshots() const {
  // @@protoc_insertion_point(field_list:google.pubsub.v1.ListTopicSnapshotsResponse.snapshots)
  return _impl_.snapshots_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListTopicSnapshotsResponse::mutable_snapshots() {
  // @@protoc_insertion_point(field_mutable_list:google.pubsub.v1.ListTopicSnapshotsResponse.snapshots)
  return &_impl_.snapshots_;
}

// string next_page_token = 2;
inline void ListTopicSnapshotsResponse::clear_next_page_token() {
  _impl_.next_page_token_.ClearToEmpty();
}
inline const std::string& ListTopicSnapshotsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListTopicSnapshotsResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListTopicSnapshotsResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.next_page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListTopicSnapshotsResponse.next_page_token)
}
inline std::string* ListTopicSnapshotsResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ListTopicSnapshotsResponse.next_page_token)
  return _s;
}
inline const std::string& ListTopicSnapshotsResponse::_internal_next_page_token() const {
  return _impl_.next_page_token_.Get();
}
inline void ListTopicSnapshotsResponse::_internal_set_next_page_token(const std::string& value) {
  
  _impl_.next_page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListTopicSnapshotsResponse::_internal_mutable_next_page_token() {
  
  return _impl_.next_page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListTopicSnapshotsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ListTopicSnapshotsResponse.next_page_token)
  return _impl_.next_page_token_.Release();
}
inline void ListTopicSnapshotsResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  _impl_.next_page_token_.SetAllocated(next_page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.next_page_token_.IsDefault()) {
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ListTopicSnapshotsResponse.next_page_token)
}

// -------------------------------------------------------------------

// DeleteTopicRequest

// string topic = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteTopicRequest::clear_topic() {
  _impl_.topic_.ClearToEmpty();
}
inline const std::string& DeleteTopicRequest::topic() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.DeleteTopicRequest.topic)
  return _internal_topic();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteTopicRequest::set_topic(ArgT0&& arg0, ArgT... args) {
 
 _impl_.topic_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.DeleteTopicRequest.topic)
}
inline std::string* DeleteTopicRequest::mutable_topic() {
  std::string* _s = _internal_mutable_topic();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.DeleteTopicRequest.topic)
  return _s;
}
inline const std::string& DeleteTopicRequest::_internal_topic() const {
  return _impl_.topic_.Get();
}
inline void DeleteTopicRequest::_internal_set_topic(const std::string& value) {
  
  _impl_.topic_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteTopicRequest::_internal_mutable_topic() {
  
  return _impl_.topic_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteTopicRequest::release_topic() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.DeleteTopicRequest.topic)
  return _impl_.topic_.Release();
}
inline void DeleteTopicRequest::set_allocated_topic(std::string* topic) {
  if (topic != nullptr) {
    
  } else {
    
  }
  _impl_.topic_.SetAllocated(topic, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.topic_.IsDefault()) {
    _impl_.topic_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.DeleteTopicRequest.topic)
}

// -------------------------------------------------------------------

// DetachSubscriptionRequest

// string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DetachSubscriptionRequest::clear_subscription() {
  _impl_.subscription_.ClearToEmpty();
}
inline const std::string& DetachSubscriptionRequest::subscription() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.DetachSubscriptionRequest.subscription)
  return _internal_subscription();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DetachSubscriptionRequest::set_subscription(ArgT0&& arg0, ArgT... args) {
 
 _impl_.subscription_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.DetachSubscriptionRequest.subscription)
}
inline std::string* DetachSubscriptionRequest::mutable_subscription() {
  std::string* _s = _internal_mutable_subscription();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.DetachSubscriptionRequest.subscription)
  return _s;
}
inline const std::string& DetachSubscriptionRequest::_internal_subscription() const {
  return _impl_.subscription_.Get();
}
inline void DetachSubscriptionRequest::_internal_set_subscription(const std::string& value) {
  
  _impl_.subscription_.Set(value, GetArenaForAllocation());
}
inline std::string* DetachSubscriptionRequest::_internal_mutable_subscription() {
  
  return _impl_.subscription_.Mutable(GetArenaForAllocation());
}
inline std::string* DetachSubscriptionRequest::release_subscription() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.DetachSubscriptionRequest.subscription)
  return _impl_.subscription_.Release();
}
inline void DetachSubscriptionRequest::set_allocated_subscription(std::string* subscription) {
  if (subscription != nullptr) {
    
  } else {
    
  }
  _impl_.subscription_.SetAllocated(subscription, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.subscription_.IsDefault()) {
    _impl_.subscription_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.DetachSubscriptionRequest.subscription)
}

// -------------------------------------------------------------------

// DetachSubscriptionResponse

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Subscription

// string name = 1 [(.google.api.field_behavior) = REQUIRED];
inline void Subscription::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Subscription::name() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.Subscription.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Subscription::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.Subscription.name)
}
inline std::string* Subscription::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.Subscription.name)
  return _s;
}
inline const std::string& Subscription::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Subscription::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Subscription::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Subscription::release_name() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.Subscription.name)
  return _impl_.name_.Release();
}
inline void Subscription::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.Subscription.name)
}

// string topic = 2 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void Subscription::clear_topic() {
  _impl_.topic_.ClearToEmpty();
}
inline const std::string& Subscription::topic() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.Subscription.topic)
  return _internal_topic();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Subscription::set_topic(ArgT0&& arg0, ArgT... args) {
 
 _impl_.topic_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.Subscription.topic)
}
inline std::string* Subscription::mutable_topic() {
  std::string* _s = _internal_mutable_topic();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.Subscription.topic)
  return _s;
}
inline const std::string& Subscription::_internal_topic() const {
  return _impl_.topic_.Get();
}
inline void Subscription::_internal_set_topic(const std::string& value) {
  
  _impl_.topic_.Set(value, GetArenaForAllocation());
}
inline std::string* Subscription::_internal_mutable_topic() {
  
  return _impl_.topic_.Mutable(GetArenaForAllocation());
}
inline std::string* Subscription::release_topic() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.Subscription.topic)
  return _impl_.topic_.Release();
}
inline void Subscription::set_allocated_topic(std::string* topic) {
  if (topic != nullptr) {
    
  } else {
    
  }
  _impl_.topic_.SetAllocated(topic, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.topic_.IsDefault()) {
    _impl_.topic_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.Subscription.topic)
}

// .google.pubsub.v1.PushConfig push_config = 4;
inline bool Subscription::_internal_has_push_config() const {
  return this != internal_default_instance() && _impl_.push_config_ != nullptr;
}
inline bool Subscription::has_push_config() const {
  return _internal_has_push_config();
}
inline void Subscription::clear_push_config() {
  if (GetArenaForAllocation() == nullptr && _impl_.push_config_ != nullptr) {
    delete _impl_.push_config_;
  }
  _impl_.push_config_ = nullptr;
}
inline const ::google::pubsub::v1::PushConfig& Subscription::_internal_push_config() const {
  const ::google::pubsub::v1::PushConfig* p = _impl_.push_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::pubsub::v1::PushConfig&>(
      ::google::pubsub::v1::_PushConfig_default_instance_);
}
inline const ::google::pubsub::v1::PushConfig& Subscription::push_config() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.Subscription.push_config)
  return _internal_push_config();
}
inline void Subscription::unsafe_arena_set_allocated_push_config(
    ::google::pubsub::v1::PushConfig* push_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.push_config_);
  }
  _impl_.push_config_ = push_config;
  if (push_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.Subscription.push_config)
}
inline ::google::pubsub::v1::PushConfig* Subscription::release_push_config() {
  
  ::google::pubsub::v1::PushConfig* temp = _impl_.push_config_;
  _impl_.push_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::pubsub::v1::PushConfig* Subscription::unsafe_arena_release_push_config() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.Subscription.push_config)
  
  ::google::pubsub::v1::PushConfig* temp = _impl_.push_config_;
  _impl_.push_config_ = nullptr;
  return temp;
}
inline ::google::pubsub::v1::PushConfig* Subscription::_internal_mutable_push_config() {
  
  if (_impl_.push_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::pubsub::v1::PushConfig>(GetArenaForAllocation());
    _impl_.push_config_ = p;
  }
  return _impl_.push_config_;
}
inline ::google::pubsub::v1::PushConfig* Subscription::mutable_push_config() {
  ::google::pubsub::v1::PushConfig* _msg = _internal_mutable_push_config();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.Subscription.push_config)
  return _msg;
}
inline void Subscription::set_allocated_push_config(::google::pubsub::v1::PushConfig* push_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.push_config_;
  }
  if (push_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(push_config);
    if (message_arena != submessage_arena) {
      push_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, push_config, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.push_config_ = push_config;
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.Subscription.push_config)
}

// .google.pubsub.v1.BigQueryConfig bigquery_config = 18;
inline bool Subscription::_internal_has_bigquery_config() const {
  return this != internal_default_instance() && _impl_.bigquery_config_ != nullptr;
}
inline bool Subscription::has_bigquery_config() const {
  return _internal_has_bigquery_config();
}
inline void Subscription::clear_bigquery_config() {
  if (GetArenaForAllocation() == nullptr && _impl_.bigquery_config_ != nullptr) {
    delete _impl_.bigquery_config_;
  }
  _impl_.bigquery_config_ = nullptr;
}
inline const ::google::pubsub::v1::BigQueryConfig& Subscription::_internal_bigquery_config() const {
  const ::google::pubsub::v1::BigQueryConfig* p = _impl_.bigquery_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::pubsub::v1::BigQueryConfig&>(
      ::google::pubsub::v1::_BigQueryConfig_default_instance_);
}
inline const ::google::pubsub::v1::BigQueryConfig& Subscription::bigquery_config() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.Subscription.bigquery_config)
  return _internal_bigquery_config();
}
inline void Subscription::unsafe_arena_set_allocated_bigquery_config(
    ::google::pubsub::v1::BigQueryConfig* bigquery_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bigquery_config_);
  }
  _impl_.bigquery_config_ = bigquery_config;
  if (bigquery_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.Subscription.bigquery_config)
}
inline ::google::pubsub::v1::BigQueryConfig* Subscription::release_bigquery_config() {
  
  ::google::pubsub::v1::BigQueryConfig* temp = _impl_.bigquery_config_;
  _impl_.bigquery_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::pubsub::v1::BigQueryConfig* Subscription::unsafe_arena_release_bigquery_config() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.Subscription.bigquery_config)
  
  ::google::pubsub::v1::BigQueryConfig* temp = _impl_.bigquery_config_;
  _impl_.bigquery_config_ = nullptr;
  return temp;
}
inline ::google::pubsub::v1::BigQueryConfig* Subscription::_internal_mutable_bigquery_config() {
  
  if (_impl_.bigquery_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::pubsub::v1::BigQueryConfig>(GetArenaForAllocation());
    _impl_.bigquery_config_ = p;
  }
  return _impl_.bigquery_config_;
}
inline ::google::pubsub::v1::BigQueryConfig* Subscription::mutable_bigquery_config() {
  ::google::pubsub::v1::BigQueryConfig* _msg = _internal_mutable_bigquery_config();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.Subscription.bigquery_config)
  return _msg;
}
inline void Subscription::set_allocated_bigquery_config(::google::pubsub::v1::BigQueryConfig* bigquery_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.bigquery_config_;
  }
  if (bigquery_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bigquery_config);
    if (message_arena != submessage_arena) {
      bigquery_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bigquery_config, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.bigquery_config_ = bigquery_config;
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.Subscription.bigquery_config)
}

// int32 ack_deadline_seconds = 5;
inline void Subscription::clear_ack_deadline_seconds() {
  _impl_.ack_deadline_seconds_ = 0;
}
inline int32_t Subscription::_internal_ack_deadline_seconds() const {
  return _impl_.ack_deadline_seconds_;
}
inline int32_t Subscription::ack_deadline_seconds() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.Subscription.ack_deadline_seconds)
  return _internal_ack_deadline_seconds();
}
inline void Subscription::_internal_set_ack_deadline_seconds(int32_t value) {
  
  _impl_.ack_deadline_seconds_ = value;
}
inline void Subscription::set_ack_deadline_seconds(int32_t value) {
  _internal_set_ack_deadline_seconds(value);
  // @@protoc_insertion_point(field_set:google.pubsub.v1.Subscription.ack_deadline_seconds)
}

// bool retain_acked_messages = 7;
inline void Subscription::clear_retain_acked_messages() {
  _impl_.retain_acked_messages_ = false;
}
inline bool Subscription::_internal_retain_acked_messages() const {
  return _impl_.retain_acked_messages_;
}
inline bool Subscription::retain_acked_messages() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.Subscription.retain_acked_messages)
  return _internal_retain_acked_messages();
}
inline void Subscription::_internal_set_retain_acked_messages(bool value) {
  
  _impl_.retain_acked_messages_ = value;
}
inline void Subscription::set_retain_acked_messages(bool value) {
  _internal_set_retain_acked_messages(value);
  // @@protoc_insertion_point(field_set:google.pubsub.v1.Subscription.retain_acked_messages)
}

// .google.protobuf.Duration message_retention_duration = 8;
inline bool Subscription::_internal_has_message_retention_duration() const {
  return this != internal_default_instance() && _impl_.message_retention_duration_ != nullptr;
}
inline bool Subscription::has_message_retention_duration() const {
  return _internal_has_message_retention_duration();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& Subscription::_internal_message_retention_duration() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.message_retention_duration_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& Subscription::message_retention_duration() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.Subscription.message_retention_duration)
  return _internal_message_retention_duration();
}
inline void Subscription::unsafe_arena_set_allocated_message_retention_duration(
    ::PROTOBUF_NAMESPACE_ID::Duration* message_retention_duration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.message_retention_duration_);
  }
  _impl_.message_retention_duration_ = message_retention_duration;
  if (message_retention_duration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.Subscription.message_retention_duration)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* Subscription::release_message_retention_duration() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.message_retention_duration_;
  _impl_.message_retention_duration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* Subscription::unsafe_arena_release_message_retention_duration() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.Subscription.message_retention_duration)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.message_retention_duration_;
  _impl_.message_retention_duration_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* Subscription::_internal_mutable_message_retention_duration() {
  
  if (_impl_.message_retention_duration_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.message_retention_duration_ = p;
  }
  return _impl_.message_retention_duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* Subscription::mutable_message_retention_duration() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_message_retention_duration();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.Subscription.message_retention_duration)
  return _msg;
}
inline void Subscription::set_allocated_message_retention_duration(::PROTOBUF_NAMESPACE_ID::Duration* message_retention_duration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.message_retention_duration_);
  }
  if (message_retention_duration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_retention_duration));
    if (message_arena != submessage_arena) {
      message_retention_duration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message_retention_duration, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.message_retention_duration_ = message_retention_duration;
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.Subscription.message_retention_duration)
}

// map<string, string> labels = 9;
inline int Subscription::_internal_labels_size() const {
  return _impl_.labels_.size();
}
inline int Subscription::labels_size() const {
  return _internal_labels_size();
}
inline void Subscription::clear_labels() {
  _impl_.labels_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Subscription::_internal_labels() const {
  return _impl_.labels_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Subscription::labels() const {
  // @@protoc_insertion_point(field_map:google.pubsub.v1.Subscription.labels)
  return _internal_labels();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Subscription::_internal_mutable_labels() {
  return _impl_.labels_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Subscription::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:google.pubsub.v1.Subscription.labels)
  return _internal_mutable_labels();
}

// bool enable_message_ordering = 10;
inline void Subscription::clear_enable_message_ordering() {
  _impl_.enable_message_ordering_ = false;
}
inline bool Subscription::_internal_enable_message_ordering() const {
  return _impl_.enable_message_ordering_;
}
inline bool Subscription::enable_message_ordering() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.Subscription.enable_message_ordering)
  return _internal_enable_message_ordering();
}
inline void Subscription::_internal_set_enable_message_ordering(bool value) {
  
  _impl_.enable_message_ordering_ = value;
}
inline void Subscription::set_enable_message_ordering(bool value) {
  _internal_set_enable_message_ordering(value);
  // @@protoc_insertion_point(field_set:google.pubsub.v1.Subscription.enable_message_ordering)
}

// .google.pubsub.v1.ExpirationPolicy expiration_policy = 11;
inline bool Subscription::_internal_has_expiration_policy() const {
  return this != internal_default_instance() && _impl_.expiration_policy_ != nullptr;
}
inline bool Subscription::has_expiration_policy() const {
  return _internal_has_expiration_policy();
}
inline void Subscription::clear_expiration_policy() {
  if (GetArenaForAllocation() == nullptr && _impl_.expiration_policy_ != nullptr) {
    delete _impl_.expiration_policy_;
  }
  _impl_.expiration_policy_ = nullptr;
}
inline const ::google::pubsub::v1::ExpirationPolicy& Subscription::_internal_expiration_policy() const {
  const ::google::pubsub::v1::ExpirationPolicy* p = _impl_.expiration_policy_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::pubsub::v1::ExpirationPolicy&>(
      ::google::pubsub::v1::_ExpirationPolicy_default_instance_);
}
inline const ::google::pubsub::v1::ExpirationPolicy& Subscription::expiration_policy() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.Subscription.expiration_policy)
  return _internal_expiration_policy();
}
inline void Subscription::unsafe_arena_set_allocated_expiration_policy(
    ::google::pubsub::v1::ExpirationPolicy* expiration_policy) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expiration_policy_);
  }
  _impl_.expiration_policy_ = expiration_policy;
  if (expiration_policy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.Subscription.expiration_policy)
}
inline ::google::pubsub::v1::ExpirationPolicy* Subscription::release_expiration_policy() {
  
  ::google::pubsub::v1::ExpirationPolicy* temp = _impl_.expiration_policy_;
  _impl_.expiration_policy_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::pubsub::v1::ExpirationPolicy* Subscription::unsafe_arena_release_expiration_policy() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.Subscription.expiration_policy)
  
  ::google::pubsub::v1::ExpirationPolicy* temp = _impl_.expiration_policy_;
  _impl_.expiration_policy_ = nullptr;
  return temp;
}
inline ::google::pubsub::v1::ExpirationPolicy* Subscription::_internal_mutable_expiration_policy() {
  
  if (_impl_.expiration_policy_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::pubsub::v1::ExpirationPolicy>(GetArenaForAllocation());
    _impl_.expiration_policy_ = p;
  }
  return _impl_.expiration_policy_;
}
inline ::google::pubsub::v1::ExpirationPolicy* Subscription::mutable_expiration_policy() {
  ::google::pubsub::v1::ExpirationPolicy* _msg = _internal_mutable_expiration_policy();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.Subscription.expiration_policy)
  return _msg;
}
inline void Subscription::set_allocated_expiration_policy(::google::pubsub::v1::ExpirationPolicy* expiration_policy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.expiration_policy_;
  }
  if (expiration_policy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(expiration_policy);
    if (message_arena != submessage_arena) {
      expiration_policy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expiration_policy, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.expiration_policy_ = expiration_policy;
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.Subscription.expiration_policy)
}

// string filter = 12;
inline void Subscription::clear_filter() {
  _impl_.filter_.ClearToEmpty();
}
inline const std::string& Subscription::filter() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.Subscription.filter)
  return _internal_filter();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Subscription::set_filter(ArgT0&& arg0, ArgT... args) {
 
 _impl_.filter_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.Subscription.filter)
}
inline std::string* Subscription::mutable_filter() {
  std::string* _s = _internal_mutable_filter();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.Subscription.filter)
  return _s;
}
inline const std::string& Subscription::_internal_filter() const {
  return _impl_.filter_.Get();
}
inline void Subscription::_internal_set_filter(const std::string& value) {
  
  _impl_.filter_.Set(value, GetArenaForAllocation());
}
inline std::string* Subscription::_internal_mutable_filter() {
  
  return _impl_.filter_.Mutable(GetArenaForAllocation());
}
inline std::string* Subscription::release_filter() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.Subscription.filter)
  return _impl_.filter_.Release();
}
inline void Subscription::set_allocated_filter(std::string* filter) {
  if (filter != nullptr) {
    
  } else {
    
  }
  _impl_.filter_.SetAllocated(filter, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.filter_.IsDefault()) {
    _impl_.filter_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.Subscription.filter)
}

// .google.pubsub.v1.DeadLetterPolicy dead_letter_policy = 13;
inline bool Subscription::_internal_has_dead_letter_policy() const {
  return this != internal_default_instance() && _impl_.dead_letter_policy_ != nullptr;
}
inline bool Subscription::has_dead_letter_policy() const {
  return _internal_has_dead_letter_policy();
}
inline void Subscription::clear_dead_letter_policy() {
  if (GetArenaForAllocation() == nullptr && _impl_.dead_letter_policy_ != nullptr) {
    delete _impl_.dead_letter_policy_;
  }
  _impl_.dead_letter_policy_ = nullptr;
}
inline const ::google::pubsub::v1::DeadLetterPolicy& Subscription::_internal_dead_letter_policy() const {
  const ::google::pubsub::v1::DeadLetterPolicy* p = _impl_.dead_letter_policy_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::pubsub::v1::DeadLetterPolicy&>(
      ::google::pubsub::v1::_DeadLetterPolicy_default_instance_);
}
inline const ::google::pubsub::v1::DeadLetterPolicy& Subscription::dead_letter_policy() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.Subscription.dead_letter_policy)
  return _internal_dead_letter_policy();
}
inline void Subscription::unsafe_arena_set_allocated_dead_letter_policy(
    ::google::pubsub::v1::DeadLetterPolicy* dead_letter_policy) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dead_letter_policy_);
  }
  _impl_.dead_letter_policy_ = dead_letter_policy;
  if (dead_letter_policy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.Subscription.dead_letter_policy)
}
inline ::google::pubsub::v1::DeadLetterPolicy* Subscription::release_dead_letter_policy() {
  
  ::google::pubsub::v1::DeadLetterPolicy* temp = _impl_.dead_letter_policy_;
  _impl_.dead_letter_policy_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::pubsub::v1::DeadLetterPolicy* Subscription::unsafe_arena_release_dead_letter_policy() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.Subscription.dead_letter_policy)
  
  ::google::pubsub::v1::DeadLetterPolicy* temp = _impl_.dead_letter_policy_;
  _impl_.dead_letter_policy_ = nullptr;
  return temp;
}
inline ::google::pubsub::v1::DeadLetterPolicy* Subscription::_internal_mutable_dead_letter_policy() {
  
  if (_impl_.dead_letter_policy_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::pubsub::v1::DeadLetterPolicy>(GetArenaForAllocation());
    _impl_.dead_letter_policy_ = p;
  }
  return _impl_.dead_letter_policy_;
}
inline ::google::pubsub::v1::DeadLetterPolicy* Subscription::mutable_dead_letter_policy() {
  ::google::pubsub::v1::DeadLetterPolicy* _msg = _internal_mutable_dead_letter_policy();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.Subscription.dead_letter_policy)
  return _msg;
}
inline void Subscription::set_allocated_dead_letter_policy(::google::pubsub::v1::DeadLetterPolicy* dead_letter_policy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.dead_letter_policy_;
  }
  if (dead_letter_policy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(dead_letter_policy);
    if (message_arena != submessage_arena) {
      dead_letter_policy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dead_letter_policy, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.dead_letter_policy_ = dead_letter_policy;
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.Subscription.dead_letter_policy)
}

// .google.pubsub.v1.RetryPolicy retry_policy = 14;
inline bool Subscription::_internal_has_retry_policy() const {
  return this != internal_default_instance() && _impl_.retry_policy_ != nullptr;
}
inline bool Subscription::has_retry_policy() const {
  return _internal_has_retry_policy();
}
inline void Subscription::clear_retry_policy() {
  if (GetArenaForAllocation() == nullptr && _impl_.retry_policy_ != nullptr) {
    delete _impl_.retry_policy_;
  }
  _impl_.retry_policy_ = nullptr;
}
inline const ::google::pubsub::v1::RetryPolicy& Subscription::_internal_retry_policy() const {
  const ::google::pubsub::v1::RetryPolicy* p = _impl_.retry_policy_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::pubsub::v1::RetryPolicy&>(
      ::google::pubsub::v1::_RetryPolicy_default_instance_);
}
inline const ::google::pubsub::v1::RetryPolicy& Subscription::retry_policy() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.Subscription.retry_policy)
  return _internal_retry_policy();
}
inline void Subscription::unsafe_arena_set_allocated_retry_policy(
    ::google::pubsub::v1::RetryPolicy* retry_policy) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.retry_policy_);
  }
  _impl_.retry_policy_ = retry_policy;
  if (retry_policy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.Subscription.retry_policy)
}
inline ::google::pubsub::v1::RetryPolicy* Subscription::release_retry_policy() {
  
  ::google::pubsub::v1::RetryPolicy* temp = _impl_.retry_policy_;
  _impl_.retry_policy_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::pubsub::v1::RetryPolicy* Subscription::unsafe_arena_release_retry_policy() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.Subscription.retry_policy)
  
  ::google::pubsub::v1::RetryPolicy* temp = _impl_.retry_policy_;
  _impl_.retry_policy_ = nullptr;
  return temp;
}
inline ::google::pubsub::v1::RetryPolicy* Subscription::_internal_mutable_retry_policy() {
  
  if (_impl_.retry_policy_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::pubsub::v1::RetryPolicy>(GetArenaForAllocation());
    _impl_.retry_policy_ = p;
  }
  return _impl_.retry_policy_;
}
inline ::google::pubsub::v1::RetryPolicy* Subscription::mutable_retry_policy() {
  ::google::pubsub::v1::RetryPolicy* _msg = _internal_mutable_retry_policy();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.Subscription.retry_policy)
  return _msg;
}
inline void Subscription::set_allocated_retry_policy(::google::pubsub::v1::RetryPolicy* retry_policy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.retry_policy_;
  }
  if (retry_policy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(retry_policy);
    if (message_arena != submessage_arena) {
      retry_policy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, retry_policy, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.retry_policy_ = retry_policy;
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.Subscription.retry_policy)
}

// bool detached = 15;
inline void Subscription::clear_detached() {
  _impl_.detached_ = false;
}
inline bool Subscription::_internal_detached() const {
  return _impl_.detached_;
}
inline bool Subscription::detached() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.Subscription.detached)
  return _internal_detached();
}
inline void Subscription::_internal_set_detached(bool value) {
  
  _impl_.detached_ = value;
}
inline void Subscription::set_detached(bool value) {
  _internal_set_detached(value);
  // @@protoc_insertion_point(field_set:google.pubsub.v1.Subscription.detached)
}

// bool enable_exactly_once_delivery = 16;
inline void Subscription::clear_enable_exactly_once_delivery() {
  _impl_.enable_exactly_once_delivery_ = false;
}
inline bool Subscription::_internal_enable_exactly_once_delivery() const {
  return _impl_.enable_exactly_once_delivery_;
}
inline bool Subscription::enable_exactly_once_delivery() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.Subscription.enable_exactly_once_delivery)
  return _internal_enable_exactly_once_delivery();
}
inline void Subscription::_internal_set_enable_exactly_once_delivery(bool value) {
  
  _impl_.enable_exactly_once_delivery_ = value;
}
inline void Subscription::set_enable_exactly_once_delivery(bool value) {
  _internal_set_enable_exactly_once_delivery(value);
  // @@protoc_insertion_point(field_set:google.pubsub.v1.Subscription.enable_exactly_once_delivery)
}

// .google.protobuf.Duration topic_message_retention_duration = 17 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool Subscription::_internal_has_topic_message_retention_duration() const {
  return this != internal_default_instance() && _impl_.topic_message_retention_duration_ != nullptr;
}
inline bool Subscription::has_topic_message_retention_duration() const {
  return _internal_has_topic_message_retention_duration();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& Subscription::_internal_topic_message_retention_duration() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.topic_message_retention_duration_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& Subscription::topic_message_retention_duration() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.Subscription.topic_message_retention_duration)
  return _internal_topic_message_retention_duration();
}
inline void Subscription::unsafe_arena_set_allocated_topic_message_retention_duration(
    ::PROTOBUF_NAMESPACE_ID::Duration* topic_message_retention_duration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.topic_message_retention_duration_);
  }
  _impl_.topic_message_retention_duration_ = topic_message_retention_duration;
  if (topic_message_retention_duration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.Subscription.topic_message_retention_duration)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* Subscription::release_topic_message_retention_duration() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.topic_message_retention_duration_;
  _impl_.topic_message_retention_duration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* Subscription::unsafe_arena_release_topic_message_retention_duration() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.Subscription.topic_message_retention_duration)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.topic_message_retention_duration_;
  _impl_.topic_message_retention_duration_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* Subscription::_internal_mutable_topic_message_retention_duration() {
  
  if (_impl_.topic_message_retention_duration_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.topic_message_retention_duration_ = p;
  }
  return _impl_.topic_message_retention_duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* Subscription::mutable_topic_message_retention_duration() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_topic_message_retention_duration();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.Subscription.topic_message_retention_duration)
  return _msg;
}
inline void Subscription::set_allocated_topic_message_retention_duration(::PROTOBUF_NAMESPACE_ID::Duration* topic_message_retention_duration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.topic_message_retention_duration_);
  }
  if (topic_message_retention_duration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(topic_message_retention_duration));
    if (message_arena != submessage_arena) {
      topic_message_retention_duration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, topic_message_retention_duration, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.topic_message_retention_duration_ = topic_message_retention_duration;
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.Subscription.topic_message_retention_duration)
}

// .google.pubsub.v1.Subscription.State state = 19 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void Subscription::clear_state() {
  _impl_.state_ = 0;
}
inline ::google::pubsub::v1::Subscription_State Subscription::_internal_state() const {
  return static_cast< ::google::pubsub::v1::Subscription_State >(_impl_.state_);
}
inline ::google::pubsub::v1::Subscription_State Subscription::state() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.Subscription.state)
  return _internal_state();
}
inline void Subscription::_internal_set_state(::google::pubsub::v1::Subscription_State value) {
  
  _impl_.state_ = value;
}
inline void Subscription::set_state(::google::pubsub::v1::Subscription_State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:google.pubsub.v1.Subscription.state)
}

// -------------------------------------------------------------------

// RetryPolicy

// .google.protobuf.Duration minimum_backoff = 1;
inline bool RetryPolicy::_internal_has_minimum_backoff() const {
  return this != internal_default_instance() && _impl_.minimum_backoff_ != nullptr;
}
inline bool RetryPolicy::has_minimum_backoff() const {
  return _internal_has_minimum_backoff();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& RetryPolicy::_internal_minimum_backoff() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.minimum_backoff_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& RetryPolicy::minimum_backoff() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.RetryPolicy.minimum_backoff)
  return _internal_minimum_backoff();
}
inline void RetryPolicy::unsafe_arena_set_allocated_minimum_backoff(
    ::PROTOBUF_NAMESPACE_ID::Duration* minimum_backoff) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.minimum_backoff_);
  }
  _impl_.minimum_backoff_ = minimum_backoff;
  if (minimum_backoff) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.RetryPolicy.minimum_backoff)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* RetryPolicy::release_minimum_backoff() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.minimum_backoff_;
  _impl_.minimum_backoff_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* RetryPolicy::unsafe_arena_release_minimum_backoff() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.RetryPolicy.minimum_backoff)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.minimum_backoff_;
  _impl_.minimum_backoff_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* RetryPolicy::_internal_mutable_minimum_backoff() {
  
  if (_impl_.minimum_backoff_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.minimum_backoff_ = p;
  }
  return _impl_.minimum_backoff_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* RetryPolicy::mutable_minimum_backoff() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_minimum_backoff();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.RetryPolicy.minimum_backoff)
  return _msg;
}
inline void RetryPolicy::set_allocated_minimum_backoff(::PROTOBUF_NAMESPACE_ID::Duration* minimum_backoff) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.minimum_backoff_);
  }
  if (minimum_backoff) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(minimum_backoff));
    if (message_arena != submessage_arena) {
      minimum_backoff = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, minimum_backoff, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.minimum_backoff_ = minimum_backoff;
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.RetryPolicy.minimum_backoff)
}

// .google.protobuf.Duration maximum_backoff = 2;
inline bool RetryPolicy::_internal_has_maximum_backoff() const {
  return this != internal_default_instance() && _impl_.maximum_backoff_ != nullptr;
}
inline bool RetryPolicy::has_maximum_backoff() const {
  return _internal_has_maximum_backoff();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& RetryPolicy::_internal_maximum_backoff() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.maximum_backoff_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& RetryPolicy::maximum_backoff() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.RetryPolicy.maximum_backoff)
  return _internal_maximum_backoff();
}
inline void RetryPolicy::unsafe_arena_set_allocated_maximum_backoff(
    ::PROTOBUF_NAMESPACE_ID::Duration* maximum_backoff) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.maximum_backoff_);
  }
  _impl_.maximum_backoff_ = maximum_backoff;
  if (maximum_backoff) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.RetryPolicy.maximum_backoff)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* RetryPolicy::release_maximum_backoff() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.maximum_backoff_;
  _impl_.maximum_backoff_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* RetryPolicy::unsafe_arena_release_maximum_backoff() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.RetryPolicy.maximum_backoff)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.maximum_backoff_;
  _impl_.maximum_backoff_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* RetryPolicy::_internal_mutable_maximum_backoff() {
  
  if (_impl_.maximum_backoff_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.maximum_backoff_ = p;
  }
  return _impl_.maximum_backoff_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* RetryPolicy::mutable_maximum_backoff() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_maximum_backoff();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.RetryPolicy.maximum_backoff)
  return _msg;
}
inline void RetryPolicy::set_allocated_maximum_backoff(::PROTOBUF_NAMESPACE_ID::Duration* maximum_backoff) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.maximum_backoff_);
  }
  if (maximum_backoff) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(maximum_backoff));
    if (message_arena != submessage_arena) {
      maximum_backoff = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, maximum_backoff, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.maximum_backoff_ = maximum_backoff;
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.RetryPolicy.maximum_backoff)
}

// -------------------------------------------------------------------

// DeadLetterPolicy

// string dead_letter_topic = 1;
inline void DeadLetterPolicy::clear_dead_letter_topic() {
  _impl_.dead_letter_topic_.ClearToEmpty();
}
inline const std::string& DeadLetterPolicy::dead_letter_topic() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.DeadLetterPolicy.dead_letter_topic)
  return _internal_dead_letter_topic();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeadLetterPolicy::set_dead_letter_topic(ArgT0&& arg0, ArgT... args) {
 
 _impl_.dead_letter_topic_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.DeadLetterPolicy.dead_letter_topic)
}
inline std::string* DeadLetterPolicy::mutable_dead_letter_topic() {
  std::string* _s = _internal_mutable_dead_letter_topic();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.DeadLetterPolicy.dead_letter_topic)
  return _s;
}
inline const std::string& DeadLetterPolicy::_internal_dead_letter_topic() const {
  return _impl_.dead_letter_topic_.Get();
}
inline void DeadLetterPolicy::_internal_set_dead_letter_topic(const std::string& value) {
  
  _impl_.dead_letter_topic_.Set(value, GetArenaForAllocation());
}
inline std::string* DeadLetterPolicy::_internal_mutable_dead_letter_topic() {
  
  return _impl_.dead_letter_topic_.Mutable(GetArenaForAllocation());
}
inline std::string* DeadLetterPolicy::release_dead_letter_topic() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.DeadLetterPolicy.dead_letter_topic)
  return _impl_.dead_letter_topic_.Release();
}
inline void DeadLetterPolicy::set_allocated_dead_letter_topic(std::string* dead_letter_topic) {
  if (dead_letter_topic != nullptr) {
    
  } else {
    
  }
  _impl_.dead_letter_topic_.SetAllocated(dead_letter_topic, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dead_letter_topic_.IsDefault()) {
    _impl_.dead_letter_topic_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.DeadLetterPolicy.dead_letter_topic)
}

// int32 max_delivery_attempts = 2;
inline void DeadLetterPolicy::clear_max_delivery_attempts() {
  _impl_.max_delivery_attempts_ = 0;
}
inline int32_t DeadLetterPolicy::_internal_max_delivery_attempts() const {
  return _impl_.max_delivery_attempts_;
}
inline int32_t DeadLetterPolicy::max_delivery_attempts() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.DeadLetterPolicy.max_delivery_attempts)
  return _internal_max_delivery_attempts();
}
inline void DeadLetterPolicy::_internal_set_max_delivery_attempts(int32_t value) {
  
  _impl_.max_delivery_attempts_ = value;
}
inline void DeadLetterPolicy::set_max_delivery_attempts(int32_t value) {
  _internal_set_max_delivery_attempts(value);
  // @@protoc_insertion_point(field_set:google.pubsub.v1.DeadLetterPolicy.max_delivery_attempts)
}

// -------------------------------------------------------------------

// ExpirationPolicy

// .google.protobuf.Duration ttl = 1;
inline bool ExpirationPolicy::_internal_has_ttl() const {
  return this != internal_default_instance() && _impl_.ttl_ != nullptr;
}
inline bool ExpirationPolicy::has_ttl() const {
  return _internal_has_ttl();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& ExpirationPolicy::_internal_ttl() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.ttl_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& ExpirationPolicy::ttl() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ExpirationPolicy.ttl)
  return _internal_ttl();
}
inline void ExpirationPolicy::unsafe_arena_set_allocated_ttl(
    ::PROTOBUF_NAMESPACE_ID::Duration* ttl) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ttl_);
  }
  _impl_.ttl_ = ttl;
  if (ttl) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.ExpirationPolicy.ttl)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* ExpirationPolicy::release_ttl() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.ttl_;
  _impl_.ttl_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* ExpirationPolicy::unsafe_arena_release_ttl() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ExpirationPolicy.ttl)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.ttl_;
  _impl_.ttl_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* ExpirationPolicy::_internal_mutable_ttl() {
  
  if (_impl_.ttl_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.ttl_ = p;
  }
  return _impl_.ttl_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* ExpirationPolicy::mutable_ttl() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_ttl();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ExpirationPolicy.ttl)
  return _msg;
}
inline void ExpirationPolicy::set_allocated_ttl(::PROTOBUF_NAMESPACE_ID::Duration* ttl) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ttl_);
  }
  if (ttl) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ttl));
    if (message_arena != submessage_arena) {
      ttl = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ttl, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.ttl_ = ttl;
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ExpirationPolicy.ttl)
}

// -------------------------------------------------------------------

// PushConfig_OidcToken

// string service_account_email = 1;
inline void PushConfig_OidcToken::clear_service_account_email() {
  _impl_.service_account_email_.ClearToEmpty();
}
inline const std::string& PushConfig_OidcToken::service_account_email() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.PushConfig.OidcToken.service_account_email)
  return _internal_service_account_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PushConfig_OidcToken::set_service_account_email(ArgT0&& arg0, ArgT... args) {
 
 _impl_.service_account_email_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.PushConfig.OidcToken.service_account_email)
}
inline std::string* PushConfig_OidcToken::mutable_service_account_email() {
  std::string* _s = _internal_mutable_service_account_email();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.PushConfig.OidcToken.service_account_email)
  return _s;
}
inline const std::string& PushConfig_OidcToken::_internal_service_account_email() const {
  return _impl_.service_account_email_.Get();
}
inline void PushConfig_OidcToken::_internal_set_service_account_email(const std::string& value) {
  
  _impl_.service_account_email_.Set(value, GetArenaForAllocation());
}
inline std::string* PushConfig_OidcToken::_internal_mutable_service_account_email() {
  
  return _impl_.service_account_email_.Mutable(GetArenaForAllocation());
}
inline std::string* PushConfig_OidcToken::release_service_account_email() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.PushConfig.OidcToken.service_account_email)
  return _impl_.service_account_email_.Release();
}
inline void PushConfig_OidcToken::set_allocated_service_account_email(std::string* service_account_email) {
  if (service_account_email != nullptr) {
    
  } else {
    
  }
  _impl_.service_account_email_.SetAllocated(service_account_email, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.service_account_email_.IsDefault()) {
    _impl_.service_account_email_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.PushConfig.OidcToken.service_account_email)
}

// string audience = 2;
inline void PushConfig_OidcToken::clear_audience() {
  _impl_.audience_.ClearToEmpty();
}
inline const std::string& PushConfig_OidcToken::audience() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.PushConfig.OidcToken.audience)
  return _internal_audience();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PushConfig_OidcToken::set_audience(ArgT0&& arg0, ArgT... args) {
 
 _impl_.audience_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.PushConfig.OidcToken.audience)
}
inline std::string* PushConfig_OidcToken::mutable_audience() {
  std::string* _s = _internal_mutable_audience();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.PushConfig.OidcToken.audience)
  return _s;
}
inline const std::string& PushConfig_OidcToken::_internal_audience() const {
  return _impl_.audience_.Get();
}
inline void PushConfig_OidcToken::_internal_set_audience(const std::string& value) {
  
  _impl_.audience_.Set(value, GetArenaForAllocation());
}
inline std::string* PushConfig_OidcToken::_internal_mutable_audience() {
  
  return _impl_.audience_.Mutable(GetArenaForAllocation());
}
inline std::string* PushConfig_OidcToken::release_audience() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.PushConfig.OidcToken.audience)
  return _impl_.audience_.Release();
}
inline void PushConfig_OidcToken::set_allocated_audience(std::string* audience) {
  if (audience != nullptr) {
    
  } else {
    
  }
  _impl_.audience_.SetAllocated(audience, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.audience_.IsDefault()) {
    _impl_.audience_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.PushConfig.OidcToken.audience)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PushConfig

// string push_endpoint = 1;
inline void PushConfig::clear_push_endpoint() {
  _impl_.push_endpoint_.ClearToEmpty();
}
inline const std::string& PushConfig::push_endpoint() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.PushConfig.push_endpoint)
  return _internal_push_endpoint();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PushConfig::set_push_endpoint(ArgT0&& arg0, ArgT... args) {
 
 _impl_.push_endpoint_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.PushConfig.push_endpoint)
}
inline std::string* PushConfig::mutable_push_endpoint() {
  std::string* _s = _internal_mutable_push_endpoint();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.PushConfig.push_endpoint)
  return _s;
}
inline const std::string& PushConfig::_internal_push_endpoint() const {
  return _impl_.push_endpoint_.Get();
}
inline void PushConfig::_internal_set_push_endpoint(const std::string& value) {
  
  _impl_.push_endpoint_.Set(value, GetArenaForAllocation());
}
inline std::string* PushConfig::_internal_mutable_push_endpoint() {
  
  return _impl_.push_endpoint_.Mutable(GetArenaForAllocation());
}
inline std::string* PushConfig::release_push_endpoint() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.PushConfig.push_endpoint)
  return _impl_.push_endpoint_.Release();
}
inline void PushConfig::set_allocated_push_endpoint(std::string* push_endpoint) {
  if (push_endpoint != nullptr) {
    
  } else {
    
  }
  _impl_.push_endpoint_.SetAllocated(push_endpoint, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.push_endpoint_.IsDefault()) {
    _impl_.push_endpoint_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.PushConfig.push_endpoint)
}

// map<string, string> attributes = 2;
inline int PushConfig::_internal_attributes_size() const {
  return _impl_.attributes_.size();
}
inline int PushConfig::attributes_size() const {
  return _internal_attributes_size();
}
inline void PushConfig::clear_attributes() {
  _impl_.attributes_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
PushConfig::_internal_attributes() const {
  return _impl_.attributes_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
PushConfig::attributes() const {
  // @@protoc_insertion_point(field_map:google.pubsub.v1.PushConfig.attributes)
  return _internal_attributes();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
PushConfig::_internal_mutable_attributes() {
  return _impl_.attributes_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
PushConfig::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_map:google.pubsub.v1.PushConfig.attributes)
  return _internal_mutable_attributes();
}

// .google.pubsub.v1.PushConfig.OidcToken oidc_token = 3;
inline bool PushConfig::_internal_has_oidc_token() const {
  return authentication_method_case() == kOidcToken;
}
inline bool PushConfig::has_oidc_token() const {
  return _internal_has_oidc_token();
}
inline void PushConfig::set_has_oidc_token() {
  _impl_._oneof_case_[0] = kOidcToken;
}
inline void PushConfig::clear_oidc_token() {
  if (_internal_has_oidc_token()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.authentication_method_.oidc_token_;
    }
    clear_has_authentication_method();
  }
}
inline ::google::pubsub::v1::PushConfig_OidcToken* PushConfig::release_oidc_token() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.PushConfig.oidc_token)
  if (_internal_has_oidc_token()) {
    clear_has_authentication_method();
    ::google::pubsub::v1::PushConfig_OidcToken* temp = _impl_.authentication_method_.oidc_token_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.authentication_method_.oidc_token_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::pubsub::v1::PushConfig_OidcToken& PushConfig::_internal_oidc_token() const {
  return _internal_has_oidc_token()
      ? *_impl_.authentication_method_.oidc_token_
      : reinterpret_cast< ::google::pubsub::v1::PushConfig_OidcToken&>(::google::pubsub::v1::_PushConfig_OidcToken_default_instance_);
}
inline const ::google::pubsub::v1::PushConfig_OidcToken& PushConfig::oidc_token() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.PushConfig.oidc_token)
  return _internal_oidc_token();
}
inline ::google::pubsub::v1::PushConfig_OidcToken* PushConfig::unsafe_arena_release_oidc_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.PushConfig.oidc_token)
  if (_internal_has_oidc_token()) {
    clear_has_authentication_method();
    ::google::pubsub::v1::PushConfig_OidcToken* temp = _impl_.authentication_method_.oidc_token_;
    _impl_.authentication_method_.oidc_token_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PushConfig::unsafe_arena_set_allocated_oidc_token(::google::pubsub::v1::PushConfig_OidcToken* oidc_token) {
  clear_authentication_method();
  if (oidc_token) {
    set_has_oidc_token();
    _impl_.authentication_method_.oidc_token_ = oidc_token;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.PushConfig.oidc_token)
}
inline ::google::pubsub::v1::PushConfig_OidcToken* PushConfig::_internal_mutable_oidc_token() {
  if (!_internal_has_oidc_token()) {
    clear_authentication_method();
    set_has_oidc_token();
    _impl_.authentication_method_.oidc_token_ = CreateMaybeMessage< ::google::pubsub::v1::PushConfig_OidcToken >(GetArenaForAllocation());
  }
  return _impl_.authentication_method_.oidc_token_;
}
inline ::google::pubsub::v1::PushConfig_OidcToken* PushConfig::mutable_oidc_token() {
  ::google::pubsub::v1::PushConfig_OidcToken* _msg = _internal_mutable_oidc_token();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.PushConfig.oidc_token)
  return _msg;
}

inline bool PushConfig::has_authentication_method() const {
  return authentication_method_case() != AUTHENTICATION_METHOD_NOT_SET;
}
inline void PushConfig::clear_has_authentication_method() {
  _impl_._oneof_case_[0] = AUTHENTICATION_METHOD_NOT_SET;
}
inline PushConfig::AuthenticationMethodCase PushConfig::authentication_method_case() const {
  return PushConfig::AuthenticationMethodCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// BigQueryConfig

// string table = 1;
inline void BigQueryConfig::clear_table() {
  _impl_.table_.ClearToEmpty();
}
inline const std::string& BigQueryConfig::table() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.BigQueryConfig.table)
  return _internal_table();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BigQueryConfig::set_table(ArgT0&& arg0, ArgT... args) {
 
 _impl_.table_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.BigQueryConfig.table)
}
inline std::string* BigQueryConfig::mutable_table() {
  std::string* _s = _internal_mutable_table();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.BigQueryConfig.table)
  return _s;
}
inline const std::string& BigQueryConfig::_internal_table() const {
  return _impl_.table_.Get();
}
inline void BigQueryConfig::_internal_set_table(const std::string& value) {
  
  _impl_.table_.Set(value, GetArenaForAllocation());
}
inline std::string* BigQueryConfig::_internal_mutable_table() {
  
  return _impl_.table_.Mutable(GetArenaForAllocation());
}
inline std::string* BigQueryConfig::release_table() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.BigQueryConfig.table)
  return _impl_.table_.Release();
}
inline void BigQueryConfig::set_allocated_table(std::string* table) {
  if (table != nullptr) {
    
  } else {
    
  }
  _impl_.table_.SetAllocated(table, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.table_.IsDefault()) {
    _impl_.table_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.BigQueryConfig.table)
}

// bool use_topic_schema = 2;
inline void BigQueryConfig::clear_use_topic_schema() {
  _impl_.use_topic_schema_ = false;
}
inline bool BigQueryConfig::_internal_use_topic_schema() const {
  return _impl_.use_topic_schema_;
}
inline bool BigQueryConfig::use_topic_schema() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.BigQueryConfig.use_topic_schema)
  return _internal_use_topic_schema();
}
inline void BigQueryConfig::_internal_set_use_topic_schema(bool value) {
  
  _impl_.use_topic_schema_ = value;
}
inline void BigQueryConfig::set_use_topic_schema(bool value) {
  _internal_set_use_topic_schema(value);
  // @@protoc_insertion_point(field_set:google.pubsub.v1.BigQueryConfig.use_topic_schema)
}

// bool write_metadata = 3;
inline void BigQueryConfig::clear_write_metadata() {
  _impl_.write_metadata_ = false;
}
inline bool BigQueryConfig::_internal_write_metadata() const {
  return _impl_.write_metadata_;
}
inline bool BigQueryConfig::write_metadata() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.BigQueryConfig.write_metadata)
  return _internal_write_metadata();
}
inline void BigQueryConfig::_internal_set_write_metadata(bool value) {
  
  _impl_.write_metadata_ = value;
}
inline void BigQueryConfig::set_write_metadata(bool value) {
  _internal_set_write_metadata(value);
  // @@protoc_insertion_point(field_set:google.pubsub.v1.BigQueryConfig.write_metadata)
}

// bool drop_unknown_fields = 4;
inline void BigQueryConfig::clear_drop_unknown_fields() {
  _impl_.drop_unknown_fields_ = false;
}
inline bool BigQueryConfig::_internal_drop_unknown_fields() const {
  return _impl_.drop_unknown_fields_;
}
inline bool BigQueryConfig::drop_unknown_fields() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.BigQueryConfig.drop_unknown_fields)
  return _internal_drop_unknown_fields();
}
inline void BigQueryConfig::_internal_set_drop_unknown_fields(bool value) {
  
  _impl_.drop_unknown_fields_ = value;
}
inline void BigQueryConfig::set_drop_unknown_fields(bool value) {
  _internal_set_drop_unknown_fields(value);
  // @@protoc_insertion_point(field_set:google.pubsub.v1.BigQueryConfig.drop_unknown_fields)
}

// .google.pubsub.v1.BigQueryConfig.State state = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void BigQueryConfig::clear_state() {
  _impl_.state_ = 0;
}
inline ::google::pubsub::v1::BigQueryConfig_State BigQueryConfig::_internal_state() const {
  return static_cast< ::google::pubsub::v1::BigQueryConfig_State >(_impl_.state_);
}
inline ::google::pubsub::v1::BigQueryConfig_State BigQueryConfig::state() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.BigQueryConfig.state)
  return _internal_state();
}
inline void BigQueryConfig::_internal_set_state(::google::pubsub::v1::BigQueryConfig_State value) {
  
  _impl_.state_ = value;
}
inline void BigQueryConfig::set_state(::google::pubsub::v1::BigQueryConfig_State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:google.pubsub.v1.BigQueryConfig.state)
}

// -------------------------------------------------------------------

// ReceivedMessage

// string ack_id = 1;
inline void ReceivedMessage::clear_ack_id() {
  _impl_.ack_id_.ClearToEmpty();
}
inline const std::string& ReceivedMessage::ack_id() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ReceivedMessage.ack_id)
  return _internal_ack_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReceivedMessage::set_ack_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ack_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ReceivedMessage.ack_id)
}
inline std::string* ReceivedMessage::mutable_ack_id() {
  std::string* _s = _internal_mutable_ack_id();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ReceivedMessage.ack_id)
  return _s;
}
inline const std::string& ReceivedMessage::_internal_ack_id() const {
  return _impl_.ack_id_.Get();
}
inline void ReceivedMessage::_internal_set_ack_id(const std::string& value) {
  
  _impl_.ack_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ReceivedMessage::_internal_mutable_ack_id() {
  
  return _impl_.ack_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ReceivedMessage::release_ack_id() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ReceivedMessage.ack_id)
  return _impl_.ack_id_.Release();
}
inline void ReceivedMessage::set_allocated_ack_id(std::string* ack_id) {
  if (ack_id != nullptr) {
    
  } else {
    
  }
  _impl_.ack_id_.SetAllocated(ack_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ack_id_.IsDefault()) {
    _impl_.ack_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ReceivedMessage.ack_id)
}

// .google.pubsub.v1.PubsubMessage message = 2;
inline bool ReceivedMessage::_internal_has_message() const {
  return this != internal_default_instance() && _impl_.message_ != nullptr;
}
inline bool ReceivedMessage::has_message() const {
  return _internal_has_message();
}
inline void ReceivedMessage::clear_message() {
  if (GetArenaForAllocation() == nullptr && _impl_.message_ != nullptr) {
    delete _impl_.message_;
  }
  _impl_.message_ = nullptr;
}
inline const ::google::pubsub::v1::PubsubMessage& ReceivedMessage::_internal_message() const {
  const ::google::pubsub::v1::PubsubMessage* p = _impl_.message_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::pubsub::v1::PubsubMessage&>(
      ::google::pubsub::v1::_PubsubMessage_default_instance_);
}
inline const ::google::pubsub::v1::PubsubMessage& ReceivedMessage::message() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ReceivedMessage.message)
  return _internal_message();
}
inline void ReceivedMessage::unsafe_arena_set_allocated_message(
    ::google::pubsub::v1::PubsubMessage* message) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.message_);
  }
  _impl_.message_ = message;
  if (message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.ReceivedMessage.message)
}
inline ::google::pubsub::v1::PubsubMessage* ReceivedMessage::release_message() {
  
  ::google::pubsub::v1::PubsubMessage* temp = _impl_.message_;
  _impl_.message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::pubsub::v1::PubsubMessage* ReceivedMessage::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ReceivedMessage.message)
  
  ::google::pubsub::v1::PubsubMessage* temp = _impl_.message_;
  _impl_.message_ = nullptr;
  return temp;
}
inline ::google::pubsub::v1::PubsubMessage* ReceivedMessage::_internal_mutable_message() {
  
  if (_impl_.message_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::pubsub::v1::PubsubMessage>(GetArenaForAllocation());
    _impl_.message_ = p;
  }
  return _impl_.message_;
}
inline ::google::pubsub::v1::PubsubMessage* ReceivedMessage::mutable_message() {
  ::google::pubsub::v1::PubsubMessage* _msg = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ReceivedMessage.message)
  return _msg;
}
inline void ReceivedMessage::set_allocated_message(::google::pubsub::v1::PubsubMessage* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.message_;
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(message);
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.message_ = message;
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ReceivedMessage.message)
}

// int32 delivery_attempt = 3;
inline void ReceivedMessage::clear_delivery_attempt() {
  _impl_.delivery_attempt_ = 0;
}
inline int32_t ReceivedMessage::_internal_delivery_attempt() const {
  return _impl_.delivery_attempt_;
}
inline int32_t ReceivedMessage::delivery_attempt() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ReceivedMessage.delivery_attempt)
  return _internal_delivery_attempt();
}
inline void ReceivedMessage::_internal_set_delivery_attempt(int32_t value) {
  
  _impl_.delivery_attempt_ = value;
}
inline void ReceivedMessage::set_delivery_attempt(int32_t value) {
  _internal_set_delivery_attempt(value);
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ReceivedMessage.delivery_attempt)
}

// -------------------------------------------------------------------

// GetSubscriptionRequest

// string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetSubscriptionRequest::clear_subscription() {
  _impl_.subscription_.ClearToEmpty();
}
inline const std::string& GetSubscriptionRequest::subscription() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.GetSubscriptionRequest.subscription)
  return _internal_subscription();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetSubscriptionRequest::set_subscription(ArgT0&& arg0, ArgT... args) {
 
 _impl_.subscription_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.GetSubscriptionRequest.subscription)
}
inline std::string* GetSubscriptionRequest::mutable_subscription() {
  std::string* _s = _internal_mutable_subscription();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.GetSubscriptionRequest.subscription)
  return _s;
}
inline const std::string& GetSubscriptionRequest::_internal_subscription() const {
  return _impl_.subscription_.Get();
}
inline void GetSubscriptionRequest::_internal_set_subscription(const std::string& value) {
  
  _impl_.subscription_.Set(value, GetArenaForAllocation());
}
inline std::string* GetSubscriptionRequest::_internal_mutable_subscription() {
  
  return _impl_.subscription_.Mutable(GetArenaForAllocation());
}
inline std::string* GetSubscriptionRequest::release_subscription() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.GetSubscriptionRequest.subscription)
  return _impl_.subscription_.Release();
}
inline void GetSubscriptionRequest::set_allocated_subscription(std::string* subscription) {
  if (subscription != nullptr) {
    
  } else {
    
  }
  _impl_.subscription_.SetAllocated(subscription, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.subscription_.IsDefault()) {
    _impl_.subscription_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.GetSubscriptionRequest.subscription)
}

// -------------------------------------------------------------------

// UpdateSubscriptionRequest

// .google.pubsub.v1.Subscription subscription = 1 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateSubscriptionRequest::_internal_has_subscription() const {
  return this != internal_default_instance() && _impl_.subscription_ != nullptr;
}
inline bool UpdateSubscriptionRequest::has_subscription() const {
  return _internal_has_subscription();
}
inline void UpdateSubscriptionRequest::clear_subscription() {
  if (GetArenaForAllocation() == nullptr && _impl_.subscription_ != nullptr) {
    delete _impl_.subscription_;
  }
  _impl_.subscription_ = nullptr;
}
inline const ::google::pubsub::v1::Subscription& UpdateSubscriptionRequest::_internal_subscription() const {
  const ::google::pubsub::v1::Subscription* p = _impl_.subscription_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::pubsub::v1::Subscription&>(
      ::google::pubsub::v1::_Subscription_default_instance_);
}
inline const ::google::pubsub::v1::Subscription& UpdateSubscriptionRequest::subscription() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.UpdateSubscriptionRequest.subscription)
  return _internal_subscription();
}
inline void UpdateSubscriptionRequest::unsafe_arena_set_allocated_subscription(
    ::google::pubsub::v1::Subscription* subscription) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.subscription_);
  }
  _impl_.subscription_ = subscription;
  if (subscription) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.UpdateSubscriptionRequest.subscription)
}
inline ::google::pubsub::v1::Subscription* UpdateSubscriptionRequest::release_subscription() {
  
  ::google::pubsub::v1::Subscription* temp = _impl_.subscription_;
  _impl_.subscription_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::pubsub::v1::Subscription* UpdateSubscriptionRequest::unsafe_arena_release_subscription() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.UpdateSubscriptionRequest.subscription)
  
  ::google::pubsub::v1::Subscription* temp = _impl_.subscription_;
  _impl_.subscription_ = nullptr;
  return temp;
}
inline ::google::pubsub::v1::Subscription* UpdateSubscriptionRequest::_internal_mutable_subscription() {
  
  if (_impl_.subscription_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::pubsub::v1::Subscription>(GetArenaForAllocation());
    _impl_.subscription_ = p;
  }
  return _impl_.subscription_;
}
inline ::google::pubsub::v1::Subscription* UpdateSubscriptionRequest::mutable_subscription() {
  ::google::pubsub::v1::Subscription* _msg = _internal_mutable_subscription();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.UpdateSubscriptionRequest.subscription)
  return _msg;
}
inline void UpdateSubscriptionRequest::set_allocated_subscription(::google::pubsub::v1::Subscription* subscription) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.subscription_;
  }
  if (subscription) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(subscription);
    if (message_arena != submessage_arena) {
      subscription = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subscription, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.subscription_ = subscription;
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.UpdateSubscriptionRequest.subscription)
}

// .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateSubscriptionRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && _impl_.update_mask_ != nullptr;
}
inline bool UpdateSubscriptionRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateSubscriptionRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = _impl_.update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateSubscriptionRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.UpdateSubscriptionRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateSubscriptionRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  _impl_.update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.UpdateSubscriptionRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateSubscriptionRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateSubscriptionRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.UpdateSubscriptionRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateSubscriptionRequest::_internal_mutable_update_mask() {
  
  if (_impl_.update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    _impl_.update_mask_ = p;
  }
  return _impl_.update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateSubscriptionRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.UpdateSubscriptionRequest.update_mask)
  return _msg;
}
inline void UpdateSubscriptionRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.UpdateSubscriptionRequest.update_mask)
}

// -------------------------------------------------------------------

// ListSubscriptionsRequest

// string project = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListSubscriptionsRequest::clear_project() {
  _impl_.project_.ClearToEmpty();
}
inline const std::string& ListSubscriptionsRequest::project() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListSubscriptionsRequest.project)
  return _internal_project();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListSubscriptionsRequest::set_project(ArgT0&& arg0, ArgT... args) {
 
 _impl_.project_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListSubscriptionsRequest.project)
}
inline std::string* ListSubscriptionsRequest::mutable_project() {
  std::string* _s = _internal_mutable_project();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ListSubscriptionsRequest.project)
  return _s;
}
inline const std::string& ListSubscriptionsRequest::_internal_project() const {
  return _impl_.project_.Get();
}
inline void ListSubscriptionsRequest::_internal_set_project(const std::string& value) {
  
  _impl_.project_.Set(value, GetArenaForAllocation());
}
inline std::string* ListSubscriptionsRequest::_internal_mutable_project() {
  
  return _impl_.project_.Mutable(GetArenaForAllocation());
}
inline std::string* ListSubscriptionsRequest::release_project() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ListSubscriptionsRequest.project)
  return _impl_.project_.Release();
}
inline void ListSubscriptionsRequest::set_allocated_project(std::string* project) {
  if (project != nullptr) {
    
  } else {
    
  }
  _impl_.project_.SetAllocated(project, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.project_.IsDefault()) {
    _impl_.project_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ListSubscriptionsRequest.project)
}

// int32 page_size = 2;
inline void ListSubscriptionsRequest::clear_page_size() {
  _impl_.page_size_ = 0;
}
inline int32_t ListSubscriptionsRequest::_internal_page_size() const {
  return _impl_.page_size_;
}
inline int32_t ListSubscriptionsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListSubscriptionsRequest.page_size)
  return _internal_page_size();
}
inline void ListSubscriptionsRequest::_internal_set_page_size(int32_t value) {
  
  _impl_.page_size_ = value;
}
inline void ListSubscriptionsRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListSubscriptionsRequest.page_size)
}

// string page_token = 3;
inline void ListSubscriptionsRequest::clear_page_token() {
  _impl_.page_token_.ClearToEmpty();
}
inline const std::string& ListSubscriptionsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListSubscriptionsRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListSubscriptionsRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListSubscriptionsRequest.page_token)
}
inline std::string* ListSubscriptionsRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ListSubscriptionsRequest.page_token)
  return _s;
}
inline const std::string& ListSubscriptionsRequest::_internal_page_token() const {
  return _impl_.page_token_.Get();
}
inline void ListSubscriptionsRequest::_internal_set_page_token(const std::string& value) {
  
  _impl_.page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListSubscriptionsRequest::_internal_mutable_page_token() {
  
  return _impl_.page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListSubscriptionsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ListSubscriptionsRequest.page_token)
  return _impl_.page_token_.Release();
}
inline void ListSubscriptionsRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  _impl_.page_token_.SetAllocated(page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.page_token_.IsDefault()) {
    _impl_.page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ListSubscriptionsRequest.page_token)
}

// -------------------------------------------------------------------

// ListSubscriptionsResponse

// repeated .google.pubsub.v1.Subscription subscriptions = 1;
inline int ListSubscriptionsResponse::_internal_subscriptions_size() const {
  return _impl_.subscriptions_.size();
}
inline int ListSubscriptionsResponse::subscriptions_size() const {
  return _internal_subscriptions_size();
}
inline void ListSubscriptionsResponse::clear_subscriptions() {
  _impl_.subscriptions_.Clear();
}
inline ::google::pubsub::v1::Subscription* ListSubscriptionsResponse::mutable_subscriptions(int index) {
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ListSubscriptionsResponse.subscriptions)
  return _impl_.subscriptions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::pubsub::v1::Subscription >*
ListSubscriptionsResponse::mutable_subscriptions() {
  // @@protoc_insertion_point(field_mutable_list:google.pubsub.v1.ListSubscriptionsResponse.subscriptions)
  return &_impl_.subscriptions_;
}
inline const ::google::pubsub::v1::Subscription& ListSubscriptionsResponse::_internal_subscriptions(int index) const {
  return _impl_.subscriptions_.Get(index);
}
inline const ::google::pubsub::v1::Subscription& ListSubscriptionsResponse::subscriptions(int index) const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListSubscriptionsResponse.subscriptions)
  return _internal_subscriptions(index);
}
inline ::google::pubsub::v1::Subscription* ListSubscriptionsResponse::_internal_add_subscriptions() {
  return _impl_.subscriptions_.Add();
}
inline ::google::pubsub::v1::Subscription* ListSubscriptionsResponse::add_subscriptions() {
  ::google::pubsub::v1::Subscription* _add = _internal_add_subscriptions();
  // @@protoc_insertion_point(field_add:google.pubsub.v1.ListSubscriptionsResponse.subscriptions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::pubsub::v1::Subscription >&
ListSubscriptionsResponse::subscriptions() const {
  // @@protoc_insertion_point(field_list:google.pubsub.v1.ListSubscriptionsResponse.subscriptions)
  return _impl_.subscriptions_;
}

// string next_page_token = 2;
inline void ListSubscriptionsResponse::clear_next_page_token() {
  _impl_.next_page_token_.ClearToEmpty();
}
inline const std::string& ListSubscriptionsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListSubscriptionsResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListSubscriptionsResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.next_page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListSubscriptionsResponse.next_page_token)
}
inline std::string* ListSubscriptionsResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ListSubscriptionsResponse.next_page_token)
  return _s;
}
inline const std::string& ListSubscriptionsResponse::_internal_next_page_token() const {
  return _impl_.next_page_token_.Get();
}
inline void ListSubscriptionsResponse::_internal_set_next_page_token(const std::string& value) {
  
  _impl_.next_page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListSubscriptionsResponse::_internal_mutable_next_page_token() {
  
  return _impl_.next_page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListSubscriptionsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ListSubscriptionsResponse.next_page_token)
  return _impl_.next_page_token_.Release();
}
inline void ListSubscriptionsResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  _impl_.next_page_token_.SetAllocated(next_page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.next_page_token_.IsDefault()) {
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ListSubscriptionsResponse.next_page_token)
}

// -------------------------------------------------------------------

// DeleteSubscriptionRequest

// string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteSubscriptionRequest::clear_subscription() {
  _impl_.subscription_.ClearToEmpty();
}
inline const std::string& DeleteSubscriptionRequest::subscription() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.DeleteSubscriptionRequest.subscription)
  return _internal_subscription();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteSubscriptionRequest::set_subscription(ArgT0&& arg0, ArgT... args) {
 
 _impl_.subscription_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.DeleteSubscriptionRequest.subscription)
}
inline std::string* DeleteSubscriptionRequest::mutable_subscription() {
  std::string* _s = _internal_mutable_subscription();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.DeleteSubscriptionRequest.subscription)
  return _s;
}
inline const std::string& DeleteSubscriptionRequest::_internal_subscription() const {
  return _impl_.subscription_.Get();
}
inline void DeleteSubscriptionRequest::_internal_set_subscription(const std::string& value) {
  
  _impl_.subscription_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteSubscriptionRequest::_internal_mutable_subscription() {
  
  return _impl_.subscription_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteSubscriptionRequest::release_subscription() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.DeleteSubscriptionRequest.subscription)
  return _impl_.subscription_.Release();
}
inline void DeleteSubscriptionRequest::set_allocated_subscription(std::string* subscription) {
  if (subscription != nullptr) {
    
  } else {
    
  }
  _impl_.subscription_.SetAllocated(subscription, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.subscription_.IsDefault()) {
    _impl_.subscription_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.DeleteSubscriptionRequest.subscription)
}

// -------------------------------------------------------------------

// ModifyPushConfigRequest

// string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ModifyPushConfigRequest::clear_subscription() {
  _impl_.subscription_.ClearToEmpty();
}
inline const std::string& ModifyPushConfigRequest::subscription() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ModifyPushConfigRequest.subscription)
  return _internal_subscription();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModifyPushConfigRequest::set_subscription(ArgT0&& arg0, ArgT... args) {
 
 _impl_.subscription_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ModifyPushConfigRequest.subscription)
}
inline std::string* ModifyPushConfigRequest::mutable_subscription() {
  std::string* _s = _internal_mutable_subscription();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ModifyPushConfigRequest.subscription)
  return _s;
}
inline const std::string& ModifyPushConfigRequest::_internal_subscription() const {
  return _impl_.subscription_.Get();
}
inline void ModifyPushConfigRequest::_internal_set_subscription(const std::string& value) {
  
  _impl_.subscription_.Set(value, GetArenaForAllocation());
}
inline std::string* ModifyPushConfigRequest::_internal_mutable_subscription() {
  
  return _impl_.subscription_.Mutable(GetArenaForAllocation());
}
inline std::string* ModifyPushConfigRequest::release_subscription() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ModifyPushConfigRequest.subscription)
  return _impl_.subscription_.Release();
}
inline void ModifyPushConfigRequest::set_allocated_subscription(std::string* subscription) {
  if (subscription != nullptr) {
    
  } else {
    
  }
  _impl_.subscription_.SetAllocated(subscription, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.subscription_.IsDefault()) {
    _impl_.subscription_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ModifyPushConfigRequest.subscription)
}

// .google.pubsub.v1.PushConfig push_config = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool ModifyPushConfigRequest::_internal_has_push_config() const {
  return this != internal_default_instance() && _impl_.push_config_ != nullptr;
}
inline bool ModifyPushConfigRequest::has_push_config() const {
  return _internal_has_push_config();
}
inline void ModifyPushConfigRequest::clear_push_config() {
  if (GetArenaForAllocation() == nullptr && _impl_.push_config_ != nullptr) {
    delete _impl_.push_config_;
  }
  _impl_.push_config_ = nullptr;
}
inline const ::google::pubsub::v1::PushConfig& ModifyPushConfigRequest::_internal_push_config() const {
  const ::google::pubsub::v1::PushConfig* p = _impl_.push_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::pubsub::v1::PushConfig&>(
      ::google::pubsub::v1::_PushConfig_default_instance_);
}
inline const ::google::pubsub::v1::PushConfig& ModifyPushConfigRequest::push_config() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ModifyPushConfigRequest.push_config)
  return _internal_push_config();
}
inline void ModifyPushConfigRequest::unsafe_arena_set_allocated_push_config(
    ::google::pubsub::v1::PushConfig* push_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.push_config_);
  }
  _impl_.push_config_ = push_config;
  if (push_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.ModifyPushConfigRequest.push_config)
}
inline ::google::pubsub::v1::PushConfig* ModifyPushConfigRequest::release_push_config() {
  
  ::google::pubsub::v1::PushConfig* temp = _impl_.push_config_;
  _impl_.push_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::pubsub::v1::PushConfig* ModifyPushConfigRequest::unsafe_arena_release_push_config() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ModifyPushConfigRequest.push_config)
  
  ::google::pubsub::v1::PushConfig* temp = _impl_.push_config_;
  _impl_.push_config_ = nullptr;
  return temp;
}
inline ::google::pubsub::v1::PushConfig* ModifyPushConfigRequest::_internal_mutable_push_config() {
  
  if (_impl_.push_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::pubsub::v1::PushConfig>(GetArenaForAllocation());
    _impl_.push_config_ = p;
  }
  return _impl_.push_config_;
}
inline ::google::pubsub::v1::PushConfig* ModifyPushConfigRequest::mutable_push_config() {
  ::google::pubsub::v1::PushConfig* _msg = _internal_mutable_push_config();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ModifyPushConfigRequest.push_config)
  return _msg;
}
inline void ModifyPushConfigRequest::set_allocated_push_config(::google::pubsub::v1::PushConfig* push_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.push_config_;
  }
  if (push_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(push_config);
    if (message_arena != submessage_arena) {
      push_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, push_config, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.push_config_ = push_config;
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ModifyPushConfigRequest.push_config)
}

// -------------------------------------------------------------------

// PullRequest

// string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void PullRequest::clear_subscription() {
  _impl_.subscription_.ClearToEmpty();
}
inline const std::string& PullRequest::subscription() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.PullRequest.subscription)
  return _internal_subscription();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PullRequest::set_subscription(ArgT0&& arg0, ArgT... args) {
 
 _impl_.subscription_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.PullRequest.subscription)
}
inline std::string* PullRequest::mutable_subscription() {
  std::string* _s = _internal_mutable_subscription();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.PullRequest.subscription)
  return _s;
}
inline const std::string& PullRequest::_internal_subscription() const {
  return _impl_.subscription_.Get();
}
inline void PullRequest::_internal_set_subscription(const std::string& value) {
  
  _impl_.subscription_.Set(value, GetArenaForAllocation());
}
inline std::string* PullRequest::_internal_mutable_subscription() {
  
  return _impl_.subscription_.Mutable(GetArenaForAllocation());
}
inline std::string* PullRequest::release_subscription() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.PullRequest.subscription)
  return _impl_.subscription_.Release();
}
inline void PullRequest::set_allocated_subscription(std::string* subscription) {
  if (subscription != nullptr) {
    
  } else {
    
  }
  _impl_.subscription_.SetAllocated(subscription, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.subscription_.IsDefault()) {
    _impl_.subscription_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.PullRequest.subscription)
}

// bool return_immediately = 2 [deprecated = true, (.google.api.field_behavior) = OPTIONAL];
inline void PullRequest::clear_return_immediately() {
  _impl_.return_immediately_ = false;
}
inline bool PullRequest::_internal_return_immediately() const {
  return _impl_.return_immediately_;
}
inline bool PullRequest::return_immediately() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.PullRequest.return_immediately)
  return _internal_return_immediately();
}
inline void PullRequest::_internal_set_return_immediately(bool value) {
  
  _impl_.return_immediately_ = value;
}
inline void PullRequest::set_return_immediately(bool value) {
  _internal_set_return_immediately(value);
  // @@protoc_insertion_point(field_set:google.pubsub.v1.PullRequest.return_immediately)
}

// int32 max_messages = 3 [(.google.api.field_behavior) = REQUIRED];
inline void PullRequest::clear_max_messages() {
  _impl_.max_messages_ = 0;
}
inline int32_t PullRequest::_internal_max_messages() const {
  return _impl_.max_messages_;
}
inline int32_t PullRequest::max_messages() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.PullRequest.max_messages)
  return _internal_max_messages();
}
inline void PullRequest::_internal_set_max_messages(int32_t value) {
  
  _impl_.max_messages_ = value;
}
inline void PullRequest::set_max_messages(int32_t value) {
  _internal_set_max_messages(value);
  // @@protoc_insertion_point(field_set:google.pubsub.v1.PullRequest.max_messages)
}

// -------------------------------------------------------------------

// PullResponse

// repeated .google.pubsub.v1.ReceivedMessage received_messages = 1;
inline int PullResponse::_internal_received_messages_size() const {
  return _impl_.received_messages_.size();
}
inline int PullResponse::received_messages_size() const {
  return _internal_received_messages_size();
}
inline void PullResponse::clear_received_messages() {
  _impl_.received_messages_.Clear();
}
inline ::google::pubsub::v1::ReceivedMessage* PullResponse::mutable_received_messages(int index) {
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.PullResponse.received_messages)
  return _impl_.received_messages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::pubsub::v1::ReceivedMessage >*
PullResponse::mutable_received_messages() {
  // @@protoc_insertion_point(field_mutable_list:google.pubsub.v1.PullResponse.received_messages)
  return &_impl_.received_messages_;
}
inline const ::google::pubsub::v1::ReceivedMessage& PullResponse::_internal_received_messages(int index) const {
  return _impl_.received_messages_.Get(index);
}
inline const ::google::pubsub::v1::ReceivedMessage& PullResponse::received_messages(int index) const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.PullResponse.received_messages)
  return _internal_received_messages(index);
}
inline ::google::pubsub::v1::ReceivedMessage* PullResponse::_internal_add_received_messages() {
  return _impl_.received_messages_.Add();
}
inline ::google::pubsub::v1::ReceivedMessage* PullResponse::add_received_messages() {
  ::google::pubsub::v1::ReceivedMessage* _add = _internal_add_received_messages();
  // @@protoc_insertion_point(field_add:google.pubsub.v1.PullResponse.received_messages)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::pubsub::v1::ReceivedMessage >&
PullResponse::received_messages() const {
  // @@protoc_insertion_point(field_list:google.pubsub.v1.PullResponse.received_messages)
  return _impl_.received_messages_;
}

// -------------------------------------------------------------------

// ModifyAckDeadlineRequest

// string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ModifyAckDeadlineRequest::clear_subscription() {
  _impl_.subscription_.ClearToEmpty();
}
inline const std::string& ModifyAckDeadlineRequest::subscription() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ModifyAckDeadlineRequest.subscription)
  return _internal_subscription();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModifyAckDeadlineRequest::set_subscription(ArgT0&& arg0, ArgT... args) {
 
 _impl_.subscription_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ModifyAckDeadlineRequest.subscription)
}
inline std::string* ModifyAckDeadlineRequest::mutable_subscription() {
  std::string* _s = _internal_mutable_subscription();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ModifyAckDeadlineRequest.subscription)
  return _s;
}
inline const std::string& ModifyAckDeadlineRequest::_internal_subscription() const {
  return _impl_.subscription_.Get();
}
inline void ModifyAckDeadlineRequest::_internal_set_subscription(const std::string& value) {
  
  _impl_.subscription_.Set(value, GetArenaForAllocation());
}
inline std::string* ModifyAckDeadlineRequest::_internal_mutable_subscription() {
  
  return _impl_.subscription_.Mutable(GetArenaForAllocation());
}
inline std::string* ModifyAckDeadlineRequest::release_subscription() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ModifyAckDeadlineRequest.subscription)
  return _impl_.subscription_.Release();
}
inline void ModifyAckDeadlineRequest::set_allocated_subscription(std::string* subscription) {
  if (subscription != nullptr) {
    
  } else {
    
  }
  _impl_.subscription_.SetAllocated(subscription, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.subscription_.IsDefault()) {
    _impl_.subscription_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ModifyAckDeadlineRequest.subscription)
}

// repeated string ack_ids = 4 [(.google.api.field_behavior) = REQUIRED];
inline int ModifyAckDeadlineRequest::_internal_ack_ids_size() const {
  return _impl_.ack_ids_.size();
}
inline int ModifyAckDeadlineRequest::ack_ids_size() const {
  return _internal_ack_ids_size();
}
inline void ModifyAckDeadlineRequest::clear_ack_ids() {
  _impl_.ack_ids_.Clear();
}
inline std::string* ModifyAckDeadlineRequest::add_ack_ids() {
  std::string* _s = _internal_add_ack_ids();
  // @@protoc_insertion_point(field_add_mutable:google.pubsub.v1.ModifyAckDeadlineRequest.ack_ids)
  return _s;
}
inline const std::string& ModifyAckDeadlineRequest::_internal_ack_ids(int index) const {
  return _impl_.ack_ids_.Get(index);
}
inline const std::string& ModifyAckDeadlineRequest::ack_ids(int index) const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ModifyAckDeadlineRequest.ack_ids)
  return _internal_ack_ids(index);
}
inline std::string* ModifyAckDeadlineRequest::mutable_ack_ids(int index) {
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ModifyAckDeadlineRequest.ack_ids)
  return _impl_.ack_ids_.Mutable(index);
}
inline void ModifyAckDeadlineRequest::set_ack_ids(int index, const std::string& value) {
  _impl_.ack_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ModifyAckDeadlineRequest.ack_ids)
}
inline void ModifyAckDeadlineRequest::set_ack_ids(int index, std::string&& value) {
  _impl_.ack_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ModifyAckDeadlineRequest.ack_ids)
}
inline void ModifyAckDeadlineRequest::set_ack_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.ack_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.ModifyAckDeadlineRequest.ack_ids)
}
inline void ModifyAckDeadlineRequest::set_ack_ids(int index, const char* value, size_t size) {
  _impl_.ack_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.ModifyAckDeadlineRequest.ack_ids)
}
inline std::string* ModifyAckDeadlineRequest::_internal_add_ack_ids() {
  return _impl_.ack_ids_.Add();
}
inline void ModifyAckDeadlineRequest::add_ack_ids(const std::string& value) {
  _impl_.ack_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.pubsub.v1.ModifyAckDeadlineRequest.ack_ids)
}
inline void ModifyAckDeadlineRequest::add_ack_ids(std::string&& value) {
  _impl_.ack_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.pubsub.v1.ModifyAckDeadlineRequest.ack_ids)
}
inline void ModifyAckDeadlineRequest::add_ack_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.ack_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.pubsub.v1.ModifyAckDeadlineRequest.ack_ids)
}
inline void ModifyAckDeadlineRequest::add_ack_ids(const char* value, size_t size) {
  _impl_.ack_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.pubsub.v1.ModifyAckDeadlineRequest.ack_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ModifyAckDeadlineRequest::ack_ids() const {
  // @@protoc_insertion_point(field_list:google.pubsub.v1.ModifyAckDeadlineRequest.ack_ids)
  return _impl_.ack_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ModifyAckDeadlineRequest::mutable_ack_ids() {
  // @@protoc_insertion_point(field_mutable_list:google.pubsub.v1.ModifyAckDeadlineRequest.ack_ids)
  return &_impl_.ack_ids_;
}

// int32 ack_deadline_seconds = 3 [(.google.api.field_behavior) = REQUIRED];
inline void ModifyAckDeadlineRequest::clear_ack_deadline_seconds() {
  _impl_.ack_deadline_seconds_ = 0;
}
inline int32_t ModifyAckDeadlineRequest::_internal_ack_deadline_seconds() const {
  return _impl_.ack_deadline_seconds_;
}
inline int32_t ModifyAckDeadlineRequest::ack_deadline_seconds() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ModifyAckDeadlineRequest.ack_deadline_seconds)
  return _internal_ack_deadline_seconds();
}
inline void ModifyAckDeadlineRequest::_internal_set_ack_deadline_seconds(int32_t value) {
  
  _impl_.ack_deadline_seconds_ = value;
}
inline void ModifyAckDeadlineRequest::set_ack_deadline_seconds(int32_t value) {
  _internal_set_ack_deadline_seconds(value);
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ModifyAckDeadlineRequest.ack_deadline_seconds)
}

// -------------------------------------------------------------------

// AcknowledgeRequest

// string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void AcknowledgeRequest::clear_subscription() {
  _impl_.subscription_.ClearToEmpty();
}
inline const std::string& AcknowledgeRequest::subscription() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.AcknowledgeRequest.subscription)
  return _internal_subscription();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AcknowledgeRequest::set_subscription(ArgT0&& arg0, ArgT... args) {
 
 _impl_.subscription_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.AcknowledgeRequest.subscription)
}
inline std::string* AcknowledgeRequest::mutable_subscription() {
  std::string* _s = _internal_mutable_subscription();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.AcknowledgeRequest.subscription)
  return _s;
}
inline const std::string& AcknowledgeRequest::_internal_subscription() const {
  return _impl_.subscription_.Get();
}
inline void AcknowledgeRequest::_internal_set_subscription(const std::string& value) {
  
  _impl_.subscription_.Set(value, GetArenaForAllocation());
}
inline std::string* AcknowledgeRequest::_internal_mutable_subscription() {
  
  return _impl_.subscription_.Mutable(GetArenaForAllocation());
}
inline std::string* AcknowledgeRequest::release_subscription() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.AcknowledgeRequest.subscription)
  return _impl_.subscription_.Release();
}
inline void AcknowledgeRequest::set_allocated_subscription(std::string* subscription) {
  if (subscription != nullptr) {
    
  } else {
    
  }
  _impl_.subscription_.SetAllocated(subscription, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.subscription_.IsDefault()) {
    _impl_.subscription_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.AcknowledgeRequest.subscription)
}

// repeated string ack_ids = 2 [(.google.api.field_behavior) = REQUIRED];
inline int AcknowledgeRequest::_internal_ack_ids_size() const {
  return _impl_.ack_ids_.size();
}
inline int AcknowledgeRequest::ack_ids_size() const {
  return _internal_ack_ids_size();
}
inline void AcknowledgeRequest::clear_ack_ids() {
  _impl_.ack_ids_.Clear();
}
inline std::string* AcknowledgeRequest::add_ack_ids() {
  std::string* _s = _internal_add_ack_ids();
  // @@protoc_insertion_point(field_add_mutable:google.pubsub.v1.AcknowledgeRequest.ack_ids)
  return _s;
}
inline const std::string& AcknowledgeRequest::_internal_ack_ids(int index) const {
  return _impl_.ack_ids_.Get(index);
}
inline const std::string& AcknowledgeRequest::ack_ids(int index) const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.AcknowledgeRequest.ack_ids)
  return _internal_ack_ids(index);
}
inline std::string* AcknowledgeRequest::mutable_ack_ids(int index) {
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.AcknowledgeRequest.ack_ids)
  return _impl_.ack_ids_.Mutable(index);
}
inline void AcknowledgeRequest::set_ack_ids(int index, const std::string& value) {
  _impl_.ack_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.pubsub.v1.AcknowledgeRequest.ack_ids)
}
inline void AcknowledgeRequest::set_ack_ids(int index, std::string&& value) {
  _impl_.ack_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.pubsub.v1.AcknowledgeRequest.ack_ids)
}
inline void AcknowledgeRequest::set_ack_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.ack_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.AcknowledgeRequest.ack_ids)
}
inline void AcknowledgeRequest::set_ack_ids(int index, const char* value, size_t size) {
  _impl_.ack_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.AcknowledgeRequest.ack_ids)
}
inline std::string* AcknowledgeRequest::_internal_add_ack_ids() {
  return _impl_.ack_ids_.Add();
}
inline void AcknowledgeRequest::add_ack_ids(const std::string& value) {
  _impl_.ack_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.pubsub.v1.AcknowledgeRequest.ack_ids)
}
inline void AcknowledgeRequest::add_ack_ids(std::string&& value) {
  _impl_.ack_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.pubsub.v1.AcknowledgeRequest.ack_ids)
}
inline void AcknowledgeRequest::add_ack_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.ack_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.pubsub.v1.AcknowledgeRequest.ack_ids)
}
inline void AcknowledgeRequest::add_ack_ids(const char* value, size_t size) {
  _impl_.ack_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.pubsub.v1.AcknowledgeRequest.ack_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AcknowledgeRequest::ack_ids() const {
  // @@protoc_insertion_point(field_list:google.pubsub.v1.AcknowledgeRequest.ack_ids)
  return _impl_.ack_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AcknowledgeRequest::mutable_ack_ids() {
  // @@protoc_insertion_point(field_mutable_list:google.pubsub.v1.AcknowledgeRequest.ack_ids)
  return &_impl_.ack_ids_;
}

// -------------------------------------------------------------------

// StreamingPullRequest

// string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void StreamingPullRequest::clear_subscription() {
  _impl_.subscription_.ClearToEmpty();
}
inline const std::string& StreamingPullRequest::subscription() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.StreamingPullRequest.subscription)
  return _internal_subscription();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamingPullRequest::set_subscription(ArgT0&& arg0, ArgT... args) {
 
 _impl_.subscription_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.StreamingPullRequest.subscription)
}
inline std::string* StreamingPullRequest::mutable_subscription() {
  std::string* _s = _internal_mutable_subscription();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.StreamingPullRequest.subscription)
  return _s;
}
inline const std::string& StreamingPullRequest::_internal_subscription() const {
  return _impl_.subscription_.Get();
}
inline void StreamingPullRequest::_internal_set_subscription(const std::string& value) {
  
  _impl_.subscription_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamingPullRequest::_internal_mutable_subscription() {
  
  return _impl_.subscription_.Mutable(GetArenaForAllocation());
}
inline std::string* StreamingPullRequest::release_subscription() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.StreamingPullRequest.subscription)
  return _impl_.subscription_.Release();
}
inline void StreamingPullRequest::set_allocated_subscription(std::string* subscription) {
  if (subscription != nullptr) {
    
  } else {
    
  }
  _impl_.subscription_.SetAllocated(subscription, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.subscription_.IsDefault()) {
    _impl_.subscription_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.StreamingPullRequest.subscription)
}

// repeated string ack_ids = 2;
inline int StreamingPullRequest::_internal_ack_ids_size() const {
  return _impl_.ack_ids_.size();
}
inline int StreamingPullRequest::ack_ids_size() const {
  return _internal_ack_ids_size();
}
inline void StreamingPullRequest::clear_ack_ids() {
  _impl_.ack_ids_.Clear();
}
inline std::string* StreamingPullRequest::add_ack_ids() {
  std::string* _s = _internal_add_ack_ids();
  // @@protoc_insertion_point(field_add_mutable:google.pubsub.v1.StreamingPullRequest.ack_ids)
  return _s;
}
inline const std::string& StreamingPullRequest::_internal_ack_ids(int index) const {
  return _impl_.ack_ids_.Get(index);
}
inline const std::string& StreamingPullRequest::ack_ids(int index) const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.StreamingPullRequest.ack_ids)
  return _internal_ack_ids(index);
}
inline std::string* StreamingPullRequest::mutable_ack_ids(int index) {
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.StreamingPullRequest.ack_ids)
  return _impl_.ack_ids_.Mutable(index);
}
inline void StreamingPullRequest::set_ack_ids(int index, const std::string& value) {
  _impl_.ack_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.pubsub.v1.StreamingPullRequest.ack_ids)
}
inline void StreamingPullRequest::set_ack_ids(int index, std::string&& value) {
  _impl_.ack_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.pubsub.v1.StreamingPullRequest.ack_ids)
}
inline void StreamingPullRequest::set_ack_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.ack_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.StreamingPullRequest.ack_ids)
}
inline void StreamingPullRequest::set_ack_ids(int index, const char* value, size_t size) {
  _impl_.ack_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.StreamingPullRequest.ack_ids)
}
inline std::string* StreamingPullRequest::_internal_add_ack_ids() {
  return _impl_.ack_ids_.Add();
}
inline void StreamingPullRequest::add_ack_ids(const std::string& value) {
  _impl_.ack_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.pubsub.v1.StreamingPullRequest.ack_ids)
}
inline void StreamingPullRequest::add_ack_ids(std::string&& value) {
  _impl_.ack_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.pubsub.v1.StreamingPullRequest.ack_ids)
}
inline void StreamingPullRequest::add_ack_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.ack_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.pubsub.v1.StreamingPullRequest.ack_ids)
}
inline void StreamingPullRequest::add_ack_ids(const char* value, size_t size) {
  _impl_.ack_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.pubsub.v1.StreamingPullRequest.ack_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StreamingPullRequest::ack_ids() const {
  // @@protoc_insertion_point(field_list:google.pubsub.v1.StreamingPullRequest.ack_ids)
  return _impl_.ack_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StreamingPullRequest::mutable_ack_ids() {
  // @@protoc_insertion_point(field_mutable_list:google.pubsub.v1.StreamingPullRequest.ack_ids)
  return &_impl_.ack_ids_;
}

// repeated int32 modify_deadline_seconds = 3;
inline int StreamingPullRequest::_internal_modify_deadline_seconds_size() const {
  return _impl_.modify_deadline_seconds_.size();
}
inline int StreamingPullRequest::modify_deadline_seconds_size() const {
  return _internal_modify_deadline_seconds_size();
}
inline void StreamingPullRequest::clear_modify_deadline_seconds() {
  _impl_.modify_deadline_seconds_.Clear();
}
inline int32_t StreamingPullRequest::_internal_modify_deadline_seconds(int index) const {
  return _impl_.modify_deadline_seconds_.Get(index);
}
inline int32_t StreamingPullRequest::modify_deadline_seconds(int index) const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.StreamingPullRequest.modify_deadline_seconds)
  return _internal_modify_deadline_seconds(index);
}
inline void StreamingPullRequest::set_modify_deadline_seconds(int index, int32_t value) {
  _impl_.modify_deadline_seconds_.Set(index, value);
  // @@protoc_insertion_point(field_set:google.pubsub.v1.StreamingPullRequest.modify_deadline_seconds)
}
inline void StreamingPullRequest::_internal_add_modify_deadline_seconds(int32_t value) {
  _impl_.modify_deadline_seconds_.Add(value);
}
inline void StreamingPullRequest::add_modify_deadline_seconds(int32_t value) {
  _internal_add_modify_deadline_seconds(value);
  // @@protoc_insertion_point(field_add:google.pubsub.v1.StreamingPullRequest.modify_deadline_seconds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
StreamingPullRequest::_internal_modify_deadline_seconds() const {
  return _impl_.modify_deadline_seconds_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
StreamingPullRequest::modify_deadline_seconds() const {
  // @@protoc_insertion_point(field_list:google.pubsub.v1.StreamingPullRequest.modify_deadline_seconds)
  return _internal_modify_deadline_seconds();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
StreamingPullRequest::_internal_mutable_modify_deadline_seconds() {
  return &_impl_.modify_deadline_seconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
StreamingPullRequest::mutable_modify_deadline_seconds() {
  // @@protoc_insertion_point(field_mutable_list:google.pubsub.v1.StreamingPullRequest.modify_deadline_seconds)
  return _internal_mutable_modify_deadline_seconds();
}

// repeated string modify_deadline_ack_ids = 4;
inline int StreamingPullRequest::_internal_modify_deadline_ack_ids_size() const {
  return _impl_.modify_deadline_ack_ids_.size();
}
inline int StreamingPullRequest::modify_deadline_ack_ids_size() const {
  return _internal_modify_deadline_ack_ids_size();
}
inline void StreamingPullRequest::clear_modify_deadline_ack_ids() {
  _impl_.modify_deadline_ack_ids_.Clear();
}
inline std::string* StreamingPullRequest::add_modify_deadline_ack_ids() {
  std::string* _s = _internal_add_modify_deadline_ack_ids();
  // @@protoc_insertion_point(field_add_mutable:google.pubsub.v1.StreamingPullRequest.modify_deadline_ack_ids)
  return _s;
}
inline const std::string& StreamingPullRequest::_internal_modify_deadline_ack_ids(int index) const {
  return _impl_.modify_deadline_ack_ids_.Get(index);
}
inline const std::string& StreamingPullRequest::modify_deadline_ack_ids(int index) const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.StreamingPullRequest.modify_deadline_ack_ids)
  return _internal_modify_deadline_ack_ids(index);
}
inline std::string* StreamingPullRequest::mutable_modify_deadline_ack_ids(int index) {
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.StreamingPullRequest.modify_deadline_ack_ids)
  return _impl_.modify_deadline_ack_ids_.Mutable(index);
}
inline void StreamingPullRequest::set_modify_deadline_ack_ids(int index, const std::string& value) {
  _impl_.modify_deadline_ack_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.pubsub.v1.StreamingPullRequest.modify_deadline_ack_ids)
}
inline void StreamingPullRequest::set_modify_deadline_ack_ids(int index, std::string&& value) {
  _impl_.modify_deadline_ack_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.pubsub.v1.StreamingPullRequest.modify_deadline_ack_ids)
}
inline void StreamingPullRequest::set_modify_deadline_ack_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.modify_deadline_ack_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.StreamingPullRequest.modify_deadline_ack_ids)
}
inline void StreamingPullRequest::set_modify_deadline_ack_ids(int index, const char* value, size_t size) {
  _impl_.modify_deadline_ack_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.StreamingPullRequest.modify_deadline_ack_ids)
}
inline std::string* StreamingPullRequest::_internal_add_modify_deadline_ack_ids() {
  return _impl_.modify_deadline_ack_ids_.Add();
}
inline void StreamingPullRequest::add_modify_deadline_ack_ids(const std::string& value) {
  _impl_.modify_deadline_ack_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.pubsub.v1.StreamingPullRequest.modify_deadline_ack_ids)
}
inline void StreamingPullRequest::add_modify_deadline_ack_ids(std::string&& value) {
  _impl_.modify_deadline_ack_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.pubsub.v1.StreamingPullRequest.modify_deadline_ack_ids)
}
inline void StreamingPullRequest::add_modify_deadline_ack_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.modify_deadline_ack_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.pubsub.v1.StreamingPullRequest.modify_deadline_ack_ids)
}
inline void StreamingPullRequest::add_modify_deadline_ack_ids(const char* value, size_t size) {
  _impl_.modify_deadline_ack_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.pubsub.v1.StreamingPullRequest.modify_deadline_ack_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StreamingPullRequest::modify_deadline_ack_ids() const {
  // @@protoc_insertion_point(field_list:google.pubsub.v1.StreamingPullRequest.modify_deadline_ack_ids)
  return _impl_.modify_deadline_ack_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StreamingPullRequest::mutable_modify_deadline_ack_ids() {
  // @@protoc_insertion_point(field_mutable_list:google.pubsub.v1.StreamingPullRequest.modify_deadline_ack_ids)
  return &_impl_.modify_deadline_ack_ids_;
}

// int32 stream_ack_deadline_seconds = 5 [(.google.api.field_behavior) = REQUIRED];
inline void StreamingPullRequest::clear_stream_ack_deadline_seconds() {
  _impl_.stream_ack_deadline_seconds_ = 0;
}
inline int32_t StreamingPullRequest::_internal_stream_ack_deadline_seconds() const {
  return _impl_.stream_ack_deadline_seconds_;
}
inline int32_t StreamingPullRequest::stream_ack_deadline_seconds() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.StreamingPullRequest.stream_ack_deadline_seconds)
  return _internal_stream_ack_deadline_seconds();
}
inline void StreamingPullRequest::_internal_set_stream_ack_deadline_seconds(int32_t value) {
  
  _impl_.stream_ack_deadline_seconds_ = value;
}
inline void StreamingPullRequest::set_stream_ack_deadline_seconds(int32_t value) {
  _internal_set_stream_ack_deadline_seconds(value);
  // @@protoc_insertion_point(field_set:google.pubsub.v1.StreamingPullRequest.stream_ack_deadline_seconds)
}

// string client_id = 6;
inline void StreamingPullRequest::clear_client_id() {
  _impl_.client_id_.ClearToEmpty();
}
inline const std::string& StreamingPullRequest::client_id() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.StreamingPullRequest.client_id)
  return _internal_client_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamingPullRequest::set_client_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.client_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.StreamingPullRequest.client_id)
}
inline std::string* StreamingPullRequest::mutable_client_id() {
  std::string* _s = _internal_mutable_client_id();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.StreamingPullRequest.client_id)
  return _s;
}
inline const std::string& StreamingPullRequest::_internal_client_id() const {
  return _impl_.client_id_.Get();
}
inline void StreamingPullRequest::_internal_set_client_id(const std::string& value) {
  
  _impl_.client_id_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamingPullRequest::_internal_mutable_client_id() {
  
  return _impl_.client_id_.Mutable(GetArenaForAllocation());
}
inline std::string* StreamingPullRequest::release_client_id() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.StreamingPullRequest.client_id)
  return _impl_.client_id_.Release();
}
inline void StreamingPullRequest::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  _impl_.client_id_.SetAllocated(client_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.client_id_.IsDefault()) {
    _impl_.client_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.StreamingPullRequest.client_id)
}

// int64 max_outstanding_messages = 7;
inline void StreamingPullRequest::clear_max_outstanding_messages() {
  _impl_.max_outstanding_messages_ = int64_t{0};
}
inline int64_t StreamingPullRequest::_internal_max_outstanding_messages() const {
  return _impl_.max_outstanding_messages_;
}
inline int64_t StreamingPullRequest::max_outstanding_messages() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.StreamingPullRequest.max_outstanding_messages)
  return _internal_max_outstanding_messages();
}
inline void StreamingPullRequest::_internal_set_max_outstanding_messages(int64_t value) {
  
  _impl_.max_outstanding_messages_ = value;
}
inline void StreamingPullRequest::set_max_outstanding_messages(int64_t value) {
  _internal_set_max_outstanding_messages(value);
  // @@protoc_insertion_point(field_set:google.pubsub.v1.StreamingPullRequest.max_outstanding_messages)
}

// int64 max_outstanding_bytes = 8;
inline void StreamingPullRequest::clear_max_outstanding_bytes() {
  _impl_.max_outstanding_bytes_ = int64_t{0};
}
inline int64_t StreamingPullRequest::_internal_max_outstanding_bytes() const {
  return _impl_.max_outstanding_bytes_;
}
inline int64_t StreamingPullRequest::max_outstanding_bytes() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.StreamingPullRequest.max_outstanding_bytes)
  return _internal_max_outstanding_bytes();
}
inline void StreamingPullRequest::_internal_set_max_outstanding_bytes(int64_t value) {
  
  _impl_.max_outstanding_bytes_ = value;
}
inline void StreamingPullRequest::set_max_outstanding_bytes(int64_t value) {
  _internal_set_max_outstanding_bytes(value);
  // @@protoc_insertion_point(field_set:google.pubsub.v1.StreamingPullRequest.max_outstanding_bytes)
}

// -------------------------------------------------------------------

// StreamingPullResponse_AcknowledgeConfirmation

// repeated string ack_ids = 1 [ctype = CORD];
inline int StreamingPullResponse_AcknowledgeConfirmation::_internal_ack_ids_size() const {
  return _impl_.ack_ids_.size();
}
inline int StreamingPullResponse_AcknowledgeConfirmation::ack_ids_size() const {
  return _internal_ack_ids_size();
}
inline void StreamingPullResponse_AcknowledgeConfirmation::clear_ack_ids() {
  _impl_.ack_ids_.Clear();
}
inline std::string* StreamingPullResponse_AcknowledgeConfirmation::add_ack_ids() {
  std::string* _s = _internal_add_ack_ids();
  // @@protoc_insertion_point(field_add_mutable:google.pubsub.v1.StreamingPullResponse.AcknowledgeConfirmation.ack_ids)
  return _s;
}
inline const std::string& StreamingPullResponse_AcknowledgeConfirmation::_internal_ack_ids(int index) const {
  return _impl_.ack_ids_.Get(index);
}
inline const std::string& StreamingPullResponse_AcknowledgeConfirmation::ack_ids(int index) const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.StreamingPullResponse.AcknowledgeConfirmation.ack_ids)
  return _internal_ack_ids(index);
}
inline std::string* StreamingPullResponse_AcknowledgeConfirmation::mutable_ack_ids(int index) {
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.StreamingPullResponse.AcknowledgeConfirmation.ack_ids)
  return _impl_.ack_ids_.Mutable(index);
}
inline void StreamingPullResponse_AcknowledgeConfirmation::set_ack_ids(int index, const std::string& value) {
  _impl_.ack_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.pubsub.v1.StreamingPullResponse.AcknowledgeConfirmation.ack_ids)
}
inline void StreamingPullResponse_AcknowledgeConfirmation::set_ack_ids(int index, std::string&& value) {
  _impl_.ack_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.pubsub.v1.StreamingPullResponse.AcknowledgeConfirmation.ack_ids)
}
inline void StreamingPullResponse_AcknowledgeConfirmation::set_ack_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.ack_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.StreamingPullResponse.AcknowledgeConfirmation.ack_ids)
}
inline void StreamingPullResponse_AcknowledgeConfirmation::set_ack_ids(int index, const char* value, size_t size) {
  _impl_.ack_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.StreamingPullResponse.AcknowledgeConfirmation.ack_ids)
}
inline std::string* StreamingPullResponse_AcknowledgeConfirmation::_internal_add_ack_ids() {
  return _impl_.ack_ids_.Add();
}
inline void StreamingPullResponse_AcknowledgeConfirmation::add_ack_ids(const std::string& value) {
  _impl_.ack_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.pubsub.v1.StreamingPullResponse.AcknowledgeConfirmation.ack_ids)
}
inline void StreamingPullResponse_AcknowledgeConfirmation::add_ack_ids(std::string&& value) {
  _impl_.ack_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.pubsub.v1.StreamingPullResponse.AcknowledgeConfirmation.ack_ids)
}
inline void StreamingPullResponse_AcknowledgeConfirmation::add_ack_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.ack_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.pubsub.v1.StreamingPullResponse.AcknowledgeConfirmation.ack_ids)
}
inline void StreamingPullResponse_AcknowledgeConfirmation::add_ack_ids(const char* value, size_t size) {
  _impl_.ack_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.pubsub.v1.StreamingPullResponse.AcknowledgeConfirmation.ack_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StreamingPullResponse_AcknowledgeConfirmation::ack_ids() const {
  // @@protoc_insertion_point(field_list:google.pubsub.v1.StreamingPullResponse.AcknowledgeConfirmation.ack_ids)
  return _impl_.ack_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StreamingPullResponse_AcknowledgeConfirmation::mutable_ack_ids() {
  // @@protoc_insertion_point(field_mutable_list:google.pubsub.v1.StreamingPullResponse.AcknowledgeConfirmation.ack_ids)
  return &_impl_.ack_ids_;
}

// repeated string invalid_ack_ids = 2 [ctype = CORD];
inline int StreamingPullResponse_AcknowledgeConfirmation::_internal_invalid_ack_ids_size() const {
  return _impl_.invalid_ack_ids_.size();
}
inline int StreamingPullResponse_AcknowledgeConfirmation::invalid_ack_ids_size() const {
  return _internal_invalid_ack_ids_size();
}
inline void StreamingPullResponse_AcknowledgeConfirmation::clear_invalid_ack_ids() {
  _impl_.invalid_ack_ids_.Clear();
}
inline std::string* StreamingPullResponse_AcknowledgeConfirmation::add_invalid_ack_ids() {
  std::string* _s = _internal_add_invalid_ack_ids();
  // @@protoc_insertion_point(field_add_mutable:google.pubsub.v1.StreamingPullResponse.AcknowledgeConfirmation.invalid_ack_ids)
  return _s;
}
inline const std::string& StreamingPullResponse_AcknowledgeConfirmation::_internal_invalid_ack_ids(int index) const {
  return _impl_.invalid_ack_ids_.Get(index);
}
inline const std::string& StreamingPullResponse_AcknowledgeConfirmation::invalid_ack_ids(int index) const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.StreamingPullResponse.AcknowledgeConfirmation.invalid_ack_ids)
  return _internal_invalid_ack_ids(index);
}
inline std::string* StreamingPullResponse_AcknowledgeConfirmation::mutable_invalid_ack_ids(int index) {
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.StreamingPullResponse.AcknowledgeConfirmation.invalid_ack_ids)
  return _impl_.invalid_ack_ids_.Mutable(index);
}
inline void StreamingPullResponse_AcknowledgeConfirmation::set_invalid_ack_ids(int index, const std::string& value) {
  _impl_.invalid_ack_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.pubsub.v1.StreamingPullResponse.AcknowledgeConfirmation.invalid_ack_ids)
}
inline void StreamingPullResponse_AcknowledgeConfirmation::set_invalid_ack_ids(int index, std::string&& value) {
  _impl_.invalid_ack_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.pubsub.v1.StreamingPullResponse.AcknowledgeConfirmation.invalid_ack_ids)
}
inline void StreamingPullResponse_AcknowledgeConfirmation::set_invalid_ack_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.invalid_ack_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.StreamingPullResponse.AcknowledgeConfirmation.invalid_ack_ids)
}
inline void StreamingPullResponse_AcknowledgeConfirmation::set_invalid_ack_ids(int index, const char* value, size_t size) {
  _impl_.invalid_ack_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.StreamingPullResponse.AcknowledgeConfirmation.invalid_ack_ids)
}
inline std::string* StreamingPullResponse_AcknowledgeConfirmation::_internal_add_invalid_ack_ids() {
  return _impl_.invalid_ack_ids_.Add();
}
inline void StreamingPullResponse_AcknowledgeConfirmation::add_invalid_ack_ids(const std::string& value) {
  _impl_.invalid_ack_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.pubsub.v1.StreamingPullResponse.AcknowledgeConfirmation.invalid_ack_ids)
}
inline void StreamingPullResponse_AcknowledgeConfirmation::add_invalid_ack_ids(std::string&& value) {
  _impl_.invalid_ack_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.pubsub.v1.StreamingPullResponse.AcknowledgeConfirmation.invalid_ack_ids)
}
inline void StreamingPullResponse_AcknowledgeConfirmation::add_invalid_ack_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.invalid_ack_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.pubsub.v1.StreamingPullResponse.AcknowledgeConfirmation.invalid_ack_ids)
}
inline void StreamingPullResponse_AcknowledgeConfirmation::add_invalid_ack_ids(const char* value, size_t size) {
  _impl_.invalid_ack_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.pubsub.v1.StreamingPullResponse.AcknowledgeConfirmation.invalid_ack_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StreamingPullResponse_AcknowledgeConfirmation::invalid_ack_ids() const {
  // @@protoc_insertion_point(field_list:google.pubsub.v1.StreamingPullResponse.AcknowledgeConfirmation.invalid_ack_ids)
  return _impl_.invalid_ack_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StreamingPullResponse_AcknowledgeConfirmation::mutable_invalid_ack_ids() {
  // @@protoc_insertion_point(field_mutable_list:google.pubsub.v1.StreamingPullResponse.AcknowledgeConfirmation.invalid_ack_ids)
  return &_impl_.invalid_ack_ids_;
}

// repeated string unordered_ack_ids = 3 [ctype = CORD];
inline int StreamingPullResponse_AcknowledgeConfirmation::_internal_unordered_ack_ids_size() const {
  return _impl_.unordered_ack_ids_.size();
}
inline int StreamingPullResponse_AcknowledgeConfirmation::unordered_ack_ids_size() const {
  return _internal_unordered_ack_ids_size();
}
inline void StreamingPullResponse_AcknowledgeConfirmation::clear_unordered_ack_ids() {
  _impl_.unordered_ack_ids_.Clear();
}
inline std::string* StreamingPullResponse_AcknowledgeConfirmation::add_unordered_ack_ids() {
  std::string* _s = _internal_add_unordered_ack_ids();
  // @@protoc_insertion_point(field_add_mutable:google.pubsub.v1.StreamingPullResponse.AcknowledgeConfirmation.unordered_ack_ids)
  return _s;
}
inline const std::string& StreamingPullResponse_AcknowledgeConfirmation::_internal_unordered_ack_ids(int index) const {
  return _impl_.unordered_ack_ids_.Get(index);
}
inline const std::string& StreamingPullResponse_AcknowledgeConfirmation::unordered_ack_ids(int index) const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.StreamingPullResponse.AcknowledgeConfirmation.unordered_ack_ids)
  return _internal_unordered_ack_ids(index);
}
inline std::string* StreamingPullResponse_AcknowledgeConfirmation::mutable_unordered_ack_ids(int index) {
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.StreamingPullResponse.AcknowledgeConfirmation.unordered_ack_ids)
  return _impl_.unordered_ack_ids_.Mutable(index);
}
inline void StreamingPullResponse_AcknowledgeConfirmation::set_unordered_ack_ids(int index, const std::string& value) {
  _impl_.unordered_ack_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.pubsub.v1.StreamingPullResponse.AcknowledgeConfirmation.unordered_ack_ids)
}
inline void StreamingPullResponse_AcknowledgeConfirmation::set_unordered_ack_ids(int index, std::string&& value) {
  _impl_.unordered_ack_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.pubsub.v1.StreamingPullResponse.AcknowledgeConfirmation.unordered_ack_ids)
}
inline void StreamingPullResponse_AcknowledgeConfirmation::set_unordered_ack_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.unordered_ack_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.StreamingPullResponse.AcknowledgeConfirmation.unordered_ack_ids)
}
inline void StreamingPullResponse_AcknowledgeConfirmation::set_unordered_ack_ids(int index, const char* value, size_t size) {
  _impl_.unordered_ack_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.StreamingPullResponse.AcknowledgeConfirmation.unordered_ack_ids)
}
inline std::string* StreamingPullResponse_AcknowledgeConfirmation::_internal_add_unordered_ack_ids() {
  return _impl_.unordered_ack_ids_.Add();
}
inline void StreamingPullResponse_AcknowledgeConfirmation::add_unordered_ack_ids(const std::string& value) {
  _impl_.unordered_ack_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.pubsub.v1.StreamingPullResponse.AcknowledgeConfirmation.unordered_ack_ids)
}
inline void StreamingPullResponse_AcknowledgeConfirmation::add_unordered_ack_ids(std::string&& value) {
  _impl_.unordered_ack_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.pubsub.v1.StreamingPullResponse.AcknowledgeConfirmation.unordered_ack_ids)
}
inline void StreamingPullResponse_AcknowledgeConfirmation::add_unordered_ack_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.unordered_ack_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.pubsub.v1.StreamingPullResponse.AcknowledgeConfirmation.unordered_ack_ids)
}
inline void StreamingPullResponse_AcknowledgeConfirmation::add_unordered_ack_ids(const char* value, size_t size) {
  _impl_.unordered_ack_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.pubsub.v1.StreamingPullResponse.AcknowledgeConfirmation.unordered_ack_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StreamingPullResponse_AcknowledgeConfirmation::unordered_ack_ids() const {
  // @@protoc_insertion_point(field_list:google.pubsub.v1.StreamingPullResponse.AcknowledgeConfirmation.unordered_ack_ids)
  return _impl_.unordered_ack_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StreamingPullResponse_AcknowledgeConfirmation::mutable_unordered_ack_ids() {
  // @@protoc_insertion_point(field_mutable_list:google.pubsub.v1.StreamingPullResponse.AcknowledgeConfirmation.unordered_ack_ids)
  return &_impl_.unordered_ack_ids_;
}

// -------------------------------------------------------------------

// StreamingPullResponse_ModifyAckDeadlineConfirmation

// repeated string ack_ids = 1 [ctype = CORD];
inline int StreamingPullResponse_ModifyAckDeadlineConfirmation::_internal_ack_ids_size() const {
  return _impl_.ack_ids_.size();
}
inline int StreamingPullResponse_ModifyAckDeadlineConfirmation::ack_ids_size() const {
  return _internal_ack_ids_size();
}
inline void StreamingPullResponse_ModifyAckDeadlineConfirmation::clear_ack_ids() {
  _impl_.ack_ids_.Clear();
}
inline std::string* StreamingPullResponse_ModifyAckDeadlineConfirmation::add_ack_ids() {
  std::string* _s = _internal_add_ack_ids();
  // @@protoc_insertion_point(field_add_mutable:google.pubsub.v1.StreamingPullResponse.ModifyAckDeadlineConfirmation.ack_ids)
  return _s;
}
inline const std::string& StreamingPullResponse_ModifyAckDeadlineConfirmation::_internal_ack_ids(int index) const {
  return _impl_.ack_ids_.Get(index);
}
inline const std::string& StreamingPullResponse_ModifyAckDeadlineConfirmation::ack_ids(int index) const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.StreamingPullResponse.ModifyAckDeadlineConfirmation.ack_ids)
  return _internal_ack_ids(index);
}
inline std::string* StreamingPullResponse_ModifyAckDeadlineConfirmation::mutable_ack_ids(int index) {
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.StreamingPullResponse.ModifyAckDeadlineConfirmation.ack_ids)
  return _impl_.ack_ids_.Mutable(index);
}
inline void StreamingPullResponse_ModifyAckDeadlineConfirmation::set_ack_ids(int index, const std::string& value) {
  _impl_.ack_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.pubsub.v1.StreamingPullResponse.ModifyAckDeadlineConfirmation.ack_ids)
}
inline void StreamingPullResponse_ModifyAckDeadlineConfirmation::set_ack_ids(int index, std::string&& value) {
  _impl_.ack_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.pubsub.v1.StreamingPullResponse.ModifyAckDeadlineConfirmation.ack_ids)
}
inline void StreamingPullResponse_ModifyAckDeadlineConfirmation::set_ack_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.ack_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.StreamingPullResponse.ModifyAckDeadlineConfirmation.ack_ids)
}
inline void StreamingPullResponse_ModifyAckDeadlineConfirmation::set_ack_ids(int index, const char* value, size_t size) {
  _impl_.ack_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.StreamingPullResponse.ModifyAckDeadlineConfirmation.ack_ids)
}
inline std::string* StreamingPullResponse_ModifyAckDeadlineConfirmation::_internal_add_ack_ids() {
  return _impl_.ack_ids_.Add();
}
inline void StreamingPullResponse_ModifyAckDeadlineConfirmation::add_ack_ids(const std::string& value) {
  _impl_.ack_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.pubsub.v1.StreamingPullResponse.ModifyAckDeadlineConfirmation.ack_ids)
}
inline void StreamingPullResponse_ModifyAckDeadlineConfirmation::add_ack_ids(std::string&& value) {
  _impl_.ack_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.pubsub.v1.StreamingPullResponse.ModifyAckDeadlineConfirmation.ack_ids)
}
inline void StreamingPullResponse_ModifyAckDeadlineConfirmation::add_ack_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.ack_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.pubsub.v1.StreamingPullResponse.ModifyAckDeadlineConfirmation.ack_ids)
}
inline void StreamingPullResponse_ModifyAckDeadlineConfirmation::add_ack_ids(const char* value, size_t size) {
  _impl_.ack_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.pubsub.v1.StreamingPullResponse.ModifyAckDeadlineConfirmation.ack_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StreamingPullResponse_ModifyAckDeadlineConfirmation::ack_ids() const {
  // @@protoc_insertion_point(field_list:google.pubsub.v1.StreamingPullResponse.ModifyAckDeadlineConfirmation.ack_ids)
  return _impl_.ack_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StreamingPullResponse_ModifyAckDeadlineConfirmation::mutable_ack_ids() {
  // @@protoc_insertion_point(field_mutable_list:google.pubsub.v1.StreamingPullResponse.ModifyAckDeadlineConfirmation.ack_ids)
  return &_impl_.ack_ids_;
}

// repeated string invalid_ack_ids = 2 [ctype = CORD];
inline int StreamingPullResponse_ModifyAckDeadlineConfirmation::_internal_invalid_ack_ids_size() const {
  return _impl_.invalid_ack_ids_.size();
}
inline int StreamingPullResponse_ModifyAckDeadlineConfirmation::invalid_ack_ids_size() const {
  return _internal_invalid_ack_ids_size();
}
inline void StreamingPullResponse_ModifyAckDeadlineConfirmation::clear_invalid_ack_ids() {
  _impl_.invalid_ack_ids_.Clear();
}
inline std::string* StreamingPullResponse_ModifyAckDeadlineConfirmation::add_invalid_ack_ids() {
  std::string* _s = _internal_add_invalid_ack_ids();
  // @@protoc_insertion_point(field_add_mutable:google.pubsub.v1.StreamingPullResponse.ModifyAckDeadlineConfirmation.invalid_ack_ids)
  return _s;
}
inline const std::string& StreamingPullResponse_ModifyAckDeadlineConfirmation::_internal_invalid_ack_ids(int index) const {
  return _impl_.invalid_ack_ids_.Get(index);
}
inline const std::string& StreamingPullResponse_ModifyAckDeadlineConfirmation::invalid_ack_ids(int index) const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.StreamingPullResponse.ModifyAckDeadlineConfirmation.invalid_ack_ids)
  return _internal_invalid_ack_ids(index);
}
inline std::string* StreamingPullResponse_ModifyAckDeadlineConfirmation::mutable_invalid_ack_ids(int index) {
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.StreamingPullResponse.ModifyAckDeadlineConfirmation.invalid_ack_ids)
  return _impl_.invalid_ack_ids_.Mutable(index);
}
inline void StreamingPullResponse_ModifyAckDeadlineConfirmation::set_invalid_ack_ids(int index, const std::string& value) {
  _impl_.invalid_ack_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.pubsub.v1.StreamingPullResponse.ModifyAckDeadlineConfirmation.invalid_ack_ids)
}
inline void StreamingPullResponse_ModifyAckDeadlineConfirmation::set_invalid_ack_ids(int index, std::string&& value) {
  _impl_.invalid_ack_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.pubsub.v1.StreamingPullResponse.ModifyAckDeadlineConfirmation.invalid_ack_ids)
}
inline void StreamingPullResponse_ModifyAckDeadlineConfirmation::set_invalid_ack_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.invalid_ack_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.StreamingPullResponse.ModifyAckDeadlineConfirmation.invalid_ack_ids)
}
inline void StreamingPullResponse_ModifyAckDeadlineConfirmation::set_invalid_ack_ids(int index, const char* value, size_t size) {
  _impl_.invalid_ack_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.StreamingPullResponse.ModifyAckDeadlineConfirmation.invalid_ack_ids)
}
inline std::string* StreamingPullResponse_ModifyAckDeadlineConfirmation::_internal_add_invalid_ack_ids() {
  return _impl_.invalid_ack_ids_.Add();
}
inline void StreamingPullResponse_ModifyAckDeadlineConfirmation::add_invalid_ack_ids(const std::string& value) {
  _impl_.invalid_ack_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.pubsub.v1.StreamingPullResponse.ModifyAckDeadlineConfirmation.invalid_ack_ids)
}
inline void StreamingPullResponse_ModifyAckDeadlineConfirmation::add_invalid_ack_ids(std::string&& value) {
  _impl_.invalid_ack_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.pubsub.v1.StreamingPullResponse.ModifyAckDeadlineConfirmation.invalid_ack_ids)
}
inline void StreamingPullResponse_ModifyAckDeadlineConfirmation::add_invalid_ack_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.invalid_ack_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.pubsub.v1.StreamingPullResponse.ModifyAckDeadlineConfirmation.invalid_ack_ids)
}
inline void StreamingPullResponse_ModifyAckDeadlineConfirmation::add_invalid_ack_ids(const char* value, size_t size) {
  _impl_.invalid_ack_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.pubsub.v1.StreamingPullResponse.ModifyAckDeadlineConfirmation.invalid_ack_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StreamingPullResponse_ModifyAckDeadlineConfirmation::invalid_ack_ids() const {
  // @@protoc_insertion_point(field_list:google.pubsub.v1.StreamingPullResponse.ModifyAckDeadlineConfirmation.invalid_ack_ids)
  return _impl_.invalid_ack_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StreamingPullResponse_ModifyAckDeadlineConfirmation::mutable_invalid_ack_ids() {
  // @@protoc_insertion_point(field_mutable_list:google.pubsub.v1.StreamingPullResponse.ModifyAckDeadlineConfirmation.invalid_ack_ids)
  return &_impl_.invalid_ack_ids_;
}

// -------------------------------------------------------------------

// StreamingPullResponse_SubscriptionProperties

// bool exactly_once_delivery_enabled = 1;
inline void StreamingPullResponse_SubscriptionProperties::clear_exactly_once_delivery_enabled() {
  _impl_.exactly_once_delivery_enabled_ = false;
}
inline bool StreamingPullResponse_SubscriptionProperties::_internal_exactly_once_delivery_enabled() const {
  return _impl_.exactly_once_delivery_enabled_;
}
inline bool StreamingPullResponse_SubscriptionProperties::exactly_once_delivery_enabled() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.StreamingPullResponse.SubscriptionProperties.exactly_once_delivery_enabled)
  return _internal_exactly_once_delivery_enabled();
}
inline void StreamingPullResponse_SubscriptionProperties::_internal_set_exactly_once_delivery_enabled(bool value) {
  
  _impl_.exactly_once_delivery_enabled_ = value;
}
inline void StreamingPullResponse_SubscriptionProperties::set_exactly_once_delivery_enabled(bool value) {
  _internal_set_exactly_once_delivery_enabled(value);
  // @@protoc_insertion_point(field_set:google.pubsub.v1.StreamingPullResponse.SubscriptionProperties.exactly_once_delivery_enabled)
}

// bool message_ordering_enabled = 2;
inline void StreamingPullResponse_SubscriptionProperties::clear_message_ordering_enabled() {
  _impl_.message_ordering_enabled_ = false;
}
inline bool StreamingPullResponse_SubscriptionProperties::_internal_message_ordering_enabled() const {
  return _impl_.message_ordering_enabled_;
}
inline bool StreamingPullResponse_SubscriptionProperties::message_ordering_enabled() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.StreamingPullResponse.SubscriptionProperties.message_ordering_enabled)
  return _internal_message_ordering_enabled();
}
inline void StreamingPullResponse_SubscriptionProperties::_internal_set_message_ordering_enabled(bool value) {
  
  _impl_.message_ordering_enabled_ = value;
}
inline void StreamingPullResponse_SubscriptionProperties::set_message_ordering_enabled(bool value) {
  _internal_set_message_ordering_enabled(value);
  // @@protoc_insertion_point(field_set:google.pubsub.v1.StreamingPullResponse.SubscriptionProperties.message_ordering_enabled)
}

// -------------------------------------------------------------------

// StreamingPullResponse

// repeated .google.pubsub.v1.ReceivedMessage received_messages = 1;
inline int StreamingPullResponse::_internal_received_messages_size() const {
  return _impl_.received_messages_.size();
}
inline int StreamingPullResponse::received_messages_size() const {
  return _internal_received_messages_size();
}
inline void StreamingPullResponse::clear_received_messages() {
  _impl_.received_messages_.Clear();
}
inline ::google::pubsub::v1::ReceivedMessage* StreamingPullResponse::mutable_received_messages(int index) {
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.StreamingPullResponse.received_messages)
  return _impl_.received_messages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::pubsub::v1::ReceivedMessage >*
StreamingPullResponse::mutable_received_messages() {
  // @@protoc_insertion_point(field_mutable_list:google.pubsub.v1.StreamingPullResponse.received_messages)
  return &_impl_.received_messages_;
}
inline const ::google::pubsub::v1::ReceivedMessage& StreamingPullResponse::_internal_received_messages(int index) const {
  return _impl_.received_messages_.Get(index);
}
inline const ::google::pubsub::v1::ReceivedMessage& StreamingPullResponse::received_messages(int index) const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.StreamingPullResponse.received_messages)
  return _internal_received_messages(index);
}
inline ::google::pubsub::v1::ReceivedMessage* StreamingPullResponse::_internal_add_received_messages() {
  return _impl_.received_messages_.Add();
}
inline ::google::pubsub::v1::ReceivedMessage* StreamingPullResponse::add_received_messages() {
  ::google::pubsub::v1::ReceivedMessage* _add = _internal_add_received_messages();
  // @@protoc_insertion_point(field_add:google.pubsub.v1.StreamingPullResponse.received_messages)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::pubsub::v1::ReceivedMessage >&
StreamingPullResponse::received_messages() const {
  // @@protoc_insertion_point(field_list:google.pubsub.v1.StreamingPullResponse.received_messages)
  return _impl_.received_messages_;
}

// .google.pubsub.v1.StreamingPullResponse.AcknowledgeConfirmation acknowledge_confirmation = 5;
inline bool StreamingPullResponse::_internal_has_acknowledge_confirmation() const {
  return this != internal_default_instance() && _impl_.acknowledge_confirmation_ != nullptr;
}
inline bool StreamingPullResponse::has_acknowledge_confirmation() const {
  return _internal_has_acknowledge_confirmation();
}
inline void StreamingPullResponse::clear_acknowledge_confirmation() {
  if (GetArenaForAllocation() == nullptr && _impl_.acknowledge_confirmation_ != nullptr) {
    delete _impl_.acknowledge_confirmation_;
  }
  _impl_.acknowledge_confirmation_ = nullptr;
}
inline const ::google::pubsub::v1::StreamingPullResponse_AcknowledgeConfirmation& StreamingPullResponse::_internal_acknowledge_confirmation() const {
  const ::google::pubsub::v1::StreamingPullResponse_AcknowledgeConfirmation* p = _impl_.acknowledge_confirmation_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::pubsub::v1::StreamingPullResponse_AcknowledgeConfirmation&>(
      ::google::pubsub::v1::_StreamingPullResponse_AcknowledgeConfirmation_default_instance_);
}
inline const ::google::pubsub::v1::StreamingPullResponse_AcknowledgeConfirmation& StreamingPullResponse::acknowledge_confirmation() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.StreamingPullResponse.acknowledge_confirmation)
  return _internal_acknowledge_confirmation();
}
inline void StreamingPullResponse::unsafe_arena_set_allocated_acknowledge_confirmation(
    ::google::pubsub::v1::StreamingPullResponse_AcknowledgeConfirmation* acknowledge_confirmation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.acknowledge_confirmation_);
  }
  _impl_.acknowledge_confirmation_ = acknowledge_confirmation;
  if (acknowledge_confirmation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.StreamingPullResponse.acknowledge_confirmation)
}
inline ::google::pubsub::v1::StreamingPullResponse_AcknowledgeConfirmation* StreamingPullResponse::release_acknowledge_confirmation() {
  
  ::google::pubsub::v1::StreamingPullResponse_AcknowledgeConfirmation* temp = _impl_.acknowledge_confirmation_;
  _impl_.acknowledge_confirmation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::pubsub::v1::StreamingPullResponse_AcknowledgeConfirmation* StreamingPullResponse::unsafe_arena_release_acknowledge_confirmation() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.StreamingPullResponse.acknowledge_confirmation)
  
  ::google::pubsub::v1::StreamingPullResponse_AcknowledgeConfirmation* temp = _impl_.acknowledge_confirmation_;
  _impl_.acknowledge_confirmation_ = nullptr;
  return temp;
}
inline ::google::pubsub::v1::StreamingPullResponse_AcknowledgeConfirmation* StreamingPullResponse::_internal_mutable_acknowledge_confirmation() {
  
  if (_impl_.acknowledge_confirmation_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::pubsub::v1::StreamingPullResponse_AcknowledgeConfirmation>(GetArenaForAllocation());
    _impl_.acknowledge_confirmation_ = p;
  }
  return _impl_.acknowledge_confirmation_;
}
inline ::google::pubsub::v1::StreamingPullResponse_AcknowledgeConfirmation* StreamingPullResponse::mutable_acknowledge_confirmation() {
  ::google::pubsub::v1::StreamingPullResponse_AcknowledgeConfirmation* _msg = _internal_mutable_acknowledge_confirmation();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.StreamingPullResponse.acknowledge_confirmation)
  return _msg;
}
inline void StreamingPullResponse::set_allocated_acknowledge_confirmation(::google::pubsub::v1::StreamingPullResponse_AcknowledgeConfirmation* acknowledge_confirmation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.acknowledge_confirmation_;
  }
  if (acknowledge_confirmation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(acknowledge_confirmation);
    if (message_arena != submessage_arena) {
      acknowledge_confirmation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acknowledge_confirmation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.acknowledge_confirmation_ = acknowledge_confirmation;
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.StreamingPullResponse.acknowledge_confirmation)
}

// .google.pubsub.v1.StreamingPullResponse.ModifyAckDeadlineConfirmation modify_ack_deadline_confirmation = 3;
inline bool StreamingPullResponse::_internal_has_modify_ack_deadline_confirmation() const {
  return this != internal_default_instance() && _impl_.modify_ack_deadline_confirmation_ != nullptr;
}
inline bool StreamingPullResponse::has_modify_ack_deadline_confirmation() const {
  return _internal_has_modify_ack_deadline_confirmation();
}
inline void StreamingPullResponse::clear_modify_ack_deadline_confirmation() {
  if (GetArenaForAllocation() == nullptr && _impl_.modify_ack_deadline_confirmation_ != nullptr) {
    delete _impl_.modify_ack_deadline_confirmation_;
  }
  _impl_.modify_ack_deadline_confirmation_ = nullptr;
}
inline const ::google::pubsub::v1::StreamingPullResponse_ModifyAckDeadlineConfirmation& StreamingPullResponse::_internal_modify_ack_deadline_confirmation() const {
  const ::google::pubsub::v1::StreamingPullResponse_ModifyAckDeadlineConfirmation* p = _impl_.modify_ack_deadline_confirmation_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::pubsub::v1::StreamingPullResponse_ModifyAckDeadlineConfirmation&>(
      ::google::pubsub::v1::_StreamingPullResponse_ModifyAckDeadlineConfirmation_default_instance_);
}
inline const ::google::pubsub::v1::StreamingPullResponse_ModifyAckDeadlineConfirmation& StreamingPullResponse::modify_ack_deadline_confirmation() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.StreamingPullResponse.modify_ack_deadline_confirmation)
  return _internal_modify_ack_deadline_confirmation();
}
inline void StreamingPullResponse::unsafe_arena_set_allocated_modify_ack_deadline_confirmation(
    ::google::pubsub::v1::StreamingPullResponse_ModifyAckDeadlineConfirmation* modify_ack_deadline_confirmation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.modify_ack_deadline_confirmation_);
  }
  _impl_.modify_ack_deadline_confirmation_ = modify_ack_deadline_confirmation;
  if (modify_ack_deadline_confirmation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.StreamingPullResponse.modify_ack_deadline_confirmation)
}
inline ::google::pubsub::v1::StreamingPullResponse_ModifyAckDeadlineConfirmation* StreamingPullResponse::release_modify_ack_deadline_confirmation() {
  
  ::google::pubsub::v1::StreamingPullResponse_ModifyAckDeadlineConfirmation* temp = _impl_.modify_ack_deadline_confirmation_;
  _impl_.modify_ack_deadline_confirmation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::pubsub::v1::StreamingPullResponse_ModifyAckDeadlineConfirmation* StreamingPullResponse::unsafe_arena_release_modify_ack_deadline_confirmation() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.StreamingPullResponse.modify_ack_deadline_confirmation)
  
  ::google::pubsub::v1::StreamingPullResponse_ModifyAckDeadlineConfirmation* temp = _impl_.modify_ack_deadline_confirmation_;
  _impl_.modify_ack_deadline_confirmation_ = nullptr;
  return temp;
}
inline ::google::pubsub::v1::StreamingPullResponse_ModifyAckDeadlineConfirmation* StreamingPullResponse::_internal_mutable_modify_ack_deadline_confirmation() {
  
  if (_impl_.modify_ack_deadline_confirmation_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::pubsub::v1::StreamingPullResponse_ModifyAckDeadlineConfirmation>(GetArenaForAllocation());
    _impl_.modify_ack_deadline_confirmation_ = p;
  }
  return _impl_.modify_ack_deadline_confirmation_;
}
inline ::google::pubsub::v1::StreamingPullResponse_ModifyAckDeadlineConfirmation* StreamingPullResponse::mutable_modify_ack_deadline_confirmation() {
  ::google::pubsub::v1::StreamingPullResponse_ModifyAckDeadlineConfirmation* _msg = _internal_mutable_modify_ack_deadline_confirmation();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.StreamingPullResponse.modify_ack_deadline_confirmation)
  return _msg;
}
inline void StreamingPullResponse::set_allocated_modify_ack_deadline_confirmation(::google::pubsub::v1::StreamingPullResponse_ModifyAckDeadlineConfirmation* modify_ack_deadline_confirmation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.modify_ack_deadline_confirmation_;
  }
  if (modify_ack_deadline_confirmation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(modify_ack_deadline_confirmation);
    if (message_arena != submessage_arena) {
      modify_ack_deadline_confirmation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, modify_ack_deadline_confirmation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.modify_ack_deadline_confirmation_ = modify_ack_deadline_confirmation;
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.StreamingPullResponse.modify_ack_deadline_confirmation)
}

// .google.pubsub.v1.StreamingPullResponse.SubscriptionProperties subscription_properties = 4;
inline bool StreamingPullResponse::_internal_has_subscription_properties() const {
  return this != internal_default_instance() && _impl_.subscription_properties_ != nullptr;
}
inline bool StreamingPullResponse::has_subscription_properties() const {
  return _internal_has_subscription_properties();
}
inline void StreamingPullResponse::clear_subscription_properties() {
  if (GetArenaForAllocation() == nullptr && _impl_.subscription_properties_ != nullptr) {
    delete _impl_.subscription_properties_;
  }
  _impl_.subscription_properties_ = nullptr;
}
inline const ::google::pubsub::v1::StreamingPullResponse_SubscriptionProperties& StreamingPullResponse::_internal_subscription_properties() const {
  const ::google::pubsub::v1::StreamingPullResponse_SubscriptionProperties* p = _impl_.subscription_properties_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::pubsub::v1::StreamingPullResponse_SubscriptionProperties&>(
      ::google::pubsub::v1::_StreamingPullResponse_SubscriptionProperties_default_instance_);
}
inline const ::google::pubsub::v1::StreamingPullResponse_SubscriptionProperties& StreamingPullResponse::subscription_properties() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.StreamingPullResponse.subscription_properties)
  return _internal_subscription_properties();
}
inline void StreamingPullResponse::unsafe_arena_set_allocated_subscription_properties(
    ::google::pubsub::v1::StreamingPullResponse_SubscriptionProperties* subscription_properties) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.subscription_properties_);
  }
  _impl_.subscription_properties_ = subscription_properties;
  if (subscription_properties) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.StreamingPullResponse.subscription_properties)
}
inline ::google::pubsub::v1::StreamingPullResponse_SubscriptionProperties* StreamingPullResponse::release_subscription_properties() {
  
  ::google::pubsub::v1::StreamingPullResponse_SubscriptionProperties* temp = _impl_.subscription_properties_;
  _impl_.subscription_properties_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::pubsub::v1::StreamingPullResponse_SubscriptionProperties* StreamingPullResponse::unsafe_arena_release_subscription_properties() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.StreamingPullResponse.subscription_properties)
  
  ::google::pubsub::v1::StreamingPullResponse_SubscriptionProperties* temp = _impl_.subscription_properties_;
  _impl_.subscription_properties_ = nullptr;
  return temp;
}
inline ::google::pubsub::v1::StreamingPullResponse_SubscriptionProperties* StreamingPullResponse::_internal_mutable_subscription_properties() {
  
  if (_impl_.subscription_properties_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::pubsub::v1::StreamingPullResponse_SubscriptionProperties>(GetArenaForAllocation());
    _impl_.subscription_properties_ = p;
  }
  return _impl_.subscription_properties_;
}
inline ::google::pubsub::v1::StreamingPullResponse_SubscriptionProperties* StreamingPullResponse::mutable_subscription_properties() {
  ::google::pubsub::v1::StreamingPullResponse_SubscriptionProperties* _msg = _internal_mutable_subscription_properties();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.StreamingPullResponse.subscription_properties)
  return _msg;
}
inline void StreamingPullResponse::set_allocated_subscription_properties(::google::pubsub::v1::StreamingPullResponse_SubscriptionProperties* subscription_properties) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.subscription_properties_;
  }
  if (subscription_properties) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(subscription_properties);
    if (message_arena != submessage_arena) {
      subscription_properties = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subscription_properties, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.subscription_properties_ = subscription_properties;
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.StreamingPullResponse.subscription_properties)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CreateSnapshotRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreateSnapshotRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& CreateSnapshotRequest::name() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.CreateSnapshotRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateSnapshotRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.CreateSnapshotRequest.name)
}
inline std::string* CreateSnapshotRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.CreateSnapshotRequest.name)
  return _s;
}
inline const std::string& CreateSnapshotRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CreateSnapshotRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateSnapshotRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateSnapshotRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.CreateSnapshotRequest.name)
  return _impl_.name_.Release();
}
inline void CreateSnapshotRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.CreateSnapshotRequest.name)
}

// string subscription = 2 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreateSnapshotRequest::clear_subscription() {
  _impl_.subscription_.ClearToEmpty();
}
inline const std::string& CreateSnapshotRequest::subscription() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.CreateSnapshotRequest.subscription)
  return _internal_subscription();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateSnapshotRequest::set_subscription(ArgT0&& arg0, ArgT... args) {
 
 _impl_.subscription_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.CreateSnapshotRequest.subscription)
}
inline std::string* CreateSnapshotRequest::mutable_subscription() {
  std::string* _s = _internal_mutable_subscription();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.CreateSnapshotRequest.subscription)
  return _s;
}
inline const std::string& CreateSnapshotRequest::_internal_subscription() const {
  return _impl_.subscription_.Get();
}
inline void CreateSnapshotRequest::_internal_set_subscription(const std::string& value) {
  
  _impl_.subscription_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateSnapshotRequest::_internal_mutable_subscription() {
  
  return _impl_.subscription_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateSnapshotRequest::release_subscription() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.CreateSnapshotRequest.subscription)
  return _impl_.subscription_.Release();
}
inline void CreateSnapshotRequest::set_allocated_subscription(std::string* subscription) {
  if (subscription != nullptr) {
    
  } else {
    
  }
  _impl_.subscription_.SetAllocated(subscription, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.subscription_.IsDefault()) {
    _impl_.subscription_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.CreateSnapshotRequest.subscription)
}

// map<string, string> labels = 3;
inline int CreateSnapshotRequest::_internal_labels_size() const {
  return _impl_.labels_.size();
}
inline int CreateSnapshotRequest::labels_size() const {
  return _internal_labels_size();
}
inline void CreateSnapshotRequest::clear_labels() {
  _impl_.labels_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
CreateSnapshotRequest::_internal_labels() const {
  return _impl_.labels_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
CreateSnapshotRequest::labels() const {
  // @@protoc_insertion_point(field_map:google.pubsub.v1.CreateSnapshotRequest.labels)
  return _internal_labels();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
CreateSnapshotRequest::_internal_mutable_labels() {
  return _impl_.labels_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
CreateSnapshotRequest::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:google.pubsub.v1.CreateSnapshotRequest.labels)
  return _internal_mutable_labels();
}

// -------------------------------------------------------------------

// UpdateSnapshotRequest

// .google.pubsub.v1.Snapshot snapshot = 1 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateSnapshotRequest::_internal_has_snapshot() const {
  return this != internal_default_instance() && _impl_.snapshot_ != nullptr;
}
inline bool UpdateSnapshotRequest::has_snapshot() const {
  return _internal_has_snapshot();
}
inline void UpdateSnapshotRequest::clear_snapshot() {
  if (GetArenaForAllocation() == nullptr && _impl_.snapshot_ != nullptr) {
    delete _impl_.snapshot_;
  }
  _impl_.snapshot_ = nullptr;
}
inline const ::google::pubsub::v1::Snapshot& UpdateSnapshotRequest::_internal_snapshot() const {
  const ::google::pubsub::v1::Snapshot* p = _impl_.snapshot_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::pubsub::v1::Snapshot&>(
      ::google::pubsub::v1::_Snapshot_default_instance_);
}
inline const ::google::pubsub::v1::Snapshot& UpdateSnapshotRequest::snapshot() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.UpdateSnapshotRequest.snapshot)
  return _internal_snapshot();
}
inline void UpdateSnapshotRequest::unsafe_arena_set_allocated_snapshot(
    ::google::pubsub::v1::Snapshot* snapshot) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.snapshot_);
  }
  _impl_.snapshot_ = snapshot;
  if (snapshot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.UpdateSnapshotRequest.snapshot)
}
inline ::google::pubsub::v1::Snapshot* UpdateSnapshotRequest::release_snapshot() {
  
  ::google::pubsub::v1::Snapshot* temp = _impl_.snapshot_;
  _impl_.snapshot_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::pubsub::v1::Snapshot* UpdateSnapshotRequest::unsafe_arena_release_snapshot() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.UpdateSnapshotRequest.snapshot)
  
  ::google::pubsub::v1::Snapshot* temp = _impl_.snapshot_;
  _impl_.snapshot_ = nullptr;
  return temp;
}
inline ::google::pubsub::v1::Snapshot* UpdateSnapshotRequest::_internal_mutable_snapshot() {
  
  if (_impl_.snapshot_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::pubsub::v1::Snapshot>(GetArenaForAllocation());
    _impl_.snapshot_ = p;
  }
  return _impl_.snapshot_;
}
inline ::google::pubsub::v1::Snapshot* UpdateSnapshotRequest::mutable_snapshot() {
  ::google::pubsub::v1::Snapshot* _msg = _internal_mutable_snapshot();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.UpdateSnapshotRequest.snapshot)
  return _msg;
}
inline void UpdateSnapshotRequest::set_allocated_snapshot(::google::pubsub::v1::Snapshot* snapshot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.snapshot_;
  }
  if (snapshot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(snapshot);
    if (message_arena != submessage_arena) {
      snapshot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, snapshot, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.snapshot_ = snapshot;
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.UpdateSnapshotRequest.snapshot)
}

// .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateSnapshotRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && _impl_.update_mask_ != nullptr;
}
inline bool UpdateSnapshotRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateSnapshotRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = _impl_.update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateSnapshotRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.UpdateSnapshotRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateSnapshotRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  _impl_.update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.UpdateSnapshotRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateSnapshotRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateSnapshotRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.UpdateSnapshotRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateSnapshotRequest::_internal_mutable_update_mask() {
  
  if (_impl_.update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    _impl_.update_mask_ = p;
  }
  return _impl_.update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateSnapshotRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.UpdateSnapshotRequest.update_mask)
  return _msg;
}
inline void UpdateSnapshotRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.UpdateSnapshotRequest.update_mask)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Snapshot

// string name = 1;
inline void Snapshot::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Snapshot::name() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.Snapshot.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Snapshot::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.Snapshot.name)
}
inline std::string* Snapshot::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.Snapshot.name)
  return _s;
}
inline const std::string& Snapshot::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Snapshot::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Snapshot::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Snapshot::release_name() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.Snapshot.name)
  return _impl_.name_.Release();
}
inline void Snapshot::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.Snapshot.name)
}

// string topic = 2 [(.google.api.resource_reference) = {
inline void Snapshot::clear_topic() {
  _impl_.topic_.ClearToEmpty();
}
inline const std::string& Snapshot::topic() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.Snapshot.topic)
  return _internal_topic();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Snapshot::set_topic(ArgT0&& arg0, ArgT... args) {
 
 _impl_.topic_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.Snapshot.topic)
}
inline std::string* Snapshot::mutable_topic() {
  std::string* _s = _internal_mutable_topic();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.Snapshot.topic)
  return _s;
}
inline const std::string& Snapshot::_internal_topic() const {
  return _impl_.topic_.Get();
}
inline void Snapshot::_internal_set_topic(const std::string& value) {
  
  _impl_.topic_.Set(value, GetArenaForAllocation());
}
inline std::string* Snapshot::_internal_mutable_topic() {
  
  return _impl_.topic_.Mutable(GetArenaForAllocation());
}
inline std::string* Snapshot::release_topic() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.Snapshot.topic)
  return _impl_.topic_.Release();
}
inline void Snapshot::set_allocated_topic(std::string* topic) {
  if (topic != nullptr) {
    
  } else {
    
  }
  _impl_.topic_.SetAllocated(topic, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.topic_.IsDefault()) {
    _impl_.topic_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.Snapshot.topic)
}

// .google.protobuf.Timestamp expire_time = 3;
inline bool Snapshot::_internal_has_expire_time() const {
  return this != internal_default_instance() && _impl_.expire_time_ != nullptr;
}
inline bool Snapshot::has_expire_time() const {
  return _internal_has_expire_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Snapshot::_internal_expire_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.expire_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Snapshot::expire_time() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.Snapshot.expire_time)
  return _internal_expire_time();
}
inline void Snapshot::unsafe_arena_set_allocated_expire_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* expire_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expire_time_);
  }
  _impl_.expire_time_ = expire_time;
  if (expire_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.Snapshot.expire_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Snapshot::release_expire_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.expire_time_;
  _impl_.expire_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Snapshot::unsafe_arena_release_expire_time() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.Snapshot.expire_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.expire_time_;
  _impl_.expire_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Snapshot::_internal_mutable_expire_time() {
  
  if (_impl_.expire_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.expire_time_ = p;
  }
  return _impl_.expire_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Snapshot::mutable_expire_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_expire_time();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.Snapshot.expire_time)
  return _msg;
}
inline void Snapshot::set_allocated_expire_time(::PROTOBUF_NAMESPACE_ID::Timestamp* expire_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expire_time_);
  }
  if (expire_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expire_time));
    if (message_arena != submessage_arena) {
      expire_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expire_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.expire_time_ = expire_time;
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.Snapshot.expire_time)
}

// map<string, string> labels = 4;
inline int Snapshot::_internal_labels_size() const {
  return _impl_.labels_.size();
}
inline int Snapshot::labels_size() const {
  return _internal_labels_size();
}
inline void Snapshot::clear_labels() {
  _impl_.labels_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Snapshot::_internal_labels() const {
  return _impl_.labels_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Snapshot::labels() const {
  // @@protoc_insertion_point(field_map:google.pubsub.v1.Snapshot.labels)
  return _internal_labels();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Snapshot::_internal_mutable_labels() {
  return _impl_.labels_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Snapshot::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:google.pubsub.v1.Snapshot.labels)
  return _internal_mutable_labels();
}

// -------------------------------------------------------------------

// GetSnapshotRequest

// string snapshot = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetSnapshotRequest::clear_snapshot() {
  _impl_.snapshot_.ClearToEmpty();
}
inline const std::string& GetSnapshotRequest::snapshot() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.GetSnapshotRequest.snapshot)
  return _internal_snapshot();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetSnapshotRequest::set_snapshot(ArgT0&& arg0, ArgT... args) {
 
 _impl_.snapshot_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.GetSnapshotRequest.snapshot)
}
inline std::string* GetSnapshotRequest::mutable_snapshot() {
  std::string* _s = _internal_mutable_snapshot();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.GetSnapshotRequest.snapshot)
  return _s;
}
inline const std::string& GetSnapshotRequest::_internal_snapshot() const {
  return _impl_.snapshot_.Get();
}
inline void GetSnapshotRequest::_internal_set_snapshot(const std::string& value) {
  
  _impl_.snapshot_.Set(value, GetArenaForAllocation());
}
inline std::string* GetSnapshotRequest::_internal_mutable_snapshot() {
  
  return _impl_.snapshot_.Mutable(GetArenaForAllocation());
}
inline std::string* GetSnapshotRequest::release_snapshot() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.GetSnapshotRequest.snapshot)
  return _impl_.snapshot_.Release();
}
inline void GetSnapshotRequest::set_allocated_snapshot(std::string* snapshot) {
  if (snapshot != nullptr) {
    
  } else {
    
  }
  _impl_.snapshot_.SetAllocated(snapshot, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.snapshot_.IsDefault()) {
    _impl_.snapshot_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.GetSnapshotRequest.snapshot)
}

// -------------------------------------------------------------------

// ListSnapshotsRequest

// string project = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListSnapshotsRequest::clear_project() {
  _impl_.project_.ClearToEmpty();
}
inline const std::string& ListSnapshotsRequest::project() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListSnapshotsRequest.project)
  return _internal_project();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListSnapshotsRequest::set_project(ArgT0&& arg0, ArgT... args) {
 
 _impl_.project_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListSnapshotsRequest.project)
}
inline std::string* ListSnapshotsRequest::mutable_project() {
  std::string* _s = _internal_mutable_project();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ListSnapshotsRequest.project)
  return _s;
}
inline const std::string& ListSnapshotsRequest::_internal_project() const {
  return _impl_.project_.Get();
}
inline void ListSnapshotsRequest::_internal_set_project(const std::string& value) {
  
  _impl_.project_.Set(value, GetArenaForAllocation());
}
inline std::string* ListSnapshotsRequest::_internal_mutable_project() {
  
  return _impl_.project_.Mutable(GetArenaForAllocation());
}
inline std::string* ListSnapshotsRequest::release_project() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ListSnapshotsRequest.project)
  return _impl_.project_.Release();
}
inline void ListSnapshotsRequest::set_allocated_project(std::string* project) {
  if (project != nullptr) {
    
  } else {
    
  }
  _impl_.project_.SetAllocated(project, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.project_.IsDefault()) {
    _impl_.project_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ListSnapshotsRequest.project)
}

// int32 page_size = 2;
inline void ListSnapshotsRequest::clear_page_size() {
  _impl_.page_size_ = 0;
}
inline int32_t ListSnapshotsRequest::_internal_page_size() const {
  return _impl_.page_size_;
}
inline int32_t ListSnapshotsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListSnapshotsRequest.page_size)
  return _internal_page_size();
}
inline void ListSnapshotsRequest::_internal_set_page_size(int32_t value) {
  
  _impl_.page_size_ = value;
}
inline void ListSnapshotsRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListSnapshotsRequest.page_size)
}

// string page_token = 3;
inline void ListSnapshotsRequest::clear_page_token() {
  _impl_.page_token_.ClearToEmpty();
}
inline const std::string& ListSnapshotsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListSnapshotsRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListSnapshotsRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListSnapshotsRequest.page_token)
}
inline std::string* ListSnapshotsRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ListSnapshotsRequest.page_token)
  return _s;
}
inline const std::string& ListSnapshotsRequest::_internal_page_token() const {
  return _impl_.page_token_.Get();
}
inline void ListSnapshotsRequest::_internal_set_page_token(const std::string& value) {
  
  _impl_.page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListSnapshotsRequest::_internal_mutable_page_token() {
  
  return _impl_.page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListSnapshotsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ListSnapshotsRequest.page_token)
  return _impl_.page_token_.Release();
}
inline void ListSnapshotsRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  _impl_.page_token_.SetAllocated(page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.page_token_.IsDefault()) {
    _impl_.page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ListSnapshotsRequest.page_token)
}

// -------------------------------------------------------------------

// ListSnapshotsResponse

// repeated .google.pubsub.v1.Snapshot snapshots = 1;
inline int ListSnapshotsResponse::_internal_snapshots_size() const {
  return _impl_.snapshots_.size();
}
inline int ListSnapshotsResponse::snapshots_size() const {
  return _internal_snapshots_size();
}
inline void ListSnapshotsResponse::clear_snapshots() {
  _impl_.snapshots_.Clear();
}
inline ::google::pubsub::v1::Snapshot* ListSnapshotsResponse::mutable_snapshots(int index) {
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ListSnapshotsResponse.snapshots)
  return _impl_.snapshots_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::pubsub::v1::Snapshot >*
ListSnapshotsResponse::mutable_snapshots() {
  // @@protoc_insertion_point(field_mutable_list:google.pubsub.v1.ListSnapshotsResponse.snapshots)
  return &_impl_.snapshots_;
}
inline const ::google::pubsub::v1::Snapshot& ListSnapshotsResponse::_internal_snapshots(int index) const {
  return _impl_.snapshots_.Get(index);
}
inline const ::google::pubsub::v1::Snapshot& ListSnapshotsResponse::snapshots(int index) const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListSnapshotsResponse.snapshots)
  return _internal_snapshots(index);
}
inline ::google::pubsub::v1::Snapshot* ListSnapshotsResponse::_internal_add_snapshots() {
  return _impl_.snapshots_.Add();
}
inline ::google::pubsub::v1::Snapshot* ListSnapshotsResponse::add_snapshots() {
  ::google::pubsub::v1::Snapshot* _add = _internal_add_snapshots();
  // @@protoc_insertion_point(field_add:google.pubsub.v1.ListSnapshotsResponse.snapshots)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::pubsub::v1::Snapshot >&
ListSnapshotsResponse::snapshots() const {
  // @@protoc_insertion_point(field_list:google.pubsub.v1.ListSnapshotsResponse.snapshots)
  return _impl_.snapshots_;
}

// string next_page_token = 2;
inline void ListSnapshotsResponse::clear_next_page_token() {
  _impl_.next_page_token_.ClearToEmpty();
}
inline const std::string& ListSnapshotsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListSnapshotsResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListSnapshotsResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.next_page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListSnapshotsResponse.next_page_token)
}
inline std::string* ListSnapshotsResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ListSnapshotsResponse.next_page_token)
  return _s;
}
inline const std::string& ListSnapshotsResponse::_internal_next_page_token() const {
  return _impl_.next_page_token_.Get();
}
inline void ListSnapshotsResponse::_internal_set_next_page_token(const std::string& value) {
  
  _impl_.next_page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListSnapshotsResponse::_internal_mutable_next_page_token() {
  
  return _impl_.next_page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListSnapshotsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ListSnapshotsResponse.next_page_token)
  return _impl_.next_page_token_.Release();
}
inline void ListSnapshotsResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  _impl_.next_page_token_.SetAllocated(next_page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.next_page_token_.IsDefault()) {
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ListSnapshotsResponse.next_page_token)
}

// -------------------------------------------------------------------

// DeleteSnapshotRequest

// string snapshot = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteSnapshotRequest::clear_snapshot() {
  _impl_.snapshot_.ClearToEmpty();
}
inline const std::string& DeleteSnapshotRequest::snapshot() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.DeleteSnapshotRequest.snapshot)
  return _internal_snapshot();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteSnapshotRequest::set_snapshot(ArgT0&& arg0, ArgT... args) {
 
 _impl_.snapshot_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.DeleteSnapshotRequest.snapshot)
}
inline std::string* DeleteSnapshotRequest::mutable_snapshot() {
  std::string* _s = _internal_mutable_snapshot();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.DeleteSnapshotRequest.snapshot)
  return _s;
}
inline const std::string& DeleteSnapshotRequest::_internal_snapshot() const {
  return _impl_.snapshot_.Get();
}
inline void DeleteSnapshotRequest::_internal_set_snapshot(const std::string& value) {
  
  _impl_.snapshot_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteSnapshotRequest::_internal_mutable_snapshot() {
  
  return _impl_.snapshot_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteSnapshotRequest::release_snapshot() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.DeleteSnapshotRequest.snapshot)
  return _impl_.snapshot_.Release();
}
inline void DeleteSnapshotRequest::set_allocated_snapshot(std::string* snapshot) {
  if (snapshot != nullptr) {
    
  } else {
    
  }
  _impl_.snapshot_.SetAllocated(snapshot, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.snapshot_.IsDefault()) {
    _impl_.snapshot_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.DeleteSnapshotRequest.snapshot)
}

// -------------------------------------------------------------------

// SeekRequest

// string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void SeekRequest::clear_subscription() {
  _impl_.subscription_.ClearToEmpty();
}
inline const std::string& SeekRequest::subscription() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.SeekRequest.subscription)
  return _internal_subscription();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SeekRequest::set_subscription(ArgT0&& arg0, ArgT... args) {
 
 _impl_.subscription_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.SeekRequest.subscription)
}
inline std::string* SeekRequest::mutable_subscription() {
  std::string* _s = _internal_mutable_subscription();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.SeekRequest.subscription)
  return _s;
}
inline const std::string& SeekRequest::_internal_subscription() const {
  return _impl_.subscription_.Get();
}
inline void SeekRequest::_internal_set_subscription(const std::string& value) {
  
  _impl_.subscription_.Set(value, GetArenaForAllocation());
}
inline std::string* SeekRequest::_internal_mutable_subscription() {
  
  return _impl_.subscription_.Mutable(GetArenaForAllocation());
}
inline std::string* SeekRequest::release_subscription() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.SeekRequest.subscription)
  return _impl_.subscription_.Release();
}
inline void SeekRequest::set_allocated_subscription(std::string* subscription) {
  if (subscription != nullptr) {
    
  } else {
    
  }
  _impl_.subscription_.SetAllocated(subscription, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.subscription_.IsDefault()) {
    _impl_.subscription_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.SeekRequest.subscription)
}

// .google.protobuf.Timestamp time = 2;
inline bool SeekRequest::_internal_has_time() const {
  return target_case() == kTime;
}
inline bool SeekRequest::has_time() const {
  return _internal_has_time();
}
inline void SeekRequest::set_has_time() {
  _impl_._oneof_case_[0] = kTime;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SeekRequest::release_time() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.SeekRequest.time)
  if (_internal_has_time()) {
    clear_has_target();
    ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.target_.time_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.target_.time_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& SeekRequest::_internal_time() const {
  return _internal_has_time()
      ? *_impl_.target_.time_
      : reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::Timestamp&>(::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& SeekRequest::time() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.SeekRequest.time)
  return _internal_time();
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SeekRequest::unsafe_arena_release_time() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.SeekRequest.time)
  if (_internal_has_time()) {
    clear_has_target();
    ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.target_.time_;
    _impl_.target_.time_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SeekRequest::unsafe_arena_set_allocated_time(::PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  clear_target();
  if (time) {
    set_has_time();
    _impl_.target_.time_ = time;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.SeekRequest.time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SeekRequest::_internal_mutable_time() {
  if (!_internal_has_time()) {
    clear_target();
    set_has_time();
    _impl_.target_.time_ = CreateMaybeMessage< ::PROTOBUF_NAMESPACE_ID::Timestamp >(GetArenaForAllocation());
  }
  return _impl_.target_.time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SeekRequest::mutable_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.SeekRequest.time)
  return _msg;
}

// string snapshot = 3 [(.google.api.resource_reference) = {
inline bool SeekRequest::_internal_has_snapshot() const {
  return target_case() == kSnapshot;
}
inline bool SeekRequest::has_snapshot() const {
  return _internal_has_snapshot();
}
inline void SeekRequest::set_has_snapshot() {
  _impl_._oneof_case_[0] = kSnapshot;
}
inline void SeekRequest::clear_snapshot() {
  if (_internal_has_snapshot()) {
    _impl_.target_.snapshot_.Destroy();
    clear_has_target();
  }
}
inline const std::string& SeekRequest::snapshot() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.SeekRequest.snapshot)
  return _internal_snapshot();
}
template <typename ArgT0, typename... ArgT>
inline void SeekRequest::set_snapshot(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_snapshot()) {
    clear_target();
    set_has_snapshot();
    _impl_.target_.snapshot_.InitDefault();
  }
  _impl_.target_.snapshot_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.SeekRequest.snapshot)
}
inline std::string* SeekRequest::mutable_snapshot() {
  std::string* _s = _internal_mutable_snapshot();
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.SeekRequest.snapshot)
  return _s;
}
inline const std::string& SeekRequest::_internal_snapshot() const {
  if (_internal_has_snapshot()) {
    return _impl_.target_.snapshot_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void SeekRequest::_internal_set_snapshot(const std::string& value) {
  if (!_internal_has_snapshot()) {
    clear_target();
    set_has_snapshot();
    _impl_.target_.snapshot_.InitDefault();
  }
  _impl_.target_.snapshot_.Set(value, GetArenaForAllocation());
}
inline std::string* SeekRequest::_internal_mutable_snapshot() {
  if (!_internal_has_snapshot()) {
    clear_target();
    set_has_snapshot();
    _impl_.target_.snapshot_.InitDefault();
  }
  return _impl_.target_.snapshot_.Mutable(      GetArenaForAllocation());
}
inline std::string* SeekRequest::release_snapshot() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.SeekRequest.snapshot)
  if (_internal_has_snapshot()) {
    clear_has_target();
    return _impl_.target_.snapshot_.Release();
  } else {
    return nullptr;
  }
}
inline void SeekRequest::set_allocated_snapshot(std::string* snapshot) {
  if (has_target()) {
    clear_target();
  }
  if (snapshot != nullptr) {
    set_has_snapshot();
    _impl_.target_.snapshot_.InitAllocated(snapshot, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.SeekRequest.snapshot)
}

inline bool SeekRequest::has_target() const {
  return target_case() != TARGET_NOT_SET;
}
inline void SeekRequest::clear_has_target() {
  _impl_._oneof_case_[0] = TARGET_NOT_SET;
}
inline SeekRequest::TargetCase SeekRequest::target_case() const {
  return SeekRequest::TargetCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// SeekResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace pubsub
}  // namespace google

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::google::pubsub::v1::Subscription_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::pubsub::v1::Subscription_State>() {
  return ::google::pubsub::v1::Subscription_State_descriptor();
}
template <> struct is_proto_enum< ::google::pubsub::v1::BigQueryConfig_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::pubsub::v1::BigQueryConfig_State>() {
  return ::google::pubsub::v1::BigQueryConfig_State_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fpubsub_2fv1_2fpubsub_2eproto
