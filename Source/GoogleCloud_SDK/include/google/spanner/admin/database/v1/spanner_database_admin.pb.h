// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/spanner/admin/database/v1/spanner_database_admin.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include "google/api/field_behavior.pb.h"
#include "google/api/resource.pb.h"
#include "google/iam/v1/iam_policy.pb.h"
#include "google/iam/v1/policy.pb.h"
#include "google/longrunning/operations.pb.h"
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/timestamp.pb.h>
#include "google/spanner/admin/database/v1/backup.pb.h"
#include "google/spanner/admin/database/v1/common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[18]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto_metadata_getter(int index);
namespace google {
namespace spanner {
namespace admin {
namespace database {
namespace v1 {
class CreateDatabaseMetadata;
struct CreateDatabaseMetadataDefaultTypeInternal;
extern CreateDatabaseMetadataDefaultTypeInternal _CreateDatabaseMetadata_default_instance_;
class CreateDatabaseRequest;
struct CreateDatabaseRequestDefaultTypeInternal;
extern CreateDatabaseRequestDefaultTypeInternal _CreateDatabaseRequest_default_instance_;
class Database;
struct DatabaseDefaultTypeInternal;
extern DatabaseDefaultTypeInternal _Database_default_instance_;
class DropDatabaseRequest;
struct DropDatabaseRequestDefaultTypeInternal;
extern DropDatabaseRequestDefaultTypeInternal _DropDatabaseRequest_default_instance_;
class GetDatabaseDdlRequest;
struct GetDatabaseDdlRequestDefaultTypeInternal;
extern GetDatabaseDdlRequestDefaultTypeInternal _GetDatabaseDdlRequest_default_instance_;
class GetDatabaseDdlResponse;
struct GetDatabaseDdlResponseDefaultTypeInternal;
extern GetDatabaseDdlResponseDefaultTypeInternal _GetDatabaseDdlResponse_default_instance_;
class GetDatabaseRequest;
struct GetDatabaseRequestDefaultTypeInternal;
extern GetDatabaseRequestDefaultTypeInternal _GetDatabaseRequest_default_instance_;
class ListDatabaseOperationsRequest;
struct ListDatabaseOperationsRequestDefaultTypeInternal;
extern ListDatabaseOperationsRequestDefaultTypeInternal _ListDatabaseOperationsRequest_default_instance_;
class ListDatabaseOperationsResponse;
struct ListDatabaseOperationsResponseDefaultTypeInternal;
extern ListDatabaseOperationsResponseDefaultTypeInternal _ListDatabaseOperationsResponse_default_instance_;
class ListDatabasesRequest;
struct ListDatabasesRequestDefaultTypeInternal;
extern ListDatabasesRequestDefaultTypeInternal _ListDatabasesRequest_default_instance_;
class ListDatabasesResponse;
struct ListDatabasesResponseDefaultTypeInternal;
extern ListDatabasesResponseDefaultTypeInternal _ListDatabasesResponse_default_instance_;
class OptimizeRestoredDatabaseMetadata;
struct OptimizeRestoredDatabaseMetadataDefaultTypeInternal;
extern OptimizeRestoredDatabaseMetadataDefaultTypeInternal _OptimizeRestoredDatabaseMetadata_default_instance_;
class RestoreDatabaseEncryptionConfig;
struct RestoreDatabaseEncryptionConfigDefaultTypeInternal;
extern RestoreDatabaseEncryptionConfigDefaultTypeInternal _RestoreDatabaseEncryptionConfig_default_instance_;
class RestoreDatabaseMetadata;
struct RestoreDatabaseMetadataDefaultTypeInternal;
extern RestoreDatabaseMetadataDefaultTypeInternal _RestoreDatabaseMetadata_default_instance_;
class RestoreDatabaseRequest;
struct RestoreDatabaseRequestDefaultTypeInternal;
extern RestoreDatabaseRequestDefaultTypeInternal _RestoreDatabaseRequest_default_instance_;
class RestoreInfo;
struct RestoreInfoDefaultTypeInternal;
extern RestoreInfoDefaultTypeInternal _RestoreInfo_default_instance_;
class UpdateDatabaseDdlMetadata;
struct UpdateDatabaseDdlMetadataDefaultTypeInternal;
extern UpdateDatabaseDdlMetadataDefaultTypeInternal _UpdateDatabaseDdlMetadata_default_instance_;
class UpdateDatabaseDdlRequest;
struct UpdateDatabaseDdlRequestDefaultTypeInternal;
extern UpdateDatabaseDdlRequestDefaultTypeInternal _UpdateDatabaseDdlRequest_default_instance_;
}  // namespace v1
}  // namespace database
}  // namespace admin
}  // namespace spanner
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::spanner::admin::database::v1::CreateDatabaseMetadata* Arena::CreateMaybeMessage<::google::spanner::admin::database::v1::CreateDatabaseMetadata>(Arena*);
template<> ::google::spanner::admin::database::v1::CreateDatabaseRequest* Arena::CreateMaybeMessage<::google::spanner::admin::database::v1::CreateDatabaseRequest>(Arena*);
template<> ::google::spanner::admin::database::v1::Database* Arena::CreateMaybeMessage<::google::spanner::admin::database::v1::Database>(Arena*);
template<> ::google::spanner::admin::database::v1::DropDatabaseRequest* Arena::CreateMaybeMessage<::google::spanner::admin::database::v1::DropDatabaseRequest>(Arena*);
template<> ::google::spanner::admin::database::v1::GetDatabaseDdlRequest* Arena::CreateMaybeMessage<::google::spanner::admin::database::v1::GetDatabaseDdlRequest>(Arena*);
template<> ::google::spanner::admin::database::v1::GetDatabaseDdlResponse* Arena::CreateMaybeMessage<::google::spanner::admin::database::v1::GetDatabaseDdlResponse>(Arena*);
template<> ::google::spanner::admin::database::v1::GetDatabaseRequest* Arena::CreateMaybeMessage<::google::spanner::admin::database::v1::GetDatabaseRequest>(Arena*);
template<> ::google::spanner::admin::database::v1::ListDatabaseOperationsRequest* Arena::CreateMaybeMessage<::google::spanner::admin::database::v1::ListDatabaseOperationsRequest>(Arena*);
template<> ::google::spanner::admin::database::v1::ListDatabaseOperationsResponse* Arena::CreateMaybeMessage<::google::spanner::admin::database::v1::ListDatabaseOperationsResponse>(Arena*);
template<> ::google::spanner::admin::database::v1::ListDatabasesRequest* Arena::CreateMaybeMessage<::google::spanner::admin::database::v1::ListDatabasesRequest>(Arena*);
template<> ::google::spanner::admin::database::v1::ListDatabasesResponse* Arena::CreateMaybeMessage<::google::spanner::admin::database::v1::ListDatabasesResponse>(Arena*);
template<> ::google::spanner::admin::database::v1::OptimizeRestoredDatabaseMetadata* Arena::CreateMaybeMessage<::google::spanner::admin::database::v1::OptimizeRestoredDatabaseMetadata>(Arena*);
template<> ::google::spanner::admin::database::v1::RestoreDatabaseEncryptionConfig* Arena::CreateMaybeMessage<::google::spanner::admin::database::v1::RestoreDatabaseEncryptionConfig>(Arena*);
template<> ::google::spanner::admin::database::v1::RestoreDatabaseMetadata* Arena::CreateMaybeMessage<::google::spanner::admin::database::v1::RestoreDatabaseMetadata>(Arena*);
template<> ::google::spanner::admin::database::v1::RestoreDatabaseRequest* Arena::CreateMaybeMessage<::google::spanner::admin::database::v1::RestoreDatabaseRequest>(Arena*);
template<> ::google::spanner::admin::database::v1::RestoreInfo* Arena::CreateMaybeMessage<::google::spanner::admin::database::v1::RestoreInfo>(Arena*);
template<> ::google::spanner::admin::database::v1::UpdateDatabaseDdlMetadata* Arena::CreateMaybeMessage<::google::spanner::admin::database::v1::UpdateDatabaseDdlMetadata>(Arena*);
template<> ::google::spanner::admin::database::v1::UpdateDatabaseDdlRequest* Arena::CreateMaybeMessage<::google::spanner::admin::database::v1::UpdateDatabaseDdlRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace spanner {
namespace admin {
namespace database {
namespace v1 {

enum Database_State : int {
  Database_State_STATE_UNSPECIFIED = 0,
  Database_State_CREATING = 1,
  Database_State_READY = 2,
  Database_State_READY_OPTIMIZING = 3,
  Database_State_Database_State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Database_State_Database_State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Database_State_IsValid(int value);
constexpr Database_State Database_State_State_MIN = Database_State_STATE_UNSPECIFIED;
constexpr Database_State Database_State_State_MAX = Database_State_READY_OPTIMIZING;
constexpr int Database_State_State_ARRAYSIZE = Database_State_State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Database_State_descriptor();
template<typename T>
inline const std::string& Database_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Database_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Database_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Database_State_descriptor(), enum_t_value);
}
inline bool Database_State_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Database_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Database_State>(
    Database_State_descriptor(), name, value);
}
enum RestoreDatabaseEncryptionConfig_EncryptionType : int {
  RestoreDatabaseEncryptionConfig_EncryptionType_ENCRYPTION_TYPE_UNSPECIFIED = 0,
  RestoreDatabaseEncryptionConfig_EncryptionType_USE_CONFIG_DEFAULT_OR_BACKUP_ENCRYPTION = 1,
  RestoreDatabaseEncryptionConfig_EncryptionType_GOOGLE_DEFAULT_ENCRYPTION = 2,
  RestoreDatabaseEncryptionConfig_EncryptionType_CUSTOMER_MANAGED_ENCRYPTION = 3,
  RestoreDatabaseEncryptionConfig_EncryptionType_RestoreDatabaseEncryptionConfig_EncryptionType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RestoreDatabaseEncryptionConfig_EncryptionType_RestoreDatabaseEncryptionConfig_EncryptionType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RestoreDatabaseEncryptionConfig_EncryptionType_IsValid(int value);
constexpr RestoreDatabaseEncryptionConfig_EncryptionType RestoreDatabaseEncryptionConfig_EncryptionType_EncryptionType_MIN = RestoreDatabaseEncryptionConfig_EncryptionType_ENCRYPTION_TYPE_UNSPECIFIED;
constexpr RestoreDatabaseEncryptionConfig_EncryptionType RestoreDatabaseEncryptionConfig_EncryptionType_EncryptionType_MAX = RestoreDatabaseEncryptionConfig_EncryptionType_CUSTOMER_MANAGED_ENCRYPTION;
constexpr int RestoreDatabaseEncryptionConfig_EncryptionType_EncryptionType_ARRAYSIZE = RestoreDatabaseEncryptionConfig_EncryptionType_EncryptionType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RestoreDatabaseEncryptionConfig_EncryptionType_descriptor();
template<typename T>
inline const std::string& RestoreDatabaseEncryptionConfig_EncryptionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RestoreDatabaseEncryptionConfig_EncryptionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RestoreDatabaseEncryptionConfig_EncryptionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RestoreDatabaseEncryptionConfig_EncryptionType_descriptor(), enum_t_value);
}
inline bool RestoreDatabaseEncryptionConfig_EncryptionType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RestoreDatabaseEncryptionConfig_EncryptionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RestoreDatabaseEncryptionConfig_EncryptionType>(
    RestoreDatabaseEncryptionConfig_EncryptionType_descriptor(), name, value);
}
enum RestoreSourceType : int {
  TYPE_UNSPECIFIED = 0,
  BACKUP = 1,
  RestoreSourceType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RestoreSourceType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RestoreSourceType_IsValid(int value);
constexpr RestoreSourceType RestoreSourceType_MIN = TYPE_UNSPECIFIED;
constexpr RestoreSourceType RestoreSourceType_MAX = BACKUP;
constexpr int RestoreSourceType_ARRAYSIZE = RestoreSourceType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RestoreSourceType_descriptor();
template<typename T>
inline const std::string& RestoreSourceType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RestoreSourceType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RestoreSourceType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RestoreSourceType_descriptor(), enum_t_value);
}
inline bool RestoreSourceType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RestoreSourceType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RestoreSourceType>(
    RestoreSourceType_descriptor(), name, value);
}
// ===================================================================

class RestoreInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.spanner.admin.database.v1.RestoreInfo) */ {
 public:
  inline RestoreInfo() : RestoreInfo(nullptr) {}
  virtual ~RestoreInfo();
  explicit constexpr RestoreInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RestoreInfo(const RestoreInfo& from);
  RestoreInfo(RestoreInfo&& from) noexcept
    : RestoreInfo() {
    *this = ::std::move(from);
  }

  inline RestoreInfo& operator=(const RestoreInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RestoreInfo& operator=(RestoreInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RestoreInfo& default_instance() {
    return *internal_default_instance();
  }
  enum SourceInfoCase {
    kBackupInfo = 2,
    SOURCE_INFO_NOT_SET = 0,
  };

  static inline const RestoreInfo* internal_default_instance() {
    return reinterpret_cast<const RestoreInfo*>(
               &_RestoreInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RestoreInfo& a, RestoreInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RestoreInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RestoreInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RestoreInfo* New() const final {
    return CreateMaybeMessage<RestoreInfo>(nullptr);
  }

  RestoreInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RestoreInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RestoreInfo& from);
  void MergeFrom(const RestoreInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RestoreInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.spanner.admin.database.v1.RestoreInfo";
  }
  protected:
  explicit RestoreInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceTypeFieldNumber = 1,
    kBackupInfoFieldNumber = 2,
  };
  // .google.spanner.admin.database.v1.RestoreSourceType source_type = 1;
  void clear_source_type();
  ::google::spanner::admin::database::v1::RestoreSourceType source_type() const;
  void set_source_type(::google::spanner::admin::database::v1::RestoreSourceType value);
  private:
  ::google::spanner::admin::database::v1::RestoreSourceType _internal_source_type() const;
  void _internal_set_source_type(::google::spanner::admin::database::v1::RestoreSourceType value);
  public:

  // .google.spanner.admin.database.v1.BackupInfo backup_info = 2;
  bool has_backup_info() const;
  private:
  bool _internal_has_backup_info() const;
  public:
  void clear_backup_info();
  const ::google::spanner::admin::database::v1::BackupInfo& backup_info() const;
  ::google::spanner::admin::database::v1::BackupInfo* release_backup_info();
  ::google::spanner::admin::database::v1::BackupInfo* mutable_backup_info();
  void set_allocated_backup_info(::google::spanner::admin::database::v1::BackupInfo* backup_info);
  private:
  const ::google::spanner::admin::database::v1::BackupInfo& _internal_backup_info() const;
  ::google::spanner::admin::database::v1::BackupInfo* _internal_mutable_backup_info();
  public:
  void unsafe_arena_set_allocated_backup_info(
      ::google::spanner::admin::database::v1::BackupInfo* backup_info);
  ::google::spanner::admin::database::v1::BackupInfo* unsafe_arena_release_backup_info();

  void clear_source_info();
  SourceInfoCase source_info_case() const;
  // @@protoc_insertion_point(class_scope:google.spanner.admin.database.v1.RestoreInfo)
 private:
  class _Internal;
  void set_has_backup_info();

  inline bool has_source_info() const;
  inline void clear_has_source_info();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int source_type_;
  union SourceInfoUnion {
    constexpr SourceInfoUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::google::spanner::admin::database::v1::BackupInfo* backup_info_;
  } source_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class Database PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.spanner.admin.database.v1.Database) */ {
 public:
  inline Database() : Database(nullptr) {}
  virtual ~Database();
  explicit constexpr Database(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Database(const Database& from);
  Database(Database&& from) noexcept
    : Database() {
    *this = ::std::move(from);
  }

  inline Database& operator=(const Database& from) {
    CopyFrom(from);
    return *this;
  }
  inline Database& operator=(Database&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Database& default_instance() {
    return *internal_default_instance();
  }
  static inline const Database* internal_default_instance() {
    return reinterpret_cast<const Database*>(
               &_Database_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Database& a, Database& b) {
    a.Swap(&b);
  }
  inline void Swap(Database* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Database* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Database* New() const final {
    return CreateMaybeMessage<Database>(nullptr);
  }

  Database* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Database>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Database& from);
  void MergeFrom(const Database& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Database* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.spanner.admin.database.v1.Database";
  }
  protected:
  explicit Database(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef Database_State State;
  static constexpr State STATE_UNSPECIFIED =
    Database_State_STATE_UNSPECIFIED;
  static constexpr State CREATING =
    Database_State_CREATING;
  static constexpr State READY =
    Database_State_READY;
  static constexpr State READY_OPTIMIZING =
    Database_State_READY_OPTIMIZING;
  static inline bool State_IsValid(int value) {
    return Database_State_IsValid(value);
  }
  static constexpr State State_MIN =
    Database_State_State_MIN;
  static constexpr State State_MAX =
    Database_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    Database_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return Database_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return Database_State_Name(enum_t_value);
  }
  static inline bool State_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      State* value) {
    return Database_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEncryptionInfoFieldNumber = 8,
    kNameFieldNumber = 1,
    kVersionRetentionPeriodFieldNumber = 6,
    kDefaultLeaderFieldNumber = 9,
    kCreateTimeFieldNumber = 3,
    kRestoreInfoFieldNumber = 4,
    kEncryptionConfigFieldNumber = 5,
    kEarliestVersionTimeFieldNumber = 7,
    kStateFieldNumber = 2,
  };
  // repeated .google.spanner.admin.database.v1.EncryptionInfo encryption_info = 8 [(.google.api.field_behavior) = OUTPUT_ONLY];
  int encryption_info_size() const;
  private:
  int _internal_encryption_info_size() const;
  public:
  void clear_encryption_info();
  ::google::spanner::admin::database::v1::EncryptionInfo* mutable_encryption_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::spanner::admin::database::v1::EncryptionInfo >*
      mutable_encryption_info();
  private:
  const ::google::spanner::admin::database::v1::EncryptionInfo& _internal_encryption_info(int index) const;
  ::google::spanner::admin::database::v1::EncryptionInfo* _internal_add_encryption_info();
  public:
  const ::google::spanner::admin::database::v1::EncryptionInfo& encryption_info(int index) const;
  ::google::spanner::admin::database::v1::EncryptionInfo* add_encryption_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::spanner::admin::database::v1::EncryptionInfo >&
      encryption_info() const;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string version_retention_period = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_version_retention_period();
  const std::string& version_retention_period() const;
  void set_version_retention_period(const std::string& value);
  void set_version_retention_period(std::string&& value);
  void set_version_retention_period(const char* value);
  void set_version_retention_period(const char* value, size_t size);
  std::string* mutable_version_retention_period();
  std::string* release_version_retention_period();
  void set_allocated_version_retention_period(std::string* version_retention_period);
  private:
  const std::string& _internal_version_retention_period() const;
  void _internal_set_version_retention_period(const std::string& value);
  std::string* _internal_mutable_version_retention_period();
  public:

  // string default_leader = 9 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_default_leader();
  const std::string& default_leader() const;
  void set_default_leader(const std::string& value);
  void set_default_leader(std::string&& value);
  void set_default_leader(const char* value);
  void set_default_leader(const char* value, size_t size);
  std::string* mutable_default_leader();
  std::string* release_default_leader();
  void set_allocated_default_leader(std::string* default_leader);
  private:
  const std::string& _internal_default_leader() const;
  void _internal_set_default_leader(const std::string& value);
  std::string* _internal_mutable_default_leader();
  public:

  // .google.protobuf.Timestamp create_time = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_create_time() const;
  private:
  bool _internal_has_create_time() const;
  public:
  void clear_create_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& create_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_create_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_create_time();
  void set_allocated_create_time(PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_create_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_create_time();
  public:
  void unsafe_arena_set_allocated_create_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_create_time();

  // .google.spanner.admin.database.v1.RestoreInfo restore_info = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_restore_info() const;
  private:
  bool _internal_has_restore_info() const;
  public:
  void clear_restore_info();
  const ::google::spanner::admin::database::v1::RestoreInfo& restore_info() const;
  ::google::spanner::admin::database::v1::RestoreInfo* release_restore_info();
  ::google::spanner::admin::database::v1::RestoreInfo* mutable_restore_info();
  void set_allocated_restore_info(::google::spanner::admin::database::v1::RestoreInfo* restore_info);
  private:
  const ::google::spanner::admin::database::v1::RestoreInfo& _internal_restore_info() const;
  ::google::spanner::admin::database::v1::RestoreInfo* _internal_mutable_restore_info();
  public:
  void unsafe_arena_set_allocated_restore_info(
      ::google::spanner::admin::database::v1::RestoreInfo* restore_info);
  ::google::spanner::admin::database::v1::RestoreInfo* unsafe_arena_release_restore_info();

  // .google.spanner.admin.database.v1.EncryptionConfig encryption_config = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_encryption_config() const;
  private:
  bool _internal_has_encryption_config() const;
  public:
  void clear_encryption_config();
  const ::google::spanner::admin::database::v1::EncryptionConfig& encryption_config() const;
  ::google::spanner::admin::database::v1::EncryptionConfig* release_encryption_config();
  ::google::spanner::admin::database::v1::EncryptionConfig* mutable_encryption_config();
  void set_allocated_encryption_config(::google::spanner::admin::database::v1::EncryptionConfig* encryption_config);
  private:
  const ::google::spanner::admin::database::v1::EncryptionConfig& _internal_encryption_config() const;
  ::google::spanner::admin::database::v1::EncryptionConfig* _internal_mutable_encryption_config();
  public:
  void unsafe_arena_set_allocated_encryption_config(
      ::google::spanner::admin::database::v1::EncryptionConfig* encryption_config);
  ::google::spanner::admin::database::v1::EncryptionConfig* unsafe_arena_release_encryption_config();

  // .google.protobuf.Timestamp earliest_version_time = 7 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_earliest_version_time() const;
  private:
  bool _internal_has_earliest_version_time() const;
  public:
  void clear_earliest_version_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& earliest_version_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_earliest_version_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_earliest_version_time();
  void set_allocated_earliest_version_time(PROTOBUF_NAMESPACE_ID::Timestamp* earliest_version_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_earliest_version_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_earliest_version_time();
  public:
  void unsafe_arena_set_allocated_earliest_version_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* earliest_version_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_earliest_version_time();

  // .google.spanner.admin.database.v1.Database.State state = 2 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_state();
  ::google::spanner::admin::database::v1::Database_State state() const;
  void set_state(::google::spanner::admin::database::v1::Database_State value);
  private:
  ::google::spanner::admin::database::v1::Database_State _internal_state() const;
  void _internal_set_state(::google::spanner::admin::database::v1::Database_State value);
  public:

  // @@protoc_insertion_point(class_scope:google.spanner.admin.database.v1.Database)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::spanner::admin::database::v1::EncryptionInfo > encryption_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_retention_period_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr default_leader_;
  PROTOBUF_NAMESPACE_ID::Timestamp* create_time_;
  ::google::spanner::admin::database::v1::RestoreInfo* restore_info_;
  ::google::spanner::admin::database::v1::EncryptionConfig* encryption_config_;
  PROTOBUF_NAMESPACE_ID::Timestamp* earliest_version_time_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class ListDatabasesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.spanner.admin.database.v1.ListDatabasesRequest) */ {
 public:
  inline ListDatabasesRequest() : ListDatabasesRequest(nullptr) {}
  virtual ~ListDatabasesRequest();
  explicit constexpr ListDatabasesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListDatabasesRequest(const ListDatabasesRequest& from);
  ListDatabasesRequest(ListDatabasesRequest&& from) noexcept
    : ListDatabasesRequest() {
    *this = ::std::move(from);
  }

  inline ListDatabasesRequest& operator=(const ListDatabasesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListDatabasesRequest& operator=(ListDatabasesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListDatabasesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListDatabasesRequest* internal_default_instance() {
    return reinterpret_cast<const ListDatabasesRequest*>(
               &_ListDatabasesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ListDatabasesRequest& a, ListDatabasesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListDatabasesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListDatabasesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListDatabasesRequest* New() const final {
    return CreateMaybeMessage<ListDatabasesRequest>(nullptr);
  }

  ListDatabasesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListDatabasesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListDatabasesRequest& from);
  void MergeFrom(const ListDatabasesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListDatabasesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.spanner.admin.database.v1.ListDatabasesRequest";
  }
  protected:
  explicit ListDatabasesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 4,
    kPageSizeFieldNumber = 3,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  void set_parent(const std::string& value);
  void set_parent(std::string&& value);
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  std::string* mutable_parent();
  std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 4;
  void clear_page_token();
  const std::string& page_token() const;
  void set_page_token(const std::string& value);
  void set_page_token(std::string&& value);
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  std::string* mutable_page_token();
  std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 3;
  void clear_page_size();
  ::PROTOBUF_NAMESPACE_ID::int32 page_size() const;
  void set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_page_size() const;
  void _internal_set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:google.spanner.admin.database.v1.ListDatabasesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
  ::PROTOBUF_NAMESPACE_ID::int32 page_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class ListDatabasesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.spanner.admin.database.v1.ListDatabasesResponse) */ {
 public:
  inline ListDatabasesResponse() : ListDatabasesResponse(nullptr) {}
  virtual ~ListDatabasesResponse();
  explicit constexpr ListDatabasesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListDatabasesResponse(const ListDatabasesResponse& from);
  ListDatabasesResponse(ListDatabasesResponse&& from) noexcept
    : ListDatabasesResponse() {
    *this = ::std::move(from);
  }

  inline ListDatabasesResponse& operator=(const ListDatabasesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListDatabasesResponse& operator=(ListDatabasesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListDatabasesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListDatabasesResponse* internal_default_instance() {
    return reinterpret_cast<const ListDatabasesResponse*>(
               &_ListDatabasesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ListDatabasesResponse& a, ListDatabasesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListDatabasesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListDatabasesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListDatabasesResponse* New() const final {
    return CreateMaybeMessage<ListDatabasesResponse>(nullptr);
  }

  ListDatabasesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListDatabasesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListDatabasesResponse& from);
  void MergeFrom(const ListDatabasesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListDatabasesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.spanner.admin.database.v1.ListDatabasesResponse";
  }
  protected:
  explicit ListDatabasesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatabasesFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .google.spanner.admin.database.v1.Database databases = 1;
  int databases_size() const;
  private:
  int _internal_databases_size() const;
  public:
  void clear_databases();
  ::google::spanner::admin::database::v1::Database* mutable_databases(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::spanner::admin::database::v1::Database >*
      mutable_databases();
  private:
  const ::google::spanner::admin::database::v1::Database& _internal_databases(int index) const;
  ::google::spanner::admin::database::v1::Database* _internal_add_databases();
  public:
  const ::google::spanner::admin::database::v1::Database& databases(int index) const;
  ::google::spanner::admin::database::v1::Database* add_databases();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::spanner::admin::database::v1::Database >&
      databases() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  void set_next_page_token(const std::string& value);
  void set_next_page_token(std::string&& value);
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  std::string* mutable_next_page_token();
  std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:google.spanner.admin.database.v1.ListDatabasesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::spanner::admin::database::v1::Database > databases_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class CreateDatabaseRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.spanner.admin.database.v1.CreateDatabaseRequest) */ {
 public:
  inline CreateDatabaseRequest() : CreateDatabaseRequest(nullptr) {}
  virtual ~CreateDatabaseRequest();
  explicit constexpr CreateDatabaseRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateDatabaseRequest(const CreateDatabaseRequest& from);
  CreateDatabaseRequest(CreateDatabaseRequest&& from) noexcept
    : CreateDatabaseRequest() {
    *this = ::std::move(from);
  }

  inline CreateDatabaseRequest& operator=(const CreateDatabaseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateDatabaseRequest& operator=(CreateDatabaseRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateDatabaseRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateDatabaseRequest* internal_default_instance() {
    return reinterpret_cast<const CreateDatabaseRequest*>(
               &_CreateDatabaseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CreateDatabaseRequest& a, CreateDatabaseRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateDatabaseRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateDatabaseRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateDatabaseRequest* New() const final {
    return CreateMaybeMessage<CreateDatabaseRequest>(nullptr);
  }

  CreateDatabaseRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateDatabaseRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateDatabaseRequest& from);
  void MergeFrom(const CreateDatabaseRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateDatabaseRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.spanner.admin.database.v1.CreateDatabaseRequest";
  }
  protected:
  explicit CreateDatabaseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtraStatementsFieldNumber = 3,
    kParentFieldNumber = 1,
    kCreateStatementFieldNumber = 2,
    kEncryptionConfigFieldNumber = 4,
  };
  // repeated string extra_statements = 3 [(.google.api.field_behavior) = OPTIONAL];
  int extra_statements_size() const;
  private:
  int _internal_extra_statements_size() const;
  public:
  void clear_extra_statements();
  const std::string& extra_statements(int index) const;
  std::string* mutable_extra_statements(int index);
  void set_extra_statements(int index, const std::string& value);
  void set_extra_statements(int index, std::string&& value);
  void set_extra_statements(int index, const char* value);
  void set_extra_statements(int index, const char* value, size_t size);
  std::string* add_extra_statements();
  void add_extra_statements(const std::string& value);
  void add_extra_statements(std::string&& value);
  void add_extra_statements(const char* value);
  void add_extra_statements(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& extra_statements() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_extra_statements();
  private:
  const std::string& _internal_extra_statements(int index) const;
  std::string* _internal_add_extra_statements();
  public:

  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  void set_parent(const std::string& value);
  void set_parent(std::string&& value);
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  std::string* mutable_parent();
  std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string create_statement = 2 [(.google.api.field_behavior) = REQUIRED];
  void clear_create_statement();
  const std::string& create_statement() const;
  void set_create_statement(const std::string& value);
  void set_create_statement(std::string&& value);
  void set_create_statement(const char* value);
  void set_create_statement(const char* value, size_t size);
  std::string* mutable_create_statement();
  std::string* release_create_statement();
  void set_allocated_create_statement(std::string* create_statement);
  private:
  const std::string& _internal_create_statement() const;
  void _internal_set_create_statement(const std::string& value);
  std::string* _internal_mutable_create_statement();
  public:

  // .google.spanner.admin.database.v1.EncryptionConfig encryption_config = 4 [(.google.api.field_behavior) = OPTIONAL];
  bool has_encryption_config() const;
  private:
  bool _internal_has_encryption_config() const;
  public:
  void clear_encryption_config();
  const ::google::spanner::admin::database::v1::EncryptionConfig& encryption_config() const;
  ::google::spanner::admin::database::v1::EncryptionConfig* release_encryption_config();
  ::google::spanner::admin::database::v1::EncryptionConfig* mutable_encryption_config();
  void set_allocated_encryption_config(::google::spanner::admin::database::v1::EncryptionConfig* encryption_config);
  private:
  const ::google::spanner::admin::database::v1::EncryptionConfig& _internal_encryption_config() const;
  ::google::spanner::admin::database::v1::EncryptionConfig* _internal_mutable_encryption_config();
  public:
  void unsafe_arena_set_allocated_encryption_config(
      ::google::spanner::admin::database::v1::EncryptionConfig* encryption_config);
  ::google::spanner::admin::database::v1::EncryptionConfig* unsafe_arena_release_encryption_config();

  // @@protoc_insertion_point(class_scope:google.spanner.admin.database.v1.CreateDatabaseRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> extra_statements_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr create_statement_;
  ::google::spanner::admin::database::v1::EncryptionConfig* encryption_config_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class CreateDatabaseMetadata PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.spanner.admin.database.v1.CreateDatabaseMetadata) */ {
 public:
  inline CreateDatabaseMetadata() : CreateDatabaseMetadata(nullptr) {}
  virtual ~CreateDatabaseMetadata();
  explicit constexpr CreateDatabaseMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateDatabaseMetadata(const CreateDatabaseMetadata& from);
  CreateDatabaseMetadata(CreateDatabaseMetadata&& from) noexcept
    : CreateDatabaseMetadata() {
    *this = ::std::move(from);
  }

  inline CreateDatabaseMetadata& operator=(const CreateDatabaseMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateDatabaseMetadata& operator=(CreateDatabaseMetadata&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateDatabaseMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateDatabaseMetadata* internal_default_instance() {
    return reinterpret_cast<const CreateDatabaseMetadata*>(
               &_CreateDatabaseMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CreateDatabaseMetadata& a, CreateDatabaseMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateDatabaseMetadata* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateDatabaseMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateDatabaseMetadata* New() const final {
    return CreateMaybeMessage<CreateDatabaseMetadata>(nullptr);
  }

  CreateDatabaseMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateDatabaseMetadata>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateDatabaseMetadata& from);
  void MergeFrom(const CreateDatabaseMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateDatabaseMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.spanner.admin.database.v1.CreateDatabaseMetadata";
  }
  protected:
  explicit CreateDatabaseMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatabaseFieldNumber = 1,
  };
  // string database = 1 [(.google.api.resource_reference) = {
  void clear_database();
  const std::string& database() const;
  void set_database(const std::string& value);
  void set_database(std::string&& value);
  void set_database(const char* value);
  void set_database(const char* value, size_t size);
  std::string* mutable_database();
  std::string* release_database();
  void set_allocated_database(std::string* database);
  private:
  const std::string& _internal_database() const;
  void _internal_set_database(const std::string& value);
  std::string* _internal_mutable_database();
  public:

  // @@protoc_insertion_point(class_scope:google.spanner.admin.database.v1.CreateDatabaseMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr database_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class GetDatabaseRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.spanner.admin.database.v1.GetDatabaseRequest) */ {
 public:
  inline GetDatabaseRequest() : GetDatabaseRequest(nullptr) {}
  virtual ~GetDatabaseRequest();
  explicit constexpr GetDatabaseRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetDatabaseRequest(const GetDatabaseRequest& from);
  GetDatabaseRequest(GetDatabaseRequest&& from) noexcept
    : GetDatabaseRequest() {
    *this = ::std::move(from);
  }

  inline GetDatabaseRequest& operator=(const GetDatabaseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDatabaseRequest& operator=(GetDatabaseRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDatabaseRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetDatabaseRequest* internal_default_instance() {
    return reinterpret_cast<const GetDatabaseRequest*>(
               &_GetDatabaseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetDatabaseRequest& a, GetDatabaseRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDatabaseRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDatabaseRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDatabaseRequest* New() const final {
    return CreateMaybeMessage<GetDatabaseRequest>(nullptr);
  }

  GetDatabaseRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDatabaseRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDatabaseRequest& from);
  void MergeFrom(const GetDatabaseRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDatabaseRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.spanner.admin.database.v1.GetDatabaseRequest";
  }
  protected:
  explicit GetDatabaseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.spanner.admin.database.v1.GetDatabaseRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class UpdateDatabaseDdlRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest) */ {
 public:
  inline UpdateDatabaseDdlRequest() : UpdateDatabaseDdlRequest(nullptr) {}
  virtual ~UpdateDatabaseDdlRequest();
  explicit constexpr UpdateDatabaseDdlRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateDatabaseDdlRequest(const UpdateDatabaseDdlRequest& from);
  UpdateDatabaseDdlRequest(UpdateDatabaseDdlRequest&& from) noexcept
    : UpdateDatabaseDdlRequest() {
    *this = ::std::move(from);
  }

  inline UpdateDatabaseDdlRequest& operator=(const UpdateDatabaseDdlRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateDatabaseDdlRequest& operator=(UpdateDatabaseDdlRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateDatabaseDdlRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateDatabaseDdlRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateDatabaseDdlRequest*>(
               &_UpdateDatabaseDdlRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UpdateDatabaseDdlRequest& a, UpdateDatabaseDdlRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateDatabaseDdlRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateDatabaseDdlRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateDatabaseDdlRequest* New() const final {
    return CreateMaybeMessage<UpdateDatabaseDdlRequest>(nullptr);
  }

  UpdateDatabaseDdlRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateDatabaseDdlRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateDatabaseDdlRequest& from);
  void MergeFrom(const UpdateDatabaseDdlRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateDatabaseDdlRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.spanner.admin.database.v1.UpdateDatabaseDdlRequest";
  }
  protected:
  explicit UpdateDatabaseDdlRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatementsFieldNumber = 2,
    kDatabaseFieldNumber = 1,
    kOperationIdFieldNumber = 3,
  };
  // repeated string statements = 2 [(.google.api.field_behavior) = REQUIRED];
  int statements_size() const;
  private:
  int _internal_statements_size() const;
  public:
  void clear_statements();
  const std::string& statements(int index) const;
  std::string* mutable_statements(int index);
  void set_statements(int index, const std::string& value);
  void set_statements(int index, std::string&& value);
  void set_statements(int index, const char* value);
  void set_statements(int index, const char* value, size_t size);
  std::string* add_statements();
  void add_statements(const std::string& value);
  void add_statements(std::string&& value);
  void add_statements(const char* value);
  void add_statements(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& statements() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_statements();
  private:
  const std::string& _internal_statements(int index) const;
  std::string* _internal_add_statements();
  public:

  // string database = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_database();
  const std::string& database() const;
  void set_database(const std::string& value);
  void set_database(std::string&& value);
  void set_database(const char* value);
  void set_database(const char* value, size_t size);
  std::string* mutable_database();
  std::string* release_database();
  void set_allocated_database(std::string* database);
  private:
  const std::string& _internal_database() const;
  void _internal_set_database(const std::string& value);
  std::string* _internal_mutable_database();
  public:

  // string operation_id = 3;
  void clear_operation_id();
  const std::string& operation_id() const;
  void set_operation_id(const std::string& value);
  void set_operation_id(std::string&& value);
  void set_operation_id(const char* value);
  void set_operation_id(const char* value, size_t size);
  std::string* mutable_operation_id();
  std::string* release_operation_id();
  void set_allocated_operation_id(std::string* operation_id);
  private:
  const std::string& _internal_operation_id() const;
  void _internal_set_operation_id(const std::string& value);
  std::string* _internal_mutable_operation_id();
  public:

  // @@protoc_insertion_point(class_scope:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> statements_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr database_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr operation_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class UpdateDatabaseDdlMetadata PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata) */ {
 public:
  inline UpdateDatabaseDdlMetadata() : UpdateDatabaseDdlMetadata(nullptr) {}
  virtual ~UpdateDatabaseDdlMetadata();
  explicit constexpr UpdateDatabaseDdlMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateDatabaseDdlMetadata(const UpdateDatabaseDdlMetadata& from);
  UpdateDatabaseDdlMetadata(UpdateDatabaseDdlMetadata&& from) noexcept
    : UpdateDatabaseDdlMetadata() {
    *this = ::std::move(from);
  }

  inline UpdateDatabaseDdlMetadata& operator=(const UpdateDatabaseDdlMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateDatabaseDdlMetadata& operator=(UpdateDatabaseDdlMetadata&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateDatabaseDdlMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateDatabaseDdlMetadata* internal_default_instance() {
    return reinterpret_cast<const UpdateDatabaseDdlMetadata*>(
               &_UpdateDatabaseDdlMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(UpdateDatabaseDdlMetadata& a, UpdateDatabaseDdlMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateDatabaseDdlMetadata* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateDatabaseDdlMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateDatabaseDdlMetadata* New() const final {
    return CreateMaybeMessage<UpdateDatabaseDdlMetadata>(nullptr);
  }

  UpdateDatabaseDdlMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateDatabaseDdlMetadata>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateDatabaseDdlMetadata& from);
  void MergeFrom(const UpdateDatabaseDdlMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateDatabaseDdlMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata";
  }
  protected:
  explicit UpdateDatabaseDdlMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatementsFieldNumber = 2,
    kCommitTimestampsFieldNumber = 3,
    kProgressFieldNumber = 5,
    kDatabaseFieldNumber = 1,
    kThrottledFieldNumber = 4,
  };
  // repeated string statements = 2;
  int statements_size() const;
  private:
  int _internal_statements_size() const;
  public:
  void clear_statements();
  const std::string& statements(int index) const;
  std::string* mutable_statements(int index);
  void set_statements(int index, const std::string& value);
  void set_statements(int index, std::string&& value);
  void set_statements(int index, const char* value);
  void set_statements(int index, const char* value, size_t size);
  std::string* add_statements();
  void add_statements(const std::string& value);
  void add_statements(std::string&& value);
  void add_statements(const char* value);
  void add_statements(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& statements() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_statements();
  private:
  const std::string& _internal_statements(int index) const;
  std::string* _internal_add_statements();
  public:

  // repeated .google.protobuf.Timestamp commit_timestamps = 3;
  int commit_timestamps_size() const;
  private:
  int _internal_commit_timestamps_size() const;
  public:
  void clear_commit_timestamps();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_commit_timestamps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Timestamp >*
      mutable_commit_timestamps();
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_commit_timestamps(int index) const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_add_commit_timestamps();
  public:
  const PROTOBUF_NAMESPACE_ID::Timestamp& commit_timestamps(int index) const;
  PROTOBUF_NAMESPACE_ID::Timestamp* add_commit_timestamps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Timestamp >&
      commit_timestamps() const;

  // repeated .google.spanner.admin.database.v1.OperationProgress progress = 5;
  int progress_size() const;
  private:
  int _internal_progress_size() const;
  public:
  void clear_progress();
  ::google::spanner::admin::database::v1::OperationProgress* mutable_progress(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::spanner::admin::database::v1::OperationProgress >*
      mutable_progress();
  private:
  const ::google::spanner::admin::database::v1::OperationProgress& _internal_progress(int index) const;
  ::google::spanner::admin::database::v1::OperationProgress* _internal_add_progress();
  public:
  const ::google::spanner::admin::database::v1::OperationProgress& progress(int index) const;
  ::google::spanner::admin::database::v1::OperationProgress* add_progress();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::spanner::admin::database::v1::OperationProgress >&
      progress() const;

  // string database = 1 [(.google.api.resource_reference) = {
  void clear_database();
  const std::string& database() const;
  void set_database(const std::string& value);
  void set_database(std::string&& value);
  void set_database(const char* value);
  void set_database(const char* value, size_t size);
  std::string* mutable_database();
  std::string* release_database();
  void set_allocated_database(std::string* database);
  private:
  const std::string& _internal_database() const;
  void _internal_set_database(const std::string& value);
  std::string* _internal_mutable_database();
  public:

  // bool throttled = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_throttled();
  bool throttled() const;
  void set_throttled(bool value);
  private:
  bool _internal_throttled() const;
  void _internal_set_throttled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> statements_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Timestamp > commit_timestamps_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::spanner::admin::database::v1::OperationProgress > progress_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr database_;
  bool throttled_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class DropDatabaseRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.spanner.admin.database.v1.DropDatabaseRequest) */ {
 public:
  inline DropDatabaseRequest() : DropDatabaseRequest(nullptr) {}
  virtual ~DropDatabaseRequest();
  explicit constexpr DropDatabaseRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DropDatabaseRequest(const DropDatabaseRequest& from);
  DropDatabaseRequest(DropDatabaseRequest&& from) noexcept
    : DropDatabaseRequest() {
    *this = ::std::move(from);
  }

  inline DropDatabaseRequest& operator=(const DropDatabaseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DropDatabaseRequest& operator=(DropDatabaseRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DropDatabaseRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DropDatabaseRequest* internal_default_instance() {
    return reinterpret_cast<const DropDatabaseRequest*>(
               &_DropDatabaseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DropDatabaseRequest& a, DropDatabaseRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DropDatabaseRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DropDatabaseRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DropDatabaseRequest* New() const final {
    return CreateMaybeMessage<DropDatabaseRequest>(nullptr);
  }

  DropDatabaseRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DropDatabaseRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DropDatabaseRequest& from);
  void MergeFrom(const DropDatabaseRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DropDatabaseRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.spanner.admin.database.v1.DropDatabaseRequest";
  }
  protected:
  explicit DropDatabaseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatabaseFieldNumber = 1,
  };
  // string database = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_database();
  const std::string& database() const;
  void set_database(const std::string& value);
  void set_database(std::string&& value);
  void set_database(const char* value);
  void set_database(const char* value, size_t size);
  std::string* mutable_database();
  std::string* release_database();
  void set_allocated_database(std::string* database);
  private:
  const std::string& _internal_database() const;
  void _internal_set_database(const std::string& value);
  std::string* _internal_mutable_database();
  public:

  // @@protoc_insertion_point(class_scope:google.spanner.admin.database.v1.DropDatabaseRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr database_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class GetDatabaseDdlRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.spanner.admin.database.v1.GetDatabaseDdlRequest) */ {
 public:
  inline GetDatabaseDdlRequest() : GetDatabaseDdlRequest(nullptr) {}
  virtual ~GetDatabaseDdlRequest();
  explicit constexpr GetDatabaseDdlRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetDatabaseDdlRequest(const GetDatabaseDdlRequest& from);
  GetDatabaseDdlRequest(GetDatabaseDdlRequest&& from) noexcept
    : GetDatabaseDdlRequest() {
    *this = ::std::move(from);
  }

  inline GetDatabaseDdlRequest& operator=(const GetDatabaseDdlRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDatabaseDdlRequest& operator=(GetDatabaseDdlRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDatabaseDdlRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetDatabaseDdlRequest* internal_default_instance() {
    return reinterpret_cast<const GetDatabaseDdlRequest*>(
               &_GetDatabaseDdlRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GetDatabaseDdlRequest& a, GetDatabaseDdlRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDatabaseDdlRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDatabaseDdlRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDatabaseDdlRequest* New() const final {
    return CreateMaybeMessage<GetDatabaseDdlRequest>(nullptr);
  }

  GetDatabaseDdlRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDatabaseDdlRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDatabaseDdlRequest& from);
  void MergeFrom(const GetDatabaseDdlRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDatabaseDdlRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.spanner.admin.database.v1.GetDatabaseDdlRequest";
  }
  protected:
  explicit GetDatabaseDdlRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatabaseFieldNumber = 1,
  };
  // string database = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_database();
  const std::string& database() const;
  void set_database(const std::string& value);
  void set_database(std::string&& value);
  void set_database(const char* value);
  void set_database(const char* value, size_t size);
  std::string* mutable_database();
  std::string* release_database();
  void set_allocated_database(std::string* database);
  private:
  const std::string& _internal_database() const;
  void _internal_set_database(const std::string& value);
  std::string* _internal_mutable_database();
  public:

  // @@protoc_insertion_point(class_scope:google.spanner.admin.database.v1.GetDatabaseDdlRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr database_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class GetDatabaseDdlResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.spanner.admin.database.v1.GetDatabaseDdlResponse) */ {
 public:
  inline GetDatabaseDdlResponse() : GetDatabaseDdlResponse(nullptr) {}
  virtual ~GetDatabaseDdlResponse();
  explicit constexpr GetDatabaseDdlResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetDatabaseDdlResponse(const GetDatabaseDdlResponse& from);
  GetDatabaseDdlResponse(GetDatabaseDdlResponse&& from) noexcept
    : GetDatabaseDdlResponse() {
    *this = ::std::move(from);
  }

  inline GetDatabaseDdlResponse& operator=(const GetDatabaseDdlResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDatabaseDdlResponse& operator=(GetDatabaseDdlResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDatabaseDdlResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetDatabaseDdlResponse* internal_default_instance() {
    return reinterpret_cast<const GetDatabaseDdlResponse*>(
               &_GetDatabaseDdlResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GetDatabaseDdlResponse& a, GetDatabaseDdlResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDatabaseDdlResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDatabaseDdlResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDatabaseDdlResponse* New() const final {
    return CreateMaybeMessage<GetDatabaseDdlResponse>(nullptr);
  }

  GetDatabaseDdlResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDatabaseDdlResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDatabaseDdlResponse& from);
  void MergeFrom(const GetDatabaseDdlResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDatabaseDdlResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.spanner.admin.database.v1.GetDatabaseDdlResponse";
  }
  protected:
  explicit GetDatabaseDdlResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatementsFieldNumber = 1,
  };
  // repeated string statements = 1;
  int statements_size() const;
  private:
  int _internal_statements_size() const;
  public:
  void clear_statements();
  const std::string& statements(int index) const;
  std::string* mutable_statements(int index);
  void set_statements(int index, const std::string& value);
  void set_statements(int index, std::string&& value);
  void set_statements(int index, const char* value);
  void set_statements(int index, const char* value, size_t size);
  std::string* add_statements();
  void add_statements(const std::string& value);
  void add_statements(std::string&& value);
  void add_statements(const char* value);
  void add_statements(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& statements() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_statements();
  private:
  const std::string& _internal_statements(int index) const;
  std::string* _internal_add_statements();
  public:

  // @@protoc_insertion_point(class_scope:google.spanner.admin.database.v1.GetDatabaseDdlResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> statements_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class ListDatabaseOperationsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.spanner.admin.database.v1.ListDatabaseOperationsRequest) */ {
 public:
  inline ListDatabaseOperationsRequest() : ListDatabaseOperationsRequest(nullptr) {}
  virtual ~ListDatabaseOperationsRequest();
  explicit constexpr ListDatabaseOperationsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListDatabaseOperationsRequest(const ListDatabaseOperationsRequest& from);
  ListDatabaseOperationsRequest(ListDatabaseOperationsRequest&& from) noexcept
    : ListDatabaseOperationsRequest() {
    *this = ::std::move(from);
  }

  inline ListDatabaseOperationsRequest& operator=(const ListDatabaseOperationsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListDatabaseOperationsRequest& operator=(ListDatabaseOperationsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListDatabaseOperationsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListDatabaseOperationsRequest* internal_default_instance() {
    return reinterpret_cast<const ListDatabaseOperationsRequest*>(
               &_ListDatabaseOperationsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ListDatabaseOperationsRequest& a, ListDatabaseOperationsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListDatabaseOperationsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListDatabaseOperationsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListDatabaseOperationsRequest* New() const final {
    return CreateMaybeMessage<ListDatabaseOperationsRequest>(nullptr);
  }

  ListDatabaseOperationsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListDatabaseOperationsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListDatabaseOperationsRequest& from);
  void MergeFrom(const ListDatabaseOperationsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListDatabaseOperationsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.spanner.admin.database.v1.ListDatabaseOperationsRequest";
  }
  protected:
  explicit ListDatabaseOperationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kFilterFieldNumber = 2,
    kPageTokenFieldNumber = 4,
    kPageSizeFieldNumber = 3,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  void set_parent(const std::string& value);
  void set_parent(std::string&& value);
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  std::string* mutable_parent();
  std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string filter = 2;
  void clear_filter();
  const std::string& filter() const;
  void set_filter(const std::string& value);
  void set_filter(std::string&& value);
  void set_filter(const char* value);
  void set_filter(const char* value, size_t size);
  std::string* mutable_filter();
  std::string* release_filter();
  void set_allocated_filter(std::string* filter);
  private:
  const std::string& _internal_filter() const;
  void _internal_set_filter(const std::string& value);
  std::string* _internal_mutable_filter();
  public:

  // string page_token = 4;
  void clear_page_token();
  const std::string& page_token() const;
  void set_page_token(const std::string& value);
  void set_page_token(std::string&& value);
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  std::string* mutable_page_token();
  std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 3;
  void clear_page_size();
  ::PROTOBUF_NAMESPACE_ID::int32 page_size() const;
  void set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_page_size() const;
  void _internal_set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:google.spanner.admin.database.v1.ListDatabaseOperationsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filter_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
  ::PROTOBUF_NAMESPACE_ID::int32 page_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class ListDatabaseOperationsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.spanner.admin.database.v1.ListDatabaseOperationsResponse) */ {
 public:
  inline ListDatabaseOperationsResponse() : ListDatabaseOperationsResponse(nullptr) {}
  virtual ~ListDatabaseOperationsResponse();
  explicit constexpr ListDatabaseOperationsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListDatabaseOperationsResponse(const ListDatabaseOperationsResponse& from);
  ListDatabaseOperationsResponse(ListDatabaseOperationsResponse&& from) noexcept
    : ListDatabaseOperationsResponse() {
    *this = ::std::move(from);
  }

  inline ListDatabaseOperationsResponse& operator=(const ListDatabaseOperationsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListDatabaseOperationsResponse& operator=(ListDatabaseOperationsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListDatabaseOperationsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListDatabaseOperationsResponse* internal_default_instance() {
    return reinterpret_cast<const ListDatabaseOperationsResponse*>(
               &_ListDatabaseOperationsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ListDatabaseOperationsResponse& a, ListDatabaseOperationsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListDatabaseOperationsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListDatabaseOperationsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListDatabaseOperationsResponse* New() const final {
    return CreateMaybeMessage<ListDatabaseOperationsResponse>(nullptr);
  }

  ListDatabaseOperationsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListDatabaseOperationsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListDatabaseOperationsResponse& from);
  void MergeFrom(const ListDatabaseOperationsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListDatabaseOperationsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.spanner.admin.database.v1.ListDatabaseOperationsResponse";
  }
  protected:
  explicit ListDatabaseOperationsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOperationsFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .google.longrunning.Operation operations = 1;
  int operations_size() const;
  private:
  int _internal_operations_size() const;
  public:
  void clear_operations();
  ::google::longrunning::Operation* mutable_operations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::longrunning::Operation >*
      mutable_operations();
  private:
  const ::google::longrunning::Operation& _internal_operations(int index) const;
  ::google::longrunning::Operation* _internal_add_operations();
  public:
  const ::google::longrunning::Operation& operations(int index) const;
  ::google::longrunning::Operation* add_operations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::longrunning::Operation >&
      operations() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  void set_next_page_token(const std::string& value);
  void set_next_page_token(std::string&& value);
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  std::string* mutable_next_page_token();
  std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:google.spanner.admin.database.v1.ListDatabaseOperationsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::longrunning::Operation > operations_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class RestoreDatabaseRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.spanner.admin.database.v1.RestoreDatabaseRequest) */ {
 public:
  inline RestoreDatabaseRequest() : RestoreDatabaseRequest(nullptr) {}
  virtual ~RestoreDatabaseRequest();
  explicit constexpr RestoreDatabaseRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RestoreDatabaseRequest(const RestoreDatabaseRequest& from);
  RestoreDatabaseRequest(RestoreDatabaseRequest&& from) noexcept
    : RestoreDatabaseRequest() {
    *this = ::std::move(from);
  }

  inline RestoreDatabaseRequest& operator=(const RestoreDatabaseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RestoreDatabaseRequest& operator=(RestoreDatabaseRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RestoreDatabaseRequest& default_instance() {
    return *internal_default_instance();
  }
  enum SourceCase {
    kBackup = 3,
    SOURCE_NOT_SET = 0,
  };

  static inline const RestoreDatabaseRequest* internal_default_instance() {
    return reinterpret_cast<const RestoreDatabaseRequest*>(
               &_RestoreDatabaseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(RestoreDatabaseRequest& a, RestoreDatabaseRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RestoreDatabaseRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RestoreDatabaseRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RestoreDatabaseRequest* New() const final {
    return CreateMaybeMessage<RestoreDatabaseRequest>(nullptr);
  }

  RestoreDatabaseRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RestoreDatabaseRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RestoreDatabaseRequest& from);
  void MergeFrom(const RestoreDatabaseRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RestoreDatabaseRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.spanner.admin.database.v1.RestoreDatabaseRequest";
  }
  protected:
  explicit RestoreDatabaseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kDatabaseIdFieldNumber = 2,
    kEncryptionConfigFieldNumber = 4,
    kBackupFieldNumber = 3,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  void set_parent(const std::string& value);
  void set_parent(std::string&& value);
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  std::string* mutable_parent();
  std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string database_id = 2 [(.google.api.field_behavior) = REQUIRED];
  void clear_database_id();
  const std::string& database_id() const;
  void set_database_id(const std::string& value);
  void set_database_id(std::string&& value);
  void set_database_id(const char* value);
  void set_database_id(const char* value, size_t size);
  std::string* mutable_database_id();
  std::string* release_database_id();
  void set_allocated_database_id(std::string* database_id);
  private:
  const std::string& _internal_database_id() const;
  void _internal_set_database_id(const std::string& value);
  std::string* _internal_mutable_database_id();
  public:

  // .google.spanner.admin.database.v1.RestoreDatabaseEncryptionConfig encryption_config = 4 [(.google.api.field_behavior) = OPTIONAL];
  bool has_encryption_config() const;
  private:
  bool _internal_has_encryption_config() const;
  public:
  void clear_encryption_config();
  const ::google::spanner::admin::database::v1::RestoreDatabaseEncryptionConfig& encryption_config() const;
  ::google::spanner::admin::database::v1::RestoreDatabaseEncryptionConfig* release_encryption_config();
  ::google::spanner::admin::database::v1::RestoreDatabaseEncryptionConfig* mutable_encryption_config();
  void set_allocated_encryption_config(::google::spanner::admin::database::v1::RestoreDatabaseEncryptionConfig* encryption_config);
  private:
  const ::google::spanner::admin::database::v1::RestoreDatabaseEncryptionConfig& _internal_encryption_config() const;
  ::google::spanner::admin::database::v1::RestoreDatabaseEncryptionConfig* _internal_mutable_encryption_config();
  public:
  void unsafe_arena_set_allocated_encryption_config(
      ::google::spanner::admin::database::v1::RestoreDatabaseEncryptionConfig* encryption_config);
  ::google::spanner::admin::database::v1::RestoreDatabaseEncryptionConfig* unsafe_arena_release_encryption_config();

  // string backup = 3 [(.google.api.resource_reference) = {
  bool has_backup() const;
  private:
  bool _internal_has_backup() const;
  public:
  void clear_backup();
  const std::string& backup() const;
  void set_backup(const std::string& value);
  void set_backup(std::string&& value);
  void set_backup(const char* value);
  void set_backup(const char* value, size_t size);
  std::string* mutable_backup();
  std::string* release_backup();
  void set_allocated_backup(std::string* backup);
  private:
  const std::string& _internal_backup() const;
  void _internal_set_backup(const std::string& value);
  std::string* _internal_mutable_backup();
  public:

  void clear_source();
  SourceCase source_case() const;
  // @@protoc_insertion_point(class_scope:google.spanner.admin.database.v1.RestoreDatabaseRequest)
 private:
  class _Internal;
  void set_has_backup();

  inline bool has_source() const;
  inline void clear_has_source();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr database_id_;
  ::google::spanner::admin::database::v1::RestoreDatabaseEncryptionConfig* encryption_config_;
  union SourceUnion {
    constexpr SourceUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr backup_;
  } source_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class RestoreDatabaseEncryptionConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.spanner.admin.database.v1.RestoreDatabaseEncryptionConfig) */ {
 public:
  inline RestoreDatabaseEncryptionConfig() : RestoreDatabaseEncryptionConfig(nullptr) {}
  virtual ~RestoreDatabaseEncryptionConfig();
  explicit constexpr RestoreDatabaseEncryptionConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RestoreDatabaseEncryptionConfig(const RestoreDatabaseEncryptionConfig& from);
  RestoreDatabaseEncryptionConfig(RestoreDatabaseEncryptionConfig&& from) noexcept
    : RestoreDatabaseEncryptionConfig() {
    *this = ::std::move(from);
  }

  inline RestoreDatabaseEncryptionConfig& operator=(const RestoreDatabaseEncryptionConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline RestoreDatabaseEncryptionConfig& operator=(RestoreDatabaseEncryptionConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RestoreDatabaseEncryptionConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const RestoreDatabaseEncryptionConfig* internal_default_instance() {
    return reinterpret_cast<const RestoreDatabaseEncryptionConfig*>(
               &_RestoreDatabaseEncryptionConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(RestoreDatabaseEncryptionConfig& a, RestoreDatabaseEncryptionConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(RestoreDatabaseEncryptionConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RestoreDatabaseEncryptionConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RestoreDatabaseEncryptionConfig* New() const final {
    return CreateMaybeMessage<RestoreDatabaseEncryptionConfig>(nullptr);
  }

  RestoreDatabaseEncryptionConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RestoreDatabaseEncryptionConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RestoreDatabaseEncryptionConfig& from);
  void MergeFrom(const RestoreDatabaseEncryptionConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RestoreDatabaseEncryptionConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.spanner.admin.database.v1.RestoreDatabaseEncryptionConfig";
  }
  protected:
  explicit RestoreDatabaseEncryptionConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef RestoreDatabaseEncryptionConfig_EncryptionType EncryptionType;
  static constexpr EncryptionType ENCRYPTION_TYPE_UNSPECIFIED =
    RestoreDatabaseEncryptionConfig_EncryptionType_ENCRYPTION_TYPE_UNSPECIFIED;
  static constexpr EncryptionType USE_CONFIG_DEFAULT_OR_BACKUP_ENCRYPTION =
    RestoreDatabaseEncryptionConfig_EncryptionType_USE_CONFIG_DEFAULT_OR_BACKUP_ENCRYPTION;
  static constexpr EncryptionType GOOGLE_DEFAULT_ENCRYPTION =
    RestoreDatabaseEncryptionConfig_EncryptionType_GOOGLE_DEFAULT_ENCRYPTION;
  static constexpr EncryptionType CUSTOMER_MANAGED_ENCRYPTION =
    RestoreDatabaseEncryptionConfig_EncryptionType_CUSTOMER_MANAGED_ENCRYPTION;
  static inline bool EncryptionType_IsValid(int value) {
    return RestoreDatabaseEncryptionConfig_EncryptionType_IsValid(value);
  }
  static constexpr EncryptionType EncryptionType_MIN =
    RestoreDatabaseEncryptionConfig_EncryptionType_EncryptionType_MIN;
  static constexpr EncryptionType EncryptionType_MAX =
    RestoreDatabaseEncryptionConfig_EncryptionType_EncryptionType_MAX;
  static constexpr int EncryptionType_ARRAYSIZE =
    RestoreDatabaseEncryptionConfig_EncryptionType_EncryptionType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EncryptionType_descriptor() {
    return RestoreDatabaseEncryptionConfig_EncryptionType_descriptor();
  }
  template<typename T>
  static inline const std::string& EncryptionType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EncryptionType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EncryptionType_Name.");
    return RestoreDatabaseEncryptionConfig_EncryptionType_Name(enum_t_value);
  }
  static inline bool EncryptionType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EncryptionType* value) {
    return RestoreDatabaseEncryptionConfig_EncryptionType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kKmsKeyNameFieldNumber = 2,
    kEncryptionTypeFieldNumber = 1,
  };
  // string kms_key_name = 2 [(.google.api.field_behavior) = OPTIONAL, (.google.api.resource_reference) = {
  void clear_kms_key_name();
  const std::string& kms_key_name() const;
  void set_kms_key_name(const std::string& value);
  void set_kms_key_name(std::string&& value);
  void set_kms_key_name(const char* value);
  void set_kms_key_name(const char* value, size_t size);
  std::string* mutable_kms_key_name();
  std::string* release_kms_key_name();
  void set_allocated_kms_key_name(std::string* kms_key_name);
  private:
  const std::string& _internal_kms_key_name() const;
  void _internal_set_kms_key_name(const std::string& value);
  std::string* _internal_mutable_kms_key_name();
  public:

  // .google.spanner.admin.database.v1.RestoreDatabaseEncryptionConfig.EncryptionType encryption_type = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_encryption_type();
  ::google::spanner::admin::database::v1::RestoreDatabaseEncryptionConfig_EncryptionType encryption_type() const;
  void set_encryption_type(::google::spanner::admin::database::v1::RestoreDatabaseEncryptionConfig_EncryptionType value);
  private:
  ::google::spanner::admin::database::v1::RestoreDatabaseEncryptionConfig_EncryptionType _internal_encryption_type() const;
  void _internal_set_encryption_type(::google::spanner::admin::database::v1::RestoreDatabaseEncryptionConfig_EncryptionType value);
  public:

  // @@protoc_insertion_point(class_scope:google.spanner.admin.database.v1.RestoreDatabaseEncryptionConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kms_key_name_;
  int encryption_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class RestoreDatabaseMetadata PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.spanner.admin.database.v1.RestoreDatabaseMetadata) */ {
 public:
  inline RestoreDatabaseMetadata() : RestoreDatabaseMetadata(nullptr) {}
  virtual ~RestoreDatabaseMetadata();
  explicit constexpr RestoreDatabaseMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RestoreDatabaseMetadata(const RestoreDatabaseMetadata& from);
  RestoreDatabaseMetadata(RestoreDatabaseMetadata&& from) noexcept
    : RestoreDatabaseMetadata() {
    *this = ::std::move(from);
  }

  inline RestoreDatabaseMetadata& operator=(const RestoreDatabaseMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline RestoreDatabaseMetadata& operator=(RestoreDatabaseMetadata&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RestoreDatabaseMetadata& default_instance() {
    return *internal_default_instance();
  }
  enum SourceInfoCase {
    kBackupInfo = 3,
    SOURCE_INFO_NOT_SET = 0,
  };

  static inline const RestoreDatabaseMetadata* internal_default_instance() {
    return reinterpret_cast<const RestoreDatabaseMetadata*>(
               &_RestoreDatabaseMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(RestoreDatabaseMetadata& a, RestoreDatabaseMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(RestoreDatabaseMetadata* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RestoreDatabaseMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RestoreDatabaseMetadata* New() const final {
    return CreateMaybeMessage<RestoreDatabaseMetadata>(nullptr);
  }

  RestoreDatabaseMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RestoreDatabaseMetadata>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RestoreDatabaseMetadata& from);
  void MergeFrom(const RestoreDatabaseMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RestoreDatabaseMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.spanner.admin.database.v1.RestoreDatabaseMetadata";
  }
  protected:
  explicit RestoreDatabaseMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kOptimizeDatabaseOperationNameFieldNumber = 6,
    kProgressFieldNumber = 4,
    kCancelTimeFieldNumber = 5,
    kSourceTypeFieldNumber = 2,
    kBackupInfoFieldNumber = 3,
  };
  // string name = 1 [(.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string optimize_database_operation_name = 6;
  void clear_optimize_database_operation_name();
  const std::string& optimize_database_operation_name() const;
  void set_optimize_database_operation_name(const std::string& value);
  void set_optimize_database_operation_name(std::string&& value);
  void set_optimize_database_operation_name(const char* value);
  void set_optimize_database_operation_name(const char* value, size_t size);
  std::string* mutable_optimize_database_operation_name();
  std::string* release_optimize_database_operation_name();
  void set_allocated_optimize_database_operation_name(std::string* optimize_database_operation_name);
  private:
  const std::string& _internal_optimize_database_operation_name() const;
  void _internal_set_optimize_database_operation_name(const std::string& value);
  std::string* _internal_mutable_optimize_database_operation_name();
  public:

  // .google.spanner.admin.database.v1.OperationProgress progress = 4;
  bool has_progress() const;
  private:
  bool _internal_has_progress() const;
  public:
  void clear_progress();
  const ::google::spanner::admin::database::v1::OperationProgress& progress() const;
  ::google::spanner::admin::database::v1::OperationProgress* release_progress();
  ::google::spanner::admin::database::v1::OperationProgress* mutable_progress();
  void set_allocated_progress(::google::spanner::admin::database::v1::OperationProgress* progress);
  private:
  const ::google::spanner::admin::database::v1::OperationProgress& _internal_progress() const;
  ::google::spanner::admin::database::v1::OperationProgress* _internal_mutable_progress();
  public:
  void unsafe_arena_set_allocated_progress(
      ::google::spanner::admin::database::v1::OperationProgress* progress);
  ::google::spanner::admin::database::v1::OperationProgress* unsafe_arena_release_progress();

  // .google.protobuf.Timestamp cancel_time = 5;
  bool has_cancel_time() const;
  private:
  bool _internal_has_cancel_time() const;
  public:
  void clear_cancel_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& cancel_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_cancel_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_cancel_time();
  void set_allocated_cancel_time(PROTOBUF_NAMESPACE_ID::Timestamp* cancel_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_cancel_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_cancel_time();
  public:
  void unsafe_arena_set_allocated_cancel_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* cancel_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_cancel_time();

  // .google.spanner.admin.database.v1.RestoreSourceType source_type = 2;
  void clear_source_type();
  ::google::spanner::admin::database::v1::RestoreSourceType source_type() const;
  void set_source_type(::google::spanner::admin::database::v1::RestoreSourceType value);
  private:
  ::google::spanner::admin::database::v1::RestoreSourceType _internal_source_type() const;
  void _internal_set_source_type(::google::spanner::admin::database::v1::RestoreSourceType value);
  public:

  // .google.spanner.admin.database.v1.BackupInfo backup_info = 3;
  bool has_backup_info() const;
  private:
  bool _internal_has_backup_info() const;
  public:
  void clear_backup_info();
  const ::google::spanner::admin::database::v1::BackupInfo& backup_info() const;
  ::google::spanner::admin::database::v1::BackupInfo* release_backup_info();
  ::google::spanner::admin::database::v1::BackupInfo* mutable_backup_info();
  void set_allocated_backup_info(::google::spanner::admin::database::v1::BackupInfo* backup_info);
  private:
  const ::google::spanner::admin::database::v1::BackupInfo& _internal_backup_info() const;
  ::google::spanner::admin::database::v1::BackupInfo* _internal_mutable_backup_info();
  public:
  void unsafe_arena_set_allocated_backup_info(
      ::google::spanner::admin::database::v1::BackupInfo* backup_info);
  ::google::spanner::admin::database::v1::BackupInfo* unsafe_arena_release_backup_info();

  void clear_source_info();
  SourceInfoCase source_info_case() const;
  // @@protoc_insertion_point(class_scope:google.spanner.admin.database.v1.RestoreDatabaseMetadata)
 private:
  class _Internal;
  void set_has_backup_info();

  inline bool has_source_info() const;
  inline void clear_has_source_info();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr optimize_database_operation_name_;
  ::google::spanner::admin::database::v1::OperationProgress* progress_;
  PROTOBUF_NAMESPACE_ID::Timestamp* cancel_time_;
  int source_type_;
  union SourceInfoUnion {
    constexpr SourceInfoUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::google::spanner::admin::database::v1::BackupInfo* backup_info_;
  } source_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto;
};
// -------------------------------------------------------------------

class OptimizeRestoredDatabaseMetadata PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.spanner.admin.database.v1.OptimizeRestoredDatabaseMetadata) */ {
 public:
  inline OptimizeRestoredDatabaseMetadata() : OptimizeRestoredDatabaseMetadata(nullptr) {}
  virtual ~OptimizeRestoredDatabaseMetadata();
  explicit constexpr OptimizeRestoredDatabaseMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OptimizeRestoredDatabaseMetadata(const OptimizeRestoredDatabaseMetadata& from);
  OptimizeRestoredDatabaseMetadata(OptimizeRestoredDatabaseMetadata&& from) noexcept
    : OptimizeRestoredDatabaseMetadata() {
    *this = ::std::move(from);
  }

  inline OptimizeRestoredDatabaseMetadata& operator=(const OptimizeRestoredDatabaseMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline OptimizeRestoredDatabaseMetadata& operator=(OptimizeRestoredDatabaseMetadata&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OptimizeRestoredDatabaseMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const OptimizeRestoredDatabaseMetadata* internal_default_instance() {
    return reinterpret_cast<const OptimizeRestoredDatabaseMetadata*>(
               &_OptimizeRestoredDatabaseMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(OptimizeRestoredDatabaseMetadata& a, OptimizeRestoredDatabaseMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(OptimizeRestoredDatabaseMetadata* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OptimizeRestoredDatabaseMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OptimizeRestoredDatabaseMetadata* New() const final {
    return CreateMaybeMessage<OptimizeRestoredDatabaseMetadata>(nullptr);
  }

  OptimizeRestoredDatabaseMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OptimizeRestoredDatabaseMetadata>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OptimizeRestoredDatabaseMetadata& from);
  void MergeFrom(const OptimizeRestoredDatabaseMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptimizeRestoredDatabaseMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.spanner.admin.database.v1.OptimizeRestoredDatabaseMetadata";
  }
  protected:
  explicit OptimizeRestoredDatabaseMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kProgressFieldNumber = 2,
  };
  // string name = 1 [(.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.spanner.admin.database.v1.OperationProgress progress = 2;
  bool has_progress() const;
  private:
  bool _internal_has_progress() const;
  public:
  void clear_progress();
  const ::google::spanner::admin::database::v1::OperationProgress& progress() const;
  ::google::spanner::admin::database::v1::OperationProgress* release_progress();
  ::google::spanner::admin::database::v1::OperationProgress* mutable_progress();
  void set_allocated_progress(::google::spanner::admin::database::v1::OperationProgress* progress);
  private:
  const ::google::spanner::admin::database::v1::OperationProgress& _internal_progress() const;
  ::google::spanner::admin::database::v1::OperationProgress* _internal_mutable_progress();
  public:
  void unsafe_arena_set_allocated_progress(
      ::google::spanner::admin::database::v1::OperationProgress* progress);
  ::google::spanner::admin::database::v1::OperationProgress* unsafe_arena_release_progress();

  // @@protoc_insertion_point(class_scope:google.spanner.admin.database.v1.OptimizeRestoredDatabaseMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::google::spanner::admin::database::v1::OperationProgress* progress_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RestoreInfo

// .google.spanner.admin.database.v1.RestoreSourceType source_type = 1;
inline void RestoreInfo::clear_source_type() {
  source_type_ = 0;
}
inline ::google::spanner::admin::database::v1::RestoreSourceType RestoreInfo::_internal_source_type() const {
  return static_cast< ::google::spanner::admin::database::v1::RestoreSourceType >(source_type_);
}
inline ::google::spanner::admin::database::v1::RestoreSourceType RestoreInfo::source_type() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.RestoreInfo.source_type)
  return _internal_source_type();
}
inline void RestoreInfo::_internal_set_source_type(::google::spanner::admin::database::v1::RestoreSourceType value) {
  
  source_type_ = value;
}
inline void RestoreInfo::set_source_type(::google::spanner::admin::database::v1::RestoreSourceType value) {
  _internal_set_source_type(value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.RestoreInfo.source_type)
}

// .google.spanner.admin.database.v1.BackupInfo backup_info = 2;
inline bool RestoreInfo::_internal_has_backup_info() const {
  return source_info_case() == kBackupInfo;
}
inline bool RestoreInfo::has_backup_info() const {
  return _internal_has_backup_info();
}
inline void RestoreInfo::set_has_backup_info() {
  _oneof_case_[0] = kBackupInfo;
}
inline ::google::spanner::admin::database::v1::BackupInfo* RestoreInfo::release_backup_info() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.RestoreInfo.backup_info)
  if (_internal_has_backup_info()) {
    clear_has_source_info();
      ::google::spanner::admin::database::v1::BackupInfo* temp = source_info_.backup_info_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    source_info_.backup_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::spanner::admin::database::v1::BackupInfo& RestoreInfo::_internal_backup_info() const {
  return _internal_has_backup_info()
      ? *source_info_.backup_info_
      : reinterpret_cast< ::google::spanner::admin::database::v1::BackupInfo&>(::google::spanner::admin::database::v1::_BackupInfo_default_instance_);
}
inline const ::google::spanner::admin::database::v1::BackupInfo& RestoreInfo::backup_info() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.RestoreInfo.backup_info)
  return _internal_backup_info();
}
inline ::google::spanner::admin::database::v1::BackupInfo* RestoreInfo::unsafe_arena_release_backup_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.spanner.admin.database.v1.RestoreInfo.backup_info)
  if (_internal_has_backup_info()) {
    clear_has_source_info();
    ::google::spanner::admin::database::v1::BackupInfo* temp = source_info_.backup_info_;
    source_info_.backup_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RestoreInfo::unsafe_arena_set_allocated_backup_info(::google::spanner::admin::database::v1::BackupInfo* backup_info) {
  clear_source_info();
  if (backup_info) {
    set_has_backup_info();
    source_info_.backup_info_ = backup_info;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.spanner.admin.database.v1.RestoreInfo.backup_info)
}
inline ::google::spanner::admin::database::v1::BackupInfo* RestoreInfo::_internal_mutable_backup_info() {
  if (!_internal_has_backup_info()) {
    clear_source_info();
    set_has_backup_info();
    source_info_.backup_info_ = CreateMaybeMessage< ::google::spanner::admin::database::v1::BackupInfo >(GetArena());
  }
  return source_info_.backup_info_;
}
inline ::google::spanner::admin::database::v1::BackupInfo* RestoreInfo::mutable_backup_info() {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.RestoreInfo.backup_info)
  return _internal_mutable_backup_info();
}

inline bool RestoreInfo::has_source_info() const {
  return source_info_case() != SOURCE_INFO_NOT_SET;
}
inline void RestoreInfo::clear_has_source_info() {
  _oneof_case_[0] = SOURCE_INFO_NOT_SET;
}
inline RestoreInfo::SourceInfoCase RestoreInfo::source_info_case() const {
  return RestoreInfo::SourceInfoCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Database

// string name = 1 [(.google.api.field_behavior) = REQUIRED];
inline void Database::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Database::name() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.Database.name)
  return _internal_name();
}
inline void Database::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.Database.name)
}
inline std::string* Database::mutable_name() {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.Database.name)
  return _internal_mutable_name();
}
inline const std::string& Database::_internal_name() const {
  return name_.Get();
}
inline void Database::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Database::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.admin.database.v1.Database.name)
}
inline void Database::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.Database.name)
}
inline void Database::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.Database.name)
}
inline std::string* Database::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Database::release_name() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.Database.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Database::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.Database.name)
}

// .google.spanner.admin.database.v1.Database.State state = 2 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void Database::clear_state() {
  state_ = 0;
}
inline ::google::spanner::admin::database::v1::Database_State Database::_internal_state() const {
  return static_cast< ::google::spanner::admin::database::v1::Database_State >(state_);
}
inline ::google::spanner::admin::database::v1::Database_State Database::state() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.Database.state)
  return _internal_state();
}
inline void Database::_internal_set_state(::google::spanner::admin::database::v1::Database_State value) {
  
  state_ = value;
}
inline void Database::set_state(::google::spanner::admin::database::v1::Database_State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.Database.state)
}

// .google.protobuf.Timestamp create_time = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool Database::_internal_has_create_time() const {
  return this != internal_default_instance() && create_time_ != nullptr;
}
inline bool Database::has_create_time() const {
  return _internal_has_create_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Database::_internal_create_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = create_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Database::create_time() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.Database.create_time)
  return _internal_create_time();
}
inline void Database::unsafe_arena_set_allocated_create_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time_);
  }
  create_time_ = create_time;
  if (create_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.spanner.admin.database.v1.Database.create_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Database::release_create_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = create_time_;
  create_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Database::unsafe_arena_release_create_time() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.Database.create_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = create_time_;
  create_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Database::_internal_mutable_create_time() {
  
  if (create_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    create_time_ = p;
  }
  return create_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Database::mutable_create_time() {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.Database.create_time)
  return _internal_mutable_create_time();
}
inline void Database::set_allocated_create_time(PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time_);
  }
  if (create_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time)->GetArena();
    if (message_arena != submessage_arena) {
      create_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.Database.create_time)
}

// .google.spanner.admin.database.v1.RestoreInfo restore_info = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool Database::_internal_has_restore_info() const {
  return this != internal_default_instance() && restore_info_ != nullptr;
}
inline bool Database::has_restore_info() const {
  return _internal_has_restore_info();
}
inline void Database::clear_restore_info() {
  if (GetArena() == nullptr && restore_info_ != nullptr) {
    delete restore_info_;
  }
  restore_info_ = nullptr;
}
inline const ::google::spanner::admin::database::v1::RestoreInfo& Database::_internal_restore_info() const {
  const ::google::spanner::admin::database::v1::RestoreInfo* p = restore_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::spanner::admin::database::v1::RestoreInfo&>(
      ::google::spanner::admin::database::v1::_RestoreInfo_default_instance_);
}
inline const ::google::spanner::admin::database::v1::RestoreInfo& Database::restore_info() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.Database.restore_info)
  return _internal_restore_info();
}
inline void Database::unsafe_arena_set_allocated_restore_info(
    ::google::spanner::admin::database::v1::RestoreInfo* restore_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(restore_info_);
  }
  restore_info_ = restore_info;
  if (restore_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.spanner.admin.database.v1.Database.restore_info)
}
inline ::google::spanner::admin::database::v1::RestoreInfo* Database::release_restore_info() {
  
  ::google::spanner::admin::database::v1::RestoreInfo* temp = restore_info_;
  restore_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::spanner::admin::database::v1::RestoreInfo* Database::unsafe_arena_release_restore_info() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.Database.restore_info)
  
  ::google::spanner::admin::database::v1::RestoreInfo* temp = restore_info_;
  restore_info_ = nullptr;
  return temp;
}
inline ::google::spanner::admin::database::v1::RestoreInfo* Database::_internal_mutable_restore_info() {
  
  if (restore_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::spanner::admin::database::v1::RestoreInfo>(GetArena());
    restore_info_ = p;
  }
  return restore_info_;
}
inline ::google::spanner::admin::database::v1::RestoreInfo* Database::mutable_restore_info() {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.Database.restore_info)
  return _internal_mutable_restore_info();
}
inline void Database::set_allocated_restore_info(::google::spanner::admin::database::v1::RestoreInfo* restore_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete restore_info_;
  }
  if (restore_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(restore_info);
    if (message_arena != submessage_arena) {
      restore_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, restore_info, submessage_arena);
    }
    
  } else {
    
  }
  restore_info_ = restore_info;
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.Database.restore_info)
}

// .google.spanner.admin.database.v1.EncryptionConfig encryption_config = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool Database::_internal_has_encryption_config() const {
  return this != internal_default_instance() && encryption_config_ != nullptr;
}
inline bool Database::has_encryption_config() const {
  return _internal_has_encryption_config();
}
inline const ::google::spanner::admin::database::v1::EncryptionConfig& Database::_internal_encryption_config() const {
  const ::google::spanner::admin::database::v1::EncryptionConfig* p = encryption_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::spanner::admin::database::v1::EncryptionConfig&>(
      ::google::spanner::admin::database::v1::_EncryptionConfig_default_instance_);
}
inline const ::google::spanner::admin::database::v1::EncryptionConfig& Database::encryption_config() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.Database.encryption_config)
  return _internal_encryption_config();
}
inline void Database::unsafe_arena_set_allocated_encryption_config(
    ::google::spanner::admin::database::v1::EncryptionConfig* encryption_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(encryption_config_);
  }
  encryption_config_ = encryption_config;
  if (encryption_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.spanner.admin.database.v1.Database.encryption_config)
}
inline ::google::spanner::admin::database::v1::EncryptionConfig* Database::release_encryption_config() {
  
  ::google::spanner::admin::database::v1::EncryptionConfig* temp = encryption_config_;
  encryption_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::spanner::admin::database::v1::EncryptionConfig* Database::unsafe_arena_release_encryption_config() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.Database.encryption_config)
  
  ::google::spanner::admin::database::v1::EncryptionConfig* temp = encryption_config_;
  encryption_config_ = nullptr;
  return temp;
}
inline ::google::spanner::admin::database::v1::EncryptionConfig* Database::_internal_mutable_encryption_config() {
  
  if (encryption_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::spanner::admin::database::v1::EncryptionConfig>(GetArena());
    encryption_config_ = p;
  }
  return encryption_config_;
}
inline ::google::spanner::admin::database::v1::EncryptionConfig* Database::mutable_encryption_config() {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.Database.encryption_config)
  return _internal_mutable_encryption_config();
}
inline void Database::set_allocated_encryption_config(::google::spanner::admin::database::v1::EncryptionConfig* encryption_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(encryption_config_);
  }
  if (encryption_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(encryption_config)->GetArena();
    if (message_arena != submessage_arena) {
      encryption_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, encryption_config, submessage_arena);
    }
    
  } else {
    
  }
  encryption_config_ = encryption_config;
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.Database.encryption_config)
}

// repeated .google.spanner.admin.database.v1.EncryptionInfo encryption_info = 8 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline int Database::_internal_encryption_info_size() const {
  return encryption_info_.size();
}
inline int Database::encryption_info_size() const {
  return _internal_encryption_info_size();
}
inline ::google::spanner::admin::database::v1::EncryptionInfo* Database::mutable_encryption_info(int index) {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.Database.encryption_info)
  return encryption_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::spanner::admin::database::v1::EncryptionInfo >*
Database::mutable_encryption_info() {
  // @@protoc_insertion_point(field_mutable_list:google.spanner.admin.database.v1.Database.encryption_info)
  return &encryption_info_;
}
inline const ::google::spanner::admin::database::v1::EncryptionInfo& Database::_internal_encryption_info(int index) const {
  return encryption_info_.Get(index);
}
inline const ::google::spanner::admin::database::v1::EncryptionInfo& Database::encryption_info(int index) const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.Database.encryption_info)
  return _internal_encryption_info(index);
}
inline ::google::spanner::admin::database::v1::EncryptionInfo* Database::_internal_add_encryption_info() {
  return encryption_info_.Add();
}
inline ::google::spanner::admin::database::v1::EncryptionInfo* Database::add_encryption_info() {
  // @@protoc_insertion_point(field_add:google.spanner.admin.database.v1.Database.encryption_info)
  return _internal_add_encryption_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::spanner::admin::database::v1::EncryptionInfo >&
Database::encryption_info() const {
  // @@protoc_insertion_point(field_list:google.spanner.admin.database.v1.Database.encryption_info)
  return encryption_info_;
}

// string version_retention_period = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void Database::clear_version_retention_period() {
  version_retention_period_.ClearToEmpty();
}
inline const std::string& Database::version_retention_period() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.Database.version_retention_period)
  return _internal_version_retention_period();
}
inline void Database::set_version_retention_period(const std::string& value) {
  _internal_set_version_retention_period(value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.Database.version_retention_period)
}
inline std::string* Database::mutable_version_retention_period() {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.Database.version_retention_period)
  return _internal_mutable_version_retention_period();
}
inline const std::string& Database::_internal_version_retention_period() const {
  return version_retention_period_.Get();
}
inline void Database::_internal_set_version_retention_period(const std::string& value) {
  
  version_retention_period_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Database::set_version_retention_period(std::string&& value) {
  
  version_retention_period_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.admin.database.v1.Database.version_retention_period)
}
inline void Database::set_version_retention_period(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_retention_period_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.Database.version_retention_period)
}
inline void Database::set_version_retention_period(const char* value,
    size_t size) {
  
  version_retention_period_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.Database.version_retention_period)
}
inline std::string* Database::_internal_mutable_version_retention_period() {
  
  return version_retention_period_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Database::release_version_retention_period() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.Database.version_retention_period)
  return version_retention_period_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Database::set_allocated_version_retention_period(std::string* version_retention_period) {
  if (version_retention_period != nullptr) {
    
  } else {
    
  }
  version_retention_period_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version_retention_period,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.Database.version_retention_period)
}

// .google.protobuf.Timestamp earliest_version_time = 7 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool Database::_internal_has_earliest_version_time() const {
  return this != internal_default_instance() && earliest_version_time_ != nullptr;
}
inline bool Database::has_earliest_version_time() const {
  return _internal_has_earliest_version_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Database::_internal_earliest_version_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = earliest_version_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Database::earliest_version_time() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.Database.earliest_version_time)
  return _internal_earliest_version_time();
}
inline void Database::unsafe_arena_set_allocated_earliest_version_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* earliest_version_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(earliest_version_time_);
  }
  earliest_version_time_ = earliest_version_time;
  if (earliest_version_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.spanner.admin.database.v1.Database.earliest_version_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Database::release_earliest_version_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = earliest_version_time_;
  earliest_version_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Database::unsafe_arena_release_earliest_version_time() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.Database.earliest_version_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = earliest_version_time_;
  earliest_version_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Database::_internal_mutable_earliest_version_time() {
  
  if (earliest_version_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    earliest_version_time_ = p;
  }
  return earliest_version_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Database::mutable_earliest_version_time() {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.Database.earliest_version_time)
  return _internal_mutable_earliest_version_time();
}
inline void Database::set_allocated_earliest_version_time(PROTOBUF_NAMESPACE_ID::Timestamp* earliest_version_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(earliest_version_time_);
  }
  if (earliest_version_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(earliest_version_time)->GetArena();
    if (message_arena != submessage_arena) {
      earliest_version_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, earliest_version_time, submessage_arena);
    }
    
  } else {
    
  }
  earliest_version_time_ = earliest_version_time;
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.Database.earliest_version_time)
}

// string default_leader = 9 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void Database::clear_default_leader() {
  default_leader_.ClearToEmpty();
}
inline const std::string& Database::default_leader() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.Database.default_leader)
  return _internal_default_leader();
}
inline void Database::set_default_leader(const std::string& value) {
  _internal_set_default_leader(value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.Database.default_leader)
}
inline std::string* Database::mutable_default_leader() {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.Database.default_leader)
  return _internal_mutable_default_leader();
}
inline const std::string& Database::_internal_default_leader() const {
  return default_leader_.Get();
}
inline void Database::_internal_set_default_leader(const std::string& value) {
  
  default_leader_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Database::set_default_leader(std::string&& value) {
  
  default_leader_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.admin.database.v1.Database.default_leader)
}
inline void Database::set_default_leader(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  default_leader_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.Database.default_leader)
}
inline void Database::set_default_leader(const char* value,
    size_t size) {
  
  default_leader_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.Database.default_leader)
}
inline std::string* Database::_internal_mutable_default_leader() {
  
  return default_leader_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Database::release_default_leader() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.Database.default_leader)
  return default_leader_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Database::set_allocated_default_leader(std::string* default_leader) {
  if (default_leader != nullptr) {
    
  } else {
    
  }
  default_leader_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), default_leader,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.Database.default_leader)
}

// -------------------------------------------------------------------

// ListDatabasesRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListDatabasesRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& ListDatabasesRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.ListDatabasesRequest.parent)
  return _internal_parent();
}
inline void ListDatabasesRequest::set_parent(const std::string& value) {
  _internal_set_parent(value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.ListDatabasesRequest.parent)
}
inline std::string* ListDatabasesRequest::mutable_parent() {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.ListDatabasesRequest.parent)
  return _internal_mutable_parent();
}
inline const std::string& ListDatabasesRequest::_internal_parent() const {
  return parent_.Get();
}
inline void ListDatabasesRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListDatabasesRequest::set_parent(std::string&& value) {
  
  parent_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.admin.database.v1.ListDatabasesRequest.parent)
}
inline void ListDatabasesRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.ListDatabasesRequest.parent)
}
inline void ListDatabasesRequest::set_parent(const char* value,
    size_t size) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.ListDatabasesRequest.parent)
}
inline std::string* ListDatabasesRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListDatabasesRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.ListDatabasesRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListDatabasesRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.ListDatabasesRequest.parent)
}

// int32 page_size = 3;
inline void ListDatabasesRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListDatabasesRequest::_internal_page_size() const {
  return page_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListDatabasesRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.ListDatabasesRequest.page_size)
  return _internal_page_size();
}
inline void ListDatabasesRequest::_internal_set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  page_size_ = value;
}
inline void ListDatabasesRequest::set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.ListDatabasesRequest.page_size)
}

// string page_token = 4;
inline void ListDatabasesRequest::clear_page_token() {
  page_token_.ClearToEmpty();
}
inline const std::string& ListDatabasesRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.ListDatabasesRequest.page_token)
  return _internal_page_token();
}
inline void ListDatabasesRequest::set_page_token(const std::string& value) {
  _internal_set_page_token(value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.ListDatabasesRequest.page_token)
}
inline std::string* ListDatabasesRequest::mutable_page_token() {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.ListDatabasesRequest.page_token)
  return _internal_mutable_page_token();
}
inline const std::string& ListDatabasesRequest::_internal_page_token() const {
  return page_token_.Get();
}
inline void ListDatabasesRequest::_internal_set_page_token(const std::string& value) {
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListDatabasesRequest::set_page_token(std::string&& value) {
  
  page_token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.admin.database.v1.ListDatabasesRequest.page_token)
}
inline void ListDatabasesRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.ListDatabasesRequest.page_token)
}
inline void ListDatabasesRequest::set_page_token(const char* value,
    size_t size) {
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.ListDatabasesRequest.page_token)
}
inline std::string* ListDatabasesRequest::_internal_mutable_page_token() {
  
  return page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListDatabasesRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.ListDatabasesRequest.page_token)
  return page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListDatabasesRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.ListDatabasesRequest.page_token)
}

// -------------------------------------------------------------------

// ListDatabasesResponse

// repeated .google.spanner.admin.database.v1.Database databases = 1;
inline int ListDatabasesResponse::_internal_databases_size() const {
  return databases_.size();
}
inline int ListDatabasesResponse::databases_size() const {
  return _internal_databases_size();
}
inline void ListDatabasesResponse::clear_databases() {
  databases_.Clear();
}
inline ::google::spanner::admin::database::v1::Database* ListDatabasesResponse::mutable_databases(int index) {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.ListDatabasesResponse.databases)
  return databases_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::spanner::admin::database::v1::Database >*
ListDatabasesResponse::mutable_databases() {
  // @@protoc_insertion_point(field_mutable_list:google.spanner.admin.database.v1.ListDatabasesResponse.databases)
  return &databases_;
}
inline const ::google::spanner::admin::database::v1::Database& ListDatabasesResponse::_internal_databases(int index) const {
  return databases_.Get(index);
}
inline const ::google::spanner::admin::database::v1::Database& ListDatabasesResponse::databases(int index) const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.ListDatabasesResponse.databases)
  return _internal_databases(index);
}
inline ::google::spanner::admin::database::v1::Database* ListDatabasesResponse::_internal_add_databases() {
  return databases_.Add();
}
inline ::google::spanner::admin::database::v1::Database* ListDatabasesResponse::add_databases() {
  // @@protoc_insertion_point(field_add:google.spanner.admin.database.v1.ListDatabasesResponse.databases)
  return _internal_add_databases();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::spanner::admin::database::v1::Database >&
ListDatabasesResponse::databases() const {
  // @@protoc_insertion_point(field_list:google.spanner.admin.database.v1.ListDatabasesResponse.databases)
  return databases_;
}

// string next_page_token = 2;
inline void ListDatabasesResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty();
}
inline const std::string& ListDatabasesResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.ListDatabasesResponse.next_page_token)
  return _internal_next_page_token();
}
inline void ListDatabasesResponse::set_next_page_token(const std::string& value) {
  _internal_set_next_page_token(value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.ListDatabasesResponse.next_page_token)
}
inline std::string* ListDatabasesResponse::mutable_next_page_token() {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.ListDatabasesResponse.next_page_token)
  return _internal_mutable_next_page_token();
}
inline const std::string& ListDatabasesResponse::_internal_next_page_token() const {
  return next_page_token_.Get();
}
inline void ListDatabasesResponse::_internal_set_next_page_token(const std::string& value) {
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListDatabasesResponse::set_next_page_token(std::string&& value) {
  
  next_page_token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.admin.database.v1.ListDatabasesResponse.next_page_token)
}
inline void ListDatabasesResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.ListDatabasesResponse.next_page_token)
}
inline void ListDatabasesResponse::set_next_page_token(const char* value,
    size_t size) {
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.ListDatabasesResponse.next_page_token)
}
inline std::string* ListDatabasesResponse::_internal_mutable_next_page_token() {
  
  return next_page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListDatabasesResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.ListDatabasesResponse.next_page_token)
  return next_page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListDatabasesResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.ListDatabasesResponse.next_page_token)
}

// -------------------------------------------------------------------

// CreateDatabaseRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreateDatabaseRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& CreateDatabaseRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.CreateDatabaseRequest.parent)
  return _internal_parent();
}
inline void CreateDatabaseRequest::set_parent(const std::string& value) {
  _internal_set_parent(value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.CreateDatabaseRequest.parent)
}
inline std::string* CreateDatabaseRequest::mutable_parent() {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.CreateDatabaseRequest.parent)
  return _internal_mutable_parent();
}
inline const std::string& CreateDatabaseRequest::_internal_parent() const {
  return parent_.Get();
}
inline void CreateDatabaseRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateDatabaseRequest::set_parent(std::string&& value) {
  
  parent_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.admin.database.v1.CreateDatabaseRequest.parent)
}
inline void CreateDatabaseRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.CreateDatabaseRequest.parent)
}
inline void CreateDatabaseRequest::set_parent(const char* value,
    size_t size) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.CreateDatabaseRequest.parent)
}
inline std::string* CreateDatabaseRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateDatabaseRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.CreateDatabaseRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateDatabaseRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.CreateDatabaseRequest.parent)
}

// string create_statement = 2 [(.google.api.field_behavior) = REQUIRED];
inline void CreateDatabaseRequest::clear_create_statement() {
  create_statement_.ClearToEmpty();
}
inline const std::string& CreateDatabaseRequest::create_statement() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.CreateDatabaseRequest.create_statement)
  return _internal_create_statement();
}
inline void CreateDatabaseRequest::set_create_statement(const std::string& value) {
  _internal_set_create_statement(value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.CreateDatabaseRequest.create_statement)
}
inline std::string* CreateDatabaseRequest::mutable_create_statement() {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.CreateDatabaseRequest.create_statement)
  return _internal_mutable_create_statement();
}
inline const std::string& CreateDatabaseRequest::_internal_create_statement() const {
  return create_statement_.Get();
}
inline void CreateDatabaseRequest::_internal_set_create_statement(const std::string& value) {
  
  create_statement_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateDatabaseRequest::set_create_statement(std::string&& value) {
  
  create_statement_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.admin.database.v1.CreateDatabaseRequest.create_statement)
}
inline void CreateDatabaseRequest::set_create_statement(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  create_statement_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.CreateDatabaseRequest.create_statement)
}
inline void CreateDatabaseRequest::set_create_statement(const char* value,
    size_t size) {
  
  create_statement_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.CreateDatabaseRequest.create_statement)
}
inline std::string* CreateDatabaseRequest::_internal_mutable_create_statement() {
  
  return create_statement_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateDatabaseRequest::release_create_statement() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.CreateDatabaseRequest.create_statement)
  return create_statement_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateDatabaseRequest::set_allocated_create_statement(std::string* create_statement) {
  if (create_statement != nullptr) {
    
  } else {
    
  }
  create_statement_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), create_statement,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.CreateDatabaseRequest.create_statement)
}

// repeated string extra_statements = 3 [(.google.api.field_behavior) = OPTIONAL];
inline int CreateDatabaseRequest::_internal_extra_statements_size() const {
  return extra_statements_.size();
}
inline int CreateDatabaseRequest::extra_statements_size() const {
  return _internal_extra_statements_size();
}
inline void CreateDatabaseRequest::clear_extra_statements() {
  extra_statements_.Clear();
}
inline std::string* CreateDatabaseRequest::add_extra_statements() {
  // @@protoc_insertion_point(field_add_mutable:google.spanner.admin.database.v1.CreateDatabaseRequest.extra_statements)
  return _internal_add_extra_statements();
}
inline const std::string& CreateDatabaseRequest::_internal_extra_statements(int index) const {
  return extra_statements_.Get(index);
}
inline const std::string& CreateDatabaseRequest::extra_statements(int index) const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.CreateDatabaseRequest.extra_statements)
  return _internal_extra_statements(index);
}
inline std::string* CreateDatabaseRequest::mutable_extra_statements(int index) {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.CreateDatabaseRequest.extra_statements)
  return extra_statements_.Mutable(index);
}
inline void CreateDatabaseRequest::set_extra_statements(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.CreateDatabaseRequest.extra_statements)
  extra_statements_.Mutable(index)->assign(value);
}
inline void CreateDatabaseRequest::set_extra_statements(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.CreateDatabaseRequest.extra_statements)
  extra_statements_.Mutable(index)->assign(std::move(value));
}
inline void CreateDatabaseRequest::set_extra_statements(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  extra_statements_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.CreateDatabaseRequest.extra_statements)
}
inline void CreateDatabaseRequest::set_extra_statements(int index, const char* value, size_t size) {
  extra_statements_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.CreateDatabaseRequest.extra_statements)
}
inline std::string* CreateDatabaseRequest::_internal_add_extra_statements() {
  return extra_statements_.Add();
}
inline void CreateDatabaseRequest::add_extra_statements(const std::string& value) {
  extra_statements_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.spanner.admin.database.v1.CreateDatabaseRequest.extra_statements)
}
inline void CreateDatabaseRequest::add_extra_statements(std::string&& value) {
  extra_statements_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.spanner.admin.database.v1.CreateDatabaseRequest.extra_statements)
}
inline void CreateDatabaseRequest::add_extra_statements(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  extra_statements_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.spanner.admin.database.v1.CreateDatabaseRequest.extra_statements)
}
inline void CreateDatabaseRequest::add_extra_statements(const char* value, size_t size) {
  extra_statements_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.spanner.admin.database.v1.CreateDatabaseRequest.extra_statements)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CreateDatabaseRequest::extra_statements() const {
  // @@protoc_insertion_point(field_list:google.spanner.admin.database.v1.CreateDatabaseRequest.extra_statements)
  return extra_statements_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CreateDatabaseRequest::mutable_extra_statements() {
  // @@protoc_insertion_point(field_mutable_list:google.spanner.admin.database.v1.CreateDatabaseRequest.extra_statements)
  return &extra_statements_;
}

// .google.spanner.admin.database.v1.EncryptionConfig encryption_config = 4 [(.google.api.field_behavior) = OPTIONAL];
inline bool CreateDatabaseRequest::_internal_has_encryption_config() const {
  return this != internal_default_instance() && encryption_config_ != nullptr;
}
inline bool CreateDatabaseRequest::has_encryption_config() const {
  return _internal_has_encryption_config();
}
inline const ::google::spanner::admin::database::v1::EncryptionConfig& CreateDatabaseRequest::_internal_encryption_config() const {
  const ::google::spanner::admin::database::v1::EncryptionConfig* p = encryption_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::spanner::admin::database::v1::EncryptionConfig&>(
      ::google::spanner::admin::database::v1::_EncryptionConfig_default_instance_);
}
inline const ::google::spanner::admin::database::v1::EncryptionConfig& CreateDatabaseRequest::encryption_config() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.CreateDatabaseRequest.encryption_config)
  return _internal_encryption_config();
}
inline void CreateDatabaseRequest::unsafe_arena_set_allocated_encryption_config(
    ::google::spanner::admin::database::v1::EncryptionConfig* encryption_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(encryption_config_);
  }
  encryption_config_ = encryption_config;
  if (encryption_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.spanner.admin.database.v1.CreateDatabaseRequest.encryption_config)
}
inline ::google::spanner::admin::database::v1::EncryptionConfig* CreateDatabaseRequest::release_encryption_config() {
  
  ::google::spanner::admin::database::v1::EncryptionConfig* temp = encryption_config_;
  encryption_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::spanner::admin::database::v1::EncryptionConfig* CreateDatabaseRequest::unsafe_arena_release_encryption_config() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.CreateDatabaseRequest.encryption_config)
  
  ::google::spanner::admin::database::v1::EncryptionConfig* temp = encryption_config_;
  encryption_config_ = nullptr;
  return temp;
}
inline ::google::spanner::admin::database::v1::EncryptionConfig* CreateDatabaseRequest::_internal_mutable_encryption_config() {
  
  if (encryption_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::spanner::admin::database::v1::EncryptionConfig>(GetArena());
    encryption_config_ = p;
  }
  return encryption_config_;
}
inline ::google::spanner::admin::database::v1::EncryptionConfig* CreateDatabaseRequest::mutable_encryption_config() {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.CreateDatabaseRequest.encryption_config)
  return _internal_mutable_encryption_config();
}
inline void CreateDatabaseRequest::set_allocated_encryption_config(::google::spanner::admin::database::v1::EncryptionConfig* encryption_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(encryption_config_);
  }
  if (encryption_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(encryption_config)->GetArena();
    if (message_arena != submessage_arena) {
      encryption_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, encryption_config, submessage_arena);
    }
    
  } else {
    
  }
  encryption_config_ = encryption_config;
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.CreateDatabaseRequest.encryption_config)
}

// -------------------------------------------------------------------

// CreateDatabaseMetadata

// string database = 1 [(.google.api.resource_reference) = {
inline void CreateDatabaseMetadata::clear_database() {
  database_.ClearToEmpty();
}
inline const std::string& CreateDatabaseMetadata::database() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.CreateDatabaseMetadata.database)
  return _internal_database();
}
inline void CreateDatabaseMetadata::set_database(const std::string& value) {
  _internal_set_database(value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.CreateDatabaseMetadata.database)
}
inline std::string* CreateDatabaseMetadata::mutable_database() {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.CreateDatabaseMetadata.database)
  return _internal_mutable_database();
}
inline const std::string& CreateDatabaseMetadata::_internal_database() const {
  return database_.Get();
}
inline void CreateDatabaseMetadata::_internal_set_database(const std::string& value) {
  
  database_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateDatabaseMetadata::set_database(std::string&& value) {
  
  database_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.admin.database.v1.CreateDatabaseMetadata.database)
}
inline void CreateDatabaseMetadata::set_database(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  database_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.CreateDatabaseMetadata.database)
}
inline void CreateDatabaseMetadata::set_database(const char* value,
    size_t size) {
  
  database_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.CreateDatabaseMetadata.database)
}
inline std::string* CreateDatabaseMetadata::_internal_mutable_database() {
  
  return database_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateDatabaseMetadata::release_database() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.CreateDatabaseMetadata.database)
  return database_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateDatabaseMetadata::set_allocated_database(std::string* database) {
  if (database != nullptr) {
    
  } else {
    
  }
  database_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), database,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.CreateDatabaseMetadata.database)
}

// -------------------------------------------------------------------

// GetDatabaseRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetDatabaseRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GetDatabaseRequest::name() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.GetDatabaseRequest.name)
  return _internal_name();
}
inline void GetDatabaseRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.GetDatabaseRequest.name)
}
inline std::string* GetDatabaseRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.GetDatabaseRequest.name)
  return _internal_mutable_name();
}
inline const std::string& GetDatabaseRequest::_internal_name() const {
  return name_.Get();
}
inline void GetDatabaseRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetDatabaseRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.admin.database.v1.GetDatabaseRequest.name)
}
inline void GetDatabaseRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.GetDatabaseRequest.name)
}
inline void GetDatabaseRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.GetDatabaseRequest.name)
}
inline std::string* GetDatabaseRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetDatabaseRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.GetDatabaseRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetDatabaseRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.GetDatabaseRequest.name)
}

// -------------------------------------------------------------------

// UpdateDatabaseDdlRequest

// string database = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void UpdateDatabaseDdlRequest::clear_database() {
  database_.ClearToEmpty();
}
inline const std::string& UpdateDatabaseDdlRequest::database() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.database)
  return _internal_database();
}
inline void UpdateDatabaseDdlRequest::set_database(const std::string& value) {
  _internal_set_database(value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.database)
}
inline std::string* UpdateDatabaseDdlRequest::mutable_database() {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.database)
  return _internal_mutable_database();
}
inline const std::string& UpdateDatabaseDdlRequest::_internal_database() const {
  return database_.Get();
}
inline void UpdateDatabaseDdlRequest::_internal_set_database(const std::string& value) {
  
  database_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateDatabaseDdlRequest::set_database(std::string&& value) {
  
  database_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.database)
}
inline void UpdateDatabaseDdlRequest::set_database(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  database_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.database)
}
inline void UpdateDatabaseDdlRequest::set_database(const char* value,
    size_t size) {
  
  database_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.database)
}
inline std::string* UpdateDatabaseDdlRequest::_internal_mutable_database() {
  
  return database_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateDatabaseDdlRequest::release_database() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.database)
  return database_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateDatabaseDdlRequest::set_allocated_database(std::string* database) {
  if (database != nullptr) {
    
  } else {
    
  }
  database_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), database,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.database)
}

// repeated string statements = 2 [(.google.api.field_behavior) = REQUIRED];
inline int UpdateDatabaseDdlRequest::_internal_statements_size() const {
  return statements_.size();
}
inline int UpdateDatabaseDdlRequest::statements_size() const {
  return _internal_statements_size();
}
inline void UpdateDatabaseDdlRequest::clear_statements() {
  statements_.Clear();
}
inline std::string* UpdateDatabaseDdlRequest::add_statements() {
  // @@protoc_insertion_point(field_add_mutable:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.statements)
  return _internal_add_statements();
}
inline const std::string& UpdateDatabaseDdlRequest::_internal_statements(int index) const {
  return statements_.Get(index);
}
inline const std::string& UpdateDatabaseDdlRequest::statements(int index) const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.statements)
  return _internal_statements(index);
}
inline std::string* UpdateDatabaseDdlRequest::mutable_statements(int index) {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.statements)
  return statements_.Mutable(index);
}
inline void UpdateDatabaseDdlRequest::set_statements(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.statements)
  statements_.Mutable(index)->assign(value);
}
inline void UpdateDatabaseDdlRequest::set_statements(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.statements)
  statements_.Mutable(index)->assign(std::move(value));
}
inline void UpdateDatabaseDdlRequest::set_statements(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  statements_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.statements)
}
inline void UpdateDatabaseDdlRequest::set_statements(int index, const char* value, size_t size) {
  statements_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.statements)
}
inline std::string* UpdateDatabaseDdlRequest::_internal_add_statements() {
  return statements_.Add();
}
inline void UpdateDatabaseDdlRequest::add_statements(const std::string& value) {
  statements_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.statements)
}
inline void UpdateDatabaseDdlRequest::add_statements(std::string&& value) {
  statements_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.statements)
}
inline void UpdateDatabaseDdlRequest::add_statements(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  statements_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.statements)
}
inline void UpdateDatabaseDdlRequest::add_statements(const char* value, size_t size) {
  statements_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.statements)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
UpdateDatabaseDdlRequest::statements() const {
  // @@protoc_insertion_point(field_list:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.statements)
  return statements_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
UpdateDatabaseDdlRequest::mutable_statements() {
  // @@protoc_insertion_point(field_mutable_list:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.statements)
  return &statements_;
}

// string operation_id = 3;
inline void UpdateDatabaseDdlRequest::clear_operation_id() {
  operation_id_.ClearToEmpty();
}
inline const std::string& UpdateDatabaseDdlRequest::operation_id() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.operation_id)
  return _internal_operation_id();
}
inline void UpdateDatabaseDdlRequest::set_operation_id(const std::string& value) {
  _internal_set_operation_id(value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.operation_id)
}
inline std::string* UpdateDatabaseDdlRequest::mutable_operation_id() {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.operation_id)
  return _internal_mutable_operation_id();
}
inline const std::string& UpdateDatabaseDdlRequest::_internal_operation_id() const {
  return operation_id_.Get();
}
inline void UpdateDatabaseDdlRequest::_internal_set_operation_id(const std::string& value) {
  
  operation_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateDatabaseDdlRequest::set_operation_id(std::string&& value) {
  
  operation_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.operation_id)
}
inline void UpdateDatabaseDdlRequest::set_operation_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  operation_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.operation_id)
}
inline void UpdateDatabaseDdlRequest::set_operation_id(const char* value,
    size_t size) {
  
  operation_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.operation_id)
}
inline std::string* UpdateDatabaseDdlRequest::_internal_mutable_operation_id() {
  
  return operation_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateDatabaseDdlRequest::release_operation_id() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.operation_id)
  return operation_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateDatabaseDdlRequest::set_allocated_operation_id(std::string* operation_id) {
  if (operation_id != nullptr) {
    
  } else {
    
  }
  operation_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), operation_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.operation_id)
}

// -------------------------------------------------------------------

// UpdateDatabaseDdlMetadata

// string database = 1 [(.google.api.resource_reference) = {
inline void UpdateDatabaseDdlMetadata::clear_database() {
  database_.ClearToEmpty();
}
inline const std::string& UpdateDatabaseDdlMetadata::database() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.database)
  return _internal_database();
}
inline void UpdateDatabaseDdlMetadata::set_database(const std::string& value) {
  _internal_set_database(value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.database)
}
inline std::string* UpdateDatabaseDdlMetadata::mutable_database() {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.database)
  return _internal_mutable_database();
}
inline const std::string& UpdateDatabaseDdlMetadata::_internal_database() const {
  return database_.Get();
}
inline void UpdateDatabaseDdlMetadata::_internal_set_database(const std::string& value) {
  
  database_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateDatabaseDdlMetadata::set_database(std::string&& value) {
  
  database_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.database)
}
inline void UpdateDatabaseDdlMetadata::set_database(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  database_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.database)
}
inline void UpdateDatabaseDdlMetadata::set_database(const char* value,
    size_t size) {
  
  database_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.database)
}
inline std::string* UpdateDatabaseDdlMetadata::_internal_mutable_database() {
  
  return database_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateDatabaseDdlMetadata::release_database() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.database)
  return database_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateDatabaseDdlMetadata::set_allocated_database(std::string* database) {
  if (database != nullptr) {
    
  } else {
    
  }
  database_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), database,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.database)
}

// repeated string statements = 2;
inline int UpdateDatabaseDdlMetadata::_internal_statements_size() const {
  return statements_.size();
}
inline int UpdateDatabaseDdlMetadata::statements_size() const {
  return _internal_statements_size();
}
inline void UpdateDatabaseDdlMetadata::clear_statements() {
  statements_.Clear();
}
inline std::string* UpdateDatabaseDdlMetadata::add_statements() {
  // @@protoc_insertion_point(field_add_mutable:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.statements)
  return _internal_add_statements();
}
inline const std::string& UpdateDatabaseDdlMetadata::_internal_statements(int index) const {
  return statements_.Get(index);
}
inline const std::string& UpdateDatabaseDdlMetadata::statements(int index) const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.statements)
  return _internal_statements(index);
}
inline std::string* UpdateDatabaseDdlMetadata::mutable_statements(int index) {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.statements)
  return statements_.Mutable(index);
}
inline void UpdateDatabaseDdlMetadata::set_statements(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.statements)
  statements_.Mutable(index)->assign(value);
}
inline void UpdateDatabaseDdlMetadata::set_statements(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.statements)
  statements_.Mutable(index)->assign(std::move(value));
}
inline void UpdateDatabaseDdlMetadata::set_statements(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  statements_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.statements)
}
inline void UpdateDatabaseDdlMetadata::set_statements(int index, const char* value, size_t size) {
  statements_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.statements)
}
inline std::string* UpdateDatabaseDdlMetadata::_internal_add_statements() {
  return statements_.Add();
}
inline void UpdateDatabaseDdlMetadata::add_statements(const std::string& value) {
  statements_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.statements)
}
inline void UpdateDatabaseDdlMetadata::add_statements(std::string&& value) {
  statements_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.statements)
}
inline void UpdateDatabaseDdlMetadata::add_statements(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  statements_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.statements)
}
inline void UpdateDatabaseDdlMetadata::add_statements(const char* value, size_t size) {
  statements_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.statements)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
UpdateDatabaseDdlMetadata::statements() const {
  // @@protoc_insertion_point(field_list:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.statements)
  return statements_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
UpdateDatabaseDdlMetadata::mutable_statements() {
  // @@protoc_insertion_point(field_mutable_list:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.statements)
  return &statements_;
}

// repeated .google.protobuf.Timestamp commit_timestamps = 3;
inline int UpdateDatabaseDdlMetadata::_internal_commit_timestamps_size() const {
  return commit_timestamps_.size();
}
inline int UpdateDatabaseDdlMetadata::commit_timestamps_size() const {
  return _internal_commit_timestamps_size();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* UpdateDatabaseDdlMetadata::mutable_commit_timestamps(int index) {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.commit_timestamps)
  return commit_timestamps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Timestamp >*
UpdateDatabaseDdlMetadata::mutable_commit_timestamps() {
  // @@protoc_insertion_point(field_mutable_list:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.commit_timestamps)
  return &commit_timestamps_;
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& UpdateDatabaseDdlMetadata::_internal_commit_timestamps(int index) const {
  return commit_timestamps_.Get(index);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& UpdateDatabaseDdlMetadata::commit_timestamps(int index) const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.commit_timestamps)
  return _internal_commit_timestamps(index);
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* UpdateDatabaseDdlMetadata::_internal_add_commit_timestamps() {
  return commit_timestamps_.Add();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* UpdateDatabaseDdlMetadata::add_commit_timestamps() {
  // @@protoc_insertion_point(field_add:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.commit_timestamps)
  return _internal_add_commit_timestamps();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Timestamp >&
UpdateDatabaseDdlMetadata::commit_timestamps() const {
  // @@protoc_insertion_point(field_list:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.commit_timestamps)
  return commit_timestamps_;
}

// bool throttled = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void UpdateDatabaseDdlMetadata::clear_throttled() {
  throttled_ = false;
}
inline bool UpdateDatabaseDdlMetadata::_internal_throttled() const {
  return throttled_;
}
inline bool UpdateDatabaseDdlMetadata::throttled() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.throttled)
  return _internal_throttled();
}
inline void UpdateDatabaseDdlMetadata::_internal_set_throttled(bool value) {
  
  throttled_ = value;
}
inline void UpdateDatabaseDdlMetadata::set_throttled(bool value) {
  _internal_set_throttled(value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.throttled)
}

// repeated .google.spanner.admin.database.v1.OperationProgress progress = 5;
inline int UpdateDatabaseDdlMetadata::_internal_progress_size() const {
  return progress_.size();
}
inline int UpdateDatabaseDdlMetadata::progress_size() const {
  return _internal_progress_size();
}
inline ::google::spanner::admin::database::v1::OperationProgress* UpdateDatabaseDdlMetadata::mutable_progress(int index) {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.progress)
  return progress_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::spanner::admin::database::v1::OperationProgress >*
UpdateDatabaseDdlMetadata::mutable_progress() {
  // @@protoc_insertion_point(field_mutable_list:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.progress)
  return &progress_;
}
inline const ::google::spanner::admin::database::v1::OperationProgress& UpdateDatabaseDdlMetadata::_internal_progress(int index) const {
  return progress_.Get(index);
}
inline const ::google::spanner::admin::database::v1::OperationProgress& UpdateDatabaseDdlMetadata::progress(int index) const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.progress)
  return _internal_progress(index);
}
inline ::google::spanner::admin::database::v1::OperationProgress* UpdateDatabaseDdlMetadata::_internal_add_progress() {
  return progress_.Add();
}
inline ::google::spanner::admin::database::v1::OperationProgress* UpdateDatabaseDdlMetadata::add_progress() {
  // @@protoc_insertion_point(field_add:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.progress)
  return _internal_add_progress();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::spanner::admin::database::v1::OperationProgress >&
UpdateDatabaseDdlMetadata::progress() const {
  // @@protoc_insertion_point(field_list:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.progress)
  return progress_;
}

// -------------------------------------------------------------------

// DropDatabaseRequest

// string database = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DropDatabaseRequest::clear_database() {
  database_.ClearToEmpty();
}
inline const std::string& DropDatabaseRequest::database() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.DropDatabaseRequest.database)
  return _internal_database();
}
inline void DropDatabaseRequest::set_database(const std::string& value) {
  _internal_set_database(value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.DropDatabaseRequest.database)
}
inline std::string* DropDatabaseRequest::mutable_database() {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.DropDatabaseRequest.database)
  return _internal_mutable_database();
}
inline const std::string& DropDatabaseRequest::_internal_database() const {
  return database_.Get();
}
inline void DropDatabaseRequest::_internal_set_database(const std::string& value) {
  
  database_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DropDatabaseRequest::set_database(std::string&& value) {
  
  database_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.admin.database.v1.DropDatabaseRequest.database)
}
inline void DropDatabaseRequest::set_database(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  database_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.DropDatabaseRequest.database)
}
inline void DropDatabaseRequest::set_database(const char* value,
    size_t size) {
  
  database_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.DropDatabaseRequest.database)
}
inline std::string* DropDatabaseRequest::_internal_mutable_database() {
  
  return database_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DropDatabaseRequest::release_database() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.DropDatabaseRequest.database)
  return database_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DropDatabaseRequest::set_allocated_database(std::string* database) {
  if (database != nullptr) {
    
  } else {
    
  }
  database_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), database,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.DropDatabaseRequest.database)
}

// -------------------------------------------------------------------

// GetDatabaseDdlRequest

// string database = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetDatabaseDdlRequest::clear_database() {
  database_.ClearToEmpty();
}
inline const std::string& GetDatabaseDdlRequest::database() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.GetDatabaseDdlRequest.database)
  return _internal_database();
}
inline void GetDatabaseDdlRequest::set_database(const std::string& value) {
  _internal_set_database(value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.GetDatabaseDdlRequest.database)
}
inline std::string* GetDatabaseDdlRequest::mutable_database() {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.GetDatabaseDdlRequest.database)
  return _internal_mutable_database();
}
inline const std::string& GetDatabaseDdlRequest::_internal_database() const {
  return database_.Get();
}
inline void GetDatabaseDdlRequest::_internal_set_database(const std::string& value) {
  
  database_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetDatabaseDdlRequest::set_database(std::string&& value) {
  
  database_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.admin.database.v1.GetDatabaseDdlRequest.database)
}
inline void GetDatabaseDdlRequest::set_database(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  database_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.GetDatabaseDdlRequest.database)
}
inline void GetDatabaseDdlRequest::set_database(const char* value,
    size_t size) {
  
  database_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.GetDatabaseDdlRequest.database)
}
inline std::string* GetDatabaseDdlRequest::_internal_mutable_database() {
  
  return database_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetDatabaseDdlRequest::release_database() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.GetDatabaseDdlRequest.database)
  return database_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetDatabaseDdlRequest::set_allocated_database(std::string* database) {
  if (database != nullptr) {
    
  } else {
    
  }
  database_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), database,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.GetDatabaseDdlRequest.database)
}

// -------------------------------------------------------------------

// GetDatabaseDdlResponse

// repeated string statements = 1;
inline int GetDatabaseDdlResponse::_internal_statements_size() const {
  return statements_.size();
}
inline int GetDatabaseDdlResponse::statements_size() const {
  return _internal_statements_size();
}
inline void GetDatabaseDdlResponse::clear_statements() {
  statements_.Clear();
}
inline std::string* GetDatabaseDdlResponse::add_statements() {
  // @@protoc_insertion_point(field_add_mutable:google.spanner.admin.database.v1.GetDatabaseDdlResponse.statements)
  return _internal_add_statements();
}
inline const std::string& GetDatabaseDdlResponse::_internal_statements(int index) const {
  return statements_.Get(index);
}
inline const std::string& GetDatabaseDdlResponse::statements(int index) const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.GetDatabaseDdlResponse.statements)
  return _internal_statements(index);
}
inline std::string* GetDatabaseDdlResponse::mutable_statements(int index) {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.GetDatabaseDdlResponse.statements)
  return statements_.Mutable(index);
}
inline void GetDatabaseDdlResponse::set_statements(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.GetDatabaseDdlResponse.statements)
  statements_.Mutable(index)->assign(value);
}
inline void GetDatabaseDdlResponse::set_statements(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.GetDatabaseDdlResponse.statements)
  statements_.Mutable(index)->assign(std::move(value));
}
inline void GetDatabaseDdlResponse::set_statements(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  statements_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.GetDatabaseDdlResponse.statements)
}
inline void GetDatabaseDdlResponse::set_statements(int index, const char* value, size_t size) {
  statements_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.GetDatabaseDdlResponse.statements)
}
inline std::string* GetDatabaseDdlResponse::_internal_add_statements() {
  return statements_.Add();
}
inline void GetDatabaseDdlResponse::add_statements(const std::string& value) {
  statements_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.spanner.admin.database.v1.GetDatabaseDdlResponse.statements)
}
inline void GetDatabaseDdlResponse::add_statements(std::string&& value) {
  statements_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.spanner.admin.database.v1.GetDatabaseDdlResponse.statements)
}
inline void GetDatabaseDdlResponse::add_statements(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  statements_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.spanner.admin.database.v1.GetDatabaseDdlResponse.statements)
}
inline void GetDatabaseDdlResponse::add_statements(const char* value, size_t size) {
  statements_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.spanner.admin.database.v1.GetDatabaseDdlResponse.statements)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetDatabaseDdlResponse::statements() const {
  // @@protoc_insertion_point(field_list:google.spanner.admin.database.v1.GetDatabaseDdlResponse.statements)
  return statements_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetDatabaseDdlResponse::mutable_statements() {
  // @@protoc_insertion_point(field_mutable_list:google.spanner.admin.database.v1.GetDatabaseDdlResponse.statements)
  return &statements_;
}

// -------------------------------------------------------------------

// ListDatabaseOperationsRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListDatabaseOperationsRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& ListDatabaseOperationsRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.ListDatabaseOperationsRequest.parent)
  return _internal_parent();
}
inline void ListDatabaseOperationsRequest::set_parent(const std::string& value) {
  _internal_set_parent(value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.ListDatabaseOperationsRequest.parent)
}
inline std::string* ListDatabaseOperationsRequest::mutable_parent() {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.ListDatabaseOperationsRequest.parent)
  return _internal_mutable_parent();
}
inline const std::string& ListDatabaseOperationsRequest::_internal_parent() const {
  return parent_.Get();
}
inline void ListDatabaseOperationsRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListDatabaseOperationsRequest::set_parent(std::string&& value) {
  
  parent_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.admin.database.v1.ListDatabaseOperationsRequest.parent)
}
inline void ListDatabaseOperationsRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.ListDatabaseOperationsRequest.parent)
}
inline void ListDatabaseOperationsRequest::set_parent(const char* value,
    size_t size) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.ListDatabaseOperationsRequest.parent)
}
inline std::string* ListDatabaseOperationsRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListDatabaseOperationsRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.ListDatabaseOperationsRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListDatabaseOperationsRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.ListDatabaseOperationsRequest.parent)
}

// string filter = 2;
inline void ListDatabaseOperationsRequest::clear_filter() {
  filter_.ClearToEmpty();
}
inline const std::string& ListDatabaseOperationsRequest::filter() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.ListDatabaseOperationsRequest.filter)
  return _internal_filter();
}
inline void ListDatabaseOperationsRequest::set_filter(const std::string& value) {
  _internal_set_filter(value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.ListDatabaseOperationsRequest.filter)
}
inline std::string* ListDatabaseOperationsRequest::mutable_filter() {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.ListDatabaseOperationsRequest.filter)
  return _internal_mutable_filter();
}
inline const std::string& ListDatabaseOperationsRequest::_internal_filter() const {
  return filter_.Get();
}
inline void ListDatabaseOperationsRequest::_internal_set_filter(const std::string& value) {
  
  filter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListDatabaseOperationsRequest::set_filter(std::string&& value) {
  
  filter_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.admin.database.v1.ListDatabaseOperationsRequest.filter)
}
inline void ListDatabaseOperationsRequest::set_filter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.ListDatabaseOperationsRequest.filter)
}
inline void ListDatabaseOperationsRequest::set_filter(const char* value,
    size_t size) {
  
  filter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.ListDatabaseOperationsRequest.filter)
}
inline std::string* ListDatabaseOperationsRequest::_internal_mutable_filter() {
  
  return filter_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListDatabaseOperationsRequest::release_filter() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.ListDatabaseOperationsRequest.filter)
  return filter_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListDatabaseOperationsRequest::set_allocated_filter(std::string* filter) {
  if (filter != nullptr) {
    
  } else {
    
  }
  filter_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filter,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.ListDatabaseOperationsRequest.filter)
}

// int32 page_size = 3;
inline void ListDatabaseOperationsRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListDatabaseOperationsRequest::_internal_page_size() const {
  return page_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListDatabaseOperationsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.ListDatabaseOperationsRequest.page_size)
  return _internal_page_size();
}
inline void ListDatabaseOperationsRequest::_internal_set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  page_size_ = value;
}
inline void ListDatabaseOperationsRequest::set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.ListDatabaseOperationsRequest.page_size)
}

// string page_token = 4;
inline void ListDatabaseOperationsRequest::clear_page_token() {
  page_token_.ClearToEmpty();
}
inline const std::string& ListDatabaseOperationsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.ListDatabaseOperationsRequest.page_token)
  return _internal_page_token();
}
inline void ListDatabaseOperationsRequest::set_page_token(const std::string& value) {
  _internal_set_page_token(value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.ListDatabaseOperationsRequest.page_token)
}
inline std::string* ListDatabaseOperationsRequest::mutable_page_token() {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.ListDatabaseOperationsRequest.page_token)
  return _internal_mutable_page_token();
}
inline const std::string& ListDatabaseOperationsRequest::_internal_page_token() const {
  return page_token_.Get();
}
inline void ListDatabaseOperationsRequest::_internal_set_page_token(const std::string& value) {
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListDatabaseOperationsRequest::set_page_token(std::string&& value) {
  
  page_token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.admin.database.v1.ListDatabaseOperationsRequest.page_token)
}
inline void ListDatabaseOperationsRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.ListDatabaseOperationsRequest.page_token)
}
inline void ListDatabaseOperationsRequest::set_page_token(const char* value,
    size_t size) {
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.ListDatabaseOperationsRequest.page_token)
}
inline std::string* ListDatabaseOperationsRequest::_internal_mutable_page_token() {
  
  return page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListDatabaseOperationsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.ListDatabaseOperationsRequest.page_token)
  return page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListDatabaseOperationsRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.ListDatabaseOperationsRequest.page_token)
}

// -------------------------------------------------------------------

// ListDatabaseOperationsResponse

// repeated .google.longrunning.Operation operations = 1;
inline int ListDatabaseOperationsResponse::_internal_operations_size() const {
  return operations_.size();
}
inline int ListDatabaseOperationsResponse::operations_size() const {
  return _internal_operations_size();
}
inline ::google::longrunning::Operation* ListDatabaseOperationsResponse::mutable_operations(int index) {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.ListDatabaseOperationsResponse.operations)
  return operations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::longrunning::Operation >*
ListDatabaseOperationsResponse::mutable_operations() {
  // @@protoc_insertion_point(field_mutable_list:google.spanner.admin.database.v1.ListDatabaseOperationsResponse.operations)
  return &operations_;
}
inline const ::google::longrunning::Operation& ListDatabaseOperationsResponse::_internal_operations(int index) const {
  return operations_.Get(index);
}
inline const ::google::longrunning::Operation& ListDatabaseOperationsResponse::operations(int index) const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.ListDatabaseOperationsResponse.operations)
  return _internal_operations(index);
}
inline ::google::longrunning::Operation* ListDatabaseOperationsResponse::_internal_add_operations() {
  return operations_.Add();
}
inline ::google::longrunning::Operation* ListDatabaseOperationsResponse::add_operations() {
  // @@protoc_insertion_point(field_add:google.spanner.admin.database.v1.ListDatabaseOperationsResponse.operations)
  return _internal_add_operations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::longrunning::Operation >&
ListDatabaseOperationsResponse::operations() const {
  // @@protoc_insertion_point(field_list:google.spanner.admin.database.v1.ListDatabaseOperationsResponse.operations)
  return operations_;
}

// string next_page_token = 2;
inline void ListDatabaseOperationsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty();
}
inline const std::string& ListDatabaseOperationsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.ListDatabaseOperationsResponse.next_page_token)
  return _internal_next_page_token();
}
inline void ListDatabaseOperationsResponse::set_next_page_token(const std::string& value) {
  _internal_set_next_page_token(value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.ListDatabaseOperationsResponse.next_page_token)
}
inline std::string* ListDatabaseOperationsResponse::mutable_next_page_token() {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.ListDatabaseOperationsResponse.next_page_token)
  return _internal_mutable_next_page_token();
}
inline const std::string& ListDatabaseOperationsResponse::_internal_next_page_token() const {
  return next_page_token_.Get();
}
inline void ListDatabaseOperationsResponse::_internal_set_next_page_token(const std::string& value) {
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListDatabaseOperationsResponse::set_next_page_token(std::string&& value) {
  
  next_page_token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.admin.database.v1.ListDatabaseOperationsResponse.next_page_token)
}
inline void ListDatabaseOperationsResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.ListDatabaseOperationsResponse.next_page_token)
}
inline void ListDatabaseOperationsResponse::set_next_page_token(const char* value,
    size_t size) {
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.ListDatabaseOperationsResponse.next_page_token)
}
inline std::string* ListDatabaseOperationsResponse::_internal_mutable_next_page_token() {
  
  return next_page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListDatabaseOperationsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.ListDatabaseOperationsResponse.next_page_token)
  return next_page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListDatabaseOperationsResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.ListDatabaseOperationsResponse.next_page_token)
}

// -------------------------------------------------------------------

// RestoreDatabaseRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void RestoreDatabaseRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& RestoreDatabaseRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.RestoreDatabaseRequest.parent)
  return _internal_parent();
}
inline void RestoreDatabaseRequest::set_parent(const std::string& value) {
  _internal_set_parent(value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.RestoreDatabaseRequest.parent)
}
inline std::string* RestoreDatabaseRequest::mutable_parent() {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.RestoreDatabaseRequest.parent)
  return _internal_mutable_parent();
}
inline const std::string& RestoreDatabaseRequest::_internal_parent() const {
  return parent_.Get();
}
inline void RestoreDatabaseRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RestoreDatabaseRequest::set_parent(std::string&& value) {
  
  parent_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.admin.database.v1.RestoreDatabaseRequest.parent)
}
inline void RestoreDatabaseRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.RestoreDatabaseRequest.parent)
}
inline void RestoreDatabaseRequest::set_parent(const char* value,
    size_t size) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.RestoreDatabaseRequest.parent)
}
inline std::string* RestoreDatabaseRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RestoreDatabaseRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.RestoreDatabaseRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RestoreDatabaseRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.RestoreDatabaseRequest.parent)
}

// string database_id = 2 [(.google.api.field_behavior) = REQUIRED];
inline void RestoreDatabaseRequest::clear_database_id() {
  database_id_.ClearToEmpty();
}
inline const std::string& RestoreDatabaseRequest::database_id() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.RestoreDatabaseRequest.database_id)
  return _internal_database_id();
}
inline void RestoreDatabaseRequest::set_database_id(const std::string& value) {
  _internal_set_database_id(value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.RestoreDatabaseRequest.database_id)
}
inline std::string* RestoreDatabaseRequest::mutable_database_id() {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.RestoreDatabaseRequest.database_id)
  return _internal_mutable_database_id();
}
inline const std::string& RestoreDatabaseRequest::_internal_database_id() const {
  return database_id_.Get();
}
inline void RestoreDatabaseRequest::_internal_set_database_id(const std::string& value) {
  
  database_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RestoreDatabaseRequest::set_database_id(std::string&& value) {
  
  database_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.admin.database.v1.RestoreDatabaseRequest.database_id)
}
inline void RestoreDatabaseRequest::set_database_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  database_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.RestoreDatabaseRequest.database_id)
}
inline void RestoreDatabaseRequest::set_database_id(const char* value,
    size_t size) {
  
  database_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.RestoreDatabaseRequest.database_id)
}
inline std::string* RestoreDatabaseRequest::_internal_mutable_database_id() {
  
  return database_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RestoreDatabaseRequest::release_database_id() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.RestoreDatabaseRequest.database_id)
  return database_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RestoreDatabaseRequest::set_allocated_database_id(std::string* database_id) {
  if (database_id != nullptr) {
    
  } else {
    
  }
  database_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), database_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.RestoreDatabaseRequest.database_id)
}

// string backup = 3 [(.google.api.resource_reference) = {
inline bool RestoreDatabaseRequest::_internal_has_backup() const {
  return source_case() == kBackup;
}
inline bool RestoreDatabaseRequest::has_backup() const {
  return _internal_has_backup();
}
inline void RestoreDatabaseRequest::set_has_backup() {
  _oneof_case_[0] = kBackup;
}
inline void RestoreDatabaseRequest::clear_backup() {
  if (_internal_has_backup()) {
    source_.backup_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_source();
  }
}
inline const std::string& RestoreDatabaseRequest::backup() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.RestoreDatabaseRequest.backup)
  return _internal_backup();
}
inline void RestoreDatabaseRequest::set_backup(const std::string& value) {
  _internal_set_backup(value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.RestoreDatabaseRequest.backup)
}
inline std::string* RestoreDatabaseRequest::mutable_backup() {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.RestoreDatabaseRequest.backup)
  return _internal_mutable_backup();
}
inline const std::string& RestoreDatabaseRequest::_internal_backup() const {
  if (_internal_has_backup()) {
    return source_.backup_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void RestoreDatabaseRequest::_internal_set_backup(const std::string& value) {
  if (!_internal_has_backup()) {
    clear_source();
    set_has_backup();
    source_.backup_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  source_.backup_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RestoreDatabaseRequest::set_backup(std::string&& value) {
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.RestoreDatabaseRequest.backup)
  if (!_internal_has_backup()) {
    clear_source();
    set_has_backup();
    source_.backup_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  source_.backup_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.admin.database.v1.RestoreDatabaseRequest.backup)
}
inline void RestoreDatabaseRequest::set_backup(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_backup()) {
    clear_source();
    set_has_backup();
    source_.backup_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  source_.backup_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.RestoreDatabaseRequest.backup)
}
inline void RestoreDatabaseRequest::set_backup(const char* value,
                             size_t size) {
  if (!_internal_has_backup()) {
    clear_source();
    set_has_backup();
    source_.backup_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  source_.backup_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.RestoreDatabaseRequest.backup)
}
inline std::string* RestoreDatabaseRequest::_internal_mutable_backup() {
  if (!_internal_has_backup()) {
    clear_source();
    set_has_backup();
    source_.backup_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return source_.backup_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RestoreDatabaseRequest::release_backup() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.RestoreDatabaseRequest.backup)
  if (_internal_has_backup()) {
    clear_has_source();
    return source_.backup_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void RestoreDatabaseRequest::set_allocated_backup(std::string* backup) {
  if (has_source()) {
    clear_source();
  }
  if (backup != nullptr) {
    set_has_backup();
    source_.backup_.UnsafeSetDefault(backup);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(backup);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.RestoreDatabaseRequest.backup)
}

// .google.spanner.admin.database.v1.RestoreDatabaseEncryptionConfig encryption_config = 4 [(.google.api.field_behavior) = OPTIONAL];
inline bool RestoreDatabaseRequest::_internal_has_encryption_config() const {
  return this != internal_default_instance() && encryption_config_ != nullptr;
}
inline bool RestoreDatabaseRequest::has_encryption_config() const {
  return _internal_has_encryption_config();
}
inline void RestoreDatabaseRequest::clear_encryption_config() {
  if (GetArena() == nullptr && encryption_config_ != nullptr) {
    delete encryption_config_;
  }
  encryption_config_ = nullptr;
}
inline const ::google::spanner::admin::database::v1::RestoreDatabaseEncryptionConfig& RestoreDatabaseRequest::_internal_encryption_config() const {
  const ::google::spanner::admin::database::v1::RestoreDatabaseEncryptionConfig* p = encryption_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::spanner::admin::database::v1::RestoreDatabaseEncryptionConfig&>(
      ::google::spanner::admin::database::v1::_RestoreDatabaseEncryptionConfig_default_instance_);
}
inline const ::google::spanner::admin::database::v1::RestoreDatabaseEncryptionConfig& RestoreDatabaseRequest::encryption_config() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.RestoreDatabaseRequest.encryption_config)
  return _internal_encryption_config();
}
inline void RestoreDatabaseRequest::unsafe_arena_set_allocated_encryption_config(
    ::google::spanner::admin::database::v1::RestoreDatabaseEncryptionConfig* encryption_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(encryption_config_);
  }
  encryption_config_ = encryption_config;
  if (encryption_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.spanner.admin.database.v1.RestoreDatabaseRequest.encryption_config)
}
inline ::google::spanner::admin::database::v1::RestoreDatabaseEncryptionConfig* RestoreDatabaseRequest::release_encryption_config() {
  
  ::google::spanner::admin::database::v1::RestoreDatabaseEncryptionConfig* temp = encryption_config_;
  encryption_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::spanner::admin::database::v1::RestoreDatabaseEncryptionConfig* RestoreDatabaseRequest::unsafe_arena_release_encryption_config() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.RestoreDatabaseRequest.encryption_config)
  
  ::google::spanner::admin::database::v1::RestoreDatabaseEncryptionConfig* temp = encryption_config_;
  encryption_config_ = nullptr;
  return temp;
}
inline ::google::spanner::admin::database::v1::RestoreDatabaseEncryptionConfig* RestoreDatabaseRequest::_internal_mutable_encryption_config() {
  
  if (encryption_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::spanner::admin::database::v1::RestoreDatabaseEncryptionConfig>(GetArena());
    encryption_config_ = p;
  }
  return encryption_config_;
}
inline ::google::spanner::admin::database::v1::RestoreDatabaseEncryptionConfig* RestoreDatabaseRequest::mutable_encryption_config() {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.RestoreDatabaseRequest.encryption_config)
  return _internal_mutable_encryption_config();
}
inline void RestoreDatabaseRequest::set_allocated_encryption_config(::google::spanner::admin::database::v1::RestoreDatabaseEncryptionConfig* encryption_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete encryption_config_;
  }
  if (encryption_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(encryption_config);
    if (message_arena != submessage_arena) {
      encryption_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, encryption_config, submessage_arena);
    }
    
  } else {
    
  }
  encryption_config_ = encryption_config;
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.RestoreDatabaseRequest.encryption_config)
}

inline bool RestoreDatabaseRequest::has_source() const {
  return source_case() != SOURCE_NOT_SET;
}
inline void RestoreDatabaseRequest::clear_has_source() {
  _oneof_case_[0] = SOURCE_NOT_SET;
}
inline RestoreDatabaseRequest::SourceCase RestoreDatabaseRequest::source_case() const {
  return RestoreDatabaseRequest::SourceCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// RestoreDatabaseEncryptionConfig

// .google.spanner.admin.database.v1.RestoreDatabaseEncryptionConfig.EncryptionType encryption_type = 1 [(.google.api.field_behavior) = REQUIRED];
inline void RestoreDatabaseEncryptionConfig::clear_encryption_type() {
  encryption_type_ = 0;
}
inline ::google::spanner::admin::database::v1::RestoreDatabaseEncryptionConfig_EncryptionType RestoreDatabaseEncryptionConfig::_internal_encryption_type() const {
  return static_cast< ::google::spanner::admin::database::v1::RestoreDatabaseEncryptionConfig_EncryptionType >(encryption_type_);
}
inline ::google::spanner::admin::database::v1::RestoreDatabaseEncryptionConfig_EncryptionType RestoreDatabaseEncryptionConfig::encryption_type() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.RestoreDatabaseEncryptionConfig.encryption_type)
  return _internal_encryption_type();
}
inline void RestoreDatabaseEncryptionConfig::_internal_set_encryption_type(::google::spanner::admin::database::v1::RestoreDatabaseEncryptionConfig_EncryptionType value) {
  
  encryption_type_ = value;
}
inline void RestoreDatabaseEncryptionConfig::set_encryption_type(::google::spanner::admin::database::v1::RestoreDatabaseEncryptionConfig_EncryptionType value) {
  _internal_set_encryption_type(value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.RestoreDatabaseEncryptionConfig.encryption_type)
}

// string kms_key_name = 2 [(.google.api.field_behavior) = OPTIONAL, (.google.api.resource_reference) = {
inline void RestoreDatabaseEncryptionConfig::clear_kms_key_name() {
  kms_key_name_.ClearToEmpty();
}
inline const std::string& RestoreDatabaseEncryptionConfig::kms_key_name() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.RestoreDatabaseEncryptionConfig.kms_key_name)
  return _internal_kms_key_name();
}
inline void RestoreDatabaseEncryptionConfig::set_kms_key_name(const std::string& value) {
  _internal_set_kms_key_name(value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.RestoreDatabaseEncryptionConfig.kms_key_name)
}
inline std::string* RestoreDatabaseEncryptionConfig::mutable_kms_key_name() {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.RestoreDatabaseEncryptionConfig.kms_key_name)
  return _internal_mutable_kms_key_name();
}
inline const std::string& RestoreDatabaseEncryptionConfig::_internal_kms_key_name() const {
  return kms_key_name_.Get();
}
inline void RestoreDatabaseEncryptionConfig::_internal_set_kms_key_name(const std::string& value) {
  
  kms_key_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RestoreDatabaseEncryptionConfig::set_kms_key_name(std::string&& value) {
  
  kms_key_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.admin.database.v1.RestoreDatabaseEncryptionConfig.kms_key_name)
}
inline void RestoreDatabaseEncryptionConfig::set_kms_key_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  kms_key_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.RestoreDatabaseEncryptionConfig.kms_key_name)
}
inline void RestoreDatabaseEncryptionConfig::set_kms_key_name(const char* value,
    size_t size) {
  
  kms_key_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.RestoreDatabaseEncryptionConfig.kms_key_name)
}
inline std::string* RestoreDatabaseEncryptionConfig::_internal_mutable_kms_key_name() {
  
  return kms_key_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RestoreDatabaseEncryptionConfig::release_kms_key_name() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.RestoreDatabaseEncryptionConfig.kms_key_name)
  return kms_key_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RestoreDatabaseEncryptionConfig::set_allocated_kms_key_name(std::string* kms_key_name) {
  if (kms_key_name != nullptr) {
    
  } else {
    
  }
  kms_key_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), kms_key_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.RestoreDatabaseEncryptionConfig.kms_key_name)
}

// -------------------------------------------------------------------

// RestoreDatabaseMetadata

// string name = 1 [(.google.api.resource_reference) = {
inline void RestoreDatabaseMetadata::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& RestoreDatabaseMetadata::name() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.RestoreDatabaseMetadata.name)
  return _internal_name();
}
inline void RestoreDatabaseMetadata::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.RestoreDatabaseMetadata.name)
}
inline std::string* RestoreDatabaseMetadata::mutable_name() {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.RestoreDatabaseMetadata.name)
  return _internal_mutable_name();
}
inline const std::string& RestoreDatabaseMetadata::_internal_name() const {
  return name_.Get();
}
inline void RestoreDatabaseMetadata::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RestoreDatabaseMetadata::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.admin.database.v1.RestoreDatabaseMetadata.name)
}
inline void RestoreDatabaseMetadata::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.RestoreDatabaseMetadata.name)
}
inline void RestoreDatabaseMetadata::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.RestoreDatabaseMetadata.name)
}
inline std::string* RestoreDatabaseMetadata::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RestoreDatabaseMetadata::release_name() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.RestoreDatabaseMetadata.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RestoreDatabaseMetadata::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.RestoreDatabaseMetadata.name)
}

// .google.spanner.admin.database.v1.RestoreSourceType source_type = 2;
inline void RestoreDatabaseMetadata::clear_source_type() {
  source_type_ = 0;
}
inline ::google::spanner::admin::database::v1::RestoreSourceType RestoreDatabaseMetadata::_internal_source_type() const {
  return static_cast< ::google::spanner::admin::database::v1::RestoreSourceType >(source_type_);
}
inline ::google::spanner::admin::database::v1::RestoreSourceType RestoreDatabaseMetadata::source_type() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.RestoreDatabaseMetadata.source_type)
  return _internal_source_type();
}
inline void RestoreDatabaseMetadata::_internal_set_source_type(::google::spanner::admin::database::v1::RestoreSourceType value) {
  
  source_type_ = value;
}
inline void RestoreDatabaseMetadata::set_source_type(::google::spanner::admin::database::v1::RestoreSourceType value) {
  _internal_set_source_type(value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.RestoreDatabaseMetadata.source_type)
}

// .google.spanner.admin.database.v1.BackupInfo backup_info = 3;
inline bool RestoreDatabaseMetadata::_internal_has_backup_info() const {
  return source_info_case() == kBackupInfo;
}
inline bool RestoreDatabaseMetadata::has_backup_info() const {
  return _internal_has_backup_info();
}
inline void RestoreDatabaseMetadata::set_has_backup_info() {
  _oneof_case_[0] = kBackupInfo;
}
inline ::google::spanner::admin::database::v1::BackupInfo* RestoreDatabaseMetadata::release_backup_info() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.RestoreDatabaseMetadata.backup_info)
  if (_internal_has_backup_info()) {
    clear_has_source_info();
      ::google::spanner::admin::database::v1::BackupInfo* temp = source_info_.backup_info_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    source_info_.backup_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::spanner::admin::database::v1::BackupInfo& RestoreDatabaseMetadata::_internal_backup_info() const {
  return _internal_has_backup_info()
      ? *source_info_.backup_info_
      : reinterpret_cast< ::google::spanner::admin::database::v1::BackupInfo&>(::google::spanner::admin::database::v1::_BackupInfo_default_instance_);
}
inline const ::google::spanner::admin::database::v1::BackupInfo& RestoreDatabaseMetadata::backup_info() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.RestoreDatabaseMetadata.backup_info)
  return _internal_backup_info();
}
inline ::google::spanner::admin::database::v1::BackupInfo* RestoreDatabaseMetadata::unsafe_arena_release_backup_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.spanner.admin.database.v1.RestoreDatabaseMetadata.backup_info)
  if (_internal_has_backup_info()) {
    clear_has_source_info();
    ::google::spanner::admin::database::v1::BackupInfo* temp = source_info_.backup_info_;
    source_info_.backup_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RestoreDatabaseMetadata::unsafe_arena_set_allocated_backup_info(::google::spanner::admin::database::v1::BackupInfo* backup_info) {
  clear_source_info();
  if (backup_info) {
    set_has_backup_info();
    source_info_.backup_info_ = backup_info;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.spanner.admin.database.v1.RestoreDatabaseMetadata.backup_info)
}
inline ::google::spanner::admin::database::v1::BackupInfo* RestoreDatabaseMetadata::_internal_mutable_backup_info() {
  if (!_internal_has_backup_info()) {
    clear_source_info();
    set_has_backup_info();
    source_info_.backup_info_ = CreateMaybeMessage< ::google::spanner::admin::database::v1::BackupInfo >(GetArena());
  }
  return source_info_.backup_info_;
}
inline ::google::spanner::admin::database::v1::BackupInfo* RestoreDatabaseMetadata::mutable_backup_info() {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.RestoreDatabaseMetadata.backup_info)
  return _internal_mutable_backup_info();
}

// .google.spanner.admin.database.v1.OperationProgress progress = 4;
inline bool RestoreDatabaseMetadata::_internal_has_progress() const {
  return this != internal_default_instance() && progress_ != nullptr;
}
inline bool RestoreDatabaseMetadata::has_progress() const {
  return _internal_has_progress();
}
inline const ::google::spanner::admin::database::v1::OperationProgress& RestoreDatabaseMetadata::_internal_progress() const {
  const ::google::spanner::admin::database::v1::OperationProgress* p = progress_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::spanner::admin::database::v1::OperationProgress&>(
      ::google::spanner::admin::database::v1::_OperationProgress_default_instance_);
}
inline const ::google::spanner::admin::database::v1::OperationProgress& RestoreDatabaseMetadata::progress() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.RestoreDatabaseMetadata.progress)
  return _internal_progress();
}
inline void RestoreDatabaseMetadata::unsafe_arena_set_allocated_progress(
    ::google::spanner::admin::database::v1::OperationProgress* progress) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(progress_);
  }
  progress_ = progress;
  if (progress) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.spanner.admin.database.v1.RestoreDatabaseMetadata.progress)
}
inline ::google::spanner::admin::database::v1::OperationProgress* RestoreDatabaseMetadata::release_progress() {
  
  ::google::spanner::admin::database::v1::OperationProgress* temp = progress_;
  progress_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::spanner::admin::database::v1::OperationProgress* RestoreDatabaseMetadata::unsafe_arena_release_progress() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.RestoreDatabaseMetadata.progress)
  
  ::google::spanner::admin::database::v1::OperationProgress* temp = progress_;
  progress_ = nullptr;
  return temp;
}
inline ::google::spanner::admin::database::v1::OperationProgress* RestoreDatabaseMetadata::_internal_mutable_progress() {
  
  if (progress_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::spanner::admin::database::v1::OperationProgress>(GetArena());
    progress_ = p;
  }
  return progress_;
}
inline ::google::spanner::admin::database::v1::OperationProgress* RestoreDatabaseMetadata::mutable_progress() {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.RestoreDatabaseMetadata.progress)
  return _internal_mutable_progress();
}
inline void RestoreDatabaseMetadata::set_allocated_progress(::google::spanner::admin::database::v1::OperationProgress* progress) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(progress_);
  }
  if (progress) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(progress)->GetArena();
    if (message_arena != submessage_arena) {
      progress = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, progress, submessage_arena);
    }
    
  } else {
    
  }
  progress_ = progress;
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.RestoreDatabaseMetadata.progress)
}

// .google.protobuf.Timestamp cancel_time = 5;
inline bool RestoreDatabaseMetadata::_internal_has_cancel_time() const {
  return this != internal_default_instance() && cancel_time_ != nullptr;
}
inline bool RestoreDatabaseMetadata::has_cancel_time() const {
  return _internal_has_cancel_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& RestoreDatabaseMetadata::_internal_cancel_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = cancel_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& RestoreDatabaseMetadata::cancel_time() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.RestoreDatabaseMetadata.cancel_time)
  return _internal_cancel_time();
}
inline void RestoreDatabaseMetadata::unsafe_arena_set_allocated_cancel_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* cancel_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cancel_time_);
  }
  cancel_time_ = cancel_time;
  if (cancel_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.spanner.admin.database.v1.RestoreDatabaseMetadata.cancel_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* RestoreDatabaseMetadata::release_cancel_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = cancel_time_;
  cancel_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* RestoreDatabaseMetadata::unsafe_arena_release_cancel_time() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.RestoreDatabaseMetadata.cancel_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = cancel_time_;
  cancel_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* RestoreDatabaseMetadata::_internal_mutable_cancel_time() {
  
  if (cancel_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    cancel_time_ = p;
  }
  return cancel_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* RestoreDatabaseMetadata::mutable_cancel_time() {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.RestoreDatabaseMetadata.cancel_time)
  return _internal_mutable_cancel_time();
}
inline void RestoreDatabaseMetadata::set_allocated_cancel_time(PROTOBUF_NAMESPACE_ID::Timestamp* cancel_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cancel_time_);
  }
  if (cancel_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cancel_time)->GetArena();
    if (message_arena != submessage_arena) {
      cancel_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cancel_time, submessage_arena);
    }
    
  } else {
    
  }
  cancel_time_ = cancel_time;
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.RestoreDatabaseMetadata.cancel_time)
}

// string optimize_database_operation_name = 6;
inline void RestoreDatabaseMetadata::clear_optimize_database_operation_name() {
  optimize_database_operation_name_.ClearToEmpty();
}
inline const std::string& RestoreDatabaseMetadata::optimize_database_operation_name() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.RestoreDatabaseMetadata.optimize_database_operation_name)
  return _internal_optimize_database_operation_name();
}
inline void RestoreDatabaseMetadata::set_optimize_database_operation_name(const std::string& value) {
  _internal_set_optimize_database_operation_name(value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.RestoreDatabaseMetadata.optimize_database_operation_name)
}
inline std::string* RestoreDatabaseMetadata::mutable_optimize_database_operation_name() {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.RestoreDatabaseMetadata.optimize_database_operation_name)
  return _internal_mutable_optimize_database_operation_name();
}
inline const std::string& RestoreDatabaseMetadata::_internal_optimize_database_operation_name() const {
  return optimize_database_operation_name_.Get();
}
inline void RestoreDatabaseMetadata::_internal_set_optimize_database_operation_name(const std::string& value) {
  
  optimize_database_operation_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RestoreDatabaseMetadata::set_optimize_database_operation_name(std::string&& value) {
  
  optimize_database_operation_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.admin.database.v1.RestoreDatabaseMetadata.optimize_database_operation_name)
}
inline void RestoreDatabaseMetadata::set_optimize_database_operation_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  optimize_database_operation_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.RestoreDatabaseMetadata.optimize_database_operation_name)
}
inline void RestoreDatabaseMetadata::set_optimize_database_operation_name(const char* value,
    size_t size) {
  
  optimize_database_operation_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.RestoreDatabaseMetadata.optimize_database_operation_name)
}
inline std::string* RestoreDatabaseMetadata::_internal_mutable_optimize_database_operation_name() {
  
  return optimize_database_operation_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RestoreDatabaseMetadata::release_optimize_database_operation_name() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.RestoreDatabaseMetadata.optimize_database_operation_name)
  return optimize_database_operation_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RestoreDatabaseMetadata::set_allocated_optimize_database_operation_name(std::string* optimize_database_operation_name) {
  if (optimize_database_operation_name != nullptr) {
    
  } else {
    
  }
  optimize_database_operation_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), optimize_database_operation_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.RestoreDatabaseMetadata.optimize_database_operation_name)
}

inline bool RestoreDatabaseMetadata::has_source_info() const {
  return source_info_case() != SOURCE_INFO_NOT_SET;
}
inline void RestoreDatabaseMetadata::clear_has_source_info() {
  _oneof_case_[0] = SOURCE_INFO_NOT_SET;
}
inline RestoreDatabaseMetadata::SourceInfoCase RestoreDatabaseMetadata::source_info_case() const {
  return RestoreDatabaseMetadata::SourceInfoCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// OptimizeRestoredDatabaseMetadata

// string name = 1 [(.google.api.resource_reference) = {
inline void OptimizeRestoredDatabaseMetadata::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& OptimizeRestoredDatabaseMetadata::name() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.OptimizeRestoredDatabaseMetadata.name)
  return _internal_name();
}
inline void OptimizeRestoredDatabaseMetadata::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.OptimizeRestoredDatabaseMetadata.name)
}
inline std::string* OptimizeRestoredDatabaseMetadata::mutable_name() {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.OptimizeRestoredDatabaseMetadata.name)
  return _internal_mutable_name();
}
inline const std::string& OptimizeRestoredDatabaseMetadata::_internal_name() const {
  return name_.Get();
}
inline void OptimizeRestoredDatabaseMetadata::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OptimizeRestoredDatabaseMetadata::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.admin.database.v1.OptimizeRestoredDatabaseMetadata.name)
}
inline void OptimizeRestoredDatabaseMetadata::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.OptimizeRestoredDatabaseMetadata.name)
}
inline void OptimizeRestoredDatabaseMetadata::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.OptimizeRestoredDatabaseMetadata.name)
}
inline std::string* OptimizeRestoredDatabaseMetadata::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OptimizeRestoredDatabaseMetadata::release_name() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.OptimizeRestoredDatabaseMetadata.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OptimizeRestoredDatabaseMetadata::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.OptimizeRestoredDatabaseMetadata.name)
}

// .google.spanner.admin.database.v1.OperationProgress progress = 2;
inline bool OptimizeRestoredDatabaseMetadata::_internal_has_progress() const {
  return this != internal_default_instance() && progress_ != nullptr;
}
inline bool OptimizeRestoredDatabaseMetadata::has_progress() const {
  return _internal_has_progress();
}
inline const ::google::spanner::admin::database::v1::OperationProgress& OptimizeRestoredDatabaseMetadata::_internal_progress() const {
  const ::google::spanner::admin::database::v1::OperationProgress* p = progress_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::spanner::admin::database::v1::OperationProgress&>(
      ::google::spanner::admin::database::v1::_OperationProgress_default_instance_);
}
inline const ::google::spanner::admin::database::v1::OperationProgress& OptimizeRestoredDatabaseMetadata::progress() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.OptimizeRestoredDatabaseMetadata.progress)
  return _internal_progress();
}
inline void OptimizeRestoredDatabaseMetadata::unsafe_arena_set_allocated_progress(
    ::google::spanner::admin::database::v1::OperationProgress* progress) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(progress_);
  }
  progress_ = progress;
  if (progress) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.spanner.admin.database.v1.OptimizeRestoredDatabaseMetadata.progress)
}
inline ::google::spanner::admin::database::v1::OperationProgress* OptimizeRestoredDatabaseMetadata::release_progress() {
  
  ::google::spanner::admin::database::v1::OperationProgress* temp = progress_;
  progress_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::spanner::admin::database::v1::OperationProgress* OptimizeRestoredDatabaseMetadata::unsafe_arena_release_progress() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.OptimizeRestoredDatabaseMetadata.progress)
  
  ::google::spanner::admin::database::v1::OperationProgress* temp = progress_;
  progress_ = nullptr;
  return temp;
}
inline ::google::spanner::admin::database::v1::OperationProgress* OptimizeRestoredDatabaseMetadata::_internal_mutable_progress() {
  
  if (progress_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::spanner::admin::database::v1::OperationProgress>(GetArena());
    progress_ = p;
  }
  return progress_;
}
inline ::google::spanner::admin::database::v1::OperationProgress* OptimizeRestoredDatabaseMetadata::mutable_progress() {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.OptimizeRestoredDatabaseMetadata.progress)
  return _internal_mutable_progress();
}
inline void OptimizeRestoredDatabaseMetadata::set_allocated_progress(::google::spanner::admin::database::v1::OperationProgress* progress) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(progress_);
  }
  if (progress) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(progress)->GetArena();
    if (message_arena != submessage_arena) {
      progress = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, progress, submessage_arena);
    }
    
  } else {
    
  }
  progress_ = progress;
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.OptimizeRestoredDatabaseMetadata.progress)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace database
}  // namespace admin
}  // namespace spanner
}  // namespace google

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::google::spanner::admin::database::v1::Database_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::spanner::admin::database::v1::Database_State>() {
  return ::google::spanner::admin::database::v1::Database_State_descriptor();
}
template <> struct is_proto_enum< ::google::spanner::admin::database::v1::RestoreDatabaseEncryptionConfig_EncryptionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::spanner::admin::database::v1::RestoreDatabaseEncryptionConfig_EncryptionType>() {
  return ::google::spanner::admin::database::v1::RestoreDatabaseEncryptionConfig_EncryptionType_descriptor();
}
template <> struct is_proto_enum< ::google::spanner::admin::database::v1::RestoreSourceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::spanner::admin::database::v1::RestoreSourceType>() {
  return ::google::spanner::admin::database::v1::RestoreSourceType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto
