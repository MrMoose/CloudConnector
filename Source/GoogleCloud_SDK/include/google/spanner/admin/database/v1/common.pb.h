// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/spanner/admin/database/v1/common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fspanner_2fadmin_2fdatabase_2fv1_2fcommon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fspanner_2fadmin_2fdatabase_2fv1_2fcommon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/field_behavior.pb.h"
#include "google/api/resource.pb.h"
#include <google/protobuf/timestamp.pb.h>
#include "google/rpc/status.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fspanner_2fadmin_2fdatabase_2fv1_2fcommon_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fspanner_2fadmin_2fdatabase_2fv1_2fcommon_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fspanner_2fadmin_2fdatabase_2fv1_2fcommon_2eproto;
namespace google {
namespace spanner {
namespace admin {
namespace database {
namespace v1 {
class EncryptionConfig;
class EncryptionConfigDefaultTypeInternal;
extern EncryptionConfigDefaultTypeInternal _EncryptionConfig_default_instance_;
class EncryptionInfo;
class EncryptionInfoDefaultTypeInternal;
extern EncryptionInfoDefaultTypeInternal _EncryptionInfo_default_instance_;
class OperationProgress;
class OperationProgressDefaultTypeInternal;
extern OperationProgressDefaultTypeInternal _OperationProgress_default_instance_;
}  // namespace v1
}  // namespace database
}  // namespace admin
}  // namespace spanner
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::spanner::admin::database::v1::EncryptionConfig* Arena::CreateMaybeMessage<::google::spanner::admin::database::v1::EncryptionConfig>(Arena*);
template<> ::google::spanner::admin::database::v1::EncryptionInfo* Arena::CreateMaybeMessage<::google::spanner::admin::database::v1::EncryptionInfo>(Arena*);
template<> ::google::spanner::admin::database::v1::OperationProgress* Arena::CreateMaybeMessage<::google::spanner::admin::database::v1::OperationProgress>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace spanner {
namespace admin {
namespace database {
namespace v1 {

enum EncryptionInfo_Type : int {
  EncryptionInfo_Type_TYPE_UNSPECIFIED = 0,
  EncryptionInfo_Type_GOOGLE_DEFAULT_ENCRYPTION = 1,
  EncryptionInfo_Type_CUSTOMER_MANAGED_ENCRYPTION = 2,
  EncryptionInfo_Type_EncryptionInfo_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EncryptionInfo_Type_EncryptionInfo_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EncryptionInfo_Type_IsValid(int value);
constexpr EncryptionInfo_Type EncryptionInfo_Type_Type_MIN = EncryptionInfo_Type_TYPE_UNSPECIFIED;
constexpr EncryptionInfo_Type EncryptionInfo_Type_Type_MAX = EncryptionInfo_Type_CUSTOMER_MANAGED_ENCRYPTION;
constexpr int EncryptionInfo_Type_Type_ARRAYSIZE = EncryptionInfo_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EncryptionInfo_Type_descriptor();
template<typename T>
inline const std::string& EncryptionInfo_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EncryptionInfo_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EncryptionInfo_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EncryptionInfo_Type_descriptor(), enum_t_value);
}
inline bool EncryptionInfo_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EncryptionInfo_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EncryptionInfo_Type>(
    EncryptionInfo_Type_descriptor(), name, value);
}
// ===================================================================

class OperationProgress PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.spanner.admin.database.v1.OperationProgress) */ {
 public:
  inline OperationProgress() : OperationProgress(nullptr) {}
  virtual ~OperationProgress();

  OperationProgress(const OperationProgress& from);
  OperationProgress(OperationProgress&& from) noexcept
    : OperationProgress() {
    *this = ::std::move(from);
  }

  inline OperationProgress& operator=(const OperationProgress& from) {
    CopyFrom(from);
    return *this;
  }
  inline OperationProgress& operator=(OperationProgress&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OperationProgress& default_instance();

  static inline const OperationProgress* internal_default_instance() {
    return reinterpret_cast<const OperationProgress*>(
               &_OperationProgress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OperationProgress& a, OperationProgress& b) {
    a.Swap(&b);
  }
  inline void Swap(OperationProgress* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OperationProgress* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OperationProgress* New() const final {
    return CreateMaybeMessage<OperationProgress>(nullptr);
  }

  OperationProgress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OperationProgress>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OperationProgress& from);
  void MergeFrom(const OperationProgress& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OperationProgress* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.spanner.admin.database.v1.OperationProgress";
  }
  protected:
  explicit OperationProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fspanner_2fadmin_2fdatabase_2fv1_2fcommon_2eproto);
    return ::descriptor_table_google_2fspanner_2fadmin_2fdatabase_2fv1_2fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartTimeFieldNumber = 2,
    kEndTimeFieldNumber = 3,
    kProgressPercentFieldNumber = 1,
  };
  // .google.protobuf.Timestamp start_time = 2;
  bool has_start_time() const;
  private:
  bool _internal_has_start_time() const;
  public:
  void clear_start_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& start_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_start_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_start_time();
  void set_allocated_start_time(PROTOBUF_NAMESPACE_ID::Timestamp* start_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_start_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_start_time();
  public:
  void unsafe_arena_set_allocated_start_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* start_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_start_time();

  // .google.protobuf.Timestamp end_time = 3;
  bool has_end_time() const;
  private:
  bool _internal_has_end_time() const;
  public:
  void clear_end_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& end_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_end_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_end_time();
  void set_allocated_end_time(PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_end_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_end_time();
  public:
  void unsafe_arena_set_allocated_end_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_end_time();

  // int32 progress_percent = 1;
  void clear_progress_percent();
  ::PROTOBUF_NAMESPACE_ID::int32 progress_percent() const;
  void set_progress_percent(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_progress_percent() const;
  void _internal_set_progress_percent(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:google.spanner.admin.database.v1.OperationProgress)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::Timestamp* start_time_;
  PROTOBUF_NAMESPACE_ID::Timestamp* end_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 progress_percent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fspanner_2fadmin_2fdatabase_2fv1_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class EncryptionConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.spanner.admin.database.v1.EncryptionConfig) */ {
 public:
  inline EncryptionConfig() : EncryptionConfig(nullptr) {}
  virtual ~EncryptionConfig();

  EncryptionConfig(const EncryptionConfig& from);
  EncryptionConfig(EncryptionConfig&& from) noexcept
    : EncryptionConfig() {
    *this = ::std::move(from);
  }

  inline EncryptionConfig& operator=(const EncryptionConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline EncryptionConfig& operator=(EncryptionConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EncryptionConfig& default_instance();

  static inline const EncryptionConfig* internal_default_instance() {
    return reinterpret_cast<const EncryptionConfig*>(
               &_EncryptionConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EncryptionConfig& a, EncryptionConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(EncryptionConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EncryptionConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EncryptionConfig* New() const final {
    return CreateMaybeMessage<EncryptionConfig>(nullptr);
  }

  EncryptionConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EncryptionConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EncryptionConfig& from);
  void MergeFrom(const EncryptionConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EncryptionConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.spanner.admin.database.v1.EncryptionConfig";
  }
  protected:
  explicit EncryptionConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fspanner_2fadmin_2fdatabase_2fv1_2fcommon_2eproto);
    return ::descriptor_table_google_2fspanner_2fadmin_2fdatabase_2fv1_2fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKmsKeyNameFieldNumber = 2,
  };
  // string kms_key_name = 2 [(.google.api.resource_reference) = {
  void clear_kms_key_name();
  const std::string& kms_key_name() const;
  void set_kms_key_name(const std::string& value);
  void set_kms_key_name(std::string&& value);
  void set_kms_key_name(const char* value);
  void set_kms_key_name(const char* value, size_t size);
  std::string* mutable_kms_key_name();
  std::string* release_kms_key_name();
  void set_allocated_kms_key_name(std::string* kms_key_name);
  private:
  const std::string& _internal_kms_key_name() const;
  void _internal_set_kms_key_name(const std::string& value);
  std::string* _internal_mutable_kms_key_name();
  public:

  // @@protoc_insertion_point(class_scope:google.spanner.admin.database.v1.EncryptionConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kms_key_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fspanner_2fadmin_2fdatabase_2fv1_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class EncryptionInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.spanner.admin.database.v1.EncryptionInfo) */ {
 public:
  inline EncryptionInfo() : EncryptionInfo(nullptr) {}
  virtual ~EncryptionInfo();

  EncryptionInfo(const EncryptionInfo& from);
  EncryptionInfo(EncryptionInfo&& from) noexcept
    : EncryptionInfo() {
    *this = ::std::move(from);
  }

  inline EncryptionInfo& operator=(const EncryptionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline EncryptionInfo& operator=(EncryptionInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EncryptionInfo& default_instance();

  static inline const EncryptionInfo* internal_default_instance() {
    return reinterpret_cast<const EncryptionInfo*>(
               &_EncryptionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(EncryptionInfo& a, EncryptionInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(EncryptionInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EncryptionInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EncryptionInfo* New() const final {
    return CreateMaybeMessage<EncryptionInfo>(nullptr);
  }

  EncryptionInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EncryptionInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EncryptionInfo& from);
  void MergeFrom(const EncryptionInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EncryptionInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.spanner.admin.database.v1.EncryptionInfo";
  }
  protected:
  explicit EncryptionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fspanner_2fadmin_2fdatabase_2fv1_2fcommon_2eproto);
    return ::descriptor_table_google_2fspanner_2fadmin_2fdatabase_2fv1_2fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef EncryptionInfo_Type Type;
  static constexpr Type TYPE_UNSPECIFIED =
    EncryptionInfo_Type_TYPE_UNSPECIFIED;
  static constexpr Type GOOGLE_DEFAULT_ENCRYPTION =
    EncryptionInfo_Type_GOOGLE_DEFAULT_ENCRYPTION;
  static constexpr Type CUSTOMER_MANAGED_ENCRYPTION =
    EncryptionInfo_Type_CUSTOMER_MANAGED_ENCRYPTION;
  static inline bool Type_IsValid(int value) {
    return EncryptionInfo_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    EncryptionInfo_Type_Type_MIN;
  static constexpr Type Type_MAX =
    EncryptionInfo_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    EncryptionInfo_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return EncryptionInfo_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return EncryptionInfo_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return EncryptionInfo_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kKmsKeyVersionFieldNumber = 2,
    kEncryptionStatusFieldNumber = 4,
    kEncryptionTypeFieldNumber = 3,
  };
  // string kms_key_version = 2 [(.google.api.field_behavior) = OUTPUT_ONLY, (.google.api.resource_reference) = {
  void clear_kms_key_version();
  const std::string& kms_key_version() const;
  void set_kms_key_version(const std::string& value);
  void set_kms_key_version(std::string&& value);
  void set_kms_key_version(const char* value);
  void set_kms_key_version(const char* value, size_t size);
  std::string* mutable_kms_key_version();
  std::string* release_kms_key_version();
  void set_allocated_kms_key_version(std::string* kms_key_version);
  private:
  const std::string& _internal_kms_key_version() const;
  void _internal_set_kms_key_version(const std::string& value);
  std::string* _internal_mutable_kms_key_version();
  public:

  // .google.rpc.Status encryption_status = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_encryption_status() const;
  private:
  bool _internal_has_encryption_status() const;
  public:
  void clear_encryption_status();
  const ::google::rpc::Status& encryption_status() const;
  ::google::rpc::Status* release_encryption_status();
  ::google::rpc::Status* mutable_encryption_status();
  void set_allocated_encryption_status(::google::rpc::Status* encryption_status);
  private:
  const ::google::rpc::Status& _internal_encryption_status() const;
  ::google::rpc::Status* _internal_mutable_encryption_status();
  public:
  void unsafe_arena_set_allocated_encryption_status(
      ::google::rpc::Status* encryption_status);
  ::google::rpc::Status* unsafe_arena_release_encryption_status();

  // .google.spanner.admin.database.v1.EncryptionInfo.Type encryption_type = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_encryption_type();
  ::google::spanner::admin::database::v1::EncryptionInfo_Type encryption_type() const;
  void set_encryption_type(::google::spanner::admin::database::v1::EncryptionInfo_Type value);
  private:
  ::google::spanner::admin::database::v1::EncryptionInfo_Type _internal_encryption_type() const;
  void _internal_set_encryption_type(::google::spanner::admin::database::v1::EncryptionInfo_Type value);
  public:

  // @@protoc_insertion_point(class_scope:google.spanner.admin.database.v1.EncryptionInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kms_key_version_;
  ::google::rpc::Status* encryption_status_;
  int encryption_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fspanner_2fadmin_2fdatabase_2fv1_2fcommon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OperationProgress

// int32 progress_percent = 1;
inline void OperationProgress::clear_progress_percent() {
  progress_percent_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OperationProgress::_internal_progress_percent() const {
  return progress_percent_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OperationProgress::progress_percent() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.OperationProgress.progress_percent)
  return _internal_progress_percent();
}
inline void OperationProgress::_internal_set_progress_percent(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  progress_percent_ = value;
}
inline void OperationProgress::set_progress_percent(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_progress_percent(value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.OperationProgress.progress_percent)
}

// .google.protobuf.Timestamp start_time = 2;
inline bool OperationProgress::_internal_has_start_time() const {
  return this != internal_default_instance() && start_time_ != nullptr;
}
inline bool OperationProgress::has_start_time() const {
  return _internal_has_start_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& OperationProgress::_internal_start_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = start_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& OperationProgress::start_time() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.OperationProgress.start_time)
  return _internal_start_time();
}
inline void OperationProgress::unsafe_arena_set_allocated_start_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* start_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time_);
  }
  start_time_ = start_time;
  if (start_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.spanner.admin.database.v1.OperationProgress.start_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* OperationProgress::release_start_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = start_time_;
  start_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* OperationProgress::unsafe_arena_release_start_time() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.OperationProgress.start_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = start_time_;
  start_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* OperationProgress::_internal_mutable_start_time() {
  
  if (start_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    start_time_ = p;
  }
  return start_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* OperationProgress::mutable_start_time() {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.OperationProgress.start_time)
  return _internal_mutable_start_time();
}
inline void OperationProgress::set_allocated_start_time(PROTOBUF_NAMESPACE_ID::Timestamp* start_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time_);
  }
  if (start_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time)->GetArena();
    if (message_arena != submessage_arena) {
      start_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_time, submessage_arena);
    }
    
  } else {
    
  }
  start_time_ = start_time;
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.OperationProgress.start_time)
}

// .google.protobuf.Timestamp end_time = 3;
inline bool OperationProgress::_internal_has_end_time() const {
  return this != internal_default_instance() && end_time_ != nullptr;
}
inline bool OperationProgress::has_end_time() const {
  return _internal_has_end_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& OperationProgress::_internal_end_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = end_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& OperationProgress::end_time() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.OperationProgress.end_time)
  return _internal_end_time();
}
inline void OperationProgress::unsafe_arena_set_allocated_end_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time_);
  }
  end_time_ = end_time;
  if (end_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.spanner.admin.database.v1.OperationProgress.end_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* OperationProgress::release_end_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_time_;
  end_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* OperationProgress::unsafe_arena_release_end_time() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.OperationProgress.end_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_time_;
  end_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* OperationProgress::_internal_mutable_end_time() {
  
  if (end_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    end_time_ = p;
  }
  return end_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* OperationProgress::mutable_end_time() {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.OperationProgress.end_time)
  return _internal_mutable_end_time();
}
inline void OperationProgress::set_allocated_end_time(PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time_);
  }
  if (end_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time)->GetArena();
    if (message_arena != submessage_arena) {
      end_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_time, submessage_arena);
    }
    
  } else {
    
  }
  end_time_ = end_time;
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.OperationProgress.end_time)
}

// -------------------------------------------------------------------

// EncryptionConfig

// string kms_key_name = 2 [(.google.api.resource_reference) = {
inline void EncryptionConfig::clear_kms_key_name() {
  kms_key_name_.ClearToEmpty();
}
inline const std::string& EncryptionConfig::kms_key_name() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.EncryptionConfig.kms_key_name)
  return _internal_kms_key_name();
}
inline void EncryptionConfig::set_kms_key_name(const std::string& value) {
  _internal_set_kms_key_name(value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.EncryptionConfig.kms_key_name)
}
inline std::string* EncryptionConfig::mutable_kms_key_name() {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.EncryptionConfig.kms_key_name)
  return _internal_mutable_kms_key_name();
}
inline const std::string& EncryptionConfig::_internal_kms_key_name() const {
  return kms_key_name_.Get();
}
inline void EncryptionConfig::_internal_set_kms_key_name(const std::string& value) {
  
  kms_key_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void EncryptionConfig::set_kms_key_name(std::string&& value) {
  
  kms_key_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.admin.database.v1.EncryptionConfig.kms_key_name)
}
inline void EncryptionConfig::set_kms_key_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  kms_key_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.EncryptionConfig.kms_key_name)
}
inline void EncryptionConfig::set_kms_key_name(const char* value,
    size_t size) {
  
  kms_key_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.EncryptionConfig.kms_key_name)
}
inline std::string* EncryptionConfig::_internal_mutable_kms_key_name() {
  
  return kms_key_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* EncryptionConfig::release_kms_key_name() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.EncryptionConfig.kms_key_name)
  return kms_key_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EncryptionConfig::set_allocated_kms_key_name(std::string* kms_key_name) {
  if (kms_key_name != nullptr) {
    
  } else {
    
  }
  kms_key_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), kms_key_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.EncryptionConfig.kms_key_name)
}

// -------------------------------------------------------------------

// EncryptionInfo

// .google.spanner.admin.database.v1.EncryptionInfo.Type encryption_type = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void EncryptionInfo::clear_encryption_type() {
  encryption_type_ = 0;
}
inline ::google::spanner::admin::database::v1::EncryptionInfo_Type EncryptionInfo::_internal_encryption_type() const {
  return static_cast< ::google::spanner::admin::database::v1::EncryptionInfo_Type >(encryption_type_);
}
inline ::google::spanner::admin::database::v1::EncryptionInfo_Type EncryptionInfo::encryption_type() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.EncryptionInfo.encryption_type)
  return _internal_encryption_type();
}
inline void EncryptionInfo::_internal_set_encryption_type(::google::spanner::admin::database::v1::EncryptionInfo_Type value) {
  
  encryption_type_ = value;
}
inline void EncryptionInfo::set_encryption_type(::google::spanner::admin::database::v1::EncryptionInfo_Type value) {
  _internal_set_encryption_type(value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.EncryptionInfo.encryption_type)
}

// .google.rpc.Status encryption_status = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool EncryptionInfo::_internal_has_encryption_status() const {
  return this != internal_default_instance() && encryption_status_ != nullptr;
}
inline bool EncryptionInfo::has_encryption_status() const {
  return _internal_has_encryption_status();
}
inline const ::google::rpc::Status& EncryptionInfo::_internal_encryption_status() const {
  const ::google::rpc::Status* p = encryption_status_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::rpc::Status&>(
      ::google::rpc::_Status_default_instance_);
}
inline const ::google::rpc::Status& EncryptionInfo::encryption_status() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.EncryptionInfo.encryption_status)
  return _internal_encryption_status();
}
inline void EncryptionInfo::unsafe_arena_set_allocated_encryption_status(
    ::google::rpc::Status* encryption_status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(encryption_status_);
  }
  encryption_status_ = encryption_status;
  if (encryption_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.spanner.admin.database.v1.EncryptionInfo.encryption_status)
}
inline ::google::rpc::Status* EncryptionInfo::release_encryption_status() {
  
  ::google::rpc::Status* temp = encryption_status_;
  encryption_status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::rpc::Status* EncryptionInfo::unsafe_arena_release_encryption_status() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.EncryptionInfo.encryption_status)
  
  ::google::rpc::Status* temp = encryption_status_;
  encryption_status_ = nullptr;
  return temp;
}
inline ::google::rpc::Status* EncryptionInfo::_internal_mutable_encryption_status() {
  
  if (encryption_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::rpc::Status>(GetArena());
    encryption_status_ = p;
  }
  return encryption_status_;
}
inline ::google::rpc::Status* EncryptionInfo::mutable_encryption_status() {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.EncryptionInfo.encryption_status)
  return _internal_mutable_encryption_status();
}
inline void EncryptionInfo::set_allocated_encryption_status(::google::rpc::Status* encryption_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(encryption_status_);
  }
  if (encryption_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(encryption_status)->GetArena();
    if (message_arena != submessage_arena) {
      encryption_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, encryption_status, submessage_arena);
    }
    
  } else {
    
  }
  encryption_status_ = encryption_status;
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.EncryptionInfo.encryption_status)
}

// string kms_key_version = 2 [(.google.api.field_behavior) = OUTPUT_ONLY, (.google.api.resource_reference) = {
inline void EncryptionInfo::clear_kms_key_version() {
  kms_key_version_.ClearToEmpty();
}
inline const std::string& EncryptionInfo::kms_key_version() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.EncryptionInfo.kms_key_version)
  return _internal_kms_key_version();
}
inline void EncryptionInfo::set_kms_key_version(const std::string& value) {
  _internal_set_kms_key_version(value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.EncryptionInfo.kms_key_version)
}
inline std::string* EncryptionInfo::mutable_kms_key_version() {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.EncryptionInfo.kms_key_version)
  return _internal_mutable_kms_key_version();
}
inline const std::string& EncryptionInfo::_internal_kms_key_version() const {
  return kms_key_version_.Get();
}
inline void EncryptionInfo::_internal_set_kms_key_version(const std::string& value) {
  
  kms_key_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void EncryptionInfo::set_kms_key_version(std::string&& value) {
  
  kms_key_version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.admin.database.v1.EncryptionInfo.kms_key_version)
}
inline void EncryptionInfo::set_kms_key_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  kms_key_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.EncryptionInfo.kms_key_version)
}
inline void EncryptionInfo::set_kms_key_version(const char* value,
    size_t size) {
  
  kms_key_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.EncryptionInfo.kms_key_version)
}
inline std::string* EncryptionInfo::_internal_mutable_kms_key_version() {
  
  return kms_key_version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* EncryptionInfo::release_kms_key_version() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.EncryptionInfo.kms_key_version)
  return kms_key_version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EncryptionInfo::set_allocated_kms_key_version(std::string* kms_key_version) {
  if (kms_key_version != nullptr) {
    
  } else {
    
  }
  kms_key_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), kms_key_version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.EncryptionInfo.kms_key_version)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace database
}  // namespace admin
}  // namespace spanner
}  // namespace google

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::google::spanner::admin::database::v1::EncryptionInfo_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::spanner::admin::database::v1::EncryptionInfo_Type>() {
  return ::google::spanner::admin::database::v1::EncryptionInfo_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fspanner_2fadmin_2fdatabase_2fv1_2fcommon_2eproto
