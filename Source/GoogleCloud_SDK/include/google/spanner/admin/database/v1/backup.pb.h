// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/spanner/admin/database/v1/backup.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fspanner_2fadmin_2fdatabase_2fv1_2fbackup_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fspanner_2fadmin_2fdatabase_2fv1_2fbackup_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/field_behavior.pb.h"
#include "google/api/resource.pb.h"
#include "google/longrunning/operations.pb.h"
#include <google/protobuf/field_mask.pb.h>
#include <google/protobuf/timestamp.pb.h>
#include "google/spanner/admin/database/v1/common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fspanner_2fadmin_2fdatabase_2fv1_2fbackup_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fspanner_2fadmin_2fdatabase_2fv1_2fbackup_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fspanner_2fadmin_2fdatabase_2fv1_2fbackup_2eproto;
namespace google {
namespace spanner {
namespace admin {
namespace database {
namespace v1 {
class Backup;
struct BackupDefaultTypeInternal;
extern BackupDefaultTypeInternal _Backup_default_instance_;
class BackupInfo;
struct BackupInfoDefaultTypeInternal;
extern BackupInfoDefaultTypeInternal _BackupInfo_default_instance_;
class CreateBackupEncryptionConfig;
struct CreateBackupEncryptionConfigDefaultTypeInternal;
extern CreateBackupEncryptionConfigDefaultTypeInternal _CreateBackupEncryptionConfig_default_instance_;
class CreateBackupMetadata;
struct CreateBackupMetadataDefaultTypeInternal;
extern CreateBackupMetadataDefaultTypeInternal _CreateBackupMetadata_default_instance_;
class CreateBackupRequest;
struct CreateBackupRequestDefaultTypeInternal;
extern CreateBackupRequestDefaultTypeInternal _CreateBackupRequest_default_instance_;
class DeleteBackupRequest;
struct DeleteBackupRequestDefaultTypeInternal;
extern DeleteBackupRequestDefaultTypeInternal _DeleteBackupRequest_default_instance_;
class GetBackupRequest;
struct GetBackupRequestDefaultTypeInternal;
extern GetBackupRequestDefaultTypeInternal _GetBackupRequest_default_instance_;
class ListBackupOperationsRequest;
struct ListBackupOperationsRequestDefaultTypeInternal;
extern ListBackupOperationsRequestDefaultTypeInternal _ListBackupOperationsRequest_default_instance_;
class ListBackupOperationsResponse;
struct ListBackupOperationsResponseDefaultTypeInternal;
extern ListBackupOperationsResponseDefaultTypeInternal _ListBackupOperationsResponse_default_instance_;
class ListBackupsRequest;
struct ListBackupsRequestDefaultTypeInternal;
extern ListBackupsRequestDefaultTypeInternal _ListBackupsRequest_default_instance_;
class ListBackupsResponse;
struct ListBackupsResponseDefaultTypeInternal;
extern ListBackupsResponseDefaultTypeInternal _ListBackupsResponse_default_instance_;
class UpdateBackupRequest;
struct UpdateBackupRequestDefaultTypeInternal;
extern UpdateBackupRequestDefaultTypeInternal _UpdateBackupRequest_default_instance_;
}  // namespace v1
}  // namespace database
}  // namespace admin
}  // namespace spanner
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::spanner::admin::database::v1::Backup* Arena::CreateMaybeMessage<::google::spanner::admin::database::v1::Backup>(Arena*);
template<> ::google::spanner::admin::database::v1::BackupInfo* Arena::CreateMaybeMessage<::google::spanner::admin::database::v1::BackupInfo>(Arena*);
template<> ::google::spanner::admin::database::v1::CreateBackupEncryptionConfig* Arena::CreateMaybeMessage<::google::spanner::admin::database::v1::CreateBackupEncryptionConfig>(Arena*);
template<> ::google::spanner::admin::database::v1::CreateBackupMetadata* Arena::CreateMaybeMessage<::google::spanner::admin::database::v1::CreateBackupMetadata>(Arena*);
template<> ::google::spanner::admin::database::v1::CreateBackupRequest* Arena::CreateMaybeMessage<::google::spanner::admin::database::v1::CreateBackupRequest>(Arena*);
template<> ::google::spanner::admin::database::v1::DeleteBackupRequest* Arena::CreateMaybeMessage<::google::spanner::admin::database::v1::DeleteBackupRequest>(Arena*);
template<> ::google::spanner::admin::database::v1::GetBackupRequest* Arena::CreateMaybeMessage<::google::spanner::admin::database::v1::GetBackupRequest>(Arena*);
template<> ::google::spanner::admin::database::v1::ListBackupOperationsRequest* Arena::CreateMaybeMessage<::google::spanner::admin::database::v1::ListBackupOperationsRequest>(Arena*);
template<> ::google::spanner::admin::database::v1::ListBackupOperationsResponse* Arena::CreateMaybeMessage<::google::spanner::admin::database::v1::ListBackupOperationsResponse>(Arena*);
template<> ::google::spanner::admin::database::v1::ListBackupsRequest* Arena::CreateMaybeMessage<::google::spanner::admin::database::v1::ListBackupsRequest>(Arena*);
template<> ::google::spanner::admin::database::v1::ListBackupsResponse* Arena::CreateMaybeMessage<::google::spanner::admin::database::v1::ListBackupsResponse>(Arena*);
template<> ::google::spanner::admin::database::v1::UpdateBackupRequest* Arena::CreateMaybeMessage<::google::spanner::admin::database::v1::UpdateBackupRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace spanner {
namespace admin {
namespace database {
namespace v1 {

enum Backup_State : int {
  Backup_State_STATE_UNSPECIFIED = 0,
  Backup_State_CREATING = 1,
  Backup_State_READY = 2,
  Backup_State_Backup_State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Backup_State_Backup_State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Backup_State_IsValid(int value);
constexpr Backup_State Backup_State_State_MIN = Backup_State_STATE_UNSPECIFIED;
constexpr Backup_State Backup_State_State_MAX = Backup_State_READY;
constexpr int Backup_State_State_ARRAYSIZE = Backup_State_State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Backup_State_descriptor();
template<typename T>
inline const std::string& Backup_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Backup_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Backup_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Backup_State_descriptor(), enum_t_value);
}
inline bool Backup_State_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Backup_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Backup_State>(
    Backup_State_descriptor(), name, value);
}
enum CreateBackupEncryptionConfig_EncryptionType : int {
  CreateBackupEncryptionConfig_EncryptionType_ENCRYPTION_TYPE_UNSPECIFIED = 0,
  CreateBackupEncryptionConfig_EncryptionType_USE_DATABASE_ENCRYPTION = 1,
  CreateBackupEncryptionConfig_EncryptionType_GOOGLE_DEFAULT_ENCRYPTION = 2,
  CreateBackupEncryptionConfig_EncryptionType_CUSTOMER_MANAGED_ENCRYPTION = 3,
  CreateBackupEncryptionConfig_EncryptionType_CreateBackupEncryptionConfig_EncryptionType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CreateBackupEncryptionConfig_EncryptionType_CreateBackupEncryptionConfig_EncryptionType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CreateBackupEncryptionConfig_EncryptionType_IsValid(int value);
constexpr CreateBackupEncryptionConfig_EncryptionType CreateBackupEncryptionConfig_EncryptionType_EncryptionType_MIN = CreateBackupEncryptionConfig_EncryptionType_ENCRYPTION_TYPE_UNSPECIFIED;
constexpr CreateBackupEncryptionConfig_EncryptionType CreateBackupEncryptionConfig_EncryptionType_EncryptionType_MAX = CreateBackupEncryptionConfig_EncryptionType_CUSTOMER_MANAGED_ENCRYPTION;
constexpr int CreateBackupEncryptionConfig_EncryptionType_EncryptionType_ARRAYSIZE = CreateBackupEncryptionConfig_EncryptionType_EncryptionType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CreateBackupEncryptionConfig_EncryptionType_descriptor();
template<typename T>
inline const std::string& CreateBackupEncryptionConfig_EncryptionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CreateBackupEncryptionConfig_EncryptionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CreateBackupEncryptionConfig_EncryptionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CreateBackupEncryptionConfig_EncryptionType_descriptor(), enum_t_value);
}
inline bool CreateBackupEncryptionConfig_EncryptionType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CreateBackupEncryptionConfig_EncryptionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CreateBackupEncryptionConfig_EncryptionType>(
    CreateBackupEncryptionConfig_EncryptionType_descriptor(), name, value);
}
// ===================================================================

class Backup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.spanner.admin.database.v1.Backup) */ {
 public:
  inline Backup() : Backup(nullptr) {}
  ~Backup() override;
  explicit constexpr Backup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Backup(const Backup& from);
  Backup(Backup&& from) noexcept
    : Backup() {
    *this = ::std::move(from);
  }

  inline Backup& operator=(const Backup& from) {
    CopyFrom(from);
    return *this;
  }
  inline Backup& operator=(Backup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Backup& default_instance() {
    return *internal_default_instance();
  }
  static inline const Backup* internal_default_instance() {
    return reinterpret_cast<const Backup*>(
               &_Backup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Backup& a, Backup& b) {
    a.Swap(&b);
  }
  inline void Swap(Backup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Backup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Backup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Backup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Backup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Backup& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Backup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.spanner.admin.database.v1.Backup";
  }
  protected:
  explicit Backup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Backup_State State;
  static constexpr State STATE_UNSPECIFIED =
    Backup_State_STATE_UNSPECIFIED;
  static constexpr State CREATING =
    Backup_State_CREATING;
  static constexpr State READY =
    Backup_State_READY;
  static inline bool State_IsValid(int value) {
    return Backup_State_IsValid(value);
  }
  static constexpr State State_MIN =
    Backup_State_State_MIN;
  static constexpr State State_MAX =
    Backup_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    Backup_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return Backup_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return Backup_State_Name(enum_t_value);
  }
  static inline bool State_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      State* value) {
    return Backup_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kReferencingDatabasesFieldNumber = 7,
    kNameFieldNumber = 1,
    kDatabaseFieldNumber = 2,
    kExpireTimeFieldNumber = 3,
    kCreateTimeFieldNumber = 4,
    kEncryptionInfoFieldNumber = 8,
    kVersionTimeFieldNumber = 9,
    kSizeBytesFieldNumber = 5,
    kStateFieldNumber = 6,
    kDatabaseDialectFieldNumber = 10,
  };
  // repeated string referencing_databases = 7 [(.google.api.field_behavior) = OUTPUT_ONLY, (.google.api.resource_reference) = {
  int referencing_databases_size() const;
  private:
  int _internal_referencing_databases_size() const;
  public:
  void clear_referencing_databases();
  const std::string& referencing_databases(int index) const;
  std::string* mutable_referencing_databases(int index);
  void set_referencing_databases(int index, const std::string& value);
  void set_referencing_databases(int index, std::string&& value);
  void set_referencing_databases(int index, const char* value);
  void set_referencing_databases(int index, const char* value, size_t size);
  std::string* add_referencing_databases();
  void add_referencing_databases(const std::string& value);
  void add_referencing_databases(std::string&& value);
  void add_referencing_databases(const char* value);
  void add_referencing_databases(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& referencing_databases() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_referencing_databases();
  private:
  const std::string& _internal_referencing_databases(int index) const;
  std::string* _internal_add_referencing_databases();
  public:

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string database = 2 [(.google.api.resource_reference) = {
  void clear_database();
  const std::string& database() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_database(ArgT0&& arg0, ArgT... args);
  std::string* mutable_database();
  PROTOBUF_NODISCARD std::string* release_database();
  void set_allocated_database(std::string* database);
  private:
  const std::string& _internal_database() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_database(const std::string& value);
  std::string* _internal_mutable_database();
  public:

  // .google.protobuf.Timestamp expire_time = 3;
  bool has_expire_time() const;
  private:
  bool _internal_has_expire_time() const;
  public:
  void clear_expire_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& expire_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_expire_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_expire_time();
  void set_allocated_expire_time(::PROTOBUF_NAMESPACE_ID::Timestamp* expire_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_expire_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_expire_time();
  public:
  void unsafe_arena_set_allocated_expire_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* expire_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_expire_time();

  // .google.protobuf.Timestamp create_time = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_create_time() const;
  private:
  bool _internal_has_create_time() const;
  public:
  void clear_create_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& create_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_create_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_create_time();
  void set_allocated_create_time(::PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_create_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_create_time();
  public:
  void unsafe_arena_set_allocated_create_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_create_time();

  // .google.spanner.admin.database.v1.EncryptionInfo encryption_info = 8 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_encryption_info() const;
  private:
  bool _internal_has_encryption_info() const;
  public:
  void clear_encryption_info();
  const ::google::spanner::admin::database::v1::EncryptionInfo& encryption_info() const;
  PROTOBUF_NODISCARD ::google::spanner::admin::database::v1::EncryptionInfo* release_encryption_info();
  ::google::spanner::admin::database::v1::EncryptionInfo* mutable_encryption_info();
  void set_allocated_encryption_info(::google::spanner::admin::database::v1::EncryptionInfo* encryption_info);
  private:
  const ::google::spanner::admin::database::v1::EncryptionInfo& _internal_encryption_info() const;
  ::google::spanner::admin::database::v1::EncryptionInfo* _internal_mutable_encryption_info();
  public:
  void unsafe_arena_set_allocated_encryption_info(
      ::google::spanner::admin::database::v1::EncryptionInfo* encryption_info);
  ::google::spanner::admin::database::v1::EncryptionInfo* unsafe_arena_release_encryption_info();

  // .google.protobuf.Timestamp version_time = 9;
  bool has_version_time() const;
  private:
  bool _internal_has_version_time() const;
  public:
  void clear_version_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& version_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_version_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_version_time();
  void set_allocated_version_time(::PROTOBUF_NAMESPACE_ID::Timestamp* version_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_version_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_version_time();
  public:
  void unsafe_arena_set_allocated_version_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* version_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_version_time();

  // int64 size_bytes = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_size_bytes();
  int64_t size_bytes() const;
  void set_size_bytes(int64_t value);
  private:
  int64_t _internal_size_bytes() const;
  void _internal_set_size_bytes(int64_t value);
  public:

  // .google.spanner.admin.database.v1.Backup.State state = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_state();
  ::google::spanner::admin::database::v1::Backup_State state() const;
  void set_state(::google::spanner::admin::database::v1::Backup_State value);
  private:
  ::google::spanner::admin::database::v1::Backup_State _internal_state() const;
  void _internal_set_state(::google::spanner::admin::database::v1::Backup_State value);
  public:

  // .google.spanner.admin.database.v1.DatabaseDialect database_dialect = 10 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_database_dialect();
  ::google::spanner::admin::database::v1::DatabaseDialect database_dialect() const;
  void set_database_dialect(::google::spanner::admin::database::v1::DatabaseDialect value);
  private:
  ::google::spanner::admin::database::v1::DatabaseDialect _internal_database_dialect() const;
  void _internal_set_database_dialect(::google::spanner::admin::database::v1::DatabaseDialect value);
  public:

  // @@protoc_insertion_point(class_scope:google.spanner.admin.database.v1.Backup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> referencing_databases_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr database_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* expire_time_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* create_time_;
  ::google::spanner::admin::database::v1::EncryptionInfo* encryption_info_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* version_time_;
  int64_t size_bytes_;
  int state_;
  int database_dialect_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fspanner_2fadmin_2fdatabase_2fv1_2fbackup_2eproto;
};
// -------------------------------------------------------------------

class CreateBackupRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.spanner.admin.database.v1.CreateBackupRequest) */ {
 public:
  inline CreateBackupRequest() : CreateBackupRequest(nullptr) {}
  ~CreateBackupRequest() override;
  explicit constexpr CreateBackupRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateBackupRequest(const CreateBackupRequest& from);
  CreateBackupRequest(CreateBackupRequest&& from) noexcept
    : CreateBackupRequest() {
    *this = ::std::move(from);
  }

  inline CreateBackupRequest& operator=(const CreateBackupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateBackupRequest& operator=(CreateBackupRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateBackupRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateBackupRequest* internal_default_instance() {
    return reinterpret_cast<const CreateBackupRequest*>(
               &_CreateBackupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateBackupRequest& a, CreateBackupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateBackupRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateBackupRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateBackupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateBackupRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateBackupRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateBackupRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateBackupRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.spanner.admin.database.v1.CreateBackupRequest";
  }
  protected:
  explicit CreateBackupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kBackupIdFieldNumber = 2,
    kBackupFieldNumber = 3,
    kEncryptionConfigFieldNumber = 4,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string backup_id = 2 [(.google.api.field_behavior) = REQUIRED];
  void clear_backup_id();
  const std::string& backup_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_backup_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_backup_id();
  PROTOBUF_NODISCARD std::string* release_backup_id();
  void set_allocated_backup_id(std::string* backup_id);
  private:
  const std::string& _internal_backup_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_backup_id(const std::string& value);
  std::string* _internal_mutable_backup_id();
  public:

  // .google.spanner.admin.database.v1.Backup backup = 3 [(.google.api.field_behavior) = REQUIRED];
  bool has_backup() const;
  private:
  bool _internal_has_backup() const;
  public:
  void clear_backup();
  const ::google::spanner::admin::database::v1::Backup& backup() const;
  PROTOBUF_NODISCARD ::google::spanner::admin::database::v1::Backup* release_backup();
  ::google::spanner::admin::database::v1::Backup* mutable_backup();
  void set_allocated_backup(::google::spanner::admin::database::v1::Backup* backup);
  private:
  const ::google::spanner::admin::database::v1::Backup& _internal_backup() const;
  ::google::spanner::admin::database::v1::Backup* _internal_mutable_backup();
  public:
  void unsafe_arena_set_allocated_backup(
      ::google::spanner::admin::database::v1::Backup* backup);
  ::google::spanner::admin::database::v1::Backup* unsafe_arena_release_backup();

  // .google.spanner.admin.database.v1.CreateBackupEncryptionConfig encryption_config = 4 [(.google.api.field_behavior) = OPTIONAL];
  bool has_encryption_config() const;
  private:
  bool _internal_has_encryption_config() const;
  public:
  void clear_encryption_config();
  const ::google::spanner::admin::database::v1::CreateBackupEncryptionConfig& encryption_config() const;
  PROTOBUF_NODISCARD ::google::spanner::admin::database::v1::CreateBackupEncryptionConfig* release_encryption_config();
  ::google::spanner::admin::database::v1::CreateBackupEncryptionConfig* mutable_encryption_config();
  void set_allocated_encryption_config(::google::spanner::admin::database::v1::CreateBackupEncryptionConfig* encryption_config);
  private:
  const ::google::spanner::admin::database::v1::CreateBackupEncryptionConfig& _internal_encryption_config() const;
  ::google::spanner::admin::database::v1::CreateBackupEncryptionConfig* _internal_mutable_encryption_config();
  public:
  void unsafe_arena_set_allocated_encryption_config(
      ::google::spanner::admin::database::v1::CreateBackupEncryptionConfig* encryption_config);
  ::google::spanner::admin::database::v1::CreateBackupEncryptionConfig* unsafe_arena_release_encryption_config();

  // @@protoc_insertion_point(class_scope:google.spanner.admin.database.v1.CreateBackupRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr backup_id_;
  ::google::spanner::admin::database::v1::Backup* backup_;
  ::google::spanner::admin::database::v1::CreateBackupEncryptionConfig* encryption_config_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fspanner_2fadmin_2fdatabase_2fv1_2fbackup_2eproto;
};
// -------------------------------------------------------------------

class CreateBackupMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.spanner.admin.database.v1.CreateBackupMetadata) */ {
 public:
  inline CreateBackupMetadata() : CreateBackupMetadata(nullptr) {}
  ~CreateBackupMetadata() override;
  explicit constexpr CreateBackupMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateBackupMetadata(const CreateBackupMetadata& from);
  CreateBackupMetadata(CreateBackupMetadata&& from) noexcept
    : CreateBackupMetadata() {
    *this = ::std::move(from);
  }

  inline CreateBackupMetadata& operator=(const CreateBackupMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateBackupMetadata& operator=(CreateBackupMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateBackupMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateBackupMetadata* internal_default_instance() {
    return reinterpret_cast<const CreateBackupMetadata*>(
               &_CreateBackupMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CreateBackupMetadata& a, CreateBackupMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateBackupMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateBackupMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateBackupMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateBackupMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateBackupMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateBackupMetadata& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateBackupMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.spanner.admin.database.v1.CreateBackupMetadata";
  }
  protected:
  explicit CreateBackupMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDatabaseFieldNumber = 2,
    kProgressFieldNumber = 3,
    kCancelTimeFieldNumber = 4,
  };
  // string name = 1 [(.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string database = 2 [(.google.api.resource_reference) = {
  void clear_database();
  const std::string& database() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_database(ArgT0&& arg0, ArgT... args);
  std::string* mutable_database();
  PROTOBUF_NODISCARD std::string* release_database();
  void set_allocated_database(std::string* database);
  private:
  const std::string& _internal_database() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_database(const std::string& value);
  std::string* _internal_mutable_database();
  public:

  // .google.spanner.admin.database.v1.OperationProgress progress = 3;
  bool has_progress() const;
  private:
  bool _internal_has_progress() const;
  public:
  void clear_progress();
  const ::google::spanner::admin::database::v1::OperationProgress& progress() const;
  PROTOBUF_NODISCARD ::google::spanner::admin::database::v1::OperationProgress* release_progress();
  ::google::spanner::admin::database::v1::OperationProgress* mutable_progress();
  void set_allocated_progress(::google::spanner::admin::database::v1::OperationProgress* progress);
  private:
  const ::google::spanner::admin::database::v1::OperationProgress& _internal_progress() const;
  ::google::spanner::admin::database::v1::OperationProgress* _internal_mutable_progress();
  public:
  void unsafe_arena_set_allocated_progress(
      ::google::spanner::admin::database::v1::OperationProgress* progress);
  ::google::spanner::admin::database::v1::OperationProgress* unsafe_arena_release_progress();

  // .google.protobuf.Timestamp cancel_time = 4;
  bool has_cancel_time() const;
  private:
  bool _internal_has_cancel_time() const;
  public:
  void clear_cancel_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& cancel_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_cancel_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_cancel_time();
  void set_allocated_cancel_time(::PROTOBUF_NAMESPACE_ID::Timestamp* cancel_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_cancel_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_cancel_time();
  public:
  void unsafe_arena_set_allocated_cancel_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* cancel_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_cancel_time();

  // @@protoc_insertion_point(class_scope:google.spanner.admin.database.v1.CreateBackupMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr database_;
  ::google::spanner::admin::database::v1::OperationProgress* progress_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* cancel_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fspanner_2fadmin_2fdatabase_2fv1_2fbackup_2eproto;
};
// -------------------------------------------------------------------

class UpdateBackupRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.spanner.admin.database.v1.UpdateBackupRequest) */ {
 public:
  inline UpdateBackupRequest() : UpdateBackupRequest(nullptr) {}
  ~UpdateBackupRequest() override;
  explicit constexpr UpdateBackupRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateBackupRequest(const UpdateBackupRequest& from);
  UpdateBackupRequest(UpdateBackupRequest&& from) noexcept
    : UpdateBackupRequest() {
    *this = ::std::move(from);
  }

  inline UpdateBackupRequest& operator=(const UpdateBackupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateBackupRequest& operator=(UpdateBackupRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateBackupRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateBackupRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateBackupRequest*>(
               &_UpdateBackupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UpdateBackupRequest& a, UpdateBackupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateBackupRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateBackupRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateBackupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateBackupRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateBackupRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateBackupRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateBackupRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.spanner.admin.database.v1.UpdateBackupRequest";
  }
  protected:
  explicit UpdateBackupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBackupFieldNumber = 1,
    kUpdateMaskFieldNumber = 2,
  };
  // .google.spanner.admin.database.v1.Backup backup = 1 [(.google.api.field_behavior) = REQUIRED];
  bool has_backup() const;
  private:
  bool _internal_has_backup() const;
  public:
  void clear_backup();
  const ::google::spanner::admin::database::v1::Backup& backup() const;
  PROTOBUF_NODISCARD ::google::spanner::admin::database::v1::Backup* release_backup();
  ::google::spanner::admin::database::v1::Backup* mutable_backup();
  void set_allocated_backup(::google::spanner::admin::database::v1::Backup* backup);
  private:
  const ::google::spanner::admin::database::v1::Backup& _internal_backup() const;
  ::google::spanner::admin::database::v1::Backup* _internal_mutable_backup();
  public:
  void unsafe_arena_set_allocated_backup(
      ::google::spanner::admin::database::v1::Backup* backup);
  ::google::spanner::admin::database::v1::Backup* unsafe_arena_release_backup();

  // .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // @@protoc_insertion_point(class_scope:google.spanner.admin.database.v1.UpdateBackupRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::spanner::admin::database::v1::Backup* backup_;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fspanner_2fadmin_2fdatabase_2fv1_2fbackup_2eproto;
};
// -------------------------------------------------------------------

class GetBackupRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.spanner.admin.database.v1.GetBackupRequest) */ {
 public:
  inline GetBackupRequest() : GetBackupRequest(nullptr) {}
  ~GetBackupRequest() override;
  explicit constexpr GetBackupRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetBackupRequest(const GetBackupRequest& from);
  GetBackupRequest(GetBackupRequest&& from) noexcept
    : GetBackupRequest() {
    *this = ::std::move(from);
  }

  inline GetBackupRequest& operator=(const GetBackupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBackupRequest& operator=(GetBackupRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBackupRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBackupRequest* internal_default_instance() {
    return reinterpret_cast<const GetBackupRequest*>(
               &_GetBackupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetBackupRequest& a, GetBackupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBackupRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBackupRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetBackupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetBackupRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetBackupRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetBackupRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBackupRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.spanner.admin.database.v1.GetBackupRequest";
  }
  protected:
  explicit GetBackupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.spanner.admin.database.v1.GetBackupRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fspanner_2fadmin_2fdatabase_2fv1_2fbackup_2eproto;
};
// -------------------------------------------------------------------

class DeleteBackupRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.spanner.admin.database.v1.DeleteBackupRequest) */ {
 public:
  inline DeleteBackupRequest() : DeleteBackupRequest(nullptr) {}
  ~DeleteBackupRequest() override;
  explicit constexpr DeleteBackupRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteBackupRequest(const DeleteBackupRequest& from);
  DeleteBackupRequest(DeleteBackupRequest&& from) noexcept
    : DeleteBackupRequest() {
    *this = ::std::move(from);
  }

  inline DeleteBackupRequest& operator=(const DeleteBackupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteBackupRequest& operator=(DeleteBackupRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteBackupRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteBackupRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteBackupRequest*>(
               &_DeleteBackupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DeleteBackupRequest& a, DeleteBackupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteBackupRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteBackupRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteBackupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteBackupRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteBackupRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteBackupRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteBackupRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.spanner.admin.database.v1.DeleteBackupRequest";
  }
  protected:
  explicit DeleteBackupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.spanner.admin.database.v1.DeleteBackupRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fspanner_2fadmin_2fdatabase_2fv1_2fbackup_2eproto;
};
// -------------------------------------------------------------------

class ListBackupsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.spanner.admin.database.v1.ListBackupsRequest) */ {
 public:
  inline ListBackupsRequest() : ListBackupsRequest(nullptr) {}
  ~ListBackupsRequest() override;
  explicit constexpr ListBackupsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListBackupsRequest(const ListBackupsRequest& from);
  ListBackupsRequest(ListBackupsRequest&& from) noexcept
    : ListBackupsRequest() {
    *this = ::std::move(from);
  }

  inline ListBackupsRequest& operator=(const ListBackupsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListBackupsRequest& operator=(ListBackupsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListBackupsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListBackupsRequest* internal_default_instance() {
    return reinterpret_cast<const ListBackupsRequest*>(
               &_ListBackupsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ListBackupsRequest& a, ListBackupsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListBackupsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListBackupsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListBackupsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListBackupsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListBackupsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListBackupsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListBackupsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.spanner.admin.database.v1.ListBackupsRequest";
  }
  protected:
  explicit ListBackupsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kFilterFieldNumber = 2,
    kPageTokenFieldNumber = 4,
    kPageSizeFieldNumber = 3,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string filter = 2;
  void clear_filter();
  const std::string& filter() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filter(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filter();
  PROTOBUF_NODISCARD std::string* release_filter();
  void set_allocated_filter(std::string* filter);
  private:
  const std::string& _internal_filter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filter(const std::string& value);
  std::string* _internal_mutable_filter();
  public:

  // string page_token = 4;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 3;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.spanner.admin.database.v1.ListBackupsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filter_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
  int32_t page_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fspanner_2fadmin_2fdatabase_2fv1_2fbackup_2eproto;
};
// -------------------------------------------------------------------

class ListBackupsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.spanner.admin.database.v1.ListBackupsResponse) */ {
 public:
  inline ListBackupsResponse() : ListBackupsResponse(nullptr) {}
  ~ListBackupsResponse() override;
  explicit constexpr ListBackupsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListBackupsResponse(const ListBackupsResponse& from);
  ListBackupsResponse(ListBackupsResponse&& from) noexcept
    : ListBackupsResponse() {
    *this = ::std::move(from);
  }

  inline ListBackupsResponse& operator=(const ListBackupsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListBackupsResponse& operator=(ListBackupsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListBackupsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListBackupsResponse* internal_default_instance() {
    return reinterpret_cast<const ListBackupsResponse*>(
               &_ListBackupsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ListBackupsResponse& a, ListBackupsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListBackupsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListBackupsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListBackupsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListBackupsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListBackupsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListBackupsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListBackupsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.spanner.admin.database.v1.ListBackupsResponse";
  }
  protected:
  explicit ListBackupsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBackupsFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .google.spanner.admin.database.v1.Backup backups = 1;
  int backups_size() const;
  private:
  int _internal_backups_size() const;
  public:
  void clear_backups();
  ::google::spanner::admin::database::v1::Backup* mutable_backups(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::spanner::admin::database::v1::Backup >*
      mutable_backups();
  private:
  const ::google::spanner::admin::database::v1::Backup& _internal_backups(int index) const;
  ::google::spanner::admin::database::v1::Backup* _internal_add_backups();
  public:
  const ::google::spanner::admin::database::v1::Backup& backups(int index) const;
  ::google::spanner::admin::database::v1::Backup* add_backups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::spanner::admin::database::v1::Backup >&
      backups() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:google.spanner.admin.database.v1.ListBackupsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::spanner::admin::database::v1::Backup > backups_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fspanner_2fadmin_2fdatabase_2fv1_2fbackup_2eproto;
};
// -------------------------------------------------------------------

class ListBackupOperationsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.spanner.admin.database.v1.ListBackupOperationsRequest) */ {
 public:
  inline ListBackupOperationsRequest() : ListBackupOperationsRequest(nullptr) {}
  ~ListBackupOperationsRequest() override;
  explicit constexpr ListBackupOperationsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListBackupOperationsRequest(const ListBackupOperationsRequest& from);
  ListBackupOperationsRequest(ListBackupOperationsRequest&& from) noexcept
    : ListBackupOperationsRequest() {
    *this = ::std::move(from);
  }

  inline ListBackupOperationsRequest& operator=(const ListBackupOperationsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListBackupOperationsRequest& operator=(ListBackupOperationsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListBackupOperationsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListBackupOperationsRequest* internal_default_instance() {
    return reinterpret_cast<const ListBackupOperationsRequest*>(
               &_ListBackupOperationsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ListBackupOperationsRequest& a, ListBackupOperationsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListBackupOperationsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListBackupOperationsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListBackupOperationsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListBackupOperationsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListBackupOperationsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListBackupOperationsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListBackupOperationsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.spanner.admin.database.v1.ListBackupOperationsRequest";
  }
  protected:
  explicit ListBackupOperationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kFilterFieldNumber = 2,
    kPageTokenFieldNumber = 4,
    kPageSizeFieldNumber = 3,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string filter = 2;
  void clear_filter();
  const std::string& filter() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filter(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filter();
  PROTOBUF_NODISCARD std::string* release_filter();
  void set_allocated_filter(std::string* filter);
  private:
  const std::string& _internal_filter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filter(const std::string& value);
  std::string* _internal_mutable_filter();
  public:

  // string page_token = 4;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 3;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.spanner.admin.database.v1.ListBackupOperationsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filter_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
  int32_t page_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fspanner_2fadmin_2fdatabase_2fv1_2fbackup_2eproto;
};
// -------------------------------------------------------------------

class ListBackupOperationsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.spanner.admin.database.v1.ListBackupOperationsResponse) */ {
 public:
  inline ListBackupOperationsResponse() : ListBackupOperationsResponse(nullptr) {}
  ~ListBackupOperationsResponse() override;
  explicit constexpr ListBackupOperationsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListBackupOperationsResponse(const ListBackupOperationsResponse& from);
  ListBackupOperationsResponse(ListBackupOperationsResponse&& from) noexcept
    : ListBackupOperationsResponse() {
    *this = ::std::move(from);
  }

  inline ListBackupOperationsResponse& operator=(const ListBackupOperationsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListBackupOperationsResponse& operator=(ListBackupOperationsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListBackupOperationsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListBackupOperationsResponse* internal_default_instance() {
    return reinterpret_cast<const ListBackupOperationsResponse*>(
               &_ListBackupOperationsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ListBackupOperationsResponse& a, ListBackupOperationsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListBackupOperationsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListBackupOperationsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListBackupOperationsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListBackupOperationsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListBackupOperationsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListBackupOperationsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListBackupOperationsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.spanner.admin.database.v1.ListBackupOperationsResponse";
  }
  protected:
  explicit ListBackupOperationsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOperationsFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .google.longrunning.Operation operations = 1;
  int operations_size() const;
  private:
  int _internal_operations_size() const;
  public:
  void clear_operations();
  ::google::longrunning::Operation* mutable_operations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::longrunning::Operation >*
      mutable_operations();
  private:
  const ::google::longrunning::Operation& _internal_operations(int index) const;
  ::google::longrunning::Operation* _internal_add_operations();
  public:
  const ::google::longrunning::Operation& operations(int index) const;
  ::google::longrunning::Operation* add_operations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::longrunning::Operation >&
      operations() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:google.spanner.admin.database.v1.ListBackupOperationsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::longrunning::Operation > operations_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fspanner_2fadmin_2fdatabase_2fv1_2fbackup_2eproto;
};
// -------------------------------------------------------------------

class BackupInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.spanner.admin.database.v1.BackupInfo) */ {
 public:
  inline BackupInfo() : BackupInfo(nullptr) {}
  ~BackupInfo() override;
  explicit constexpr BackupInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BackupInfo(const BackupInfo& from);
  BackupInfo(BackupInfo&& from) noexcept
    : BackupInfo() {
    *this = ::std::move(from);
  }

  inline BackupInfo& operator=(const BackupInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BackupInfo& operator=(BackupInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BackupInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const BackupInfo* internal_default_instance() {
    return reinterpret_cast<const BackupInfo*>(
               &_BackupInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(BackupInfo& a, BackupInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(BackupInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BackupInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BackupInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BackupInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BackupInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BackupInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BackupInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.spanner.admin.database.v1.BackupInfo";
  }
  protected:
  explicit BackupInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBackupFieldNumber = 1,
    kSourceDatabaseFieldNumber = 3,
    kCreateTimeFieldNumber = 2,
    kVersionTimeFieldNumber = 4,
  };
  // string backup = 1 [(.google.api.resource_reference) = {
  void clear_backup();
  const std::string& backup() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_backup(ArgT0&& arg0, ArgT... args);
  std::string* mutable_backup();
  PROTOBUF_NODISCARD std::string* release_backup();
  void set_allocated_backup(std::string* backup);
  private:
  const std::string& _internal_backup() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_backup(const std::string& value);
  std::string* _internal_mutable_backup();
  public:

  // string source_database = 3 [(.google.api.resource_reference) = {
  void clear_source_database();
  const std::string& source_database() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_source_database(ArgT0&& arg0, ArgT... args);
  std::string* mutable_source_database();
  PROTOBUF_NODISCARD std::string* release_source_database();
  void set_allocated_source_database(std::string* source_database);
  private:
  const std::string& _internal_source_database() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source_database(const std::string& value);
  std::string* _internal_mutable_source_database();
  public:

  // .google.protobuf.Timestamp create_time = 2;
  bool has_create_time() const;
  private:
  bool _internal_has_create_time() const;
  public:
  void clear_create_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& create_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_create_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_create_time();
  void set_allocated_create_time(::PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_create_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_create_time();
  public:
  void unsafe_arena_set_allocated_create_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_create_time();

  // .google.protobuf.Timestamp version_time = 4;
  bool has_version_time() const;
  private:
  bool _internal_has_version_time() const;
  public:
  void clear_version_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& version_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_version_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_version_time();
  void set_allocated_version_time(::PROTOBUF_NAMESPACE_ID::Timestamp* version_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_version_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_version_time();
  public:
  void unsafe_arena_set_allocated_version_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* version_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_version_time();

  // @@protoc_insertion_point(class_scope:google.spanner.admin.database.v1.BackupInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr backup_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_database_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* create_time_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* version_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fspanner_2fadmin_2fdatabase_2fv1_2fbackup_2eproto;
};
// -------------------------------------------------------------------

class CreateBackupEncryptionConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.spanner.admin.database.v1.CreateBackupEncryptionConfig) */ {
 public:
  inline CreateBackupEncryptionConfig() : CreateBackupEncryptionConfig(nullptr) {}
  ~CreateBackupEncryptionConfig() override;
  explicit constexpr CreateBackupEncryptionConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateBackupEncryptionConfig(const CreateBackupEncryptionConfig& from);
  CreateBackupEncryptionConfig(CreateBackupEncryptionConfig&& from) noexcept
    : CreateBackupEncryptionConfig() {
    *this = ::std::move(from);
  }

  inline CreateBackupEncryptionConfig& operator=(const CreateBackupEncryptionConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateBackupEncryptionConfig& operator=(CreateBackupEncryptionConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateBackupEncryptionConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateBackupEncryptionConfig* internal_default_instance() {
    return reinterpret_cast<const CreateBackupEncryptionConfig*>(
               &_CreateBackupEncryptionConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CreateBackupEncryptionConfig& a, CreateBackupEncryptionConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateBackupEncryptionConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateBackupEncryptionConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateBackupEncryptionConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateBackupEncryptionConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateBackupEncryptionConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateBackupEncryptionConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateBackupEncryptionConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.spanner.admin.database.v1.CreateBackupEncryptionConfig";
  }
  protected:
  explicit CreateBackupEncryptionConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CreateBackupEncryptionConfig_EncryptionType EncryptionType;
  static constexpr EncryptionType ENCRYPTION_TYPE_UNSPECIFIED =
    CreateBackupEncryptionConfig_EncryptionType_ENCRYPTION_TYPE_UNSPECIFIED;
  static constexpr EncryptionType USE_DATABASE_ENCRYPTION =
    CreateBackupEncryptionConfig_EncryptionType_USE_DATABASE_ENCRYPTION;
  static constexpr EncryptionType GOOGLE_DEFAULT_ENCRYPTION =
    CreateBackupEncryptionConfig_EncryptionType_GOOGLE_DEFAULT_ENCRYPTION;
  static constexpr EncryptionType CUSTOMER_MANAGED_ENCRYPTION =
    CreateBackupEncryptionConfig_EncryptionType_CUSTOMER_MANAGED_ENCRYPTION;
  static inline bool EncryptionType_IsValid(int value) {
    return CreateBackupEncryptionConfig_EncryptionType_IsValid(value);
  }
  static constexpr EncryptionType EncryptionType_MIN =
    CreateBackupEncryptionConfig_EncryptionType_EncryptionType_MIN;
  static constexpr EncryptionType EncryptionType_MAX =
    CreateBackupEncryptionConfig_EncryptionType_EncryptionType_MAX;
  static constexpr int EncryptionType_ARRAYSIZE =
    CreateBackupEncryptionConfig_EncryptionType_EncryptionType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EncryptionType_descriptor() {
    return CreateBackupEncryptionConfig_EncryptionType_descriptor();
  }
  template<typename T>
  static inline const std::string& EncryptionType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EncryptionType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EncryptionType_Name.");
    return CreateBackupEncryptionConfig_EncryptionType_Name(enum_t_value);
  }
  static inline bool EncryptionType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EncryptionType* value) {
    return CreateBackupEncryptionConfig_EncryptionType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kKmsKeyNameFieldNumber = 2,
    kEncryptionTypeFieldNumber = 1,
  };
  // string kms_key_name = 2 [(.google.api.field_behavior) = OPTIONAL, (.google.api.resource_reference) = {
  void clear_kms_key_name();
  const std::string& kms_key_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_kms_key_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_kms_key_name();
  PROTOBUF_NODISCARD std::string* release_kms_key_name();
  void set_allocated_kms_key_name(std::string* kms_key_name);
  private:
  const std::string& _internal_kms_key_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_kms_key_name(const std::string& value);
  std::string* _internal_mutable_kms_key_name();
  public:

  // .google.spanner.admin.database.v1.CreateBackupEncryptionConfig.EncryptionType encryption_type = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_encryption_type();
  ::google::spanner::admin::database::v1::CreateBackupEncryptionConfig_EncryptionType encryption_type() const;
  void set_encryption_type(::google::spanner::admin::database::v1::CreateBackupEncryptionConfig_EncryptionType value);
  private:
  ::google::spanner::admin::database::v1::CreateBackupEncryptionConfig_EncryptionType _internal_encryption_type() const;
  void _internal_set_encryption_type(::google::spanner::admin::database::v1::CreateBackupEncryptionConfig_EncryptionType value);
  public:

  // @@protoc_insertion_point(class_scope:google.spanner.admin.database.v1.CreateBackupEncryptionConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kms_key_name_;
  int encryption_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fspanner_2fadmin_2fdatabase_2fv1_2fbackup_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Backup

// string database = 2 [(.google.api.resource_reference) = {
inline void Backup::clear_database() {
  database_.ClearToEmpty();
}
inline const std::string& Backup::database() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.Backup.database)
  return _internal_database();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Backup::set_database(ArgT0&& arg0, ArgT... args) {
 
 database_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.Backup.database)
}
inline std::string* Backup::mutable_database() {
  std::string* _s = _internal_mutable_database();
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.Backup.database)
  return _s;
}
inline const std::string& Backup::_internal_database() const {
  return database_.Get();
}
inline void Backup::_internal_set_database(const std::string& value) {
  
  database_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Backup::_internal_mutable_database() {
  
  return database_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Backup::release_database() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.Backup.database)
  return database_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Backup::set_allocated_database(std::string* database) {
  if (database != nullptr) {
    
  } else {
    
  }
  database_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), database,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (database_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    database_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.Backup.database)
}

// .google.protobuf.Timestamp version_time = 9;
inline bool Backup::_internal_has_version_time() const {
  return this != internal_default_instance() && version_time_ != nullptr;
}
inline bool Backup::has_version_time() const {
  return _internal_has_version_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Backup::_internal_version_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = version_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Backup::version_time() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.Backup.version_time)
  return _internal_version_time();
}
inline void Backup::unsafe_arena_set_allocated_version_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* version_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(version_time_);
  }
  version_time_ = version_time;
  if (version_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.spanner.admin.database.v1.Backup.version_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Backup::release_version_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = version_time_;
  version_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Backup::unsafe_arena_release_version_time() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.Backup.version_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = version_time_;
  version_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Backup::_internal_mutable_version_time() {
  
  if (version_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    version_time_ = p;
  }
  return version_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Backup::mutable_version_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_version_time();
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.Backup.version_time)
  return _msg;
}
inline void Backup::set_allocated_version_time(::PROTOBUF_NAMESPACE_ID::Timestamp* version_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(version_time_);
  }
  if (version_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(version_time));
    if (message_arena != submessage_arena) {
      version_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, version_time, submessage_arena);
    }
    
  } else {
    
  }
  version_time_ = version_time;
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.Backup.version_time)
}

// .google.protobuf.Timestamp expire_time = 3;
inline bool Backup::_internal_has_expire_time() const {
  return this != internal_default_instance() && expire_time_ != nullptr;
}
inline bool Backup::has_expire_time() const {
  return _internal_has_expire_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Backup::_internal_expire_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = expire_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Backup::expire_time() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.Backup.expire_time)
  return _internal_expire_time();
}
inline void Backup::unsafe_arena_set_allocated_expire_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* expire_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expire_time_);
  }
  expire_time_ = expire_time;
  if (expire_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.spanner.admin.database.v1.Backup.expire_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Backup::release_expire_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = expire_time_;
  expire_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Backup::unsafe_arena_release_expire_time() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.Backup.expire_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = expire_time_;
  expire_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Backup::_internal_mutable_expire_time() {
  
  if (expire_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    expire_time_ = p;
  }
  return expire_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Backup::mutable_expire_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_expire_time();
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.Backup.expire_time)
  return _msg;
}
inline void Backup::set_allocated_expire_time(::PROTOBUF_NAMESPACE_ID::Timestamp* expire_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(expire_time_);
  }
  if (expire_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expire_time));
    if (message_arena != submessage_arena) {
      expire_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expire_time, submessage_arena);
    }
    
  } else {
    
  }
  expire_time_ = expire_time;
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.Backup.expire_time)
}

// string name = 1;
inline void Backup::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Backup::name() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.Backup.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Backup::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.Backup.name)
}
inline std::string* Backup::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.Backup.name)
  return _s;
}
inline const std::string& Backup::_internal_name() const {
  return name_.Get();
}
inline void Backup::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Backup::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Backup::release_name() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.Backup.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Backup::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.Backup.name)
}

// .google.protobuf.Timestamp create_time = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool Backup::_internal_has_create_time() const {
  return this != internal_default_instance() && create_time_ != nullptr;
}
inline bool Backup::has_create_time() const {
  return _internal_has_create_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Backup::_internal_create_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = create_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Backup::create_time() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.Backup.create_time)
  return _internal_create_time();
}
inline void Backup::unsafe_arena_set_allocated_create_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time_);
  }
  create_time_ = create_time;
  if (create_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.spanner.admin.database.v1.Backup.create_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Backup::release_create_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = create_time_;
  create_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Backup::unsafe_arena_release_create_time() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.Backup.create_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = create_time_;
  create_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Backup::_internal_mutable_create_time() {
  
  if (create_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    create_time_ = p;
  }
  return create_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Backup::mutable_create_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_create_time();
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.Backup.create_time)
  return _msg;
}
inline void Backup::set_allocated_create_time(::PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time_);
  }
  if (create_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time));
    if (message_arena != submessage_arena) {
      create_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.Backup.create_time)
}

// int64 size_bytes = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void Backup::clear_size_bytes() {
  size_bytes_ = int64_t{0};
}
inline int64_t Backup::_internal_size_bytes() const {
  return size_bytes_;
}
inline int64_t Backup::size_bytes() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.Backup.size_bytes)
  return _internal_size_bytes();
}
inline void Backup::_internal_set_size_bytes(int64_t value) {
  
  size_bytes_ = value;
}
inline void Backup::set_size_bytes(int64_t value) {
  _internal_set_size_bytes(value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.Backup.size_bytes)
}

// .google.spanner.admin.database.v1.Backup.State state = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void Backup::clear_state() {
  state_ = 0;
}
inline ::google::spanner::admin::database::v1::Backup_State Backup::_internal_state() const {
  return static_cast< ::google::spanner::admin::database::v1::Backup_State >(state_);
}
inline ::google::spanner::admin::database::v1::Backup_State Backup::state() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.Backup.state)
  return _internal_state();
}
inline void Backup::_internal_set_state(::google::spanner::admin::database::v1::Backup_State value) {
  
  state_ = value;
}
inline void Backup::set_state(::google::spanner::admin::database::v1::Backup_State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.Backup.state)
}

// repeated string referencing_databases = 7 [(.google.api.field_behavior) = OUTPUT_ONLY, (.google.api.resource_reference) = {
inline int Backup::_internal_referencing_databases_size() const {
  return referencing_databases_.size();
}
inline int Backup::referencing_databases_size() const {
  return _internal_referencing_databases_size();
}
inline void Backup::clear_referencing_databases() {
  referencing_databases_.Clear();
}
inline std::string* Backup::add_referencing_databases() {
  std::string* _s = _internal_add_referencing_databases();
  // @@protoc_insertion_point(field_add_mutable:google.spanner.admin.database.v1.Backup.referencing_databases)
  return _s;
}
inline const std::string& Backup::_internal_referencing_databases(int index) const {
  return referencing_databases_.Get(index);
}
inline const std::string& Backup::referencing_databases(int index) const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.Backup.referencing_databases)
  return _internal_referencing_databases(index);
}
inline std::string* Backup::mutable_referencing_databases(int index) {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.Backup.referencing_databases)
  return referencing_databases_.Mutable(index);
}
inline void Backup::set_referencing_databases(int index, const std::string& value) {
  referencing_databases_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.Backup.referencing_databases)
}
inline void Backup::set_referencing_databases(int index, std::string&& value) {
  referencing_databases_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.Backup.referencing_databases)
}
inline void Backup::set_referencing_databases(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  referencing_databases_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.Backup.referencing_databases)
}
inline void Backup::set_referencing_databases(int index, const char* value, size_t size) {
  referencing_databases_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.Backup.referencing_databases)
}
inline std::string* Backup::_internal_add_referencing_databases() {
  return referencing_databases_.Add();
}
inline void Backup::add_referencing_databases(const std::string& value) {
  referencing_databases_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.spanner.admin.database.v1.Backup.referencing_databases)
}
inline void Backup::add_referencing_databases(std::string&& value) {
  referencing_databases_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.spanner.admin.database.v1.Backup.referencing_databases)
}
inline void Backup::add_referencing_databases(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  referencing_databases_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.spanner.admin.database.v1.Backup.referencing_databases)
}
inline void Backup::add_referencing_databases(const char* value, size_t size) {
  referencing_databases_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.spanner.admin.database.v1.Backup.referencing_databases)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Backup::referencing_databases() const {
  // @@protoc_insertion_point(field_list:google.spanner.admin.database.v1.Backup.referencing_databases)
  return referencing_databases_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Backup::mutable_referencing_databases() {
  // @@protoc_insertion_point(field_mutable_list:google.spanner.admin.database.v1.Backup.referencing_databases)
  return &referencing_databases_;
}

// .google.spanner.admin.database.v1.EncryptionInfo encryption_info = 8 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool Backup::_internal_has_encryption_info() const {
  return this != internal_default_instance() && encryption_info_ != nullptr;
}
inline bool Backup::has_encryption_info() const {
  return _internal_has_encryption_info();
}
inline const ::google::spanner::admin::database::v1::EncryptionInfo& Backup::_internal_encryption_info() const {
  const ::google::spanner::admin::database::v1::EncryptionInfo* p = encryption_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::spanner::admin::database::v1::EncryptionInfo&>(
      ::google::spanner::admin::database::v1::_EncryptionInfo_default_instance_);
}
inline const ::google::spanner::admin::database::v1::EncryptionInfo& Backup::encryption_info() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.Backup.encryption_info)
  return _internal_encryption_info();
}
inline void Backup::unsafe_arena_set_allocated_encryption_info(
    ::google::spanner::admin::database::v1::EncryptionInfo* encryption_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(encryption_info_);
  }
  encryption_info_ = encryption_info;
  if (encryption_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.spanner.admin.database.v1.Backup.encryption_info)
}
inline ::google::spanner::admin::database::v1::EncryptionInfo* Backup::release_encryption_info() {
  
  ::google::spanner::admin::database::v1::EncryptionInfo* temp = encryption_info_;
  encryption_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::spanner::admin::database::v1::EncryptionInfo* Backup::unsafe_arena_release_encryption_info() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.Backup.encryption_info)
  
  ::google::spanner::admin::database::v1::EncryptionInfo* temp = encryption_info_;
  encryption_info_ = nullptr;
  return temp;
}
inline ::google::spanner::admin::database::v1::EncryptionInfo* Backup::_internal_mutable_encryption_info() {
  
  if (encryption_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::spanner::admin::database::v1::EncryptionInfo>(GetArenaForAllocation());
    encryption_info_ = p;
  }
  return encryption_info_;
}
inline ::google::spanner::admin::database::v1::EncryptionInfo* Backup::mutable_encryption_info() {
  ::google::spanner::admin::database::v1::EncryptionInfo* _msg = _internal_mutable_encryption_info();
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.Backup.encryption_info)
  return _msg;
}
inline void Backup::set_allocated_encryption_info(::google::spanner::admin::database::v1::EncryptionInfo* encryption_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(encryption_info_);
  }
  if (encryption_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(encryption_info));
    if (message_arena != submessage_arena) {
      encryption_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, encryption_info, submessage_arena);
    }
    
  } else {
    
  }
  encryption_info_ = encryption_info;
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.Backup.encryption_info)
}

// .google.spanner.admin.database.v1.DatabaseDialect database_dialect = 10 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void Backup::clear_database_dialect() {
  database_dialect_ = 0;
}
inline ::google::spanner::admin::database::v1::DatabaseDialect Backup::_internal_database_dialect() const {
  return static_cast< ::google::spanner::admin::database::v1::DatabaseDialect >(database_dialect_);
}
inline ::google::spanner::admin::database::v1::DatabaseDialect Backup::database_dialect() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.Backup.database_dialect)
  return _internal_database_dialect();
}
inline void Backup::_internal_set_database_dialect(::google::spanner::admin::database::v1::DatabaseDialect value) {
  
  database_dialect_ = value;
}
inline void Backup::set_database_dialect(::google::spanner::admin::database::v1::DatabaseDialect value) {
  _internal_set_database_dialect(value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.Backup.database_dialect)
}

// -------------------------------------------------------------------

// CreateBackupRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreateBackupRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& CreateBackupRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.CreateBackupRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateBackupRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.CreateBackupRequest.parent)
}
inline std::string* CreateBackupRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.CreateBackupRequest.parent)
  return _s;
}
inline const std::string& CreateBackupRequest::_internal_parent() const {
  return parent_.Get();
}
inline void CreateBackupRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateBackupRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateBackupRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.CreateBackupRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateBackupRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (parent_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.CreateBackupRequest.parent)
}

// string backup_id = 2 [(.google.api.field_behavior) = REQUIRED];
inline void CreateBackupRequest::clear_backup_id() {
  backup_id_.ClearToEmpty();
}
inline const std::string& CreateBackupRequest::backup_id() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.CreateBackupRequest.backup_id)
  return _internal_backup_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateBackupRequest::set_backup_id(ArgT0&& arg0, ArgT... args) {
 
 backup_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.CreateBackupRequest.backup_id)
}
inline std::string* CreateBackupRequest::mutable_backup_id() {
  std::string* _s = _internal_mutable_backup_id();
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.CreateBackupRequest.backup_id)
  return _s;
}
inline const std::string& CreateBackupRequest::_internal_backup_id() const {
  return backup_id_.Get();
}
inline void CreateBackupRequest::_internal_set_backup_id(const std::string& value) {
  
  backup_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateBackupRequest::_internal_mutable_backup_id() {
  
  return backup_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateBackupRequest::release_backup_id() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.CreateBackupRequest.backup_id)
  return backup_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateBackupRequest::set_allocated_backup_id(std::string* backup_id) {
  if (backup_id != nullptr) {
    
  } else {
    
  }
  backup_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), backup_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (backup_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    backup_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.CreateBackupRequest.backup_id)
}

// .google.spanner.admin.database.v1.Backup backup = 3 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateBackupRequest::_internal_has_backup() const {
  return this != internal_default_instance() && backup_ != nullptr;
}
inline bool CreateBackupRequest::has_backup() const {
  return _internal_has_backup();
}
inline void CreateBackupRequest::clear_backup() {
  if (GetArenaForAllocation() == nullptr && backup_ != nullptr) {
    delete backup_;
  }
  backup_ = nullptr;
}
inline const ::google::spanner::admin::database::v1::Backup& CreateBackupRequest::_internal_backup() const {
  const ::google::spanner::admin::database::v1::Backup* p = backup_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::spanner::admin::database::v1::Backup&>(
      ::google::spanner::admin::database::v1::_Backup_default_instance_);
}
inline const ::google::spanner::admin::database::v1::Backup& CreateBackupRequest::backup() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.CreateBackupRequest.backup)
  return _internal_backup();
}
inline void CreateBackupRequest::unsafe_arena_set_allocated_backup(
    ::google::spanner::admin::database::v1::Backup* backup) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(backup_);
  }
  backup_ = backup;
  if (backup) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.spanner.admin.database.v1.CreateBackupRequest.backup)
}
inline ::google::spanner::admin::database::v1::Backup* CreateBackupRequest::release_backup() {
  
  ::google::spanner::admin::database::v1::Backup* temp = backup_;
  backup_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::spanner::admin::database::v1::Backup* CreateBackupRequest::unsafe_arena_release_backup() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.CreateBackupRequest.backup)
  
  ::google::spanner::admin::database::v1::Backup* temp = backup_;
  backup_ = nullptr;
  return temp;
}
inline ::google::spanner::admin::database::v1::Backup* CreateBackupRequest::_internal_mutable_backup() {
  
  if (backup_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::spanner::admin::database::v1::Backup>(GetArenaForAllocation());
    backup_ = p;
  }
  return backup_;
}
inline ::google::spanner::admin::database::v1::Backup* CreateBackupRequest::mutable_backup() {
  ::google::spanner::admin::database::v1::Backup* _msg = _internal_mutable_backup();
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.CreateBackupRequest.backup)
  return _msg;
}
inline void CreateBackupRequest::set_allocated_backup(::google::spanner::admin::database::v1::Backup* backup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete backup_;
  }
  if (backup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::google::spanner::admin::database::v1::Backup>::GetOwningArena(backup);
    if (message_arena != submessage_arena) {
      backup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, backup, submessage_arena);
    }
    
  } else {
    
  }
  backup_ = backup;
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.CreateBackupRequest.backup)
}

// .google.spanner.admin.database.v1.CreateBackupEncryptionConfig encryption_config = 4 [(.google.api.field_behavior) = OPTIONAL];
inline bool CreateBackupRequest::_internal_has_encryption_config() const {
  return this != internal_default_instance() && encryption_config_ != nullptr;
}
inline bool CreateBackupRequest::has_encryption_config() const {
  return _internal_has_encryption_config();
}
inline void CreateBackupRequest::clear_encryption_config() {
  if (GetArenaForAllocation() == nullptr && encryption_config_ != nullptr) {
    delete encryption_config_;
  }
  encryption_config_ = nullptr;
}
inline const ::google::spanner::admin::database::v1::CreateBackupEncryptionConfig& CreateBackupRequest::_internal_encryption_config() const {
  const ::google::spanner::admin::database::v1::CreateBackupEncryptionConfig* p = encryption_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::spanner::admin::database::v1::CreateBackupEncryptionConfig&>(
      ::google::spanner::admin::database::v1::_CreateBackupEncryptionConfig_default_instance_);
}
inline const ::google::spanner::admin::database::v1::CreateBackupEncryptionConfig& CreateBackupRequest::encryption_config() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.CreateBackupRequest.encryption_config)
  return _internal_encryption_config();
}
inline void CreateBackupRequest::unsafe_arena_set_allocated_encryption_config(
    ::google::spanner::admin::database::v1::CreateBackupEncryptionConfig* encryption_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(encryption_config_);
  }
  encryption_config_ = encryption_config;
  if (encryption_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.spanner.admin.database.v1.CreateBackupRequest.encryption_config)
}
inline ::google::spanner::admin::database::v1::CreateBackupEncryptionConfig* CreateBackupRequest::release_encryption_config() {
  
  ::google::spanner::admin::database::v1::CreateBackupEncryptionConfig* temp = encryption_config_;
  encryption_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::spanner::admin::database::v1::CreateBackupEncryptionConfig* CreateBackupRequest::unsafe_arena_release_encryption_config() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.CreateBackupRequest.encryption_config)
  
  ::google::spanner::admin::database::v1::CreateBackupEncryptionConfig* temp = encryption_config_;
  encryption_config_ = nullptr;
  return temp;
}
inline ::google::spanner::admin::database::v1::CreateBackupEncryptionConfig* CreateBackupRequest::_internal_mutable_encryption_config() {
  
  if (encryption_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::spanner::admin::database::v1::CreateBackupEncryptionConfig>(GetArenaForAllocation());
    encryption_config_ = p;
  }
  return encryption_config_;
}
inline ::google::spanner::admin::database::v1::CreateBackupEncryptionConfig* CreateBackupRequest::mutable_encryption_config() {
  ::google::spanner::admin::database::v1::CreateBackupEncryptionConfig* _msg = _internal_mutable_encryption_config();
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.CreateBackupRequest.encryption_config)
  return _msg;
}
inline void CreateBackupRequest::set_allocated_encryption_config(::google::spanner::admin::database::v1::CreateBackupEncryptionConfig* encryption_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete encryption_config_;
  }
  if (encryption_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::google::spanner::admin::database::v1::CreateBackupEncryptionConfig>::GetOwningArena(encryption_config);
    if (message_arena != submessage_arena) {
      encryption_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, encryption_config, submessage_arena);
    }
    
  } else {
    
  }
  encryption_config_ = encryption_config;
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.CreateBackupRequest.encryption_config)
}

// -------------------------------------------------------------------

// CreateBackupMetadata

// string name = 1 [(.google.api.resource_reference) = {
inline void CreateBackupMetadata::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& CreateBackupMetadata::name() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.CreateBackupMetadata.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateBackupMetadata::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.CreateBackupMetadata.name)
}
inline std::string* CreateBackupMetadata::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.CreateBackupMetadata.name)
  return _s;
}
inline const std::string& CreateBackupMetadata::_internal_name() const {
  return name_.Get();
}
inline void CreateBackupMetadata::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateBackupMetadata::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateBackupMetadata::release_name() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.CreateBackupMetadata.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateBackupMetadata::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.CreateBackupMetadata.name)
}

// string database = 2 [(.google.api.resource_reference) = {
inline void CreateBackupMetadata::clear_database() {
  database_.ClearToEmpty();
}
inline const std::string& CreateBackupMetadata::database() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.CreateBackupMetadata.database)
  return _internal_database();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateBackupMetadata::set_database(ArgT0&& arg0, ArgT... args) {
 
 database_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.CreateBackupMetadata.database)
}
inline std::string* CreateBackupMetadata::mutable_database() {
  std::string* _s = _internal_mutable_database();
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.CreateBackupMetadata.database)
  return _s;
}
inline const std::string& CreateBackupMetadata::_internal_database() const {
  return database_.Get();
}
inline void CreateBackupMetadata::_internal_set_database(const std::string& value) {
  
  database_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateBackupMetadata::_internal_mutable_database() {
  
  return database_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateBackupMetadata::release_database() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.CreateBackupMetadata.database)
  return database_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateBackupMetadata::set_allocated_database(std::string* database) {
  if (database != nullptr) {
    
  } else {
    
  }
  database_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), database,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (database_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    database_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.CreateBackupMetadata.database)
}

// .google.spanner.admin.database.v1.OperationProgress progress = 3;
inline bool CreateBackupMetadata::_internal_has_progress() const {
  return this != internal_default_instance() && progress_ != nullptr;
}
inline bool CreateBackupMetadata::has_progress() const {
  return _internal_has_progress();
}
inline const ::google::spanner::admin::database::v1::OperationProgress& CreateBackupMetadata::_internal_progress() const {
  const ::google::spanner::admin::database::v1::OperationProgress* p = progress_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::spanner::admin::database::v1::OperationProgress&>(
      ::google::spanner::admin::database::v1::_OperationProgress_default_instance_);
}
inline const ::google::spanner::admin::database::v1::OperationProgress& CreateBackupMetadata::progress() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.CreateBackupMetadata.progress)
  return _internal_progress();
}
inline void CreateBackupMetadata::unsafe_arena_set_allocated_progress(
    ::google::spanner::admin::database::v1::OperationProgress* progress) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(progress_);
  }
  progress_ = progress;
  if (progress) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.spanner.admin.database.v1.CreateBackupMetadata.progress)
}
inline ::google::spanner::admin::database::v1::OperationProgress* CreateBackupMetadata::release_progress() {
  
  ::google::spanner::admin::database::v1::OperationProgress* temp = progress_;
  progress_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::spanner::admin::database::v1::OperationProgress* CreateBackupMetadata::unsafe_arena_release_progress() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.CreateBackupMetadata.progress)
  
  ::google::spanner::admin::database::v1::OperationProgress* temp = progress_;
  progress_ = nullptr;
  return temp;
}
inline ::google::spanner::admin::database::v1::OperationProgress* CreateBackupMetadata::_internal_mutable_progress() {
  
  if (progress_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::spanner::admin::database::v1::OperationProgress>(GetArenaForAllocation());
    progress_ = p;
  }
  return progress_;
}
inline ::google::spanner::admin::database::v1::OperationProgress* CreateBackupMetadata::mutable_progress() {
  ::google::spanner::admin::database::v1::OperationProgress* _msg = _internal_mutable_progress();
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.CreateBackupMetadata.progress)
  return _msg;
}
inline void CreateBackupMetadata::set_allocated_progress(::google::spanner::admin::database::v1::OperationProgress* progress) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(progress_);
  }
  if (progress) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(progress));
    if (message_arena != submessage_arena) {
      progress = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, progress, submessage_arena);
    }
    
  } else {
    
  }
  progress_ = progress;
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.CreateBackupMetadata.progress)
}

// .google.protobuf.Timestamp cancel_time = 4;
inline bool CreateBackupMetadata::_internal_has_cancel_time() const {
  return this != internal_default_instance() && cancel_time_ != nullptr;
}
inline bool CreateBackupMetadata::has_cancel_time() const {
  return _internal_has_cancel_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& CreateBackupMetadata::_internal_cancel_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = cancel_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& CreateBackupMetadata::cancel_time() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.CreateBackupMetadata.cancel_time)
  return _internal_cancel_time();
}
inline void CreateBackupMetadata::unsafe_arena_set_allocated_cancel_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* cancel_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cancel_time_);
  }
  cancel_time_ = cancel_time;
  if (cancel_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.spanner.admin.database.v1.CreateBackupMetadata.cancel_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CreateBackupMetadata::release_cancel_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = cancel_time_;
  cancel_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CreateBackupMetadata::unsafe_arena_release_cancel_time() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.CreateBackupMetadata.cancel_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = cancel_time_;
  cancel_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CreateBackupMetadata::_internal_mutable_cancel_time() {
  
  if (cancel_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    cancel_time_ = p;
  }
  return cancel_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CreateBackupMetadata::mutable_cancel_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_cancel_time();
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.CreateBackupMetadata.cancel_time)
  return _msg;
}
inline void CreateBackupMetadata::set_allocated_cancel_time(::PROTOBUF_NAMESPACE_ID::Timestamp* cancel_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cancel_time_);
  }
  if (cancel_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cancel_time));
    if (message_arena != submessage_arena) {
      cancel_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cancel_time, submessage_arena);
    }
    
  } else {
    
  }
  cancel_time_ = cancel_time;
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.CreateBackupMetadata.cancel_time)
}

// -------------------------------------------------------------------

// UpdateBackupRequest

// .google.spanner.admin.database.v1.Backup backup = 1 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateBackupRequest::_internal_has_backup() const {
  return this != internal_default_instance() && backup_ != nullptr;
}
inline bool UpdateBackupRequest::has_backup() const {
  return _internal_has_backup();
}
inline void UpdateBackupRequest::clear_backup() {
  if (GetArenaForAllocation() == nullptr && backup_ != nullptr) {
    delete backup_;
  }
  backup_ = nullptr;
}
inline const ::google::spanner::admin::database::v1::Backup& UpdateBackupRequest::_internal_backup() const {
  const ::google::spanner::admin::database::v1::Backup* p = backup_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::spanner::admin::database::v1::Backup&>(
      ::google::spanner::admin::database::v1::_Backup_default_instance_);
}
inline const ::google::spanner::admin::database::v1::Backup& UpdateBackupRequest::backup() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.UpdateBackupRequest.backup)
  return _internal_backup();
}
inline void UpdateBackupRequest::unsafe_arena_set_allocated_backup(
    ::google::spanner::admin::database::v1::Backup* backup) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(backup_);
  }
  backup_ = backup;
  if (backup) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.spanner.admin.database.v1.UpdateBackupRequest.backup)
}
inline ::google::spanner::admin::database::v1::Backup* UpdateBackupRequest::release_backup() {
  
  ::google::spanner::admin::database::v1::Backup* temp = backup_;
  backup_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::spanner::admin::database::v1::Backup* UpdateBackupRequest::unsafe_arena_release_backup() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.UpdateBackupRequest.backup)
  
  ::google::spanner::admin::database::v1::Backup* temp = backup_;
  backup_ = nullptr;
  return temp;
}
inline ::google::spanner::admin::database::v1::Backup* UpdateBackupRequest::_internal_mutable_backup() {
  
  if (backup_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::spanner::admin::database::v1::Backup>(GetArenaForAllocation());
    backup_ = p;
  }
  return backup_;
}
inline ::google::spanner::admin::database::v1::Backup* UpdateBackupRequest::mutable_backup() {
  ::google::spanner::admin::database::v1::Backup* _msg = _internal_mutable_backup();
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.UpdateBackupRequest.backup)
  return _msg;
}
inline void UpdateBackupRequest::set_allocated_backup(::google::spanner::admin::database::v1::Backup* backup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete backup_;
  }
  if (backup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::google::spanner::admin::database::v1::Backup>::GetOwningArena(backup);
    if (message_arena != submessage_arena) {
      backup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, backup, submessage_arena);
    }
    
  } else {
    
  }
  backup_ = backup;
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.UpdateBackupRequest.backup)
}

// .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateBackupRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != nullptr;
}
inline bool UpdateBackupRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateBackupRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateBackupRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.UpdateBackupRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateBackupRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.spanner.admin.database.v1.UpdateBackupRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateBackupRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateBackupRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.UpdateBackupRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateBackupRequest::_internal_mutable_update_mask() {
  
  if (update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    update_mask_ = p;
  }
  return update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateBackupRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.UpdateBackupRequest.update_mask)
  return _msg;
}
inline void UpdateBackupRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.UpdateBackupRequest.update_mask)
}

// -------------------------------------------------------------------

// GetBackupRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetBackupRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GetBackupRequest::name() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.GetBackupRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetBackupRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.GetBackupRequest.name)
}
inline std::string* GetBackupRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.GetBackupRequest.name)
  return _s;
}
inline const std::string& GetBackupRequest::_internal_name() const {
  return name_.Get();
}
inline void GetBackupRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetBackupRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetBackupRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.GetBackupRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetBackupRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.GetBackupRequest.name)
}

// -------------------------------------------------------------------

// DeleteBackupRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteBackupRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& DeleteBackupRequest::name() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.DeleteBackupRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteBackupRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.DeleteBackupRequest.name)
}
inline std::string* DeleteBackupRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.DeleteBackupRequest.name)
  return _s;
}
inline const std::string& DeleteBackupRequest::_internal_name() const {
  return name_.Get();
}
inline void DeleteBackupRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteBackupRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteBackupRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.DeleteBackupRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteBackupRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.DeleteBackupRequest.name)
}

// -------------------------------------------------------------------

// ListBackupsRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListBackupsRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& ListBackupsRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.ListBackupsRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListBackupsRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.ListBackupsRequest.parent)
}
inline std::string* ListBackupsRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.ListBackupsRequest.parent)
  return _s;
}
inline const std::string& ListBackupsRequest::_internal_parent() const {
  return parent_.Get();
}
inline void ListBackupsRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListBackupsRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListBackupsRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.ListBackupsRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListBackupsRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (parent_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.ListBackupsRequest.parent)
}

// string filter = 2;
inline void ListBackupsRequest::clear_filter() {
  filter_.ClearToEmpty();
}
inline const std::string& ListBackupsRequest::filter() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.ListBackupsRequest.filter)
  return _internal_filter();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListBackupsRequest::set_filter(ArgT0&& arg0, ArgT... args) {
 
 filter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.ListBackupsRequest.filter)
}
inline std::string* ListBackupsRequest::mutable_filter() {
  std::string* _s = _internal_mutable_filter();
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.ListBackupsRequest.filter)
  return _s;
}
inline const std::string& ListBackupsRequest::_internal_filter() const {
  return filter_.Get();
}
inline void ListBackupsRequest::_internal_set_filter(const std::string& value) {
  
  filter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListBackupsRequest::_internal_mutable_filter() {
  
  return filter_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListBackupsRequest::release_filter() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.ListBackupsRequest.filter)
  return filter_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListBackupsRequest::set_allocated_filter(std::string* filter) {
  if (filter != nullptr) {
    
  } else {
    
  }
  filter_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filter,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (filter_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    filter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.ListBackupsRequest.filter)
}

// int32 page_size = 3;
inline void ListBackupsRequest::clear_page_size() {
  page_size_ = 0;
}
inline int32_t ListBackupsRequest::_internal_page_size() const {
  return page_size_;
}
inline int32_t ListBackupsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.ListBackupsRequest.page_size)
  return _internal_page_size();
}
inline void ListBackupsRequest::_internal_set_page_size(int32_t value) {
  
  page_size_ = value;
}
inline void ListBackupsRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.ListBackupsRequest.page_size)
}

// string page_token = 4;
inline void ListBackupsRequest::clear_page_token() {
  page_token_.ClearToEmpty();
}
inline const std::string& ListBackupsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.ListBackupsRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListBackupsRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.ListBackupsRequest.page_token)
}
inline std::string* ListBackupsRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.ListBackupsRequest.page_token)
  return _s;
}
inline const std::string& ListBackupsRequest::_internal_page_token() const {
  return page_token_.Get();
}
inline void ListBackupsRequest::_internal_set_page_token(const std::string& value) {
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListBackupsRequest::_internal_mutable_page_token() {
  
  return page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListBackupsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.ListBackupsRequest.page_token)
  return page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListBackupsRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (page_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.ListBackupsRequest.page_token)
}

// -------------------------------------------------------------------

// ListBackupsResponse

// repeated .google.spanner.admin.database.v1.Backup backups = 1;
inline int ListBackupsResponse::_internal_backups_size() const {
  return backups_.size();
}
inline int ListBackupsResponse::backups_size() const {
  return _internal_backups_size();
}
inline void ListBackupsResponse::clear_backups() {
  backups_.Clear();
}
inline ::google::spanner::admin::database::v1::Backup* ListBackupsResponse::mutable_backups(int index) {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.ListBackupsResponse.backups)
  return backups_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::spanner::admin::database::v1::Backup >*
ListBackupsResponse::mutable_backups() {
  // @@protoc_insertion_point(field_mutable_list:google.spanner.admin.database.v1.ListBackupsResponse.backups)
  return &backups_;
}
inline const ::google::spanner::admin::database::v1::Backup& ListBackupsResponse::_internal_backups(int index) const {
  return backups_.Get(index);
}
inline const ::google::spanner::admin::database::v1::Backup& ListBackupsResponse::backups(int index) const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.ListBackupsResponse.backups)
  return _internal_backups(index);
}
inline ::google::spanner::admin::database::v1::Backup* ListBackupsResponse::_internal_add_backups() {
  return backups_.Add();
}
inline ::google::spanner::admin::database::v1::Backup* ListBackupsResponse::add_backups() {
  ::google::spanner::admin::database::v1::Backup* _add = _internal_add_backups();
  // @@protoc_insertion_point(field_add:google.spanner.admin.database.v1.ListBackupsResponse.backups)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::spanner::admin::database::v1::Backup >&
ListBackupsResponse::backups() const {
  // @@protoc_insertion_point(field_list:google.spanner.admin.database.v1.ListBackupsResponse.backups)
  return backups_;
}

// string next_page_token = 2;
inline void ListBackupsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty();
}
inline const std::string& ListBackupsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.ListBackupsResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListBackupsResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.ListBackupsResponse.next_page_token)
}
inline std::string* ListBackupsResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.ListBackupsResponse.next_page_token)
  return _s;
}
inline const std::string& ListBackupsResponse::_internal_next_page_token() const {
  return next_page_token_.Get();
}
inline void ListBackupsResponse::_internal_set_next_page_token(const std::string& value) {
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListBackupsResponse::_internal_mutable_next_page_token() {
  
  return next_page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListBackupsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.ListBackupsResponse.next_page_token)
  return next_page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListBackupsResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (next_page_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.ListBackupsResponse.next_page_token)
}

// -------------------------------------------------------------------

// ListBackupOperationsRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListBackupOperationsRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& ListBackupOperationsRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.ListBackupOperationsRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListBackupOperationsRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.ListBackupOperationsRequest.parent)
}
inline std::string* ListBackupOperationsRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.ListBackupOperationsRequest.parent)
  return _s;
}
inline const std::string& ListBackupOperationsRequest::_internal_parent() const {
  return parent_.Get();
}
inline void ListBackupOperationsRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListBackupOperationsRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListBackupOperationsRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.ListBackupOperationsRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListBackupOperationsRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (parent_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.ListBackupOperationsRequest.parent)
}

// string filter = 2;
inline void ListBackupOperationsRequest::clear_filter() {
  filter_.ClearToEmpty();
}
inline const std::string& ListBackupOperationsRequest::filter() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.ListBackupOperationsRequest.filter)
  return _internal_filter();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListBackupOperationsRequest::set_filter(ArgT0&& arg0, ArgT... args) {
 
 filter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.ListBackupOperationsRequest.filter)
}
inline std::string* ListBackupOperationsRequest::mutable_filter() {
  std::string* _s = _internal_mutable_filter();
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.ListBackupOperationsRequest.filter)
  return _s;
}
inline const std::string& ListBackupOperationsRequest::_internal_filter() const {
  return filter_.Get();
}
inline void ListBackupOperationsRequest::_internal_set_filter(const std::string& value) {
  
  filter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListBackupOperationsRequest::_internal_mutable_filter() {
  
  return filter_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListBackupOperationsRequest::release_filter() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.ListBackupOperationsRequest.filter)
  return filter_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListBackupOperationsRequest::set_allocated_filter(std::string* filter) {
  if (filter != nullptr) {
    
  } else {
    
  }
  filter_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filter,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (filter_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    filter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.ListBackupOperationsRequest.filter)
}

// int32 page_size = 3;
inline void ListBackupOperationsRequest::clear_page_size() {
  page_size_ = 0;
}
inline int32_t ListBackupOperationsRequest::_internal_page_size() const {
  return page_size_;
}
inline int32_t ListBackupOperationsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.ListBackupOperationsRequest.page_size)
  return _internal_page_size();
}
inline void ListBackupOperationsRequest::_internal_set_page_size(int32_t value) {
  
  page_size_ = value;
}
inline void ListBackupOperationsRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.ListBackupOperationsRequest.page_size)
}

// string page_token = 4;
inline void ListBackupOperationsRequest::clear_page_token() {
  page_token_.ClearToEmpty();
}
inline const std::string& ListBackupOperationsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.ListBackupOperationsRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListBackupOperationsRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.ListBackupOperationsRequest.page_token)
}
inline std::string* ListBackupOperationsRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.ListBackupOperationsRequest.page_token)
  return _s;
}
inline const std::string& ListBackupOperationsRequest::_internal_page_token() const {
  return page_token_.Get();
}
inline void ListBackupOperationsRequest::_internal_set_page_token(const std::string& value) {
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListBackupOperationsRequest::_internal_mutable_page_token() {
  
  return page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListBackupOperationsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.ListBackupOperationsRequest.page_token)
  return page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListBackupOperationsRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (page_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.ListBackupOperationsRequest.page_token)
}

// -------------------------------------------------------------------

// ListBackupOperationsResponse

// repeated .google.longrunning.Operation operations = 1;
inline int ListBackupOperationsResponse::_internal_operations_size() const {
  return operations_.size();
}
inline int ListBackupOperationsResponse::operations_size() const {
  return _internal_operations_size();
}
inline ::google::longrunning::Operation* ListBackupOperationsResponse::mutable_operations(int index) {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.ListBackupOperationsResponse.operations)
  return operations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::longrunning::Operation >*
ListBackupOperationsResponse::mutable_operations() {
  // @@protoc_insertion_point(field_mutable_list:google.spanner.admin.database.v1.ListBackupOperationsResponse.operations)
  return &operations_;
}
inline const ::google::longrunning::Operation& ListBackupOperationsResponse::_internal_operations(int index) const {
  return operations_.Get(index);
}
inline const ::google::longrunning::Operation& ListBackupOperationsResponse::operations(int index) const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.ListBackupOperationsResponse.operations)
  return _internal_operations(index);
}
inline ::google::longrunning::Operation* ListBackupOperationsResponse::_internal_add_operations() {
  return operations_.Add();
}
inline ::google::longrunning::Operation* ListBackupOperationsResponse::add_operations() {
  ::google::longrunning::Operation* _add = _internal_add_operations();
  // @@protoc_insertion_point(field_add:google.spanner.admin.database.v1.ListBackupOperationsResponse.operations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::longrunning::Operation >&
ListBackupOperationsResponse::operations() const {
  // @@protoc_insertion_point(field_list:google.spanner.admin.database.v1.ListBackupOperationsResponse.operations)
  return operations_;
}

// string next_page_token = 2;
inline void ListBackupOperationsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty();
}
inline const std::string& ListBackupOperationsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.ListBackupOperationsResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListBackupOperationsResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.ListBackupOperationsResponse.next_page_token)
}
inline std::string* ListBackupOperationsResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.ListBackupOperationsResponse.next_page_token)
  return _s;
}
inline const std::string& ListBackupOperationsResponse::_internal_next_page_token() const {
  return next_page_token_.Get();
}
inline void ListBackupOperationsResponse::_internal_set_next_page_token(const std::string& value) {
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListBackupOperationsResponse::_internal_mutable_next_page_token() {
  
  return next_page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListBackupOperationsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.ListBackupOperationsResponse.next_page_token)
  return next_page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListBackupOperationsResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (next_page_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.ListBackupOperationsResponse.next_page_token)
}

// -------------------------------------------------------------------

// BackupInfo

// string backup = 1 [(.google.api.resource_reference) = {
inline void BackupInfo::clear_backup() {
  backup_.ClearToEmpty();
}
inline const std::string& BackupInfo::backup() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.BackupInfo.backup)
  return _internal_backup();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BackupInfo::set_backup(ArgT0&& arg0, ArgT... args) {
 
 backup_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.BackupInfo.backup)
}
inline std::string* BackupInfo::mutable_backup() {
  std::string* _s = _internal_mutable_backup();
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.BackupInfo.backup)
  return _s;
}
inline const std::string& BackupInfo::_internal_backup() const {
  return backup_.Get();
}
inline void BackupInfo::_internal_set_backup(const std::string& value) {
  
  backup_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BackupInfo::_internal_mutable_backup() {
  
  return backup_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BackupInfo::release_backup() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.BackupInfo.backup)
  return backup_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BackupInfo::set_allocated_backup(std::string* backup) {
  if (backup != nullptr) {
    
  } else {
    
  }
  backup_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), backup,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (backup_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    backup_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.BackupInfo.backup)
}

// .google.protobuf.Timestamp version_time = 4;
inline bool BackupInfo::_internal_has_version_time() const {
  return this != internal_default_instance() && version_time_ != nullptr;
}
inline bool BackupInfo::has_version_time() const {
  return _internal_has_version_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& BackupInfo::_internal_version_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = version_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& BackupInfo::version_time() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.BackupInfo.version_time)
  return _internal_version_time();
}
inline void BackupInfo::unsafe_arena_set_allocated_version_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* version_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(version_time_);
  }
  version_time_ = version_time;
  if (version_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.spanner.admin.database.v1.BackupInfo.version_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* BackupInfo::release_version_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = version_time_;
  version_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* BackupInfo::unsafe_arena_release_version_time() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.BackupInfo.version_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = version_time_;
  version_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* BackupInfo::_internal_mutable_version_time() {
  
  if (version_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    version_time_ = p;
  }
  return version_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* BackupInfo::mutable_version_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_version_time();
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.BackupInfo.version_time)
  return _msg;
}
inline void BackupInfo::set_allocated_version_time(::PROTOBUF_NAMESPACE_ID::Timestamp* version_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(version_time_);
  }
  if (version_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(version_time));
    if (message_arena != submessage_arena) {
      version_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, version_time, submessage_arena);
    }
    
  } else {
    
  }
  version_time_ = version_time;
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.BackupInfo.version_time)
}

// .google.protobuf.Timestamp create_time = 2;
inline bool BackupInfo::_internal_has_create_time() const {
  return this != internal_default_instance() && create_time_ != nullptr;
}
inline bool BackupInfo::has_create_time() const {
  return _internal_has_create_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& BackupInfo::_internal_create_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = create_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& BackupInfo::create_time() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.BackupInfo.create_time)
  return _internal_create_time();
}
inline void BackupInfo::unsafe_arena_set_allocated_create_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time_);
  }
  create_time_ = create_time;
  if (create_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.spanner.admin.database.v1.BackupInfo.create_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* BackupInfo::release_create_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = create_time_;
  create_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* BackupInfo::unsafe_arena_release_create_time() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.BackupInfo.create_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = create_time_;
  create_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* BackupInfo::_internal_mutable_create_time() {
  
  if (create_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    create_time_ = p;
  }
  return create_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* BackupInfo::mutable_create_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_create_time();
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.BackupInfo.create_time)
  return _msg;
}
inline void BackupInfo::set_allocated_create_time(::PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time_);
  }
  if (create_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time));
    if (message_arena != submessage_arena) {
      create_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.BackupInfo.create_time)
}

// string source_database = 3 [(.google.api.resource_reference) = {
inline void BackupInfo::clear_source_database() {
  source_database_.ClearToEmpty();
}
inline const std::string& BackupInfo::source_database() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.BackupInfo.source_database)
  return _internal_source_database();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BackupInfo::set_source_database(ArgT0&& arg0, ArgT... args) {
 
 source_database_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.BackupInfo.source_database)
}
inline std::string* BackupInfo::mutable_source_database() {
  std::string* _s = _internal_mutable_source_database();
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.BackupInfo.source_database)
  return _s;
}
inline const std::string& BackupInfo::_internal_source_database() const {
  return source_database_.Get();
}
inline void BackupInfo::_internal_set_source_database(const std::string& value) {
  
  source_database_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BackupInfo::_internal_mutable_source_database() {
  
  return source_database_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BackupInfo::release_source_database() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.BackupInfo.source_database)
  return source_database_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BackupInfo::set_allocated_source_database(std::string* source_database) {
  if (source_database != nullptr) {
    
  } else {
    
  }
  source_database_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source_database,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (source_database_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    source_database_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.BackupInfo.source_database)
}

// -------------------------------------------------------------------

// CreateBackupEncryptionConfig

// .google.spanner.admin.database.v1.CreateBackupEncryptionConfig.EncryptionType encryption_type = 1 [(.google.api.field_behavior) = REQUIRED];
inline void CreateBackupEncryptionConfig::clear_encryption_type() {
  encryption_type_ = 0;
}
inline ::google::spanner::admin::database::v1::CreateBackupEncryptionConfig_EncryptionType CreateBackupEncryptionConfig::_internal_encryption_type() const {
  return static_cast< ::google::spanner::admin::database::v1::CreateBackupEncryptionConfig_EncryptionType >(encryption_type_);
}
inline ::google::spanner::admin::database::v1::CreateBackupEncryptionConfig_EncryptionType CreateBackupEncryptionConfig::encryption_type() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.CreateBackupEncryptionConfig.encryption_type)
  return _internal_encryption_type();
}
inline void CreateBackupEncryptionConfig::_internal_set_encryption_type(::google::spanner::admin::database::v1::CreateBackupEncryptionConfig_EncryptionType value) {
  
  encryption_type_ = value;
}
inline void CreateBackupEncryptionConfig::set_encryption_type(::google::spanner::admin::database::v1::CreateBackupEncryptionConfig_EncryptionType value) {
  _internal_set_encryption_type(value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.CreateBackupEncryptionConfig.encryption_type)
}

// string kms_key_name = 2 [(.google.api.field_behavior) = OPTIONAL, (.google.api.resource_reference) = {
inline void CreateBackupEncryptionConfig::clear_kms_key_name() {
  kms_key_name_.ClearToEmpty();
}
inline const std::string& CreateBackupEncryptionConfig::kms_key_name() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.CreateBackupEncryptionConfig.kms_key_name)
  return _internal_kms_key_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateBackupEncryptionConfig::set_kms_key_name(ArgT0&& arg0, ArgT... args) {
 
 kms_key_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.CreateBackupEncryptionConfig.kms_key_name)
}
inline std::string* CreateBackupEncryptionConfig::mutable_kms_key_name() {
  std::string* _s = _internal_mutable_kms_key_name();
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.CreateBackupEncryptionConfig.kms_key_name)
  return _s;
}
inline const std::string& CreateBackupEncryptionConfig::_internal_kms_key_name() const {
  return kms_key_name_.Get();
}
inline void CreateBackupEncryptionConfig::_internal_set_kms_key_name(const std::string& value) {
  
  kms_key_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateBackupEncryptionConfig::_internal_mutable_kms_key_name() {
  
  return kms_key_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateBackupEncryptionConfig::release_kms_key_name() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.CreateBackupEncryptionConfig.kms_key_name)
  return kms_key_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateBackupEncryptionConfig::set_allocated_kms_key_name(std::string* kms_key_name) {
  if (kms_key_name != nullptr) {
    
  } else {
    
  }
  kms_key_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), kms_key_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (kms_key_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    kms_key_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.CreateBackupEncryptionConfig.kms_key_name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace database
}  // namespace admin
}  // namespace spanner
}  // namespace google

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::google::spanner::admin::database::v1::Backup_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::spanner::admin::database::v1::Backup_State>() {
  return ::google::spanner::admin::database::v1::Backup_State_descriptor();
}
template <> struct is_proto_enum< ::google::spanner::admin::database::v1::CreateBackupEncryptionConfig_EncryptionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::spanner::admin::database::v1::CreateBackupEncryptionConfig_EncryptionType>() {
  return ::google::spanner::admin::database::v1::CreateBackupEncryptionConfig_EncryptionType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fspanner_2fadmin_2fdatabase_2fv1_2fbackup_2eproto
