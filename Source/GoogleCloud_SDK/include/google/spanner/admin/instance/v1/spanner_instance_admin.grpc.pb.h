// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/spanner/admin/instance/v1/spanner_instance_admin.proto
// Original file comments:
// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_google_2fspanner_2fadmin_2finstance_2fv1_2fspanner_5finstance_5fadmin_2eproto__INCLUDED
#define GRPC_google_2fspanner_2fadmin_2finstance_2fv1_2fspanner_5finstance_5fadmin_2eproto__INCLUDED

#include "google/spanner/admin/instance/v1/spanner_instance_admin.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace google {
namespace spanner {
namespace admin {
namespace instance {
namespace v1 {

// Cloud Spanner Instance Admin API
//
// The Cloud Spanner Instance Admin API can be used to create, delete,
// modify and list instances. Instances are dedicated Cloud Spanner serving
// and storage resources to be used by Cloud Spanner databases.
//
// Each instance has a "configuration", which dictates where the
// serving resources for the Cloud Spanner instance are located (e.g.,
// US-central, Europe). Configurations are created by Google based on
// resource availability.
//
// Cloud Spanner billing is based on the instances that exist and their
// sizes. After an instance exists, there are no additional
// per-database or per-operation charges for use of the instance
// (though there may be additional network bandwidth charges).
// Instances offer isolation: problems with databases in one instance
// will not affect other instances. However, within an instance
// databases can affect each other. For example, if one database in an
// instance receives a lot of requests and consumes most of the
// instance resources, fewer resources are available for other
// databases in that instance, and their performance may suffer.
class InstanceAdmin final {
 public:
  static constexpr char const* service_full_name() {
    return "google.spanner.admin.instance.v1.InstanceAdmin";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Lists the supported instance configurations for a given project.
    virtual ::grpc::Status ListInstanceConfigs(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::ListInstanceConfigsRequest& request, ::google::spanner::admin::instance::v1::ListInstanceConfigsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::spanner::admin::instance::v1::ListInstanceConfigsResponse>> AsyncListInstanceConfigs(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::ListInstanceConfigsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::spanner::admin::instance::v1::ListInstanceConfigsResponse>>(AsyncListInstanceConfigsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::spanner::admin::instance::v1::ListInstanceConfigsResponse>> PrepareAsyncListInstanceConfigs(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::ListInstanceConfigsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::spanner::admin::instance::v1::ListInstanceConfigsResponse>>(PrepareAsyncListInstanceConfigsRaw(context, request, cq));
    }
    // Gets information about a particular instance configuration.
    virtual ::grpc::Status GetInstanceConfig(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::GetInstanceConfigRequest& request, ::google::spanner::admin::instance::v1::InstanceConfig* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::spanner::admin::instance::v1::InstanceConfig>> AsyncGetInstanceConfig(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::GetInstanceConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::spanner::admin::instance::v1::InstanceConfig>>(AsyncGetInstanceConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::spanner::admin::instance::v1::InstanceConfig>> PrepareAsyncGetInstanceConfig(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::GetInstanceConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::spanner::admin::instance::v1::InstanceConfig>>(PrepareAsyncGetInstanceConfigRaw(context, request, cq));
    }
    // Creates an instance config and begins preparing it to be used. The
    // returned [long-running operation][google.longrunning.Operation]
    // can be used to track the progress of preparing the new
    // instance config. The instance config name is assigned by the caller. If the
    // named instance config already exists, `CreateInstanceConfig` returns
    // `ALREADY_EXISTS`.
    //
    // Immediately after the request returns:
    //
    //   * The instance config is readable via the API, with all requested
    //     attributes. The instance config's
    //     [reconciling][google.spanner.admin.instance.v1.InstanceConfig.reconciling]
    //     field is set to true. Its state is `CREATING`.
    //
    // While the operation is pending:
    //
    //   * Cancelling the operation renders the instance config immediately
    //     unreadable via the API.
    //   * Except for deleting the creating resource, all other attempts to modify
    //     the instance config are rejected.
    //
    // Upon completion of the returned operation:
    //
    //   * Instances can be created using the instance configuration.
    //   * The instance config's
    //   [reconciling][google.spanner.admin.instance.v1.InstanceConfig.reconciling]
    //   field becomes false. Its state becomes `READY`.
    //
    // The returned [long-running operation][google.longrunning.Operation] will
    // have a name of the format
    // `<instance_config_name>/operations/<operation_id>` and can be used to track
    // creation of the instance config. The
    // [metadata][google.longrunning.Operation.metadata] field type is
    // [CreateInstanceConfigMetadata][google.spanner.admin.instance.v1.CreateInstanceConfigMetadata].
    // The [response][google.longrunning.Operation.response] field type is
    // [InstanceConfig][google.spanner.admin.instance.v1.InstanceConfig], if
    // successful.
    //
    // Authorization requires `spanner.instanceConfigs.create` permission on
    // the resource
    // [parent][google.spanner.admin.instance.v1.CreateInstanceConfigRequest.parent].
    virtual ::grpc::Status CreateInstanceConfig(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::CreateInstanceConfigRequest& request, ::google::longrunning::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> AsyncCreateInstanceConfig(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::CreateInstanceConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(AsyncCreateInstanceConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> PrepareAsyncCreateInstanceConfig(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::CreateInstanceConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(PrepareAsyncCreateInstanceConfigRaw(context, request, cq));
    }
    // Updates an instance config. The returned
    // [long-running operation][google.longrunning.Operation] can be used to track
    // the progress of updating the instance. If the named instance config does
    // not exist, returns `NOT_FOUND`.
    //
    // Only user managed configurations can be updated.
    //
    // Immediately after the request returns:
    //
    //   * The instance config's
    //     [reconciling][google.spanner.admin.instance.v1.InstanceConfig.reconciling]
    //     field is set to true.
    //
    // While the operation is pending:
    //
    //   * Cancelling the operation sets its metadata's
    //     [cancel_time][google.spanner.admin.instance.v1.UpdateInstanceConfigMetadata.cancel_time].
    //     The operation is guaranteed to succeed at undoing all changes, after
    //     which point it terminates with a `CANCELLED` status.
    //   * All other attempts to modify the instance config are rejected.
    //   * Reading the instance config via the API continues to give the
    //     pre-request values.
    //
    // Upon completion of the returned operation:
    //
    //   * Creating instances using the instance configuration uses the new
    //     values.
    //   * The instance config's new values are readable via the API.
    //   * The instance config's
    //   [reconciling][google.spanner.admin.instance.v1.InstanceConfig.reconciling]
    //   field becomes false.
    //
    // The returned [long-running operation][google.longrunning.Operation] will
    // have a name of the format
    // `<instance_config_name>/operations/<operation_id>` and can be used to track
    // the instance config modification.  The
    // [metadata][google.longrunning.Operation.metadata] field type is
    // [UpdateInstanceConfigMetadata][google.spanner.admin.instance.v1.UpdateInstanceConfigMetadata].
    // The [response][google.longrunning.Operation.response] field type is
    // [InstanceConfig][google.spanner.admin.instance.v1.InstanceConfig], if
    // successful.
    //
    // Authorization requires `spanner.instanceConfigs.update` permission on
    // the resource [name][google.spanner.admin.instance.v1.InstanceConfig.name].
    virtual ::grpc::Status UpdateInstanceConfig(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::UpdateInstanceConfigRequest& request, ::google::longrunning::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> AsyncUpdateInstanceConfig(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::UpdateInstanceConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(AsyncUpdateInstanceConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> PrepareAsyncUpdateInstanceConfig(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::UpdateInstanceConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(PrepareAsyncUpdateInstanceConfigRaw(context, request, cq));
    }
    // Deletes the instance config. Deletion is only allowed when no
    // instances are using the configuration. If any instances are using
    // the config, returns `FAILED_PRECONDITION`.
    //
    // Only user managed configurations can be deleted.
    //
    // Authorization requires `spanner.instanceConfigs.delete` permission on
    // the resource [name][google.spanner.admin.instance.v1.InstanceConfig.name].
    virtual ::grpc::Status DeleteInstanceConfig(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::DeleteInstanceConfigRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeleteInstanceConfig(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::DeleteInstanceConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteInstanceConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncDeleteInstanceConfig(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::DeleteInstanceConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncDeleteInstanceConfigRaw(context, request, cq));
    }
    // Lists the user-managed instance config [long-running
    // operations][google.longrunning.Operation] in the given project. An instance
    // config operation has a name of the form
    // `projects/<project>/instanceConfigs/<instance_config>/operations/<operation>`.
    // The long-running operation
    // [metadata][google.longrunning.Operation.metadata] field type
    // `metadata.type_url` describes the type of the metadata. Operations returned
    // include those that have completed/failed/canceled within the last 7 days,
    // and pending operations. Operations returned are ordered by
    // `operation.metadata.value.start_time` in descending order starting
    // from the most recently started operation.
    virtual ::grpc::Status ListInstanceConfigOperations(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::ListInstanceConfigOperationsRequest& request, ::google::spanner::admin::instance::v1::ListInstanceConfigOperationsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::spanner::admin::instance::v1::ListInstanceConfigOperationsResponse>> AsyncListInstanceConfigOperations(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::ListInstanceConfigOperationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::spanner::admin::instance::v1::ListInstanceConfigOperationsResponse>>(AsyncListInstanceConfigOperationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::spanner::admin::instance::v1::ListInstanceConfigOperationsResponse>> PrepareAsyncListInstanceConfigOperations(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::ListInstanceConfigOperationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::spanner::admin::instance::v1::ListInstanceConfigOperationsResponse>>(PrepareAsyncListInstanceConfigOperationsRaw(context, request, cq));
    }
    // Lists all instances in the given project.
    virtual ::grpc::Status ListInstances(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::ListInstancesRequest& request, ::google::spanner::admin::instance::v1::ListInstancesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::spanner::admin::instance::v1::ListInstancesResponse>> AsyncListInstances(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::ListInstancesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::spanner::admin::instance::v1::ListInstancesResponse>>(AsyncListInstancesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::spanner::admin::instance::v1::ListInstancesResponse>> PrepareAsyncListInstances(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::ListInstancesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::spanner::admin::instance::v1::ListInstancesResponse>>(PrepareAsyncListInstancesRaw(context, request, cq));
    }
    // Gets information about a particular instance.
    virtual ::grpc::Status GetInstance(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::GetInstanceRequest& request, ::google::spanner::admin::instance::v1::Instance* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::spanner::admin::instance::v1::Instance>> AsyncGetInstance(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::GetInstanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::spanner::admin::instance::v1::Instance>>(AsyncGetInstanceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::spanner::admin::instance::v1::Instance>> PrepareAsyncGetInstance(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::GetInstanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::spanner::admin::instance::v1::Instance>>(PrepareAsyncGetInstanceRaw(context, request, cq));
    }
    // Creates an instance and begins preparing it to begin serving. The
    // returned [long-running operation][google.longrunning.Operation]
    // can be used to track the progress of preparing the new
    // instance. The instance name is assigned by the caller. If the
    // named instance already exists, `CreateInstance` returns
    // `ALREADY_EXISTS`.
    //
    // Immediately upon completion of this request:
    //
    //   * The instance is readable via the API, with all requested attributes
    //     but no allocated resources. Its state is `CREATING`.
    //
    // Until completion of the returned operation:
    //
    //   * Cancelling the operation renders the instance immediately unreadable
    //     via the API.
    //   * The instance can be deleted.
    //   * All other attempts to modify the instance are rejected.
    //
    // Upon completion of the returned operation:
    //
    //   * Billing for all successfully-allocated resources begins (some types
    //     may have lower than the requested levels).
    //   * Databases can be created in the instance.
    //   * The instance's allocated resource levels are readable via the API.
    //   * The instance's state becomes `READY`.
    //
    // The returned [long-running operation][google.longrunning.Operation] will
    // have a name of the format `<instance_name>/operations/<operation_id>` and
    // can be used to track creation of the instance.  The
    // [metadata][google.longrunning.Operation.metadata] field type is
    // [CreateInstanceMetadata][google.spanner.admin.instance.v1.CreateInstanceMetadata].
    // The [response][google.longrunning.Operation.response] field type is
    // [Instance][google.spanner.admin.instance.v1.Instance], if successful.
    virtual ::grpc::Status CreateInstance(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::CreateInstanceRequest& request, ::google::longrunning::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> AsyncCreateInstance(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::CreateInstanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(AsyncCreateInstanceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> PrepareAsyncCreateInstance(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::CreateInstanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(PrepareAsyncCreateInstanceRaw(context, request, cq));
    }
    // Updates an instance, and begins allocating or releasing resources
    // as requested. The returned [long-running
    // operation][google.longrunning.Operation] can be used to track the
    // progress of updating the instance. If the named instance does not
    // exist, returns `NOT_FOUND`.
    //
    // Immediately upon completion of this request:
    //
    //   * For resource types for which a decrease in the instance's allocation
    //     has been requested, billing is based on the newly-requested level.
    //
    // Until completion of the returned operation:
    //
    //   * Cancelling the operation sets its metadata's
    //     [cancel_time][google.spanner.admin.instance.v1.UpdateInstanceMetadata.cancel_time],
    //     and begins restoring resources to their pre-request values. The
    //     operation is guaranteed to succeed at undoing all resource changes,
    //     after which point it terminates with a `CANCELLED` status.
    //   * All other attempts to modify the instance are rejected.
    //   * Reading the instance via the API continues to give the pre-request
    //     resource levels.
    //
    // Upon completion of the returned operation:
    //
    //   * Billing begins for all successfully-allocated resources (some types
    //     may have lower than the requested levels).
    //   * All newly-reserved resources are available for serving the instance's
    //     tables.
    //   * The instance's new resource levels are readable via the API.
    //
    // The returned [long-running operation][google.longrunning.Operation] will
    // have a name of the format `<instance_name>/operations/<operation_id>` and
    // can be used to track the instance modification.  The
    // [metadata][google.longrunning.Operation.metadata] field type is
    // [UpdateInstanceMetadata][google.spanner.admin.instance.v1.UpdateInstanceMetadata].
    // The [response][google.longrunning.Operation.response] field type is
    // [Instance][google.spanner.admin.instance.v1.Instance], if successful.
    //
    // Authorization requires `spanner.instances.update` permission on
    // the resource [name][google.spanner.admin.instance.v1.Instance.name].
    virtual ::grpc::Status UpdateInstance(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::UpdateInstanceRequest& request, ::google::longrunning::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> AsyncUpdateInstance(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::UpdateInstanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(AsyncUpdateInstanceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> PrepareAsyncUpdateInstance(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::UpdateInstanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(PrepareAsyncUpdateInstanceRaw(context, request, cq));
    }
    // Deletes an instance.
    //
    // Immediately upon completion of the request:
    //
    //   * Billing ceases for all of the instance's reserved resources.
    //
    // Soon afterward:
    //
    //   * The instance and *all of its databases* immediately and
    //     irrevocably disappear from the API. All data in the databases
    //     is permanently deleted.
    virtual ::grpc::Status DeleteInstance(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::DeleteInstanceRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeleteInstance(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::DeleteInstanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteInstanceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncDeleteInstance(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::DeleteInstanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncDeleteInstanceRaw(context, request, cq));
    }
    // Sets the access control policy on an instance resource. Replaces any
    // existing policy.
    //
    // Authorization requires `spanner.instances.setIamPolicy` on
    // [resource][google.iam.v1.SetIamPolicyRequest.resource].
    virtual ::grpc::Status SetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::google::iam::v1::Policy* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>> AsyncSetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>>(AsyncSetIamPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>> PrepareAsyncSetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>>(PrepareAsyncSetIamPolicyRaw(context, request, cq));
    }
    // Gets the access control policy for an instance resource. Returns an empty
    // policy if an instance exists but does not have a policy set.
    //
    // Authorization requires `spanner.instances.getIamPolicy` on
    // [resource][google.iam.v1.GetIamPolicyRequest.resource].
    virtual ::grpc::Status GetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::google::iam::v1::Policy* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>> AsyncGetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>>(AsyncGetIamPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>> PrepareAsyncGetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>>(PrepareAsyncGetIamPolicyRaw(context, request, cq));
    }
    // Returns permissions that the caller has on the specified instance resource.
    //
    // Attempting this RPC on a non-existent Cloud Spanner instance resource will
    // result in a NOT_FOUND error if the user has `spanner.instances.list`
    // permission on the containing Google Cloud Project. Otherwise returns an
    // empty set of permissions.
    virtual ::grpc::Status TestIamPermissions(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::google::iam::v1::TestIamPermissionsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::TestIamPermissionsResponse>> AsyncTestIamPermissions(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::TestIamPermissionsResponse>>(AsyncTestIamPermissionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::TestIamPermissionsResponse>> PrepareAsyncTestIamPermissions(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::TestIamPermissionsResponse>>(PrepareAsyncTestIamPermissionsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Lists the supported instance configurations for a given project.
      virtual void ListInstanceConfigs(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::ListInstanceConfigsRequest* request, ::google::spanner::admin::instance::v1::ListInstanceConfigsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListInstanceConfigs(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::ListInstanceConfigsRequest* request, ::google::spanner::admin::instance::v1::ListInstanceConfigsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Gets information about a particular instance configuration.
      virtual void GetInstanceConfig(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::GetInstanceConfigRequest* request, ::google::spanner::admin::instance::v1::InstanceConfig* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetInstanceConfig(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::GetInstanceConfigRequest* request, ::google::spanner::admin::instance::v1::InstanceConfig* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Creates an instance config and begins preparing it to be used. The
      // returned [long-running operation][google.longrunning.Operation]
      // can be used to track the progress of preparing the new
      // instance config. The instance config name is assigned by the caller. If the
      // named instance config already exists, `CreateInstanceConfig` returns
      // `ALREADY_EXISTS`.
      //
      // Immediately after the request returns:
      //
      //   * The instance config is readable via the API, with all requested
      //     attributes. The instance config's
      //     [reconciling][google.spanner.admin.instance.v1.InstanceConfig.reconciling]
      //     field is set to true. Its state is `CREATING`.
      //
      // While the operation is pending:
      //
      //   * Cancelling the operation renders the instance config immediately
      //     unreadable via the API.
      //   * Except for deleting the creating resource, all other attempts to modify
      //     the instance config are rejected.
      //
      // Upon completion of the returned operation:
      //
      //   * Instances can be created using the instance configuration.
      //   * The instance config's
      //   [reconciling][google.spanner.admin.instance.v1.InstanceConfig.reconciling]
      //   field becomes false. Its state becomes `READY`.
      //
      // The returned [long-running operation][google.longrunning.Operation] will
      // have a name of the format
      // `<instance_config_name>/operations/<operation_id>` and can be used to track
      // creation of the instance config. The
      // [metadata][google.longrunning.Operation.metadata] field type is
      // [CreateInstanceConfigMetadata][google.spanner.admin.instance.v1.CreateInstanceConfigMetadata].
      // The [response][google.longrunning.Operation.response] field type is
      // [InstanceConfig][google.spanner.admin.instance.v1.InstanceConfig], if
      // successful.
      //
      // Authorization requires `spanner.instanceConfigs.create` permission on
      // the resource
      // [parent][google.spanner.admin.instance.v1.CreateInstanceConfigRequest.parent].
      virtual void CreateInstanceConfig(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::CreateInstanceConfigRequest* request, ::google::longrunning::Operation* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateInstanceConfig(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::CreateInstanceConfigRequest* request, ::google::longrunning::Operation* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Updates an instance config. The returned
      // [long-running operation][google.longrunning.Operation] can be used to track
      // the progress of updating the instance. If the named instance config does
      // not exist, returns `NOT_FOUND`.
      //
      // Only user managed configurations can be updated.
      //
      // Immediately after the request returns:
      //
      //   * The instance config's
      //     [reconciling][google.spanner.admin.instance.v1.InstanceConfig.reconciling]
      //     field is set to true.
      //
      // While the operation is pending:
      //
      //   * Cancelling the operation sets its metadata's
      //     [cancel_time][google.spanner.admin.instance.v1.UpdateInstanceConfigMetadata.cancel_time].
      //     The operation is guaranteed to succeed at undoing all changes, after
      //     which point it terminates with a `CANCELLED` status.
      //   * All other attempts to modify the instance config are rejected.
      //   * Reading the instance config via the API continues to give the
      //     pre-request values.
      //
      // Upon completion of the returned operation:
      //
      //   * Creating instances using the instance configuration uses the new
      //     values.
      //   * The instance config's new values are readable via the API.
      //   * The instance config's
      //   [reconciling][google.spanner.admin.instance.v1.InstanceConfig.reconciling]
      //   field becomes false.
      //
      // The returned [long-running operation][google.longrunning.Operation] will
      // have a name of the format
      // `<instance_config_name>/operations/<operation_id>` and can be used to track
      // the instance config modification.  The
      // [metadata][google.longrunning.Operation.metadata] field type is
      // [UpdateInstanceConfigMetadata][google.spanner.admin.instance.v1.UpdateInstanceConfigMetadata].
      // The [response][google.longrunning.Operation.response] field type is
      // [InstanceConfig][google.spanner.admin.instance.v1.InstanceConfig], if
      // successful.
      //
      // Authorization requires `spanner.instanceConfigs.update` permission on
      // the resource [name][google.spanner.admin.instance.v1.InstanceConfig.name].
      virtual void UpdateInstanceConfig(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::UpdateInstanceConfigRequest* request, ::google::longrunning::Operation* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateInstanceConfig(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::UpdateInstanceConfigRequest* request, ::google::longrunning::Operation* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Deletes the instance config. Deletion is only allowed when no
      // instances are using the configuration. If any instances are using
      // the config, returns `FAILED_PRECONDITION`.
      //
      // Only user managed configurations can be deleted.
      //
      // Authorization requires `spanner.instanceConfigs.delete` permission on
      // the resource [name][google.spanner.admin.instance.v1.InstanceConfig.name].
      virtual void DeleteInstanceConfig(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::DeleteInstanceConfigRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteInstanceConfig(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::DeleteInstanceConfigRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Lists the user-managed instance config [long-running
      // operations][google.longrunning.Operation] in the given project. An instance
      // config operation has a name of the form
      // `projects/<project>/instanceConfigs/<instance_config>/operations/<operation>`.
      // The long-running operation
      // [metadata][google.longrunning.Operation.metadata] field type
      // `metadata.type_url` describes the type of the metadata. Operations returned
      // include those that have completed/failed/canceled within the last 7 days,
      // and pending operations. Operations returned are ordered by
      // `operation.metadata.value.start_time` in descending order starting
      // from the most recently started operation.
      virtual void ListInstanceConfigOperations(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::ListInstanceConfigOperationsRequest* request, ::google::spanner::admin::instance::v1::ListInstanceConfigOperationsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListInstanceConfigOperations(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::ListInstanceConfigOperationsRequest* request, ::google::spanner::admin::instance::v1::ListInstanceConfigOperationsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Lists all instances in the given project.
      virtual void ListInstances(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::ListInstancesRequest* request, ::google::spanner::admin::instance::v1::ListInstancesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListInstances(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::ListInstancesRequest* request, ::google::spanner::admin::instance::v1::ListInstancesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Gets information about a particular instance.
      virtual void GetInstance(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::GetInstanceRequest* request, ::google::spanner::admin::instance::v1::Instance* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetInstance(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::GetInstanceRequest* request, ::google::spanner::admin::instance::v1::Instance* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Creates an instance and begins preparing it to begin serving. The
      // returned [long-running operation][google.longrunning.Operation]
      // can be used to track the progress of preparing the new
      // instance. The instance name is assigned by the caller. If the
      // named instance already exists, `CreateInstance` returns
      // `ALREADY_EXISTS`.
      //
      // Immediately upon completion of this request:
      //
      //   * The instance is readable via the API, with all requested attributes
      //     but no allocated resources. Its state is `CREATING`.
      //
      // Until completion of the returned operation:
      //
      //   * Cancelling the operation renders the instance immediately unreadable
      //     via the API.
      //   * The instance can be deleted.
      //   * All other attempts to modify the instance are rejected.
      //
      // Upon completion of the returned operation:
      //
      //   * Billing for all successfully-allocated resources begins (some types
      //     may have lower than the requested levels).
      //   * Databases can be created in the instance.
      //   * The instance's allocated resource levels are readable via the API.
      //   * The instance's state becomes `READY`.
      //
      // The returned [long-running operation][google.longrunning.Operation] will
      // have a name of the format `<instance_name>/operations/<operation_id>` and
      // can be used to track creation of the instance.  The
      // [metadata][google.longrunning.Operation.metadata] field type is
      // [CreateInstanceMetadata][google.spanner.admin.instance.v1.CreateInstanceMetadata].
      // The [response][google.longrunning.Operation.response] field type is
      // [Instance][google.spanner.admin.instance.v1.Instance], if successful.
      virtual void CreateInstance(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::CreateInstanceRequest* request, ::google::longrunning::Operation* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateInstance(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::CreateInstanceRequest* request, ::google::longrunning::Operation* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Updates an instance, and begins allocating or releasing resources
      // as requested. The returned [long-running
      // operation][google.longrunning.Operation] can be used to track the
      // progress of updating the instance. If the named instance does not
      // exist, returns `NOT_FOUND`.
      //
      // Immediately upon completion of this request:
      //
      //   * For resource types for which a decrease in the instance's allocation
      //     has been requested, billing is based on the newly-requested level.
      //
      // Until completion of the returned operation:
      //
      //   * Cancelling the operation sets its metadata's
      //     [cancel_time][google.spanner.admin.instance.v1.UpdateInstanceMetadata.cancel_time],
      //     and begins restoring resources to their pre-request values. The
      //     operation is guaranteed to succeed at undoing all resource changes,
      //     after which point it terminates with a `CANCELLED` status.
      //   * All other attempts to modify the instance are rejected.
      //   * Reading the instance via the API continues to give the pre-request
      //     resource levels.
      //
      // Upon completion of the returned operation:
      //
      //   * Billing begins for all successfully-allocated resources (some types
      //     may have lower than the requested levels).
      //   * All newly-reserved resources are available for serving the instance's
      //     tables.
      //   * The instance's new resource levels are readable via the API.
      //
      // The returned [long-running operation][google.longrunning.Operation] will
      // have a name of the format `<instance_name>/operations/<operation_id>` and
      // can be used to track the instance modification.  The
      // [metadata][google.longrunning.Operation.metadata] field type is
      // [UpdateInstanceMetadata][google.spanner.admin.instance.v1.UpdateInstanceMetadata].
      // The [response][google.longrunning.Operation.response] field type is
      // [Instance][google.spanner.admin.instance.v1.Instance], if successful.
      //
      // Authorization requires `spanner.instances.update` permission on
      // the resource [name][google.spanner.admin.instance.v1.Instance.name].
      virtual void UpdateInstance(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::UpdateInstanceRequest* request, ::google::longrunning::Operation* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateInstance(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::UpdateInstanceRequest* request, ::google::longrunning::Operation* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Deletes an instance.
      //
      // Immediately upon completion of the request:
      //
      //   * Billing ceases for all of the instance's reserved resources.
      //
      // Soon afterward:
      //
      //   * The instance and *all of its databases* immediately and
      //     irrevocably disappear from the API. All data in the databases
      //     is permanently deleted.
      virtual void DeleteInstance(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::DeleteInstanceRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteInstance(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::DeleteInstanceRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Sets the access control policy on an instance resource. Replaces any
      // existing policy.
      //
      // Authorization requires `spanner.instances.setIamPolicy` on
      // [resource][google.iam.v1.SetIamPolicyRequest.resource].
      virtual void SetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest* request, ::google::iam::v1::Policy* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest* request, ::google::iam::v1::Policy* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Gets the access control policy for an instance resource. Returns an empty
      // policy if an instance exists but does not have a policy set.
      //
      // Authorization requires `spanner.instances.getIamPolicy` on
      // [resource][google.iam.v1.GetIamPolicyRequest.resource].
      virtual void GetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest* request, ::google::iam::v1::Policy* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest* request, ::google::iam::v1::Policy* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Returns permissions that the caller has on the specified instance resource.
      //
      // Attempting this RPC on a non-existent Cloud Spanner instance resource will
      // result in a NOT_FOUND error if the user has `spanner.instances.list`
      // permission on the containing Google Cloud Project. Otherwise returns an
      // empty set of permissions.
      virtual void TestIamPermissions(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest* request, ::google::iam::v1::TestIamPermissionsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TestIamPermissions(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest* request, ::google::iam::v1::TestIamPermissionsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::spanner::admin::instance::v1::ListInstanceConfigsResponse>* AsyncListInstanceConfigsRaw(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::ListInstanceConfigsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::spanner::admin::instance::v1::ListInstanceConfigsResponse>* PrepareAsyncListInstanceConfigsRaw(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::ListInstanceConfigsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::spanner::admin::instance::v1::InstanceConfig>* AsyncGetInstanceConfigRaw(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::GetInstanceConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::spanner::admin::instance::v1::InstanceConfig>* PrepareAsyncGetInstanceConfigRaw(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::GetInstanceConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* AsyncCreateInstanceConfigRaw(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::CreateInstanceConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* PrepareAsyncCreateInstanceConfigRaw(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::CreateInstanceConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* AsyncUpdateInstanceConfigRaw(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::UpdateInstanceConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* PrepareAsyncUpdateInstanceConfigRaw(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::UpdateInstanceConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteInstanceConfigRaw(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::DeleteInstanceConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncDeleteInstanceConfigRaw(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::DeleteInstanceConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::spanner::admin::instance::v1::ListInstanceConfigOperationsResponse>* AsyncListInstanceConfigOperationsRaw(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::ListInstanceConfigOperationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::spanner::admin::instance::v1::ListInstanceConfigOperationsResponse>* PrepareAsyncListInstanceConfigOperationsRaw(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::ListInstanceConfigOperationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::spanner::admin::instance::v1::ListInstancesResponse>* AsyncListInstancesRaw(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::ListInstancesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::spanner::admin::instance::v1::ListInstancesResponse>* PrepareAsyncListInstancesRaw(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::ListInstancesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::spanner::admin::instance::v1::Instance>* AsyncGetInstanceRaw(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::GetInstanceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::spanner::admin::instance::v1::Instance>* PrepareAsyncGetInstanceRaw(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::GetInstanceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* AsyncCreateInstanceRaw(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::CreateInstanceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* PrepareAsyncCreateInstanceRaw(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::CreateInstanceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* AsyncUpdateInstanceRaw(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::UpdateInstanceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* PrepareAsyncUpdateInstanceRaw(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::UpdateInstanceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteInstanceRaw(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::DeleteInstanceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncDeleteInstanceRaw(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::DeleteInstanceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>* AsyncSetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>* PrepareAsyncSetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>* AsyncGetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>* PrepareAsyncGetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::TestIamPermissionsResponse>* AsyncTestIamPermissionsRaw(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::TestIamPermissionsResponse>* PrepareAsyncTestIamPermissionsRaw(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status ListInstanceConfigs(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::ListInstanceConfigsRequest& request, ::google::spanner::admin::instance::v1::ListInstanceConfigsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::spanner::admin::instance::v1::ListInstanceConfigsResponse>> AsyncListInstanceConfigs(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::ListInstanceConfigsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::spanner::admin::instance::v1::ListInstanceConfigsResponse>>(AsyncListInstanceConfigsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::spanner::admin::instance::v1::ListInstanceConfigsResponse>> PrepareAsyncListInstanceConfigs(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::ListInstanceConfigsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::spanner::admin::instance::v1::ListInstanceConfigsResponse>>(PrepareAsyncListInstanceConfigsRaw(context, request, cq));
    }
    ::grpc::Status GetInstanceConfig(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::GetInstanceConfigRequest& request, ::google::spanner::admin::instance::v1::InstanceConfig* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::spanner::admin::instance::v1::InstanceConfig>> AsyncGetInstanceConfig(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::GetInstanceConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::spanner::admin::instance::v1::InstanceConfig>>(AsyncGetInstanceConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::spanner::admin::instance::v1::InstanceConfig>> PrepareAsyncGetInstanceConfig(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::GetInstanceConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::spanner::admin::instance::v1::InstanceConfig>>(PrepareAsyncGetInstanceConfigRaw(context, request, cq));
    }
    ::grpc::Status CreateInstanceConfig(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::CreateInstanceConfigRequest& request, ::google::longrunning::Operation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> AsyncCreateInstanceConfig(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::CreateInstanceConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(AsyncCreateInstanceConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> PrepareAsyncCreateInstanceConfig(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::CreateInstanceConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(PrepareAsyncCreateInstanceConfigRaw(context, request, cq));
    }
    ::grpc::Status UpdateInstanceConfig(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::UpdateInstanceConfigRequest& request, ::google::longrunning::Operation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> AsyncUpdateInstanceConfig(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::UpdateInstanceConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(AsyncUpdateInstanceConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> PrepareAsyncUpdateInstanceConfig(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::UpdateInstanceConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(PrepareAsyncUpdateInstanceConfigRaw(context, request, cq));
    }
    ::grpc::Status DeleteInstanceConfig(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::DeleteInstanceConfigRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeleteInstanceConfig(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::DeleteInstanceConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteInstanceConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncDeleteInstanceConfig(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::DeleteInstanceConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncDeleteInstanceConfigRaw(context, request, cq));
    }
    ::grpc::Status ListInstanceConfigOperations(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::ListInstanceConfigOperationsRequest& request, ::google::spanner::admin::instance::v1::ListInstanceConfigOperationsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::spanner::admin::instance::v1::ListInstanceConfigOperationsResponse>> AsyncListInstanceConfigOperations(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::ListInstanceConfigOperationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::spanner::admin::instance::v1::ListInstanceConfigOperationsResponse>>(AsyncListInstanceConfigOperationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::spanner::admin::instance::v1::ListInstanceConfigOperationsResponse>> PrepareAsyncListInstanceConfigOperations(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::ListInstanceConfigOperationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::spanner::admin::instance::v1::ListInstanceConfigOperationsResponse>>(PrepareAsyncListInstanceConfigOperationsRaw(context, request, cq));
    }
    ::grpc::Status ListInstances(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::ListInstancesRequest& request, ::google::spanner::admin::instance::v1::ListInstancesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::spanner::admin::instance::v1::ListInstancesResponse>> AsyncListInstances(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::ListInstancesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::spanner::admin::instance::v1::ListInstancesResponse>>(AsyncListInstancesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::spanner::admin::instance::v1::ListInstancesResponse>> PrepareAsyncListInstances(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::ListInstancesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::spanner::admin::instance::v1::ListInstancesResponse>>(PrepareAsyncListInstancesRaw(context, request, cq));
    }
    ::grpc::Status GetInstance(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::GetInstanceRequest& request, ::google::spanner::admin::instance::v1::Instance* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::spanner::admin::instance::v1::Instance>> AsyncGetInstance(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::GetInstanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::spanner::admin::instance::v1::Instance>>(AsyncGetInstanceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::spanner::admin::instance::v1::Instance>> PrepareAsyncGetInstance(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::GetInstanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::spanner::admin::instance::v1::Instance>>(PrepareAsyncGetInstanceRaw(context, request, cq));
    }
    ::grpc::Status CreateInstance(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::CreateInstanceRequest& request, ::google::longrunning::Operation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> AsyncCreateInstance(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::CreateInstanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(AsyncCreateInstanceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> PrepareAsyncCreateInstance(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::CreateInstanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(PrepareAsyncCreateInstanceRaw(context, request, cq));
    }
    ::grpc::Status UpdateInstance(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::UpdateInstanceRequest& request, ::google::longrunning::Operation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> AsyncUpdateInstance(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::UpdateInstanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(AsyncUpdateInstanceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> PrepareAsyncUpdateInstance(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::UpdateInstanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(PrepareAsyncUpdateInstanceRaw(context, request, cq));
    }
    ::grpc::Status DeleteInstance(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::DeleteInstanceRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeleteInstance(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::DeleteInstanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteInstanceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncDeleteInstance(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::DeleteInstanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncDeleteInstanceRaw(context, request, cq));
    }
    ::grpc::Status SetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::google::iam::v1::Policy* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>> AsyncSetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>>(AsyncSetIamPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>> PrepareAsyncSetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>>(PrepareAsyncSetIamPolicyRaw(context, request, cq));
    }
    ::grpc::Status GetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::google::iam::v1::Policy* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>> AsyncGetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>>(AsyncGetIamPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>> PrepareAsyncGetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>>(PrepareAsyncGetIamPolicyRaw(context, request, cq));
    }
    ::grpc::Status TestIamPermissions(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::google::iam::v1::TestIamPermissionsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::TestIamPermissionsResponse>> AsyncTestIamPermissions(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::TestIamPermissionsResponse>>(AsyncTestIamPermissionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::TestIamPermissionsResponse>> PrepareAsyncTestIamPermissions(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::TestIamPermissionsResponse>>(PrepareAsyncTestIamPermissionsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void ListInstanceConfigs(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::ListInstanceConfigsRequest* request, ::google::spanner::admin::instance::v1::ListInstanceConfigsResponse* response, std::function<void(::grpc::Status)>) override;
      void ListInstanceConfigs(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::ListInstanceConfigsRequest* request, ::google::spanner::admin::instance::v1::ListInstanceConfigsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetInstanceConfig(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::GetInstanceConfigRequest* request, ::google::spanner::admin::instance::v1::InstanceConfig* response, std::function<void(::grpc::Status)>) override;
      void GetInstanceConfig(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::GetInstanceConfigRequest* request, ::google::spanner::admin::instance::v1::InstanceConfig* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateInstanceConfig(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::CreateInstanceConfigRequest* request, ::google::longrunning::Operation* response, std::function<void(::grpc::Status)>) override;
      void CreateInstanceConfig(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::CreateInstanceConfigRequest* request, ::google::longrunning::Operation* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateInstanceConfig(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::UpdateInstanceConfigRequest* request, ::google::longrunning::Operation* response, std::function<void(::grpc::Status)>) override;
      void UpdateInstanceConfig(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::UpdateInstanceConfigRequest* request, ::google::longrunning::Operation* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteInstanceConfig(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::DeleteInstanceConfigRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void DeleteInstanceConfig(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::DeleteInstanceConfigRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListInstanceConfigOperations(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::ListInstanceConfigOperationsRequest* request, ::google::spanner::admin::instance::v1::ListInstanceConfigOperationsResponse* response, std::function<void(::grpc::Status)>) override;
      void ListInstanceConfigOperations(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::ListInstanceConfigOperationsRequest* request, ::google::spanner::admin::instance::v1::ListInstanceConfigOperationsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListInstances(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::ListInstancesRequest* request, ::google::spanner::admin::instance::v1::ListInstancesResponse* response, std::function<void(::grpc::Status)>) override;
      void ListInstances(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::ListInstancesRequest* request, ::google::spanner::admin::instance::v1::ListInstancesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetInstance(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::GetInstanceRequest* request, ::google::spanner::admin::instance::v1::Instance* response, std::function<void(::grpc::Status)>) override;
      void GetInstance(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::GetInstanceRequest* request, ::google::spanner::admin::instance::v1::Instance* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateInstance(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::CreateInstanceRequest* request, ::google::longrunning::Operation* response, std::function<void(::grpc::Status)>) override;
      void CreateInstance(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::CreateInstanceRequest* request, ::google::longrunning::Operation* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateInstance(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::UpdateInstanceRequest* request, ::google::longrunning::Operation* response, std::function<void(::grpc::Status)>) override;
      void UpdateInstance(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::UpdateInstanceRequest* request, ::google::longrunning::Operation* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteInstance(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::DeleteInstanceRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void DeleteInstance(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::DeleteInstanceRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest* request, ::google::iam::v1::Policy* response, std::function<void(::grpc::Status)>) override;
      void SetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest* request, ::google::iam::v1::Policy* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest* request, ::google::iam::v1::Policy* response, std::function<void(::grpc::Status)>) override;
      void GetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest* request, ::google::iam::v1::Policy* response, ::grpc::ClientUnaryReactor* reactor) override;
      void TestIamPermissions(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest* request, ::google::iam::v1::TestIamPermissionsResponse* response, std::function<void(::grpc::Status)>) override;
      void TestIamPermissions(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest* request, ::google::iam::v1::TestIamPermissionsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::google::spanner::admin::instance::v1::ListInstanceConfigsResponse>* AsyncListInstanceConfigsRaw(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::ListInstanceConfigsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::spanner::admin::instance::v1::ListInstanceConfigsResponse>* PrepareAsyncListInstanceConfigsRaw(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::ListInstanceConfigsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::spanner::admin::instance::v1::InstanceConfig>* AsyncGetInstanceConfigRaw(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::GetInstanceConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::spanner::admin::instance::v1::InstanceConfig>* PrepareAsyncGetInstanceConfigRaw(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::GetInstanceConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* AsyncCreateInstanceConfigRaw(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::CreateInstanceConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* PrepareAsyncCreateInstanceConfigRaw(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::CreateInstanceConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* AsyncUpdateInstanceConfigRaw(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::UpdateInstanceConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* PrepareAsyncUpdateInstanceConfigRaw(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::UpdateInstanceConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteInstanceConfigRaw(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::DeleteInstanceConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncDeleteInstanceConfigRaw(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::DeleteInstanceConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::spanner::admin::instance::v1::ListInstanceConfigOperationsResponse>* AsyncListInstanceConfigOperationsRaw(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::ListInstanceConfigOperationsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::spanner::admin::instance::v1::ListInstanceConfigOperationsResponse>* PrepareAsyncListInstanceConfigOperationsRaw(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::ListInstanceConfigOperationsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::spanner::admin::instance::v1::ListInstancesResponse>* AsyncListInstancesRaw(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::ListInstancesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::spanner::admin::instance::v1::ListInstancesResponse>* PrepareAsyncListInstancesRaw(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::ListInstancesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::spanner::admin::instance::v1::Instance>* AsyncGetInstanceRaw(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::GetInstanceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::spanner::admin::instance::v1::Instance>* PrepareAsyncGetInstanceRaw(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::GetInstanceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* AsyncCreateInstanceRaw(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::CreateInstanceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* PrepareAsyncCreateInstanceRaw(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::CreateInstanceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* AsyncUpdateInstanceRaw(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::UpdateInstanceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* PrepareAsyncUpdateInstanceRaw(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::UpdateInstanceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteInstanceRaw(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::DeleteInstanceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncDeleteInstanceRaw(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::DeleteInstanceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>* AsyncSetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>* PrepareAsyncSetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>* AsyncGetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>* PrepareAsyncGetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::v1::TestIamPermissionsResponse>* AsyncTestIamPermissionsRaw(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::v1::TestIamPermissionsResponse>* PrepareAsyncTestIamPermissionsRaw(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ListInstanceConfigs_;
    const ::grpc::internal::RpcMethod rpcmethod_GetInstanceConfig_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateInstanceConfig_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateInstanceConfig_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteInstanceConfig_;
    const ::grpc::internal::RpcMethod rpcmethod_ListInstanceConfigOperations_;
    const ::grpc::internal::RpcMethod rpcmethod_ListInstances_;
    const ::grpc::internal::RpcMethod rpcmethod_GetInstance_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateInstance_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateInstance_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteInstance_;
    const ::grpc::internal::RpcMethod rpcmethod_SetIamPolicy_;
    const ::grpc::internal::RpcMethod rpcmethod_GetIamPolicy_;
    const ::grpc::internal::RpcMethod rpcmethod_TestIamPermissions_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Lists the supported instance configurations for a given project.
    virtual ::grpc::Status ListInstanceConfigs(::grpc::ServerContext* context, const ::google::spanner::admin::instance::v1::ListInstanceConfigsRequest* request, ::google::spanner::admin::instance::v1::ListInstanceConfigsResponse* response);
    // Gets information about a particular instance configuration.
    virtual ::grpc::Status GetInstanceConfig(::grpc::ServerContext* context, const ::google::spanner::admin::instance::v1::GetInstanceConfigRequest* request, ::google::spanner::admin::instance::v1::InstanceConfig* response);
    // Creates an instance config and begins preparing it to be used. The
    // returned [long-running operation][google.longrunning.Operation]
    // can be used to track the progress of preparing the new
    // instance config. The instance config name is assigned by the caller. If the
    // named instance config already exists, `CreateInstanceConfig` returns
    // `ALREADY_EXISTS`.
    //
    // Immediately after the request returns:
    //
    //   * The instance config is readable via the API, with all requested
    //     attributes. The instance config's
    //     [reconciling][google.spanner.admin.instance.v1.InstanceConfig.reconciling]
    //     field is set to true. Its state is `CREATING`.
    //
    // While the operation is pending:
    //
    //   * Cancelling the operation renders the instance config immediately
    //     unreadable via the API.
    //   * Except for deleting the creating resource, all other attempts to modify
    //     the instance config are rejected.
    //
    // Upon completion of the returned operation:
    //
    //   * Instances can be created using the instance configuration.
    //   * The instance config's
    //   [reconciling][google.spanner.admin.instance.v1.InstanceConfig.reconciling]
    //   field becomes false. Its state becomes `READY`.
    //
    // The returned [long-running operation][google.longrunning.Operation] will
    // have a name of the format
    // `<instance_config_name>/operations/<operation_id>` and can be used to track
    // creation of the instance config. The
    // [metadata][google.longrunning.Operation.metadata] field type is
    // [CreateInstanceConfigMetadata][google.spanner.admin.instance.v1.CreateInstanceConfigMetadata].
    // The [response][google.longrunning.Operation.response] field type is
    // [InstanceConfig][google.spanner.admin.instance.v1.InstanceConfig], if
    // successful.
    //
    // Authorization requires `spanner.instanceConfigs.create` permission on
    // the resource
    // [parent][google.spanner.admin.instance.v1.CreateInstanceConfigRequest.parent].
    virtual ::grpc::Status CreateInstanceConfig(::grpc::ServerContext* context, const ::google::spanner::admin::instance::v1::CreateInstanceConfigRequest* request, ::google::longrunning::Operation* response);
    // Updates an instance config. The returned
    // [long-running operation][google.longrunning.Operation] can be used to track
    // the progress of updating the instance. If the named instance config does
    // not exist, returns `NOT_FOUND`.
    //
    // Only user managed configurations can be updated.
    //
    // Immediately after the request returns:
    //
    //   * The instance config's
    //     [reconciling][google.spanner.admin.instance.v1.InstanceConfig.reconciling]
    //     field is set to true.
    //
    // While the operation is pending:
    //
    //   * Cancelling the operation sets its metadata's
    //     [cancel_time][google.spanner.admin.instance.v1.UpdateInstanceConfigMetadata.cancel_time].
    //     The operation is guaranteed to succeed at undoing all changes, after
    //     which point it terminates with a `CANCELLED` status.
    //   * All other attempts to modify the instance config are rejected.
    //   * Reading the instance config via the API continues to give the
    //     pre-request values.
    //
    // Upon completion of the returned operation:
    //
    //   * Creating instances using the instance configuration uses the new
    //     values.
    //   * The instance config's new values are readable via the API.
    //   * The instance config's
    //   [reconciling][google.spanner.admin.instance.v1.InstanceConfig.reconciling]
    //   field becomes false.
    //
    // The returned [long-running operation][google.longrunning.Operation] will
    // have a name of the format
    // `<instance_config_name>/operations/<operation_id>` and can be used to track
    // the instance config modification.  The
    // [metadata][google.longrunning.Operation.metadata] field type is
    // [UpdateInstanceConfigMetadata][google.spanner.admin.instance.v1.UpdateInstanceConfigMetadata].
    // The [response][google.longrunning.Operation.response] field type is
    // [InstanceConfig][google.spanner.admin.instance.v1.InstanceConfig], if
    // successful.
    //
    // Authorization requires `spanner.instanceConfigs.update` permission on
    // the resource [name][google.spanner.admin.instance.v1.InstanceConfig.name].
    virtual ::grpc::Status UpdateInstanceConfig(::grpc::ServerContext* context, const ::google::spanner::admin::instance::v1::UpdateInstanceConfigRequest* request, ::google::longrunning::Operation* response);
    // Deletes the instance config. Deletion is only allowed when no
    // instances are using the configuration. If any instances are using
    // the config, returns `FAILED_PRECONDITION`.
    //
    // Only user managed configurations can be deleted.
    //
    // Authorization requires `spanner.instanceConfigs.delete` permission on
    // the resource [name][google.spanner.admin.instance.v1.InstanceConfig.name].
    virtual ::grpc::Status DeleteInstanceConfig(::grpc::ServerContext* context, const ::google::spanner::admin::instance::v1::DeleteInstanceConfigRequest* request, ::google::protobuf::Empty* response);
    // Lists the user-managed instance config [long-running
    // operations][google.longrunning.Operation] in the given project. An instance
    // config operation has a name of the form
    // `projects/<project>/instanceConfigs/<instance_config>/operations/<operation>`.
    // The long-running operation
    // [metadata][google.longrunning.Operation.metadata] field type
    // `metadata.type_url` describes the type of the metadata. Operations returned
    // include those that have completed/failed/canceled within the last 7 days,
    // and pending operations. Operations returned are ordered by
    // `operation.metadata.value.start_time` in descending order starting
    // from the most recently started operation.
    virtual ::grpc::Status ListInstanceConfigOperations(::grpc::ServerContext* context, const ::google::spanner::admin::instance::v1::ListInstanceConfigOperationsRequest* request, ::google::spanner::admin::instance::v1::ListInstanceConfigOperationsResponse* response);
    // Lists all instances in the given project.
    virtual ::grpc::Status ListInstances(::grpc::ServerContext* context, const ::google::spanner::admin::instance::v1::ListInstancesRequest* request, ::google::spanner::admin::instance::v1::ListInstancesResponse* response);
    // Gets information about a particular instance.
    virtual ::grpc::Status GetInstance(::grpc::ServerContext* context, const ::google::spanner::admin::instance::v1::GetInstanceRequest* request, ::google::spanner::admin::instance::v1::Instance* response);
    // Creates an instance and begins preparing it to begin serving. The
    // returned [long-running operation][google.longrunning.Operation]
    // can be used to track the progress of preparing the new
    // instance. The instance name is assigned by the caller. If the
    // named instance already exists, `CreateInstance` returns
    // `ALREADY_EXISTS`.
    //
    // Immediately upon completion of this request:
    //
    //   * The instance is readable via the API, with all requested attributes
    //     but no allocated resources. Its state is `CREATING`.
    //
    // Until completion of the returned operation:
    //
    //   * Cancelling the operation renders the instance immediately unreadable
    //     via the API.
    //   * The instance can be deleted.
    //   * All other attempts to modify the instance are rejected.
    //
    // Upon completion of the returned operation:
    //
    //   * Billing for all successfully-allocated resources begins (some types
    //     may have lower than the requested levels).
    //   * Databases can be created in the instance.
    //   * The instance's allocated resource levels are readable via the API.
    //   * The instance's state becomes `READY`.
    //
    // The returned [long-running operation][google.longrunning.Operation] will
    // have a name of the format `<instance_name>/operations/<operation_id>` and
    // can be used to track creation of the instance.  The
    // [metadata][google.longrunning.Operation.metadata] field type is
    // [CreateInstanceMetadata][google.spanner.admin.instance.v1.CreateInstanceMetadata].
    // The [response][google.longrunning.Operation.response] field type is
    // [Instance][google.spanner.admin.instance.v1.Instance], if successful.
    virtual ::grpc::Status CreateInstance(::grpc::ServerContext* context, const ::google::spanner::admin::instance::v1::CreateInstanceRequest* request, ::google::longrunning::Operation* response);
    // Updates an instance, and begins allocating or releasing resources
    // as requested. The returned [long-running
    // operation][google.longrunning.Operation] can be used to track the
    // progress of updating the instance. If the named instance does not
    // exist, returns `NOT_FOUND`.
    //
    // Immediately upon completion of this request:
    //
    //   * For resource types for which a decrease in the instance's allocation
    //     has been requested, billing is based on the newly-requested level.
    //
    // Until completion of the returned operation:
    //
    //   * Cancelling the operation sets its metadata's
    //     [cancel_time][google.spanner.admin.instance.v1.UpdateInstanceMetadata.cancel_time],
    //     and begins restoring resources to their pre-request values. The
    //     operation is guaranteed to succeed at undoing all resource changes,
    //     after which point it terminates with a `CANCELLED` status.
    //   * All other attempts to modify the instance are rejected.
    //   * Reading the instance via the API continues to give the pre-request
    //     resource levels.
    //
    // Upon completion of the returned operation:
    //
    //   * Billing begins for all successfully-allocated resources (some types
    //     may have lower than the requested levels).
    //   * All newly-reserved resources are available for serving the instance's
    //     tables.
    //   * The instance's new resource levels are readable via the API.
    //
    // The returned [long-running operation][google.longrunning.Operation] will
    // have a name of the format `<instance_name>/operations/<operation_id>` and
    // can be used to track the instance modification.  The
    // [metadata][google.longrunning.Operation.metadata] field type is
    // [UpdateInstanceMetadata][google.spanner.admin.instance.v1.UpdateInstanceMetadata].
    // The [response][google.longrunning.Operation.response] field type is
    // [Instance][google.spanner.admin.instance.v1.Instance], if successful.
    //
    // Authorization requires `spanner.instances.update` permission on
    // the resource [name][google.spanner.admin.instance.v1.Instance.name].
    virtual ::grpc::Status UpdateInstance(::grpc::ServerContext* context, const ::google::spanner::admin::instance::v1::UpdateInstanceRequest* request, ::google::longrunning::Operation* response);
    // Deletes an instance.
    //
    // Immediately upon completion of the request:
    //
    //   * Billing ceases for all of the instance's reserved resources.
    //
    // Soon afterward:
    //
    //   * The instance and *all of its databases* immediately and
    //     irrevocably disappear from the API. All data in the databases
    //     is permanently deleted.
    virtual ::grpc::Status DeleteInstance(::grpc::ServerContext* context, const ::google::spanner::admin::instance::v1::DeleteInstanceRequest* request, ::google::protobuf::Empty* response);
    // Sets the access control policy on an instance resource. Replaces any
    // existing policy.
    //
    // Authorization requires `spanner.instances.setIamPolicy` on
    // [resource][google.iam.v1.SetIamPolicyRequest.resource].
    virtual ::grpc::Status SetIamPolicy(::grpc::ServerContext* context, const ::google::iam::v1::SetIamPolicyRequest* request, ::google::iam::v1::Policy* response);
    // Gets the access control policy for an instance resource. Returns an empty
    // policy if an instance exists but does not have a policy set.
    //
    // Authorization requires `spanner.instances.getIamPolicy` on
    // [resource][google.iam.v1.GetIamPolicyRequest.resource].
    virtual ::grpc::Status GetIamPolicy(::grpc::ServerContext* context, const ::google::iam::v1::GetIamPolicyRequest* request, ::google::iam::v1::Policy* response);
    // Returns permissions that the caller has on the specified instance resource.
    //
    // Attempting this RPC on a non-existent Cloud Spanner instance resource will
    // result in a NOT_FOUND error if the user has `spanner.instances.list`
    // permission on the containing Google Cloud Project. Otherwise returns an
    // empty set of permissions.
    virtual ::grpc::Status TestIamPermissions(::grpc::ServerContext* context, const ::google::iam::v1::TestIamPermissionsRequest* request, ::google::iam::v1::TestIamPermissionsResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ListInstanceConfigs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListInstanceConfigs() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ListInstanceConfigs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListInstanceConfigs(::grpc::ServerContext* /*context*/, const ::google::spanner::admin::instance::v1::ListInstanceConfigsRequest* /*request*/, ::google::spanner::admin::instance::v1::ListInstanceConfigsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListInstanceConfigs(::grpc::ServerContext* context, ::google::spanner::admin::instance::v1::ListInstanceConfigsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::spanner::admin::instance::v1::ListInstanceConfigsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetInstanceConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetInstanceConfig() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetInstanceConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInstanceConfig(::grpc::ServerContext* /*context*/, const ::google::spanner::admin::instance::v1::GetInstanceConfigRequest* /*request*/, ::google::spanner::admin::instance::v1::InstanceConfig* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetInstanceConfig(::grpc::ServerContext* context, ::google::spanner::admin::instance::v1::GetInstanceConfigRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::spanner::admin::instance::v1::InstanceConfig>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateInstanceConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateInstanceConfig() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_CreateInstanceConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateInstanceConfig(::grpc::ServerContext* /*context*/, const ::google::spanner::admin::instance::v1::CreateInstanceConfigRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateInstanceConfig(::grpc::ServerContext* context, ::google::spanner::admin::instance::v1::CreateInstanceConfigRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::longrunning::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateInstanceConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateInstanceConfig() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_UpdateInstanceConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateInstanceConfig(::grpc::ServerContext* /*context*/, const ::google::spanner::admin::instance::v1::UpdateInstanceConfigRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateInstanceConfig(::grpc::ServerContext* context, ::google::spanner::admin::instance::v1::UpdateInstanceConfigRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::longrunning::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteInstanceConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteInstanceConfig() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_DeleteInstanceConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteInstanceConfig(::grpc::ServerContext* /*context*/, const ::google::spanner::admin::instance::v1::DeleteInstanceConfigRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteInstanceConfig(::grpc::ServerContext* context, ::google::spanner::admin::instance::v1::DeleteInstanceConfigRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListInstanceConfigOperations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListInstanceConfigOperations() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_ListInstanceConfigOperations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListInstanceConfigOperations(::grpc::ServerContext* /*context*/, const ::google::spanner::admin::instance::v1::ListInstanceConfigOperationsRequest* /*request*/, ::google::spanner::admin::instance::v1::ListInstanceConfigOperationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListInstanceConfigOperations(::grpc::ServerContext* context, ::google::spanner::admin::instance::v1::ListInstanceConfigOperationsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::spanner::admin::instance::v1::ListInstanceConfigOperationsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListInstances : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListInstances() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_ListInstances() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListInstances(::grpc::ServerContext* /*context*/, const ::google::spanner::admin::instance::v1::ListInstancesRequest* /*request*/, ::google::spanner::admin::instance::v1::ListInstancesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListInstances(::grpc::ServerContext* context, ::google::spanner::admin::instance::v1::ListInstancesRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::spanner::admin::instance::v1::ListInstancesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetInstance() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_GetInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInstance(::grpc::ServerContext* /*context*/, const ::google::spanner::admin::instance::v1::GetInstanceRequest* /*request*/, ::google::spanner::admin::instance::v1::Instance* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetInstance(::grpc::ServerContext* context, ::google::spanner::admin::instance::v1::GetInstanceRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::spanner::admin::instance::v1::Instance>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateInstance() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_CreateInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateInstance(::grpc::ServerContext* /*context*/, const ::google::spanner::admin::instance::v1::CreateInstanceRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateInstance(::grpc::ServerContext* context, ::google::spanner::admin::instance::v1::CreateInstanceRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::longrunning::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateInstance() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_UpdateInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateInstance(::grpc::ServerContext* /*context*/, const ::google::spanner::admin::instance::v1::UpdateInstanceRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateInstance(::grpc::ServerContext* context, ::google::spanner::admin::instance::v1::UpdateInstanceRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::longrunning::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteInstance() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_DeleteInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteInstance(::grpc::ServerContext* /*context*/, const ::google::spanner::admin::instance::v1::DeleteInstanceRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteInstance(::grpc::ServerContext* context, ::google::spanner::admin::instance::v1::DeleteInstanceRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetIamPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetIamPolicy() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_SetIamPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetIamPolicy(::grpc::ServerContext* /*context*/, const ::google::iam::v1::SetIamPolicyRequest* /*request*/, ::google::iam::v1::Policy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetIamPolicy(::grpc::ServerContext* context, ::google::iam::v1::SetIamPolicyRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::iam::v1::Policy>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetIamPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetIamPolicy() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_GetIamPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIamPolicy(::grpc::ServerContext* /*context*/, const ::google::iam::v1::GetIamPolicyRequest* /*request*/, ::google::iam::v1::Policy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetIamPolicy(::grpc::ServerContext* context, ::google::iam::v1::GetIamPolicyRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::iam::v1::Policy>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TestIamPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TestIamPermissions() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_TestIamPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestIamPermissions(::grpc::ServerContext* /*context*/, const ::google::iam::v1::TestIamPermissionsRequest* /*request*/, ::google::iam::v1::TestIamPermissionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTestIamPermissions(::grpc::ServerContext* context, ::google::iam::v1::TestIamPermissionsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::iam::v1::TestIamPermissionsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ListInstanceConfigs<WithAsyncMethod_GetInstanceConfig<WithAsyncMethod_CreateInstanceConfig<WithAsyncMethod_UpdateInstanceConfig<WithAsyncMethod_DeleteInstanceConfig<WithAsyncMethod_ListInstanceConfigOperations<WithAsyncMethod_ListInstances<WithAsyncMethod_GetInstance<WithAsyncMethod_CreateInstance<WithAsyncMethod_UpdateInstance<WithAsyncMethod_DeleteInstance<WithAsyncMethod_SetIamPolicy<WithAsyncMethod_GetIamPolicy<WithAsyncMethod_TestIamPermissions<Service > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_ListInstanceConfigs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListInstanceConfigs() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::google::spanner::admin::instance::v1::ListInstanceConfigsRequest, ::google::spanner::admin::instance::v1::ListInstanceConfigsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::spanner::admin::instance::v1::ListInstanceConfigsRequest* request, ::google::spanner::admin::instance::v1::ListInstanceConfigsResponse* response) { return this->ListInstanceConfigs(context, request, response); }));}
    void SetMessageAllocatorFor_ListInstanceConfigs(
        ::grpc::MessageAllocator< ::google::spanner::admin::instance::v1::ListInstanceConfigsRequest, ::google::spanner::admin::instance::v1::ListInstanceConfigsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::spanner::admin::instance::v1::ListInstanceConfigsRequest, ::google::spanner::admin::instance::v1::ListInstanceConfigsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListInstanceConfigs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListInstanceConfigs(::grpc::ServerContext* /*context*/, const ::google::spanner::admin::instance::v1::ListInstanceConfigsRequest* /*request*/, ::google::spanner::admin::instance::v1::ListInstanceConfigsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListInstanceConfigs(
      ::grpc::CallbackServerContext* /*context*/, const ::google::spanner::admin::instance::v1::ListInstanceConfigsRequest* /*request*/, ::google::spanner::admin::instance::v1::ListInstanceConfigsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetInstanceConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetInstanceConfig() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::google::spanner::admin::instance::v1::GetInstanceConfigRequest, ::google::spanner::admin::instance::v1::InstanceConfig>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::spanner::admin::instance::v1::GetInstanceConfigRequest* request, ::google::spanner::admin::instance::v1::InstanceConfig* response) { return this->GetInstanceConfig(context, request, response); }));}
    void SetMessageAllocatorFor_GetInstanceConfig(
        ::grpc::MessageAllocator< ::google::spanner::admin::instance::v1::GetInstanceConfigRequest, ::google::spanner::admin::instance::v1::InstanceConfig>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::spanner::admin::instance::v1::GetInstanceConfigRequest, ::google::spanner::admin::instance::v1::InstanceConfig>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetInstanceConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInstanceConfig(::grpc::ServerContext* /*context*/, const ::google::spanner::admin::instance::v1::GetInstanceConfigRequest* /*request*/, ::google::spanner::admin::instance::v1::InstanceConfig* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetInstanceConfig(
      ::grpc::CallbackServerContext* /*context*/, const ::google::spanner::admin::instance::v1::GetInstanceConfigRequest* /*request*/, ::google::spanner::admin::instance::v1::InstanceConfig* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateInstanceConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateInstanceConfig() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::google::spanner::admin::instance::v1::CreateInstanceConfigRequest, ::google::longrunning::Operation>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::spanner::admin::instance::v1::CreateInstanceConfigRequest* request, ::google::longrunning::Operation* response) { return this->CreateInstanceConfig(context, request, response); }));}
    void SetMessageAllocatorFor_CreateInstanceConfig(
        ::grpc::MessageAllocator< ::google::spanner::admin::instance::v1::CreateInstanceConfigRequest, ::google::longrunning::Operation>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::spanner::admin::instance::v1::CreateInstanceConfigRequest, ::google::longrunning::Operation>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateInstanceConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateInstanceConfig(::grpc::ServerContext* /*context*/, const ::google::spanner::admin::instance::v1::CreateInstanceConfigRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateInstanceConfig(
      ::grpc::CallbackServerContext* /*context*/, const ::google::spanner::admin::instance::v1::CreateInstanceConfigRequest* /*request*/, ::google::longrunning::Operation* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateInstanceConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateInstanceConfig() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::google::spanner::admin::instance::v1::UpdateInstanceConfigRequest, ::google::longrunning::Operation>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::spanner::admin::instance::v1::UpdateInstanceConfigRequest* request, ::google::longrunning::Operation* response) { return this->UpdateInstanceConfig(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateInstanceConfig(
        ::grpc::MessageAllocator< ::google::spanner::admin::instance::v1::UpdateInstanceConfigRequest, ::google::longrunning::Operation>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::spanner::admin::instance::v1::UpdateInstanceConfigRequest, ::google::longrunning::Operation>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateInstanceConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateInstanceConfig(::grpc::ServerContext* /*context*/, const ::google::spanner::admin::instance::v1::UpdateInstanceConfigRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateInstanceConfig(
      ::grpc::CallbackServerContext* /*context*/, const ::google::spanner::admin::instance::v1::UpdateInstanceConfigRequest* /*request*/, ::google::longrunning::Operation* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteInstanceConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteInstanceConfig() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::google::spanner::admin::instance::v1::DeleteInstanceConfigRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::spanner::admin::instance::v1::DeleteInstanceConfigRequest* request, ::google::protobuf::Empty* response) { return this->DeleteInstanceConfig(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteInstanceConfig(
        ::grpc::MessageAllocator< ::google::spanner::admin::instance::v1::DeleteInstanceConfigRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::spanner::admin::instance::v1::DeleteInstanceConfigRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteInstanceConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteInstanceConfig(::grpc::ServerContext* /*context*/, const ::google::spanner::admin::instance::v1::DeleteInstanceConfigRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteInstanceConfig(
      ::grpc::CallbackServerContext* /*context*/, const ::google::spanner::admin::instance::v1::DeleteInstanceConfigRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListInstanceConfigOperations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListInstanceConfigOperations() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::google::spanner::admin::instance::v1::ListInstanceConfigOperationsRequest, ::google::spanner::admin::instance::v1::ListInstanceConfigOperationsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::spanner::admin::instance::v1::ListInstanceConfigOperationsRequest* request, ::google::spanner::admin::instance::v1::ListInstanceConfigOperationsResponse* response) { return this->ListInstanceConfigOperations(context, request, response); }));}
    void SetMessageAllocatorFor_ListInstanceConfigOperations(
        ::grpc::MessageAllocator< ::google::spanner::admin::instance::v1::ListInstanceConfigOperationsRequest, ::google::spanner::admin::instance::v1::ListInstanceConfigOperationsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::spanner::admin::instance::v1::ListInstanceConfigOperationsRequest, ::google::spanner::admin::instance::v1::ListInstanceConfigOperationsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListInstanceConfigOperations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListInstanceConfigOperations(::grpc::ServerContext* /*context*/, const ::google::spanner::admin::instance::v1::ListInstanceConfigOperationsRequest* /*request*/, ::google::spanner::admin::instance::v1::ListInstanceConfigOperationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListInstanceConfigOperations(
      ::grpc::CallbackServerContext* /*context*/, const ::google::spanner::admin::instance::v1::ListInstanceConfigOperationsRequest* /*request*/, ::google::spanner::admin::instance::v1::ListInstanceConfigOperationsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListInstances : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListInstances() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::google::spanner::admin::instance::v1::ListInstancesRequest, ::google::spanner::admin::instance::v1::ListInstancesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::spanner::admin::instance::v1::ListInstancesRequest* request, ::google::spanner::admin::instance::v1::ListInstancesResponse* response) { return this->ListInstances(context, request, response); }));}
    void SetMessageAllocatorFor_ListInstances(
        ::grpc::MessageAllocator< ::google::spanner::admin::instance::v1::ListInstancesRequest, ::google::spanner::admin::instance::v1::ListInstancesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::spanner::admin::instance::v1::ListInstancesRequest, ::google::spanner::admin::instance::v1::ListInstancesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListInstances() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListInstances(::grpc::ServerContext* /*context*/, const ::google::spanner::admin::instance::v1::ListInstancesRequest* /*request*/, ::google::spanner::admin::instance::v1::ListInstancesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListInstances(
      ::grpc::CallbackServerContext* /*context*/, const ::google::spanner::admin::instance::v1::ListInstancesRequest* /*request*/, ::google::spanner::admin::instance::v1::ListInstancesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetInstance() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::google::spanner::admin::instance::v1::GetInstanceRequest, ::google::spanner::admin::instance::v1::Instance>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::spanner::admin::instance::v1::GetInstanceRequest* request, ::google::spanner::admin::instance::v1::Instance* response) { return this->GetInstance(context, request, response); }));}
    void SetMessageAllocatorFor_GetInstance(
        ::grpc::MessageAllocator< ::google::spanner::admin::instance::v1::GetInstanceRequest, ::google::spanner::admin::instance::v1::Instance>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::spanner::admin::instance::v1::GetInstanceRequest, ::google::spanner::admin::instance::v1::Instance>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInstance(::grpc::ServerContext* /*context*/, const ::google::spanner::admin::instance::v1::GetInstanceRequest* /*request*/, ::google::spanner::admin::instance::v1::Instance* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetInstance(
      ::grpc::CallbackServerContext* /*context*/, const ::google::spanner::admin::instance::v1::GetInstanceRequest* /*request*/, ::google::spanner::admin::instance::v1::Instance* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateInstance() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::google::spanner::admin::instance::v1::CreateInstanceRequest, ::google::longrunning::Operation>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::spanner::admin::instance::v1::CreateInstanceRequest* request, ::google::longrunning::Operation* response) { return this->CreateInstance(context, request, response); }));}
    void SetMessageAllocatorFor_CreateInstance(
        ::grpc::MessageAllocator< ::google::spanner::admin::instance::v1::CreateInstanceRequest, ::google::longrunning::Operation>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::spanner::admin::instance::v1::CreateInstanceRequest, ::google::longrunning::Operation>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateInstance(::grpc::ServerContext* /*context*/, const ::google::spanner::admin::instance::v1::CreateInstanceRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateInstance(
      ::grpc::CallbackServerContext* /*context*/, const ::google::spanner::admin::instance::v1::CreateInstanceRequest* /*request*/, ::google::longrunning::Operation* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateInstance() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::google::spanner::admin::instance::v1::UpdateInstanceRequest, ::google::longrunning::Operation>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::spanner::admin::instance::v1::UpdateInstanceRequest* request, ::google::longrunning::Operation* response) { return this->UpdateInstance(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateInstance(
        ::grpc::MessageAllocator< ::google::spanner::admin::instance::v1::UpdateInstanceRequest, ::google::longrunning::Operation>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::spanner::admin::instance::v1::UpdateInstanceRequest, ::google::longrunning::Operation>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateInstance(::grpc::ServerContext* /*context*/, const ::google::spanner::admin::instance::v1::UpdateInstanceRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateInstance(
      ::grpc::CallbackServerContext* /*context*/, const ::google::spanner::admin::instance::v1::UpdateInstanceRequest* /*request*/, ::google::longrunning::Operation* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteInstance() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::google::spanner::admin::instance::v1::DeleteInstanceRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::spanner::admin::instance::v1::DeleteInstanceRequest* request, ::google::protobuf::Empty* response) { return this->DeleteInstance(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteInstance(
        ::grpc::MessageAllocator< ::google::spanner::admin::instance::v1::DeleteInstanceRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::spanner::admin::instance::v1::DeleteInstanceRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteInstance(::grpc::ServerContext* /*context*/, const ::google::spanner::admin::instance::v1::DeleteInstanceRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteInstance(
      ::grpc::CallbackServerContext* /*context*/, const ::google::spanner::admin::instance::v1::DeleteInstanceRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetIamPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetIamPolicy() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::google::iam::v1::SetIamPolicyRequest, ::google::iam::v1::Policy>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::iam::v1::SetIamPolicyRequest* request, ::google::iam::v1::Policy* response) { return this->SetIamPolicy(context, request, response); }));}
    void SetMessageAllocatorFor_SetIamPolicy(
        ::grpc::MessageAllocator< ::google::iam::v1::SetIamPolicyRequest, ::google::iam::v1::Policy>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::iam::v1::SetIamPolicyRequest, ::google::iam::v1::Policy>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetIamPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetIamPolicy(::grpc::ServerContext* /*context*/, const ::google::iam::v1::SetIamPolicyRequest* /*request*/, ::google::iam::v1::Policy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetIamPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::google::iam::v1::SetIamPolicyRequest* /*request*/, ::google::iam::v1::Policy* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetIamPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetIamPolicy() {
      ::grpc::Service::MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::google::iam::v1::GetIamPolicyRequest, ::google::iam::v1::Policy>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::iam::v1::GetIamPolicyRequest* request, ::google::iam::v1::Policy* response) { return this->GetIamPolicy(context, request, response); }));}
    void SetMessageAllocatorFor_GetIamPolicy(
        ::grpc::MessageAllocator< ::google::iam::v1::GetIamPolicyRequest, ::google::iam::v1::Policy>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::iam::v1::GetIamPolicyRequest, ::google::iam::v1::Policy>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetIamPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIamPolicy(::grpc::ServerContext* /*context*/, const ::google::iam::v1::GetIamPolicyRequest* /*request*/, ::google::iam::v1::Policy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetIamPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::google::iam::v1::GetIamPolicyRequest* /*request*/, ::google::iam::v1::Policy* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_TestIamPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_TestIamPermissions() {
      ::grpc::Service::MarkMethodCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::google::iam::v1::TestIamPermissionsRequest, ::google::iam::v1::TestIamPermissionsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::iam::v1::TestIamPermissionsRequest* request, ::google::iam::v1::TestIamPermissionsResponse* response) { return this->TestIamPermissions(context, request, response); }));}
    void SetMessageAllocatorFor_TestIamPermissions(
        ::grpc::MessageAllocator< ::google::iam::v1::TestIamPermissionsRequest, ::google::iam::v1::TestIamPermissionsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::iam::v1::TestIamPermissionsRequest, ::google::iam::v1::TestIamPermissionsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_TestIamPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestIamPermissions(::grpc::ServerContext* /*context*/, const ::google::iam::v1::TestIamPermissionsRequest* /*request*/, ::google::iam::v1::TestIamPermissionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TestIamPermissions(
      ::grpc::CallbackServerContext* /*context*/, const ::google::iam::v1::TestIamPermissionsRequest* /*request*/, ::google::iam::v1::TestIamPermissionsResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_ListInstanceConfigs<WithCallbackMethod_GetInstanceConfig<WithCallbackMethod_CreateInstanceConfig<WithCallbackMethod_UpdateInstanceConfig<WithCallbackMethod_DeleteInstanceConfig<WithCallbackMethod_ListInstanceConfigOperations<WithCallbackMethod_ListInstances<WithCallbackMethod_GetInstance<WithCallbackMethod_CreateInstance<WithCallbackMethod_UpdateInstance<WithCallbackMethod_DeleteInstance<WithCallbackMethod_SetIamPolicy<WithCallbackMethod_GetIamPolicy<WithCallbackMethod_TestIamPermissions<Service > > > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ListInstanceConfigs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListInstanceConfigs() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ListInstanceConfigs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListInstanceConfigs(::grpc::ServerContext* /*context*/, const ::google::spanner::admin::instance::v1::ListInstanceConfigsRequest* /*request*/, ::google::spanner::admin::instance::v1::ListInstanceConfigsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetInstanceConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetInstanceConfig() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetInstanceConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInstanceConfig(::grpc::ServerContext* /*context*/, const ::google::spanner::admin::instance::v1::GetInstanceConfigRequest* /*request*/, ::google::spanner::admin::instance::v1::InstanceConfig* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateInstanceConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateInstanceConfig() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_CreateInstanceConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateInstanceConfig(::grpc::ServerContext* /*context*/, const ::google::spanner::admin::instance::v1::CreateInstanceConfigRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateInstanceConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateInstanceConfig() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_UpdateInstanceConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateInstanceConfig(::grpc::ServerContext* /*context*/, const ::google::spanner::admin::instance::v1::UpdateInstanceConfigRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteInstanceConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteInstanceConfig() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_DeleteInstanceConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteInstanceConfig(::grpc::ServerContext* /*context*/, const ::google::spanner::admin::instance::v1::DeleteInstanceConfigRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListInstanceConfigOperations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListInstanceConfigOperations() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_ListInstanceConfigOperations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListInstanceConfigOperations(::grpc::ServerContext* /*context*/, const ::google::spanner::admin::instance::v1::ListInstanceConfigOperationsRequest* /*request*/, ::google::spanner::admin::instance::v1::ListInstanceConfigOperationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListInstances : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListInstances() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_ListInstances() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListInstances(::grpc::ServerContext* /*context*/, const ::google::spanner::admin::instance::v1::ListInstancesRequest* /*request*/, ::google::spanner::admin::instance::v1::ListInstancesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetInstance() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_GetInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInstance(::grpc::ServerContext* /*context*/, const ::google::spanner::admin::instance::v1::GetInstanceRequest* /*request*/, ::google::spanner::admin::instance::v1::Instance* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateInstance() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_CreateInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateInstance(::grpc::ServerContext* /*context*/, const ::google::spanner::admin::instance::v1::CreateInstanceRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateInstance() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_UpdateInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateInstance(::grpc::ServerContext* /*context*/, const ::google::spanner::admin::instance::v1::UpdateInstanceRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteInstance() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_DeleteInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteInstance(::grpc::ServerContext* /*context*/, const ::google::spanner::admin::instance::v1::DeleteInstanceRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetIamPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetIamPolicy() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_SetIamPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetIamPolicy(::grpc::ServerContext* /*context*/, const ::google::iam::v1::SetIamPolicyRequest* /*request*/, ::google::iam::v1::Policy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetIamPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetIamPolicy() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_GetIamPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIamPolicy(::grpc::ServerContext* /*context*/, const ::google::iam::v1::GetIamPolicyRequest* /*request*/, ::google::iam::v1::Policy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TestIamPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TestIamPermissions() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_TestIamPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestIamPermissions(::grpc::ServerContext* /*context*/, const ::google::iam::v1::TestIamPermissionsRequest* /*request*/, ::google::iam::v1::TestIamPermissionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListInstanceConfigs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListInstanceConfigs() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ListInstanceConfigs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListInstanceConfigs(::grpc::ServerContext* /*context*/, const ::google::spanner::admin::instance::v1::ListInstanceConfigsRequest* /*request*/, ::google::spanner::admin::instance::v1::ListInstanceConfigsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListInstanceConfigs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetInstanceConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetInstanceConfig() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetInstanceConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInstanceConfig(::grpc::ServerContext* /*context*/, const ::google::spanner::admin::instance::v1::GetInstanceConfigRequest* /*request*/, ::google::spanner::admin::instance::v1::InstanceConfig* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetInstanceConfig(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateInstanceConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateInstanceConfig() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_CreateInstanceConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateInstanceConfig(::grpc::ServerContext* /*context*/, const ::google::spanner::admin::instance::v1::CreateInstanceConfigRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateInstanceConfig(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateInstanceConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateInstanceConfig() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_UpdateInstanceConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateInstanceConfig(::grpc::ServerContext* /*context*/, const ::google::spanner::admin::instance::v1::UpdateInstanceConfigRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateInstanceConfig(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteInstanceConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteInstanceConfig() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_DeleteInstanceConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteInstanceConfig(::grpc::ServerContext* /*context*/, const ::google::spanner::admin::instance::v1::DeleteInstanceConfigRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteInstanceConfig(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListInstanceConfigOperations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListInstanceConfigOperations() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_ListInstanceConfigOperations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListInstanceConfigOperations(::grpc::ServerContext* /*context*/, const ::google::spanner::admin::instance::v1::ListInstanceConfigOperationsRequest* /*request*/, ::google::spanner::admin::instance::v1::ListInstanceConfigOperationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListInstanceConfigOperations(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListInstances : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListInstances() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_ListInstances() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListInstances(::grpc::ServerContext* /*context*/, const ::google::spanner::admin::instance::v1::ListInstancesRequest* /*request*/, ::google::spanner::admin::instance::v1::ListInstancesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListInstances(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetInstance() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_GetInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInstance(::grpc::ServerContext* /*context*/, const ::google::spanner::admin::instance::v1::GetInstanceRequest* /*request*/, ::google::spanner::admin::instance::v1::Instance* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetInstance(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateInstance() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_CreateInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateInstance(::grpc::ServerContext* /*context*/, const ::google::spanner::admin::instance::v1::CreateInstanceRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateInstance(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateInstance() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_UpdateInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateInstance(::grpc::ServerContext* /*context*/, const ::google::spanner::admin::instance::v1::UpdateInstanceRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateInstance(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteInstance() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_DeleteInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteInstance(::grpc::ServerContext* /*context*/, const ::google::spanner::admin::instance::v1::DeleteInstanceRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteInstance(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetIamPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetIamPolicy() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_SetIamPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetIamPolicy(::grpc::ServerContext* /*context*/, const ::google::iam::v1::SetIamPolicyRequest* /*request*/, ::google::iam::v1::Policy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetIamPolicy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetIamPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetIamPolicy() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_GetIamPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIamPolicy(::grpc::ServerContext* /*context*/, const ::google::iam::v1::GetIamPolicyRequest* /*request*/, ::google::iam::v1::Policy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetIamPolicy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TestIamPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TestIamPermissions() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_TestIamPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestIamPermissions(::grpc::ServerContext* /*context*/, const ::google::iam::v1::TestIamPermissionsRequest* /*request*/, ::google::iam::v1::TestIamPermissionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTestIamPermissions(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListInstanceConfigs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListInstanceConfigs() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListInstanceConfigs(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListInstanceConfigs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListInstanceConfigs(::grpc::ServerContext* /*context*/, const ::google::spanner::admin::instance::v1::ListInstanceConfigsRequest* /*request*/, ::google::spanner::admin::instance::v1::ListInstanceConfigsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListInstanceConfigs(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetInstanceConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetInstanceConfig() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetInstanceConfig(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetInstanceConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInstanceConfig(::grpc::ServerContext* /*context*/, const ::google::spanner::admin::instance::v1::GetInstanceConfigRequest* /*request*/, ::google::spanner::admin::instance::v1::InstanceConfig* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetInstanceConfig(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateInstanceConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateInstanceConfig() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateInstanceConfig(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateInstanceConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateInstanceConfig(::grpc::ServerContext* /*context*/, const ::google::spanner::admin::instance::v1::CreateInstanceConfigRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateInstanceConfig(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateInstanceConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateInstanceConfig() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateInstanceConfig(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateInstanceConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateInstanceConfig(::grpc::ServerContext* /*context*/, const ::google::spanner::admin::instance::v1::UpdateInstanceConfigRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateInstanceConfig(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteInstanceConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteInstanceConfig() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteInstanceConfig(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteInstanceConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteInstanceConfig(::grpc::ServerContext* /*context*/, const ::google::spanner::admin::instance::v1::DeleteInstanceConfigRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteInstanceConfig(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListInstanceConfigOperations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListInstanceConfigOperations() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListInstanceConfigOperations(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListInstanceConfigOperations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListInstanceConfigOperations(::grpc::ServerContext* /*context*/, const ::google::spanner::admin::instance::v1::ListInstanceConfigOperationsRequest* /*request*/, ::google::spanner::admin::instance::v1::ListInstanceConfigOperationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListInstanceConfigOperations(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListInstances : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListInstances() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListInstances(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListInstances() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListInstances(::grpc::ServerContext* /*context*/, const ::google::spanner::admin::instance::v1::ListInstancesRequest* /*request*/, ::google::spanner::admin::instance::v1::ListInstancesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListInstances(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetInstance() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetInstance(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInstance(::grpc::ServerContext* /*context*/, const ::google::spanner::admin::instance::v1::GetInstanceRequest* /*request*/, ::google::spanner::admin::instance::v1::Instance* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetInstance(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateInstance() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateInstance(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateInstance(::grpc::ServerContext* /*context*/, const ::google::spanner::admin::instance::v1::CreateInstanceRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateInstance(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateInstance() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateInstance(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateInstance(::grpc::ServerContext* /*context*/, const ::google::spanner::admin::instance::v1::UpdateInstanceRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateInstance(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteInstance() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteInstance(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteInstance(::grpc::ServerContext* /*context*/, const ::google::spanner::admin::instance::v1::DeleteInstanceRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteInstance(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetIamPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetIamPolicy() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetIamPolicy(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetIamPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetIamPolicy(::grpc::ServerContext* /*context*/, const ::google::iam::v1::SetIamPolicyRequest* /*request*/, ::google::iam::v1::Policy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetIamPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetIamPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetIamPolicy() {
      ::grpc::Service::MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetIamPolicy(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetIamPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIamPolicy(::grpc::ServerContext* /*context*/, const ::google::iam::v1::GetIamPolicyRequest* /*request*/, ::google::iam::v1::Policy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetIamPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_TestIamPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_TestIamPermissions() {
      ::grpc::Service::MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TestIamPermissions(context, request, response); }));
    }
    ~WithRawCallbackMethod_TestIamPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestIamPermissions(::grpc::ServerContext* /*context*/, const ::google::iam::v1::TestIamPermissionsRequest* /*request*/, ::google::iam::v1::TestIamPermissionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TestIamPermissions(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListInstanceConfigs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListInstanceConfigs() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::spanner::admin::instance::v1::ListInstanceConfigsRequest, ::google::spanner::admin::instance::v1::ListInstanceConfigsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::spanner::admin::instance::v1::ListInstanceConfigsRequest, ::google::spanner::admin::instance::v1::ListInstanceConfigsResponse>* streamer) {
                       return this->StreamedListInstanceConfigs(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListInstanceConfigs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListInstanceConfigs(::grpc::ServerContext* /*context*/, const ::google::spanner::admin::instance::v1::ListInstanceConfigsRequest* /*request*/, ::google::spanner::admin::instance::v1::ListInstanceConfigsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListInstanceConfigs(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::spanner::admin::instance::v1::ListInstanceConfigsRequest,::google::spanner::admin::instance::v1::ListInstanceConfigsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetInstanceConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetInstanceConfig() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::spanner::admin::instance::v1::GetInstanceConfigRequest, ::google::spanner::admin::instance::v1::InstanceConfig>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::spanner::admin::instance::v1::GetInstanceConfigRequest, ::google::spanner::admin::instance::v1::InstanceConfig>* streamer) {
                       return this->StreamedGetInstanceConfig(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetInstanceConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetInstanceConfig(::grpc::ServerContext* /*context*/, const ::google::spanner::admin::instance::v1::GetInstanceConfigRequest* /*request*/, ::google::spanner::admin::instance::v1::InstanceConfig* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetInstanceConfig(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::spanner::admin::instance::v1::GetInstanceConfigRequest,::google::spanner::admin::instance::v1::InstanceConfig>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateInstanceConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateInstanceConfig() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::spanner::admin::instance::v1::CreateInstanceConfigRequest, ::google::longrunning::Operation>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::spanner::admin::instance::v1::CreateInstanceConfigRequest, ::google::longrunning::Operation>* streamer) {
                       return this->StreamedCreateInstanceConfig(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateInstanceConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateInstanceConfig(::grpc::ServerContext* /*context*/, const ::google::spanner::admin::instance::v1::CreateInstanceConfigRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateInstanceConfig(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::spanner::admin::instance::v1::CreateInstanceConfigRequest,::google::longrunning::Operation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateInstanceConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateInstanceConfig() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::spanner::admin::instance::v1::UpdateInstanceConfigRequest, ::google::longrunning::Operation>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::spanner::admin::instance::v1::UpdateInstanceConfigRequest, ::google::longrunning::Operation>* streamer) {
                       return this->StreamedUpdateInstanceConfig(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateInstanceConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateInstanceConfig(::grpc::ServerContext* /*context*/, const ::google::spanner::admin::instance::v1::UpdateInstanceConfigRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateInstanceConfig(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::spanner::admin::instance::v1::UpdateInstanceConfigRequest,::google::longrunning::Operation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteInstanceConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteInstanceConfig() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::spanner::admin::instance::v1::DeleteInstanceConfigRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::spanner::admin::instance::v1::DeleteInstanceConfigRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedDeleteInstanceConfig(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteInstanceConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteInstanceConfig(::grpc::ServerContext* /*context*/, const ::google::spanner::admin::instance::v1::DeleteInstanceConfigRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteInstanceConfig(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::spanner::admin::instance::v1::DeleteInstanceConfigRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListInstanceConfigOperations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListInstanceConfigOperations() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::spanner::admin::instance::v1::ListInstanceConfigOperationsRequest, ::google::spanner::admin::instance::v1::ListInstanceConfigOperationsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::spanner::admin::instance::v1::ListInstanceConfigOperationsRequest, ::google::spanner::admin::instance::v1::ListInstanceConfigOperationsResponse>* streamer) {
                       return this->StreamedListInstanceConfigOperations(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListInstanceConfigOperations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListInstanceConfigOperations(::grpc::ServerContext* /*context*/, const ::google::spanner::admin::instance::v1::ListInstanceConfigOperationsRequest* /*request*/, ::google::spanner::admin::instance::v1::ListInstanceConfigOperationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListInstanceConfigOperations(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::spanner::admin::instance::v1::ListInstanceConfigOperationsRequest,::google::spanner::admin::instance::v1::ListInstanceConfigOperationsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListInstances : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListInstances() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::spanner::admin::instance::v1::ListInstancesRequest, ::google::spanner::admin::instance::v1::ListInstancesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::spanner::admin::instance::v1::ListInstancesRequest, ::google::spanner::admin::instance::v1::ListInstancesResponse>* streamer) {
                       return this->StreamedListInstances(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListInstances() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListInstances(::grpc::ServerContext* /*context*/, const ::google::spanner::admin::instance::v1::ListInstancesRequest* /*request*/, ::google::spanner::admin::instance::v1::ListInstancesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListInstances(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::spanner::admin::instance::v1::ListInstancesRequest,::google::spanner::admin::instance::v1::ListInstancesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetInstance() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::spanner::admin::instance::v1::GetInstanceRequest, ::google::spanner::admin::instance::v1::Instance>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::spanner::admin::instance::v1::GetInstanceRequest, ::google::spanner::admin::instance::v1::Instance>* streamer) {
                       return this->StreamedGetInstance(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetInstance(::grpc::ServerContext* /*context*/, const ::google::spanner::admin::instance::v1::GetInstanceRequest* /*request*/, ::google::spanner::admin::instance::v1::Instance* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetInstance(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::spanner::admin::instance::v1::GetInstanceRequest,::google::spanner::admin::instance::v1::Instance>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateInstance() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::spanner::admin::instance::v1::CreateInstanceRequest, ::google::longrunning::Operation>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::spanner::admin::instance::v1::CreateInstanceRequest, ::google::longrunning::Operation>* streamer) {
                       return this->StreamedCreateInstance(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateInstance(::grpc::ServerContext* /*context*/, const ::google::spanner::admin::instance::v1::CreateInstanceRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateInstance(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::spanner::admin::instance::v1::CreateInstanceRequest,::google::longrunning::Operation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateInstance() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::spanner::admin::instance::v1::UpdateInstanceRequest, ::google::longrunning::Operation>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::spanner::admin::instance::v1::UpdateInstanceRequest, ::google::longrunning::Operation>* streamer) {
                       return this->StreamedUpdateInstance(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateInstance(::grpc::ServerContext* /*context*/, const ::google::spanner::admin::instance::v1::UpdateInstanceRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateInstance(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::spanner::admin::instance::v1::UpdateInstanceRequest,::google::longrunning::Operation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteInstance() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::spanner::admin::instance::v1::DeleteInstanceRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::spanner::admin::instance::v1::DeleteInstanceRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedDeleteInstance(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteInstance(::grpc::ServerContext* /*context*/, const ::google::spanner::admin::instance::v1::DeleteInstanceRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteInstance(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::spanner::admin::instance::v1::DeleteInstanceRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetIamPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetIamPolicy() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::iam::v1::SetIamPolicyRequest, ::google::iam::v1::Policy>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::iam::v1::SetIamPolicyRequest, ::google::iam::v1::Policy>* streamer) {
                       return this->StreamedSetIamPolicy(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetIamPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetIamPolicy(::grpc::ServerContext* /*context*/, const ::google::iam::v1::SetIamPolicyRequest* /*request*/, ::google::iam::v1::Policy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetIamPolicy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::iam::v1::SetIamPolicyRequest,::google::iam::v1::Policy>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetIamPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetIamPolicy() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::iam::v1::GetIamPolicyRequest, ::google::iam::v1::Policy>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::iam::v1::GetIamPolicyRequest, ::google::iam::v1::Policy>* streamer) {
                       return this->StreamedGetIamPolicy(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetIamPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetIamPolicy(::grpc::ServerContext* /*context*/, const ::google::iam::v1::GetIamPolicyRequest* /*request*/, ::google::iam::v1::Policy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetIamPolicy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::iam::v1::GetIamPolicyRequest,::google::iam::v1::Policy>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TestIamPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TestIamPermissions() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::iam::v1::TestIamPermissionsRequest, ::google::iam::v1::TestIamPermissionsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::iam::v1::TestIamPermissionsRequest, ::google::iam::v1::TestIamPermissionsResponse>* streamer) {
                       return this->StreamedTestIamPermissions(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TestIamPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TestIamPermissions(::grpc::ServerContext* /*context*/, const ::google::iam::v1::TestIamPermissionsRequest* /*request*/, ::google::iam::v1::TestIamPermissionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTestIamPermissions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::iam::v1::TestIamPermissionsRequest,::google::iam::v1::TestIamPermissionsResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ListInstanceConfigs<WithStreamedUnaryMethod_GetInstanceConfig<WithStreamedUnaryMethod_CreateInstanceConfig<WithStreamedUnaryMethod_UpdateInstanceConfig<WithStreamedUnaryMethod_DeleteInstanceConfig<WithStreamedUnaryMethod_ListInstanceConfigOperations<WithStreamedUnaryMethod_ListInstances<WithStreamedUnaryMethod_GetInstance<WithStreamedUnaryMethod_CreateInstance<WithStreamedUnaryMethod_UpdateInstance<WithStreamedUnaryMethod_DeleteInstance<WithStreamedUnaryMethod_SetIamPolicy<WithStreamedUnaryMethod_GetIamPolicy<WithStreamedUnaryMethod_TestIamPermissions<Service > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ListInstanceConfigs<WithStreamedUnaryMethod_GetInstanceConfig<WithStreamedUnaryMethod_CreateInstanceConfig<WithStreamedUnaryMethod_UpdateInstanceConfig<WithStreamedUnaryMethod_DeleteInstanceConfig<WithStreamedUnaryMethod_ListInstanceConfigOperations<WithStreamedUnaryMethod_ListInstances<WithStreamedUnaryMethod_GetInstance<WithStreamedUnaryMethod_CreateInstance<WithStreamedUnaryMethod_UpdateInstance<WithStreamedUnaryMethod_DeleteInstance<WithStreamedUnaryMethod_SetIamPolicy<WithStreamedUnaryMethod_GetIamPolicy<WithStreamedUnaryMethod_TestIamPermissions<Service > > > > > > > > > > > > > > StreamedService;
};

}  // namespace v1
}  // namespace instance
}  // namespace admin
}  // namespace spanner
}  // namespace google


#endif  // GRPC_google_2fspanner_2fadmin_2finstance_2fv1_2fspanner_5finstance_5fadmin_2eproto__INCLUDED
