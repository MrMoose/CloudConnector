// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/spanner/v1/transaction.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fspanner_2fv1_2ftransaction_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fspanner_2fv1_2ftransaction_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fspanner_2fv1_2ftransaction_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fspanner_2fv1_2ftransaction_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fspanner_2fv1_2ftransaction_2eproto;
namespace google {
namespace spanner {
namespace v1 {
class Transaction;
struct TransactionDefaultTypeInternal;
extern TransactionDefaultTypeInternal _Transaction_default_instance_;
class TransactionOptions;
struct TransactionOptionsDefaultTypeInternal;
extern TransactionOptionsDefaultTypeInternal _TransactionOptions_default_instance_;
class TransactionOptions_PartitionedDml;
struct TransactionOptions_PartitionedDmlDefaultTypeInternal;
extern TransactionOptions_PartitionedDmlDefaultTypeInternal _TransactionOptions_PartitionedDml_default_instance_;
class TransactionOptions_ReadOnly;
struct TransactionOptions_ReadOnlyDefaultTypeInternal;
extern TransactionOptions_ReadOnlyDefaultTypeInternal _TransactionOptions_ReadOnly_default_instance_;
class TransactionOptions_ReadWrite;
struct TransactionOptions_ReadWriteDefaultTypeInternal;
extern TransactionOptions_ReadWriteDefaultTypeInternal _TransactionOptions_ReadWrite_default_instance_;
class TransactionSelector;
struct TransactionSelectorDefaultTypeInternal;
extern TransactionSelectorDefaultTypeInternal _TransactionSelector_default_instance_;
}  // namespace v1
}  // namespace spanner
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::spanner::v1::Transaction* Arena::CreateMaybeMessage<::google::spanner::v1::Transaction>(Arena*);
template<> ::google::spanner::v1::TransactionOptions* Arena::CreateMaybeMessage<::google::spanner::v1::TransactionOptions>(Arena*);
template<> ::google::spanner::v1::TransactionOptions_PartitionedDml* Arena::CreateMaybeMessage<::google::spanner::v1::TransactionOptions_PartitionedDml>(Arena*);
template<> ::google::spanner::v1::TransactionOptions_ReadOnly* Arena::CreateMaybeMessage<::google::spanner::v1::TransactionOptions_ReadOnly>(Arena*);
template<> ::google::spanner::v1::TransactionOptions_ReadWrite* Arena::CreateMaybeMessage<::google::spanner::v1::TransactionOptions_ReadWrite>(Arena*);
template<> ::google::spanner::v1::TransactionSelector* Arena::CreateMaybeMessage<::google::spanner::v1::TransactionSelector>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace spanner {
namespace v1 {

// ===================================================================

class TransactionOptions_ReadWrite final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:google.spanner.v1.TransactionOptions.ReadWrite) */ {
 public:
  inline TransactionOptions_ReadWrite() : TransactionOptions_ReadWrite(nullptr) {}
  explicit PROTOBUF_CONSTEXPR TransactionOptions_ReadWrite(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransactionOptions_ReadWrite(const TransactionOptions_ReadWrite& from);
  TransactionOptions_ReadWrite(TransactionOptions_ReadWrite&& from) noexcept
    : TransactionOptions_ReadWrite() {
    *this = ::std::move(from);
  }

  inline TransactionOptions_ReadWrite& operator=(const TransactionOptions_ReadWrite& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionOptions_ReadWrite& operator=(TransactionOptions_ReadWrite&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransactionOptions_ReadWrite& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransactionOptions_ReadWrite* internal_default_instance() {
    return reinterpret_cast<const TransactionOptions_ReadWrite*>(
               &_TransactionOptions_ReadWrite_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TransactionOptions_ReadWrite& a, TransactionOptions_ReadWrite& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionOptions_ReadWrite* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionOptions_ReadWrite* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransactionOptions_ReadWrite* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransactionOptions_ReadWrite>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const TransactionOptions_ReadWrite& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const TransactionOptions_ReadWrite& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.spanner.v1.TransactionOptions.ReadWrite";
  }
  protected:
  explicit TransactionOptions_ReadWrite(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:google.spanner.v1.TransactionOptions.ReadWrite)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_google_2fspanner_2fv1_2ftransaction_2eproto;
};
// -------------------------------------------------------------------

class TransactionOptions_PartitionedDml final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:google.spanner.v1.TransactionOptions.PartitionedDml) */ {
 public:
  inline TransactionOptions_PartitionedDml() : TransactionOptions_PartitionedDml(nullptr) {}
  explicit PROTOBUF_CONSTEXPR TransactionOptions_PartitionedDml(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransactionOptions_PartitionedDml(const TransactionOptions_PartitionedDml& from);
  TransactionOptions_PartitionedDml(TransactionOptions_PartitionedDml&& from) noexcept
    : TransactionOptions_PartitionedDml() {
    *this = ::std::move(from);
  }

  inline TransactionOptions_PartitionedDml& operator=(const TransactionOptions_PartitionedDml& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionOptions_PartitionedDml& operator=(TransactionOptions_PartitionedDml&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransactionOptions_PartitionedDml& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransactionOptions_PartitionedDml* internal_default_instance() {
    return reinterpret_cast<const TransactionOptions_PartitionedDml*>(
               &_TransactionOptions_PartitionedDml_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TransactionOptions_PartitionedDml& a, TransactionOptions_PartitionedDml& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionOptions_PartitionedDml* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionOptions_PartitionedDml* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransactionOptions_PartitionedDml* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransactionOptions_PartitionedDml>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const TransactionOptions_PartitionedDml& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const TransactionOptions_PartitionedDml& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.spanner.v1.TransactionOptions.PartitionedDml";
  }
  protected:
  explicit TransactionOptions_PartitionedDml(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:google.spanner.v1.TransactionOptions.PartitionedDml)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_google_2fspanner_2fv1_2ftransaction_2eproto;
};
// -------------------------------------------------------------------

class TransactionOptions_ReadOnly final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.spanner.v1.TransactionOptions.ReadOnly) */ {
 public:
  inline TransactionOptions_ReadOnly() : TransactionOptions_ReadOnly(nullptr) {}
  ~TransactionOptions_ReadOnly() override;
  explicit PROTOBUF_CONSTEXPR TransactionOptions_ReadOnly(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransactionOptions_ReadOnly(const TransactionOptions_ReadOnly& from);
  TransactionOptions_ReadOnly(TransactionOptions_ReadOnly&& from) noexcept
    : TransactionOptions_ReadOnly() {
    *this = ::std::move(from);
  }

  inline TransactionOptions_ReadOnly& operator=(const TransactionOptions_ReadOnly& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionOptions_ReadOnly& operator=(TransactionOptions_ReadOnly&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransactionOptions_ReadOnly& default_instance() {
    return *internal_default_instance();
  }
  enum TimestampBoundCase {
    kStrong = 1,
    kMinReadTimestamp = 2,
    kMaxStaleness = 3,
    kReadTimestamp = 4,
    kExactStaleness = 5,
    TIMESTAMP_BOUND_NOT_SET = 0,
  };

  static inline const TransactionOptions_ReadOnly* internal_default_instance() {
    return reinterpret_cast<const TransactionOptions_ReadOnly*>(
               &_TransactionOptions_ReadOnly_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TransactionOptions_ReadOnly& a, TransactionOptions_ReadOnly& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionOptions_ReadOnly* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionOptions_ReadOnly* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransactionOptions_ReadOnly* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransactionOptions_ReadOnly>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransactionOptions_ReadOnly& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransactionOptions_ReadOnly& from) {
    TransactionOptions_ReadOnly::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionOptions_ReadOnly* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.spanner.v1.TransactionOptions.ReadOnly";
  }
  protected:
  explicit TransactionOptions_ReadOnly(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReturnReadTimestampFieldNumber = 6,
    kStrongFieldNumber = 1,
    kMinReadTimestampFieldNumber = 2,
    kMaxStalenessFieldNumber = 3,
    kReadTimestampFieldNumber = 4,
    kExactStalenessFieldNumber = 5,
  };
  // bool return_read_timestamp = 6;
  void clear_return_read_timestamp();
  bool return_read_timestamp() const;
  void set_return_read_timestamp(bool value);
  private:
  bool _internal_return_read_timestamp() const;
  void _internal_set_return_read_timestamp(bool value);
  public:

  // bool strong = 1;
  bool has_strong() const;
  private:
  bool _internal_has_strong() const;
  public:
  void clear_strong();
  bool strong() const;
  void set_strong(bool value);
  private:
  bool _internal_strong() const;
  void _internal_set_strong(bool value);
  public:

  // .google.protobuf.Timestamp min_read_timestamp = 2;
  bool has_min_read_timestamp() const;
  private:
  bool _internal_has_min_read_timestamp() const;
  public:
  void clear_min_read_timestamp();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& min_read_timestamp() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_min_read_timestamp();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_min_read_timestamp();
  void set_allocated_min_read_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* min_read_timestamp);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_min_read_timestamp() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_min_read_timestamp();
  public:
  void unsafe_arena_set_allocated_min_read_timestamp(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* min_read_timestamp);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_min_read_timestamp();

  // .google.protobuf.Duration max_staleness = 3;
  bool has_max_staleness() const;
  private:
  bool _internal_has_max_staleness() const;
  public:
  void clear_max_staleness();
  const ::PROTOBUF_NAMESPACE_ID::Duration& max_staleness() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_max_staleness();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_max_staleness();
  void set_allocated_max_staleness(::PROTOBUF_NAMESPACE_ID::Duration* max_staleness);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_max_staleness() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_max_staleness();
  public:
  void unsafe_arena_set_allocated_max_staleness(
      ::PROTOBUF_NAMESPACE_ID::Duration* max_staleness);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_max_staleness();

  // .google.protobuf.Timestamp read_timestamp = 4;
  bool has_read_timestamp() const;
  private:
  bool _internal_has_read_timestamp() const;
  public:
  void clear_read_timestamp();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& read_timestamp() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_read_timestamp();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_read_timestamp();
  void set_allocated_read_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* read_timestamp);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_read_timestamp() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_read_timestamp();
  public:
  void unsafe_arena_set_allocated_read_timestamp(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* read_timestamp);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_read_timestamp();

  // .google.protobuf.Duration exact_staleness = 5;
  bool has_exact_staleness() const;
  private:
  bool _internal_has_exact_staleness() const;
  public:
  void clear_exact_staleness();
  const ::PROTOBUF_NAMESPACE_ID::Duration& exact_staleness() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_exact_staleness();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_exact_staleness();
  void set_allocated_exact_staleness(::PROTOBUF_NAMESPACE_ID::Duration* exact_staleness);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_exact_staleness() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_exact_staleness();
  public:
  void unsafe_arena_set_allocated_exact_staleness(
      ::PROTOBUF_NAMESPACE_ID::Duration* exact_staleness);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_exact_staleness();

  void clear_timestamp_bound();
  TimestampBoundCase timestamp_bound_case() const;
  // @@protoc_insertion_point(class_scope:google.spanner.v1.TransactionOptions.ReadOnly)
 private:
  class _Internal;
  void set_has_strong();
  void set_has_min_read_timestamp();
  void set_has_max_staleness();
  void set_has_read_timestamp();
  void set_has_exact_staleness();

  inline bool has_timestamp_bound() const;
  inline void clear_has_timestamp_bound();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool return_read_timestamp_;
    union TimestampBoundUnion {
      constexpr TimestampBoundUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      bool strong_;
      ::PROTOBUF_NAMESPACE_ID::Timestamp* min_read_timestamp_;
      ::PROTOBUF_NAMESPACE_ID::Duration* max_staleness_;
      ::PROTOBUF_NAMESPACE_ID::Timestamp* read_timestamp_;
      ::PROTOBUF_NAMESPACE_ID::Duration* exact_staleness_;
    } timestamp_bound_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fspanner_2fv1_2ftransaction_2eproto;
};
// -------------------------------------------------------------------

class TransactionOptions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.spanner.v1.TransactionOptions) */ {
 public:
  inline TransactionOptions() : TransactionOptions(nullptr) {}
  ~TransactionOptions() override;
  explicit PROTOBUF_CONSTEXPR TransactionOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransactionOptions(const TransactionOptions& from);
  TransactionOptions(TransactionOptions&& from) noexcept
    : TransactionOptions() {
    *this = ::std::move(from);
  }

  inline TransactionOptions& operator=(const TransactionOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionOptions& operator=(TransactionOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransactionOptions& default_instance() {
    return *internal_default_instance();
  }
  enum ModeCase {
    kReadWrite = 1,
    kPartitionedDml = 3,
    kReadOnly = 2,
    MODE_NOT_SET = 0,
  };

  static inline const TransactionOptions* internal_default_instance() {
    return reinterpret_cast<const TransactionOptions*>(
               &_TransactionOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TransactionOptions& a, TransactionOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionOptions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransactionOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransactionOptions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransactionOptions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransactionOptions& from) {
    TransactionOptions::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionOptions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.spanner.v1.TransactionOptions";
  }
  protected:
  explicit TransactionOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TransactionOptions_ReadWrite ReadWrite;
  typedef TransactionOptions_PartitionedDml PartitionedDml;
  typedef TransactionOptions_ReadOnly ReadOnly;

  // accessors -------------------------------------------------------

  enum : int {
    kReadWriteFieldNumber = 1,
    kPartitionedDmlFieldNumber = 3,
    kReadOnlyFieldNumber = 2,
  };
  // .google.spanner.v1.TransactionOptions.ReadWrite read_write = 1;
  bool has_read_write() const;
  private:
  bool _internal_has_read_write() const;
  public:
  void clear_read_write();
  const ::google::spanner::v1::TransactionOptions_ReadWrite& read_write() const;
  PROTOBUF_NODISCARD ::google::spanner::v1::TransactionOptions_ReadWrite* release_read_write();
  ::google::spanner::v1::TransactionOptions_ReadWrite* mutable_read_write();
  void set_allocated_read_write(::google::spanner::v1::TransactionOptions_ReadWrite* read_write);
  private:
  const ::google::spanner::v1::TransactionOptions_ReadWrite& _internal_read_write() const;
  ::google::spanner::v1::TransactionOptions_ReadWrite* _internal_mutable_read_write();
  public:
  void unsafe_arena_set_allocated_read_write(
      ::google::spanner::v1::TransactionOptions_ReadWrite* read_write);
  ::google::spanner::v1::TransactionOptions_ReadWrite* unsafe_arena_release_read_write();

  // .google.spanner.v1.TransactionOptions.PartitionedDml partitioned_dml = 3;
  bool has_partitioned_dml() const;
  private:
  bool _internal_has_partitioned_dml() const;
  public:
  void clear_partitioned_dml();
  const ::google::spanner::v1::TransactionOptions_PartitionedDml& partitioned_dml() const;
  PROTOBUF_NODISCARD ::google::spanner::v1::TransactionOptions_PartitionedDml* release_partitioned_dml();
  ::google::spanner::v1::TransactionOptions_PartitionedDml* mutable_partitioned_dml();
  void set_allocated_partitioned_dml(::google::spanner::v1::TransactionOptions_PartitionedDml* partitioned_dml);
  private:
  const ::google::spanner::v1::TransactionOptions_PartitionedDml& _internal_partitioned_dml() const;
  ::google::spanner::v1::TransactionOptions_PartitionedDml* _internal_mutable_partitioned_dml();
  public:
  void unsafe_arena_set_allocated_partitioned_dml(
      ::google::spanner::v1::TransactionOptions_PartitionedDml* partitioned_dml);
  ::google::spanner::v1::TransactionOptions_PartitionedDml* unsafe_arena_release_partitioned_dml();

  // .google.spanner.v1.TransactionOptions.ReadOnly read_only = 2;
  bool has_read_only() const;
  private:
  bool _internal_has_read_only() const;
  public:
  void clear_read_only();
  const ::google::spanner::v1::TransactionOptions_ReadOnly& read_only() const;
  PROTOBUF_NODISCARD ::google::spanner::v1::TransactionOptions_ReadOnly* release_read_only();
  ::google::spanner::v1::TransactionOptions_ReadOnly* mutable_read_only();
  void set_allocated_read_only(::google::spanner::v1::TransactionOptions_ReadOnly* read_only);
  private:
  const ::google::spanner::v1::TransactionOptions_ReadOnly& _internal_read_only() const;
  ::google::spanner::v1::TransactionOptions_ReadOnly* _internal_mutable_read_only();
  public:
  void unsafe_arena_set_allocated_read_only(
      ::google::spanner::v1::TransactionOptions_ReadOnly* read_only);
  ::google::spanner::v1::TransactionOptions_ReadOnly* unsafe_arena_release_read_only();

  void clear_mode();
  ModeCase mode_case() const;
  // @@protoc_insertion_point(class_scope:google.spanner.v1.TransactionOptions)
 private:
  class _Internal;
  void set_has_read_write();
  void set_has_partitioned_dml();
  void set_has_read_only();

  inline bool has_mode() const;
  inline void clear_has_mode();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union ModeUnion {
      constexpr ModeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::google::spanner::v1::TransactionOptions_ReadWrite* read_write_;
      ::google::spanner::v1::TransactionOptions_PartitionedDml* partitioned_dml_;
      ::google::spanner::v1::TransactionOptions_ReadOnly* read_only_;
    } mode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fspanner_2fv1_2ftransaction_2eproto;
};
// -------------------------------------------------------------------

class Transaction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.spanner.v1.Transaction) */ {
 public:
  inline Transaction() : Transaction(nullptr) {}
  ~Transaction() override;
  explicit PROTOBUF_CONSTEXPR Transaction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Transaction(const Transaction& from);
  Transaction(Transaction&& from) noexcept
    : Transaction() {
    *this = ::std::move(from);
  }

  inline Transaction& operator=(const Transaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transaction& operator=(Transaction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Transaction& default_instance() {
    return *internal_default_instance();
  }
  static inline const Transaction* internal_default_instance() {
    return reinterpret_cast<const Transaction*>(
               &_Transaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Transaction& a, Transaction& b) {
    a.Swap(&b);
  }
  inline void Swap(Transaction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transaction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Transaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Transaction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Transaction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Transaction& from) {
    Transaction::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transaction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.spanner.v1.Transaction";
  }
  protected:
  explicit Transaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kReadTimestampFieldNumber = 2,
  };
  // bytes id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .google.protobuf.Timestamp read_timestamp = 2;
  bool has_read_timestamp() const;
  private:
  bool _internal_has_read_timestamp() const;
  public:
  void clear_read_timestamp();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& read_timestamp() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_read_timestamp();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_read_timestamp();
  void set_allocated_read_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* read_timestamp);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_read_timestamp() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_read_timestamp();
  public:
  void unsafe_arena_set_allocated_read_timestamp(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* read_timestamp);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_read_timestamp();

  // @@protoc_insertion_point(class_scope:google.spanner.v1.Transaction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* read_timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fspanner_2fv1_2ftransaction_2eproto;
};
// -------------------------------------------------------------------

class TransactionSelector final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.spanner.v1.TransactionSelector) */ {
 public:
  inline TransactionSelector() : TransactionSelector(nullptr) {}
  ~TransactionSelector() override;
  explicit PROTOBUF_CONSTEXPR TransactionSelector(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransactionSelector(const TransactionSelector& from);
  TransactionSelector(TransactionSelector&& from) noexcept
    : TransactionSelector() {
    *this = ::std::move(from);
  }

  inline TransactionSelector& operator=(const TransactionSelector& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionSelector& operator=(TransactionSelector&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransactionSelector& default_instance() {
    return *internal_default_instance();
  }
  enum SelectorCase {
    kSingleUse = 1,
    kId = 2,
    kBegin = 3,
    SELECTOR_NOT_SET = 0,
  };

  static inline const TransactionSelector* internal_default_instance() {
    return reinterpret_cast<const TransactionSelector*>(
               &_TransactionSelector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TransactionSelector& a, TransactionSelector& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionSelector* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionSelector* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransactionSelector* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransactionSelector>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransactionSelector& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransactionSelector& from) {
    TransactionSelector::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionSelector* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.spanner.v1.TransactionSelector";
  }
  protected:
  explicit TransactionSelector(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSingleUseFieldNumber = 1,
    kIdFieldNumber = 2,
    kBeginFieldNumber = 3,
  };
  // .google.spanner.v1.TransactionOptions single_use = 1;
  bool has_single_use() const;
  private:
  bool _internal_has_single_use() const;
  public:
  void clear_single_use();
  const ::google::spanner::v1::TransactionOptions& single_use() const;
  PROTOBUF_NODISCARD ::google::spanner::v1::TransactionOptions* release_single_use();
  ::google::spanner::v1::TransactionOptions* mutable_single_use();
  void set_allocated_single_use(::google::spanner::v1::TransactionOptions* single_use);
  private:
  const ::google::spanner::v1::TransactionOptions& _internal_single_use() const;
  ::google::spanner::v1::TransactionOptions* _internal_mutable_single_use();
  public:
  void unsafe_arena_set_allocated_single_use(
      ::google::spanner::v1::TransactionOptions* single_use);
  ::google::spanner::v1::TransactionOptions* unsafe_arena_release_single_use();

  // bytes id = 2;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .google.spanner.v1.TransactionOptions begin = 3;
  bool has_begin() const;
  private:
  bool _internal_has_begin() const;
  public:
  void clear_begin();
  const ::google::spanner::v1::TransactionOptions& begin() const;
  PROTOBUF_NODISCARD ::google::spanner::v1::TransactionOptions* release_begin();
  ::google::spanner::v1::TransactionOptions* mutable_begin();
  void set_allocated_begin(::google::spanner::v1::TransactionOptions* begin);
  private:
  const ::google::spanner::v1::TransactionOptions& _internal_begin() const;
  ::google::spanner::v1::TransactionOptions* _internal_mutable_begin();
  public:
  void unsafe_arena_set_allocated_begin(
      ::google::spanner::v1::TransactionOptions* begin);
  ::google::spanner::v1::TransactionOptions* unsafe_arena_release_begin();

  void clear_selector();
  SelectorCase selector_case() const;
  // @@protoc_insertion_point(class_scope:google.spanner.v1.TransactionSelector)
 private:
  class _Internal;
  void set_has_single_use();
  void set_has_id();
  void set_has_begin();

  inline bool has_selector() const;
  inline void clear_has_selector();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union SelectorUnion {
      constexpr SelectorUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::google::spanner::v1::TransactionOptions* single_use_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
      ::google::spanner::v1::TransactionOptions* begin_;
    } selector_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fspanner_2fv1_2ftransaction_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TransactionOptions_ReadWrite

// -------------------------------------------------------------------

// TransactionOptions_PartitionedDml

// -------------------------------------------------------------------

// TransactionOptions_ReadOnly

// bool strong = 1;
inline bool TransactionOptions_ReadOnly::_internal_has_strong() const {
  return timestamp_bound_case() == kStrong;
}
inline bool TransactionOptions_ReadOnly::has_strong() const {
  return _internal_has_strong();
}
inline void TransactionOptions_ReadOnly::set_has_strong() {
  _impl_._oneof_case_[0] = kStrong;
}
inline void TransactionOptions_ReadOnly::clear_strong() {
  if (_internal_has_strong()) {
    _impl_.timestamp_bound_.strong_ = false;
    clear_has_timestamp_bound();
  }
}
inline bool TransactionOptions_ReadOnly::_internal_strong() const {
  if (_internal_has_strong()) {
    return _impl_.timestamp_bound_.strong_;
  }
  return false;
}
inline void TransactionOptions_ReadOnly::_internal_set_strong(bool value) {
  if (!_internal_has_strong()) {
    clear_timestamp_bound();
    set_has_strong();
  }
  _impl_.timestamp_bound_.strong_ = value;
}
inline bool TransactionOptions_ReadOnly::strong() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.TransactionOptions.ReadOnly.strong)
  return _internal_strong();
}
inline void TransactionOptions_ReadOnly::set_strong(bool value) {
  _internal_set_strong(value);
  // @@protoc_insertion_point(field_set:google.spanner.v1.TransactionOptions.ReadOnly.strong)
}

// .google.protobuf.Timestamp min_read_timestamp = 2;
inline bool TransactionOptions_ReadOnly::_internal_has_min_read_timestamp() const {
  return timestamp_bound_case() == kMinReadTimestamp;
}
inline bool TransactionOptions_ReadOnly::has_min_read_timestamp() const {
  return _internal_has_min_read_timestamp();
}
inline void TransactionOptions_ReadOnly::set_has_min_read_timestamp() {
  _impl_._oneof_case_[0] = kMinReadTimestamp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TransactionOptions_ReadOnly::release_min_read_timestamp() {
  // @@protoc_insertion_point(field_release:google.spanner.v1.TransactionOptions.ReadOnly.min_read_timestamp)
  if (_internal_has_min_read_timestamp()) {
    clear_has_timestamp_bound();
    ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.timestamp_bound_.min_read_timestamp_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.timestamp_bound_.min_read_timestamp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TransactionOptions_ReadOnly::_internal_min_read_timestamp() const {
  return _internal_has_min_read_timestamp()
      ? *_impl_.timestamp_bound_.min_read_timestamp_
      : reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::Timestamp&>(::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TransactionOptions_ReadOnly::min_read_timestamp() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.TransactionOptions.ReadOnly.min_read_timestamp)
  return _internal_min_read_timestamp();
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TransactionOptions_ReadOnly::unsafe_arena_release_min_read_timestamp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.spanner.v1.TransactionOptions.ReadOnly.min_read_timestamp)
  if (_internal_has_min_read_timestamp()) {
    clear_has_timestamp_bound();
    ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.timestamp_bound_.min_read_timestamp_;
    _impl_.timestamp_bound_.min_read_timestamp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TransactionOptions_ReadOnly::unsafe_arena_set_allocated_min_read_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* min_read_timestamp) {
  clear_timestamp_bound();
  if (min_read_timestamp) {
    set_has_min_read_timestamp();
    _impl_.timestamp_bound_.min_read_timestamp_ = min_read_timestamp;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.spanner.v1.TransactionOptions.ReadOnly.min_read_timestamp)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TransactionOptions_ReadOnly::_internal_mutable_min_read_timestamp() {
  if (!_internal_has_min_read_timestamp()) {
    clear_timestamp_bound();
    set_has_min_read_timestamp();
    _impl_.timestamp_bound_.min_read_timestamp_ = CreateMaybeMessage< ::PROTOBUF_NAMESPACE_ID::Timestamp >(GetArenaForAllocation());
  }
  return _impl_.timestamp_bound_.min_read_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TransactionOptions_ReadOnly::mutable_min_read_timestamp() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_min_read_timestamp();
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.TransactionOptions.ReadOnly.min_read_timestamp)
  return _msg;
}

// .google.protobuf.Duration max_staleness = 3;
inline bool TransactionOptions_ReadOnly::_internal_has_max_staleness() const {
  return timestamp_bound_case() == kMaxStaleness;
}
inline bool TransactionOptions_ReadOnly::has_max_staleness() const {
  return _internal_has_max_staleness();
}
inline void TransactionOptions_ReadOnly::set_has_max_staleness() {
  _impl_._oneof_case_[0] = kMaxStaleness;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* TransactionOptions_ReadOnly::release_max_staleness() {
  // @@protoc_insertion_point(field_release:google.spanner.v1.TransactionOptions.ReadOnly.max_staleness)
  if (_internal_has_max_staleness()) {
    clear_has_timestamp_bound();
    ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.timestamp_bound_.max_staleness_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.timestamp_bound_.max_staleness_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& TransactionOptions_ReadOnly::_internal_max_staleness() const {
  return _internal_has_max_staleness()
      ? *_impl_.timestamp_bound_.max_staleness_
      : reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::Duration&>(::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& TransactionOptions_ReadOnly::max_staleness() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.TransactionOptions.ReadOnly.max_staleness)
  return _internal_max_staleness();
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* TransactionOptions_ReadOnly::unsafe_arena_release_max_staleness() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.spanner.v1.TransactionOptions.ReadOnly.max_staleness)
  if (_internal_has_max_staleness()) {
    clear_has_timestamp_bound();
    ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.timestamp_bound_.max_staleness_;
    _impl_.timestamp_bound_.max_staleness_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TransactionOptions_ReadOnly::unsafe_arena_set_allocated_max_staleness(::PROTOBUF_NAMESPACE_ID::Duration* max_staleness) {
  clear_timestamp_bound();
  if (max_staleness) {
    set_has_max_staleness();
    _impl_.timestamp_bound_.max_staleness_ = max_staleness;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.spanner.v1.TransactionOptions.ReadOnly.max_staleness)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* TransactionOptions_ReadOnly::_internal_mutable_max_staleness() {
  if (!_internal_has_max_staleness()) {
    clear_timestamp_bound();
    set_has_max_staleness();
    _impl_.timestamp_bound_.max_staleness_ = CreateMaybeMessage< ::PROTOBUF_NAMESPACE_ID::Duration >(GetArenaForAllocation());
  }
  return _impl_.timestamp_bound_.max_staleness_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* TransactionOptions_ReadOnly::mutable_max_staleness() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_max_staleness();
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.TransactionOptions.ReadOnly.max_staleness)
  return _msg;
}

// .google.protobuf.Timestamp read_timestamp = 4;
inline bool TransactionOptions_ReadOnly::_internal_has_read_timestamp() const {
  return timestamp_bound_case() == kReadTimestamp;
}
inline bool TransactionOptions_ReadOnly::has_read_timestamp() const {
  return _internal_has_read_timestamp();
}
inline void TransactionOptions_ReadOnly::set_has_read_timestamp() {
  _impl_._oneof_case_[0] = kReadTimestamp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TransactionOptions_ReadOnly::release_read_timestamp() {
  // @@protoc_insertion_point(field_release:google.spanner.v1.TransactionOptions.ReadOnly.read_timestamp)
  if (_internal_has_read_timestamp()) {
    clear_has_timestamp_bound();
    ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.timestamp_bound_.read_timestamp_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.timestamp_bound_.read_timestamp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TransactionOptions_ReadOnly::_internal_read_timestamp() const {
  return _internal_has_read_timestamp()
      ? *_impl_.timestamp_bound_.read_timestamp_
      : reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::Timestamp&>(::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TransactionOptions_ReadOnly::read_timestamp() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.TransactionOptions.ReadOnly.read_timestamp)
  return _internal_read_timestamp();
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TransactionOptions_ReadOnly::unsafe_arena_release_read_timestamp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.spanner.v1.TransactionOptions.ReadOnly.read_timestamp)
  if (_internal_has_read_timestamp()) {
    clear_has_timestamp_bound();
    ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.timestamp_bound_.read_timestamp_;
    _impl_.timestamp_bound_.read_timestamp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TransactionOptions_ReadOnly::unsafe_arena_set_allocated_read_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* read_timestamp) {
  clear_timestamp_bound();
  if (read_timestamp) {
    set_has_read_timestamp();
    _impl_.timestamp_bound_.read_timestamp_ = read_timestamp;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.spanner.v1.TransactionOptions.ReadOnly.read_timestamp)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TransactionOptions_ReadOnly::_internal_mutable_read_timestamp() {
  if (!_internal_has_read_timestamp()) {
    clear_timestamp_bound();
    set_has_read_timestamp();
    _impl_.timestamp_bound_.read_timestamp_ = CreateMaybeMessage< ::PROTOBUF_NAMESPACE_ID::Timestamp >(GetArenaForAllocation());
  }
  return _impl_.timestamp_bound_.read_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TransactionOptions_ReadOnly::mutable_read_timestamp() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_read_timestamp();
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.TransactionOptions.ReadOnly.read_timestamp)
  return _msg;
}

// .google.protobuf.Duration exact_staleness = 5;
inline bool TransactionOptions_ReadOnly::_internal_has_exact_staleness() const {
  return timestamp_bound_case() == kExactStaleness;
}
inline bool TransactionOptions_ReadOnly::has_exact_staleness() const {
  return _internal_has_exact_staleness();
}
inline void TransactionOptions_ReadOnly::set_has_exact_staleness() {
  _impl_._oneof_case_[0] = kExactStaleness;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* TransactionOptions_ReadOnly::release_exact_staleness() {
  // @@protoc_insertion_point(field_release:google.spanner.v1.TransactionOptions.ReadOnly.exact_staleness)
  if (_internal_has_exact_staleness()) {
    clear_has_timestamp_bound();
    ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.timestamp_bound_.exact_staleness_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.timestamp_bound_.exact_staleness_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& TransactionOptions_ReadOnly::_internal_exact_staleness() const {
  return _internal_has_exact_staleness()
      ? *_impl_.timestamp_bound_.exact_staleness_
      : reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::Duration&>(::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& TransactionOptions_ReadOnly::exact_staleness() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.TransactionOptions.ReadOnly.exact_staleness)
  return _internal_exact_staleness();
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* TransactionOptions_ReadOnly::unsafe_arena_release_exact_staleness() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.spanner.v1.TransactionOptions.ReadOnly.exact_staleness)
  if (_internal_has_exact_staleness()) {
    clear_has_timestamp_bound();
    ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.timestamp_bound_.exact_staleness_;
    _impl_.timestamp_bound_.exact_staleness_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TransactionOptions_ReadOnly::unsafe_arena_set_allocated_exact_staleness(::PROTOBUF_NAMESPACE_ID::Duration* exact_staleness) {
  clear_timestamp_bound();
  if (exact_staleness) {
    set_has_exact_staleness();
    _impl_.timestamp_bound_.exact_staleness_ = exact_staleness;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.spanner.v1.TransactionOptions.ReadOnly.exact_staleness)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* TransactionOptions_ReadOnly::_internal_mutable_exact_staleness() {
  if (!_internal_has_exact_staleness()) {
    clear_timestamp_bound();
    set_has_exact_staleness();
    _impl_.timestamp_bound_.exact_staleness_ = CreateMaybeMessage< ::PROTOBUF_NAMESPACE_ID::Duration >(GetArenaForAllocation());
  }
  return _impl_.timestamp_bound_.exact_staleness_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* TransactionOptions_ReadOnly::mutable_exact_staleness() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_exact_staleness();
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.TransactionOptions.ReadOnly.exact_staleness)
  return _msg;
}

// bool return_read_timestamp = 6;
inline void TransactionOptions_ReadOnly::clear_return_read_timestamp() {
  _impl_.return_read_timestamp_ = false;
}
inline bool TransactionOptions_ReadOnly::_internal_return_read_timestamp() const {
  return _impl_.return_read_timestamp_;
}
inline bool TransactionOptions_ReadOnly::return_read_timestamp() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.TransactionOptions.ReadOnly.return_read_timestamp)
  return _internal_return_read_timestamp();
}
inline void TransactionOptions_ReadOnly::_internal_set_return_read_timestamp(bool value) {
  
  _impl_.return_read_timestamp_ = value;
}
inline void TransactionOptions_ReadOnly::set_return_read_timestamp(bool value) {
  _internal_set_return_read_timestamp(value);
  // @@protoc_insertion_point(field_set:google.spanner.v1.TransactionOptions.ReadOnly.return_read_timestamp)
}

inline bool TransactionOptions_ReadOnly::has_timestamp_bound() const {
  return timestamp_bound_case() != TIMESTAMP_BOUND_NOT_SET;
}
inline void TransactionOptions_ReadOnly::clear_has_timestamp_bound() {
  _impl_._oneof_case_[0] = TIMESTAMP_BOUND_NOT_SET;
}
inline TransactionOptions_ReadOnly::TimestampBoundCase TransactionOptions_ReadOnly::timestamp_bound_case() const {
  return TransactionOptions_ReadOnly::TimestampBoundCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// TransactionOptions

// .google.spanner.v1.TransactionOptions.ReadWrite read_write = 1;
inline bool TransactionOptions::_internal_has_read_write() const {
  return mode_case() == kReadWrite;
}
inline bool TransactionOptions::has_read_write() const {
  return _internal_has_read_write();
}
inline void TransactionOptions::set_has_read_write() {
  _impl_._oneof_case_[0] = kReadWrite;
}
inline void TransactionOptions::clear_read_write() {
  if (_internal_has_read_write()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.mode_.read_write_;
    }
    clear_has_mode();
  }
}
inline ::google::spanner::v1::TransactionOptions_ReadWrite* TransactionOptions::release_read_write() {
  // @@protoc_insertion_point(field_release:google.spanner.v1.TransactionOptions.read_write)
  if (_internal_has_read_write()) {
    clear_has_mode();
    ::google::spanner::v1::TransactionOptions_ReadWrite* temp = _impl_.mode_.read_write_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.mode_.read_write_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::spanner::v1::TransactionOptions_ReadWrite& TransactionOptions::_internal_read_write() const {
  return _internal_has_read_write()
      ? *_impl_.mode_.read_write_
      : reinterpret_cast< ::google::spanner::v1::TransactionOptions_ReadWrite&>(::google::spanner::v1::_TransactionOptions_ReadWrite_default_instance_);
}
inline const ::google::spanner::v1::TransactionOptions_ReadWrite& TransactionOptions::read_write() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.TransactionOptions.read_write)
  return _internal_read_write();
}
inline ::google::spanner::v1::TransactionOptions_ReadWrite* TransactionOptions::unsafe_arena_release_read_write() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.spanner.v1.TransactionOptions.read_write)
  if (_internal_has_read_write()) {
    clear_has_mode();
    ::google::spanner::v1::TransactionOptions_ReadWrite* temp = _impl_.mode_.read_write_;
    _impl_.mode_.read_write_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TransactionOptions::unsafe_arena_set_allocated_read_write(::google::spanner::v1::TransactionOptions_ReadWrite* read_write) {
  clear_mode();
  if (read_write) {
    set_has_read_write();
    _impl_.mode_.read_write_ = read_write;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.spanner.v1.TransactionOptions.read_write)
}
inline ::google::spanner::v1::TransactionOptions_ReadWrite* TransactionOptions::_internal_mutable_read_write() {
  if (!_internal_has_read_write()) {
    clear_mode();
    set_has_read_write();
    _impl_.mode_.read_write_ = CreateMaybeMessage< ::google::spanner::v1::TransactionOptions_ReadWrite >(GetArenaForAllocation());
  }
  return _impl_.mode_.read_write_;
}
inline ::google::spanner::v1::TransactionOptions_ReadWrite* TransactionOptions::mutable_read_write() {
  ::google::spanner::v1::TransactionOptions_ReadWrite* _msg = _internal_mutable_read_write();
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.TransactionOptions.read_write)
  return _msg;
}

// .google.spanner.v1.TransactionOptions.PartitionedDml partitioned_dml = 3;
inline bool TransactionOptions::_internal_has_partitioned_dml() const {
  return mode_case() == kPartitionedDml;
}
inline bool TransactionOptions::has_partitioned_dml() const {
  return _internal_has_partitioned_dml();
}
inline void TransactionOptions::set_has_partitioned_dml() {
  _impl_._oneof_case_[0] = kPartitionedDml;
}
inline void TransactionOptions::clear_partitioned_dml() {
  if (_internal_has_partitioned_dml()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.mode_.partitioned_dml_;
    }
    clear_has_mode();
  }
}
inline ::google::spanner::v1::TransactionOptions_PartitionedDml* TransactionOptions::release_partitioned_dml() {
  // @@protoc_insertion_point(field_release:google.spanner.v1.TransactionOptions.partitioned_dml)
  if (_internal_has_partitioned_dml()) {
    clear_has_mode();
    ::google::spanner::v1::TransactionOptions_PartitionedDml* temp = _impl_.mode_.partitioned_dml_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.mode_.partitioned_dml_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::spanner::v1::TransactionOptions_PartitionedDml& TransactionOptions::_internal_partitioned_dml() const {
  return _internal_has_partitioned_dml()
      ? *_impl_.mode_.partitioned_dml_
      : reinterpret_cast< ::google::spanner::v1::TransactionOptions_PartitionedDml&>(::google::spanner::v1::_TransactionOptions_PartitionedDml_default_instance_);
}
inline const ::google::spanner::v1::TransactionOptions_PartitionedDml& TransactionOptions::partitioned_dml() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.TransactionOptions.partitioned_dml)
  return _internal_partitioned_dml();
}
inline ::google::spanner::v1::TransactionOptions_PartitionedDml* TransactionOptions::unsafe_arena_release_partitioned_dml() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.spanner.v1.TransactionOptions.partitioned_dml)
  if (_internal_has_partitioned_dml()) {
    clear_has_mode();
    ::google::spanner::v1::TransactionOptions_PartitionedDml* temp = _impl_.mode_.partitioned_dml_;
    _impl_.mode_.partitioned_dml_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TransactionOptions::unsafe_arena_set_allocated_partitioned_dml(::google::spanner::v1::TransactionOptions_PartitionedDml* partitioned_dml) {
  clear_mode();
  if (partitioned_dml) {
    set_has_partitioned_dml();
    _impl_.mode_.partitioned_dml_ = partitioned_dml;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.spanner.v1.TransactionOptions.partitioned_dml)
}
inline ::google::spanner::v1::TransactionOptions_PartitionedDml* TransactionOptions::_internal_mutable_partitioned_dml() {
  if (!_internal_has_partitioned_dml()) {
    clear_mode();
    set_has_partitioned_dml();
    _impl_.mode_.partitioned_dml_ = CreateMaybeMessage< ::google::spanner::v1::TransactionOptions_PartitionedDml >(GetArenaForAllocation());
  }
  return _impl_.mode_.partitioned_dml_;
}
inline ::google::spanner::v1::TransactionOptions_PartitionedDml* TransactionOptions::mutable_partitioned_dml() {
  ::google::spanner::v1::TransactionOptions_PartitionedDml* _msg = _internal_mutable_partitioned_dml();
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.TransactionOptions.partitioned_dml)
  return _msg;
}

// .google.spanner.v1.TransactionOptions.ReadOnly read_only = 2;
inline bool TransactionOptions::_internal_has_read_only() const {
  return mode_case() == kReadOnly;
}
inline bool TransactionOptions::has_read_only() const {
  return _internal_has_read_only();
}
inline void TransactionOptions::set_has_read_only() {
  _impl_._oneof_case_[0] = kReadOnly;
}
inline void TransactionOptions::clear_read_only() {
  if (_internal_has_read_only()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.mode_.read_only_;
    }
    clear_has_mode();
  }
}
inline ::google::spanner::v1::TransactionOptions_ReadOnly* TransactionOptions::release_read_only() {
  // @@protoc_insertion_point(field_release:google.spanner.v1.TransactionOptions.read_only)
  if (_internal_has_read_only()) {
    clear_has_mode();
    ::google::spanner::v1::TransactionOptions_ReadOnly* temp = _impl_.mode_.read_only_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.mode_.read_only_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::spanner::v1::TransactionOptions_ReadOnly& TransactionOptions::_internal_read_only() const {
  return _internal_has_read_only()
      ? *_impl_.mode_.read_only_
      : reinterpret_cast< ::google::spanner::v1::TransactionOptions_ReadOnly&>(::google::spanner::v1::_TransactionOptions_ReadOnly_default_instance_);
}
inline const ::google::spanner::v1::TransactionOptions_ReadOnly& TransactionOptions::read_only() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.TransactionOptions.read_only)
  return _internal_read_only();
}
inline ::google::spanner::v1::TransactionOptions_ReadOnly* TransactionOptions::unsafe_arena_release_read_only() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.spanner.v1.TransactionOptions.read_only)
  if (_internal_has_read_only()) {
    clear_has_mode();
    ::google::spanner::v1::TransactionOptions_ReadOnly* temp = _impl_.mode_.read_only_;
    _impl_.mode_.read_only_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TransactionOptions::unsafe_arena_set_allocated_read_only(::google::spanner::v1::TransactionOptions_ReadOnly* read_only) {
  clear_mode();
  if (read_only) {
    set_has_read_only();
    _impl_.mode_.read_only_ = read_only;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.spanner.v1.TransactionOptions.read_only)
}
inline ::google::spanner::v1::TransactionOptions_ReadOnly* TransactionOptions::_internal_mutable_read_only() {
  if (!_internal_has_read_only()) {
    clear_mode();
    set_has_read_only();
    _impl_.mode_.read_only_ = CreateMaybeMessage< ::google::spanner::v1::TransactionOptions_ReadOnly >(GetArenaForAllocation());
  }
  return _impl_.mode_.read_only_;
}
inline ::google::spanner::v1::TransactionOptions_ReadOnly* TransactionOptions::mutable_read_only() {
  ::google::spanner::v1::TransactionOptions_ReadOnly* _msg = _internal_mutable_read_only();
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.TransactionOptions.read_only)
  return _msg;
}

inline bool TransactionOptions::has_mode() const {
  return mode_case() != MODE_NOT_SET;
}
inline void TransactionOptions::clear_has_mode() {
  _impl_._oneof_case_[0] = MODE_NOT_SET;
}
inline TransactionOptions::ModeCase TransactionOptions::mode_case() const {
  return TransactionOptions::ModeCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Transaction

// bytes id = 1;
inline void Transaction::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& Transaction::id() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.Transaction.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Transaction::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.spanner.v1.Transaction.id)
}
inline std::string* Transaction::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.Transaction.id)
  return _s;
}
inline const std::string& Transaction::_internal_id() const {
  return _impl_.id_.Get();
}
inline void Transaction::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* Transaction::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* Transaction::release_id() {
  // @@protoc_insertion_point(field_release:google.spanner.v1.Transaction.id)
  return _impl_.id_.Release();
}
inline void Transaction::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.spanner.v1.Transaction.id)
}

// .google.protobuf.Timestamp read_timestamp = 2;
inline bool Transaction::_internal_has_read_timestamp() const {
  return this != internal_default_instance() && _impl_.read_timestamp_ != nullptr;
}
inline bool Transaction::has_read_timestamp() const {
  return _internal_has_read_timestamp();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Transaction::_internal_read_timestamp() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.read_timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Transaction::read_timestamp() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.Transaction.read_timestamp)
  return _internal_read_timestamp();
}
inline void Transaction::unsafe_arena_set_allocated_read_timestamp(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* read_timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.read_timestamp_);
  }
  _impl_.read_timestamp_ = read_timestamp;
  if (read_timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.spanner.v1.Transaction.read_timestamp)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Transaction::release_read_timestamp() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.read_timestamp_;
  _impl_.read_timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Transaction::unsafe_arena_release_read_timestamp() {
  // @@protoc_insertion_point(field_release:google.spanner.v1.Transaction.read_timestamp)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.read_timestamp_;
  _impl_.read_timestamp_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Transaction::_internal_mutable_read_timestamp() {
  
  if (_impl_.read_timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.read_timestamp_ = p;
  }
  return _impl_.read_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Transaction::mutable_read_timestamp() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_read_timestamp();
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.Transaction.read_timestamp)
  return _msg;
}
inline void Transaction::set_allocated_read_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* read_timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.read_timestamp_);
  }
  if (read_timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(read_timestamp));
    if (message_arena != submessage_arena) {
      read_timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, read_timestamp, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.read_timestamp_ = read_timestamp;
  // @@protoc_insertion_point(field_set_allocated:google.spanner.v1.Transaction.read_timestamp)
}

// -------------------------------------------------------------------

// TransactionSelector

// .google.spanner.v1.TransactionOptions single_use = 1;
inline bool TransactionSelector::_internal_has_single_use() const {
  return selector_case() == kSingleUse;
}
inline bool TransactionSelector::has_single_use() const {
  return _internal_has_single_use();
}
inline void TransactionSelector::set_has_single_use() {
  _impl_._oneof_case_[0] = kSingleUse;
}
inline void TransactionSelector::clear_single_use() {
  if (_internal_has_single_use()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.selector_.single_use_;
    }
    clear_has_selector();
  }
}
inline ::google::spanner::v1::TransactionOptions* TransactionSelector::release_single_use() {
  // @@protoc_insertion_point(field_release:google.spanner.v1.TransactionSelector.single_use)
  if (_internal_has_single_use()) {
    clear_has_selector();
    ::google::spanner::v1::TransactionOptions* temp = _impl_.selector_.single_use_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.selector_.single_use_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::spanner::v1::TransactionOptions& TransactionSelector::_internal_single_use() const {
  return _internal_has_single_use()
      ? *_impl_.selector_.single_use_
      : reinterpret_cast< ::google::spanner::v1::TransactionOptions&>(::google::spanner::v1::_TransactionOptions_default_instance_);
}
inline const ::google::spanner::v1::TransactionOptions& TransactionSelector::single_use() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.TransactionSelector.single_use)
  return _internal_single_use();
}
inline ::google::spanner::v1::TransactionOptions* TransactionSelector::unsafe_arena_release_single_use() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.spanner.v1.TransactionSelector.single_use)
  if (_internal_has_single_use()) {
    clear_has_selector();
    ::google::spanner::v1::TransactionOptions* temp = _impl_.selector_.single_use_;
    _impl_.selector_.single_use_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TransactionSelector::unsafe_arena_set_allocated_single_use(::google::spanner::v1::TransactionOptions* single_use) {
  clear_selector();
  if (single_use) {
    set_has_single_use();
    _impl_.selector_.single_use_ = single_use;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.spanner.v1.TransactionSelector.single_use)
}
inline ::google::spanner::v1::TransactionOptions* TransactionSelector::_internal_mutable_single_use() {
  if (!_internal_has_single_use()) {
    clear_selector();
    set_has_single_use();
    _impl_.selector_.single_use_ = CreateMaybeMessage< ::google::spanner::v1::TransactionOptions >(GetArenaForAllocation());
  }
  return _impl_.selector_.single_use_;
}
inline ::google::spanner::v1::TransactionOptions* TransactionSelector::mutable_single_use() {
  ::google::spanner::v1::TransactionOptions* _msg = _internal_mutable_single_use();
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.TransactionSelector.single_use)
  return _msg;
}

// bytes id = 2;
inline bool TransactionSelector::_internal_has_id() const {
  return selector_case() == kId;
}
inline bool TransactionSelector::has_id() const {
  return _internal_has_id();
}
inline void TransactionSelector::set_has_id() {
  _impl_._oneof_case_[0] = kId;
}
inline void TransactionSelector::clear_id() {
  if (_internal_has_id()) {
    _impl_.selector_.id_.Destroy();
    clear_has_selector();
  }
}
inline const std::string& TransactionSelector::id() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.TransactionSelector.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline void TransactionSelector::set_id(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_id()) {
    clear_selector();
    set_has_id();
    _impl_.selector_.id_.InitDefault();
  }
  _impl_.selector_.id_.SetBytes( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.spanner.v1.TransactionSelector.id)
}
inline std::string* TransactionSelector::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.TransactionSelector.id)
  return _s;
}
inline const std::string& TransactionSelector::_internal_id() const {
  if (_internal_has_id()) {
    return _impl_.selector_.id_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TransactionSelector::_internal_set_id(const std::string& value) {
  if (!_internal_has_id()) {
    clear_selector();
    set_has_id();
    _impl_.selector_.id_.InitDefault();
  }
  _impl_.selector_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* TransactionSelector::_internal_mutable_id() {
  if (!_internal_has_id()) {
    clear_selector();
    set_has_id();
    _impl_.selector_.id_.InitDefault();
  }
  return _impl_.selector_.id_.Mutable(      GetArenaForAllocation());
}
inline std::string* TransactionSelector::release_id() {
  // @@protoc_insertion_point(field_release:google.spanner.v1.TransactionSelector.id)
  if (_internal_has_id()) {
    clear_has_selector();
    return _impl_.selector_.id_.Release();
  } else {
    return nullptr;
  }
}
inline void TransactionSelector::set_allocated_id(std::string* id) {
  if (has_selector()) {
    clear_selector();
  }
  if (id != nullptr) {
    set_has_id();
    _impl_.selector_.id_.InitAllocated(id, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:google.spanner.v1.TransactionSelector.id)
}

// .google.spanner.v1.TransactionOptions begin = 3;
inline bool TransactionSelector::_internal_has_begin() const {
  return selector_case() == kBegin;
}
inline bool TransactionSelector::has_begin() const {
  return _internal_has_begin();
}
inline void TransactionSelector::set_has_begin() {
  _impl_._oneof_case_[0] = kBegin;
}
inline void TransactionSelector::clear_begin() {
  if (_internal_has_begin()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.selector_.begin_;
    }
    clear_has_selector();
  }
}
inline ::google::spanner::v1::TransactionOptions* TransactionSelector::release_begin() {
  // @@protoc_insertion_point(field_release:google.spanner.v1.TransactionSelector.begin)
  if (_internal_has_begin()) {
    clear_has_selector();
    ::google::spanner::v1::TransactionOptions* temp = _impl_.selector_.begin_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.selector_.begin_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::spanner::v1::TransactionOptions& TransactionSelector::_internal_begin() const {
  return _internal_has_begin()
      ? *_impl_.selector_.begin_
      : reinterpret_cast< ::google::spanner::v1::TransactionOptions&>(::google::spanner::v1::_TransactionOptions_default_instance_);
}
inline const ::google::spanner::v1::TransactionOptions& TransactionSelector::begin() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.TransactionSelector.begin)
  return _internal_begin();
}
inline ::google::spanner::v1::TransactionOptions* TransactionSelector::unsafe_arena_release_begin() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.spanner.v1.TransactionSelector.begin)
  if (_internal_has_begin()) {
    clear_has_selector();
    ::google::spanner::v1::TransactionOptions* temp = _impl_.selector_.begin_;
    _impl_.selector_.begin_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TransactionSelector::unsafe_arena_set_allocated_begin(::google::spanner::v1::TransactionOptions* begin) {
  clear_selector();
  if (begin) {
    set_has_begin();
    _impl_.selector_.begin_ = begin;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.spanner.v1.TransactionSelector.begin)
}
inline ::google::spanner::v1::TransactionOptions* TransactionSelector::_internal_mutable_begin() {
  if (!_internal_has_begin()) {
    clear_selector();
    set_has_begin();
    _impl_.selector_.begin_ = CreateMaybeMessage< ::google::spanner::v1::TransactionOptions >(GetArenaForAllocation());
  }
  return _impl_.selector_.begin_;
}
inline ::google::spanner::v1::TransactionOptions* TransactionSelector::mutable_begin() {
  ::google::spanner::v1::TransactionOptions* _msg = _internal_mutable_begin();
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.TransactionSelector.begin)
  return _msg;
}

inline bool TransactionSelector::has_selector() const {
  return selector_case() != SELECTOR_NOT_SET;
}
inline void TransactionSelector::clear_has_selector() {
  _impl_._oneof_case_[0] = SELECTOR_NOT_SET;
}
inline TransactionSelector::SelectorCase TransactionSelector::selector_case() const {
  return TransactionSelector::SelectorCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace spanner
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fspanner_2fv1_2ftransaction_2eproto
