// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/spanner/v1/result_set.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fspanner_2fv1_2fresult_5fset_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fspanner_2fv1_2fresult_5fset_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/struct.pb.h>
#include "google/spanner/v1/query_plan.pb.h"
#include "google/spanner/v1/transaction.pb.h"
#include "google/spanner/v1/type.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fspanner_2fv1_2fresult_5fset_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fspanner_2fv1_2fresult_5fset_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fspanner_2fv1_2fresult_5fset_2eproto;
namespace google {
namespace spanner {
namespace v1 {
class PartialResultSet;
struct PartialResultSetDefaultTypeInternal;
extern PartialResultSetDefaultTypeInternal _PartialResultSet_default_instance_;
class ResultSet;
struct ResultSetDefaultTypeInternal;
extern ResultSetDefaultTypeInternal _ResultSet_default_instance_;
class ResultSetMetadata;
struct ResultSetMetadataDefaultTypeInternal;
extern ResultSetMetadataDefaultTypeInternal _ResultSetMetadata_default_instance_;
class ResultSetStats;
struct ResultSetStatsDefaultTypeInternal;
extern ResultSetStatsDefaultTypeInternal _ResultSetStats_default_instance_;
}  // namespace v1
}  // namespace spanner
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::spanner::v1::PartialResultSet* Arena::CreateMaybeMessage<::google::spanner::v1::PartialResultSet>(Arena*);
template<> ::google::spanner::v1::ResultSet* Arena::CreateMaybeMessage<::google::spanner::v1::ResultSet>(Arena*);
template<> ::google::spanner::v1::ResultSetMetadata* Arena::CreateMaybeMessage<::google::spanner::v1::ResultSetMetadata>(Arena*);
template<> ::google::spanner::v1::ResultSetStats* Arena::CreateMaybeMessage<::google::spanner::v1::ResultSetStats>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace spanner {
namespace v1 {

// ===================================================================

class ResultSet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.spanner.v1.ResultSet) */ {
 public:
  inline ResultSet() : ResultSet(nullptr) {}
  ~ResultSet() override;
  explicit PROTOBUF_CONSTEXPR ResultSet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResultSet(const ResultSet& from);
  ResultSet(ResultSet&& from) noexcept
    : ResultSet() {
    *this = ::std::move(from);
  }

  inline ResultSet& operator=(const ResultSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResultSet& operator=(ResultSet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResultSet& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResultSet* internal_default_instance() {
    return reinterpret_cast<const ResultSet*>(
               &_ResultSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ResultSet& a, ResultSet& b) {
    a.Swap(&b);
  }
  inline void Swap(ResultSet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResultSet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResultSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResultSet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResultSet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ResultSet& from) {
    ResultSet::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResultSet* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.spanner.v1.ResultSet";
  }
  protected:
  explicit ResultSet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowsFieldNumber = 2,
    kMetadataFieldNumber = 1,
    kStatsFieldNumber = 3,
  };
  // repeated .google.protobuf.ListValue rows = 2;
  int rows_size() const;
  private:
  int _internal_rows_size() const;
  public:
  void clear_rows();
  ::PROTOBUF_NAMESPACE_ID::ListValue* mutable_rows(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::ListValue >*
      mutable_rows();
  private:
  const ::PROTOBUF_NAMESPACE_ID::ListValue& _internal_rows(int index) const;
  ::PROTOBUF_NAMESPACE_ID::ListValue* _internal_add_rows();
  public:
  const ::PROTOBUF_NAMESPACE_ID::ListValue& rows(int index) const;
  ::PROTOBUF_NAMESPACE_ID::ListValue* add_rows();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::ListValue >&
      rows() const;

  // .google.spanner.v1.ResultSetMetadata metadata = 1;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::google::spanner::v1::ResultSetMetadata& metadata() const;
  PROTOBUF_NODISCARD ::google::spanner::v1::ResultSetMetadata* release_metadata();
  ::google::spanner::v1::ResultSetMetadata* mutable_metadata();
  void set_allocated_metadata(::google::spanner::v1::ResultSetMetadata* metadata);
  private:
  const ::google::spanner::v1::ResultSetMetadata& _internal_metadata() const;
  ::google::spanner::v1::ResultSetMetadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::google::spanner::v1::ResultSetMetadata* metadata);
  ::google::spanner::v1::ResultSetMetadata* unsafe_arena_release_metadata();

  // .google.spanner.v1.ResultSetStats stats = 3;
  bool has_stats() const;
  private:
  bool _internal_has_stats() const;
  public:
  void clear_stats();
  const ::google::spanner::v1::ResultSetStats& stats() const;
  PROTOBUF_NODISCARD ::google::spanner::v1::ResultSetStats* release_stats();
  ::google::spanner::v1::ResultSetStats* mutable_stats();
  void set_allocated_stats(::google::spanner::v1::ResultSetStats* stats);
  private:
  const ::google::spanner::v1::ResultSetStats& _internal_stats() const;
  ::google::spanner::v1::ResultSetStats* _internal_mutable_stats();
  public:
  void unsafe_arena_set_allocated_stats(
      ::google::spanner::v1::ResultSetStats* stats);
  ::google::spanner::v1::ResultSetStats* unsafe_arena_release_stats();

  // @@protoc_insertion_point(class_scope:google.spanner.v1.ResultSet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::ListValue > rows_;
    ::google::spanner::v1::ResultSetMetadata* metadata_;
    ::google::spanner::v1::ResultSetStats* stats_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fspanner_2fv1_2fresult_5fset_2eproto;
};
// -------------------------------------------------------------------

class PartialResultSet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.spanner.v1.PartialResultSet) */ {
 public:
  inline PartialResultSet() : PartialResultSet(nullptr) {}
  ~PartialResultSet() override;
  explicit PROTOBUF_CONSTEXPR PartialResultSet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PartialResultSet(const PartialResultSet& from);
  PartialResultSet(PartialResultSet&& from) noexcept
    : PartialResultSet() {
    *this = ::std::move(from);
  }

  inline PartialResultSet& operator=(const PartialResultSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline PartialResultSet& operator=(PartialResultSet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PartialResultSet& default_instance() {
    return *internal_default_instance();
  }
  static inline const PartialResultSet* internal_default_instance() {
    return reinterpret_cast<const PartialResultSet*>(
               &_PartialResultSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PartialResultSet& a, PartialResultSet& b) {
    a.Swap(&b);
  }
  inline void Swap(PartialResultSet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PartialResultSet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PartialResultSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PartialResultSet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PartialResultSet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PartialResultSet& from) {
    PartialResultSet::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PartialResultSet* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.spanner.v1.PartialResultSet";
  }
  protected:
  explicit PartialResultSet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 2,
    kResumeTokenFieldNumber = 4,
    kMetadataFieldNumber = 1,
    kStatsFieldNumber = 5,
    kChunkedValueFieldNumber = 3,
  };
  // repeated .google.protobuf.Value values = 2;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  ::PROTOBUF_NAMESPACE_ID::Value* mutable_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Value >*
      mutable_values();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Value& _internal_values(int index) const;
  ::PROTOBUF_NAMESPACE_ID::Value* _internal_add_values();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Value& values(int index) const;
  ::PROTOBUF_NAMESPACE_ID::Value* add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Value >&
      values() const;

  // bytes resume_token = 4;
  void clear_resume_token();
  const std::string& resume_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_resume_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_resume_token();
  PROTOBUF_NODISCARD std::string* release_resume_token();
  void set_allocated_resume_token(std::string* resume_token);
  private:
  const std::string& _internal_resume_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_resume_token(const std::string& value);
  std::string* _internal_mutable_resume_token();
  public:

  // .google.spanner.v1.ResultSetMetadata metadata = 1;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::google::spanner::v1::ResultSetMetadata& metadata() const;
  PROTOBUF_NODISCARD ::google::spanner::v1::ResultSetMetadata* release_metadata();
  ::google::spanner::v1::ResultSetMetadata* mutable_metadata();
  void set_allocated_metadata(::google::spanner::v1::ResultSetMetadata* metadata);
  private:
  const ::google::spanner::v1::ResultSetMetadata& _internal_metadata() const;
  ::google::spanner::v1::ResultSetMetadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::google::spanner::v1::ResultSetMetadata* metadata);
  ::google::spanner::v1::ResultSetMetadata* unsafe_arena_release_metadata();

  // .google.spanner.v1.ResultSetStats stats = 5;
  bool has_stats() const;
  private:
  bool _internal_has_stats() const;
  public:
  void clear_stats();
  const ::google::spanner::v1::ResultSetStats& stats() const;
  PROTOBUF_NODISCARD ::google::spanner::v1::ResultSetStats* release_stats();
  ::google::spanner::v1::ResultSetStats* mutable_stats();
  void set_allocated_stats(::google::spanner::v1::ResultSetStats* stats);
  private:
  const ::google::spanner::v1::ResultSetStats& _internal_stats() const;
  ::google::spanner::v1::ResultSetStats* _internal_mutable_stats();
  public:
  void unsafe_arena_set_allocated_stats(
      ::google::spanner::v1::ResultSetStats* stats);
  ::google::spanner::v1::ResultSetStats* unsafe_arena_release_stats();

  // bool chunked_value = 3;
  void clear_chunked_value();
  bool chunked_value() const;
  void set_chunked_value(bool value);
  private:
  bool _internal_chunked_value() const;
  void _internal_set_chunked_value(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.spanner.v1.PartialResultSet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Value > values_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resume_token_;
    ::google::spanner::v1::ResultSetMetadata* metadata_;
    ::google::spanner::v1::ResultSetStats* stats_;
    bool chunked_value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fspanner_2fv1_2fresult_5fset_2eproto;
};
// -------------------------------------------------------------------

class ResultSetMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.spanner.v1.ResultSetMetadata) */ {
 public:
  inline ResultSetMetadata() : ResultSetMetadata(nullptr) {}
  ~ResultSetMetadata() override;
  explicit PROTOBUF_CONSTEXPR ResultSetMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResultSetMetadata(const ResultSetMetadata& from);
  ResultSetMetadata(ResultSetMetadata&& from) noexcept
    : ResultSetMetadata() {
    *this = ::std::move(from);
  }

  inline ResultSetMetadata& operator=(const ResultSetMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResultSetMetadata& operator=(ResultSetMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResultSetMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResultSetMetadata* internal_default_instance() {
    return reinterpret_cast<const ResultSetMetadata*>(
               &_ResultSetMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ResultSetMetadata& a, ResultSetMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(ResultSetMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResultSetMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResultSetMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResultSetMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResultSetMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ResultSetMetadata& from) {
    ResultSetMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResultSetMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.spanner.v1.ResultSetMetadata";
  }
  protected:
  explicit ResultSetMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowTypeFieldNumber = 1,
    kTransactionFieldNumber = 2,
  };
  // .google.spanner.v1.StructType row_type = 1;
  bool has_row_type() const;
  private:
  bool _internal_has_row_type() const;
  public:
  void clear_row_type();
  const ::google::spanner::v1::StructType& row_type() const;
  PROTOBUF_NODISCARD ::google::spanner::v1::StructType* release_row_type();
  ::google::spanner::v1::StructType* mutable_row_type();
  void set_allocated_row_type(::google::spanner::v1::StructType* row_type);
  private:
  const ::google::spanner::v1::StructType& _internal_row_type() const;
  ::google::spanner::v1::StructType* _internal_mutable_row_type();
  public:
  void unsafe_arena_set_allocated_row_type(
      ::google::spanner::v1::StructType* row_type);
  ::google::spanner::v1::StructType* unsafe_arena_release_row_type();

  // .google.spanner.v1.Transaction transaction = 2;
  bool has_transaction() const;
  private:
  bool _internal_has_transaction() const;
  public:
  void clear_transaction();
  const ::google::spanner::v1::Transaction& transaction() const;
  PROTOBUF_NODISCARD ::google::spanner::v1::Transaction* release_transaction();
  ::google::spanner::v1::Transaction* mutable_transaction();
  void set_allocated_transaction(::google::spanner::v1::Transaction* transaction);
  private:
  const ::google::spanner::v1::Transaction& _internal_transaction() const;
  ::google::spanner::v1::Transaction* _internal_mutable_transaction();
  public:
  void unsafe_arena_set_allocated_transaction(
      ::google::spanner::v1::Transaction* transaction);
  ::google::spanner::v1::Transaction* unsafe_arena_release_transaction();

  // @@protoc_insertion_point(class_scope:google.spanner.v1.ResultSetMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::spanner::v1::StructType* row_type_;
    ::google::spanner::v1::Transaction* transaction_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fspanner_2fv1_2fresult_5fset_2eproto;
};
// -------------------------------------------------------------------

class ResultSetStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.spanner.v1.ResultSetStats) */ {
 public:
  inline ResultSetStats() : ResultSetStats(nullptr) {}
  ~ResultSetStats() override;
  explicit PROTOBUF_CONSTEXPR ResultSetStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResultSetStats(const ResultSetStats& from);
  ResultSetStats(ResultSetStats&& from) noexcept
    : ResultSetStats() {
    *this = ::std::move(from);
  }

  inline ResultSetStats& operator=(const ResultSetStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResultSetStats& operator=(ResultSetStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResultSetStats& default_instance() {
    return *internal_default_instance();
  }
  enum RowCountCase {
    kRowCountExact = 3,
    kRowCountLowerBound = 4,
    ROW_COUNT_NOT_SET = 0,
  };

  static inline const ResultSetStats* internal_default_instance() {
    return reinterpret_cast<const ResultSetStats*>(
               &_ResultSetStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ResultSetStats& a, ResultSetStats& b) {
    a.Swap(&b);
  }
  inline void Swap(ResultSetStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResultSetStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResultSetStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResultSetStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResultSetStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ResultSetStats& from) {
    ResultSetStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResultSetStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.spanner.v1.ResultSetStats";
  }
  protected:
  explicit ResultSetStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryPlanFieldNumber = 1,
    kQueryStatsFieldNumber = 2,
    kRowCountExactFieldNumber = 3,
    kRowCountLowerBoundFieldNumber = 4,
  };
  // .google.spanner.v1.QueryPlan query_plan = 1;
  bool has_query_plan() const;
  private:
  bool _internal_has_query_plan() const;
  public:
  void clear_query_plan();
  const ::google::spanner::v1::QueryPlan& query_plan() const;
  PROTOBUF_NODISCARD ::google::spanner::v1::QueryPlan* release_query_plan();
  ::google::spanner::v1::QueryPlan* mutable_query_plan();
  void set_allocated_query_plan(::google::spanner::v1::QueryPlan* query_plan);
  private:
  const ::google::spanner::v1::QueryPlan& _internal_query_plan() const;
  ::google::spanner::v1::QueryPlan* _internal_mutable_query_plan();
  public:
  void unsafe_arena_set_allocated_query_plan(
      ::google::spanner::v1::QueryPlan* query_plan);
  ::google::spanner::v1::QueryPlan* unsafe_arena_release_query_plan();

  // .google.protobuf.Struct query_stats = 2;
  bool has_query_stats() const;
  private:
  bool _internal_has_query_stats() const;
  public:
  void clear_query_stats();
  const ::PROTOBUF_NAMESPACE_ID::Struct& query_stats() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_query_stats();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_query_stats();
  void set_allocated_query_stats(::PROTOBUF_NAMESPACE_ID::Struct* query_stats);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_query_stats() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_query_stats();
  public:
  void unsafe_arena_set_allocated_query_stats(
      ::PROTOBUF_NAMESPACE_ID::Struct* query_stats);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_query_stats();

  // int64 row_count_exact = 3;
  bool has_row_count_exact() const;
  private:
  bool _internal_has_row_count_exact() const;
  public:
  void clear_row_count_exact();
  int64_t row_count_exact() const;
  void set_row_count_exact(int64_t value);
  private:
  int64_t _internal_row_count_exact() const;
  void _internal_set_row_count_exact(int64_t value);
  public:

  // int64 row_count_lower_bound = 4;
  bool has_row_count_lower_bound() const;
  private:
  bool _internal_has_row_count_lower_bound() const;
  public:
  void clear_row_count_lower_bound();
  int64_t row_count_lower_bound() const;
  void set_row_count_lower_bound(int64_t value);
  private:
  int64_t _internal_row_count_lower_bound() const;
  void _internal_set_row_count_lower_bound(int64_t value);
  public:

  void clear_row_count();
  RowCountCase row_count_case() const;
  // @@protoc_insertion_point(class_scope:google.spanner.v1.ResultSetStats)
 private:
  class _Internal;
  void set_has_row_count_exact();
  void set_has_row_count_lower_bound();

  inline bool has_row_count() const;
  inline void clear_has_row_count();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::spanner::v1::QueryPlan* query_plan_;
    ::PROTOBUF_NAMESPACE_ID::Struct* query_stats_;
    union RowCountUnion {
      constexpr RowCountUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      int64_t row_count_exact_;
      int64_t row_count_lower_bound_;
    } row_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fspanner_2fv1_2fresult_5fset_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ResultSet

// .google.spanner.v1.ResultSetMetadata metadata = 1;
inline bool ResultSet::_internal_has_metadata() const {
  return this != internal_default_instance() && _impl_.metadata_ != nullptr;
}
inline bool ResultSet::has_metadata() const {
  return _internal_has_metadata();
}
inline void ResultSet::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
}
inline const ::google::spanner::v1::ResultSetMetadata& ResultSet::_internal_metadata() const {
  const ::google::spanner::v1::ResultSetMetadata* p = _impl_.metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::spanner::v1::ResultSetMetadata&>(
      ::google::spanner::v1::_ResultSetMetadata_default_instance_);
}
inline const ::google::spanner::v1::ResultSetMetadata& ResultSet::metadata() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.ResultSet.metadata)
  return _internal_metadata();
}
inline void ResultSet::unsafe_arena_set_allocated_metadata(
    ::google::spanner::v1::ResultSetMetadata* metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metadata_);
  }
  _impl_.metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.spanner.v1.ResultSet.metadata)
}
inline ::google::spanner::v1::ResultSetMetadata* ResultSet::release_metadata() {
  
  ::google::spanner::v1::ResultSetMetadata* temp = _impl_.metadata_;
  _impl_.metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::spanner::v1::ResultSetMetadata* ResultSet::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:google.spanner.v1.ResultSet.metadata)
  
  ::google::spanner::v1::ResultSetMetadata* temp = _impl_.metadata_;
  _impl_.metadata_ = nullptr;
  return temp;
}
inline ::google::spanner::v1::ResultSetMetadata* ResultSet::_internal_mutable_metadata() {
  
  if (_impl_.metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::spanner::v1::ResultSetMetadata>(GetArenaForAllocation());
    _impl_.metadata_ = p;
  }
  return _impl_.metadata_;
}
inline ::google::spanner::v1::ResultSetMetadata* ResultSet::mutable_metadata() {
  ::google::spanner::v1::ResultSetMetadata* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.ResultSet.metadata)
  return _msg;
}
inline void ResultSet::set_allocated_metadata(::google::spanner::v1::ResultSetMetadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(metadata);
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:google.spanner.v1.ResultSet.metadata)
}

// repeated .google.protobuf.ListValue rows = 2;
inline int ResultSet::_internal_rows_size() const {
  return _impl_.rows_.size();
}
inline int ResultSet::rows_size() const {
  return _internal_rows_size();
}
inline ::PROTOBUF_NAMESPACE_ID::ListValue* ResultSet::mutable_rows(int index) {
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.ResultSet.rows)
  return _impl_.rows_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::ListValue >*
ResultSet::mutable_rows() {
  // @@protoc_insertion_point(field_mutable_list:google.spanner.v1.ResultSet.rows)
  return &_impl_.rows_;
}
inline const ::PROTOBUF_NAMESPACE_ID::ListValue& ResultSet::_internal_rows(int index) const {
  return _impl_.rows_.Get(index);
}
inline const ::PROTOBUF_NAMESPACE_ID::ListValue& ResultSet::rows(int index) const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.ResultSet.rows)
  return _internal_rows(index);
}
inline ::PROTOBUF_NAMESPACE_ID::ListValue* ResultSet::_internal_add_rows() {
  return _impl_.rows_.Add();
}
inline ::PROTOBUF_NAMESPACE_ID::ListValue* ResultSet::add_rows() {
  ::PROTOBUF_NAMESPACE_ID::ListValue* _add = _internal_add_rows();
  // @@protoc_insertion_point(field_add:google.spanner.v1.ResultSet.rows)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::ListValue >&
ResultSet::rows() const {
  // @@protoc_insertion_point(field_list:google.spanner.v1.ResultSet.rows)
  return _impl_.rows_;
}

// .google.spanner.v1.ResultSetStats stats = 3;
inline bool ResultSet::_internal_has_stats() const {
  return this != internal_default_instance() && _impl_.stats_ != nullptr;
}
inline bool ResultSet::has_stats() const {
  return _internal_has_stats();
}
inline void ResultSet::clear_stats() {
  if (GetArenaForAllocation() == nullptr && _impl_.stats_ != nullptr) {
    delete _impl_.stats_;
  }
  _impl_.stats_ = nullptr;
}
inline const ::google::spanner::v1::ResultSetStats& ResultSet::_internal_stats() const {
  const ::google::spanner::v1::ResultSetStats* p = _impl_.stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::spanner::v1::ResultSetStats&>(
      ::google::spanner::v1::_ResultSetStats_default_instance_);
}
inline const ::google::spanner::v1::ResultSetStats& ResultSet::stats() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.ResultSet.stats)
  return _internal_stats();
}
inline void ResultSet::unsafe_arena_set_allocated_stats(
    ::google::spanner::v1::ResultSetStats* stats) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stats_);
  }
  _impl_.stats_ = stats;
  if (stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.spanner.v1.ResultSet.stats)
}
inline ::google::spanner::v1::ResultSetStats* ResultSet::release_stats() {
  
  ::google::spanner::v1::ResultSetStats* temp = _impl_.stats_;
  _impl_.stats_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::spanner::v1::ResultSetStats* ResultSet::unsafe_arena_release_stats() {
  // @@protoc_insertion_point(field_release:google.spanner.v1.ResultSet.stats)
  
  ::google::spanner::v1::ResultSetStats* temp = _impl_.stats_;
  _impl_.stats_ = nullptr;
  return temp;
}
inline ::google::spanner::v1::ResultSetStats* ResultSet::_internal_mutable_stats() {
  
  if (_impl_.stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::spanner::v1::ResultSetStats>(GetArenaForAllocation());
    _impl_.stats_ = p;
  }
  return _impl_.stats_;
}
inline ::google::spanner::v1::ResultSetStats* ResultSet::mutable_stats() {
  ::google::spanner::v1::ResultSetStats* _msg = _internal_mutable_stats();
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.ResultSet.stats)
  return _msg;
}
inline void ResultSet::set_allocated_stats(::google::spanner::v1::ResultSetStats* stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.stats_;
  }
  if (stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(stats);
    if (message_arena != submessage_arena) {
      stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stats, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.stats_ = stats;
  // @@protoc_insertion_point(field_set_allocated:google.spanner.v1.ResultSet.stats)
}

// -------------------------------------------------------------------

// PartialResultSet

// .google.spanner.v1.ResultSetMetadata metadata = 1;
inline bool PartialResultSet::_internal_has_metadata() const {
  return this != internal_default_instance() && _impl_.metadata_ != nullptr;
}
inline bool PartialResultSet::has_metadata() const {
  return _internal_has_metadata();
}
inline void PartialResultSet::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
}
inline const ::google::spanner::v1::ResultSetMetadata& PartialResultSet::_internal_metadata() const {
  const ::google::spanner::v1::ResultSetMetadata* p = _impl_.metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::spanner::v1::ResultSetMetadata&>(
      ::google::spanner::v1::_ResultSetMetadata_default_instance_);
}
inline const ::google::spanner::v1::ResultSetMetadata& PartialResultSet::metadata() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.PartialResultSet.metadata)
  return _internal_metadata();
}
inline void PartialResultSet::unsafe_arena_set_allocated_metadata(
    ::google::spanner::v1::ResultSetMetadata* metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metadata_);
  }
  _impl_.metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.spanner.v1.PartialResultSet.metadata)
}
inline ::google::spanner::v1::ResultSetMetadata* PartialResultSet::release_metadata() {
  
  ::google::spanner::v1::ResultSetMetadata* temp = _impl_.metadata_;
  _impl_.metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::spanner::v1::ResultSetMetadata* PartialResultSet::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:google.spanner.v1.PartialResultSet.metadata)
  
  ::google::spanner::v1::ResultSetMetadata* temp = _impl_.metadata_;
  _impl_.metadata_ = nullptr;
  return temp;
}
inline ::google::spanner::v1::ResultSetMetadata* PartialResultSet::_internal_mutable_metadata() {
  
  if (_impl_.metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::spanner::v1::ResultSetMetadata>(GetArenaForAllocation());
    _impl_.metadata_ = p;
  }
  return _impl_.metadata_;
}
inline ::google::spanner::v1::ResultSetMetadata* PartialResultSet::mutable_metadata() {
  ::google::spanner::v1::ResultSetMetadata* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.PartialResultSet.metadata)
  return _msg;
}
inline void PartialResultSet::set_allocated_metadata(::google::spanner::v1::ResultSetMetadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(metadata);
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:google.spanner.v1.PartialResultSet.metadata)
}

// repeated .google.protobuf.Value values = 2;
inline int PartialResultSet::_internal_values_size() const {
  return _impl_.values_.size();
}
inline int PartialResultSet::values_size() const {
  return _internal_values_size();
}
inline ::PROTOBUF_NAMESPACE_ID::Value* PartialResultSet::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.PartialResultSet.values)
  return _impl_.values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Value >*
PartialResultSet::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:google.spanner.v1.PartialResultSet.values)
  return &_impl_.values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::Value& PartialResultSet::_internal_values(int index) const {
  return _impl_.values_.Get(index);
}
inline const ::PROTOBUF_NAMESPACE_ID::Value& PartialResultSet::values(int index) const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.PartialResultSet.values)
  return _internal_values(index);
}
inline ::PROTOBUF_NAMESPACE_ID::Value* PartialResultSet::_internal_add_values() {
  return _impl_.values_.Add();
}
inline ::PROTOBUF_NAMESPACE_ID::Value* PartialResultSet::add_values() {
  ::PROTOBUF_NAMESPACE_ID::Value* _add = _internal_add_values();
  // @@protoc_insertion_point(field_add:google.spanner.v1.PartialResultSet.values)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Value >&
PartialResultSet::values() const {
  // @@protoc_insertion_point(field_list:google.spanner.v1.PartialResultSet.values)
  return _impl_.values_;
}

// bool chunked_value = 3;
inline void PartialResultSet::clear_chunked_value() {
  _impl_.chunked_value_ = false;
}
inline bool PartialResultSet::_internal_chunked_value() const {
  return _impl_.chunked_value_;
}
inline bool PartialResultSet::chunked_value() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.PartialResultSet.chunked_value)
  return _internal_chunked_value();
}
inline void PartialResultSet::_internal_set_chunked_value(bool value) {
  
  _impl_.chunked_value_ = value;
}
inline void PartialResultSet::set_chunked_value(bool value) {
  _internal_set_chunked_value(value);
  // @@protoc_insertion_point(field_set:google.spanner.v1.PartialResultSet.chunked_value)
}

// bytes resume_token = 4;
inline void PartialResultSet::clear_resume_token() {
  _impl_.resume_token_.ClearToEmpty();
}
inline const std::string& PartialResultSet::resume_token() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.PartialResultSet.resume_token)
  return _internal_resume_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PartialResultSet::set_resume_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.resume_token_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.spanner.v1.PartialResultSet.resume_token)
}
inline std::string* PartialResultSet::mutable_resume_token() {
  std::string* _s = _internal_mutable_resume_token();
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.PartialResultSet.resume_token)
  return _s;
}
inline const std::string& PartialResultSet::_internal_resume_token() const {
  return _impl_.resume_token_.Get();
}
inline void PartialResultSet::_internal_set_resume_token(const std::string& value) {
  
  _impl_.resume_token_.Set(value, GetArenaForAllocation());
}
inline std::string* PartialResultSet::_internal_mutable_resume_token() {
  
  return _impl_.resume_token_.Mutable(GetArenaForAllocation());
}
inline std::string* PartialResultSet::release_resume_token() {
  // @@protoc_insertion_point(field_release:google.spanner.v1.PartialResultSet.resume_token)
  return _impl_.resume_token_.Release();
}
inline void PartialResultSet::set_allocated_resume_token(std::string* resume_token) {
  if (resume_token != nullptr) {
    
  } else {
    
  }
  _impl_.resume_token_.SetAllocated(resume_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.resume_token_.IsDefault()) {
    _impl_.resume_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.spanner.v1.PartialResultSet.resume_token)
}

// .google.spanner.v1.ResultSetStats stats = 5;
inline bool PartialResultSet::_internal_has_stats() const {
  return this != internal_default_instance() && _impl_.stats_ != nullptr;
}
inline bool PartialResultSet::has_stats() const {
  return _internal_has_stats();
}
inline void PartialResultSet::clear_stats() {
  if (GetArenaForAllocation() == nullptr && _impl_.stats_ != nullptr) {
    delete _impl_.stats_;
  }
  _impl_.stats_ = nullptr;
}
inline const ::google::spanner::v1::ResultSetStats& PartialResultSet::_internal_stats() const {
  const ::google::spanner::v1::ResultSetStats* p = _impl_.stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::spanner::v1::ResultSetStats&>(
      ::google::spanner::v1::_ResultSetStats_default_instance_);
}
inline const ::google::spanner::v1::ResultSetStats& PartialResultSet::stats() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.PartialResultSet.stats)
  return _internal_stats();
}
inline void PartialResultSet::unsafe_arena_set_allocated_stats(
    ::google::spanner::v1::ResultSetStats* stats) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stats_);
  }
  _impl_.stats_ = stats;
  if (stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.spanner.v1.PartialResultSet.stats)
}
inline ::google::spanner::v1::ResultSetStats* PartialResultSet::release_stats() {
  
  ::google::spanner::v1::ResultSetStats* temp = _impl_.stats_;
  _impl_.stats_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::spanner::v1::ResultSetStats* PartialResultSet::unsafe_arena_release_stats() {
  // @@protoc_insertion_point(field_release:google.spanner.v1.PartialResultSet.stats)
  
  ::google::spanner::v1::ResultSetStats* temp = _impl_.stats_;
  _impl_.stats_ = nullptr;
  return temp;
}
inline ::google::spanner::v1::ResultSetStats* PartialResultSet::_internal_mutable_stats() {
  
  if (_impl_.stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::spanner::v1::ResultSetStats>(GetArenaForAllocation());
    _impl_.stats_ = p;
  }
  return _impl_.stats_;
}
inline ::google::spanner::v1::ResultSetStats* PartialResultSet::mutable_stats() {
  ::google::spanner::v1::ResultSetStats* _msg = _internal_mutable_stats();
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.PartialResultSet.stats)
  return _msg;
}
inline void PartialResultSet::set_allocated_stats(::google::spanner::v1::ResultSetStats* stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.stats_;
  }
  if (stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(stats);
    if (message_arena != submessage_arena) {
      stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stats, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.stats_ = stats;
  // @@protoc_insertion_point(field_set_allocated:google.spanner.v1.PartialResultSet.stats)
}

// -------------------------------------------------------------------

// ResultSetMetadata

// .google.spanner.v1.StructType row_type = 1;
inline bool ResultSetMetadata::_internal_has_row_type() const {
  return this != internal_default_instance() && _impl_.row_type_ != nullptr;
}
inline bool ResultSetMetadata::has_row_type() const {
  return _internal_has_row_type();
}
inline const ::google::spanner::v1::StructType& ResultSetMetadata::_internal_row_type() const {
  const ::google::spanner::v1::StructType* p = _impl_.row_type_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::spanner::v1::StructType&>(
      ::google::spanner::v1::_StructType_default_instance_);
}
inline const ::google::spanner::v1::StructType& ResultSetMetadata::row_type() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.ResultSetMetadata.row_type)
  return _internal_row_type();
}
inline void ResultSetMetadata::unsafe_arena_set_allocated_row_type(
    ::google::spanner::v1::StructType* row_type) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.row_type_);
  }
  _impl_.row_type_ = row_type;
  if (row_type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.spanner.v1.ResultSetMetadata.row_type)
}
inline ::google::spanner::v1::StructType* ResultSetMetadata::release_row_type() {
  
  ::google::spanner::v1::StructType* temp = _impl_.row_type_;
  _impl_.row_type_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::spanner::v1::StructType* ResultSetMetadata::unsafe_arena_release_row_type() {
  // @@protoc_insertion_point(field_release:google.spanner.v1.ResultSetMetadata.row_type)
  
  ::google::spanner::v1::StructType* temp = _impl_.row_type_;
  _impl_.row_type_ = nullptr;
  return temp;
}
inline ::google::spanner::v1::StructType* ResultSetMetadata::_internal_mutable_row_type() {
  
  if (_impl_.row_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::spanner::v1::StructType>(GetArenaForAllocation());
    _impl_.row_type_ = p;
  }
  return _impl_.row_type_;
}
inline ::google::spanner::v1::StructType* ResultSetMetadata::mutable_row_type() {
  ::google::spanner::v1::StructType* _msg = _internal_mutable_row_type();
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.ResultSetMetadata.row_type)
  return _msg;
}
inline void ResultSetMetadata::set_allocated_row_type(::google::spanner::v1::StructType* row_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.row_type_);
  }
  if (row_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(row_type));
    if (message_arena != submessage_arena) {
      row_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, row_type, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.row_type_ = row_type;
  // @@protoc_insertion_point(field_set_allocated:google.spanner.v1.ResultSetMetadata.row_type)
}

// .google.spanner.v1.Transaction transaction = 2;
inline bool ResultSetMetadata::_internal_has_transaction() const {
  return this != internal_default_instance() && _impl_.transaction_ != nullptr;
}
inline bool ResultSetMetadata::has_transaction() const {
  return _internal_has_transaction();
}
inline const ::google::spanner::v1::Transaction& ResultSetMetadata::_internal_transaction() const {
  const ::google::spanner::v1::Transaction* p = _impl_.transaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::spanner::v1::Transaction&>(
      ::google::spanner::v1::_Transaction_default_instance_);
}
inline const ::google::spanner::v1::Transaction& ResultSetMetadata::transaction() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.ResultSetMetadata.transaction)
  return _internal_transaction();
}
inline void ResultSetMetadata::unsafe_arena_set_allocated_transaction(
    ::google::spanner::v1::Transaction* transaction) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transaction_);
  }
  _impl_.transaction_ = transaction;
  if (transaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.spanner.v1.ResultSetMetadata.transaction)
}
inline ::google::spanner::v1::Transaction* ResultSetMetadata::release_transaction() {
  
  ::google::spanner::v1::Transaction* temp = _impl_.transaction_;
  _impl_.transaction_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::spanner::v1::Transaction* ResultSetMetadata::unsafe_arena_release_transaction() {
  // @@protoc_insertion_point(field_release:google.spanner.v1.ResultSetMetadata.transaction)
  
  ::google::spanner::v1::Transaction* temp = _impl_.transaction_;
  _impl_.transaction_ = nullptr;
  return temp;
}
inline ::google::spanner::v1::Transaction* ResultSetMetadata::_internal_mutable_transaction() {
  
  if (_impl_.transaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::spanner::v1::Transaction>(GetArenaForAllocation());
    _impl_.transaction_ = p;
  }
  return _impl_.transaction_;
}
inline ::google::spanner::v1::Transaction* ResultSetMetadata::mutable_transaction() {
  ::google::spanner::v1::Transaction* _msg = _internal_mutable_transaction();
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.ResultSetMetadata.transaction)
  return _msg;
}
inline void ResultSetMetadata::set_allocated_transaction(::google::spanner::v1::Transaction* transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transaction_);
  }
  if (transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transaction));
    if (message_arena != submessage_arena) {
      transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transaction, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.transaction_ = transaction;
  // @@protoc_insertion_point(field_set_allocated:google.spanner.v1.ResultSetMetadata.transaction)
}

// -------------------------------------------------------------------

// ResultSetStats

// .google.spanner.v1.QueryPlan query_plan = 1;
inline bool ResultSetStats::_internal_has_query_plan() const {
  return this != internal_default_instance() && _impl_.query_plan_ != nullptr;
}
inline bool ResultSetStats::has_query_plan() const {
  return _internal_has_query_plan();
}
inline const ::google::spanner::v1::QueryPlan& ResultSetStats::_internal_query_plan() const {
  const ::google::spanner::v1::QueryPlan* p = _impl_.query_plan_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::spanner::v1::QueryPlan&>(
      ::google::spanner::v1::_QueryPlan_default_instance_);
}
inline const ::google::spanner::v1::QueryPlan& ResultSetStats::query_plan() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.ResultSetStats.query_plan)
  return _internal_query_plan();
}
inline void ResultSetStats::unsafe_arena_set_allocated_query_plan(
    ::google::spanner::v1::QueryPlan* query_plan) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.query_plan_);
  }
  _impl_.query_plan_ = query_plan;
  if (query_plan) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.spanner.v1.ResultSetStats.query_plan)
}
inline ::google::spanner::v1::QueryPlan* ResultSetStats::release_query_plan() {
  
  ::google::spanner::v1::QueryPlan* temp = _impl_.query_plan_;
  _impl_.query_plan_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::spanner::v1::QueryPlan* ResultSetStats::unsafe_arena_release_query_plan() {
  // @@protoc_insertion_point(field_release:google.spanner.v1.ResultSetStats.query_plan)
  
  ::google::spanner::v1::QueryPlan* temp = _impl_.query_plan_;
  _impl_.query_plan_ = nullptr;
  return temp;
}
inline ::google::spanner::v1::QueryPlan* ResultSetStats::_internal_mutable_query_plan() {
  
  if (_impl_.query_plan_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::spanner::v1::QueryPlan>(GetArenaForAllocation());
    _impl_.query_plan_ = p;
  }
  return _impl_.query_plan_;
}
inline ::google::spanner::v1::QueryPlan* ResultSetStats::mutable_query_plan() {
  ::google::spanner::v1::QueryPlan* _msg = _internal_mutable_query_plan();
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.ResultSetStats.query_plan)
  return _msg;
}
inline void ResultSetStats::set_allocated_query_plan(::google::spanner::v1::QueryPlan* query_plan) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.query_plan_);
  }
  if (query_plan) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(query_plan));
    if (message_arena != submessage_arena) {
      query_plan = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, query_plan, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.query_plan_ = query_plan;
  // @@protoc_insertion_point(field_set_allocated:google.spanner.v1.ResultSetStats.query_plan)
}

// .google.protobuf.Struct query_stats = 2;
inline bool ResultSetStats::_internal_has_query_stats() const {
  return this != internal_default_instance() && _impl_.query_stats_ != nullptr;
}
inline bool ResultSetStats::has_query_stats() const {
  return _internal_has_query_stats();
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& ResultSetStats::_internal_query_stats() const {
  const ::PROTOBUF_NAMESPACE_ID::Struct* p = _impl_.query_stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Struct&>(
      ::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& ResultSetStats::query_stats() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.ResultSetStats.query_stats)
  return _internal_query_stats();
}
inline void ResultSetStats::unsafe_arena_set_allocated_query_stats(
    ::PROTOBUF_NAMESPACE_ID::Struct* query_stats) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.query_stats_);
  }
  _impl_.query_stats_ = query_stats;
  if (query_stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.spanner.v1.ResultSetStats.query_stats)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* ResultSetStats::release_query_stats() {
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = _impl_.query_stats_;
  _impl_.query_stats_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* ResultSetStats::unsafe_arena_release_query_stats() {
  // @@protoc_insertion_point(field_release:google.spanner.v1.ResultSetStats.query_stats)
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = _impl_.query_stats_;
  _impl_.query_stats_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* ResultSetStats::_internal_mutable_query_stats() {
  
  if (_impl_.query_stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    _impl_.query_stats_ = p;
  }
  return _impl_.query_stats_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* ResultSetStats::mutable_query_stats() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_query_stats();
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.ResultSetStats.query_stats)
  return _msg;
}
inline void ResultSetStats::set_allocated_query_stats(::PROTOBUF_NAMESPACE_ID::Struct* query_stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.query_stats_);
  }
  if (query_stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(query_stats));
    if (message_arena != submessage_arena) {
      query_stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, query_stats, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.query_stats_ = query_stats;
  // @@protoc_insertion_point(field_set_allocated:google.spanner.v1.ResultSetStats.query_stats)
}

// int64 row_count_exact = 3;
inline bool ResultSetStats::_internal_has_row_count_exact() const {
  return row_count_case() == kRowCountExact;
}
inline bool ResultSetStats::has_row_count_exact() const {
  return _internal_has_row_count_exact();
}
inline void ResultSetStats::set_has_row_count_exact() {
  _impl_._oneof_case_[0] = kRowCountExact;
}
inline void ResultSetStats::clear_row_count_exact() {
  if (_internal_has_row_count_exact()) {
    _impl_.row_count_.row_count_exact_ = int64_t{0};
    clear_has_row_count();
  }
}
inline int64_t ResultSetStats::_internal_row_count_exact() const {
  if (_internal_has_row_count_exact()) {
    return _impl_.row_count_.row_count_exact_;
  }
  return int64_t{0};
}
inline void ResultSetStats::_internal_set_row_count_exact(int64_t value) {
  if (!_internal_has_row_count_exact()) {
    clear_row_count();
    set_has_row_count_exact();
  }
  _impl_.row_count_.row_count_exact_ = value;
}
inline int64_t ResultSetStats::row_count_exact() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.ResultSetStats.row_count_exact)
  return _internal_row_count_exact();
}
inline void ResultSetStats::set_row_count_exact(int64_t value) {
  _internal_set_row_count_exact(value);
  // @@protoc_insertion_point(field_set:google.spanner.v1.ResultSetStats.row_count_exact)
}

// int64 row_count_lower_bound = 4;
inline bool ResultSetStats::_internal_has_row_count_lower_bound() const {
  return row_count_case() == kRowCountLowerBound;
}
inline bool ResultSetStats::has_row_count_lower_bound() const {
  return _internal_has_row_count_lower_bound();
}
inline void ResultSetStats::set_has_row_count_lower_bound() {
  _impl_._oneof_case_[0] = kRowCountLowerBound;
}
inline void ResultSetStats::clear_row_count_lower_bound() {
  if (_internal_has_row_count_lower_bound()) {
    _impl_.row_count_.row_count_lower_bound_ = int64_t{0};
    clear_has_row_count();
  }
}
inline int64_t ResultSetStats::_internal_row_count_lower_bound() const {
  if (_internal_has_row_count_lower_bound()) {
    return _impl_.row_count_.row_count_lower_bound_;
  }
  return int64_t{0};
}
inline void ResultSetStats::_internal_set_row_count_lower_bound(int64_t value) {
  if (!_internal_has_row_count_lower_bound()) {
    clear_row_count();
    set_has_row_count_lower_bound();
  }
  _impl_.row_count_.row_count_lower_bound_ = value;
}
inline int64_t ResultSetStats::row_count_lower_bound() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.ResultSetStats.row_count_lower_bound)
  return _internal_row_count_lower_bound();
}
inline void ResultSetStats::set_row_count_lower_bound(int64_t value) {
  _internal_set_row_count_lower_bound(value);
  // @@protoc_insertion_point(field_set:google.spanner.v1.ResultSetStats.row_count_lower_bound)
}

inline bool ResultSetStats::has_row_count() const {
  return row_count_case() != ROW_COUNT_NOT_SET;
}
inline void ResultSetStats::clear_has_row_count() {
  _impl_._oneof_case_[0] = ROW_COUNT_NOT_SET;
}
inline ResultSetStats::RowCountCase ResultSetStats::row_count_case() const {
  return ResultSetStats::RowCountCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace spanner
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fspanner_2fv1_2fresult_5fset_2eproto
