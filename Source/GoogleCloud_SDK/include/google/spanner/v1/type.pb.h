// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/spanner/v1/type.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fspanner_2fv1_2ftype_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fspanner_2fv1_2ftype_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/field_behavior.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fspanner_2fv1_2ftype_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fspanner_2fv1_2ftype_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fspanner_2fv1_2ftype_2eproto;
namespace google {
namespace spanner {
namespace v1 {
class StructType;
struct StructTypeDefaultTypeInternal;
extern StructTypeDefaultTypeInternal _StructType_default_instance_;
class StructType_Field;
struct StructType_FieldDefaultTypeInternal;
extern StructType_FieldDefaultTypeInternal _StructType_Field_default_instance_;
class Type;
struct TypeDefaultTypeInternal;
extern TypeDefaultTypeInternal _Type_default_instance_;
}  // namespace v1
}  // namespace spanner
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::spanner::v1::StructType* Arena::CreateMaybeMessage<::google::spanner::v1::StructType>(Arena*);
template<> ::google::spanner::v1::StructType_Field* Arena::CreateMaybeMessage<::google::spanner::v1::StructType_Field>(Arena*);
template<> ::google::spanner::v1::Type* Arena::CreateMaybeMessage<::google::spanner::v1::Type>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace spanner {
namespace v1 {

enum TypeCode : int {
  TYPE_CODE_UNSPECIFIED = 0,
  BOOL = 1,
  INT64 = 2,
  FLOAT64 = 3,
  TIMESTAMP = 4,
  DATE = 5,
  STRING = 6,
  BYTES = 7,
  ARRAY = 8,
  STRUCT = 9,
  NUMERIC = 10,
  JSON = 11,
  TypeCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TypeCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TypeCode_IsValid(int value);
constexpr TypeCode TypeCode_MIN = TYPE_CODE_UNSPECIFIED;
constexpr TypeCode TypeCode_MAX = JSON;
constexpr int TypeCode_ARRAYSIZE = TypeCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TypeCode_descriptor();
template<typename T>
inline const std::string& TypeCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TypeCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TypeCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TypeCode_descriptor(), enum_t_value);
}
inline bool TypeCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TypeCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TypeCode>(
    TypeCode_descriptor(), name, value);
}
enum TypeAnnotationCode : int {
  TYPE_ANNOTATION_CODE_UNSPECIFIED = 0,
  PG_NUMERIC = 2,
  PG_JSONB = 3,
  TypeAnnotationCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TypeAnnotationCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TypeAnnotationCode_IsValid(int value);
constexpr TypeAnnotationCode TypeAnnotationCode_MIN = TYPE_ANNOTATION_CODE_UNSPECIFIED;
constexpr TypeAnnotationCode TypeAnnotationCode_MAX = PG_JSONB;
constexpr int TypeAnnotationCode_ARRAYSIZE = TypeAnnotationCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TypeAnnotationCode_descriptor();
template<typename T>
inline const std::string& TypeAnnotationCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TypeAnnotationCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TypeAnnotationCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TypeAnnotationCode_descriptor(), enum_t_value);
}
inline bool TypeAnnotationCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TypeAnnotationCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TypeAnnotationCode>(
    TypeAnnotationCode_descriptor(), name, value);
}
// ===================================================================

class Type final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.spanner.v1.Type) */ {
 public:
  inline Type() : Type(nullptr) {}
  ~Type() override;
  explicit PROTOBUF_CONSTEXPR Type(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Type(const Type& from);
  Type(Type&& from) noexcept
    : Type() {
    *this = ::std::move(from);
  }

  inline Type& operator=(const Type& from) {
    CopyFrom(from);
    return *this;
  }
  inline Type& operator=(Type&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Type& default_instance() {
    return *internal_default_instance();
  }
  static inline const Type* internal_default_instance() {
    return reinterpret_cast<const Type*>(
               &_Type_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Type& a, Type& b) {
    a.Swap(&b);
  }
  inline void Swap(Type* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Type* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Type* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Type>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Type& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Type& from) {
    Type::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Type* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.spanner.v1.Type";
  }
  protected:
  explicit Type(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArrayElementTypeFieldNumber = 2,
    kStructTypeFieldNumber = 3,
    kCodeFieldNumber = 1,
    kTypeAnnotationFieldNumber = 4,
  };
  // .google.spanner.v1.Type array_element_type = 2;
  bool has_array_element_type() const;
  private:
  bool _internal_has_array_element_type() const;
  public:
  void clear_array_element_type();
  const ::google::spanner::v1::Type& array_element_type() const;
  PROTOBUF_NODISCARD ::google::spanner::v1::Type* release_array_element_type();
  ::google::spanner::v1::Type* mutable_array_element_type();
  void set_allocated_array_element_type(::google::spanner::v1::Type* array_element_type);
  private:
  const ::google::spanner::v1::Type& _internal_array_element_type() const;
  ::google::spanner::v1::Type* _internal_mutable_array_element_type();
  public:
  void unsafe_arena_set_allocated_array_element_type(
      ::google::spanner::v1::Type* array_element_type);
  ::google::spanner::v1::Type* unsafe_arena_release_array_element_type();

  // .google.spanner.v1.StructType struct_type = 3;
  bool has_struct_type() const;
  private:
  bool _internal_has_struct_type() const;
  public:
  void clear_struct_type();
  const ::google::spanner::v1::StructType& struct_type() const;
  PROTOBUF_NODISCARD ::google::spanner::v1::StructType* release_struct_type();
  ::google::spanner::v1::StructType* mutable_struct_type();
  void set_allocated_struct_type(::google::spanner::v1::StructType* struct_type);
  private:
  const ::google::spanner::v1::StructType& _internal_struct_type() const;
  ::google::spanner::v1::StructType* _internal_mutable_struct_type();
  public:
  void unsafe_arena_set_allocated_struct_type(
      ::google::spanner::v1::StructType* struct_type);
  ::google::spanner::v1::StructType* unsafe_arena_release_struct_type();

  // .google.spanner.v1.TypeCode code = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_code();
  ::google::spanner::v1::TypeCode code() const;
  void set_code(::google::spanner::v1::TypeCode value);
  private:
  ::google::spanner::v1::TypeCode _internal_code() const;
  void _internal_set_code(::google::spanner::v1::TypeCode value);
  public:

  // .google.spanner.v1.TypeAnnotationCode type_annotation = 4;
  void clear_type_annotation();
  ::google::spanner::v1::TypeAnnotationCode type_annotation() const;
  void set_type_annotation(::google::spanner::v1::TypeAnnotationCode value);
  private:
  ::google::spanner::v1::TypeAnnotationCode _internal_type_annotation() const;
  void _internal_set_type_annotation(::google::spanner::v1::TypeAnnotationCode value);
  public:

  // @@protoc_insertion_point(class_scope:google.spanner.v1.Type)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::spanner::v1::Type* array_element_type_;
    ::google::spanner::v1::StructType* struct_type_;
    int code_;
    int type_annotation_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fspanner_2fv1_2ftype_2eproto;
};
// -------------------------------------------------------------------

class StructType_Field final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.spanner.v1.StructType.Field) */ {
 public:
  inline StructType_Field() : StructType_Field(nullptr) {}
  ~StructType_Field() override;
  explicit PROTOBUF_CONSTEXPR StructType_Field(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StructType_Field(const StructType_Field& from);
  StructType_Field(StructType_Field&& from) noexcept
    : StructType_Field() {
    *this = ::std::move(from);
  }

  inline StructType_Field& operator=(const StructType_Field& from) {
    CopyFrom(from);
    return *this;
  }
  inline StructType_Field& operator=(StructType_Field&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StructType_Field& default_instance() {
    return *internal_default_instance();
  }
  static inline const StructType_Field* internal_default_instance() {
    return reinterpret_cast<const StructType_Field*>(
               &_StructType_Field_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StructType_Field& a, StructType_Field& b) {
    a.Swap(&b);
  }
  inline void Swap(StructType_Field* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StructType_Field* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StructType_Field* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StructType_Field>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StructType_Field& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StructType_Field& from) {
    StructType_Field::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StructType_Field* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.spanner.v1.StructType.Field";
  }
  protected:
  explicit StructType_Field(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.spanner.v1.Type type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const ::google::spanner::v1::Type& type() const;
  PROTOBUF_NODISCARD ::google::spanner::v1::Type* release_type();
  ::google::spanner::v1::Type* mutable_type();
  void set_allocated_type(::google::spanner::v1::Type* type);
  private:
  const ::google::spanner::v1::Type& _internal_type() const;
  ::google::spanner::v1::Type* _internal_mutable_type();
  public:
  void unsafe_arena_set_allocated_type(
      ::google::spanner::v1::Type* type);
  ::google::spanner::v1::Type* unsafe_arena_release_type();

  // @@protoc_insertion_point(class_scope:google.spanner.v1.StructType.Field)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::google::spanner::v1::Type* type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fspanner_2fv1_2ftype_2eproto;
};
// -------------------------------------------------------------------

class StructType final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.spanner.v1.StructType) */ {
 public:
  inline StructType() : StructType(nullptr) {}
  ~StructType() override;
  explicit PROTOBUF_CONSTEXPR StructType(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StructType(const StructType& from);
  StructType(StructType&& from) noexcept
    : StructType() {
    *this = ::std::move(from);
  }

  inline StructType& operator=(const StructType& from) {
    CopyFrom(from);
    return *this;
  }
  inline StructType& operator=(StructType&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StructType& default_instance() {
    return *internal_default_instance();
  }
  static inline const StructType* internal_default_instance() {
    return reinterpret_cast<const StructType*>(
               &_StructType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StructType& a, StructType& b) {
    a.Swap(&b);
  }
  inline void Swap(StructType* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StructType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StructType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StructType>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StructType& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StructType& from) {
    StructType::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StructType* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.spanner.v1.StructType";
  }
  protected:
  explicit StructType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef StructType_Field Field;

  // accessors -------------------------------------------------------

  enum : int {
    kFieldsFieldNumber = 1,
  };
  // repeated .google.spanner.v1.StructType.Field fields = 1;
  int fields_size() const;
  private:
  int _internal_fields_size() const;
  public:
  void clear_fields();
  ::google::spanner::v1::StructType_Field* mutable_fields(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::spanner::v1::StructType_Field >*
      mutable_fields();
  private:
  const ::google::spanner::v1::StructType_Field& _internal_fields(int index) const;
  ::google::spanner::v1::StructType_Field* _internal_add_fields();
  public:
  const ::google::spanner::v1::StructType_Field& fields(int index) const;
  ::google::spanner::v1::StructType_Field* add_fields();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::spanner::v1::StructType_Field >&
      fields() const;

  // @@protoc_insertion_point(class_scope:google.spanner.v1.StructType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::spanner::v1::StructType_Field > fields_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fspanner_2fv1_2ftype_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Type

// .google.spanner.v1.TypeCode code = 1 [(.google.api.field_behavior) = REQUIRED];
inline void Type::clear_code() {
  _impl_.code_ = 0;
}
inline ::google::spanner::v1::TypeCode Type::_internal_code() const {
  return static_cast< ::google::spanner::v1::TypeCode >(_impl_.code_);
}
inline ::google::spanner::v1::TypeCode Type::code() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.Type.code)
  return _internal_code();
}
inline void Type::_internal_set_code(::google::spanner::v1::TypeCode value) {
  
  _impl_.code_ = value;
}
inline void Type::set_code(::google::spanner::v1::TypeCode value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:google.spanner.v1.Type.code)
}

// .google.spanner.v1.Type array_element_type = 2;
inline bool Type::_internal_has_array_element_type() const {
  return this != internal_default_instance() && _impl_.array_element_type_ != nullptr;
}
inline bool Type::has_array_element_type() const {
  return _internal_has_array_element_type();
}
inline void Type::clear_array_element_type() {
  if (GetArenaForAllocation() == nullptr && _impl_.array_element_type_ != nullptr) {
    delete _impl_.array_element_type_;
  }
  _impl_.array_element_type_ = nullptr;
}
inline const ::google::spanner::v1::Type& Type::_internal_array_element_type() const {
  const ::google::spanner::v1::Type* p = _impl_.array_element_type_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::spanner::v1::Type&>(
      ::google::spanner::v1::_Type_default_instance_);
}
inline const ::google::spanner::v1::Type& Type::array_element_type() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.Type.array_element_type)
  return _internal_array_element_type();
}
inline void Type::unsafe_arena_set_allocated_array_element_type(
    ::google::spanner::v1::Type* array_element_type) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.array_element_type_);
  }
  _impl_.array_element_type_ = array_element_type;
  if (array_element_type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.spanner.v1.Type.array_element_type)
}
inline ::google::spanner::v1::Type* Type::release_array_element_type() {
  
  ::google::spanner::v1::Type* temp = _impl_.array_element_type_;
  _impl_.array_element_type_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::spanner::v1::Type* Type::unsafe_arena_release_array_element_type() {
  // @@protoc_insertion_point(field_release:google.spanner.v1.Type.array_element_type)
  
  ::google::spanner::v1::Type* temp = _impl_.array_element_type_;
  _impl_.array_element_type_ = nullptr;
  return temp;
}
inline ::google::spanner::v1::Type* Type::_internal_mutable_array_element_type() {
  
  if (_impl_.array_element_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::spanner::v1::Type>(GetArenaForAllocation());
    _impl_.array_element_type_ = p;
  }
  return _impl_.array_element_type_;
}
inline ::google::spanner::v1::Type* Type::mutable_array_element_type() {
  ::google::spanner::v1::Type* _msg = _internal_mutable_array_element_type();
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.Type.array_element_type)
  return _msg;
}
inline void Type::set_allocated_array_element_type(::google::spanner::v1::Type* array_element_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.array_element_type_;
  }
  if (array_element_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(array_element_type);
    if (message_arena != submessage_arena) {
      array_element_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, array_element_type, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.array_element_type_ = array_element_type;
  // @@protoc_insertion_point(field_set_allocated:google.spanner.v1.Type.array_element_type)
}

// .google.spanner.v1.StructType struct_type = 3;
inline bool Type::_internal_has_struct_type() const {
  return this != internal_default_instance() && _impl_.struct_type_ != nullptr;
}
inline bool Type::has_struct_type() const {
  return _internal_has_struct_type();
}
inline void Type::clear_struct_type() {
  if (GetArenaForAllocation() == nullptr && _impl_.struct_type_ != nullptr) {
    delete _impl_.struct_type_;
  }
  _impl_.struct_type_ = nullptr;
}
inline const ::google::spanner::v1::StructType& Type::_internal_struct_type() const {
  const ::google::spanner::v1::StructType* p = _impl_.struct_type_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::spanner::v1::StructType&>(
      ::google::spanner::v1::_StructType_default_instance_);
}
inline const ::google::spanner::v1::StructType& Type::struct_type() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.Type.struct_type)
  return _internal_struct_type();
}
inline void Type::unsafe_arena_set_allocated_struct_type(
    ::google::spanner::v1::StructType* struct_type) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.struct_type_);
  }
  _impl_.struct_type_ = struct_type;
  if (struct_type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.spanner.v1.Type.struct_type)
}
inline ::google::spanner::v1::StructType* Type::release_struct_type() {
  
  ::google::spanner::v1::StructType* temp = _impl_.struct_type_;
  _impl_.struct_type_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::spanner::v1::StructType* Type::unsafe_arena_release_struct_type() {
  // @@protoc_insertion_point(field_release:google.spanner.v1.Type.struct_type)
  
  ::google::spanner::v1::StructType* temp = _impl_.struct_type_;
  _impl_.struct_type_ = nullptr;
  return temp;
}
inline ::google::spanner::v1::StructType* Type::_internal_mutable_struct_type() {
  
  if (_impl_.struct_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::spanner::v1::StructType>(GetArenaForAllocation());
    _impl_.struct_type_ = p;
  }
  return _impl_.struct_type_;
}
inline ::google::spanner::v1::StructType* Type::mutable_struct_type() {
  ::google::spanner::v1::StructType* _msg = _internal_mutable_struct_type();
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.Type.struct_type)
  return _msg;
}
inline void Type::set_allocated_struct_type(::google::spanner::v1::StructType* struct_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.struct_type_;
  }
  if (struct_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(struct_type);
    if (message_arena != submessage_arena) {
      struct_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, struct_type, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.struct_type_ = struct_type;
  // @@protoc_insertion_point(field_set_allocated:google.spanner.v1.Type.struct_type)
}

// .google.spanner.v1.TypeAnnotationCode type_annotation = 4;
inline void Type::clear_type_annotation() {
  _impl_.type_annotation_ = 0;
}
inline ::google::spanner::v1::TypeAnnotationCode Type::_internal_type_annotation() const {
  return static_cast< ::google::spanner::v1::TypeAnnotationCode >(_impl_.type_annotation_);
}
inline ::google::spanner::v1::TypeAnnotationCode Type::type_annotation() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.Type.type_annotation)
  return _internal_type_annotation();
}
inline void Type::_internal_set_type_annotation(::google::spanner::v1::TypeAnnotationCode value) {
  
  _impl_.type_annotation_ = value;
}
inline void Type::set_type_annotation(::google::spanner::v1::TypeAnnotationCode value) {
  _internal_set_type_annotation(value);
  // @@protoc_insertion_point(field_set:google.spanner.v1.Type.type_annotation)
}

// -------------------------------------------------------------------

// StructType_Field

// string name = 1;
inline void StructType_Field::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& StructType_Field::name() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.StructType.Field.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StructType_Field::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.spanner.v1.StructType.Field.name)
}
inline std::string* StructType_Field::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.StructType.Field.name)
  return _s;
}
inline const std::string& StructType_Field::_internal_name() const {
  return _impl_.name_.Get();
}
inline void StructType_Field::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* StructType_Field::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* StructType_Field::release_name() {
  // @@protoc_insertion_point(field_release:google.spanner.v1.StructType.Field.name)
  return _impl_.name_.Release();
}
inline void StructType_Field::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.spanner.v1.StructType.Field.name)
}

// .google.spanner.v1.Type type = 2;
inline bool StructType_Field::_internal_has_type() const {
  return this != internal_default_instance() && _impl_.type_ != nullptr;
}
inline bool StructType_Field::has_type() const {
  return _internal_has_type();
}
inline void StructType_Field::clear_type() {
  if (GetArenaForAllocation() == nullptr && _impl_.type_ != nullptr) {
    delete _impl_.type_;
  }
  _impl_.type_ = nullptr;
}
inline const ::google::spanner::v1::Type& StructType_Field::_internal_type() const {
  const ::google::spanner::v1::Type* p = _impl_.type_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::spanner::v1::Type&>(
      ::google::spanner::v1::_Type_default_instance_);
}
inline const ::google::spanner::v1::Type& StructType_Field::type() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.StructType.Field.type)
  return _internal_type();
}
inline void StructType_Field::unsafe_arena_set_allocated_type(
    ::google::spanner::v1::Type* type) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.type_);
  }
  _impl_.type_ = type;
  if (type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.spanner.v1.StructType.Field.type)
}
inline ::google::spanner::v1::Type* StructType_Field::release_type() {
  
  ::google::spanner::v1::Type* temp = _impl_.type_;
  _impl_.type_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::spanner::v1::Type* StructType_Field::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_release:google.spanner.v1.StructType.Field.type)
  
  ::google::spanner::v1::Type* temp = _impl_.type_;
  _impl_.type_ = nullptr;
  return temp;
}
inline ::google::spanner::v1::Type* StructType_Field::_internal_mutable_type() {
  
  if (_impl_.type_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::spanner::v1::Type>(GetArenaForAllocation());
    _impl_.type_ = p;
  }
  return _impl_.type_;
}
inline ::google::spanner::v1::Type* StructType_Field::mutable_type() {
  ::google::spanner::v1::Type* _msg = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.StructType.Field.type)
  return _msg;
}
inline void StructType_Field::set_allocated_type(::google::spanner::v1::Type* type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.type_;
  }
  if (type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(type);
    if (message_arena != submessage_arena) {
      type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.type_ = type;
  // @@protoc_insertion_point(field_set_allocated:google.spanner.v1.StructType.Field.type)
}

// -------------------------------------------------------------------

// StructType

// repeated .google.spanner.v1.StructType.Field fields = 1;
inline int StructType::_internal_fields_size() const {
  return _impl_.fields_.size();
}
inline int StructType::fields_size() const {
  return _internal_fields_size();
}
inline void StructType::clear_fields() {
  _impl_.fields_.Clear();
}
inline ::google::spanner::v1::StructType_Field* StructType::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.StructType.fields)
  return _impl_.fields_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::spanner::v1::StructType_Field >*
StructType::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:google.spanner.v1.StructType.fields)
  return &_impl_.fields_;
}
inline const ::google::spanner::v1::StructType_Field& StructType::_internal_fields(int index) const {
  return _impl_.fields_.Get(index);
}
inline const ::google::spanner::v1::StructType_Field& StructType::fields(int index) const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.StructType.fields)
  return _internal_fields(index);
}
inline ::google::spanner::v1::StructType_Field* StructType::_internal_add_fields() {
  return _impl_.fields_.Add();
}
inline ::google::spanner::v1::StructType_Field* StructType::add_fields() {
  ::google::spanner::v1::StructType_Field* _add = _internal_add_fields();
  // @@protoc_insertion_point(field_add:google.spanner.v1.StructType.fields)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::spanner::v1::StructType_Field >&
StructType::fields() const {
  // @@protoc_insertion_point(field_list:google.spanner.v1.StructType.fields)
  return _impl_.fields_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace spanner
}  // namespace google

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::google::spanner::v1::TypeCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::spanner::v1::TypeCode>() {
  return ::google::spanner::v1::TypeCode_descriptor();
}
template <> struct is_proto_enum< ::google::spanner::v1::TypeAnnotationCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::spanner::v1::TypeAnnotationCode>() {
  return ::google::spanner::v1::TypeAnnotationCode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fspanner_2fv1_2ftype_2eproto
