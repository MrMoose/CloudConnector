// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/spanner/v1/mutation.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fspanner_2fv1_2fmutation_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fspanner_2fv1_2fmutation_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include <google/protobuf/struct.pb.h>
#include "google/spanner/v1/keys.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fspanner_2fv1_2fmutation_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fspanner_2fv1_2fmutation_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fspanner_2fv1_2fmutation_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_google_2fspanner_2fv1_2fmutation_2eproto_metadata_getter(int index);
namespace google {
namespace spanner {
namespace v1 {
class Mutation;
struct MutationDefaultTypeInternal;
extern MutationDefaultTypeInternal _Mutation_default_instance_;
class Mutation_Delete;
struct Mutation_DeleteDefaultTypeInternal;
extern Mutation_DeleteDefaultTypeInternal _Mutation_Delete_default_instance_;
class Mutation_Write;
struct Mutation_WriteDefaultTypeInternal;
extern Mutation_WriteDefaultTypeInternal _Mutation_Write_default_instance_;
}  // namespace v1
}  // namespace spanner
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::spanner::v1::Mutation* Arena::CreateMaybeMessage<::google::spanner::v1::Mutation>(Arena*);
template<> ::google::spanner::v1::Mutation_Delete* Arena::CreateMaybeMessage<::google::spanner::v1::Mutation_Delete>(Arena*);
template<> ::google::spanner::v1::Mutation_Write* Arena::CreateMaybeMessage<::google::spanner::v1::Mutation_Write>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace spanner {
namespace v1 {

// ===================================================================

class Mutation_Write PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.spanner.v1.Mutation.Write) */ {
 public:
  inline Mutation_Write() : Mutation_Write(nullptr) {}
  virtual ~Mutation_Write();
  explicit constexpr Mutation_Write(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Mutation_Write(const Mutation_Write& from);
  Mutation_Write(Mutation_Write&& from) noexcept
    : Mutation_Write() {
    *this = ::std::move(from);
  }

  inline Mutation_Write& operator=(const Mutation_Write& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mutation_Write& operator=(Mutation_Write&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Mutation_Write& default_instance() {
    return *internal_default_instance();
  }
  static inline const Mutation_Write* internal_default_instance() {
    return reinterpret_cast<const Mutation_Write*>(
               &_Mutation_Write_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Mutation_Write& a, Mutation_Write& b) {
    a.Swap(&b);
  }
  inline void Swap(Mutation_Write* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Mutation_Write* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Mutation_Write* New() const final {
    return CreateMaybeMessage<Mutation_Write>(nullptr);
  }

  Mutation_Write* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Mutation_Write>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Mutation_Write& from);
  void MergeFrom(const Mutation_Write& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mutation_Write* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.spanner.v1.Mutation.Write";
  }
  protected:
  explicit Mutation_Write(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fspanner_2fv1_2fmutation_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColumnsFieldNumber = 2,
    kValuesFieldNumber = 3,
    kTableFieldNumber = 1,
  };
  // repeated string columns = 2;
  int columns_size() const;
  private:
  int _internal_columns_size() const;
  public:
  void clear_columns();
  const std::string& columns(int index) const;
  std::string* mutable_columns(int index);
  void set_columns(int index, const std::string& value);
  void set_columns(int index, std::string&& value);
  void set_columns(int index, const char* value);
  void set_columns(int index, const char* value, size_t size);
  std::string* add_columns();
  void add_columns(const std::string& value);
  void add_columns(std::string&& value);
  void add_columns(const char* value);
  void add_columns(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& columns() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_columns();
  private:
  const std::string& _internal_columns(int index) const;
  std::string* _internal_add_columns();
  public:

  // repeated .google.protobuf.ListValue values = 3;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  PROTOBUF_NAMESPACE_ID::ListValue* mutable_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::ListValue >*
      mutable_values();
  private:
  const PROTOBUF_NAMESPACE_ID::ListValue& _internal_values(int index) const;
  PROTOBUF_NAMESPACE_ID::ListValue* _internal_add_values();
  public:
  const PROTOBUF_NAMESPACE_ID::ListValue& values(int index) const;
  PROTOBUF_NAMESPACE_ID::ListValue* add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::ListValue >&
      values() const;

  // string table = 1;
  void clear_table();
  const std::string& table() const;
  void set_table(const std::string& value);
  void set_table(std::string&& value);
  void set_table(const char* value);
  void set_table(const char* value, size_t size);
  std::string* mutable_table();
  std::string* release_table();
  void set_allocated_table(std::string* table);
  private:
  const std::string& _internal_table() const;
  void _internal_set_table(const std::string& value);
  std::string* _internal_mutable_table();
  public:

  // @@protoc_insertion_point(class_scope:google.spanner.v1.Mutation.Write)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> columns_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::ListValue > values_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fspanner_2fv1_2fmutation_2eproto;
};
// -------------------------------------------------------------------

class Mutation_Delete PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.spanner.v1.Mutation.Delete) */ {
 public:
  inline Mutation_Delete() : Mutation_Delete(nullptr) {}
  virtual ~Mutation_Delete();
  explicit constexpr Mutation_Delete(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Mutation_Delete(const Mutation_Delete& from);
  Mutation_Delete(Mutation_Delete&& from) noexcept
    : Mutation_Delete() {
    *this = ::std::move(from);
  }

  inline Mutation_Delete& operator=(const Mutation_Delete& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mutation_Delete& operator=(Mutation_Delete&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Mutation_Delete& default_instance() {
    return *internal_default_instance();
  }
  static inline const Mutation_Delete* internal_default_instance() {
    return reinterpret_cast<const Mutation_Delete*>(
               &_Mutation_Delete_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Mutation_Delete& a, Mutation_Delete& b) {
    a.Swap(&b);
  }
  inline void Swap(Mutation_Delete* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Mutation_Delete* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Mutation_Delete* New() const final {
    return CreateMaybeMessage<Mutation_Delete>(nullptr);
  }

  Mutation_Delete* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Mutation_Delete>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Mutation_Delete& from);
  void MergeFrom(const Mutation_Delete& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mutation_Delete* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.spanner.v1.Mutation.Delete";
  }
  protected:
  explicit Mutation_Delete(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fspanner_2fv1_2fmutation_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableFieldNumber = 1,
    kKeySetFieldNumber = 2,
  };
  // string table = 1;
  void clear_table();
  const std::string& table() const;
  void set_table(const std::string& value);
  void set_table(std::string&& value);
  void set_table(const char* value);
  void set_table(const char* value, size_t size);
  std::string* mutable_table();
  std::string* release_table();
  void set_allocated_table(std::string* table);
  private:
  const std::string& _internal_table() const;
  void _internal_set_table(const std::string& value);
  std::string* _internal_mutable_table();
  public:

  // .google.spanner.v1.KeySet key_set = 2;
  bool has_key_set() const;
  private:
  bool _internal_has_key_set() const;
  public:
  void clear_key_set();
  const ::google::spanner::v1::KeySet& key_set() const;
  ::google::spanner::v1::KeySet* release_key_set();
  ::google::spanner::v1::KeySet* mutable_key_set();
  void set_allocated_key_set(::google::spanner::v1::KeySet* key_set);
  private:
  const ::google::spanner::v1::KeySet& _internal_key_set() const;
  ::google::spanner::v1::KeySet* _internal_mutable_key_set();
  public:
  void unsafe_arena_set_allocated_key_set(
      ::google::spanner::v1::KeySet* key_set);
  ::google::spanner::v1::KeySet* unsafe_arena_release_key_set();

  // @@protoc_insertion_point(class_scope:google.spanner.v1.Mutation.Delete)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_;
  ::google::spanner::v1::KeySet* key_set_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fspanner_2fv1_2fmutation_2eproto;
};
// -------------------------------------------------------------------

class Mutation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.spanner.v1.Mutation) */ {
 public:
  inline Mutation() : Mutation(nullptr) {}
  virtual ~Mutation();
  explicit constexpr Mutation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Mutation(const Mutation& from);
  Mutation(Mutation&& from) noexcept
    : Mutation() {
    *this = ::std::move(from);
  }

  inline Mutation& operator=(const Mutation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mutation& operator=(Mutation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Mutation& default_instance() {
    return *internal_default_instance();
  }
  enum OperationCase {
    kInsert = 1,
    kUpdate = 2,
    kInsertOrUpdate = 3,
    kReplace = 4,
    kDelete = 5,
    OPERATION_NOT_SET = 0,
  };

  static inline const Mutation* internal_default_instance() {
    return reinterpret_cast<const Mutation*>(
               &_Mutation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Mutation& a, Mutation& b) {
    a.Swap(&b);
  }
  inline void Swap(Mutation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Mutation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Mutation* New() const final {
    return CreateMaybeMessage<Mutation>(nullptr);
  }

  Mutation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Mutation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Mutation& from);
  void MergeFrom(const Mutation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mutation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.spanner.v1.Mutation";
  }
  protected:
  explicit Mutation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fspanner_2fv1_2fmutation_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef Mutation_Write Write;
  typedef Mutation_Delete Delete;

  // accessors -------------------------------------------------------

  enum : int {
    kInsertFieldNumber = 1,
    kUpdateFieldNumber = 2,
    kInsertOrUpdateFieldNumber = 3,
    kReplaceFieldNumber = 4,
    kDeleteFieldNumber = 5,
  };
  // .google.spanner.v1.Mutation.Write insert = 1;
  bool has_insert() const;
  private:
  bool _internal_has_insert() const;
  public:
  void clear_insert();
  const ::google::spanner::v1::Mutation_Write& insert() const;
  ::google::spanner::v1::Mutation_Write* release_insert();
  ::google::spanner::v1::Mutation_Write* mutable_insert();
  void set_allocated_insert(::google::spanner::v1::Mutation_Write* insert);
  private:
  const ::google::spanner::v1::Mutation_Write& _internal_insert() const;
  ::google::spanner::v1::Mutation_Write* _internal_mutable_insert();
  public:
  void unsafe_arena_set_allocated_insert(
      ::google::spanner::v1::Mutation_Write* insert);
  ::google::spanner::v1::Mutation_Write* unsafe_arena_release_insert();

  // .google.spanner.v1.Mutation.Write update = 2;
  bool has_update() const;
  private:
  bool _internal_has_update() const;
  public:
  void clear_update();
  const ::google::spanner::v1::Mutation_Write& update() const;
  ::google::spanner::v1::Mutation_Write* release_update();
  ::google::spanner::v1::Mutation_Write* mutable_update();
  void set_allocated_update(::google::spanner::v1::Mutation_Write* update);
  private:
  const ::google::spanner::v1::Mutation_Write& _internal_update() const;
  ::google::spanner::v1::Mutation_Write* _internal_mutable_update();
  public:
  void unsafe_arena_set_allocated_update(
      ::google::spanner::v1::Mutation_Write* update);
  ::google::spanner::v1::Mutation_Write* unsafe_arena_release_update();

  // .google.spanner.v1.Mutation.Write insert_or_update = 3;
  bool has_insert_or_update() const;
  private:
  bool _internal_has_insert_or_update() const;
  public:
  void clear_insert_or_update();
  const ::google::spanner::v1::Mutation_Write& insert_or_update() const;
  ::google::spanner::v1::Mutation_Write* release_insert_or_update();
  ::google::spanner::v1::Mutation_Write* mutable_insert_or_update();
  void set_allocated_insert_or_update(::google::spanner::v1::Mutation_Write* insert_or_update);
  private:
  const ::google::spanner::v1::Mutation_Write& _internal_insert_or_update() const;
  ::google::spanner::v1::Mutation_Write* _internal_mutable_insert_or_update();
  public:
  void unsafe_arena_set_allocated_insert_or_update(
      ::google::spanner::v1::Mutation_Write* insert_or_update);
  ::google::spanner::v1::Mutation_Write* unsafe_arena_release_insert_or_update();

  // .google.spanner.v1.Mutation.Write replace = 4;
  bool has_replace() const;
  private:
  bool _internal_has_replace() const;
  public:
  void clear_replace();
  const ::google::spanner::v1::Mutation_Write& replace() const;
  ::google::spanner::v1::Mutation_Write* release_replace();
  ::google::spanner::v1::Mutation_Write* mutable_replace();
  void set_allocated_replace(::google::spanner::v1::Mutation_Write* replace);
  private:
  const ::google::spanner::v1::Mutation_Write& _internal_replace() const;
  ::google::spanner::v1::Mutation_Write* _internal_mutable_replace();
  public:
  void unsafe_arena_set_allocated_replace(
      ::google::spanner::v1::Mutation_Write* replace);
  ::google::spanner::v1::Mutation_Write* unsafe_arena_release_replace();

  // .google.spanner.v1.Mutation.Delete delete = 5;
  bool has_delete_() const;
  private:
  bool _internal_has_delete_() const;
  public:
  void clear_delete_();
  const ::google::spanner::v1::Mutation_Delete& delete_() const;
  ::google::spanner::v1::Mutation_Delete* release_delete_();
  ::google::spanner::v1::Mutation_Delete* mutable_delete_();
  void set_allocated_delete_(::google::spanner::v1::Mutation_Delete* delete_);
  private:
  const ::google::spanner::v1::Mutation_Delete& _internal_delete_() const;
  ::google::spanner::v1::Mutation_Delete* _internal_mutable_delete_();
  public:
  void unsafe_arena_set_allocated_delete_(
      ::google::spanner::v1::Mutation_Delete* delete_);
  ::google::spanner::v1::Mutation_Delete* unsafe_arena_release_delete_();

  void clear_operation();
  OperationCase operation_case() const;
  // @@protoc_insertion_point(class_scope:google.spanner.v1.Mutation)
 private:
  class _Internal;
  void set_has_insert();
  void set_has_update();
  void set_has_insert_or_update();
  void set_has_replace();
  void set_has_delete_();

  inline bool has_operation() const;
  inline void clear_has_operation();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union OperationUnion {
    constexpr OperationUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::google::spanner::v1::Mutation_Write* insert_;
    ::google::spanner::v1::Mutation_Write* update_;
    ::google::spanner::v1::Mutation_Write* insert_or_update_;
    ::google::spanner::v1::Mutation_Write* replace_;
    ::google::spanner::v1::Mutation_Delete* delete__;
  } operation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_google_2fspanner_2fv1_2fmutation_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Mutation_Write

// string table = 1;
inline void Mutation_Write::clear_table() {
  table_.ClearToEmpty();
}
inline const std::string& Mutation_Write::table() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.Mutation.Write.table)
  return _internal_table();
}
inline void Mutation_Write::set_table(const std::string& value) {
  _internal_set_table(value);
  // @@protoc_insertion_point(field_set:google.spanner.v1.Mutation.Write.table)
}
inline std::string* Mutation_Write::mutable_table() {
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.Mutation.Write.table)
  return _internal_mutable_table();
}
inline const std::string& Mutation_Write::_internal_table() const {
  return table_.Get();
}
inline void Mutation_Write::_internal_set_table(const std::string& value) {
  
  table_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Mutation_Write::set_table(std::string&& value) {
  
  table_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.v1.Mutation.Write.table)
}
inline void Mutation_Write::set_table(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  table_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.spanner.v1.Mutation.Write.table)
}
inline void Mutation_Write::set_table(const char* value,
    size_t size) {
  
  table_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.spanner.v1.Mutation.Write.table)
}
inline std::string* Mutation_Write::_internal_mutable_table() {
  
  return table_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Mutation_Write::release_table() {
  // @@protoc_insertion_point(field_release:google.spanner.v1.Mutation.Write.table)
  return table_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Mutation_Write::set_allocated_table(std::string* table) {
  if (table != nullptr) {
    
  } else {
    
  }
  table_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), table,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.spanner.v1.Mutation.Write.table)
}

// repeated string columns = 2;
inline int Mutation_Write::_internal_columns_size() const {
  return columns_.size();
}
inline int Mutation_Write::columns_size() const {
  return _internal_columns_size();
}
inline void Mutation_Write::clear_columns() {
  columns_.Clear();
}
inline std::string* Mutation_Write::add_columns() {
  // @@protoc_insertion_point(field_add_mutable:google.spanner.v1.Mutation.Write.columns)
  return _internal_add_columns();
}
inline const std::string& Mutation_Write::_internal_columns(int index) const {
  return columns_.Get(index);
}
inline const std::string& Mutation_Write::columns(int index) const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.Mutation.Write.columns)
  return _internal_columns(index);
}
inline std::string* Mutation_Write::mutable_columns(int index) {
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.Mutation.Write.columns)
  return columns_.Mutable(index);
}
inline void Mutation_Write::set_columns(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:google.spanner.v1.Mutation.Write.columns)
  columns_.Mutable(index)->assign(value);
}
inline void Mutation_Write::set_columns(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:google.spanner.v1.Mutation.Write.columns)
  columns_.Mutable(index)->assign(std::move(value));
}
inline void Mutation_Write::set_columns(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  columns_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.spanner.v1.Mutation.Write.columns)
}
inline void Mutation_Write::set_columns(int index, const char* value, size_t size) {
  columns_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.spanner.v1.Mutation.Write.columns)
}
inline std::string* Mutation_Write::_internal_add_columns() {
  return columns_.Add();
}
inline void Mutation_Write::add_columns(const std::string& value) {
  columns_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.spanner.v1.Mutation.Write.columns)
}
inline void Mutation_Write::add_columns(std::string&& value) {
  columns_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.spanner.v1.Mutation.Write.columns)
}
inline void Mutation_Write::add_columns(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  columns_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.spanner.v1.Mutation.Write.columns)
}
inline void Mutation_Write::add_columns(const char* value, size_t size) {
  columns_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.spanner.v1.Mutation.Write.columns)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Mutation_Write::columns() const {
  // @@protoc_insertion_point(field_list:google.spanner.v1.Mutation.Write.columns)
  return columns_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Mutation_Write::mutable_columns() {
  // @@protoc_insertion_point(field_mutable_list:google.spanner.v1.Mutation.Write.columns)
  return &columns_;
}

// repeated .google.protobuf.ListValue values = 3;
inline int Mutation_Write::_internal_values_size() const {
  return values_.size();
}
inline int Mutation_Write::values_size() const {
  return _internal_values_size();
}
inline PROTOBUF_NAMESPACE_ID::ListValue* Mutation_Write::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.Mutation.Write.values)
  return values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::ListValue >*
Mutation_Write::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:google.spanner.v1.Mutation.Write.values)
  return &values_;
}
inline const PROTOBUF_NAMESPACE_ID::ListValue& Mutation_Write::_internal_values(int index) const {
  return values_.Get(index);
}
inline const PROTOBUF_NAMESPACE_ID::ListValue& Mutation_Write::values(int index) const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.Mutation.Write.values)
  return _internal_values(index);
}
inline PROTOBUF_NAMESPACE_ID::ListValue* Mutation_Write::_internal_add_values() {
  return values_.Add();
}
inline PROTOBUF_NAMESPACE_ID::ListValue* Mutation_Write::add_values() {
  // @@protoc_insertion_point(field_add:google.spanner.v1.Mutation.Write.values)
  return _internal_add_values();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::ListValue >&
Mutation_Write::values() const {
  // @@protoc_insertion_point(field_list:google.spanner.v1.Mutation.Write.values)
  return values_;
}

// -------------------------------------------------------------------

// Mutation_Delete

// string table = 1;
inline void Mutation_Delete::clear_table() {
  table_.ClearToEmpty();
}
inline const std::string& Mutation_Delete::table() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.Mutation.Delete.table)
  return _internal_table();
}
inline void Mutation_Delete::set_table(const std::string& value) {
  _internal_set_table(value);
  // @@protoc_insertion_point(field_set:google.spanner.v1.Mutation.Delete.table)
}
inline std::string* Mutation_Delete::mutable_table() {
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.Mutation.Delete.table)
  return _internal_mutable_table();
}
inline const std::string& Mutation_Delete::_internal_table() const {
  return table_.Get();
}
inline void Mutation_Delete::_internal_set_table(const std::string& value) {
  
  table_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Mutation_Delete::set_table(std::string&& value) {
  
  table_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.v1.Mutation.Delete.table)
}
inline void Mutation_Delete::set_table(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  table_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.spanner.v1.Mutation.Delete.table)
}
inline void Mutation_Delete::set_table(const char* value,
    size_t size) {
  
  table_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.spanner.v1.Mutation.Delete.table)
}
inline std::string* Mutation_Delete::_internal_mutable_table() {
  
  return table_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Mutation_Delete::release_table() {
  // @@protoc_insertion_point(field_release:google.spanner.v1.Mutation.Delete.table)
  return table_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Mutation_Delete::set_allocated_table(std::string* table) {
  if (table != nullptr) {
    
  } else {
    
  }
  table_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), table,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.spanner.v1.Mutation.Delete.table)
}

// .google.spanner.v1.KeySet key_set = 2;
inline bool Mutation_Delete::_internal_has_key_set() const {
  return this != internal_default_instance() && key_set_ != nullptr;
}
inline bool Mutation_Delete::has_key_set() const {
  return _internal_has_key_set();
}
inline const ::google::spanner::v1::KeySet& Mutation_Delete::_internal_key_set() const {
  const ::google::spanner::v1::KeySet* p = key_set_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::spanner::v1::KeySet&>(
      ::google::spanner::v1::_KeySet_default_instance_);
}
inline const ::google::spanner::v1::KeySet& Mutation_Delete::key_set() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.Mutation.Delete.key_set)
  return _internal_key_set();
}
inline void Mutation_Delete::unsafe_arena_set_allocated_key_set(
    ::google::spanner::v1::KeySet* key_set) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key_set_);
  }
  key_set_ = key_set;
  if (key_set) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.spanner.v1.Mutation.Delete.key_set)
}
inline ::google::spanner::v1::KeySet* Mutation_Delete::release_key_set() {
  
  ::google::spanner::v1::KeySet* temp = key_set_;
  key_set_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::spanner::v1::KeySet* Mutation_Delete::unsafe_arena_release_key_set() {
  // @@protoc_insertion_point(field_release:google.spanner.v1.Mutation.Delete.key_set)
  
  ::google::spanner::v1::KeySet* temp = key_set_;
  key_set_ = nullptr;
  return temp;
}
inline ::google::spanner::v1::KeySet* Mutation_Delete::_internal_mutable_key_set() {
  
  if (key_set_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::spanner::v1::KeySet>(GetArena());
    key_set_ = p;
  }
  return key_set_;
}
inline ::google::spanner::v1::KeySet* Mutation_Delete::mutable_key_set() {
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.Mutation.Delete.key_set)
  return _internal_mutable_key_set();
}
inline void Mutation_Delete::set_allocated_key_set(::google::spanner::v1::KeySet* key_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(key_set_);
  }
  if (key_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key_set)->GetArena();
    if (message_arena != submessage_arena) {
      key_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key_set, submessage_arena);
    }
    
  } else {
    
  }
  key_set_ = key_set;
  // @@protoc_insertion_point(field_set_allocated:google.spanner.v1.Mutation.Delete.key_set)
}

// -------------------------------------------------------------------

// Mutation

// .google.spanner.v1.Mutation.Write insert = 1;
inline bool Mutation::_internal_has_insert() const {
  return operation_case() == kInsert;
}
inline bool Mutation::has_insert() const {
  return _internal_has_insert();
}
inline void Mutation::set_has_insert() {
  _oneof_case_[0] = kInsert;
}
inline void Mutation::clear_insert() {
  if (_internal_has_insert()) {
    if (GetArena() == nullptr) {
      delete operation_.insert_;
    }
    clear_has_operation();
  }
}
inline ::google::spanner::v1::Mutation_Write* Mutation::release_insert() {
  // @@protoc_insertion_point(field_release:google.spanner.v1.Mutation.insert)
  if (_internal_has_insert()) {
    clear_has_operation();
      ::google::spanner::v1::Mutation_Write* temp = operation_.insert_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    operation_.insert_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::spanner::v1::Mutation_Write& Mutation::_internal_insert() const {
  return _internal_has_insert()
      ? *operation_.insert_
      : reinterpret_cast< ::google::spanner::v1::Mutation_Write&>(::google::spanner::v1::_Mutation_Write_default_instance_);
}
inline const ::google::spanner::v1::Mutation_Write& Mutation::insert() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.Mutation.insert)
  return _internal_insert();
}
inline ::google::spanner::v1::Mutation_Write* Mutation::unsafe_arena_release_insert() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.spanner.v1.Mutation.insert)
  if (_internal_has_insert()) {
    clear_has_operation();
    ::google::spanner::v1::Mutation_Write* temp = operation_.insert_;
    operation_.insert_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Mutation::unsafe_arena_set_allocated_insert(::google::spanner::v1::Mutation_Write* insert) {
  clear_operation();
  if (insert) {
    set_has_insert();
    operation_.insert_ = insert;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.spanner.v1.Mutation.insert)
}
inline ::google::spanner::v1::Mutation_Write* Mutation::_internal_mutable_insert() {
  if (!_internal_has_insert()) {
    clear_operation();
    set_has_insert();
    operation_.insert_ = CreateMaybeMessage< ::google::spanner::v1::Mutation_Write >(GetArena());
  }
  return operation_.insert_;
}
inline ::google::spanner::v1::Mutation_Write* Mutation::mutable_insert() {
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.Mutation.insert)
  return _internal_mutable_insert();
}

// .google.spanner.v1.Mutation.Write update = 2;
inline bool Mutation::_internal_has_update() const {
  return operation_case() == kUpdate;
}
inline bool Mutation::has_update() const {
  return _internal_has_update();
}
inline void Mutation::set_has_update() {
  _oneof_case_[0] = kUpdate;
}
inline void Mutation::clear_update() {
  if (_internal_has_update()) {
    if (GetArena() == nullptr) {
      delete operation_.update_;
    }
    clear_has_operation();
  }
}
inline ::google::spanner::v1::Mutation_Write* Mutation::release_update() {
  // @@protoc_insertion_point(field_release:google.spanner.v1.Mutation.update)
  if (_internal_has_update()) {
    clear_has_operation();
      ::google::spanner::v1::Mutation_Write* temp = operation_.update_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    operation_.update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::spanner::v1::Mutation_Write& Mutation::_internal_update() const {
  return _internal_has_update()
      ? *operation_.update_
      : reinterpret_cast< ::google::spanner::v1::Mutation_Write&>(::google::spanner::v1::_Mutation_Write_default_instance_);
}
inline const ::google::spanner::v1::Mutation_Write& Mutation::update() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.Mutation.update)
  return _internal_update();
}
inline ::google::spanner::v1::Mutation_Write* Mutation::unsafe_arena_release_update() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.spanner.v1.Mutation.update)
  if (_internal_has_update()) {
    clear_has_operation();
    ::google::spanner::v1::Mutation_Write* temp = operation_.update_;
    operation_.update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Mutation::unsafe_arena_set_allocated_update(::google::spanner::v1::Mutation_Write* update) {
  clear_operation();
  if (update) {
    set_has_update();
    operation_.update_ = update;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.spanner.v1.Mutation.update)
}
inline ::google::spanner::v1::Mutation_Write* Mutation::_internal_mutable_update() {
  if (!_internal_has_update()) {
    clear_operation();
    set_has_update();
    operation_.update_ = CreateMaybeMessage< ::google::spanner::v1::Mutation_Write >(GetArena());
  }
  return operation_.update_;
}
inline ::google::spanner::v1::Mutation_Write* Mutation::mutable_update() {
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.Mutation.update)
  return _internal_mutable_update();
}

// .google.spanner.v1.Mutation.Write insert_or_update = 3;
inline bool Mutation::_internal_has_insert_or_update() const {
  return operation_case() == kInsertOrUpdate;
}
inline bool Mutation::has_insert_or_update() const {
  return _internal_has_insert_or_update();
}
inline void Mutation::set_has_insert_or_update() {
  _oneof_case_[0] = kInsertOrUpdate;
}
inline void Mutation::clear_insert_or_update() {
  if (_internal_has_insert_or_update()) {
    if (GetArena() == nullptr) {
      delete operation_.insert_or_update_;
    }
    clear_has_operation();
  }
}
inline ::google::spanner::v1::Mutation_Write* Mutation::release_insert_or_update() {
  // @@protoc_insertion_point(field_release:google.spanner.v1.Mutation.insert_or_update)
  if (_internal_has_insert_or_update()) {
    clear_has_operation();
      ::google::spanner::v1::Mutation_Write* temp = operation_.insert_or_update_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    operation_.insert_or_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::spanner::v1::Mutation_Write& Mutation::_internal_insert_or_update() const {
  return _internal_has_insert_or_update()
      ? *operation_.insert_or_update_
      : reinterpret_cast< ::google::spanner::v1::Mutation_Write&>(::google::spanner::v1::_Mutation_Write_default_instance_);
}
inline const ::google::spanner::v1::Mutation_Write& Mutation::insert_or_update() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.Mutation.insert_or_update)
  return _internal_insert_or_update();
}
inline ::google::spanner::v1::Mutation_Write* Mutation::unsafe_arena_release_insert_or_update() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.spanner.v1.Mutation.insert_or_update)
  if (_internal_has_insert_or_update()) {
    clear_has_operation();
    ::google::spanner::v1::Mutation_Write* temp = operation_.insert_or_update_;
    operation_.insert_or_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Mutation::unsafe_arena_set_allocated_insert_or_update(::google::spanner::v1::Mutation_Write* insert_or_update) {
  clear_operation();
  if (insert_or_update) {
    set_has_insert_or_update();
    operation_.insert_or_update_ = insert_or_update;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.spanner.v1.Mutation.insert_or_update)
}
inline ::google::spanner::v1::Mutation_Write* Mutation::_internal_mutable_insert_or_update() {
  if (!_internal_has_insert_or_update()) {
    clear_operation();
    set_has_insert_or_update();
    operation_.insert_or_update_ = CreateMaybeMessage< ::google::spanner::v1::Mutation_Write >(GetArena());
  }
  return operation_.insert_or_update_;
}
inline ::google::spanner::v1::Mutation_Write* Mutation::mutable_insert_or_update() {
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.Mutation.insert_or_update)
  return _internal_mutable_insert_or_update();
}

// .google.spanner.v1.Mutation.Write replace = 4;
inline bool Mutation::_internal_has_replace() const {
  return operation_case() == kReplace;
}
inline bool Mutation::has_replace() const {
  return _internal_has_replace();
}
inline void Mutation::set_has_replace() {
  _oneof_case_[0] = kReplace;
}
inline void Mutation::clear_replace() {
  if (_internal_has_replace()) {
    if (GetArena() == nullptr) {
      delete operation_.replace_;
    }
    clear_has_operation();
  }
}
inline ::google::spanner::v1::Mutation_Write* Mutation::release_replace() {
  // @@protoc_insertion_point(field_release:google.spanner.v1.Mutation.replace)
  if (_internal_has_replace()) {
    clear_has_operation();
      ::google::spanner::v1::Mutation_Write* temp = operation_.replace_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    operation_.replace_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::spanner::v1::Mutation_Write& Mutation::_internal_replace() const {
  return _internal_has_replace()
      ? *operation_.replace_
      : reinterpret_cast< ::google::spanner::v1::Mutation_Write&>(::google::spanner::v1::_Mutation_Write_default_instance_);
}
inline const ::google::spanner::v1::Mutation_Write& Mutation::replace() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.Mutation.replace)
  return _internal_replace();
}
inline ::google::spanner::v1::Mutation_Write* Mutation::unsafe_arena_release_replace() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.spanner.v1.Mutation.replace)
  if (_internal_has_replace()) {
    clear_has_operation();
    ::google::spanner::v1::Mutation_Write* temp = operation_.replace_;
    operation_.replace_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Mutation::unsafe_arena_set_allocated_replace(::google::spanner::v1::Mutation_Write* replace) {
  clear_operation();
  if (replace) {
    set_has_replace();
    operation_.replace_ = replace;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.spanner.v1.Mutation.replace)
}
inline ::google::spanner::v1::Mutation_Write* Mutation::_internal_mutable_replace() {
  if (!_internal_has_replace()) {
    clear_operation();
    set_has_replace();
    operation_.replace_ = CreateMaybeMessage< ::google::spanner::v1::Mutation_Write >(GetArena());
  }
  return operation_.replace_;
}
inline ::google::spanner::v1::Mutation_Write* Mutation::mutable_replace() {
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.Mutation.replace)
  return _internal_mutable_replace();
}

// .google.spanner.v1.Mutation.Delete delete = 5;
inline bool Mutation::_internal_has_delete_() const {
  return operation_case() == kDelete;
}
inline bool Mutation::has_delete_() const {
  return _internal_has_delete_();
}
inline void Mutation::set_has_delete_() {
  _oneof_case_[0] = kDelete;
}
inline void Mutation::clear_delete_() {
  if (_internal_has_delete_()) {
    if (GetArena() == nullptr) {
      delete operation_.delete__;
    }
    clear_has_operation();
  }
}
inline ::google::spanner::v1::Mutation_Delete* Mutation::release_delete_() {
  // @@protoc_insertion_point(field_release:google.spanner.v1.Mutation.delete)
  if (_internal_has_delete_()) {
    clear_has_operation();
      ::google::spanner::v1::Mutation_Delete* temp = operation_.delete__;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    operation_.delete__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::spanner::v1::Mutation_Delete& Mutation::_internal_delete_() const {
  return _internal_has_delete_()
      ? *operation_.delete__
      : reinterpret_cast< ::google::spanner::v1::Mutation_Delete&>(::google::spanner::v1::_Mutation_Delete_default_instance_);
}
inline const ::google::spanner::v1::Mutation_Delete& Mutation::delete_() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.Mutation.delete)
  return _internal_delete_();
}
inline ::google::spanner::v1::Mutation_Delete* Mutation::unsafe_arena_release_delete_() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.spanner.v1.Mutation.delete)
  if (_internal_has_delete_()) {
    clear_has_operation();
    ::google::spanner::v1::Mutation_Delete* temp = operation_.delete__;
    operation_.delete__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Mutation::unsafe_arena_set_allocated_delete_(::google::spanner::v1::Mutation_Delete* delete_) {
  clear_operation();
  if (delete_) {
    set_has_delete_();
    operation_.delete__ = delete_;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.spanner.v1.Mutation.delete)
}
inline ::google::spanner::v1::Mutation_Delete* Mutation::_internal_mutable_delete_() {
  if (!_internal_has_delete_()) {
    clear_operation();
    set_has_delete_();
    operation_.delete__ = CreateMaybeMessage< ::google::spanner::v1::Mutation_Delete >(GetArena());
  }
  return operation_.delete__;
}
inline ::google::spanner::v1::Mutation_Delete* Mutation::mutable_delete_() {
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.Mutation.delete)
  return _internal_mutable_delete_();
}

inline bool Mutation::has_operation() const {
  return operation_case() != OPERATION_NOT_SET;
}
inline void Mutation::clear_has_operation() {
  _oneof_case_[0] = OPERATION_NOT_SET;
}
inline Mutation::OperationCase Mutation::operation_case() const {
  return Mutation::OperationCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace spanner
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fspanner_2fv1_2fmutation_2eproto
