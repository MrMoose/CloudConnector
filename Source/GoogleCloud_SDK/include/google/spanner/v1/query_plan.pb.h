// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/spanner/v1/query_plan.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fspanner_2fv1_2fquery_5fplan_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fspanner_2fv1_2fquery_5fplan_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/struct.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fspanner_2fv1_2fquery_5fplan_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fspanner_2fv1_2fquery_5fplan_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fspanner_2fv1_2fquery_5fplan_2eproto;
namespace google {
namespace spanner {
namespace v1 {
class PlanNode;
struct PlanNodeDefaultTypeInternal;
extern PlanNodeDefaultTypeInternal _PlanNode_default_instance_;
class PlanNode_ChildLink;
struct PlanNode_ChildLinkDefaultTypeInternal;
extern PlanNode_ChildLinkDefaultTypeInternal _PlanNode_ChildLink_default_instance_;
class PlanNode_ShortRepresentation;
struct PlanNode_ShortRepresentationDefaultTypeInternal;
extern PlanNode_ShortRepresentationDefaultTypeInternal _PlanNode_ShortRepresentation_default_instance_;
class PlanNode_ShortRepresentation_SubqueriesEntry_DoNotUse;
struct PlanNode_ShortRepresentation_SubqueriesEntry_DoNotUseDefaultTypeInternal;
extern PlanNode_ShortRepresentation_SubqueriesEntry_DoNotUseDefaultTypeInternal _PlanNode_ShortRepresentation_SubqueriesEntry_DoNotUse_default_instance_;
class QueryPlan;
struct QueryPlanDefaultTypeInternal;
extern QueryPlanDefaultTypeInternal _QueryPlan_default_instance_;
}  // namespace v1
}  // namespace spanner
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::spanner::v1::PlanNode* Arena::CreateMaybeMessage<::google::spanner::v1::PlanNode>(Arena*);
template<> ::google::spanner::v1::PlanNode_ChildLink* Arena::CreateMaybeMessage<::google::spanner::v1::PlanNode_ChildLink>(Arena*);
template<> ::google::spanner::v1::PlanNode_ShortRepresentation* Arena::CreateMaybeMessage<::google::spanner::v1::PlanNode_ShortRepresentation>(Arena*);
template<> ::google::spanner::v1::PlanNode_ShortRepresentation_SubqueriesEntry_DoNotUse* Arena::CreateMaybeMessage<::google::spanner::v1::PlanNode_ShortRepresentation_SubqueriesEntry_DoNotUse>(Arena*);
template<> ::google::spanner::v1::QueryPlan* Arena::CreateMaybeMessage<::google::spanner::v1::QueryPlan>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace spanner {
namespace v1 {

enum PlanNode_Kind : int {
  PlanNode_Kind_KIND_UNSPECIFIED = 0,
  PlanNode_Kind_RELATIONAL = 1,
  PlanNode_Kind_SCALAR = 2,
  PlanNode_Kind_PlanNode_Kind_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PlanNode_Kind_PlanNode_Kind_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PlanNode_Kind_IsValid(int value);
constexpr PlanNode_Kind PlanNode_Kind_Kind_MIN = PlanNode_Kind_KIND_UNSPECIFIED;
constexpr PlanNode_Kind PlanNode_Kind_Kind_MAX = PlanNode_Kind_SCALAR;
constexpr int PlanNode_Kind_Kind_ARRAYSIZE = PlanNode_Kind_Kind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlanNode_Kind_descriptor();
template<typename T>
inline const std::string& PlanNode_Kind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PlanNode_Kind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PlanNode_Kind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PlanNode_Kind_descriptor(), enum_t_value);
}
inline bool PlanNode_Kind_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PlanNode_Kind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PlanNode_Kind>(
    PlanNode_Kind_descriptor(), name, value);
}
// ===================================================================

class PlanNode_ChildLink final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.spanner.v1.PlanNode.ChildLink) */ {
 public:
  inline PlanNode_ChildLink() : PlanNode_ChildLink(nullptr) {}
  ~PlanNode_ChildLink() override;
  explicit PROTOBUF_CONSTEXPR PlanNode_ChildLink(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlanNode_ChildLink(const PlanNode_ChildLink& from);
  PlanNode_ChildLink(PlanNode_ChildLink&& from) noexcept
    : PlanNode_ChildLink() {
    *this = ::std::move(from);
  }

  inline PlanNode_ChildLink& operator=(const PlanNode_ChildLink& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlanNode_ChildLink& operator=(PlanNode_ChildLink&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlanNode_ChildLink& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlanNode_ChildLink* internal_default_instance() {
    return reinterpret_cast<const PlanNode_ChildLink*>(
               &_PlanNode_ChildLink_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PlanNode_ChildLink& a, PlanNode_ChildLink& b) {
    a.Swap(&b);
  }
  inline void Swap(PlanNode_ChildLink* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlanNode_ChildLink* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlanNode_ChildLink* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlanNode_ChildLink>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlanNode_ChildLink& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlanNode_ChildLink& from) {
    PlanNode_ChildLink::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlanNode_ChildLink* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.spanner.v1.PlanNode.ChildLink";
  }
  protected:
  explicit PlanNode_ChildLink(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 2,
    kVariableFieldNumber = 3,
    kChildIndexFieldNumber = 1,
  };
  // string type = 2;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string variable = 3;
  void clear_variable();
  const std::string& variable() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_variable(ArgT0&& arg0, ArgT... args);
  std::string* mutable_variable();
  PROTOBUF_NODISCARD std::string* release_variable();
  void set_allocated_variable(std::string* variable);
  private:
  const std::string& _internal_variable() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_variable(const std::string& value);
  std::string* _internal_mutable_variable();
  public:

  // int32 child_index = 1;
  void clear_child_index();
  int32_t child_index() const;
  void set_child_index(int32_t value);
  private:
  int32_t _internal_child_index() const;
  void _internal_set_child_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.spanner.v1.PlanNode.ChildLink)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr variable_;
    int32_t child_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fspanner_2fv1_2fquery_5fplan_2eproto;
};
// -------------------------------------------------------------------

class PlanNode_ShortRepresentation_SubqueriesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PlanNode_ShortRepresentation_SubqueriesEntry_DoNotUse, 
    std::string, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PlanNode_ShortRepresentation_SubqueriesEntry_DoNotUse, 
    std::string, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> SuperType;
  PlanNode_ShortRepresentation_SubqueriesEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR PlanNode_ShortRepresentation_SubqueriesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit PlanNode_ShortRepresentation_SubqueriesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PlanNode_ShortRepresentation_SubqueriesEntry_DoNotUse& other);
  static const PlanNode_ShortRepresentation_SubqueriesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PlanNode_ShortRepresentation_SubqueriesEntry_DoNotUse*>(&_PlanNode_ShortRepresentation_SubqueriesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.spanner.v1.PlanNode.ShortRepresentation.SubqueriesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fspanner_2fv1_2fquery_5fplan_2eproto;
};

// -------------------------------------------------------------------

class PlanNode_ShortRepresentation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.spanner.v1.PlanNode.ShortRepresentation) */ {
 public:
  inline PlanNode_ShortRepresentation() : PlanNode_ShortRepresentation(nullptr) {}
  ~PlanNode_ShortRepresentation() override;
  explicit PROTOBUF_CONSTEXPR PlanNode_ShortRepresentation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlanNode_ShortRepresentation(const PlanNode_ShortRepresentation& from);
  PlanNode_ShortRepresentation(PlanNode_ShortRepresentation&& from) noexcept
    : PlanNode_ShortRepresentation() {
    *this = ::std::move(from);
  }

  inline PlanNode_ShortRepresentation& operator=(const PlanNode_ShortRepresentation& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlanNode_ShortRepresentation& operator=(PlanNode_ShortRepresentation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlanNode_ShortRepresentation& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlanNode_ShortRepresentation* internal_default_instance() {
    return reinterpret_cast<const PlanNode_ShortRepresentation*>(
               &_PlanNode_ShortRepresentation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PlanNode_ShortRepresentation& a, PlanNode_ShortRepresentation& b) {
    a.Swap(&b);
  }
  inline void Swap(PlanNode_ShortRepresentation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlanNode_ShortRepresentation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlanNode_ShortRepresentation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlanNode_ShortRepresentation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlanNode_ShortRepresentation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlanNode_ShortRepresentation& from) {
    PlanNode_ShortRepresentation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlanNode_ShortRepresentation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.spanner.v1.PlanNode.ShortRepresentation";
  }
  protected:
  explicit PlanNode_ShortRepresentation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kSubqueriesFieldNumber = 2,
    kDescriptionFieldNumber = 1,
  };
  // map<string, int32> subqueries = 2;
  int subqueries_size() const;
  private:
  int _internal_subqueries_size() const;
  public:
  void clear_subqueries();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
      _internal_subqueries() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
      _internal_mutable_subqueries();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
      subqueries() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
      mutable_subqueries();

  // string description = 1;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // @@protoc_insertion_point(class_scope:google.spanner.v1.PlanNode.ShortRepresentation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        PlanNode_ShortRepresentation_SubqueriesEntry_DoNotUse,
        std::string, int32_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> subqueries_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fspanner_2fv1_2fquery_5fplan_2eproto;
};
// -------------------------------------------------------------------

class PlanNode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.spanner.v1.PlanNode) */ {
 public:
  inline PlanNode() : PlanNode(nullptr) {}
  ~PlanNode() override;
  explicit PROTOBUF_CONSTEXPR PlanNode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlanNode(const PlanNode& from);
  PlanNode(PlanNode&& from) noexcept
    : PlanNode() {
    *this = ::std::move(from);
  }

  inline PlanNode& operator=(const PlanNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlanNode& operator=(PlanNode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlanNode& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlanNode* internal_default_instance() {
    return reinterpret_cast<const PlanNode*>(
               &_PlanNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PlanNode& a, PlanNode& b) {
    a.Swap(&b);
  }
  inline void Swap(PlanNode* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlanNode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlanNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlanNode>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlanNode& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlanNode& from) {
    PlanNode::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlanNode* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.spanner.v1.PlanNode";
  }
  protected:
  explicit PlanNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PlanNode_ChildLink ChildLink;
  typedef PlanNode_ShortRepresentation ShortRepresentation;

  typedef PlanNode_Kind Kind;
  static constexpr Kind KIND_UNSPECIFIED =
    PlanNode_Kind_KIND_UNSPECIFIED;
  static constexpr Kind RELATIONAL =
    PlanNode_Kind_RELATIONAL;
  static constexpr Kind SCALAR =
    PlanNode_Kind_SCALAR;
  static inline bool Kind_IsValid(int value) {
    return PlanNode_Kind_IsValid(value);
  }
  static constexpr Kind Kind_MIN =
    PlanNode_Kind_Kind_MIN;
  static constexpr Kind Kind_MAX =
    PlanNode_Kind_Kind_MAX;
  static constexpr int Kind_ARRAYSIZE =
    PlanNode_Kind_Kind_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Kind_descriptor() {
    return PlanNode_Kind_descriptor();
  }
  template<typename T>
  static inline const std::string& Kind_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Kind>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Kind_Name.");
    return PlanNode_Kind_Name(enum_t_value);
  }
  static inline bool Kind_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Kind* value) {
    return PlanNode_Kind_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kChildLinksFieldNumber = 4,
    kDisplayNameFieldNumber = 3,
    kShortRepresentationFieldNumber = 5,
    kMetadataFieldNumber = 6,
    kExecutionStatsFieldNumber = 7,
    kIndexFieldNumber = 1,
    kKindFieldNumber = 2,
  };
  // repeated .google.spanner.v1.PlanNode.ChildLink child_links = 4;
  int child_links_size() const;
  private:
  int _internal_child_links_size() const;
  public:
  void clear_child_links();
  ::google::spanner::v1::PlanNode_ChildLink* mutable_child_links(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::spanner::v1::PlanNode_ChildLink >*
      mutable_child_links();
  private:
  const ::google::spanner::v1::PlanNode_ChildLink& _internal_child_links(int index) const;
  ::google::spanner::v1::PlanNode_ChildLink* _internal_add_child_links();
  public:
  const ::google::spanner::v1::PlanNode_ChildLink& child_links(int index) const;
  ::google::spanner::v1::PlanNode_ChildLink* add_child_links();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::spanner::v1::PlanNode_ChildLink >&
      child_links() const;

  // string display_name = 3;
  void clear_display_name();
  const std::string& display_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_display_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_display_name();
  PROTOBUF_NODISCARD std::string* release_display_name();
  void set_allocated_display_name(std::string* display_name);
  private:
  const std::string& _internal_display_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_display_name(const std::string& value);
  std::string* _internal_mutable_display_name();
  public:

  // .google.spanner.v1.PlanNode.ShortRepresentation short_representation = 5;
  bool has_short_representation() const;
  private:
  bool _internal_has_short_representation() const;
  public:
  void clear_short_representation();
  const ::google::spanner::v1::PlanNode_ShortRepresentation& short_representation() const;
  PROTOBUF_NODISCARD ::google::spanner::v1::PlanNode_ShortRepresentation* release_short_representation();
  ::google::spanner::v1::PlanNode_ShortRepresentation* mutable_short_representation();
  void set_allocated_short_representation(::google::spanner::v1::PlanNode_ShortRepresentation* short_representation);
  private:
  const ::google::spanner::v1::PlanNode_ShortRepresentation& _internal_short_representation() const;
  ::google::spanner::v1::PlanNode_ShortRepresentation* _internal_mutable_short_representation();
  public:
  void unsafe_arena_set_allocated_short_representation(
      ::google::spanner::v1::PlanNode_ShortRepresentation* short_representation);
  ::google::spanner::v1::PlanNode_ShortRepresentation* unsafe_arena_release_short_representation();

  // .google.protobuf.Struct metadata = 6;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::PROTOBUF_NAMESPACE_ID::Struct& metadata() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_metadata();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_metadata();
  void set_allocated_metadata(::PROTOBUF_NAMESPACE_ID::Struct* metadata);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::PROTOBUF_NAMESPACE_ID::Struct* metadata);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_metadata();

  // .google.protobuf.Struct execution_stats = 7;
  bool has_execution_stats() const;
  private:
  bool _internal_has_execution_stats() const;
  public:
  void clear_execution_stats();
  const ::PROTOBUF_NAMESPACE_ID::Struct& execution_stats() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_execution_stats();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_execution_stats();
  void set_allocated_execution_stats(::PROTOBUF_NAMESPACE_ID::Struct* execution_stats);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_execution_stats() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_execution_stats();
  public:
  void unsafe_arena_set_allocated_execution_stats(
      ::PROTOBUF_NAMESPACE_ID::Struct* execution_stats);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_execution_stats();

  // int32 index = 1;
  void clear_index();
  int32_t index() const;
  void set_index(int32_t value);
  private:
  int32_t _internal_index() const;
  void _internal_set_index(int32_t value);
  public:

  // .google.spanner.v1.PlanNode.Kind kind = 2;
  void clear_kind();
  ::google::spanner::v1::PlanNode_Kind kind() const;
  void set_kind(::google::spanner::v1::PlanNode_Kind value);
  private:
  ::google::spanner::v1::PlanNode_Kind _internal_kind() const;
  void _internal_set_kind(::google::spanner::v1::PlanNode_Kind value);
  public:

  // @@protoc_insertion_point(class_scope:google.spanner.v1.PlanNode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::spanner::v1::PlanNode_ChildLink > child_links_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
    ::google::spanner::v1::PlanNode_ShortRepresentation* short_representation_;
    ::PROTOBUF_NAMESPACE_ID::Struct* metadata_;
    ::PROTOBUF_NAMESPACE_ID::Struct* execution_stats_;
    int32_t index_;
    int kind_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fspanner_2fv1_2fquery_5fplan_2eproto;
};
// -------------------------------------------------------------------

class QueryPlan final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.spanner.v1.QueryPlan) */ {
 public:
  inline QueryPlan() : QueryPlan(nullptr) {}
  ~QueryPlan() override;
  explicit PROTOBUF_CONSTEXPR QueryPlan(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryPlan(const QueryPlan& from);
  QueryPlan(QueryPlan&& from) noexcept
    : QueryPlan() {
    *this = ::std::move(from);
  }

  inline QueryPlan& operator=(const QueryPlan& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryPlan& operator=(QueryPlan&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryPlan& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryPlan* internal_default_instance() {
    return reinterpret_cast<const QueryPlan*>(
               &_QueryPlan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(QueryPlan& a, QueryPlan& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryPlan* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryPlan* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryPlan* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryPlan>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryPlan& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryPlan& from) {
    QueryPlan::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryPlan* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.spanner.v1.QueryPlan";
  }
  protected:
  explicit QueryPlan(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlanNodesFieldNumber = 1,
  };
  // repeated .google.spanner.v1.PlanNode plan_nodes = 1;
  int plan_nodes_size() const;
  private:
  int _internal_plan_nodes_size() const;
  public:
  void clear_plan_nodes();
  ::google::spanner::v1::PlanNode* mutable_plan_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::spanner::v1::PlanNode >*
      mutable_plan_nodes();
  private:
  const ::google::spanner::v1::PlanNode& _internal_plan_nodes(int index) const;
  ::google::spanner::v1::PlanNode* _internal_add_plan_nodes();
  public:
  const ::google::spanner::v1::PlanNode& plan_nodes(int index) const;
  ::google::spanner::v1::PlanNode* add_plan_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::spanner::v1::PlanNode >&
      plan_nodes() const;

  // @@protoc_insertion_point(class_scope:google.spanner.v1.QueryPlan)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::spanner::v1::PlanNode > plan_nodes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fspanner_2fv1_2fquery_5fplan_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PlanNode_ChildLink

// int32 child_index = 1;
inline void PlanNode_ChildLink::clear_child_index() {
  _impl_.child_index_ = 0;
}
inline int32_t PlanNode_ChildLink::_internal_child_index() const {
  return _impl_.child_index_;
}
inline int32_t PlanNode_ChildLink::child_index() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.PlanNode.ChildLink.child_index)
  return _internal_child_index();
}
inline void PlanNode_ChildLink::_internal_set_child_index(int32_t value) {
  
  _impl_.child_index_ = value;
}
inline void PlanNode_ChildLink::set_child_index(int32_t value) {
  _internal_set_child_index(value);
  // @@protoc_insertion_point(field_set:google.spanner.v1.PlanNode.ChildLink.child_index)
}

// string type = 2;
inline void PlanNode_ChildLink::clear_type() {
  _impl_.type_.ClearToEmpty();
}
inline const std::string& PlanNode_ChildLink::type() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.PlanNode.ChildLink.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlanNode_ChildLink::set_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.spanner.v1.PlanNode.ChildLink.type)
}
inline std::string* PlanNode_ChildLink::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.PlanNode.ChildLink.type)
  return _s;
}
inline const std::string& PlanNode_ChildLink::_internal_type() const {
  return _impl_.type_.Get();
}
inline void PlanNode_ChildLink::_internal_set_type(const std::string& value) {
  
  _impl_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* PlanNode_ChildLink::_internal_mutable_type() {
  
  return _impl_.type_.Mutable(GetArenaForAllocation());
}
inline std::string* PlanNode_ChildLink::release_type() {
  // @@protoc_insertion_point(field_release:google.spanner.v1.PlanNode.ChildLink.type)
  return _impl_.type_.Release();
}
inline void PlanNode_ChildLink::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  _impl_.type_.SetAllocated(type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.spanner.v1.PlanNode.ChildLink.type)
}

// string variable = 3;
inline void PlanNode_ChildLink::clear_variable() {
  _impl_.variable_.ClearToEmpty();
}
inline const std::string& PlanNode_ChildLink::variable() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.PlanNode.ChildLink.variable)
  return _internal_variable();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlanNode_ChildLink::set_variable(ArgT0&& arg0, ArgT... args) {
 
 _impl_.variable_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.spanner.v1.PlanNode.ChildLink.variable)
}
inline std::string* PlanNode_ChildLink::mutable_variable() {
  std::string* _s = _internal_mutable_variable();
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.PlanNode.ChildLink.variable)
  return _s;
}
inline const std::string& PlanNode_ChildLink::_internal_variable() const {
  return _impl_.variable_.Get();
}
inline void PlanNode_ChildLink::_internal_set_variable(const std::string& value) {
  
  _impl_.variable_.Set(value, GetArenaForAllocation());
}
inline std::string* PlanNode_ChildLink::_internal_mutable_variable() {
  
  return _impl_.variable_.Mutable(GetArenaForAllocation());
}
inline std::string* PlanNode_ChildLink::release_variable() {
  // @@protoc_insertion_point(field_release:google.spanner.v1.PlanNode.ChildLink.variable)
  return _impl_.variable_.Release();
}
inline void PlanNode_ChildLink::set_allocated_variable(std::string* variable) {
  if (variable != nullptr) {
    
  } else {
    
  }
  _impl_.variable_.SetAllocated(variable, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.variable_.IsDefault()) {
    _impl_.variable_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.spanner.v1.PlanNode.ChildLink.variable)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PlanNode_ShortRepresentation

// string description = 1;
inline void PlanNode_ShortRepresentation::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& PlanNode_ShortRepresentation::description() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.PlanNode.ShortRepresentation.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlanNode_ShortRepresentation::set_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.spanner.v1.PlanNode.ShortRepresentation.description)
}
inline std::string* PlanNode_ShortRepresentation::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.PlanNode.ShortRepresentation.description)
  return _s;
}
inline const std::string& PlanNode_ShortRepresentation::_internal_description() const {
  return _impl_.description_.Get();
}
inline void PlanNode_ShortRepresentation::_internal_set_description(const std::string& value) {
  
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* PlanNode_ShortRepresentation::_internal_mutable_description() {
  
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* PlanNode_ShortRepresentation::release_description() {
  // @@protoc_insertion_point(field_release:google.spanner.v1.PlanNode.ShortRepresentation.description)
  return _impl_.description_.Release();
}
inline void PlanNode_ShortRepresentation::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.spanner.v1.PlanNode.ShortRepresentation.description)
}

// map<string, int32> subqueries = 2;
inline int PlanNode_ShortRepresentation::_internal_subqueries_size() const {
  return _impl_.subqueries_.size();
}
inline int PlanNode_ShortRepresentation::subqueries_size() const {
  return _internal_subqueries_size();
}
inline void PlanNode_ShortRepresentation::clear_subqueries() {
  _impl_.subqueries_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
PlanNode_ShortRepresentation::_internal_subqueries() const {
  return _impl_.subqueries_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
PlanNode_ShortRepresentation::subqueries() const {
  // @@protoc_insertion_point(field_map:google.spanner.v1.PlanNode.ShortRepresentation.subqueries)
  return _internal_subqueries();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
PlanNode_ShortRepresentation::_internal_mutable_subqueries() {
  return _impl_.subqueries_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
PlanNode_ShortRepresentation::mutable_subqueries() {
  // @@protoc_insertion_point(field_mutable_map:google.spanner.v1.PlanNode.ShortRepresentation.subqueries)
  return _internal_mutable_subqueries();
}

// -------------------------------------------------------------------

// PlanNode

// int32 index = 1;
inline void PlanNode::clear_index() {
  _impl_.index_ = 0;
}
inline int32_t PlanNode::_internal_index() const {
  return _impl_.index_;
}
inline int32_t PlanNode::index() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.PlanNode.index)
  return _internal_index();
}
inline void PlanNode::_internal_set_index(int32_t value) {
  
  _impl_.index_ = value;
}
inline void PlanNode::set_index(int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:google.spanner.v1.PlanNode.index)
}

// .google.spanner.v1.PlanNode.Kind kind = 2;
inline void PlanNode::clear_kind() {
  _impl_.kind_ = 0;
}
inline ::google::spanner::v1::PlanNode_Kind PlanNode::_internal_kind() const {
  return static_cast< ::google::spanner::v1::PlanNode_Kind >(_impl_.kind_);
}
inline ::google::spanner::v1::PlanNode_Kind PlanNode::kind() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.PlanNode.kind)
  return _internal_kind();
}
inline void PlanNode::_internal_set_kind(::google::spanner::v1::PlanNode_Kind value) {
  
  _impl_.kind_ = value;
}
inline void PlanNode::set_kind(::google::spanner::v1::PlanNode_Kind value) {
  _internal_set_kind(value);
  // @@protoc_insertion_point(field_set:google.spanner.v1.PlanNode.kind)
}

// string display_name = 3;
inline void PlanNode::clear_display_name() {
  _impl_.display_name_.ClearToEmpty();
}
inline const std::string& PlanNode::display_name() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.PlanNode.display_name)
  return _internal_display_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlanNode::set_display_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.display_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.spanner.v1.PlanNode.display_name)
}
inline std::string* PlanNode::mutable_display_name() {
  std::string* _s = _internal_mutable_display_name();
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.PlanNode.display_name)
  return _s;
}
inline const std::string& PlanNode::_internal_display_name() const {
  return _impl_.display_name_.Get();
}
inline void PlanNode::_internal_set_display_name(const std::string& value) {
  
  _impl_.display_name_.Set(value, GetArenaForAllocation());
}
inline std::string* PlanNode::_internal_mutable_display_name() {
  
  return _impl_.display_name_.Mutable(GetArenaForAllocation());
}
inline std::string* PlanNode::release_display_name() {
  // @@protoc_insertion_point(field_release:google.spanner.v1.PlanNode.display_name)
  return _impl_.display_name_.Release();
}
inline void PlanNode::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    
  } else {
    
  }
  _impl_.display_name_.SetAllocated(display_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.display_name_.IsDefault()) {
    _impl_.display_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.spanner.v1.PlanNode.display_name)
}

// repeated .google.spanner.v1.PlanNode.ChildLink child_links = 4;
inline int PlanNode::_internal_child_links_size() const {
  return _impl_.child_links_.size();
}
inline int PlanNode::child_links_size() const {
  return _internal_child_links_size();
}
inline void PlanNode::clear_child_links() {
  _impl_.child_links_.Clear();
}
inline ::google::spanner::v1::PlanNode_ChildLink* PlanNode::mutable_child_links(int index) {
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.PlanNode.child_links)
  return _impl_.child_links_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::spanner::v1::PlanNode_ChildLink >*
PlanNode::mutable_child_links() {
  // @@protoc_insertion_point(field_mutable_list:google.spanner.v1.PlanNode.child_links)
  return &_impl_.child_links_;
}
inline const ::google::spanner::v1::PlanNode_ChildLink& PlanNode::_internal_child_links(int index) const {
  return _impl_.child_links_.Get(index);
}
inline const ::google::spanner::v1::PlanNode_ChildLink& PlanNode::child_links(int index) const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.PlanNode.child_links)
  return _internal_child_links(index);
}
inline ::google::spanner::v1::PlanNode_ChildLink* PlanNode::_internal_add_child_links() {
  return _impl_.child_links_.Add();
}
inline ::google::spanner::v1::PlanNode_ChildLink* PlanNode::add_child_links() {
  ::google::spanner::v1::PlanNode_ChildLink* _add = _internal_add_child_links();
  // @@protoc_insertion_point(field_add:google.spanner.v1.PlanNode.child_links)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::spanner::v1::PlanNode_ChildLink >&
PlanNode::child_links() const {
  // @@protoc_insertion_point(field_list:google.spanner.v1.PlanNode.child_links)
  return _impl_.child_links_;
}

// .google.spanner.v1.PlanNode.ShortRepresentation short_representation = 5;
inline bool PlanNode::_internal_has_short_representation() const {
  return this != internal_default_instance() && _impl_.short_representation_ != nullptr;
}
inline bool PlanNode::has_short_representation() const {
  return _internal_has_short_representation();
}
inline void PlanNode::clear_short_representation() {
  if (GetArenaForAllocation() == nullptr && _impl_.short_representation_ != nullptr) {
    delete _impl_.short_representation_;
  }
  _impl_.short_representation_ = nullptr;
}
inline const ::google::spanner::v1::PlanNode_ShortRepresentation& PlanNode::_internal_short_representation() const {
  const ::google::spanner::v1::PlanNode_ShortRepresentation* p = _impl_.short_representation_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::spanner::v1::PlanNode_ShortRepresentation&>(
      ::google::spanner::v1::_PlanNode_ShortRepresentation_default_instance_);
}
inline const ::google::spanner::v1::PlanNode_ShortRepresentation& PlanNode::short_representation() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.PlanNode.short_representation)
  return _internal_short_representation();
}
inline void PlanNode::unsafe_arena_set_allocated_short_representation(
    ::google::spanner::v1::PlanNode_ShortRepresentation* short_representation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.short_representation_);
  }
  _impl_.short_representation_ = short_representation;
  if (short_representation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.spanner.v1.PlanNode.short_representation)
}
inline ::google::spanner::v1::PlanNode_ShortRepresentation* PlanNode::release_short_representation() {
  
  ::google::spanner::v1::PlanNode_ShortRepresentation* temp = _impl_.short_representation_;
  _impl_.short_representation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::spanner::v1::PlanNode_ShortRepresentation* PlanNode::unsafe_arena_release_short_representation() {
  // @@protoc_insertion_point(field_release:google.spanner.v1.PlanNode.short_representation)
  
  ::google::spanner::v1::PlanNode_ShortRepresentation* temp = _impl_.short_representation_;
  _impl_.short_representation_ = nullptr;
  return temp;
}
inline ::google::spanner::v1::PlanNode_ShortRepresentation* PlanNode::_internal_mutable_short_representation() {
  
  if (_impl_.short_representation_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::spanner::v1::PlanNode_ShortRepresentation>(GetArenaForAllocation());
    _impl_.short_representation_ = p;
  }
  return _impl_.short_representation_;
}
inline ::google::spanner::v1::PlanNode_ShortRepresentation* PlanNode::mutable_short_representation() {
  ::google::spanner::v1::PlanNode_ShortRepresentation* _msg = _internal_mutable_short_representation();
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.PlanNode.short_representation)
  return _msg;
}
inline void PlanNode::set_allocated_short_representation(::google::spanner::v1::PlanNode_ShortRepresentation* short_representation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.short_representation_;
  }
  if (short_representation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(short_representation);
    if (message_arena != submessage_arena) {
      short_representation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, short_representation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.short_representation_ = short_representation;
  // @@protoc_insertion_point(field_set_allocated:google.spanner.v1.PlanNode.short_representation)
}

// .google.protobuf.Struct metadata = 6;
inline bool PlanNode::_internal_has_metadata() const {
  return this != internal_default_instance() && _impl_.metadata_ != nullptr;
}
inline bool PlanNode::has_metadata() const {
  return _internal_has_metadata();
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& PlanNode::_internal_metadata() const {
  const ::PROTOBUF_NAMESPACE_ID::Struct* p = _impl_.metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Struct&>(
      ::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& PlanNode::metadata() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.PlanNode.metadata)
  return _internal_metadata();
}
inline void PlanNode::unsafe_arena_set_allocated_metadata(
    ::PROTOBUF_NAMESPACE_ID::Struct* metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metadata_);
  }
  _impl_.metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.spanner.v1.PlanNode.metadata)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* PlanNode::release_metadata() {
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = _impl_.metadata_;
  _impl_.metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* PlanNode::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:google.spanner.v1.PlanNode.metadata)
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = _impl_.metadata_;
  _impl_.metadata_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* PlanNode::_internal_mutable_metadata() {
  
  if (_impl_.metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    _impl_.metadata_ = p;
  }
  return _impl_.metadata_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* PlanNode::mutable_metadata() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.PlanNode.metadata)
  return _msg;
}
inline void PlanNode::set_allocated_metadata(::PROTOBUF_NAMESPACE_ID::Struct* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metadata_);
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata));
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:google.spanner.v1.PlanNode.metadata)
}

// .google.protobuf.Struct execution_stats = 7;
inline bool PlanNode::_internal_has_execution_stats() const {
  return this != internal_default_instance() && _impl_.execution_stats_ != nullptr;
}
inline bool PlanNode::has_execution_stats() const {
  return _internal_has_execution_stats();
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& PlanNode::_internal_execution_stats() const {
  const ::PROTOBUF_NAMESPACE_ID::Struct* p = _impl_.execution_stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Struct&>(
      ::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& PlanNode::execution_stats() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.PlanNode.execution_stats)
  return _internal_execution_stats();
}
inline void PlanNode::unsafe_arena_set_allocated_execution_stats(
    ::PROTOBUF_NAMESPACE_ID::Struct* execution_stats) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.execution_stats_);
  }
  _impl_.execution_stats_ = execution_stats;
  if (execution_stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.spanner.v1.PlanNode.execution_stats)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* PlanNode::release_execution_stats() {
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = _impl_.execution_stats_;
  _impl_.execution_stats_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* PlanNode::unsafe_arena_release_execution_stats() {
  // @@protoc_insertion_point(field_release:google.spanner.v1.PlanNode.execution_stats)
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = _impl_.execution_stats_;
  _impl_.execution_stats_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* PlanNode::_internal_mutable_execution_stats() {
  
  if (_impl_.execution_stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    _impl_.execution_stats_ = p;
  }
  return _impl_.execution_stats_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* PlanNode::mutable_execution_stats() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_execution_stats();
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.PlanNode.execution_stats)
  return _msg;
}
inline void PlanNode::set_allocated_execution_stats(::PROTOBUF_NAMESPACE_ID::Struct* execution_stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.execution_stats_);
  }
  if (execution_stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(execution_stats));
    if (message_arena != submessage_arena) {
      execution_stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, execution_stats, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.execution_stats_ = execution_stats;
  // @@protoc_insertion_point(field_set_allocated:google.spanner.v1.PlanNode.execution_stats)
}

// -------------------------------------------------------------------

// QueryPlan

// repeated .google.spanner.v1.PlanNode plan_nodes = 1;
inline int QueryPlan::_internal_plan_nodes_size() const {
  return _impl_.plan_nodes_.size();
}
inline int QueryPlan::plan_nodes_size() const {
  return _internal_plan_nodes_size();
}
inline void QueryPlan::clear_plan_nodes() {
  _impl_.plan_nodes_.Clear();
}
inline ::google::spanner::v1::PlanNode* QueryPlan::mutable_plan_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.QueryPlan.plan_nodes)
  return _impl_.plan_nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::spanner::v1::PlanNode >*
QueryPlan::mutable_plan_nodes() {
  // @@protoc_insertion_point(field_mutable_list:google.spanner.v1.QueryPlan.plan_nodes)
  return &_impl_.plan_nodes_;
}
inline const ::google::spanner::v1::PlanNode& QueryPlan::_internal_plan_nodes(int index) const {
  return _impl_.plan_nodes_.Get(index);
}
inline const ::google::spanner::v1::PlanNode& QueryPlan::plan_nodes(int index) const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.QueryPlan.plan_nodes)
  return _internal_plan_nodes(index);
}
inline ::google::spanner::v1::PlanNode* QueryPlan::_internal_add_plan_nodes() {
  return _impl_.plan_nodes_.Add();
}
inline ::google::spanner::v1::PlanNode* QueryPlan::add_plan_nodes() {
  ::google::spanner::v1::PlanNode* _add = _internal_add_plan_nodes();
  // @@protoc_insertion_point(field_add:google.spanner.v1.QueryPlan.plan_nodes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::spanner::v1::PlanNode >&
QueryPlan::plan_nodes() const {
  // @@protoc_insertion_point(field_list:google.spanner.v1.QueryPlan.plan_nodes)
  return _impl_.plan_nodes_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace spanner
}  // namespace google

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::google::spanner::v1::PlanNode_Kind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::spanner::v1::PlanNode_Kind>() {
  return ::google::spanner::v1::PlanNode_Kind_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fspanner_2fv1_2fquery_5fplan_2eproto
