// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/rpc/error_details.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2frpc_2ferror_5fdetails_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2frpc_2ferror_5fdetails_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/duration.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2frpc_2ferror_5fdetails_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2frpc_2ferror_5fdetails_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2frpc_2ferror_5fdetails_2eproto;
namespace google {
namespace rpc {
class BadRequest;
struct BadRequestDefaultTypeInternal;
extern BadRequestDefaultTypeInternal _BadRequest_default_instance_;
class BadRequest_FieldViolation;
struct BadRequest_FieldViolationDefaultTypeInternal;
extern BadRequest_FieldViolationDefaultTypeInternal _BadRequest_FieldViolation_default_instance_;
class DebugInfo;
struct DebugInfoDefaultTypeInternal;
extern DebugInfoDefaultTypeInternal _DebugInfo_default_instance_;
class ErrorInfo;
struct ErrorInfoDefaultTypeInternal;
extern ErrorInfoDefaultTypeInternal _ErrorInfo_default_instance_;
class ErrorInfo_MetadataEntry_DoNotUse;
struct ErrorInfo_MetadataEntry_DoNotUseDefaultTypeInternal;
extern ErrorInfo_MetadataEntry_DoNotUseDefaultTypeInternal _ErrorInfo_MetadataEntry_DoNotUse_default_instance_;
class Help;
struct HelpDefaultTypeInternal;
extern HelpDefaultTypeInternal _Help_default_instance_;
class Help_Link;
struct Help_LinkDefaultTypeInternal;
extern Help_LinkDefaultTypeInternal _Help_Link_default_instance_;
class LocalizedMessage;
struct LocalizedMessageDefaultTypeInternal;
extern LocalizedMessageDefaultTypeInternal _LocalizedMessage_default_instance_;
class PreconditionFailure;
struct PreconditionFailureDefaultTypeInternal;
extern PreconditionFailureDefaultTypeInternal _PreconditionFailure_default_instance_;
class PreconditionFailure_Violation;
struct PreconditionFailure_ViolationDefaultTypeInternal;
extern PreconditionFailure_ViolationDefaultTypeInternal _PreconditionFailure_Violation_default_instance_;
class QuotaFailure;
struct QuotaFailureDefaultTypeInternal;
extern QuotaFailureDefaultTypeInternal _QuotaFailure_default_instance_;
class QuotaFailure_Violation;
struct QuotaFailure_ViolationDefaultTypeInternal;
extern QuotaFailure_ViolationDefaultTypeInternal _QuotaFailure_Violation_default_instance_;
class RequestInfo;
struct RequestInfoDefaultTypeInternal;
extern RequestInfoDefaultTypeInternal _RequestInfo_default_instance_;
class ResourceInfo;
struct ResourceInfoDefaultTypeInternal;
extern ResourceInfoDefaultTypeInternal _ResourceInfo_default_instance_;
class RetryInfo;
struct RetryInfoDefaultTypeInternal;
extern RetryInfoDefaultTypeInternal _RetryInfo_default_instance_;
}  // namespace rpc
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::rpc::BadRequest* Arena::CreateMaybeMessage<::google::rpc::BadRequest>(Arena*);
template<> ::google::rpc::BadRequest_FieldViolation* Arena::CreateMaybeMessage<::google::rpc::BadRequest_FieldViolation>(Arena*);
template<> ::google::rpc::DebugInfo* Arena::CreateMaybeMessage<::google::rpc::DebugInfo>(Arena*);
template<> ::google::rpc::ErrorInfo* Arena::CreateMaybeMessage<::google::rpc::ErrorInfo>(Arena*);
template<> ::google::rpc::ErrorInfo_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::google::rpc::ErrorInfo_MetadataEntry_DoNotUse>(Arena*);
template<> ::google::rpc::Help* Arena::CreateMaybeMessage<::google::rpc::Help>(Arena*);
template<> ::google::rpc::Help_Link* Arena::CreateMaybeMessage<::google::rpc::Help_Link>(Arena*);
template<> ::google::rpc::LocalizedMessage* Arena::CreateMaybeMessage<::google::rpc::LocalizedMessage>(Arena*);
template<> ::google::rpc::PreconditionFailure* Arena::CreateMaybeMessage<::google::rpc::PreconditionFailure>(Arena*);
template<> ::google::rpc::PreconditionFailure_Violation* Arena::CreateMaybeMessage<::google::rpc::PreconditionFailure_Violation>(Arena*);
template<> ::google::rpc::QuotaFailure* Arena::CreateMaybeMessage<::google::rpc::QuotaFailure>(Arena*);
template<> ::google::rpc::QuotaFailure_Violation* Arena::CreateMaybeMessage<::google::rpc::QuotaFailure_Violation>(Arena*);
template<> ::google::rpc::RequestInfo* Arena::CreateMaybeMessage<::google::rpc::RequestInfo>(Arena*);
template<> ::google::rpc::ResourceInfo* Arena::CreateMaybeMessage<::google::rpc::ResourceInfo>(Arena*);
template<> ::google::rpc::RetryInfo* Arena::CreateMaybeMessage<::google::rpc::RetryInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace rpc {

// ===================================================================

class RetryInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.rpc.RetryInfo) */ {
 public:
  inline RetryInfo() : RetryInfo(nullptr) {}
  ~RetryInfo() override;
  explicit PROTOBUF_CONSTEXPR RetryInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RetryInfo(const RetryInfo& from);
  RetryInfo(RetryInfo&& from) noexcept
    : RetryInfo() {
    *this = ::std::move(from);
  }

  inline RetryInfo& operator=(const RetryInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RetryInfo& operator=(RetryInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RetryInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const RetryInfo* internal_default_instance() {
    return reinterpret_cast<const RetryInfo*>(
               &_RetryInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RetryInfo& a, RetryInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RetryInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RetryInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RetryInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RetryInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RetryInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RetryInfo& from) {
    RetryInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RetryInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.rpc.RetryInfo";
  }
  protected:
  explicit RetryInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRetryDelayFieldNumber = 1,
  };
  // .google.protobuf.Duration retry_delay = 1;
  bool has_retry_delay() const;
  private:
  bool _internal_has_retry_delay() const;
  public:
  void clear_retry_delay();
  const ::PROTOBUF_NAMESPACE_ID::Duration& retry_delay() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_retry_delay();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_retry_delay();
  void set_allocated_retry_delay(::PROTOBUF_NAMESPACE_ID::Duration* retry_delay);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_retry_delay() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_retry_delay();
  public:
  void unsafe_arena_set_allocated_retry_delay(
      ::PROTOBUF_NAMESPACE_ID::Duration* retry_delay);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_retry_delay();

  // @@protoc_insertion_point(class_scope:google.rpc.RetryInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::Duration* retry_delay_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2frpc_2ferror_5fdetails_2eproto;
};
// -------------------------------------------------------------------

class DebugInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.rpc.DebugInfo) */ {
 public:
  inline DebugInfo() : DebugInfo(nullptr) {}
  ~DebugInfo() override;
  explicit PROTOBUF_CONSTEXPR DebugInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DebugInfo(const DebugInfo& from);
  DebugInfo(DebugInfo&& from) noexcept
    : DebugInfo() {
    *this = ::std::move(from);
  }

  inline DebugInfo& operator=(const DebugInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DebugInfo& operator=(DebugInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DebugInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const DebugInfo* internal_default_instance() {
    return reinterpret_cast<const DebugInfo*>(
               &_DebugInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DebugInfo& a, DebugInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(DebugInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DebugInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DebugInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DebugInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DebugInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DebugInfo& from) {
    DebugInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DebugInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.rpc.DebugInfo";
  }
  protected:
  explicit DebugInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStackEntriesFieldNumber = 1,
    kDetailFieldNumber = 2,
  };
  // repeated string stack_entries = 1;
  int stack_entries_size() const;
  private:
  int _internal_stack_entries_size() const;
  public:
  void clear_stack_entries();
  const std::string& stack_entries(int index) const;
  std::string* mutable_stack_entries(int index);
  void set_stack_entries(int index, const std::string& value);
  void set_stack_entries(int index, std::string&& value);
  void set_stack_entries(int index, const char* value);
  void set_stack_entries(int index, const char* value, size_t size);
  std::string* add_stack_entries();
  void add_stack_entries(const std::string& value);
  void add_stack_entries(std::string&& value);
  void add_stack_entries(const char* value);
  void add_stack_entries(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& stack_entries() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_stack_entries();
  private:
  const std::string& _internal_stack_entries(int index) const;
  std::string* _internal_add_stack_entries();
  public:

  // string detail = 2;
  void clear_detail();
  const std::string& detail() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_detail(ArgT0&& arg0, ArgT... args);
  std::string* mutable_detail();
  PROTOBUF_NODISCARD std::string* release_detail();
  void set_allocated_detail(std::string* detail);
  private:
  const std::string& _internal_detail() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_detail(const std::string& value);
  std::string* _internal_mutable_detail();
  public:

  // @@protoc_insertion_point(class_scope:google.rpc.DebugInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> stack_entries_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr detail_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2frpc_2ferror_5fdetails_2eproto;
};
// -------------------------------------------------------------------

class QuotaFailure_Violation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.rpc.QuotaFailure.Violation) */ {
 public:
  inline QuotaFailure_Violation() : QuotaFailure_Violation(nullptr) {}
  ~QuotaFailure_Violation() override;
  explicit PROTOBUF_CONSTEXPR QuotaFailure_Violation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QuotaFailure_Violation(const QuotaFailure_Violation& from);
  QuotaFailure_Violation(QuotaFailure_Violation&& from) noexcept
    : QuotaFailure_Violation() {
    *this = ::std::move(from);
  }

  inline QuotaFailure_Violation& operator=(const QuotaFailure_Violation& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuotaFailure_Violation& operator=(QuotaFailure_Violation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QuotaFailure_Violation& default_instance() {
    return *internal_default_instance();
  }
  static inline const QuotaFailure_Violation* internal_default_instance() {
    return reinterpret_cast<const QuotaFailure_Violation*>(
               &_QuotaFailure_Violation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(QuotaFailure_Violation& a, QuotaFailure_Violation& b) {
    a.Swap(&b);
  }
  inline void Swap(QuotaFailure_Violation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuotaFailure_Violation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QuotaFailure_Violation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QuotaFailure_Violation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QuotaFailure_Violation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QuotaFailure_Violation& from) {
    QuotaFailure_Violation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuotaFailure_Violation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.rpc.QuotaFailure.Violation";
  }
  protected:
  explicit QuotaFailure_Violation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubjectFieldNumber = 1,
    kDescriptionFieldNumber = 2,
  };
  // string subject = 1;
  void clear_subject();
  const std::string& subject() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_subject(ArgT0&& arg0, ArgT... args);
  std::string* mutable_subject();
  PROTOBUF_NODISCARD std::string* release_subject();
  void set_allocated_subject(std::string* subject);
  private:
  const std::string& _internal_subject() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subject(const std::string& value);
  std::string* _internal_mutable_subject();
  public:

  // string description = 2;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // @@protoc_insertion_point(class_scope:google.rpc.QuotaFailure.Violation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subject_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2frpc_2ferror_5fdetails_2eproto;
};
// -------------------------------------------------------------------

class QuotaFailure final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.rpc.QuotaFailure) */ {
 public:
  inline QuotaFailure() : QuotaFailure(nullptr) {}
  ~QuotaFailure() override;
  explicit PROTOBUF_CONSTEXPR QuotaFailure(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QuotaFailure(const QuotaFailure& from);
  QuotaFailure(QuotaFailure&& from) noexcept
    : QuotaFailure() {
    *this = ::std::move(from);
  }

  inline QuotaFailure& operator=(const QuotaFailure& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuotaFailure& operator=(QuotaFailure&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QuotaFailure& default_instance() {
    return *internal_default_instance();
  }
  static inline const QuotaFailure* internal_default_instance() {
    return reinterpret_cast<const QuotaFailure*>(
               &_QuotaFailure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(QuotaFailure& a, QuotaFailure& b) {
    a.Swap(&b);
  }
  inline void Swap(QuotaFailure* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuotaFailure* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QuotaFailure* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QuotaFailure>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QuotaFailure& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QuotaFailure& from) {
    QuotaFailure::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuotaFailure* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.rpc.QuotaFailure";
  }
  protected:
  explicit QuotaFailure(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef QuotaFailure_Violation Violation;

  // accessors -------------------------------------------------------

  enum : int {
    kViolationsFieldNumber = 1,
  };
  // repeated .google.rpc.QuotaFailure.Violation violations = 1;
  int violations_size() const;
  private:
  int _internal_violations_size() const;
  public:
  void clear_violations();
  ::google::rpc::QuotaFailure_Violation* mutable_violations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::rpc::QuotaFailure_Violation >*
      mutable_violations();
  private:
  const ::google::rpc::QuotaFailure_Violation& _internal_violations(int index) const;
  ::google::rpc::QuotaFailure_Violation* _internal_add_violations();
  public:
  const ::google::rpc::QuotaFailure_Violation& violations(int index) const;
  ::google::rpc::QuotaFailure_Violation* add_violations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::rpc::QuotaFailure_Violation >&
      violations() const;

  // @@protoc_insertion_point(class_scope:google.rpc.QuotaFailure)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::rpc::QuotaFailure_Violation > violations_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2frpc_2ferror_5fdetails_2eproto;
};
// -------------------------------------------------------------------

class ErrorInfo_MetadataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ErrorInfo_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ErrorInfo_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  ErrorInfo_MetadataEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR ErrorInfo_MetadataEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit ErrorInfo_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ErrorInfo_MetadataEntry_DoNotUse& other);
  static const ErrorInfo_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ErrorInfo_MetadataEntry_DoNotUse*>(&_ErrorInfo_MetadataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.rpc.ErrorInfo.MetadataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.rpc.ErrorInfo.MetadataEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2frpc_2ferror_5fdetails_2eproto;
};

// -------------------------------------------------------------------

class ErrorInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.rpc.ErrorInfo) */ {
 public:
  inline ErrorInfo() : ErrorInfo(nullptr) {}
  ~ErrorInfo() override;
  explicit PROTOBUF_CONSTEXPR ErrorInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ErrorInfo(const ErrorInfo& from);
  ErrorInfo(ErrorInfo&& from) noexcept
    : ErrorInfo() {
    *this = ::std::move(from);
  }

  inline ErrorInfo& operator=(const ErrorInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ErrorInfo& operator=(ErrorInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ErrorInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ErrorInfo* internal_default_instance() {
    return reinterpret_cast<const ErrorInfo*>(
               &_ErrorInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ErrorInfo& a, ErrorInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ErrorInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ErrorInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ErrorInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ErrorInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ErrorInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ErrorInfo& from) {
    ErrorInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ErrorInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.rpc.ErrorInfo";
  }
  protected:
  explicit ErrorInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 3,
    kReasonFieldNumber = 1,
    kDomainFieldNumber = 2,
  };
  // map<string, string> metadata = 3;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;
  public:
  void clear_metadata();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_metadata();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_metadata();

  // string reason = 1;
  void clear_reason();
  const std::string& reason() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reason(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reason();
  PROTOBUF_NODISCARD std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // string domain = 2;
  void clear_domain();
  const std::string& domain() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_domain(ArgT0&& arg0, ArgT... args);
  std::string* mutable_domain();
  PROTOBUF_NODISCARD std::string* release_domain();
  void set_allocated_domain(std::string* domain);
  private:
  const std::string& _internal_domain() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_domain(const std::string& value);
  std::string* _internal_mutable_domain();
  public:

  // @@protoc_insertion_point(class_scope:google.rpc.ErrorInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        ErrorInfo_MetadataEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> metadata_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr domain_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2frpc_2ferror_5fdetails_2eproto;
};
// -------------------------------------------------------------------

class PreconditionFailure_Violation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.rpc.PreconditionFailure.Violation) */ {
 public:
  inline PreconditionFailure_Violation() : PreconditionFailure_Violation(nullptr) {}
  ~PreconditionFailure_Violation() override;
  explicit PROTOBUF_CONSTEXPR PreconditionFailure_Violation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PreconditionFailure_Violation(const PreconditionFailure_Violation& from);
  PreconditionFailure_Violation(PreconditionFailure_Violation&& from) noexcept
    : PreconditionFailure_Violation() {
    *this = ::std::move(from);
  }

  inline PreconditionFailure_Violation& operator=(const PreconditionFailure_Violation& from) {
    CopyFrom(from);
    return *this;
  }
  inline PreconditionFailure_Violation& operator=(PreconditionFailure_Violation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PreconditionFailure_Violation& default_instance() {
    return *internal_default_instance();
  }
  static inline const PreconditionFailure_Violation* internal_default_instance() {
    return reinterpret_cast<const PreconditionFailure_Violation*>(
               &_PreconditionFailure_Violation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PreconditionFailure_Violation& a, PreconditionFailure_Violation& b) {
    a.Swap(&b);
  }
  inline void Swap(PreconditionFailure_Violation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PreconditionFailure_Violation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PreconditionFailure_Violation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PreconditionFailure_Violation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PreconditionFailure_Violation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PreconditionFailure_Violation& from) {
    PreconditionFailure_Violation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PreconditionFailure_Violation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.rpc.PreconditionFailure.Violation";
  }
  protected:
  explicit PreconditionFailure_Violation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kSubjectFieldNumber = 2,
    kDescriptionFieldNumber = 3,
  };
  // string type = 1;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string subject = 2;
  void clear_subject();
  const std::string& subject() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_subject(ArgT0&& arg0, ArgT... args);
  std::string* mutable_subject();
  PROTOBUF_NODISCARD std::string* release_subject();
  void set_allocated_subject(std::string* subject);
  private:
  const std::string& _internal_subject() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subject(const std::string& value);
  std::string* _internal_mutable_subject();
  public:

  // string description = 3;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // @@protoc_insertion_point(class_scope:google.rpc.PreconditionFailure.Violation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subject_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2frpc_2ferror_5fdetails_2eproto;
};
// -------------------------------------------------------------------

class PreconditionFailure final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.rpc.PreconditionFailure) */ {
 public:
  inline PreconditionFailure() : PreconditionFailure(nullptr) {}
  ~PreconditionFailure() override;
  explicit PROTOBUF_CONSTEXPR PreconditionFailure(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PreconditionFailure(const PreconditionFailure& from);
  PreconditionFailure(PreconditionFailure&& from) noexcept
    : PreconditionFailure() {
    *this = ::std::move(from);
  }

  inline PreconditionFailure& operator=(const PreconditionFailure& from) {
    CopyFrom(from);
    return *this;
  }
  inline PreconditionFailure& operator=(PreconditionFailure&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PreconditionFailure& default_instance() {
    return *internal_default_instance();
  }
  static inline const PreconditionFailure* internal_default_instance() {
    return reinterpret_cast<const PreconditionFailure*>(
               &_PreconditionFailure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PreconditionFailure& a, PreconditionFailure& b) {
    a.Swap(&b);
  }
  inline void Swap(PreconditionFailure* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PreconditionFailure* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PreconditionFailure* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PreconditionFailure>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PreconditionFailure& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PreconditionFailure& from) {
    PreconditionFailure::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PreconditionFailure* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.rpc.PreconditionFailure";
  }
  protected:
  explicit PreconditionFailure(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PreconditionFailure_Violation Violation;

  // accessors -------------------------------------------------------

  enum : int {
    kViolationsFieldNumber = 1,
  };
  // repeated .google.rpc.PreconditionFailure.Violation violations = 1;
  int violations_size() const;
  private:
  int _internal_violations_size() const;
  public:
  void clear_violations();
  ::google::rpc::PreconditionFailure_Violation* mutable_violations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::rpc::PreconditionFailure_Violation >*
      mutable_violations();
  private:
  const ::google::rpc::PreconditionFailure_Violation& _internal_violations(int index) const;
  ::google::rpc::PreconditionFailure_Violation* _internal_add_violations();
  public:
  const ::google::rpc::PreconditionFailure_Violation& violations(int index) const;
  ::google::rpc::PreconditionFailure_Violation* add_violations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::rpc::PreconditionFailure_Violation >&
      violations() const;

  // @@protoc_insertion_point(class_scope:google.rpc.PreconditionFailure)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::rpc::PreconditionFailure_Violation > violations_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2frpc_2ferror_5fdetails_2eproto;
};
// -------------------------------------------------------------------

class BadRequest_FieldViolation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.rpc.BadRequest.FieldViolation) */ {
 public:
  inline BadRequest_FieldViolation() : BadRequest_FieldViolation(nullptr) {}
  ~BadRequest_FieldViolation() override;
  explicit PROTOBUF_CONSTEXPR BadRequest_FieldViolation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BadRequest_FieldViolation(const BadRequest_FieldViolation& from);
  BadRequest_FieldViolation(BadRequest_FieldViolation&& from) noexcept
    : BadRequest_FieldViolation() {
    *this = ::std::move(from);
  }

  inline BadRequest_FieldViolation& operator=(const BadRequest_FieldViolation& from) {
    CopyFrom(from);
    return *this;
  }
  inline BadRequest_FieldViolation& operator=(BadRequest_FieldViolation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BadRequest_FieldViolation& default_instance() {
    return *internal_default_instance();
  }
  static inline const BadRequest_FieldViolation* internal_default_instance() {
    return reinterpret_cast<const BadRequest_FieldViolation*>(
               &_BadRequest_FieldViolation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(BadRequest_FieldViolation& a, BadRequest_FieldViolation& b) {
    a.Swap(&b);
  }
  inline void Swap(BadRequest_FieldViolation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BadRequest_FieldViolation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BadRequest_FieldViolation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BadRequest_FieldViolation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BadRequest_FieldViolation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BadRequest_FieldViolation& from) {
    BadRequest_FieldViolation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BadRequest_FieldViolation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.rpc.BadRequest.FieldViolation";
  }
  protected:
  explicit BadRequest_FieldViolation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldFieldNumber = 1,
    kDescriptionFieldNumber = 2,
  };
  // string field = 1;
  void clear_field();
  const std::string& field() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_field(ArgT0&& arg0, ArgT... args);
  std::string* mutable_field();
  PROTOBUF_NODISCARD std::string* release_field();
  void set_allocated_field(std::string* field);
  private:
  const std::string& _internal_field() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_field(const std::string& value);
  std::string* _internal_mutable_field();
  public:

  // string description = 2;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // @@protoc_insertion_point(class_scope:google.rpc.BadRequest.FieldViolation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr field_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2frpc_2ferror_5fdetails_2eproto;
};
// -------------------------------------------------------------------

class BadRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.rpc.BadRequest) */ {
 public:
  inline BadRequest() : BadRequest(nullptr) {}
  ~BadRequest() override;
  explicit PROTOBUF_CONSTEXPR BadRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BadRequest(const BadRequest& from);
  BadRequest(BadRequest&& from) noexcept
    : BadRequest() {
    *this = ::std::move(from);
  }

  inline BadRequest& operator=(const BadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BadRequest& operator=(BadRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BadRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BadRequest* internal_default_instance() {
    return reinterpret_cast<const BadRequest*>(
               &_BadRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(BadRequest& a, BadRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BadRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BadRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BadRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BadRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BadRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BadRequest& from) {
    BadRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BadRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.rpc.BadRequest";
  }
  protected:
  explicit BadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef BadRequest_FieldViolation FieldViolation;

  // accessors -------------------------------------------------------

  enum : int {
    kFieldViolationsFieldNumber = 1,
  };
  // repeated .google.rpc.BadRequest.FieldViolation field_violations = 1;
  int field_violations_size() const;
  private:
  int _internal_field_violations_size() const;
  public:
  void clear_field_violations();
  ::google::rpc::BadRequest_FieldViolation* mutable_field_violations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::rpc::BadRequest_FieldViolation >*
      mutable_field_violations();
  private:
  const ::google::rpc::BadRequest_FieldViolation& _internal_field_violations(int index) const;
  ::google::rpc::BadRequest_FieldViolation* _internal_add_field_violations();
  public:
  const ::google::rpc::BadRequest_FieldViolation& field_violations(int index) const;
  ::google::rpc::BadRequest_FieldViolation* add_field_violations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::rpc::BadRequest_FieldViolation >&
      field_violations() const;

  // @@protoc_insertion_point(class_scope:google.rpc.BadRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::rpc::BadRequest_FieldViolation > field_violations_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2frpc_2ferror_5fdetails_2eproto;
};
// -------------------------------------------------------------------

class RequestInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.rpc.RequestInfo) */ {
 public:
  inline RequestInfo() : RequestInfo(nullptr) {}
  ~RequestInfo() override;
  explicit PROTOBUF_CONSTEXPR RequestInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestInfo(const RequestInfo& from);
  RequestInfo(RequestInfo&& from) noexcept
    : RequestInfo() {
    *this = ::std::move(from);
  }

  inline RequestInfo& operator=(const RequestInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestInfo& operator=(RequestInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestInfo* internal_default_instance() {
    return reinterpret_cast<const RequestInfo*>(
               &_RequestInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(RequestInfo& a, RequestInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RequestInfo& from) {
    RequestInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.rpc.RequestInfo";
  }
  protected:
  explicit RequestInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kServingDataFieldNumber = 2,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request_id();
  PROTOBUF_NODISCARD std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string serving_data = 2;
  void clear_serving_data();
  const std::string& serving_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_serving_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_serving_data();
  PROTOBUF_NODISCARD std::string* release_serving_data();
  void set_allocated_serving_data(std::string* serving_data);
  private:
  const std::string& _internal_serving_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serving_data(const std::string& value);
  std::string* _internal_mutable_serving_data();
  public:

  // @@protoc_insertion_point(class_scope:google.rpc.RequestInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serving_data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2frpc_2ferror_5fdetails_2eproto;
};
// -------------------------------------------------------------------

class ResourceInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.rpc.ResourceInfo) */ {
 public:
  inline ResourceInfo() : ResourceInfo(nullptr) {}
  ~ResourceInfo() override;
  explicit PROTOBUF_CONSTEXPR ResourceInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResourceInfo(const ResourceInfo& from);
  ResourceInfo(ResourceInfo&& from) noexcept
    : ResourceInfo() {
    *this = ::std::move(from);
  }

  inline ResourceInfo& operator=(const ResourceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceInfo& operator=(ResourceInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResourceInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResourceInfo* internal_default_instance() {
    return reinterpret_cast<const ResourceInfo*>(
               &_ResourceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ResourceInfo& a, ResourceInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourceInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourceInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResourceInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResourceInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResourceInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ResourceInfo& from) {
    ResourceInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourceInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.rpc.ResourceInfo";
  }
  protected:
  explicit ResourceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourceTypeFieldNumber = 1,
    kResourceNameFieldNumber = 2,
    kOwnerFieldNumber = 3,
    kDescriptionFieldNumber = 4,
  };
  // string resource_type = 1;
  void clear_resource_type();
  const std::string& resource_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_resource_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_resource_type();
  PROTOBUF_NODISCARD std::string* release_resource_type();
  void set_allocated_resource_type(std::string* resource_type);
  private:
  const std::string& _internal_resource_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_resource_type(const std::string& value);
  std::string* _internal_mutable_resource_type();
  public:

  // string resource_name = 2;
  void clear_resource_name();
  const std::string& resource_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_resource_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_resource_name();
  PROTOBUF_NODISCARD std::string* release_resource_name();
  void set_allocated_resource_name(std::string* resource_name);
  private:
  const std::string& _internal_resource_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_resource_name(const std::string& value);
  std::string* _internal_mutable_resource_name();
  public:

  // string owner = 3;
  void clear_owner();
  const std::string& owner() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_owner(ArgT0&& arg0, ArgT... args);
  std::string* mutable_owner();
  PROTOBUF_NODISCARD std::string* release_owner();
  void set_allocated_owner(std::string* owner);
  private:
  const std::string& _internal_owner() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner(const std::string& value);
  std::string* _internal_mutable_owner();
  public:

  // string description = 4;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // @@protoc_insertion_point(class_scope:google.rpc.ResourceInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resource_type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resource_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2frpc_2ferror_5fdetails_2eproto;
};
// -------------------------------------------------------------------

class Help_Link final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.rpc.Help.Link) */ {
 public:
  inline Help_Link() : Help_Link(nullptr) {}
  ~Help_Link() override;
  explicit PROTOBUF_CONSTEXPR Help_Link(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Help_Link(const Help_Link& from);
  Help_Link(Help_Link&& from) noexcept
    : Help_Link() {
    *this = ::std::move(from);
  }

  inline Help_Link& operator=(const Help_Link& from) {
    CopyFrom(from);
    return *this;
  }
  inline Help_Link& operator=(Help_Link&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Help_Link& default_instance() {
    return *internal_default_instance();
  }
  static inline const Help_Link* internal_default_instance() {
    return reinterpret_cast<const Help_Link*>(
               &_Help_Link_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Help_Link& a, Help_Link& b) {
    a.Swap(&b);
  }
  inline void Swap(Help_Link* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Help_Link* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Help_Link* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Help_Link>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Help_Link& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Help_Link& from) {
    Help_Link::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Help_Link* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.rpc.Help.Link";
  }
  protected:
  explicit Help_Link(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 1,
    kUrlFieldNumber = 2,
  };
  // string description = 1;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string url = 2;
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // @@protoc_insertion_point(class_scope:google.rpc.Help.Link)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2frpc_2ferror_5fdetails_2eproto;
};
// -------------------------------------------------------------------

class Help final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.rpc.Help) */ {
 public:
  inline Help() : Help(nullptr) {}
  ~Help() override;
  explicit PROTOBUF_CONSTEXPR Help(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Help(const Help& from);
  Help(Help&& from) noexcept
    : Help() {
    *this = ::std::move(from);
  }

  inline Help& operator=(const Help& from) {
    CopyFrom(from);
    return *this;
  }
  inline Help& operator=(Help&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Help& default_instance() {
    return *internal_default_instance();
  }
  static inline const Help* internal_default_instance() {
    return reinterpret_cast<const Help*>(
               &_Help_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Help& a, Help& b) {
    a.Swap(&b);
  }
  inline void Swap(Help* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Help* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Help* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Help>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Help& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Help& from) {
    Help::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Help* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.rpc.Help";
  }
  protected:
  explicit Help(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Help_Link Link;

  // accessors -------------------------------------------------------

  enum : int {
    kLinksFieldNumber = 1,
  };
  // repeated .google.rpc.Help.Link links = 1;
  int links_size() const;
  private:
  int _internal_links_size() const;
  public:
  void clear_links();
  ::google::rpc::Help_Link* mutable_links(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::rpc::Help_Link >*
      mutable_links();
  private:
  const ::google::rpc::Help_Link& _internal_links(int index) const;
  ::google::rpc::Help_Link* _internal_add_links();
  public:
  const ::google::rpc::Help_Link& links(int index) const;
  ::google::rpc::Help_Link* add_links();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::rpc::Help_Link >&
      links() const;

  // @@protoc_insertion_point(class_scope:google.rpc.Help)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::rpc::Help_Link > links_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2frpc_2ferror_5fdetails_2eproto;
};
// -------------------------------------------------------------------

class LocalizedMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.rpc.LocalizedMessage) */ {
 public:
  inline LocalizedMessage() : LocalizedMessage(nullptr) {}
  ~LocalizedMessage() override;
  explicit PROTOBUF_CONSTEXPR LocalizedMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LocalizedMessage(const LocalizedMessage& from);
  LocalizedMessage(LocalizedMessage&& from) noexcept
    : LocalizedMessage() {
    *this = ::std::move(from);
  }

  inline LocalizedMessage& operator=(const LocalizedMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocalizedMessage& operator=(LocalizedMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LocalizedMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocalizedMessage* internal_default_instance() {
    return reinterpret_cast<const LocalizedMessage*>(
               &_LocalizedMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(LocalizedMessage& a, LocalizedMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(LocalizedMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocalizedMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LocalizedMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LocalizedMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LocalizedMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LocalizedMessage& from) {
    LocalizedMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocalizedMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.rpc.LocalizedMessage";
  }
  protected:
  explicit LocalizedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocaleFieldNumber = 1,
    kMessageFieldNumber = 2,
  };
  // string locale = 1;
  void clear_locale();
  const std::string& locale() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_locale(ArgT0&& arg0, ArgT... args);
  std::string* mutable_locale();
  PROTOBUF_NODISCARD std::string* release_locale();
  void set_allocated_locale(std::string* locale);
  private:
  const std::string& _internal_locale() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_locale(const std::string& value);
  std::string* _internal_mutable_locale();
  public:

  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:google.rpc.LocalizedMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr locale_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2frpc_2ferror_5fdetails_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RetryInfo

// .google.protobuf.Duration retry_delay = 1;
inline bool RetryInfo::_internal_has_retry_delay() const {
  return this != internal_default_instance() && _impl_.retry_delay_ != nullptr;
}
inline bool RetryInfo::has_retry_delay() const {
  return _internal_has_retry_delay();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& RetryInfo::_internal_retry_delay() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.retry_delay_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& RetryInfo::retry_delay() const {
  // @@protoc_insertion_point(field_get:google.rpc.RetryInfo.retry_delay)
  return _internal_retry_delay();
}
inline void RetryInfo::unsafe_arena_set_allocated_retry_delay(
    ::PROTOBUF_NAMESPACE_ID::Duration* retry_delay) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.retry_delay_);
  }
  _impl_.retry_delay_ = retry_delay;
  if (retry_delay) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.rpc.RetryInfo.retry_delay)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* RetryInfo::release_retry_delay() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.retry_delay_;
  _impl_.retry_delay_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* RetryInfo::unsafe_arena_release_retry_delay() {
  // @@protoc_insertion_point(field_release:google.rpc.RetryInfo.retry_delay)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.retry_delay_;
  _impl_.retry_delay_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* RetryInfo::_internal_mutable_retry_delay() {
  
  if (_impl_.retry_delay_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.retry_delay_ = p;
  }
  return _impl_.retry_delay_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* RetryInfo::mutable_retry_delay() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_retry_delay();
  // @@protoc_insertion_point(field_mutable:google.rpc.RetryInfo.retry_delay)
  return _msg;
}
inline void RetryInfo::set_allocated_retry_delay(::PROTOBUF_NAMESPACE_ID::Duration* retry_delay) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.retry_delay_);
  }
  if (retry_delay) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(retry_delay));
    if (message_arena != submessage_arena) {
      retry_delay = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, retry_delay, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.retry_delay_ = retry_delay;
  // @@protoc_insertion_point(field_set_allocated:google.rpc.RetryInfo.retry_delay)
}

// -------------------------------------------------------------------

// DebugInfo

// repeated string stack_entries = 1;
inline int DebugInfo::_internal_stack_entries_size() const {
  return _impl_.stack_entries_.size();
}
inline int DebugInfo::stack_entries_size() const {
  return _internal_stack_entries_size();
}
inline void DebugInfo::clear_stack_entries() {
  _impl_.stack_entries_.Clear();
}
inline std::string* DebugInfo::add_stack_entries() {
  std::string* _s = _internal_add_stack_entries();
  // @@protoc_insertion_point(field_add_mutable:google.rpc.DebugInfo.stack_entries)
  return _s;
}
inline const std::string& DebugInfo::_internal_stack_entries(int index) const {
  return _impl_.stack_entries_.Get(index);
}
inline const std::string& DebugInfo::stack_entries(int index) const {
  // @@protoc_insertion_point(field_get:google.rpc.DebugInfo.stack_entries)
  return _internal_stack_entries(index);
}
inline std::string* DebugInfo::mutable_stack_entries(int index) {
  // @@protoc_insertion_point(field_mutable:google.rpc.DebugInfo.stack_entries)
  return _impl_.stack_entries_.Mutable(index);
}
inline void DebugInfo::set_stack_entries(int index, const std::string& value) {
  _impl_.stack_entries_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.rpc.DebugInfo.stack_entries)
}
inline void DebugInfo::set_stack_entries(int index, std::string&& value) {
  _impl_.stack_entries_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.rpc.DebugInfo.stack_entries)
}
inline void DebugInfo::set_stack_entries(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.stack_entries_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.rpc.DebugInfo.stack_entries)
}
inline void DebugInfo::set_stack_entries(int index, const char* value, size_t size) {
  _impl_.stack_entries_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.rpc.DebugInfo.stack_entries)
}
inline std::string* DebugInfo::_internal_add_stack_entries() {
  return _impl_.stack_entries_.Add();
}
inline void DebugInfo::add_stack_entries(const std::string& value) {
  _impl_.stack_entries_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.rpc.DebugInfo.stack_entries)
}
inline void DebugInfo::add_stack_entries(std::string&& value) {
  _impl_.stack_entries_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.rpc.DebugInfo.stack_entries)
}
inline void DebugInfo::add_stack_entries(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.stack_entries_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.rpc.DebugInfo.stack_entries)
}
inline void DebugInfo::add_stack_entries(const char* value, size_t size) {
  _impl_.stack_entries_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.rpc.DebugInfo.stack_entries)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DebugInfo::stack_entries() const {
  // @@protoc_insertion_point(field_list:google.rpc.DebugInfo.stack_entries)
  return _impl_.stack_entries_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DebugInfo::mutable_stack_entries() {
  // @@protoc_insertion_point(field_mutable_list:google.rpc.DebugInfo.stack_entries)
  return &_impl_.stack_entries_;
}

// string detail = 2;
inline void DebugInfo::clear_detail() {
  _impl_.detail_.ClearToEmpty();
}
inline const std::string& DebugInfo::detail() const {
  // @@protoc_insertion_point(field_get:google.rpc.DebugInfo.detail)
  return _internal_detail();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DebugInfo::set_detail(ArgT0&& arg0, ArgT... args) {
 
 _impl_.detail_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.rpc.DebugInfo.detail)
}
inline std::string* DebugInfo::mutable_detail() {
  std::string* _s = _internal_mutable_detail();
  // @@protoc_insertion_point(field_mutable:google.rpc.DebugInfo.detail)
  return _s;
}
inline const std::string& DebugInfo::_internal_detail() const {
  return _impl_.detail_.Get();
}
inline void DebugInfo::_internal_set_detail(const std::string& value) {
  
  _impl_.detail_.Set(value, GetArenaForAllocation());
}
inline std::string* DebugInfo::_internal_mutable_detail() {
  
  return _impl_.detail_.Mutable(GetArenaForAllocation());
}
inline std::string* DebugInfo::release_detail() {
  // @@protoc_insertion_point(field_release:google.rpc.DebugInfo.detail)
  return _impl_.detail_.Release();
}
inline void DebugInfo::set_allocated_detail(std::string* detail) {
  if (detail != nullptr) {
    
  } else {
    
  }
  _impl_.detail_.SetAllocated(detail, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.detail_.IsDefault()) {
    _impl_.detail_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.rpc.DebugInfo.detail)
}

// -------------------------------------------------------------------

// QuotaFailure_Violation

// string subject = 1;
inline void QuotaFailure_Violation::clear_subject() {
  _impl_.subject_.ClearToEmpty();
}
inline const std::string& QuotaFailure_Violation::subject() const {
  // @@protoc_insertion_point(field_get:google.rpc.QuotaFailure.Violation.subject)
  return _internal_subject();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QuotaFailure_Violation::set_subject(ArgT0&& arg0, ArgT... args) {
 
 _impl_.subject_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.rpc.QuotaFailure.Violation.subject)
}
inline std::string* QuotaFailure_Violation::mutable_subject() {
  std::string* _s = _internal_mutable_subject();
  // @@protoc_insertion_point(field_mutable:google.rpc.QuotaFailure.Violation.subject)
  return _s;
}
inline const std::string& QuotaFailure_Violation::_internal_subject() const {
  return _impl_.subject_.Get();
}
inline void QuotaFailure_Violation::_internal_set_subject(const std::string& value) {
  
  _impl_.subject_.Set(value, GetArenaForAllocation());
}
inline std::string* QuotaFailure_Violation::_internal_mutable_subject() {
  
  return _impl_.subject_.Mutable(GetArenaForAllocation());
}
inline std::string* QuotaFailure_Violation::release_subject() {
  // @@protoc_insertion_point(field_release:google.rpc.QuotaFailure.Violation.subject)
  return _impl_.subject_.Release();
}
inline void QuotaFailure_Violation::set_allocated_subject(std::string* subject) {
  if (subject != nullptr) {
    
  } else {
    
  }
  _impl_.subject_.SetAllocated(subject, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.subject_.IsDefault()) {
    _impl_.subject_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.rpc.QuotaFailure.Violation.subject)
}

// string description = 2;
inline void QuotaFailure_Violation::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& QuotaFailure_Violation::description() const {
  // @@protoc_insertion_point(field_get:google.rpc.QuotaFailure.Violation.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QuotaFailure_Violation::set_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.rpc.QuotaFailure.Violation.description)
}
inline std::string* QuotaFailure_Violation::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:google.rpc.QuotaFailure.Violation.description)
  return _s;
}
inline const std::string& QuotaFailure_Violation::_internal_description() const {
  return _impl_.description_.Get();
}
inline void QuotaFailure_Violation::_internal_set_description(const std::string& value) {
  
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* QuotaFailure_Violation::_internal_mutable_description() {
  
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* QuotaFailure_Violation::release_description() {
  // @@protoc_insertion_point(field_release:google.rpc.QuotaFailure.Violation.description)
  return _impl_.description_.Release();
}
inline void QuotaFailure_Violation::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.rpc.QuotaFailure.Violation.description)
}

// -------------------------------------------------------------------

// QuotaFailure

// repeated .google.rpc.QuotaFailure.Violation violations = 1;
inline int QuotaFailure::_internal_violations_size() const {
  return _impl_.violations_.size();
}
inline int QuotaFailure::violations_size() const {
  return _internal_violations_size();
}
inline void QuotaFailure::clear_violations() {
  _impl_.violations_.Clear();
}
inline ::google::rpc::QuotaFailure_Violation* QuotaFailure::mutable_violations(int index) {
  // @@protoc_insertion_point(field_mutable:google.rpc.QuotaFailure.violations)
  return _impl_.violations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::rpc::QuotaFailure_Violation >*
QuotaFailure::mutable_violations() {
  // @@protoc_insertion_point(field_mutable_list:google.rpc.QuotaFailure.violations)
  return &_impl_.violations_;
}
inline const ::google::rpc::QuotaFailure_Violation& QuotaFailure::_internal_violations(int index) const {
  return _impl_.violations_.Get(index);
}
inline const ::google::rpc::QuotaFailure_Violation& QuotaFailure::violations(int index) const {
  // @@protoc_insertion_point(field_get:google.rpc.QuotaFailure.violations)
  return _internal_violations(index);
}
inline ::google::rpc::QuotaFailure_Violation* QuotaFailure::_internal_add_violations() {
  return _impl_.violations_.Add();
}
inline ::google::rpc::QuotaFailure_Violation* QuotaFailure::add_violations() {
  ::google::rpc::QuotaFailure_Violation* _add = _internal_add_violations();
  // @@protoc_insertion_point(field_add:google.rpc.QuotaFailure.violations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::rpc::QuotaFailure_Violation >&
QuotaFailure::violations() const {
  // @@protoc_insertion_point(field_list:google.rpc.QuotaFailure.violations)
  return _impl_.violations_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ErrorInfo

// string reason = 1;
inline void ErrorInfo::clear_reason() {
  _impl_.reason_.ClearToEmpty();
}
inline const std::string& ErrorInfo::reason() const {
  // @@protoc_insertion_point(field_get:google.rpc.ErrorInfo.reason)
  return _internal_reason();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ErrorInfo::set_reason(ArgT0&& arg0, ArgT... args) {
 
 _impl_.reason_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.rpc.ErrorInfo.reason)
}
inline std::string* ErrorInfo::mutable_reason() {
  std::string* _s = _internal_mutable_reason();
  // @@protoc_insertion_point(field_mutable:google.rpc.ErrorInfo.reason)
  return _s;
}
inline const std::string& ErrorInfo::_internal_reason() const {
  return _impl_.reason_.Get();
}
inline void ErrorInfo::_internal_set_reason(const std::string& value) {
  
  _impl_.reason_.Set(value, GetArenaForAllocation());
}
inline std::string* ErrorInfo::_internal_mutable_reason() {
  
  return _impl_.reason_.Mutable(GetArenaForAllocation());
}
inline std::string* ErrorInfo::release_reason() {
  // @@protoc_insertion_point(field_release:google.rpc.ErrorInfo.reason)
  return _impl_.reason_.Release();
}
inline void ErrorInfo::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    
  } else {
    
  }
  _impl_.reason_.SetAllocated(reason, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.reason_.IsDefault()) {
    _impl_.reason_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.rpc.ErrorInfo.reason)
}

// string domain = 2;
inline void ErrorInfo::clear_domain() {
  _impl_.domain_.ClearToEmpty();
}
inline const std::string& ErrorInfo::domain() const {
  // @@protoc_insertion_point(field_get:google.rpc.ErrorInfo.domain)
  return _internal_domain();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ErrorInfo::set_domain(ArgT0&& arg0, ArgT... args) {
 
 _impl_.domain_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.rpc.ErrorInfo.domain)
}
inline std::string* ErrorInfo::mutable_domain() {
  std::string* _s = _internal_mutable_domain();
  // @@protoc_insertion_point(field_mutable:google.rpc.ErrorInfo.domain)
  return _s;
}
inline const std::string& ErrorInfo::_internal_domain() const {
  return _impl_.domain_.Get();
}
inline void ErrorInfo::_internal_set_domain(const std::string& value) {
  
  _impl_.domain_.Set(value, GetArenaForAllocation());
}
inline std::string* ErrorInfo::_internal_mutable_domain() {
  
  return _impl_.domain_.Mutable(GetArenaForAllocation());
}
inline std::string* ErrorInfo::release_domain() {
  // @@protoc_insertion_point(field_release:google.rpc.ErrorInfo.domain)
  return _impl_.domain_.Release();
}
inline void ErrorInfo::set_allocated_domain(std::string* domain) {
  if (domain != nullptr) {
    
  } else {
    
  }
  _impl_.domain_.SetAllocated(domain, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.domain_.IsDefault()) {
    _impl_.domain_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.rpc.ErrorInfo.domain)
}

// map<string, string> metadata = 3;
inline int ErrorInfo::_internal_metadata_size() const {
  return _impl_.metadata_.size();
}
inline int ErrorInfo::metadata_size() const {
  return _internal_metadata_size();
}
inline void ErrorInfo::clear_metadata() {
  _impl_.metadata_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ErrorInfo::_internal_metadata() const {
  return _impl_.metadata_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ErrorInfo::metadata() const {
  // @@protoc_insertion_point(field_map:google.rpc.ErrorInfo.metadata)
  return _internal_metadata();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ErrorInfo::_internal_mutable_metadata() {
  return _impl_.metadata_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ErrorInfo::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:google.rpc.ErrorInfo.metadata)
  return _internal_mutable_metadata();
}

// -------------------------------------------------------------------

// PreconditionFailure_Violation

// string type = 1;
inline void PreconditionFailure_Violation::clear_type() {
  _impl_.type_.ClearToEmpty();
}
inline const std::string& PreconditionFailure_Violation::type() const {
  // @@protoc_insertion_point(field_get:google.rpc.PreconditionFailure.Violation.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PreconditionFailure_Violation::set_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.rpc.PreconditionFailure.Violation.type)
}
inline std::string* PreconditionFailure_Violation::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:google.rpc.PreconditionFailure.Violation.type)
  return _s;
}
inline const std::string& PreconditionFailure_Violation::_internal_type() const {
  return _impl_.type_.Get();
}
inline void PreconditionFailure_Violation::_internal_set_type(const std::string& value) {
  
  _impl_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* PreconditionFailure_Violation::_internal_mutable_type() {
  
  return _impl_.type_.Mutable(GetArenaForAllocation());
}
inline std::string* PreconditionFailure_Violation::release_type() {
  // @@protoc_insertion_point(field_release:google.rpc.PreconditionFailure.Violation.type)
  return _impl_.type_.Release();
}
inline void PreconditionFailure_Violation::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  _impl_.type_.SetAllocated(type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.rpc.PreconditionFailure.Violation.type)
}

// string subject = 2;
inline void PreconditionFailure_Violation::clear_subject() {
  _impl_.subject_.ClearToEmpty();
}
inline const std::string& PreconditionFailure_Violation::subject() const {
  // @@protoc_insertion_point(field_get:google.rpc.PreconditionFailure.Violation.subject)
  return _internal_subject();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PreconditionFailure_Violation::set_subject(ArgT0&& arg0, ArgT... args) {
 
 _impl_.subject_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.rpc.PreconditionFailure.Violation.subject)
}
inline std::string* PreconditionFailure_Violation::mutable_subject() {
  std::string* _s = _internal_mutable_subject();
  // @@protoc_insertion_point(field_mutable:google.rpc.PreconditionFailure.Violation.subject)
  return _s;
}
inline const std::string& PreconditionFailure_Violation::_internal_subject() const {
  return _impl_.subject_.Get();
}
inline void PreconditionFailure_Violation::_internal_set_subject(const std::string& value) {
  
  _impl_.subject_.Set(value, GetArenaForAllocation());
}
inline std::string* PreconditionFailure_Violation::_internal_mutable_subject() {
  
  return _impl_.subject_.Mutable(GetArenaForAllocation());
}
inline std::string* PreconditionFailure_Violation::release_subject() {
  // @@protoc_insertion_point(field_release:google.rpc.PreconditionFailure.Violation.subject)
  return _impl_.subject_.Release();
}
inline void PreconditionFailure_Violation::set_allocated_subject(std::string* subject) {
  if (subject != nullptr) {
    
  } else {
    
  }
  _impl_.subject_.SetAllocated(subject, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.subject_.IsDefault()) {
    _impl_.subject_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.rpc.PreconditionFailure.Violation.subject)
}

// string description = 3;
inline void PreconditionFailure_Violation::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& PreconditionFailure_Violation::description() const {
  // @@protoc_insertion_point(field_get:google.rpc.PreconditionFailure.Violation.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PreconditionFailure_Violation::set_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.rpc.PreconditionFailure.Violation.description)
}
inline std::string* PreconditionFailure_Violation::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:google.rpc.PreconditionFailure.Violation.description)
  return _s;
}
inline const std::string& PreconditionFailure_Violation::_internal_description() const {
  return _impl_.description_.Get();
}
inline void PreconditionFailure_Violation::_internal_set_description(const std::string& value) {
  
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* PreconditionFailure_Violation::_internal_mutable_description() {
  
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* PreconditionFailure_Violation::release_description() {
  // @@protoc_insertion_point(field_release:google.rpc.PreconditionFailure.Violation.description)
  return _impl_.description_.Release();
}
inline void PreconditionFailure_Violation::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.rpc.PreconditionFailure.Violation.description)
}

// -------------------------------------------------------------------

// PreconditionFailure

// repeated .google.rpc.PreconditionFailure.Violation violations = 1;
inline int PreconditionFailure::_internal_violations_size() const {
  return _impl_.violations_.size();
}
inline int PreconditionFailure::violations_size() const {
  return _internal_violations_size();
}
inline void PreconditionFailure::clear_violations() {
  _impl_.violations_.Clear();
}
inline ::google::rpc::PreconditionFailure_Violation* PreconditionFailure::mutable_violations(int index) {
  // @@protoc_insertion_point(field_mutable:google.rpc.PreconditionFailure.violations)
  return _impl_.violations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::rpc::PreconditionFailure_Violation >*
PreconditionFailure::mutable_violations() {
  // @@protoc_insertion_point(field_mutable_list:google.rpc.PreconditionFailure.violations)
  return &_impl_.violations_;
}
inline const ::google::rpc::PreconditionFailure_Violation& PreconditionFailure::_internal_violations(int index) const {
  return _impl_.violations_.Get(index);
}
inline const ::google::rpc::PreconditionFailure_Violation& PreconditionFailure::violations(int index) const {
  // @@protoc_insertion_point(field_get:google.rpc.PreconditionFailure.violations)
  return _internal_violations(index);
}
inline ::google::rpc::PreconditionFailure_Violation* PreconditionFailure::_internal_add_violations() {
  return _impl_.violations_.Add();
}
inline ::google::rpc::PreconditionFailure_Violation* PreconditionFailure::add_violations() {
  ::google::rpc::PreconditionFailure_Violation* _add = _internal_add_violations();
  // @@protoc_insertion_point(field_add:google.rpc.PreconditionFailure.violations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::rpc::PreconditionFailure_Violation >&
PreconditionFailure::violations() const {
  // @@protoc_insertion_point(field_list:google.rpc.PreconditionFailure.violations)
  return _impl_.violations_;
}

// -------------------------------------------------------------------

// BadRequest_FieldViolation

// string field = 1;
inline void BadRequest_FieldViolation::clear_field() {
  _impl_.field_.ClearToEmpty();
}
inline const std::string& BadRequest_FieldViolation::field() const {
  // @@protoc_insertion_point(field_get:google.rpc.BadRequest.FieldViolation.field)
  return _internal_field();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BadRequest_FieldViolation::set_field(ArgT0&& arg0, ArgT... args) {
 
 _impl_.field_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.rpc.BadRequest.FieldViolation.field)
}
inline std::string* BadRequest_FieldViolation::mutable_field() {
  std::string* _s = _internal_mutable_field();
  // @@protoc_insertion_point(field_mutable:google.rpc.BadRequest.FieldViolation.field)
  return _s;
}
inline const std::string& BadRequest_FieldViolation::_internal_field() const {
  return _impl_.field_.Get();
}
inline void BadRequest_FieldViolation::_internal_set_field(const std::string& value) {
  
  _impl_.field_.Set(value, GetArenaForAllocation());
}
inline std::string* BadRequest_FieldViolation::_internal_mutable_field() {
  
  return _impl_.field_.Mutable(GetArenaForAllocation());
}
inline std::string* BadRequest_FieldViolation::release_field() {
  // @@protoc_insertion_point(field_release:google.rpc.BadRequest.FieldViolation.field)
  return _impl_.field_.Release();
}
inline void BadRequest_FieldViolation::set_allocated_field(std::string* field) {
  if (field != nullptr) {
    
  } else {
    
  }
  _impl_.field_.SetAllocated(field, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.field_.IsDefault()) {
    _impl_.field_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.rpc.BadRequest.FieldViolation.field)
}

// string description = 2;
inline void BadRequest_FieldViolation::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& BadRequest_FieldViolation::description() const {
  // @@protoc_insertion_point(field_get:google.rpc.BadRequest.FieldViolation.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BadRequest_FieldViolation::set_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.rpc.BadRequest.FieldViolation.description)
}
inline std::string* BadRequest_FieldViolation::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:google.rpc.BadRequest.FieldViolation.description)
  return _s;
}
inline const std::string& BadRequest_FieldViolation::_internal_description() const {
  return _impl_.description_.Get();
}
inline void BadRequest_FieldViolation::_internal_set_description(const std::string& value) {
  
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* BadRequest_FieldViolation::_internal_mutable_description() {
  
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* BadRequest_FieldViolation::release_description() {
  // @@protoc_insertion_point(field_release:google.rpc.BadRequest.FieldViolation.description)
  return _impl_.description_.Release();
}
inline void BadRequest_FieldViolation::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.rpc.BadRequest.FieldViolation.description)
}

// -------------------------------------------------------------------

// BadRequest

// repeated .google.rpc.BadRequest.FieldViolation field_violations = 1;
inline int BadRequest::_internal_field_violations_size() const {
  return _impl_.field_violations_.size();
}
inline int BadRequest::field_violations_size() const {
  return _internal_field_violations_size();
}
inline void BadRequest::clear_field_violations() {
  _impl_.field_violations_.Clear();
}
inline ::google::rpc::BadRequest_FieldViolation* BadRequest::mutable_field_violations(int index) {
  // @@protoc_insertion_point(field_mutable:google.rpc.BadRequest.field_violations)
  return _impl_.field_violations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::rpc::BadRequest_FieldViolation >*
BadRequest::mutable_field_violations() {
  // @@protoc_insertion_point(field_mutable_list:google.rpc.BadRequest.field_violations)
  return &_impl_.field_violations_;
}
inline const ::google::rpc::BadRequest_FieldViolation& BadRequest::_internal_field_violations(int index) const {
  return _impl_.field_violations_.Get(index);
}
inline const ::google::rpc::BadRequest_FieldViolation& BadRequest::field_violations(int index) const {
  // @@protoc_insertion_point(field_get:google.rpc.BadRequest.field_violations)
  return _internal_field_violations(index);
}
inline ::google::rpc::BadRequest_FieldViolation* BadRequest::_internal_add_field_violations() {
  return _impl_.field_violations_.Add();
}
inline ::google::rpc::BadRequest_FieldViolation* BadRequest::add_field_violations() {
  ::google::rpc::BadRequest_FieldViolation* _add = _internal_add_field_violations();
  // @@protoc_insertion_point(field_add:google.rpc.BadRequest.field_violations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::rpc::BadRequest_FieldViolation >&
BadRequest::field_violations() const {
  // @@protoc_insertion_point(field_list:google.rpc.BadRequest.field_violations)
  return _impl_.field_violations_;
}

// -------------------------------------------------------------------

// RequestInfo

// string request_id = 1;
inline void RequestInfo::clear_request_id() {
  _impl_.request_id_.ClearToEmpty();
}
inline const std::string& RequestInfo::request_id() const {
  // @@protoc_insertion_point(field_get:google.rpc.RequestInfo.request_id)
  return _internal_request_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequestInfo::set_request_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.request_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.rpc.RequestInfo.request_id)
}
inline std::string* RequestInfo::mutable_request_id() {
  std::string* _s = _internal_mutable_request_id();
  // @@protoc_insertion_point(field_mutable:google.rpc.RequestInfo.request_id)
  return _s;
}
inline const std::string& RequestInfo::_internal_request_id() const {
  return _impl_.request_id_.Get();
}
inline void RequestInfo::_internal_set_request_id(const std::string& value) {
  
  _impl_.request_id_.Set(value, GetArenaForAllocation());
}
inline std::string* RequestInfo::_internal_mutable_request_id() {
  
  return _impl_.request_id_.Mutable(GetArenaForAllocation());
}
inline std::string* RequestInfo::release_request_id() {
  // @@protoc_insertion_point(field_release:google.rpc.RequestInfo.request_id)
  return _impl_.request_id_.Release();
}
inline void RequestInfo::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  _impl_.request_id_.SetAllocated(request_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.request_id_.IsDefault()) {
    _impl_.request_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.rpc.RequestInfo.request_id)
}

// string serving_data = 2;
inline void RequestInfo::clear_serving_data() {
  _impl_.serving_data_.ClearToEmpty();
}
inline const std::string& RequestInfo::serving_data() const {
  // @@protoc_insertion_point(field_get:google.rpc.RequestInfo.serving_data)
  return _internal_serving_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequestInfo::set_serving_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.serving_data_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.rpc.RequestInfo.serving_data)
}
inline std::string* RequestInfo::mutable_serving_data() {
  std::string* _s = _internal_mutable_serving_data();
  // @@protoc_insertion_point(field_mutable:google.rpc.RequestInfo.serving_data)
  return _s;
}
inline const std::string& RequestInfo::_internal_serving_data() const {
  return _impl_.serving_data_.Get();
}
inline void RequestInfo::_internal_set_serving_data(const std::string& value) {
  
  _impl_.serving_data_.Set(value, GetArenaForAllocation());
}
inline std::string* RequestInfo::_internal_mutable_serving_data() {
  
  return _impl_.serving_data_.Mutable(GetArenaForAllocation());
}
inline std::string* RequestInfo::release_serving_data() {
  // @@protoc_insertion_point(field_release:google.rpc.RequestInfo.serving_data)
  return _impl_.serving_data_.Release();
}
inline void RequestInfo::set_allocated_serving_data(std::string* serving_data) {
  if (serving_data != nullptr) {
    
  } else {
    
  }
  _impl_.serving_data_.SetAllocated(serving_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.serving_data_.IsDefault()) {
    _impl_.serving_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.rpc.RequestInfo.serving_data)
}

// -------------------------------------------------------------------

// ResourceInfo

// string resource_type = 1;
inline void ResourceInfo::clear_resource_type() {
  _impl_.resource_type_.ClearToEmpty();
}
inline const std::string& ResourceInfo::resource_type() const {
  // @@protoc_insertion_point(field_get:google.rpc.ResourceInfo.resource_type)
  return _internal_resource_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResourceInfo::set_resource_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.resource_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.rpc.ResourceInfo.resource_type)
}
inline std::string* ResourceInfo::mutable_resource_type() {
  std::string* _s = _internal_mutable_resource_type();
  // @@protoc_insertion_point(field_mutable:google.rpc.ResourceInfo.resource_type)
  return _s;
}
inline const std::string& ResourceInfo::_internal_resource_type() const {
  return _impl_.resource_type_.Get();
}
inline void ResourceInfo::_internal_set_resource_type(const std::string& value) {
  
  _impl_.resource_type_.Set(value, GetArenaForAllocation());
}
inline std::string* ResourceInfo::_internal_mutable_resource_type() {
  
  return _impl_.resource_type_.Mutable(GetArenaForAllocation());
}
inline std::string* ResourceInfo::release_resource_type() {
  // @@protoc_insertion_point(field_release:google.rpc.ResourceInfo.resource_type)
  return _impl_.resource_type_.Release();
}
inline void ResourceInfo::set_allocated_resource_type(std::string* resource_type) {
  if (resource_type != nullptr) {
    
  } else {
    
  }
  _impl_.resource_type_.SetAllocated(resource_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.resource_type_.IsDefault()) {
    _impl_.resource_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.rpc.ResourceInfo.resource_type)
}

// string resource_name = 2;
inline void ResourceInfo::clear_resource_name() {
  _impl_.resource_name_.ClearToEmpty();
}
inline const std::string& ResourceInfo::resource_name() const {
  // @@protoc_insertion_point(field_get:google.rpc.ResourceInfo.resource_name)
  return _internal_resource_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResourceInfo::set_resource_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.resource_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.rpc.ResourceInfo.resource_name)
}
inline std::string* ResourceInfo::mutable_resource_name() {
  std::string* _s = _internal_mutable_resource_name();
  // @@protoc_insertion_point(field_mutable:google.rpc.ResourceInfo.resource_name)
  return _s;
}
inline const std::string& ResourceInfo::_internal_resource_name() const {
  return _impl_.resource_name_.Get();
}
inline void ResourceInfo::_internal_set_resource_name(const std::string& value) {
  
  _impl_.resource_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ResourceInfo::_internal_mutable_resource_name() {
  
  return _impl_.resource_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ResourceInfo::release_resource_name() {
  // @@protoc_insertion_point(field_release:google.rpc.ResourceInfo.resource_name)
  return _impl_.resource_name_.Release();
}
inline void ResourceInfo::set_allocated_resource_name(std::string* resource_name) {
  if (resource_name != nullptr) {
    
  } else {
    
  }
  _impl_.resource_name_.SetAllocated(resource_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.resource_name_.IsDefault()) {
    _impl_.resource_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.rpc.ResourceInfo.resource_name)
}

// string owner = 3;
inline void ResourceInfo::clear_owner() {
  _impl_.owner_.ClearToEmpty();
}
inline const std::string& ResourceInfo::owner() const {
  // @@protoc_insertion_point(field_get:google.rpc.ResourceInfo.owner)
  return _internal_owner();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResourceInfo::set_owner(ArgT0&& arg0, ArgT... args) {
 
 _impl_.owner_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.rpc.ResourceInfo.owner)
}
inline std::string* ResourceInfo::mutable_owner() {
  std::string* _s = _internal_mutable_owner();
  // @@protoc_insertion_point(field_mutable:google.rpc.ResourceInfo.owner)
  return _s;
}
inline const std::string& ResourceInfo::_internal_owner() const {
  return _impl_.owner_.Get();
}
inline void ResourceInfo::_internal_set_owner(const std::string& value) {
  
  _impl_.owner_.Set(value, GetArenaForAllocation());
}
inline std::string* ResourceInfo::_internal_mutable_owner() {
  
  return _impl_.owner_.Mutable(GetArenaForAllocation());
}
inline std::string* ResourceInfo::release_owner() {
  // @@protoc_insertion_point(field_release:google.rpc.ResourceInfo.owner)
  return _impl_.owner_.Release();
}
inline void ResourceInfo::set_allocated_owner(std::string* owner) {
  if (owner != nullptr) {
    
  } else {
    
  }
  _impl_.owner_.SetAllocated(owner, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.owner_.IsDefault()) {
    _impl_.owner_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.rpc.ResourceInfo.owner)
}

// string description = 4;
inline void ResourceInfo::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& ResourceInfo::description() const {
  // @@protoc_insertion_point(field_get:google.rpc.ResourceInfo.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResourceInfo::set_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.rpc.ResourceInfo.description)
}
inline std::string* ResourceInfo::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:google.rpc.ResourceInfo.description)
  return _s;
}
inline const std::string& ResourceInfo::_internal_description() const {
  return _impl_.description_.Get();
}
inline void ResourceInfo::_internal_set_description(const std::string& value) {
  
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* ResourceInfo::_internal_mutable_description() {
  
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* ResourceInfo::release_description() {
  // @@protoc_insertion_point(field_release:google.rpc.ResourceInfo.description)
  return _impl_.description_.Release();
}
inline void ResourceInfo::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.rpc.ResourceInfo.description)
}

// -------------------------------------------------------------------

// Help_Link

// string description = 1;
inline void Help_Link::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& Help_Link::description() const {
  // @@protoc_insertion_point(field_get:google.rpc.Help.Link.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Help_Link::set_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.rpc.Help.Link.description)
}
inline std::string* Help_Link::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:google.rpc.Help.Link.description)
  return _s;
}
inline const std::string& Help_Link::_internal_description() const {
  return _impl_.description_.Get();
}
inline void Help_Link::_internal_set_description(const std::string& value) {
  
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* Help_Link::_internal_mutable_description() {
  
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* Help_Link::release_description() {
  // @@protoc_insertion_point(field_release:google.rpc.Help.Link.description)
  return _impl_.description_.Release();
}
inline void Help_Link::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.rpc.Help.Link.description)
}

// string url = 2;
inline void Help_Link::clear_url() {
  _impl_.url_.ClearToEmpty();
}
inline const std::string& Help_Link::url() const {
  // @@protoc_insertion_point(field_get:google.rpc.Help.Link.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Help_Link::set_url(ArgT0&& arg0, ArgT... args) {
 
 _impl_.url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.rpc.Help.Link.url)
}
inline std::string* Help_Link::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:google.rpc.Help.Link.url)
  return _s;
}
inline const std::string& Help_Link::_internal_url() const {
  return _impl_.url_.Get();
}
inline void Help_Link::_internal_set_url(const std::string& value) {
  
  _impl_.url_.Set(value, GetArenaForAllocation());
}
inline std::string* Help_Link::_internal_mutable_url() {
  
  return _impl_.url_.Mutable(GetArenaForAllocation());
}
inline std::string* Help_Link::release_url() {
  // @@protoc_insertion_point(field_release:google.rpc.Help.Link.url)
  return _impl_.url_.Release();
}
inline void Help_Link::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  _impl_.url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.url_.IsDefault()) {
    _impl_.url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.rpc.Help.Link.url)
}

// -------------------------------------------------------------------

// Help

// repeated .google.rpc.Help.Link links = 1;
inline int Help::_internal_links_size() const {
  return _impl_.links_.size();
}
inline int Help::links_size() const {
  return _internal_links_size();
}
inline void Help::clear_links() {
  _impl_.links_.Clear();
}
inline ::google::rpc::Help_Link* Help::mutable_links(int index) {
  // @@protoc_insertion_point(field_mutable:google.rpc.Help.links)
  return _impl_.links_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::rpc::Help_Link >*
Help::mutable_links() {
  // @@protoc_insertion_point(field_mutable_list:google.rpc.Help.links)
  return &_impl_.links_;
}
inline const ::google::rpc::Help_Link& Help::_internal_links(int index) const {
  return _impl_.links_.Get(index);
}
inline const ::google::rpc::Help_Link& Help::links(int index) const {
  // @@protoc_insertion_point(field_get:google.rpc.Help.links)
  return _internal_links(index);
}
inline ::google::rpc::Help_Link* Help::_internal_add_links() {
  return _impl_.links_.Add();
}
inline ::google::rpc::Help_Link* Help::add_links() {
  ::google::rpc::Help_Link* _add = _internal_add_links();
  // @@protoc_insertion_point(field_add:google.rpc.Help.links)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::rpc::Help_Link >&
Help::links() const {
  // @@protoc_insertion_point(field_list:google.rpc.Help.links)
  return _impl_.links_;
}

// -------------------------------------------------------------------

// LocalizedMessage

// string locale = 1;
inline void LocalizedMessage::clear_locale() {
  _impl_.locale_.ClearToEmpty();
}
inline const std::string& LocalizedMessage::locale() const {
  // @@protoc_insertion_point(field_get:google.rpc.LocalizedMessage.locale)
  return _internal_locale();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LocalizedMessage::set_locale(ArgT0&& arg0, ArgT... args) {
 
 _impl_.locale_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.rpc.LocalizedMessage.locale)
}
inline std::string* LocalizedMessage::mutable_locale() {
  std::string* _s = _internal_mutable_locale();
  // @@protoc_insertion_point(field_mutable:google.rpc.LocalizedMessage.locale)
  return _s;
}
inline const std::string& LocalizedMessage::_internal_locale() const {
  return _impl_.locale_.Get();
}
inline void LocalizedMessage::_internal_set_locale(const std::string& value) {
  
  _impl_.locale_.Set(value, GetArenaForAllocation());
}
inline std::string* LocalizedMessage::_internal_mutable_locale() {
  
  return _impl_.locale_.Mutable(GetArenaForAllocation());
}
inline std::string* LocalizedMessage::release_locale() {
  // @@protoc_insertion_point(field_release:google.rpc.LocalizedMessage.locale)
  return _impl_.locale_.Release();
}
inline void LocalizedMessage::set_allocated_locale(std::string* locale) {
  if (locale != nullptr) {
    
  } else {
    
  }
  _impl_.locale_.SetAllocated(locale, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.locale_.IsDefault()) {
    _impl_.locale_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.rpc.LocalizedMessage.locale)
}

// string message = 2;
inline void LocalizedMessage::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& LocalizedMessage::message() const {
  // @@protoc_insertion_point(field_get:google.rpc.LocalizedMessage.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LocalizedMessage::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.rpc.LocalizedMessage.message)
}
inline std::string* LocalizedMessage::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:google.rpc.LocalizedMessage.message)
  return _s;
}
inline const std::string& LocalizedMessage::_internal_message() const {
  return _impl_.message_.Get();
}
inline void LocalizedMessage::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* LocalizedMessage::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* LocalizedMessage::release_message() {
  // @@protoc_insertion_point(field_release:google.rpc.LocalizedMessage.message)
  return _impl_.message_.Release();
}
inline void LocalizedMessage::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.rpc.LocalizedMessage.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2frpc_2ferror_5fdetails_2eproto
