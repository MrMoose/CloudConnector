// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/type/postal_address.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2ftype_2fpostal_5faddress_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2ftype_2fpostal_5faddress_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2ftype_2fpostal_5faddress_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2ftype_2fpostal_5faddress_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2ftype_2fpostal_5faddress_2eproto;
namespace google {
namespace type {
class PostalAddress;
struct PostalAddressDefaultTypeInternal;
extern PostalAddressDefaultTypeInternal _PostalAddress_default_instance_;
}  // namespace type
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::type::PostalAddress* Arena::CreateMaybeMessage<::google::type::PostalAddress>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace type {

// ===================================================================

class PostalAddress final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.type.PostalAddress) */ {
 public:
  inline PostalAddress() : PostalAddress(nullptr) {}
  ~PostalAddress() override;
  explicit PROTOBUF_CONSTEXPR PostalAddress(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PostalAddress(const PostalAddress& from);
  PostalAddress(PostalAddress&& from) noexcept
    : PostalAddress() {
    *this = ::std::move(from);
  }

  inline PostalAddress& operator=(const PostalAddress& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostalAddress& operator=(PostalAddress&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PostalAddress& default_instance() {
    return *internal_default_instance();
  }
  static inline const PostalAddress* internal_default_instance() {
    return reinterpret_cast<const PostalAddress*>(
               &_PostalAddress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PostalAddress& a, PostalAddress& b) {
    a.Swap(&b);
  }
  inline void Swap(PostalAddress* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostalAddress* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PostalAddress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PostalAddress>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PostalAddress& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PostalAddress& from) {
    PostalAddress::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostalAddress* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.type.PostalAddress";
  }
  protected:
  explicit PostalAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressLinesFieldNumber = 9,
    kRecipientsFieldNumber = 10,
    kRegionCodeFieldNumber = 2,
    kLanguageCodeFieldNumber = 3,
    kPostalCodeFieldNumber = 4,
    kSortingCodeFieldNumber = 5,
    kAdministrativeAreaFieldNumber = 6,
    kLocalityFieldNumber = 7,
    kSublocalityFieldNumber = 8,
    kOrganizationFieldNumber = 11,
    kRevisionFieldNumber = 1,
  };
  // repeated string address_lines = 9;
  int address_lines_size() const;
  private:
  int _internal_address_lines_size() const;
  public:
  void clear_address_lines();
  const std::string& address_lines(int index) const;
  std::string* mutable_address_lines(int index);
  void set_address_lines(int index, const std::string& value);
  void set_address_lines(int index, std::string&& value);
  void set_address_lines(int index, const char* value);
  void set_address_lines(int index, const char* value, size_t size);
  std::string* add_address_lines();
  void add_address_lines(const std::string& value);
  void add_address_lines(std::string&& value);
  void add_address_lines(const char* value);
  void add_address_lines(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& address_lines() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_address_lines();
  private:
  const std::string& _internal_address_lines(int index) const;
  std::string* _internal_add_address_lines();
  public:

  // repeated string recipients = 10;
  int recipients_size() const;
  private:
  int _internal_recipients_size() const;
  public:
  void clear_recipients();
  const std::string& recipients(int index) const;
  std::string* mutable_recipients(int index);
  void set_recipients(int index, const std::string& value);
  void set_recipients(int index, std::string&& value);
  void set_recipients(int index, const char* value);
  void set_recipients(int index, const char* value, size_t size);
  std::string* add_recipients();
  void add_recipients(const std::string& value);
  void add_recipients(std::string&& value);
  void add_recipients(const char* value);
  void add_recipients(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& recipients() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_recipients();
  private:
  const std::string& _internal_recipients(int index) const;
  std::string* _internal_add_recipients();
  public:

  // string region_code = 2;
  void clear_region_code();
  const std::string& region_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_region_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_region_code();
  PROTOBUF_NODISCARD std::string* release_region_code();
  void set_allocated_region_code(std::string* region_code);
  private:
  const std::string& _internal_region_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_region_code(const std::string& value);
  std::string* _internal_mutable_region_code();
  public:

  // string language_code = 3;
  void clear_language_code();
  const std::string& language_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_language_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_language_code();
  PROTOBUF_NODISCARD std::string* release_language_code();
  void set_allocated_language_code(std::string* language_code);
  private:
  const std::string& _internal_language_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language_code(const std::string& value);
  std::string* _internal_mutable_language_code();
  public:

  // string postal_code = 4;
  void clear_postal_code();
  const std::string& postal_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_postal_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_postal_code();
  PROTOBUF_NODISCARD std::string* release_postal_code();
  void set_allocated_postal_code(std::string* postal_code);
  private:
  const std::string& _internal_postal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_postal_code(const std::string& value);
  std::string* _internal_mutable_postal_code();
  public:

  // string sorting_code = 5;
  void clear_sorting_code();
  const std::string& sorting_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sorting_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sorting_code();
  PROTOBUF_NODISCARD std::string* release_sorting_code();
  void set_allocated_sorting_code(std::string* sorting_code);
  private:
  const std::string& _internal_sorting_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sorting_code(const std::string& value);
  std::string* _internal_mutable_sorting_code();
  public:

  // string administrative_area = 6;
  void clear_administrative_area();
  const std::string& administrative_area() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_administrative_area(ArgT0&& arg0, ArgT... args);
  std::string* mutable_administrative_area();
  PROTOBUF_NODISCARD std::string* release_administrative_area();
  void set_allocated_administrative_area(std::string* administrative_area);
  private:
  const std::string& _internal_administrative_area() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_administrative_area(const std::string& value);
  std::string* _internal_mutable_administrative_area();
  public:

  // string locality = 7;
  void clear_locality();
  const std::string& locality() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_locality(ArgT0&& arg0, ArgT... args);
  std::string* mutable_locality();
  PROTOBUF_NODISCARD std::string* release_locality();
  void set_allocated_locality(std::string* locality);
  private:
  const std::string& _internal_locality() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_locality(const std::string& value);
  std::string* _internal_mutable_locality();
  public:

  // string sublocality = 8;
  void clear_sublocality();
  const std::string& sublocality() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sublocality(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sublocality();
  PROTOBUF_NODISCARD std::string* release_sublocality();
  void set_allocated_sublocality(std::string* sublocality);
  private:
  const std::string& _internal_sublocality() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sublocality(const std::string& value);
  std::string* _internal_mutable_sublocality();
  public:

  // string organization = 11;
  void clear_organization();
  const std::string& organization() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_organization(ArgT0&& arg0, ArgT... args);
  std::string* mutable_organization();
  PROTOBUF_NODISCARD std::string* release_organization();
  void set_allocated_organization(std::string* organization);
  private:
  const std::string& _internal_organization() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_organization(const std::string& value);
  std::string* _internal_mutable_organization();
  public:

  // int32 revision = 1;
  void clear_revision();
  int32_t revision() const;
  void set_revision(int32_t value);
  private:
  int32_t _internal_revision() const;
  void _internal_set_revision(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.type.PostalAddress)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> address_lines_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> recipients_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr region_code_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_code_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr postal_code_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sorting_code_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr administrative_area_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr locality_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sublocality_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr organization_;
    int32_t revision_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2ftype_2fpostal_5faddress_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PostalAddress

// int32 revision = 1;
inline void PostalAddress::clear_revision() {
  _impl_.revision_ = 0;
}
inline int32_t PostalAddress::_internal_revision() const {
  return _impl_.revision_;
}
inline int32_t PostalAddress::revision() const {
  // @@protoc_insertion_point(field_get:google.type.PostalAddress.revision)
  return _internal_revision();
}
inline void PostalAddress::_internal_set_revision(int32_t value) {
  
  _impl_.revision_ = value;
}
inline void PostalAddress::set_revision(int32_t value) {
  _internal_set_revision(value);
  // @@protoc_insertion_point(field_set:google.type.PostalAddress.revision)
}

// string region_code = 2;
inline void PostalAddress::clear_region_code() {
  _impl_.region_code_.ClearToEmpty();
}
inline const std::string& PostalAddress::region_code() const {
  // @@protoc_insertion_point(field_get:google.type.PostalAddress.region_code)
  return _internal_region_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PostalAddress::set_region_code(ArgT0&& arg0, ArgT... args) {
 
 _impl_.region_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.type.PostalAddress.region_code)
}
inline std::string* PostalAddress::mutable_region_code() {
  std::string* _s = _internal_mutable_region_code();
  // @@protoc_insertion_point(field_mutable:google.type.PostalAddress.region_code)
  return _s;
}
inline const std::string& PostalAddress::_internal_region_code() const {
  return _impl_.region_code_.Get();
}
inline void PostalAddress::_internal_set_region_code(const std::string& value) {
  
  _impl_.region_code_.Set(value, GetArenaForAllocation());
}
inline std::string* PostalAddress::_internal_mutable_region_code() {
  
  return _impl_.region_code_.Mutable(GetArenaForAllocation());
}
inline std::string* PostalAddress::release_region_code() {
  // @@protoc_insertion_point(field_release:google.type.PostalAddress.region_code)
  return _impl_.region_code_.Release();
}
inline void PostalAddress::set_allocated_region_code(std::string* region_code) {
  if (region_code != nullptr) {
    
  } else {
    
  }
  _impl_.region_code_.SetAllocated(region_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.region_code_.IsDefault()) {
    _impl_.region_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.type.PostalAddress.region_code)
}

// string language_code = 3;
inline void PostalAddress::clear_language_code() {
  _impl_.language_code_.ClearToEmpty();
}
inline const std::string& PostalAddress::language_code() const {
  // @@protoc_insertion_point(field_get:google.type.PostalAddress.language_code)
  return _internal_language_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PostalAddress::set_language_code(ArgT0&& arg0, ArgT... args) {
 
 _impl_.language_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.type.PostalAddress.language_code)
}
inline std::string* PostalAddress::mutable_language_code() {
  std::string* _s = _internal_mutable_language_code();
  // @@protoc_insertion_point(field_mutable:google.type.PostalAddress.language_code)
  return _s;
}
inline const std::string& PostalAddress::_internal_language_code() const {
  return _impl_.language_code_.Get();
}
inline void PostalAddress::_internal_set_language_code(const std::string& value) {
  
  _impl_.language_code_.Set(value, GetArenaForAllocation());
}
inline std::string* PostalAddress::_internal_mutable_language_code() {
  
  return _impl_.language_code_.Mutable(GetArenaForAllocation());
}
inline std::string* PostalAddress::release_language_code() {
  // @@protoc_insertion_point(field_release:google.type.PostalAddress.language_code)
  return _impl_.language_code_.Release();
}
inline void PostalAddress::set_allocated_language_code(std::string* language_code) {
  if (language_code != nullptr) {
    
  } else {
    
  }
  _impl_.language_code_.SetAllocated(language_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.language_code_.IsDefault()) {
    _impl_.language_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.type.PostalAddress.language_code)
}

// string postal_code = 4;
inline void PostalAddress::clear_postal_code() {
  _impl_.postal_code_.ClearToEmpty();
}
inline const std::string& PostalAddress::postal_code() const {
  // @@protoc_insertion_point(field_get:google.type.PostalAddress.postal_code)
  return _internal_postal_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PostalAddress::set_postal_code(ArgT0&& arg0, ArgT... args) {
 
 _impl_.postal_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.type.PostalAddress.postal_code)
}
inline std::string* PostalAddress::mutable_postal_code() {
  std::string* _s = _internal_mutable_postal_code();
  // @@protoc_insertion_point(field_mutable:google.type.PostalAddress.postal_code)
  return _s;
}
inline const std::string& PostalAddress::_internal_postal_code() const {
  return _impl_.postal_code_.Get();
}
inline void PostalAddress::_internal_set_postal_code(const std::string& value) {
  
  _impl_.postal_code_.Set(value, GetArenaForAllocation());
}
inline std::string* PostalAddress::_internal_mutable_postal_code() {
  
  return _impl_.postal_code_.Mutable(GetArenaForAllocation());
}
inline std::string* PostalAddress::release_postal_code() {
  // @@protoc_insertion_point(field_release:google.type.PostalAddress.postal_code)
  return _impl_.postal_code_.Release();
}
inline void PostalAddress::set_allocated_postal_code(std::string* postal_code) {
  if (postal_code != nullptr) {
    
  } else {
    
  }
  _impl_.postal_code_.SetAllocated(postal_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.postal_code_.IsDefault()) {
    _impl_.postal_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.type.PostalAddress.postal_code)
}

// string sorting_code = 5;
inline void PostalAddress::clear_sorting_code() {
  _impl_.sorting_code_.ClearToEmpty();
}
inline const std::string& PostalAddress::sorting_code() const {
  // @@protoc_insertion_point(field_get:google.type.PostalAddress.sorting_code)
  return _internal_sorting_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PostalAddress::set_sorting_code(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sorting_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.type.PostalAddress.sorting_code)
}
inline std::string* PostalAddress::mutable_sorting_code() {
  std::string* _s = _internal_mutable_sorting_code();
  // @@protoc_insertion_point(field_mutable:google.type.PostalAddress.sorting_code)
  return _s;
}
inline const std::string& PostalAddress::_internal_sorting_code() const {
  return _impl_.sorting_code_.Get();
}
inline void PostalAddress::_internal_set_sorting_code(const std::string& value) {
  
  _impl_.sorting_code_.Set(value, GetArenaForAllocation());
}
inline std::string* PostalAddress::_internal_mutable_sorting_code() {
  
  return _impl_.sorting_code_.Mutable(GetArenaForAllocation());
}
inline std::string* PostalAddress::release_sorting_code() {
  // @@protoc_insertion_point(field_release:google.type.PostalAddress.sorting_code)
  return _impl_.sorting_code_.Release();
}
inline void PostalAddress::set_allocated_sorting_code(std::string* sorting_code) {
  if (sorting_code != nullptr) {
    
  } else {
    
  }
  _impl_.sorting_code_.SetAllocated(sorting_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sorting_code_.IsDefault()) {
    _impl_.sorting_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.type.PostalAddress.sorting_code)
}

// string administrative_area = 6;
inline void PostalAddress::clear_administrative_area() {
  _impl_.administrative_area_.ClearToEmpty();
}
inline const std::string& PostalAddress::administrative_area() const {
  // @@protoc_insertion_point(field_get:google.type.PostalAddress.administrative_area)
  return _internal_administrative_area();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PostalAddress::set_administrative_area(ArgT0&& arg0, ArgT... args) {
 
 _impl_.administrative_area_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.type.PostalAddress.administrative_area)
}
inline std::string* PostalAddress::mutable_administrative_area() {
  std::string* _s = _internal_mutable_administrative_area();
  // @@protoc_insertion_point(field_mutable:google.type.PostalAddress.administrative_area)
  return _s;
}
inline const std::string& PostalAddress::_internal_administrative_area() const {
  return _impl_.administrative_area_.Get();
}
inline void PostalAddress::_internal_set_administrative_area(const std::string& value) {
  
  _impl_.administrative_area_.Set(value, GetArenaForAllocation());
}
inline std::string* PostalAddress::_internal_mutable_administrative_area() {
  
  return _impl_.administrative_area_.Mutable(GetArenaForAllocation());
}
inline std::string* PostalAddress::release_administrative_area() {
  // @@protoc_insertion_point(field_release:google.type.PostalAddress.administrative_area)
  return _impl_.administrative_area_.Release();
}
inline void PostalAddress::set_allocated_administrative_area(std::string* administrative_area) {
  if (administrative_area != nullptr) {
    
  } else {
    
  }
  _impl_.administrative_area_.SetAllocated(administrative_area, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.administrative_area_.IsDefault()) {
    _impl_.administrative_area_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.type.PostalAddress.administrative_area)
}

// string locality = 7;
inline void PostalAddress::clear_locality() {
  _impl_.locality_.ClearToEmpty();
}
inline const std::string& PostalAddress::locality() const {
  // @@protoc_insertion_point(field_get:google.type.PostalAddress.locality)
  return _internal_locality();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PostalAddress::set_locality(ArgT0&& arg0, ArgT... args) {
 
 _impl_.locality_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.type.PostalAddress.locality)
}
inline std::string* PostalAddress::mutable_locality() {
  std::string* _s = _internal_mutable_locality();
  // @@protoc_insertion_point(field_mutable:google.type.PostalAddress.locality)
  return _s;
}
inline const std::string& PostalAddress::_internal_locality() const {
  return _impl_.locality_.Get();
}
inline void PostalAddress::_internal_set_locality(const std::string& value) {
  
  _impl_.locality_.Set(value, GetArenaForAllocation());
}
inline std::string* PostalAddress::_internal_mutable_locality() {
  
  return _impl_.locality_.Mutable(GetArenaForAllocation());
}
inline std::string* PostalAddress::release_locality() {
  // @@protoc_insertion_point(field_release:google.type.PostalAddress.locality)
  return _impl_.locality_.Release();
}
inline void PostalAddress::set_allocated_locality(std::string* locality) {
  if (locality != nullptr) {
    
  } else {
    
  }
  _impl_.locality_.SetAllocated(locality, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.locality_.IsDefault()) {
    _impl_.locality_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.type.PostalAddress.locality)
}

// string sublocality = 8;
inline void PostalAddress::clear_sublocality() {
  _impl_.sublocality_.ClearToEmpty();
}
inline const std::string& PostalAddress::sublocality() const {
  // @@protoc_insertion_point(field_get:google.type.PostalAddress.sublocality)
  return _internal_sublocality();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PostalAddress::set_sublocality(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sublocality_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.type.PostalAddress.sublocality)
}
inline std::string* PostalAddress::mutable_sublocality() {
  std::string* _s = _internal_mutable_sublocality();
  // @@protoc_insertion_point(field_mutable:google.type.PostalAddress.sublocality)
  return _s;
}
inline const std::string& PostalAddress::_internal_sublocality() const {
  return _impl_.sublocality_.Get();
}
inline void PostalAddress::_internal_set_sublocality(const std::string& value) {
  
  _impl_.sublocality_.Set(value, GetArenaForAllocation());
}
inline std::string* PostalAddress::_internal_mutable_sublocality() {
  
  return _impl_.sublocality_.Mutable(GetArenaForAllocation());
}
inline std::string* PostalAddress::release_sublocality() {
  // @@protoc_insertion_point(field_release:google.type.PostalAddress.sublocality)
  return _impl_.sublocality_.Release();
}
inline void PostalAddress::set_allocated_sublocality(std::string* sublocality) {
  if (sublocality != nullptr) {
    
  } else {
    
  }
  _impl_.sublocality_.SetAllocated(sublocality, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sublocality_.IsDefault()) {
    _impl_.sublocality_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.type.PostalAddress.sublocality)
}

// repeated string address_lines = 9;
inline int PostalAddress::_internal_address_lines_size() const {
  return _impl_.address_lines_.size();
}
inline int PostalAddress::address_lines_size() const {
  return _internal_address_lines_size();
}
inline void PostalAddress::clear_address_lines() {
  _impl_.address_lines_.Clear();
}
inline std::string* PostalAddress::add_address_lines() {
  std::string* _s = _internal_add_address_lines();
  // @@protoc_insertion_point(field_add_mutable:google.type.PostalAddress.address_lines)
  return _s;
}
inline const std::string& PostalAddress::_internal_address_lines(int index) const {
  return _impl_.address_lines_.Get(index);
}
inline const std::string& PostalAddress::address_lines(int index) const {
  // @@protoc_insertion_point(field_get:google.type.PostalAddress.address_lines)
  return _internal_address_lines(index);
}
inline std::string* PostalAddress::mutable_address_lines(int index) {
  // @@protoc_insertion_point(field_mutable:google.type.PostalAddress.address_lines)
  return _impl_.address_lines_.Mutable(index);
}
inline void PostalAddress::set_address_lines(int index, const std::string& value) {
  _impl_.address_lines_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.type.PostalAddress.address_lines)
}
inline void PostalAddress::set_address_lines(int index, std::string&& value) {
  _impl_.address_lines_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.type.PostalAddress.address_lines)
}
inline void PostalAddress::set_address_lines(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.address_lines_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.type.PostalAddress.address_lines)
}
inline void PostalAddress::set_address_lines(int index, const char* value, size_t size) {
  _impl_.address_lines_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.type.PostalAddress.address_lines)
}
inline std::string* PostalAddress::_internal_add_address_lines() {
  return _impl_.address_lines_.Add();
}
inline void PostalAddress::add_address_lines(const std::string& value) {
  _impl_.address_lines_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.type.PostalAddress.address_lines)
}
inline void PostalAddress::add_address_lines(std::string&& value) {
  _impl_.address_lines_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.type.PostalAddress.address_lines)
}
inline void PostalAddress::add_address_lines(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.address_lines_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.type.PostalAddress.address_lines)
}
inline void PostalAddress::add_address_lines(const char* value, size_t size) {
  _impl_.address_lines_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.type.PostalAddress.address_lines)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PostalAddress::address_lines() const {
  // @@protoc_insertion_point(field_list:google.type.PostalAddress.address_lines)
  return _impl_.address_lines_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PostalAddress::mutable_address_lines() {
  // @@protoc_insertion_point(field_mutable_list:google.type.PostalAddress.address_lines)
  return &_impl_.address_lines_;
}

// repeated string recipients = 10;
inline int PostalAddress::_internal_recipients_size() const {
  return _impl_.recipients_.size();
}
inline int PostalAddress::recipients_size() const {
  return _internal_recipients_size();
}
inline void PostalAddress::clear_recipients() {
  _impl_.recipients_.Clear();
}
inline std::string* PostalAddress::add_recipients() {
  std::string* _s = _internal_add_recipients();
  // @@protoc_insertion_point(field_add_mutable:google.type.PostalAddress.recipients)
  return _s;
}
inline const std::string& PostalAddress::_internal_recipients(int index) const {
  return _impl_.recipients_.Get(index);
}
inline const std::string& PostalAddress::recipients(int index) const {
  // @@protoc_insertion_point(field_get:google.type.PostalAddress.recipients)
  return _internal_recipients(index);
}
inline std::string* PostalAddress::mutable_recipients(int index) {
  // @@protoc_insertion_point(field_mutable:google.type.PostalAddress.recipients)
  return _impl_.recipients_.Mutable(index);
}
inline void PostalAddress::set_recipients(int index, const std::string& value) {
  _impl_.recipients_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.type.PostalAddress.recipients)
}
inline void PostalAddress::set_recipients(int index, std::string&& value) {
  _impl_.recipients_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.type.PostalAddress.recipients)
}
inline void PostalAddress::set_recipients(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.recipients_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.type.PostalAddress.recipients)
}
inline void PostalAddress::set_recipients(int index, const char* value, size_t size) {
  _impl_.recipients_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.type.PostalAddress.recipients)
}
inline std::string* PostalAddress::_internal_add_recipients() {
  return _impl_.recipients_.Add();
}
inline void PostalAddress::add_recipients(const std::string& value) {
  _impl_.recipients_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.type.PostalAddress.recipients)
}
inline void PostalAddress::add_recipients(std::string&& value) {
  _impl_.recipients_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.type.PostalAddress.recipients)
}
inline void PostalAddress::add_recipients(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.recipients_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.type.PostalAddress.recipients)
}
inline void PostalAddress::add_recipients(const char* value, size_t size) {
  _impl_.recipients_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.type.PostalAddress.recipients)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PostalAddress::recipients() const {
  // @@protoc_insertion_point(field_list:google.type.PostalAddress.recipients)
  return _impl_.recipients_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PostalAddress::mutable_recipients() {
  // @@protoc_insertion_point(field_mutable_list:google.type.PostalAddress.recipients)
  return &_impl_.recipients_;
}

// string organization = 11;
inline void PostalAddress::clear_organization() {
  _impl_.organization_.ClearToEmpty();
}
inline const std::string& PostalAddress::organization() const {
  // @@protoc_insertion_point(field_get:google.type.PostalAddress.organization)
  return _internal_organization();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PostalAddress::set_organization(ArgT0&& arg0, ArgT... args) {
 
 _impl_.organization_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.type.PostalAddress.organization)
}
inline std::string* PostalAddress::mutable_organization() {
  std::string* _s = _internal_mutable_organization();
  // @@protoc_insertion_point(field_mutable:google.type.PostalAddress.organization)
  return _s;
}
inline const std::string& PostalAddress::_internal_organization() const {
  return _impl_.organization_.Get();
}
inline void PostalAddress::_internal_set_organization(const std::string& value) {
  
  _impl_.organization_.Set(value, GetArenaForAllocation());
}
inline std::string* PostalAddress::_internal_mutable_organization() {
  
  return _impl_.organization_.Mutable(GetArenaForAllocation());
}
inline std::string* PostalAddress::release_organization() {
  // @@protoc_insertion_point(field_release:google.type.PostalAddress.organization)
  return _impl_.organization_.Release();
}
inline void PostalAddress::set_allocated_organization(std::string* organization) {
  if (organization != nullptr) {
    
  } else {
    
  }
  _impl_.organization_.SetAllocated(organization, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.organization_.IsDefault()) {
    _impl_.organization_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.type.PostalAddress.organization)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace type
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2ftype_2fpostal_5faddress_2eproto
