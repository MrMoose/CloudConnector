// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/type/datetime.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2ftype_2fdatetime_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2ftype_2fdatetime_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/duration.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2ftype_2fdatetime_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2ftype_2fdatetime_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2ftype_2fdatetime_2eproto;
namespace google {
namespace type {
class DateTime;
class DateTimeDefaultTypeInternal;
extern DateTimeDefaultTypeInternal _DateTime_default_instance_;
class TimeZone;
class TimeZoneDefaultTypeInternal;
extern TimeZoneDefaultTypeInternal _TimeZone_default_instance_;
}  // namespace type
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::type::DateTime* Arena::CreateMaybeMessage<::google::type::DateTime>(Arena*);
template<> ::google::type::TimeZone* Arena::CreateMaybeMessage<::google::type::TimeZone>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace type {

// ===================================================================

class DateTime PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.type.DateTime) */ {
 public:
  inline DateTime() : DateTime(nullptr) {}
  virtual ~DateTime();

  DateTime(const DateTime& from);
  DateTime(DateTime&& from) noexcept
    : DateTime() {
    *this = ::std::move(from);
  }

  inline DateTime& operator=(const DateTime& from) {
    CopyFrom(from);
    return *this;
  }
  inline DateTime& operator=(DateTime&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DateTime& default_instance();

  enum TimeOffsetCase {
    kUtcOffset = 8,
    kTimeZone = 9,
    TIME_OFFSET_NOT_SET = 0,
  };

  static inline const DateTime* internal_default_instance() {
    return reinterpret_cast<const DateTime*>(
               &_DateTime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DateTime& a, DateTime& b) {
    a.Swap(&b);
  }
  inline void Swap(DateTime* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DateTime* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DateTime* New() const final {
    return CreateMaybeMessage<DateTime>(nullptr);
  }

  DateTime* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DateTime>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DateTime& from);
  void MergeFrom(const DateTime& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DateTime* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.type.DateTime";
  }
  protected:
  explicit DateTime(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2ftype_2fdatetime_2eproto);
    return ::descriptor_table_google_2ftype_2fdatetime_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kYearFieldNumber = 1,
    kMonthFieldNumber = 2,
    kDayFieldNumber = 3,
    kHoursFieldNumber = 4,
    kMinutesFieldNumber = 5,
    kSecondsFieldNumber = 6,
    kNanosFieldNumber = 7,
    kUtcOffsetFieldNumber = 8,
    kTimeZoneFieldNumber = 9,
  };
  // int32 year = 1;
  void clear_year();
  ::PROTOBUF_NAMESPACE_ID::int32 year() const;
  void set_year(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_year() const;
  void _internal_set_year(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 month = 2;
  void clear_month();
  ::PROTOBUF_NAMESPACE_ID::int32 month() const;
  void set_month(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_month() const;
  void _internal_set_month(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 day = 3;
  void clear_day();
  ::PROTOBUF_NAMESPACE_ID::int32 day() const;
  void set_day(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_day() const;
  void _internal_set_day(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 hours = 4;
  void clear_hours();
  ::PROTOBUF_NAMESPACE_ID::int32 hours() const;
  void set_hours(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hours() const;
  void _internal_set_hours(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 minutes = 5;
  void clear_minutes();
  ::PROTOBUF_NAMESPACE_ID::int32 minutes() const;
  void set_minutes(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_minutes() const;
  void _internal_set_minutes(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 seconds = 6;
  void clear_seconds();
  ::PROTOBUF_NAMESPACE_ID::int32 seconds() const;
  void set_seconds(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_seconds() const;
  void _internal_set_seconds(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 nanos = 7;
  void clear_nanos();
  ::PROTOBUF_NAMESPACE_ID::int32 nanos() const;
  void set_nanos(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nanos() const;
  void _internal_set_nanos(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .google.protobuf.Duration utc_offset = 8;
  bool has_utc_offset() const;
  private:
  bool _internal_has_utc_offset() const;
  public:
  void clear_utc_offset();
  const PROTOBUF_NAMESPACE_ID::Duration& utc_offset() const;
  PROTOBUF_NAMESPACE_ID::Duration* release_utc_offset();
  PROTOBUF_NAMESPACE_ID::Duration* mutable_utc_offset();
  void set_allocated_utc_offset(PROTOBUF_NAMESPACE_ID::Duration* utc_offset);
  private:
  const PROTOBUF_NAMESPACE_ID::Duration& _internal_utc_offset() const;
  PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_utc_offset();
  public:
  void unsafe_arena_set_allocated_utc_offset(
      PROTOBUF_NAMESPACE_ID::Duration* utc_offset);
  PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_utc_offset();

  // .google.type.TimeZone time_zone = 9;
  bool has_time_zone() const;
  private:
  bool _internal_has_time_zone() const;
  public:
  void clear_time_zone();
  const ::google::type::TimeZone& time_zone() const;
  ::google::type::TimeZone* release_time_zone();
  ::google::type::TimeZone* mutable_time_zone();
  void set_allocated_time_zone(::google::type::TimeZone* time_zone);
  private:
  const ::google::type::TimeZone& _internal_time_zone() const;
  ::google::type::TimeZone* _internal_mutable_time_zone();
  public:
  void unsafe_arena_set_allocated_time_zone(
      ::google::type::TimeZone* time_zone);
  ::google::type::TimeZone* unsafe_arena_release_time_zone();

  void clear_time_offset();
  TimeOffsetCase time_offset_case() const;
  // @@protoc_insertion_point(class_scope:google.type.DateTime)
 private:
  class _Internal;
  void set_has_utc_offset();
  void set_has_time_zone();

  inline bool has_time_offset() const;
  inline void clear_has_time_offset();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 year_;
  ::PROTOBUF_NAMESPACE_ID::int32 month_;
  ::PROTOBUF_NAMESPACE_ID::int32 day_;
  ::PROTOBUF_NAMESPACE_ID::int32 hours_;
  ::PROTOBUF_NAMESPACE_ID::int32 minutes_;
  ::PROTOBUF_NAMESPACE_ID::int32 seconds_;
  ::PROTOBUF_NAMESPACE_ID::int32 nanos_;
  union TimeOffsetUnion {
    TimeOffsetUnion() {}
    PROTOBUF_NAMESPACE_ID::Duration* utc_offset_;
    ::google::type::TimeZone* time_zone_;
  } time_offset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_google_2ftype_2fdatetime_2eproto;
};
// -------------------------------------------------------------------

class TimeZone PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.type.TimeZone) */ {
 public:
  inline TimeZone() : TimeZone(nullptr) {}
  virtual ~TimeZone();

  TimeZone(const TimeZone& from);
  TimeZone(TimeZone&& from) noexcept
    : TimeZone() {
    *this = ::std::move(from);
  }

  inline TimeZone& operator=(const TimeZone& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeZone& operator=(TimeZone&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TimeZone& default_instance();

  static inline const TimeZone* internal_default_instance() {
    return reinterpret_cast<const TimeZone*>(
               &_TimeZone_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TimeZone& a, TimeZone& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeZone* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimeZone* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TimeZone* New() const final {
    return CreateMaybeMessage<TimeZone>(nullptr);
  }

  TimeZone* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TimeZone>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TimeZone& from);
  void MergeFrom(const TimeZone& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeZone* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.type.TimeZone";
  }
  protected:
  explicit TimeZone(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2ftype_2fdatetime_2eproto);
    return ::descriptor_table_google_2ftype_2fdatetime_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kVersionFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string version = 2;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // @@protoc_insertion_point(class_scope:google.type.TimeZone)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2ftype_2fdatetime_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DateTime

// int32 year = 1;
inline void DateTime::clear_year() {
  year_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DateTime::_internal_year() const {
  return year_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DateTime::year() const {
  // @@protoc_insertion_point(field_get:google.type.DateTime.year)
  return _internal_year();
}
inline void DateTime::_internal_set_year(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  year_ = value;
}
inline void DateTime::set_year(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_year(value);
  // @@protoc_insertion_point(field_set:google.type.DateTime.year)
}

// int32 month = 2;
inline void DateTime::clear_month() {
  month_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DateTime::_internal_month() const {
  return month_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DateTime::month() const {
  // @@protoc_insertion_point(field_get:google.type.DateTime.month)
  return _internal_month();
}
inline void DateTime::_internal_set_month(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  month_ = value;
}
inline void DateTime::set_month(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_month(value);
  // @@protoc_insertion_point(field_set:google.type.DateTime.month)
}

// int32 day = 3;
inline void DateTime::clear_day() {
  day_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DateTime::_internal_day() const {
  return day_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DateTime::day() const {
  // @@protoc_insertion_point(field_get:google.type.DateTime.day)
  return _internal_day();
}
inline void DateTime::_internal_set_day(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  day_ = value;
}
inline void DateTime::set_day(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_day(value);
  // @@protoc_insertion_point(field_set:google.type.DateTime.day)
}

// int32 hours = 4;
inline void DateTime::clear_hours() {
  hours_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DateTime::_internal_hours() const {
  return hours_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DateTime::hours() const {
  // @@protoc_insertion_point(field_get:google.type.DateTime.hours)
  return _internal_hours();
}
inline void DateTime::_internal_set_hours(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hours_ = value;
}
inline void DateTime::set_hours(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hours(value);
  // @@protoc_insertion_point(field_set:google.type.DateTime.hours)
}

// int32 minutes = 5;
inline void DateTime::clear_minutes() {
  minutes_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DateTime::_internal_minutes() const {
  return minutes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DateTime::minutes() const {
  // @@protoc_insertion_point(field_get:google.type.DateTime.minutes)
  return _internal_minutes();
}
inline void DateTime::_internal_set_minutes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  minutes_ = value;
}
inline void DateTime::set_minutes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_minutes(value);
  // @@protoc_insertion_point(field_set:google.type.DateTime.minutes)
}

// int32 seconds = 6;
inline void DateTime::clear_seconds() {
  seconds_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DateTime::_internal_seconds() const {
  return seconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DateTime::seconds() const {
  // @@protoc_insertion_point(field_get:google.type.DateTime.seconds)
  return _internal_seconds();
}
inline void DateTime::_internal_set_seconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  seconds_ = value;
}
inline void DateTime::set_seconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_seconds(value);
  // @@protoc_insertion_point(field_set:google.type.DateTime.seconds)
}

// int32 nanos = 7;
inline void DateTime::clear_nanos() {
  nanos_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DateTime::_internal_nanos() const {
  return nanos_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DateTime::nanos() const {
  // @@protoc_insertion_point(field_get:google.type.DateTime.nanos)
  return _internal_nanos();
}
inline void DateTime::_internal_set_nanos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nanos_ = value;
}
inline void DateTime::set_nanos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nanos(value);
  // @@protoc_insertion_point(field_set:google.type.DateTime.nanos)
}

// .google.protobuf.Duration utc_offset = 8;
inline bool DateTime::_internal_has_utc_offset() const {
  return time_offset_case() == kUtcOffset;
}
inline bool DateTime::has_utc_offset() const {
  return _internal_has_utc_offset();
}
inline void DateTime::set_has_utc_offset() {
  _oneof_case_[0] = kUtcOffset;
}
inline PROTOBUF_NAMESPACE_ID::Duration* DateTime::release_utc_offset() {
  // @@protoc_insertion_point(field_release:google.type.DateTime.utc_offset)
  if (_internal_has_utc_offset()) {
    clear_has_time_offset();
      PROTOBUF_NAMESPACE_ID::Duration* temp = time_offset_.utc_offset_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    time_offset_.utc_offset_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const PROTOBUF_NAMESPACE_ID::Duration& DateTime::_internal_utc_offset() const {
  return _internal_has_utc_offset()
      ? *time_offset_.utc_offset_
      : reinterpret_cast< PROTOBUF_NAMESPACE_ID::Duration&>(PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Duration& DateTime::utc_offset() const {
  // @@protoc_insertion_point(field_get:google.type.DateTime.utc_offset)
  return _internal_utc_offset();
}
inline PROTOBUF_NAMESPACE_ID::Duration* DateTime::unsafe_arena_release_utc_offset() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.type.DateTime.utc_offset)
  if (_internal_has_utc_offset()) {
    clear_has_time_offset();
    PROTOBUF_NAMESPACE_ID::Duration* temp = time_offset_.utc_offset_;
    time_offset_.utc_offset_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DateTime::unsafe_arena_set_allocated_utc_offset(PROTOBUF_NAMESPACE_ID::Duration* utc_offset) {
  clear_time_offset();
  if (utc_offset) {
    set_has_utc_offset();
    time_offset_.utc_offset_ = utc_offset;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.type.DateTime.utc_offset)
}
inline PROTOBUF_NAMESPACE_ID::Duration* DateTime::_internal_mutable_utc_offset() {
  if (!_internal_has_utc_offset()) {
    clear_time_offset();
    set_has_utc_offset();
    time_offset_.utc_offset_ = CreateMaybeMessage< PROTOBUF_NAMESPACE_ID::Duration >(GetArena());
  }
  return time_offset_.utc_offset_;
}
inline PROTOBUF_NAMESPACE_ID::Duration* DateTime::mutable_utc_offset() {
  // @@protoc_insertion_point(field_mutable:google.type.DateTime.utc_offset)
  return _internal_mutable_utc_offset();
}

// .google.type.TimeZone time_zone = 9;
inline bool DateTime::_internal_has_time_zone() const {
  return time_offset_case() == kTimeZone;
}
inline bool DateTime::has_time_zone() const {
  return _internal_has_time_zone();
}
inline void DateTime::set_has_time_zone() {
  _oneof_case_[0] = kTimeZone;
}
inline void DateTime::clear_time_zone() {
  if (_internal_has_time_zone()) {
    if (GetArena() == nullptr) {
      delete time_offset_.time_zone_;
    }
    clear_has_time_offset();
  }
}
inline ::google::type::TimeZone* DateTime::release_time_zone() {
  // @@protoc_insertion_point(field_release:google.type.DateTime.time_zone)
  if (_internal_has_time_zone()) {
    clear_has_time_offset();
      ::google::type::TimeZone* temp = time_offset_.time_zone_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    time_offset_.time_zone_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::type::TimeZone& DateTime::_internal_time_zone() const {
  return _internal_has_time_zone()
      ? *time_offset_.time_zone_
      : reinterpret_cast< ::google::type::TimeZone&>(::google::type::_TimeZone_default_instance_);
}
inline const ::google::type::TimeZone& DateTime::time_zone() const {
  // @@protoc_insertion_point(field_get:google.type.DateTime.time_zone)
  return _internal_time_zone();
}
inline ::google::type::TimeZone* DateTime::unsafe_arena_release_time_zone() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.type.DateTime.time_zone)
  if (_internal_has_time_zone()) {
    clear_has_time_offset();
    ::google::type::TimeZone* temp = time_offset_.time_zone_;
    time_offset_.time_zone_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DateTime::unsafe_arena_set_allocated_time_zone(::google::type::TimeZone* time_zone) {
  clear_time_offset();
  if (time_zone) {
    set_has_time_zone();
    time_offset_.time_zone_ = time_zone;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.type.DateTime.time_zone)
}
inline ::google::type::TimeZone* DateTime::_internal_mutable_time_zone() {
  if (!_internal_has_time_zone()) {
    clear_time_offset();
    set_has_time_zone();
    time_offset_.time_zone_ = CreateMaybeMessage< ::google::type::TimeZone >(GetArena());
  }
  return time_offset_.time_zone_;
}
inline ::google::type::TimeZone* DateTime::mutable_time_zone() {
  // @@protoc_insertion_point(field_mutable:google.type.DateTime.time_zone)
  return _internal_mutable_time_zone();
}

inline bool DateTime::has_time_offset() const {
  return time_offset_case() != TIME_OFFSET_NOT_SET;
}
inline void DateTime::clear_has_time_offset() {
  _oneof_case_[0] = TIME_OFFSET_NOT_SET;
}
inline DateTime::TimeOffsetCase DateTime::time_offset_case() const {
  return DateTime::TimeOffsetCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TimeZone

// string id = 1;
inline void TimeZone::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& TimeZone::id() const {
  // @@protoc_insertion_point(field_get:google.type.TimeZone.id)
  return _internal_id();
}
inline void TimeZone::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:google.type.TimeZone.id)
}
inline std::string* TimeZone::mutable_id() {
  // @@protoc_insertion_point(field_mutable:google.type.TimeZone.id)
  return _internal_mutable_id();
}
inline const std::string& TimeZone::_internal_id() const {
  return id_.Get();
}
inline void TimeZone::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TimeZone::set_id(std::string&& value) {
  
  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.type.TimeZone.id)
}
inline void TimeZone::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.type.TimeZone.id)
}
inline void TimeZone::set_id(const char* value,
    size_t size) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.type.TimeZone.id)
}
inline std::string* TimeZone::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TimeZone::release_id() {
  // @@protoc_insertion_point(field_release:google.type.TimeZone.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TimeZone::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.type.TimeZone.id)
}

// string version = 2;
inline void TimeZone::clear_version() {
  version_.ClearToEmpty();
}
inline const std::string& TimeZone::version() const {
  // @@protoc_insertion_point(field_get:google.type.TimeZone.version)
  return _internal_version();
}
inline void TimeZone::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:google.type.TimeZone.version)
}
inline std::string* TimeZone::mutable_version() {
  // @@protoc_insertion_point(field_mutable:google.type.TimeZone.version)
  return _internal_mutable_version();
}
inline const std::string& TimeZone::_internal_version() const {
  return version_.Get();
}
inline void TimeZone::_internal_set_version(const std::string& value) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TimeZone::set_version(std::string&& value) {
  
  version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.type.TimeZone.version)
}
inline void TimeZone::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.type.TimeZone.version)
}
inline void TimeZone::set_version(const char* value,
    size_t size) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.type.TimeZone.version)
}
inline std::string* TimeZone::_internal_mutable_version() {
  
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TimeZone::release_version() {
  // @@protoc_insertion_point(field_release:google.type.TimeZone.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TimeZone::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.type.TimeZone.version)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace type
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2ftype_2fdatetime_2eproto
