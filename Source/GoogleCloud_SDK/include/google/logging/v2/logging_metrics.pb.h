// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/logging/v2/logging_metrics.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2flogging_2fv2_2flogging_5fmetrics_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2flogging_2fv2_2flogging_5fmetrics_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include "google/api/distribution.pb.h"
#include "google/api/field_behavior.pb.h"
#include "google/api/metric.pb.h"
#include "google/api/resource.pb.h"
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2flogging_2fv2_2flogging_5fmetrics_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2flogging_2fv2_2flogging_5fmetrics_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2flogging_2fv2_2flogging_5fmetrics_2eproto;
namespace google {
namespace logging {
namespace v2 {
class CreateLogMetricRequest;
struct CreateLogMetricRequestDefaultTypeInternal;
extern CreateLogMetricRequestDefaultTypeInternal _CreateLogMetricRequest_default_instance_;
class DeleteLogMetricRequest;
struct DeleteLogMetricRequestDefaultTypeInternal;
extern DeleteLogMetricRequestDefaultTypeInternal _DeleteLogMetricRequest_default_instance_;
class GetLogMetricRequest;
struct GetLogMetricRequestDefaultTypeInternal;
extern GetLogMetricRequestDefaultTypeInternal _GetLogMetricRequest_default_instance_;
class ListLogMetricsRequest;
struct ListLogMetricsRequestDefaultTypeInternal;
extern ListLogMetricsRequestDefaultTypeInternal _ListLogMetricsRequest_default_instance_;
class ListLogMetricsResponse;
struct ListLogMetricsResponseDefaultTypeInternal;
extern ListLogMetricsResponseDefaultTypeInternal _ListLogMetricsResponse_default_instance_;
class LogMetric;
struct LogMetricDefaultTypeInternal;
extern LogMetricDefaultTypeInternal _LogMetric_default_instance_;
class LogMetric_LabelExtractorsEntry_DoNotUse;
struct LogMetric_LabelExtractorsEntry_DoNotUseDefaultTypeInternal;
extern LogMetric_LabelExtractorsEntry_DoNotUseDefaultTypeInternal _LogMetric_LabelExtractorsEntry_DoNotUse_default_instance_;
class UpdateLogMetricRequest;
struct UpdateLogMetricRequestDefaultTypeInternal;
extern UpdateLogMetricRequestDefaultTypeInternal _UpdateLogMetricRequest_default_instance_;
}  // namespace v2
}  // namespace logging
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::logging::v2::CreateLogMetricRequest* Arena::CreateMaybeMessage<::google::logging::v2::CreateLogMetricRequest>(Arena*);
template<> ::google::logging::v2::DeleteLogMetricRequest* Arena::CreateMaybeMessage<::google::logging::v2::DeleteLogMetricRequest>(Arena*);
template<> ::google::logging::v2::GetLogMetricRequest* Arena::CreateMaybeMessage<::google::logging::v2::GetLogMetricRequest>(Arena*);
template<> ::google::logging::v2::ListLogMetricsRequest* Arena::CreateMaybeMessage<::google::logging::v2::ListLogMetricsRequest>(Arena*);
template<> ::google::logging::v2::ListLogMetricsResponse* Arena::CreateMaybeMessage<::google::logging::v2::ListLogMetricsResponse>(Arena*);
template<> ::google::logging::v2::LogMetric* Arena::CreateMaybeMessage<::google::logging::v2::LogMetric>(Arena*);
template<> ::google::logging::v2::LogMetric_LabelExtractorsEntry_DoNotUse* Arena::CreateMaybeMessage<::google::logging::v2::LogMetric_LabelExtractorsEntry_DoNotUse>(Arena*);
template<> ::google::logging::v2::UpdateLogMetricRequest* Arena::CreateMaybeMessage<::google::logging::v2::UpdateLogMetricRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace logging {
namespace v2 {

enum LogMetric_ApiVersion : int {
  LogMetric_ApiVersion_V2 = 0,
  LogMetric_ApiVersion_V1 = 1,
  LogMetric_ApiVersion_LogMetric_ApiVersion_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  LogMetric_ApiVersion_LogMetric_ApiVersion_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool LogMetric_ApiVersion_IsValid(int value);
constexpr LogMetric_ApiVersion LogMetric_ApiVersion_ApiVersion_MIN = LogMetric_ApiVersion_V2;
constexpr LogMetric_ApiVersion LogMetric_ApiVersion_ApiVersion_MAX = LogMetric_ApiVersion_V1;
constexpr int LogMetric_ApiVersion_ApiVersion_ARRAYSIZE = LogMetric_ApiVersion_ApiVersion_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LogMetric_ApiVersion_descriptor();
template<typename T>
inline const std::string& LogMetric_ApiVersion_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LogMetric_ApiVersion>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LogMetric_ApiVersion_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LogMetric_ApiVersion_descriptor(), enum_t_value);
}
inline bool LogMetric_ApiVersion_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LogMetric_ApiVersion* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LogMetric_ApiVersion>(
    LogMetric_ApiVersion_descriptor(), name, value);
}
// ===================================================================

class LogMetric_LabelExtractorsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<LogMetric_LabelExtractorsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<LogMetric_LabelExtractorsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  LogMetric_LabelExtractorsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR LogMetric_LabelExtractorsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit LogMetric_LabelExtractorsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const LogMetric_LabelExtractorsEntry_DoNotUse& other);
  static const LogMetric_LabelExtractorsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const LogMetric_LabelExtractorsEntry_DoNotUse*>(&_LogMetric_LabelExtractorsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.logging.v2.LogMetric.LabelExtractorsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.logging.v2.LogMetric.LabelExtractorsEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2flogging_2fv2_2flogging_5fmetrics_2eproto;
};

// -------------------------------------------------------------------

class LogMetric final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.logging.v2.LogMetric) */ {
 public:
  inline LogMetric() : LogMetric(nullptr) {}
  ~LogMetric() override;
  explicit PROTOBUF_CONSTEXPR LogMetric(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogMetric(const LogMetric& from);
  LogMetric(LogMetric&& from) noexcept
    : LogMetric() {
    *this = ::std::move(from);
  }

  inline LogMetric& operator=(const LogMetric& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogMetric& operator=(LogMetric&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogMetric& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogMetric* internal_default_instance() {
    return reinterpret_cast<const LogMetric*>(
               &_LogMetric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LogMetric& a, LogMetric& b) {
    a.Swap(&b);
  }
  inline void Swap(LogMetric* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogMetric* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogMetric* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LogMetric>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LogMetric& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LogMetric& from) {
    LogMetric::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogMetric* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.logging.v2.LogMetric";
  }
  protected:
  explicit LogMetric(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  typedef LogMetric_ApiVersion ApiVersion;
  static constexpr ApiVersion V2 =
    LogMetric_ApiVersion_V2;
  static constexpr ApiVersion V1 =
    LogMetric_ApiVersion_V1;
  static inline bool ApiVersion_IsValid(int value) {
    return LogMetric_ApiVersion_IsValid(value);
  }
  static constexpr ApiVersion ApiVersion_MIN =
    LogMetric_ApiVersion_ApiVersion_MIN;
  static constexpr ApiVersion ApiVersion_MAX =
    LogMetric_ApiVersion_ApiVersion_MAX;
  static constexpr int ApiVersion_ARRAYSIZE =
    LogMetric_ApiVersion_ApiVersion_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ApiVersion_descriptor() {
    return LogMetric_ApiVersion_descriptor();
  }
  template<typename T>
  static inline const std::string& ApiVersion_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ApiVersion>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ApiVersion_Name.");
    return LogMetric_ApiVersion_Name(enum_t_value);
  }
  static inline bool ApiVersion_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ApiVersion* value) {
    return LogMetric_ApiVersion_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLabelExtractorsFieldNumber = 7,
    kNameFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kFilterFieldNumber = 3,
    kValueExtractorFieldNumber = 6,
    kMetricDescriptorFieldNumber = 5,
    kBucketOptionsFieldNumber = 8,
    kCreateTimeFieldNumber = 9,
    kUpdateTimeFieldNumber = 10,
    kVersionFieldNumber = 4,
    kDisabledFieldNumber = 12,
  };
  // map<string, string> label_extractors = 7 [(.google.api.field_behavior) = OPTIONAL];
  int label_extractors_size() const;
  private:
  int _internal_label_extractors_size() const;
  public:
  void clear_label_extractors();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_label_extractors() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_label_extractors();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      label_extractors() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_label_extractors();

  // string name = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 2 [(.google.api.field_behavior) = OPTIONAL];
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string filter = 3 [(.google.api.field_behavior) = REQUIRED];
  void clear_filter();
  const std::string& filter() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filter(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filter();
  PROTOBUF_NODISCARD std::string* release_filter();
  void set_allocated_filter(std::string* filter);
  private:
  const std::string& _internal_filter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filter(const std::string& value);
  std::string* _internal_mutable_filter();
  public:

  // string value_extractor = 6 [(.google.api.field_behavior) = OPTIONAL];
  void clear_value_extractor();
  const std::string& value_extractor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value_extractor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value_extractor();
  PROTOBUF_NODISCARD std::string* release_value_extractor();
  void set_allocated_value_extractor(std::string* value_extractor);
  private:
  const std::string& _internal_value_extractor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value_extractor(const std::string& value);
  std::string* _internal_mutable_value_extractor();
  public:

  // .google.api.MetricDescriptor metric_descriptor = 5 [(.google.api.field_behavior) = OPTIONAL];
  bool has_metric_descriptor() const;
  private:
  bool _internal_has_metric_descriptor() const;
  public:
  void clear_metric_descriptor();
  const ::google::api::MetricDescriptor& metric_descriptor() const;
  PROTOBUF_NODISCARD ::google::api::MetricDescriptor* release_metric_descriptor();
  ::google::api::MetricDescriptor* mutable_metric_descriptor();
  void set_allocated_metric_descriptor(::google::api::MetricDescriptor* metric_descriptor);
  private:
  const ::google::api::MetricDescriptor& _internal_metric_descriptor() const;
  ::google::api::MetricDescriptor* _internal_mutable_metric_descriptor();
  public:
  void unsafe_arena_set_allocated_metric_descriptor(
      ::google::api::MetricDescriptor* metric_descriptor);
  ::google::api::MetricDescriptor* unsafe_arena_release_metric_descriptor();

  // .google.api.Distribution.BucketOptions bucket_options = 8 [(.google.api.field_behavior) = OPTIONAL];
  bool has_bucket_options() const;
  private:
  bool _internal_has_bucket_options() const;
  public:
  void clear_bucket_options();
  const ::google::api::Distribution_BucketOptions& bucket_options() const;
  PROTOBUF_NODISCARD ::google::api::Distribution_BucketOptions* release_bucket_options();
  ::google::api::Distribution_BucketOptions* mutable_bucket_options();
  void set_allocated_bucket_options(::google::api::Distribution_BucketOptions* bucket_options);
  private:
  const ::google::api::Distribution_BucketOptions& _internal_bucket_options() const;
  ::google::api::Distribution_BucketOptions* _internal_mutable_bucket_options();
  public:
  void unsafe_arena_set_allocated_bucket_options(
      ::google::api::Distribution_BucketOptions* bucket_options);
  ::google::api::Distribution_BucketOptions* unsafe_arena_release_bucket_options();

  // .google.protobuf.Timestamp create_time = 9 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_create_time() const;
  private:
  bool _internal_has_create_time() const;
  public:
  void clear_create_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& create_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_create_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_create_time();
  void set_allocated_create_time(::PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_create_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_create_time();
  public:
  void unsafe_arena_set_allocated_create_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_create_time();

  // .google.protobuf.Timestamp update_time = 10 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_update_time() const;
  private:
  bool _internal_has_update_time() const;
  public:
  void clear_update_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& update_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_update_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_update_time();
  void set_allocated_update_time(::PROTOBUF_NAMESPACE_ID::Timestamp* update_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_update_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_update_time();
  public:
  void unsafe_arena_set_allocated_update_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* update_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_update_time();

  // .google.logging.v2.LogMetric.ApiVersion version = 4 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_version();
  PROTOBUF_DEPRECATED ::google::logging::v2::LogMetric_ApiVersion version() const;
  PROTOBUF_DEPRECATED void set_version(::google::logging::v2::LogMetric_ApiVersion value);
  private:
  ::google::logging::v2::LogMetric_ApiVersion _internal_version() const;
  void _internal_set_version(::google::logging::v2::LogMetric_ApiVersion value);
  public:

  // bool disabled = 12 [(.google.api.field_behavior) = OPTIONAL];
  void clear_disabled();
  bool disabled() const;
  void set_disabled(bool value);
  private:
  bool _internal_disabled() const;
  void _internal_set_disabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.logging.v2.LogMetric)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        LogMetric_LabelExtractorsEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> label_extractors_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filter_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_extractor_;
    ::google::api::MetricDescriptor* metric_descriptor_;
    ::google::api::Distribution_BucketOptions* bucket_options_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* create_time_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* update_time_;
    int version_;
    bool disabled_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2flogging_2fv2_2flogging_5fmetrics_2eproto;
};
// -------------------------------------------------------------------

class ListLogMetricsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.logging.v2.ListLogMetricsRequest) */ {
 public:
  inline ListLogMetricsRequest() : ListLogMetricsRequest(nullptr) {}
  ~ListLogMetricsRequest() override;
  explicit PROTOBUF_CONSTEXPR ListLogMetricsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListLogMetricsRequest(const ListLogMetricsRequest& from);
  ListLogMetricsRequest(ListLogMetricsRequest&& from) noexcept
    : ListLogMetricsRequest() {
    *this = ::std::move(from);
  }

  inline ListLogMetricsRequest& operator=(const ListLogMetricsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListLogMetricsRequest& operator=(ListLogMetricsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListLogMetricsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListLogMetricsRequest* internal_default_instance() {
    return reinterpret_cast<const ListLogMetricsRequest*>(
               &_ListLogMetricsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ListLogMetricsRequest& a, ListLogMetricsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListLogMetricsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListLogMetricsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListLogMetricsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListLogMetricsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListLogMetricsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListLogMetricsRequest& from) {
    ListLogMetricsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListLogMetricsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.logging.v2.ListLogMetricsRequest";
  }
  protected:
  explicit ListLogMetricsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 2,
    kPageSizeFieldNumber = 3,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 2 [(.google.api.field_behavior) = OPTIONAL];
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 3 [(.google.api.field_behavior) = OPTIONAL];
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.logging.v2.ListLogMetricsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
    int32_t page_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2flogging_2fv2_2flogging_5fmetrics_2eproto;
};
// -------------------------------------------------------------------

class ListLogMetricsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.logging.v2.ListLogMetricsResponse) */ {
 public:
  inline ListLogMetricsResponse() : ListLogMetricsResponse(nullptr) {}
  ~ListLogMetricsResponse() override;
  explicit PROTOBUF_CONSTEXPR ListLogMetricsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListLogMetricsResponse(const ListLogMetricsResponse& from);
  ListLogMetricsResponse(ListLogMetricsResponse&& from) noexcept
    : ListLogMetricsResponse() {
    *this = ::std::move(from);
  }

  inline ListLogMetricsResponse& operator=(const ListLogMetricsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListLogMetricsResponse& operator=(ListLogMetricsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListLogMetricsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListLogMetricsResponse* internal_default_instance() {
    return reinterpret_cast<const ListLogMetricsResponse*>(
               &_ListLogMetricsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ListLogMetricsResponse& a, ListLogMetricsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListLogMetricsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListLogMetricsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListLogMetricsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListLogMetricsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListLogMetricsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListLogMetricsResponse& from) {
    ListLogMetricsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListLogMetricsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.logging.v2.ListLogMetricsResponse";
  }
  protected:
  explicit ListLogMetricsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetricsFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .google.logging.v2.LogMetric metrics = 1;
  int metrics_size() const;
  private:
  int _internal_metrics_size() const;
  public:
  void clear_metrics();
  ::google::logging::v2::LogMetric* mutable_metrics(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::logging::v2::LogMetric >*
      mutable_metrics();
  private:
  const ::google::logging::v2::LogMetric& _internal_metrics(int index) const;
  ::google::logging::v2::LogMetric* _internal_add_metrics();
  public:
  const ::google::logging::v2::LogMetric& metrics(int index) const;
  ::google::logging::v2::LogMetric* add_metrics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::logging::v2::LogMetric >&
      metrics() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:google.logging.v2.ListLogMetricsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::logging::v2::LogMetric > metrics_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2flogging_2fv2_2flogging_5fmetrics_2eproto;
};
// -------------------------------------------------------------------

class GetLogMetricRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.logging.v2.GetLogMetricRequest) */ {
 public:
  inline GetLogMetricRequest() : GetLogMetricRequest(nullptr) {}
  ~GetLogMetricRequest() override;
  explicit PROTOBUF_CONSTEXPR GetLogMetricRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetLogMetricRequest(const GetLogMetricRequest& from);
  GetLogMetricRequest(GetLogMetricRequest&& from) noexcept
    : GetLogMetricRequest() {
    *this = ::std::move(from);
  }

  inline GetLogMetricRequest& operator=(const GetLogMetricRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLogMetricRequest& operator=(GetLogMetricRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetLogMetricRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetLogMetricRequest* internal_default_instance() {
    return reinterpret_cast<const GetLogMetricRequest*>(
               &_GetLogMetricRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetLogMetricRequest& a, GetLogMetricRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLogMetricRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLogMetricRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetLogMetricRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetLogMetricRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetLogMetricRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetLogMetricRequest& from) {
    GetLogMetricRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLogMetricRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.logging.v2.GetLogMetricRequest";
  }
  protected:
  explicit GetLogMetricRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetricNameFieldNumber = 1,
  };
  // string metric_name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_metric_name();
  const std::string& metric_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_metric_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_metric_name();
  PROTOBUF_NODISCARD std::string* release_metric_name();
  void set_allocated_metric_name(std::string* metric_name);
  private:
  const std::string& _internal_metric_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metric_name(const std::string& value);
  std::string* _internal_mutable_metric_name();
  public:

  // @@protoc_insertion_point(class_scope:google.logging.v2.GetLogMetricRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metric_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2flogging_2fv2_2flogging_5fmetrics_2eproto;
};
// -------------------------------------------------------------------

class CreateLogMetricRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.logging.v2.CreateLogMetricRequest) */ {
 public:
  inline CreateLogMetricRequest() : CreateLogMetricRequest(nullptr) {}
  ~CreateLogMetricRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateLogMetricRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateLogMetricRequest(const CreateLogMetricRequest& from);
  CreateLogMetricRequest(CreateLogMetricRequest&& from) noexcept
    : CreateLogMetricRequest() {
    *this = ::std::move(from);
  }

  inline CreateLogMetricRequest& operator=(const CreateLogMetricRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateLogMetricRequest& operator=(CreateLogMetricRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateLogMetricRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateLogMetricRequest* internal_default_instance() {
    return reinterpret_cast<const CreateLogMetricRequest*>(
               &_CreateLogMetricRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CreateLogMetricRequest& a, CreateLogMetricRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateLogMetricRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateLogMetricRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateLogMetricRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateLogMetricRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateLogMetricRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateLogMetricRequest& from) {
    CreateLogMetricRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateLogMetricRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.logging.v2.CreateLogMetricRequest";
  }
  protected:
  explicit CreateLogMetricRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kMetricFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // .google.logging.v2.LogMetric metric = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_metric() const;
  private:
  bool _internal_has_metric() const;
  public:
  void clear_metric();
  const ::google::logging::v2::LogMetric& metric() const;
  PROTOBUF_NODISCARD ::google::logging::v2::LogMetric* release_metric();
  ::google::logging::v2::LogMetric* mutable_metric();
  void set_allocated_metric(::google::logging::v2::LogMetric* metric);
  private:
  const ::google::logging::v2::LogMetric& _internal_metric() const;
  ::google::logging::v2::LogMetric* _internal_mutable_metric();
  public:
  void unsafe_arena_set_allocated_metric(
      ::google::logging::v2::LogMetric* metric);
  ::google::logging::v2::LogMetric* unsafe_arena_release_metric();

  // @@protoc_insertion_point(class_scope:google.logging.v2.CreateLogMetricRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::google::logging::v2::LogMetric* metric_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2flogging_2fv2_2flogging_5fmetrics_2eproto;
};
// -------------------------------------------------------------------

class UpdateLogMetricRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.logging.v2.UpdateLogMetricRequest) */ {
 public:
  inline UpdateLogMetricRequest() : UpdateLogMetricRequest(nullptr) {}
  ~UpdateLogMetricRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateLogMetricRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateLogMetricRequest(const UpdateLogMetricRequest& from);
  UpdateLogMetricRequest(UpdateLogMetricRequest&& from) noexcept
    : UpdateLogMetricRequest() {
    *this = ::std::move(from);
  }

  inline UpdateLogMetricRequest& operator=(const UpdateLogMetricRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateLogMetricRequest& operator=(UpdateLogMetricRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateLogMetricRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateLogMetricRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateLogMetricRequest*>(
               &_UpdateLogMetricRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UpdateLogMetricRequest& a, UpdateLogMetricRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateLogMetricRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateLogMetricRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateLogMetricRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateLogMetricRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateLogMetricRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateLogMetricRequest& from) {
    UpdateLogMetricRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateLogMetricRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.logging.v2.UpdateLogMetricRequest";
  }
  protected:
  explicit UpdateLogMetricRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetricNameFieldNumber = 1,
    kMetricFieldNumber = 2,
  };
  // string metric_name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_metric_name();
  const std::string& metric_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_metric_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_metric_name();
  PROTOBUF_NODISCARD std::string* release_metric_name();
  void set_allocated_metric_name(std::string* metric_name);
  private:
  const std::string& _internal_metric_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metric_name(const std::string& value);
  std::string* _internal_mutable_metric_name();
  public:

  // .google.logging.v2.LogMetric metric = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_metric() const;
  private:
  bool _internal_has_metric() const;
  public:
  void clear_metric();
  const ::google::logging::v2::LogMetric& metric() const;
  PROTOBUF_NODISCARD ::google::logging::v2::LogMetric* release_metric();
  ::google::logging::v2::LogMetric* mutable_metric();
  void set_allocated_metric(::google::logging::v2::LogMetric* metric);
  private:
  const ::google::logging::v2::LogMetric& _internal_metric() const;
  ::google::logging::v2::LogMetric* _internal_mutable_metric();
  public:
  void unsafe_arena_set_allocated_metric(
      ::google::logging::v2::LogMetric* metric);
  ::google::logging::v2::LogMetric* unsafe_arena_release_metric();

  // @@protoc_insertion_point(class_scope:google.logging.v2.UpdateLogMetricRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metric_name_;
    ::google::logging::v2::LogMetric* metric_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2flogging_2fv2_2flogging_5fmetrics_2eproto;
};
// -------------------------------------------------------------------

class DeleteLogMetricRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.logging.v2.DeleteLogMetricRequest) */ {
 public:
  inline DeleteLogMetricRequest() : DeleteLogMetricRequest(nullptr) {}
  ~DeleteLogMetricRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteLogMetricRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteLogMetricRequest(const DeleteLogMetricRequest& from);
  DeleteLogMetricRequest(DeleteLogMetricRequest&& from) noexcept
    : DeleteLogMetricRequest() {
    *this = ::std::move(from);
  }

  inline DeleteLogMetricRequest& operator=(const DeleteLogMetricRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteLogMetricRequest& operator=(DeleteLogMetricRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteLogMetricRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteLogMetricRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteLogMetricRequest*>(
               &_DeleteLogMetricRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DeleteLogMetricRequest& a, DeleteLogMetricRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteLogMetricRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteLogMetricRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteLogMetricRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteLogMetricRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteLogMetricRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteLogMetricRequest& from) {
    DeleteLogMetricRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteLogMetricRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.logging.v2.DeleteLogMetricRequest";
  }
  protected:
  explicit DeleteLogMetricRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetricNameFieldNumber = 1,
  };
  // string metric_name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_metric_name();
  const std::string& metric_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_metric_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_metric_name();
  PROTOBUF_NODISCARD std::string* release_metric_name();
  void set_allocated_metric_name(std::string* metric_name);
  private:
  const std::string& _internal_metric_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metric_name(const std::string& value);
  std::string* _internal_mutable_metric_name();
  public:

  // @@protoc_insertion_point(class_scope:google.logging.v2.DeleteLogMetricRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metric_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2flogging_2fv2_2flogging_5fmetrics_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// LogMetric

// string name = 1 [(.google.api.field_behavior) = REQUIRED];
inline void LogMetric::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& LogMetric::name() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogMetric.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogMetric::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.logging.v2.LogMetric.name)
}
inline std::string* LogMetric::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogMetric.name)
  return _s;
}
inline const std::string& LogMetric::_internal_name() const {
  return _impl_.name_.Get();
}
inline void LogMetric::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* LogMetric::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* LogMetric::release_name() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogMetric.name)
  return _impl_.name_.Release();
}
inline void LogMetric::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogMetric.name)
}

// string description = 2 [(.google.api.field_behavior) = OPTIONAL];
inline void LogMetric::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& LogMetric::description() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogMetric.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogMetric::set_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.logging.v2.LogMetric.description)
}
inline std::string* LogMetric::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogMetric.description)
  return _s;
}
inline const std::string& LogMetric::_internal_description() const {
  return _impl_.description_.Get();
}
inline void LogMetric::_internal_set_description(const std::string& value) {
  
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* LogMetric::_internal_mutable_description() {
  
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* LogMetric::release_description() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogMetric.description)
  return _impl_.description_.Release();
}
inline void LogMetric::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogMetric.description)
}

// string filter = 3 [(.google.api.field_behavior) = REQUIRED];
inline void LogMetric::clear_filter() {
  _impl_.filter_.ClearToEmpty();
}
inline const std::string& LogMetric::filter() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogMetric.filter)
  return _internal_filter();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogMetric::set_filter(ArgT0&& arg0, ArgT... args) {
 
 _impl_.filter_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.logging.v2.LogMetric.filter)
}
inline std::string* LogMetric::mutable_filter() {
  std::string* _s = _internal_mutable_filter();
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogMetric.filter)
  return _s;
}
inline const std::string& LogMetric::_internal_filter() const {
  return _impl_.filter_.Get();
}
inline void LogMetric::_internal_set_filter(const std::string& value) {
  
  _impl_.filter_.Set(value, GetArenaForAllocation());
}
inline std::string* LogMetric::_internal_mutable_filter() {
  
  return _impl_.filter_.Mutable(GetArenaForAllocation());
}
inline std::string* LogMetric::release_filter() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogMetric.filter)
  return _impl_.filter_.Release();
}
inline void LogMetric::set_allocated_filter(std::string* filter) {
  if (filter != nullptr) {
    
  } else {
    
  }
  _impl_.filter_.SetAllocated(filter, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.filter_.IsDefault()) {
    _impl_.filter_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogMetric.filter)
}

// bool disabled = 12 [(.google.api.field_behavior) = OPTIONAL];
inline void LogMetric::clear_disabled() {
  _impl_.disabled_ = false;
}
inline bool LogMetric::_internal_disabled() const {
  return _impl_.disabled_;
}
inline bool LogMetric::disabled() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogMetric.disabled)
  return _internal_disabled();
}
inline void LogMetric::_internal_set_disabled(bool value) {
  
  _impl_.disabled_ = value;
}
inline void LogMetric::set_disabled(bool value) {
  _internal_set_disabled(value);
  // @@protoc_insertion_point(field_set:google.logging.v2.LogMetric.disabled)
}

// .google.api.MetricDescriptor metric_descriptor = 5 [(.google.api.field_behavior) = OPTIONAL];
inline bool LogMetric::_internal_has_metric_descriptor() const {
  return this != internal_default_instance() && _impl_.metric_descriptor_ != nullptr;
}
inline bool LogMetric::has_metric_descriptor() const {
  return _internal_has_metric_descriptor();
}
inline const ::google::api::MetricDescriptor& LogMetric::_internal_metric_descriptor() const {
  const ::google::api::MetricDescriptor* p = _impl_.metric_descriptor_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::api::MetricDescriptor&>(
      ::google::api::_MetricDescriptor_default_instance_);
}
inline const ::google::api::MetricDescriptor& LogMetric::metric_descriptor() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogMetric.metric_descriptor)
  return _internal_metric_descriptor();
}
inline void LogMetric::unsafe_arena_set_allocated_metric_descriptor(
    ::google::api::MetricDescriptor* metric_descriptor) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metric_descriptor_);
  }
  _impl_.metric_descriptor_ = metric_descriptor;
  if (metric_descriptor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.LogMetric.metric_descriptor)
}
inline ::google::api::MetricDescriptor* LogMetric::release_metric_descriptor() {
  
  ::google::api::MetricDescriptor* temp = _impl_.metric_descriptor_;
  _impl_.metric_descriptor_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::api::MetricDescriptor* LogMetric::unsafe_arena_release_metric_descriptor() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogMetric.metric_descriptor)
  
  ::google::api::MetricDescriptor* temp = _impl_.metric_descriptor_;
  _impl_.metric_descriptor_ = nullptr;
  return temp;
}
inline ::google::api::MetricDescriptor* LogMetric::_internal_mutable_metric_descriptor() {
  
  if (_impl_.metric_descriptor_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::api::MetricDescriptor>(GetArenaForAllocation());
    _impl_.metric_descriptor_ = p;
  }
  return _impl_.metric_descriptor_;
}
inline ::google::api::MetricDescriptor* LogMetric::mutable_metric_descriptor() {
  ::google::api::MetricDescriptor* _msg = _internal_mutable_metric_descriptor();
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogMetric.metric_descriptor)
  return _msg;
}
inline void LogMetric::set_allocated_metric_descriptor(::google::api::MetricDescriptor* metric_descriptor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metric_descriptor_);
  }
  if (metric_descriptor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metric_descriptor));
    if (message_arena != submessage_arena) {
      metric_descriptor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metric_descriptor, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metric_descriptor_ = metric_descriptor;
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogMetric.metric_descriptor)
}

// string value_extractor = 6 [(.google.api.field_behavior) = OPTIONAL];
inline void LogMetric::clear_value_extractor() {
  _impl_.value_extractor_.ClearToEmpty();
}
inline const std::string& LogMetric::value_extractor() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogMetric.value_extractor)
  return _internal_value_extractor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogMetric::set_value_extractor(ArgT0&& arg0, ArgT... args) {
 
 _impl_.value_extractor_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.logging.v2.LogMetric.value_extractor)
}
inline std::string* LogMetric::mutable_value_extractor() {
  std::string* _s = _internal_mutable_value_extractor();
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogMetric.value_extractor)
  return _s;
}
inline const std::string& LogMetric::_internal_value_extractor() const {
  return _impl_.value_extractor_.Get();
}
inline void LogMetric::_internal_set_value_extractor(const std::string& value) {
  
  _impl_.value_extractor_.Set(value, GetArenaForAllocation());
}
inline std::string* LogMetric::_internal_mutable_value_extractor() {
  
  return _impl_.value_extractor_.Mutable(GetArenaForAllocation());
}
inline std::string* LogMetric::release_value_extractor() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogMetric.value_extractor)
  return _impl_.value_extractor_.Release();
}
inline void LogMetric::set_allocated_value_extractor(std::string* value_extractor) {
  if (value_extractor != nullptr) {
    
  } else {
    
  }
  _impl_.value_extractor_.SetAllocated(value_extractor, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_extractor_.IsDefault()) {
    _impl_.value_extractor_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogMetric.value_extractor)
}

// map<string, string> label_extractors = 7 [(.google.api.field_behavior) = OPTIONAL];
inline int LogMetric::_internal_label_extractors_size() const {
  return _impl_.label_extractors_.size();
}
inline int LogMetric::label_extractors_size() const {
  return _internal_label_extractors_size();
}
inline void LogMetric::clear_label_extractors() {
  _impl_.label_extractors_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
LogMetric::_internal_label_extractors() const {
  return _impl_.label_extractors_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
LogMetric::label_extractors() const {
  // @@protoc_insertion_point(field_map:google.logging.v2.LogMetric.label_extractors)
  return _internal_label_extractors();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
LogMetric::_internal_mutable_label_extractors() {
  return _impl_.label_extractors_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
LogMetric::mutable_label_extractors() {
  // @@protoc_insertion_point(field_mutable_map:google.logging.v2.LogMetric.label_extractors)
  return _internal_mutable_label_extractors();
}

// .google.api.Distribution.BucketOptions bucket_options = 8 [(.google.api.field_behavior) = OPTIONAL];
inline bool LogMetric::_internal_has_bucket_options() const {
  return this != internal_default_instance() && _impl_.bucket_options_ != nullptr;
}
inline bool LogMetric::has_bucket_options() const {
  return _internal_has_bucket_options();
}
inline const ::google::api::Distribution_BucketOptions& LogMetric::_internal_bucket_options() const {
  const ::google::api::Distribution_BucketOptions* p = _impl_.bucket_options_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::api::Distribution_BucketOptions&>(
      ::google::api::_Distribution_BucketOptions_default_instance_);
}
inline const ::google::api::Distribution_BucketOptions& LogMetric::bucket_options() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogMetric.bucket_options)
  return _internal_bucket_options();
}
inline void LogMetric::unsafe_arena_set_allocated_bucket_options(
    ::google::api::Distribution_BucketOptions* bucket_options) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bucket_options_);
  }
  _impl_.bucket_options_ = bucket_options;
  if (bucket_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.LogMetric.bucket_options)
}
inline ::google::api::Distribution_BucketOptions* LogMetric::release_bucket_options() {
  
  ::google::api::Distribution_BucketOptions* temp = _impl_.bucket_options_;
  _impl_.bucket_options_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::api::Distribution_BucketOptions* LogMetric::unsafe_arena_release_bucket_options() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogMetric.bucket_options)
  
  ::google::api::Distribution_BucketOptions* temp = _impl_.bucket_options_;
  _impl_.bucket_options_ = nullptr;
  return temp;
}
inline ::google::api::Distribution_BucketOptions* LogMetric::_internal_mutable_bucket_options() {
  
  if (_impl_.bucket_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::api::Distribution_BucketOptions>(GetArenaForAllocation());
    _impl_.bucket_options_ = p;
  }
  return _impl_.bucket_options_;
}
inline ::google::api::Distribution_BucketOptions* LogMetric::mutable_bucket_options() {
  ::google::api::Distribution_BucketOptions* _msg = _internal_mutable_bucket_options();
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogMetric.bucket_options)
  return _msg;
}
inline void LogMetric::set_allocated_bucket_options(::google::api::Distribution_BucketOptions* bucket_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bucket_options_);
  }
  if (bucket_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bucket_options));
    if (message_arena != submessage_arena) {
      bucket_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bucket_options, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.bucket_options_ = bucket_options;
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogMetric.bucket_options)
}

// .google.protobuf.Timestamp create_time = 9 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool LogMetric::_internal_has_create_time() const {
  return this != internal_default_instance() && _impl_.create_time_ != nullptr;
}
inline bool LogMetric::has_create_time() const {
  return _internal_has_create_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& LogMetric::_internal_create_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.create_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& LogMetric::create_time() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogMetric.create_time)
  return _internal_create_time();
}
inline void LogMetric::unsafe_arena_set_allocated_create_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.create_time_);
  }
  _impl_.create_time_ = create_time;
  if (create_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.LogMetric.create_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LogMetric::release_create_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.create_time_;
  _impl_.create_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LogMetric::unsafe_arena_release_create_time() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogMetric.create_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.create_time_;
  _impl_.create_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LogMetric::_internal_mutable_create_time() {
  
  if (_impl_.create_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.create_time_ = p;
  }
  return _impl_.create_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LogMetric::mutable_create_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_create_time();
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogMetric.create_time)
  return _msg;
}
inline void LogMetric::set_allocated_create_time(::PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.create_time_);
  }
  if (create_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time));
    if (message_arena != submessage_arena) {
      create_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogMetric.create_time)
}

// .google.protobuf.Timestamp update_time = 10 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool LogMetric::_internal_has_update_time() const {
  return this != internal_default_instance() && _impl_.update_time_ != nullptr;
}
inline bool LogMetric::has_update_time() const {
  return _internal_has_update_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& LogMetric::_internal_update_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.update_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& LogMetric::update_time() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogMetric.update_time)
  return _internal_update_time();
}
inline void LogMetric::unsafe_arena_set_allocated_update_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* update_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_time_);
  }
  _impl_.update_time_ = update_time;
  if (update_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.LogMetric.update_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LogMetric::release_update_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.update_time_;
  _impl_.update_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LogMetric::unsafe_arena_release_update_time() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogMetric.update_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.update_time_;
  _impl_.update_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LogMetric::_internal_mutable_update_time() {
  
  if (_impl_.update_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.update_time_ = p;
  }
  return _impl_.update_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LogMetric::mutable_update_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_update_time();
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogMetric.update_time)
  return _msg;
}
inline void LogMetric::set_allocated_update_time(::PROTOBUF_NAMESPACE_ID::Timestamp* update_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_time_);
  }
  if (update_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_time));
    if (message_arena != submessage_arena) {
      update_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.update_time_ = update_time;
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogMetric.update_time)
}

// .google.logging.v2.LogMetric.ApiVersion version = 4 [deprecated = true];
inline void LogMetric::clear_version() {
  _impl_.version_ = 0;
}
inline ::google::logging::v2::LogMetric_ApiVersion LogMetric::_internal_version() const {
  return static_cast< ::google::logging::v2::LogMetric_ApiVersion >(_impl_.version_);
}
inline ::google::logging::v2::LogMetric_ApiVersion LogMetric::version() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogMetric.version)
  return _internal_version();
}
inline void LogMetric::_internal_set_version(::google::logging::v2::LogMetric_ApiVersion value) {
  
  _impl_.version_ = value;
}
inline void LogMetric::set_version(::google::logging::v2::LogMetric_ApiVersion value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:google.logging.v2.LogMetric.version)
}

// -------------------------------------------------------------------

// ListLogMetricsRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListLogMetricsRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& ListLogMetricsRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.ListLogMetricsRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListLogMetricsRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.logging.v2.ListLogMetricsRequest.parent)
}
inline std::string* ListLogMetricsRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.logging.v2.ListLogMetricsRequest.parent)
  return _s;
}
inline const std::string& ListLogMetricsRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void ListLogMetricsRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* ListLogMetricsRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* ListLogMetricsRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.logging.v2.ListLogMetricsRequest.parent)
  return _impl_.parent_.Release();
}
inline void ListLogMetricsRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.ListLogMetricsRequest.parent)
}

// string page_token = 2 [(.google.api.field_behavior) = OPTIONAL];
inline void ListLogMetricsRequest::clear_page_token() {
  _impl_.page_token_.ClearToEmpty();
}
inline const std::string& ListLogMetricsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.ListLogMetricsRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListLogMetricsRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.logging.v2.ListLogMetricsRequest.page_token)
}
inline std::string* ListLogMetricsRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:google.logging.v2.ListLogMetricsRequest.page_token)
  return _s;
}
inline const std::string& ListLogMetricsRequest::_internal_page_token() const {
  return _impl_.page_token_.Get();
}
inline void ListLogMetricsRequest::_internal_set_page_token(const std::string& value) {
  
  _impl_.page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListLogMetricsRequest::_internal_mutable_page_token() {
  
  return _impl_.page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListLogMetricsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.logging.v2.ListLogMetricsRequest.page_token)
  return _impl_.page_token_.Release();
}
inline void ListLogMetricsRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  _impl_.page_token_.SetAllocated(page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.page_token_.IsDefault()) {
    _impl_.page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.ListLogMetricsRequest.page_token)
}

// int32 page_size = 3 [(.google.api.field_behavior) = OPTIONAL];
inline void ListLogMetricsRequest::clear_page_size() {
  _impl_.page_size_ = 0;
}
inline int32_t ListLogMetricsRequest::_internal_page_size() const {
  return _impl_.page_size_;
}
inline int32_t ListLogMetricsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.ListLogMetricsRequest.page_size)
  return _internal_page_size();
}
inline void ListLogMetricsRequest::_internal_set_page_size(int32_t value) {
  
  _impl_.page_size_ = value;
}
inline void ListLogMetricsRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:google.logging.v2.ListLogMetricsRequest.page_size)
}

// -------------------------------------------------------------------

// ListLogMetricsResponse

// repeated .google.logging.v2.LogMetric metrics = 1;
inline int ListLogMetricsResponse::_internal_metrics_size() const {
  return _impl_.metrics_.size();
}
inline int ListLogMetricsResponse::metrics_size() const {
  return _internal_metrics_size();
}
inline void ListLogMetricsResponse::clear_metrics() {
  _impl_.metrics_.Clear();
}
inline ::google::logging::v2::LogMetric* ListLogMetricsResponse::mutable_metrics(int index) {
  // @@protoc_insertion_point(field_mutable:google.logging.v2.ListLogMetricsResponse.metrics)
  return _impl_.metrics_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::logging::v2::LogMetric >*
ListLogMetricsResponse::mutable_metrics() {
  // @@protoc_insertion_point(field_mutable_list:google.logging.v2.ListLogMetricsResponse.metrics)
  return &_impl_.metrics_;
}
inline const ::google::logging::v2::LogMetric& ListLogMetricsResponse::_internal_metrics(int index) const {
  return _impl_.metrics_.Get(index);
}
inline const ::google::logging::v2::LogMetric& ListLogMetricsResponse::metrics(int index) const {
  // @@protoc_insertion_point(field_get:google.logging.v2.ListLogMetricsResponse.metrics)
  return _internal_metrics(index);
}
inline ::google::logging::v2::LogMetric* ListLogMetricsResponse::_internal_add_metrics() {
  return _impl_.metrics_.Add();
}
inline ::google::logging::v2::LogMetric* ListLogMetricsResponse::add_metrics() {
  ::google::logging::v2::LogMetric* _add = _internal_add_metrics();
  // @@protoc_insertion_point(field_add:google.logging.v2.ListLogMetricsResponse.metrics)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::logging::v2::LogMetric >&
ListLogMetricsResponse::metrics() const {
  // @@protoc_insertion_point(field_list:google.logging.v2.ListLogMetricsResponse.metrics)
  return _impl_.metrics_;
}

// string next_page_token = 2;
inline void ListLogMetricsResponse::clear_next_page_token() {
  _impl_.next_page_token_.ClearToEmpty();
}
inline const std::string& ListLogMetricsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.ListLogMetricsResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListLogMetricsResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.next_page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.logging.v2.ListLogMetricsResponse.next_page_token)
}
inline std::string* ListLogMetricsResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:google.logging.v2.ListLogMetricsResponse.next_page_token)
  return _s;
}
inline const std::string& ListLogMetricsResponse::_internal_next_page_token() const {
  return _impl_.next_page_token_.Get();
}
inline void ListLogMetricsResponse::_internal_set_next_page_token(const std::string& value) {
  
  _impl_.next_page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListLogMetricsResponse::_internal_mutable_next_page_token() {
  
  return _impl_.next_page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListLogMetricsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.logging.v2.ListLogMetricsResponse.next_page_token)
  return _impl_.next_page_token_.Release();
}
inline void ListLogMetricsResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  _impl_.next_page_token_.SetAllocated(next_page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.next_page_token_.IsDefault()) {
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.ListLogMetricsResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetLogMetricRequest

// string metric_name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetLogMetricRequest::clear_metric_name() {
  _impl_.metric_name_.ClearToEmpty();
}
inline const std::string& GetLogMetricRequest::metric_name() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.GetLogMetricRequest.metric_name)
  return _internal_metric_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetLogMetricRequest::set_metric_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.metric_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.logging.v2.GetLogMetricRequest.metric_name)
}
inline std::string* GetLogMetricRequest::mutable_metric_name() {
  std::string* _s = _internal_mutable_metric_name();
  // @@protoc_insertion_point(field_mutable:google.logging.v2.GetLogMetricRequest.metric_name)
  return _s;
}
inline const std::string& GetLogMetricRequest::_internal_metric_name() const {
  return _impl_.metric_name_.Get();
}
inline void GetLogMetricRequest::_internal_set_metric_name(const std::string& value) {
  
  _impl_.metric_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetLogMetricRequest::_internal_mutable_metric_name() {
  
  return _impl_.metric_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetLogMetricRequest::release_metric_name() {
  // @@protoc_insertion_point(field_release:google.logging.v2.GetLogMetricRequest.metric_name)
  return _impl_.metric_name_.Release();
}
inline void GetLogMetricRequest::set_allocated_metric_name(std::string* metric_name) {
  if (metric_name != nullptr) {
    
  } else {
    
  }
  _impl_.metric_name_.SetAllocated(metric_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.metric_name_.IsDefault()) {
    _impl_.metric_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.GetLogMetricRequest.metric_name)
}

// -------------------------------------------------------------------

// CreateLogMetricRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreateLogMetricRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& CreateLogMetricRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.CreateLogMetricRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateLogMetricRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.logging.v2.CreateLogMetricRequest.parent)
}
inline std::string* CreateLogMetricRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.logging.v2.CreateLogMetricRequest.parent)
  return _s;
}
inline const std::string& CreateLogMetricRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void CreateLogMetricRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateLogMetricRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateLogMetricRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.logging.v2.CreateLogMetricRequest.parent)
  return _impl_.parent_.Release();
}
inline void CreateLogMetricRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.CreateLogMetricRequest.parent)
}

// .google.logging.v2.LogMetric metric = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateLogMetricRequest::_internal_has_metric() const {
  return this != internal_default_instance() && _impl_.metric_ != nullptr;
}
inline bool CreateLogMetricRequest::has_metric() const {
  return _internal_has_metric();
}
inline void CreateLogMetricRequest::clear_metric() {
  if (GetArenaForAllocation() == nullptr && _impl_.metric_ != nullptr) {
    delete _impl_.metric_;
  }
  _impl_.metric_ = nullptr;
}
inline const ::google::logging::v2::LogMetric& CreateLogMetricRequest::_internal_metric() const {
  const ::google::logging::v2::LogMetric* p = _impl_.metric_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::logging::v2::LogMetric&>(
      ::google::logging::v2::_LogMetric_default_instance_);
}
inline const ::google::logging::v2::LogMetric& CreateLogMetricRequest::metric() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.CreateLogMetricRequest.metric)
  return _internal_metric();
}
inline void CreateLogMetricRequest::unsafe_arena_set_allocated_metric(
    ::google::logging::v2::LogMetric* metric) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metric_);
  }
  _impl_.metric_ = metric;
  if (metric) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.CreateLogMetricRequest.metric)
}
inline ::google::logging::v2::LogMetric* CreateLogMetricRequest::release_metric() {
  
  ::google::logging::v2::LogMetric* temp = _impl_.metric_;
  _impl_.metric_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::logging::v2::LogMetric* CreateLogMetricRequest::unsafe_arena_release_metric() {
  // @@protoc_insertion_point(field_release:google.logging.v2.CreateLogMetricRequest.metric)
  
  ::google::logging::v2::LogMetric* temp = _impl_.metric_;
  _impl_.metric_ = nullptr;
  return temp;
}
inline ::google::logging::v2::LogMetric* CreateLogMetricRequest::_internal_mutable_metric() {
  
  if (_impl_.metric_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::logging::v2::LogMetric>(GetArenaForAllocation());
    _impl_.metric_ = p;
  }
  return _impl_.metric_;
}
inline ::google::logging::v2::LogMetric* CreateLogMetricRequest::mutable_metric() {
  ::google::logging::v2::LogMetric* _msg = _internal_mutable_metric();
  // @@protoc_insertion_point(field_mutable:google.logging.v2.CreateLogMetricRequest.metric)
  return _msg;
}
inline void CreateLogMetricRequest::set_allocated_metric(::google::logging::v2::LogMetric* metric) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.metric_;
  }
  if (metric) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(metric);
    if (message_arena != submessage_arena) {
      metric = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metric, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metric_ = metric;
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.CreateLogMetricRequest.metric)
}

// -------------------------------------------------------------------

// UpdateLogMetricRequest

// string metric_name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void UpdateLogMetricRequest::clear_metric_name() {
  _impl_.metric_name_.ClearToEmpty();
}
inline const std::string& UpdateLogMetricRequest::metric_name() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.UpdateLogMetricRequest.metric_name)
  return _internal_metric_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateLogMetricRequest::set_metric_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.metric_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.logging.v2.UpdateLogMetricRequest.metric_name)
}
inline std::string* UpdateLogMetricRequest::mutable_metric_name() {
  std::string* _s = _internal_mutable_metric_name();
  // @@protoc_insertion_point(field_mutable:google.logging.v2.UpdateLogMetricRequest.metric_name)
  return _s;
}
inline const std::string& UpdateLogMetricRequest::_internal_metric_name() const {
  return _impl_.metric_name_.Get();
}
inline void UpdateLogMetricRequest::_internal_set_metric_name(const std::string& value) {
  
  _impl_.metric_name_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdateLogMetricRequest::_internal_mutable_metric_name() {
  
  return _impl_.metric_name_.Mutable(GetArenaForAllocation());
}
inline std::string* UpdateLogMetricRequest::release_metric_name() {
  // @@protoc_insertion_point(field_release:google.logging.v2.UpdateLogMetricRequest.metric_name)
  return _impl_.metric_name_.Release();
}
inline void UpdateLogMetricRequest::set_allocated_metric_name(std::string* metric_name) {
  if (metric_name != nullptr) {
    
  } else {
    
  }
  _impl_.metric_name_.SetAllocated(metric_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.metric_name_.IsDefault()) {
    _impl_.metric_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.UpdateLogMetricRequest.metric_name)
}

// .google.logging.v2.LogMetric metric = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateLogMetricRequest::_internal_has_metric() const {
  return this != internal_default_instance() && _impl_.metric_ != nullptr;
}
inline bool UpdateLogMetricRequest::has_metric() const {
  return _internal_has_metric();
}
inline void UpdateLogMetricRequest::clear_metric() {
  if (GetArenaForAllocation() == nullptr && _impl_.metric_ != nullptr) {
    delete _impl_.metric_;
  }
  _impl_.metric_ = nullptr;
}
inline const ::google::logging::v2::LogMetric& UpdateLogMetricRequest::_internal_metric() const {
  const ::google::logging::v2::LogMetric* p = _impl_.metric_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::logging::v2::LogMetric&>(
      ::google::logging::v2::_LogMetric_default_instance_);
}
inline const ::google::logging::v2::LogMetric& UpdateLogMetricRequest::metric() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.UpdateLogMetricRequest.metric)
  return _internal_metric();
}
inline void UpdateLogMetricRequest::unsafe_arena_set_allocated_metric(
    ::google::logging::v2::LogMetric* metric) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metric_);
  }
  _impl_.metric_ = metric;
  if (metric) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.UpdateLogMetricRequest.metric)
}
inline ::google::logging::v2::LogMetric* UpdateLogMetricRequest::release_metric() {
  
  ::google::logging::v2::LogMetric* temp = _impl_.metric_;
  _impl_.metric_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::logging::v2::LogMetric* UpdateLogMetricRequest::unsafe_arena_release_metric() {
  // @@protoc_insertion_point(field_release:google.logging.v2.UpdateLogMetricRequest.metric)
  
  ::google::logging::v2::LogMetric* temp = _impl_.metric_;
  _impl_.metric_ = nullptr;
  return temp;
}
inline ::google::logging::v2::LogMetric* UpdateLogMetricRequest::_internal_mutable_metric() {
  
  if (_impl_.metric_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::logging::v2::LogMetric>(GetArenaForAllocation());
    _impl_.metric_ = p;
  }
  return _impl_.metric_;
}
inline ::google::logging::v2::LogMetric* UpdateLogMetricRequest::mutable_metric() {
  ::google::logging::v2::LogMetric* _msg = _internal_mutable_metric();
  // @@protoc_insertion_point(field_mutable:google.logging.v2.UpdateLogMetricRequest.metric)
  return _msg;
}
inline void UpdateLogMetricRequest::set_allocated_metric(::google::logging::v2::LogMetric* metric) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.metric_;
  }
  if (metric) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(metric);
    if (message_arena != submessage_arena) {
      metric = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metric, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metric_ = metric;
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.UpdateLogMetricRequest.metric)
}

// -------------------------------------------------------------------

// DeleteLogMetricRequest

// string metric_name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteLogMetricRequest::clear_metric_name() {
  _impl_.metric_name_.ClearToEmpty();
}
inline const std::string& DeleteLogMetricRequest::metric_name() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.DeleteLogMetricRequest.metric_name)
  return _internal_metric_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteLogMetricRequest::set_metric_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.metric_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.logging.v2.DeleteLogMetricRequest.metric_name)
}
inline std::string* DeleteLogMetricRequest::mutable_metric_name() {
  std::string* _s = _internal_mutable_metric_name();
  // @@protoc_insertion_point(field_mutable:google.logging.v2.DeleteLogMetricRequest.metric_name)
  return _s;
}
inline const std::string& DeleteLogMetricRequest::_internal_metric_name() const {
  return _impl_.metric_name_.Get();
}
inline void DeleteLogMetricRequest::_internal_set_metric_name(const std::string& value) {
  
  _impl_.metric_name_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteLogMetricRequest::_internal_mutable_metric_name() {
  
  return _impl_.metric_name_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteLogMetricRequest::release_metric_name() {
  // @@protoc_insertion_point(field_release:google.logging.v2.DeleteLogMetricRequest.metric_name)
  return _impl_.metric_name_.Release();
}
inline void DeleteLogMetricRequest::set_allocated_metric_name(std::string* metric_name) {
  if (metric_name != nullptr) {
    
  } else {
    
  }
  _impl_.metric_name_.SetAllocated(metric_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.metric_name_.IsDefault()) {
    _impl_.metric_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.DeleteLogMetricRequest.metric_name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace logging
}  // namespace google

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::google::logging::v2::LogMetric_ApiVersion> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::logging::v2::LogMetric_ApiVersion>() {
  return ::google::logging::v2::LogMetric_ApiVersion_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2flogging_2fv2_2flogging_5fmetrics_2eproto
