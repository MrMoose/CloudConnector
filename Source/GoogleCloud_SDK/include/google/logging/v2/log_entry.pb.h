// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/logging/v2/log_entry.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2flogging_2fv2_2flog_5fentry_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2flogging_2fv2_2flog_5fentry_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/field_behavior.pb.h"
#include "google/api/monitored_resource.pb.h"
#include "google/api/resource.pb.h"
#include "google/logging/type/http_request.pb.h"
#include "google/logging/type/log_severity.pb.h"
#include <google/protobuf/any.pb.h>
#include <google/protobuf/struct.pb.h>
#include <google/protobuf/timestamp.pb.h>
#include "google/rpc/status.pb.h"
#include "google/api/annotations.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2flogging_2fv2_2flog_5fentry_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2flogging_2fv2_2flog_5fentry_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2flogging_2fv2_2flog_5fentry_2eproto;
namespace google {
namespace logging {
namespace v2 {
class LogEntry;
class LogEntryDefaultTypeInternal;
extern LogEntryDefaultTypeInternal _LogEntry_default_instance_;
class LogEntryOperation;
class LogEntryOperationDefaultTypeInternal;
extern LogEntryOperationDefaultTypeInternal _LogEntryOperation_default_instance_;
class LogEntrySourceLocation;
class LogEntrySourceLocationDefaultTypeInternal;
extern LogEntrySourceLocationDefaultTypeInternal _LogEntrySourceLocation_default_instance_;
class LogEntry_LabelsEntry_DoNotUse;
class LogEntry_LabelsEntry_DoNotUseDefaultTypeInternal;
extern LogEntry_LabelsEntry_DoNotUseDefaultTypeInternal _LogEntry_LabelsEntry_DoNotUse_default_instance_;
}  // namespace v2
}  // namespace logging
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::logging::v2::LogEntry* Arena::CreateMaybeMessage<::google::logging::v2::LogEntry>(Arena*);
template<> ::google::logging::v2::LogEntryOperation* Arena::CreateMaybeMessage<::google::logging::v2::LogEntryOperation>(Arena*);
template<> ::google::logging::v2::LogEntrySourceLocation* Arena::CreateMaybeMessage<::google::logging::v2::LogEntrySourceLocation>(Arena*);
template<> ::google::logging::v2::LogEntry_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage<::google::logging::v2::LogEntry_LabelsEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace logging {
namespace v2 {

// ===================================================================

class LogEntry_LabelsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<LogEntry_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<LogEntry_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  LogEntry_LabelsEntry_DoNotUse();
  explicit LogEntry_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const LogEntry_LabelsEntry_DoNotUse& other);
  static const LogEntry_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const LogEntry_LabelsEntry_DoNotUse*>(&_LogEntry_LabelsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.logging.v2.LogEntry.LabelsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.logging.v2.LogEntry.LabelsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2flogging_2fv2_2flog_5fentry_2eproto);
    return ::descriptor_table_google_2flogging_2fv2_2flog_5fentry_2eproto.file_level_metadata[0];
  }

  public:
};

// -------------------------------------------------------------------

class LogEntry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.logging.v2.LogEntry) */ {
 public:
  inline LogEntry() : LogEntry(nullptr) {}
  virtual ~LogEntry();

  LogEntry(const LogEntry& from);
  LogEntry(LogEntry&& from) noexcept
    : LogEntry() {
    *this = ::std::move(from);
  }

  inline LogEntry& operator=(const LogEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogEntry& operator=(LogEntry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogEntry& default_instance();

  enum PayloadCase {
    kProtoPayload = 2,
    kTextPayload = 3,
    kJsonPayload = 6,
    PAYLOAD_NOT_SET = 0,
  };

  static inline const LogEntry* internal_default_instance() {
    return reinterpret_cast<const LogEntry*>(
               &_LogEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LogEntry& a, LogEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(LogEntry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogEntry* New() const final {
    return CreateMaybeMessage<LogEntry>(nullptr);
  }

  LogEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogEntry& from);
  void MergeFrom(const LogEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.logging.v2.LogEntry";
  }
  protected:
  explicit LogEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2flogging_2fv2_2flog_5fentry_2eproto);
    return ::descriptor_table_google_2flogging_2fv2_2flog_5fentry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 11,
    kInsertIdFieldNumber = 4,
    kLogNameFieldNumber = 12,
    kTraceFieldNumber = 22,
    kSpanIdFieldNumber = 27,
    kHttpRequestFieldNumber = 7,
    kResourceFieldNumber = 8,
    kTimestampFieldNumber = 9,
    kOperationFieldNumber = 15,
    kSourceLocationFieldNumber = 23,
    kReceiveTimestampFieldNumber = 24,
    kSeverityFieldNumber = 10,
    kTraceSampledFieldNumber = 30,
    kProtoPayloadFieldNumber = 2,
    kTextPayloadFieldNumber = 3,
    kJsonPayloadFieldNumber = 6,
  };
  // map<string, string> labels = 11 [(.google.api.field_behavior) = OPTIONAL];
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_labels();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_labels();

  // string insert_id = 4 [(.google.api.field_behavior) = OPTIONAL];
  void clear_insert_id();
  const std::string& insert_id() const;
  void set_insert_id(const std::string& value);
  void set_insert_id(std::string&& value);
  void set_insert_id(const char* value);
  void set_insert_id(const char* value, size_t size);
  std::string* mutable_insert_id();
  std::string* release_insert_id();
  void set_allocated_insert_id(std::string* insert_id);
  private:
  const std::string& _internal_insert_id() const;
  void _internal_set_insert_id(const std::string& value);
  std::string* _internal_mutable_insert_id();
  public:

  // string log_name = 12 [(.google.api.field_behavior) = REQUIRED];
  void clear_log_name();
  const std::string& log_name() const;
  void set_log_name(const std::string& value);
  void set_log_name(std::string&& value);
  void set_log_name(const char* value);
  void set_log_name(const char* value, size_t size);
  std::string* mutable_log_name();
  std::string* release_log_name();
  void set_allocated_log_name(std::string* log_name);
  private:
  const std::string& _internal_log_name() const;
  void _internal_set_log_name(const std::string& value);
  std::string* _internal_mutable_log_name();
  public:

  // string trace = 22 [(.google.api.field_behavior) = OPTIONAL];
  void clear_trace();
  const std::string& trace() const;
  void set_trace(const std::string& value);
  void set_trace(std::string&& value);
  void set_trace(const char* value);
  void set_trace(const char* value, size_t size);
  std::string* mutable_trace();
  std::string* release_trace();
  void set_allocated_trace(std::string* trace);
  private:
  const std::string& _internal_trace() const;
  void _internal_set_trace(const std::string& value);
  std::string* _internal_mutable_trace();
  public:

  // string span_id = 27 [(.google.api.field_behavior) = OPTIONAL];
  void clear_span_id();
  const std::string& span_id() const;
  void set_span_id(const std::string& value);
  void set_span_id(std::string&& value);
  void set_span_id(const char* value);
  void set_span_id(const char* value, size_t size);
  std::string* mutable_span_id();
  std::string* release_span_id();
  void set_allocated_span_id(std::string* span_id);
  private:
  const std::string& _internal_span_id() const;
  void _internal_set_span_id(const std::string& value);
  std::string* _internal_mutable_span_id();
  public:

  // .google.logging.type.HttpRequest http_request = 7 [(.google.api.field_behavior) = OPTIONAL];
  bool has_http_request() const;
  private:
  bool _internal_has_http_request() const;
  public:
  void clear_http_request();
  const ::google::logging::type::HttpRequest& http_request() const;
  ::google::logging::type::HttpRequest* release_http_request();
  ::google::logging::type::HttpRequest* mutable_http_request();
  void set_allocated_http_request(::google::logging::type::HttpRequest* http_request);
  private:
  const ::google::logging::type::HttpRequest& _internal_http_request() const;
  ::google::logging::type::HttpRequest* _internal_mutable_http_request();
  public:
  void unsafe_arena_set_allocated_http_request(
      ::google::logging::type::HttpRequest* http_request);
  ::google::logging::type::HttpRequest* unsafe_arena_release_http_request();

  // .google.api.MonitoredResource resource = 8 [(.google.api.field_behavior) = REQUIRED];
  bool has_resource() const;
  private:
  bool _internal_has_resource() const;
  public:
  void clear_resource();
  const ::google::api::MonitoredResource& resource() const;
  ::google::api::MonitoredResource* release_resource();
  ::google::api::MonitoredResource* mutable_resource();
  void set_allocated_resource(::google::api::MonitoredResource* resource);
  private:
  const ::google::api::MonitoredResource& _internal_resource() const;
  ::google::api::MonitoredResource* _internal_mutable_resource();
  public:
  void unsafe_arena_set_allocated_resource(
      ::google::api::MonitoredResource* resource);
  ::google::api::MonitoredResource* unsafe_arena_release_resource();

  // .google.protobuf.Timestamp timestamp = 9 [(.google.api.field_behavior) = OPTIONAL];
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();

  // .google.logging.v2.LogEntryOperation operation = 15 [(.google.api.field_behavior) = OPTIONAL];
  bool has_operation() const;
  private:
  bool _internal_has_operation() const;
  public:
  void clear_operation();
  const ::google::logging::v2::LogEntryOperation& operation() const;
  ::google::logging::v2::LogEntryOperation* release_operation();
  ::google::logging::v2::LogEntryOperation* mutable_operation();
  void set_allocated_operation(::google::logging::v2::LogEntryOperation* operation);
  private:
  const ::google::logging::v2::LogEntryOperation& _internal_operation() const;
  ::google::logging::v2::LogEntryOperation* _internal_mutable_operation();
  public:
  void unsafe_arena_set_allocated_operation(
      ::google::logging::v2::LogEntryOperation* operation);
  ::google::logging::v2::LogEntryOperation* unsafe_arena_release_operation();

  // .google.logging.v2.LogEntrySourceLocation source_location = 23 [(.google.api.field_behavior) = OPTIONAL];
  bool has_source_location() const;
  private:
  bool _internal_has_source_location() const;
  public:
  void clear_source_location();
  const ::google::logging::v2::LogEntrySourceLocation& source_location() const;
  ::google::logging::v2::LogEntrySourceLocation* release_source_location();
  ::google::logging::v2::LogEntrySourceLocation* mutable_source_location();
  void set_allocated_source_location(::google::logging::v2::LogEntrySourceLocation* source_location);
  private:
  const ::google::logging::v2::LogEntrySourceLocation& _internal_source_location() const;
  ::google::logging::v2::LogEntrySourceLocation* _internal_mutable_source_location();
  public:
  void unsafe_arena_set_allocated_source_location(
      ::google::logging::v2::LogEntrySourceLocation* source_location);
  ::google::logging::v2::LogEntrySourceLocation* unsafe_arena_release_source_location();

  // .google.protobuf.Timestamp receive_timestamp = 24 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_receive_timestamp() const;
  private:
  bool _internal_has_receive_timestamp() const;
  public:
  void clear_receive_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& receive_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_receive_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_receive_timestamp();
  void set_allocated_receive_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* receive_timestamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_receive_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_receive_timestamp();
  public:
  void unsafe_arena_set_allocated_receive_timestamp(
      PROTOBUF_NAMESPACE_ID::Timestamp* receive_timestamp);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_receive_timestamp();

  // .google.logging.type.LogSeverity severity = 10 [(.google.api.field_behavior) = OPTIONAL];
  void clear_severity();
  ::google::logging::type::LogSeverity severity() const;
  void set_severity(::google::logging::type::LogSeverity value);
  private:
  ::google::logging::type::LogSeverity _internal_severity() const;
  void _internal_set_severity(::google::logging::type::LogSeverity value);
  public:

  // bool trace_sampled = 30 [(.google.api.field_behavior) = OPTIONAL];
  void clear_trace_sampled();
  bool trace_sampled() const;
  void set_trace_sampled(bool value);
  private:
  bool _internal_trace_sampled() const;
  void _internal_set_trace_sampled(bool value);
  public:

  // .google.protobuf.Any proto_payload = 2;
  bool has_proto_payload() const;
  private:
  bool _internal_has_proto_payload() const;
  public:
  void clear_proto_payload();
  const PROTOBUF_NAMESPACE_ID::Any& proto_payload() const;
  PROTOBUF_NAMESPACE_ID::Any* release_proto_payload();
  PROTOBUF_NAMESPACE_ID::Any* mutable_proto_payload();
  void set_allocated_proto_payload(PROTOBUF_NAMESPACE_ID::Any* proto_payload);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_proto_payload() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_proto_payload();
  public:
  void unsafe_arena_set_allocated_proto_payload(
      PROTOBUF_NAMESPACE_ID::Any* proto_payload);
  PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_proto_payload();

  // string text_payload = 3;
  private:
  bool _internal_has_text_payload() const;
  public:
  void clear_text_payload();
  const std::string& text_payload() const;
  void set_text_payload(const std::string& value);
  void set_text_payload(std::string&& value);
  void set_text_payload(const char* value);
  void set_text_payload(const char* value, size_t size);
  std::string* mutable_text_payload();
  std::string* release_text_payload();
  void set_allocated_text_payload(std::string* text_payload);
  private:
  const std::string& _internal_text_payload() const;
  void _internal_set_text_payload(const std::string& value);
  std::string* _internal_mutable_text_payload();
  public:

  // .google.protobuf.Struct json_payload = 6;
  bool has_json_payload() const;
  private:
  bool _internal_has_json_payload() const;
  public:
  void clear_json_payload();
  const PROTOBUF_NAMESPACE_ID::Struct& json_payload() const;
  PROTOBUF_NAMESPACE_ID::Struct* release_json_payload();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_json_payload();
  void set_allocated_json_payload(PROTOBUF_NAMESPACE_ID::Struct* json_payload);
  private:
  const PROTOBUF_NAMESPACE_ID::Struct& _internal_json_payload() const;
  PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_json_payload();
  public:
  void unsafe_arena_set_allocated_json_payload(
      PROTOBUF_NAMESPACE_ID::Struct* json_payload);
  PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_json_payload();

  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:google.logging.v2.LogEntry)
 private:
  class _Internal;
  void set_has_proto_payload();
  void set_has_text_payload();
  void set_has_json_payload();

  inline bool has_payload() const;
  inline void clear_has_payload();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      LogEntry_LabelsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> labels_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr insert_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr log_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trace_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr span_id_;
  ::google::logging::type::HttpRequest* http_request_;
  ::google::api::MonitoredResource* resource_;
  PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
  ::google::logging::v2::LogEntryOperation* operation_;
  ::google::logging::v2::LogEntrySourceLocation* source_location_;
  PROTOBUF_NAMESPACE_ID::Timestamp* receive_timestamp_;
  int severity_;
  bool trace_sampled_;
  union PayloadUnion {
    PayloadUnion() {}
    PROTOBUF_NAMESPACE_ID::Any* proto_payload_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_payload_;
    PROTOBUF_NAMESPACE_ID::Struct* json_payload_;
  } payload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_google_2flogging_2fv2_2flog_5fentry_2eproto;
};
// -------------------------------------------------------------------

class LogEntryOperation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.logging.v2.LogEntryOperation) */ {
 public:
  inline LogEntryOperation() : LogEntryOperation(nullptr) {}
  virtual ~LogEntryOperation();

  LogEntryOperation(const LogEntryOperation& from);
  LogEntryOperation(LogEntryOperation&& from) noexcept
    : LogEntryOperation() {
    *this = ::std::move(from);
  }

  inline LogEntryOperation& operator=(const LogEntryOperation& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogEntryOperation& operator=(LogEntryOperation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogEntryOperation& default_instance();

  static inline const LogEntryOperation* internal_default_instance() {
    return reinterpret_cast<const LogEntryOperation*>(
               &_LogEntryOperation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LogEntryOperation& a, LogEntryOperation& b) {
    a.Swap(&b);
  }
  inline void Swap(LogEntryOperation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogEntryOperation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogEntryOperation* New() const final {
    return CreateMaybeMessage<LogEntryOperation>(nullptr);
  }

  LogEntryOperation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogEntryOperation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogEntryOperation& from);
  void MergeFrom(const LogEntryOperation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogEntryOperation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.logging.v2.LogEntryOperation";
  }
  protected:
  explicit LogEntryOperation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2flogging_2fv2_2flog_5fentry_2eproto);
    return ::descriptor_table_google_2flogging_2fv2_2flog_5fentry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kProducerFieldNumber = 2,
    kFirstFieldNumber = 3,
    kLastFieldNumber = 4,
  };
  // string id = 1 [(.google.api.field_behavior) = OPTIONAL];
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string producer = 2 [(.google.api.field_behavior) = OPTIONAL];
  void clear_producer();
  const std::string& producer() const;
  void set_producer(const std::string& value);
  void set_producer(std::string&& value);
  void set_producer(const char* value);
  void set_producer(const char* value, size_t size);
  std::string* mutable_producer();
  std::string* release_producer();
  void set_allocated_producer(std::string* producer);
  private:
  const std::string& _internal_producer() const;
  void _internal_set_producer(const std::string& value);
  std::string* _internal_mutable_producer();
  public:

  // bool first = 3 [(.google.api.field_behavior) = OPTIONAL];
  void clear_first();
  bool first() const;
  void set_first(bool value);
  private:
  bool _internal_first() const;
  void _internal_set_first(bool value);
  public:

  // bool last = 4 [(.google.api.field_behavior) = OPTIONAL];
  void clear_last();
  bool last() const;
  void set_last(bool value);
  private:
  bool _internal_last() const;
  void _internal_set_last(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.logging.v2.LogEntryOperation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr producer_;
  bool first_;
  bool last_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2flogging_2fv2_2flog_5fentry_2eproto;
};
// -------------------------------------------------------------------

class LogEntrySourceLocation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.logging.v2.LogEntrySourceLocation) */ {
 public:
  inline LogEntrySourceLocation() : LogEntrySourceLocation(nullptr) {}
  virtual ~LogEntrySourceLocation();

  LogEntrySourceLocation(const LogEntrySourceLocation& from);
  LogEntrySourceLocation(LogEntrySourceLocation&& from) noexcept
    : LogEntrySourceLocation() {
    *this = ::std::move(from);
  }

  inline LogEntrySourceLocation& operator=(const LogEntrySourceLocation& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogEntrySourceLocation& operator=(LogEntrySourceLocation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogEntrySourceLocation& default_instance();

  static inline const LogEntrySourceLocation* internal_default_instance() {
    return reinterpret_cast<const LogEntrySourceLocation*>(
               &_LogEntrySourceLocation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LogEntrySourceLocation& a, LogEntrySourceLocation& b) {
    a.Swap(&b);
  }
  inline void Swap(LogEntrySourceLocation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogEntrySourceLocation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogEntrySourceLocation* New() const final {
    return CreateMaybeMessage<LogEntrySourceLocation>(nullptr);
  }

  LogEntrySourceLocation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogEntrySourceLocation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogEntrySourceLocation& from);
  void MergeFrom(const LogEntrySourceLocation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogEntrySourceLocation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.logging.v2.LogEntrySourceLocation";
  }
  protected:
  explicit LogEntrySourceLocation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2flogging_2fv2_2flog_5fentry_2eproto);
    return ::descriptor_table_google_2flogging_2fv2_2flog_5fentry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileFieldNumber = 1,
    kFunctionFieldNumber = 3,
    kLineFieldNumber = 2,
  };
  // string file = 1 [(.google.api.field_behavior) = OPTIONAL];
  void clear_file();
  const std::string& file() const;
  void set_file(const std::string& value);
  void set_file(std::string&& value);
  void set_file(const char* value);
  void set_file(const char* value, size_t size);
  std::string* mutable_file();
  std::string* release_file();
  void set_allocated_file(std::string* file);
  private:
  const std::string& _internal_file() const;
  void _internal_set_file(const std::string& value);
  std::string* _internal_mutable_file();
  public:

  // string function = 3 [(.google.api.field_behavior) = OPTIONAL];
  void clear_function();
  const std::string& function() const;
  void set_function(const std::string& value);
  void set_function(std::string&& value);
  void set_function(const char* value);
  void set_function(const char* value, size_t size);
  std::string* mutable_function();
  std::string* release_function();
  void set_allocated_function(std::string* function);
  private:
  const std::string& _internal_function() const;
  void _internal_set_function(const std::string& value);
  std::string* _internal_mutable_function();
  public:

  // int64 line = 2 [(.google.api.field_behavior) = OPTIONAL];
  void clear_line();
  ::PROTOBUF_NAMESPACE_ID::int64 line() const;
  void set_line(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_line() const;
  void _internal_set_line(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:google.logging.v2.LogEntrySourceLocation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr function_;
  ::PROTOBUF_NAMESPACE_ID::int64 line_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2flogging_2fv2_2flog_5fentry_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// LogEntry

// string log_name = 12 [(.google.api.field_behavior) = REQUIRED];
inline void LogEntry::clear_log_name() {
  log_name_.ClearToEmpty();
}
inline const std::string& LogEntry::log_name() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogEntry.log_name)
  return _internal_log_name();
}
inline void LogEntry::set_log_name(const std::string& value) {
  _internal_set_log_name(value);
  // @@protoc_insertion_point(field_set:google.logging.v2.LogEntry.log_name)
}
inline std::string* LogEntry::mutable_log_name() {
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogEntry.log_name)
  return _internal_mutable_log_name();
}
inline const std::string& LogEntry::_internal_log_name() const {
  return log_name_.Get();
}
inline void LogEntry::_internal_set_log_name(const std::string& value) {
  
  log_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LogEntry::set_log_name(std::string&& value) {
  
  log_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.logging.v2.LogEntry.log_name)
}
inline void LogEntry::set_log_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  log_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.LogEntry.log_name)
}
inline void LogEntry::set_log_name(const char* value,
    size_t size) {
  
  log_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.LogEntry.log_name)
}
inline std::string* LogEntry::_internal_mutable_log_name() {
  
  return log_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LogEntry::release_log_name() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogEntry.log_name)
  return log_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogEntry::set_allocated_log_name(std::string* log_name) {
  if (log_name != nullptr) {
    
  } else {
    
  }
  log_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), log_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogEntry.log_name)
}

// .google.api.MonitoredResource resource = 8 [(.google.api.field_behavior) = REQUIRED];
inline bool LogEntry::_internal_has_resource() const {
  return this != internal_default_instance() && resource_ != nullptr;
}
inline bool LogEntry::has_resource() const {
  return _internal_has_resource();
}
inline const ::google::api::MonitoredResource& LogEntry::_internal_resource() const {
  const ::google::api::MonitoredResource* p = resource_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::api::MonitoredResource&>(
      ::google::api::_MonitoredResource_default_instance_);
}
inline const ::google::api::MonitoredResource& LogEntry::resource() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogEntry.resource)
  return _internal_resource();
}
inline void LogEntry::unsafe_arena_set_allocated_resource(
    ::google::api::MonitoredResource* resource) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(resource_);
  }
  resource_ = resource;
  if (resource) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.LogEntry.resource)
}
inline ::google::api::MonitoredResource* LogEntry::release_resource() {
  
  ::google::api::MonitoredResource* temp = resource_;
  resource_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::api::MonitoredResource* LogEntry::unsafe_arena_release_resource() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogEntry.resource)
  
  ::google::api::MonitoredResource* temp = resource_;
  resource_ = nullptr;
  return temp;
}
inline ::google::api::MonitoredResource* LogEntry::_internal_mutable_resource() {
  
  if (resource_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::api::MonitoredResource>(GetArena());
    resource_ = p;
  }
  return resource_;
}
inline ::google::api::MonitoredResource* LogEntry::mutable_resource() {
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogEntry.resource)
  return _internal_mutable_resource();
}
inline void LogEntry::set_allocated_resource(::google::api::MonitoredResource* resource) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(resource_);
  }
  if (resource) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(resource)->GetArena();
    if (message_arena != submessage_arena) {
      resource = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resource, submessage_arena);
    }
    
  } else {
    
  }
  resource_ = resource;
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogEntry.resource)
}

// .google.protobuf.Any proto_payload = 2;
inline bool LogEntry::_internal_has_proto_payload() const {
  return payload_case() == kProtoPayload;
}
inline bool LogEntry::has_proto_payload() const {
  return _internal_has_proto_payload();
}
inline void LogEntry::set_has_proto_payload() {
  _oneof_case_[0] = kProtoPayload;
}
inline PROTOBUF_NAMESPACE_ID::Any* LogEntry::release_proto_payload() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogEntry.proto_payload)
  if (_internal_has_proto_payload()) {
    clear_has_payload();
      PROTOBUF_NAMESPACE_ID::Any* temp = payload_.proto_payload_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.proto_payload_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const PROTOBUF_NAMESPACE_ID::Any& LogEntry::_internal_proto_payload() const {
  return _internal_has_proto_payload()
      ? *payload_.proto_payload_
      : reinterpret_cast< PROTOBUF_NAMESPACE_ID::Any&>(PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& LogEntry::proto_payload() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogEntry.proto_payload)
  return _internal_proto_payload();
}
inline PROTOBUF_NAMESPACE_ID::Any* LogEntry::unsafe_arena_release_proto_payload() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.LogEntry.proto_payload)
  if (_internal_has_proto_payload()) {
    clear_has_payload();
    PROTOBUF_NAMESPACE_ID::Any* temp = payload_.proto_payload_;
    payload_.proto_payload_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void LogEntry::unsafe_arena_set_allocated_proto_payload(PROTOBUF_NAMESPACE_ID::Any* proto_payload) {
  clear_payload();
  if (proto_payload) {
    set_has_proto_payload();
    payload_.proto_payload_ = proto_payload;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.LogEntry.proto_payload)
}
inline PROTOBUF_NAMESPACE_ID::Any* LogEntry::_internal_mutable_proto_payload() {
  if (!_internal_has_proto_payload()) {
    clear_payload();
    set_has_proto_payload();
    payload_.proto_payload_ = CreateMaybeMessage< PROTOBUF_NAMESPACE_ID::Any >(GetArena());
  }
  return payload_.proto_payload_;
}
inline PROTOBUF_NAMESPACE_ID::Any* LogEntry::mutable_proto_payload() {
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogEntry.proto_payload)
  return _internal_mutable_proto_payload();
}

// string text_payload = 3;
inline bool LogEntry::_internal_has_text_payload() const {
  return payload_case() == kTextPayload;
}
inline void LogEntry::set_has_text_payload() {
  _oneof_case_[0] = kTextPayload;
}
inline void LogEntry::clear_text_payload() {
  if (_internal_has_text_payload()) {
    payload_.text_payload_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_payload();
  }
}
inline const std::string& LogEntry::text_payload() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogEntry.text_payload)
  return _internal_text_payload();
}
inline void LogEntry::set_text_payload(const std::string& value) {
  _internal_set_text_payload(value);
  // @@protoc_insertion_point(field_set:google.logging.v2.LogEntry.text_payload)
}
inline std::string* LogEntry::mutable_text_payload() {
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogEntry.text_payload)
  return _internal_mutable_text_payload();
}
inline const std::string& LogEntry::_internal_text_payload() const {
  if (_internal_has_text_payload()) {
    return payload_.text_payload_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void LogEntry::_internal_set_text_payload(const std::string& value) {
  if (!_internal_has_text_payload()) {
    clear_payload();
    set_has_text_payload();
    payload_.text_payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  payload_.text_payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LogEntry::set_text_payload(std::string&& value) {
  // @@protoc_insertion_point(field_set:google.logging.v2.LogEntry.text_payload)
  if (!_internal_has_text_payload()) {
    clear_payload();
    set_has_text_payload();
    payload_.text_payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  payload_.text_payload_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.logging.v2.LogEntry.text_payload)
}
inline void LogEntry::set_text_payload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_text_payload()) {
    clear_payload();
    set_has_text_payload();
    payload_.text_payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  payload_.text_payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.LogEntry.text_payload)
}
inline void LogEntry::set_text_payload(const char* value,
                             size_t size) {
  if (!_internal_has_text_payload()) {
    clear_payload();
    set_has_text_payload();
    payload_.text_payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  payload_.text_payload_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.LogEntry.text_payload)
}
inline std::string* LogEntry::_internal_mutable_text_payload() {
  if (!_internal_has_text_payload()) {
    clear_payload();
    set_has_text_payload();
    payload_.text_payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return payload_.text_payload_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LogEntry::release_text_payload() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogEntry.text_payload)
  if (_internal_has_text_payload()) {
    clear_has_payload();
    return payload_.text_payload_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void LogEntry::set_allocated_text_payload(std::string* text_payload) {
  if (has_payload()) {
    clear_payload();
  }
  if (text_payload != nullptr) {
    set_has_text_payload();
    payload_.text_payload_.UnsafeSetDefault(text_payload);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(text_payload);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogEntry.text_payload)
}

// .google.protobuf.Struct json_payload = 6;
inline bool LogEntry::_internal_has_json_payload() const {
  return payload_case() == kJsonPayload;
}
inline bool LogEntry::has_json_payload() const {
  return _internal_has_json_payload();
}
inline void LogEntry::set_has_json_payload() {
  _oneof_case_[0] = kJsonPayload;
}
inline PROTOBUF_NAMESPACE_ID::Struct* LogEntry::release_json_payload() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogEntry.json_payload)
  if (_internal_has_json_payload()) {
    clear_has_payload();
      PROTOBUF_NAMESPACE_ID::Struct* temp = payload_.json_payload_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.json_payload_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const PROTOBUF_NAMESPACE_ID::Struct& LogEntry::_internal_json_payload() const {
  return _internal_has_json_payload()
      ? *payload_.json_payload_
      : reinterpret_cast< PROTOBUF_NAMESPACE_ID::Struct&>(PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Struct& LogEntry::json_payload() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogEntry.json_payload)
  return _internal_json_payload();
}
inline PROTOBUF_NAMESPACE_ID::Struct* LogEntry::unsafe_arena_release_json_payload() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.LogEntry.json_payload)
  if (_internal_has_json_payload()) {
    clear_has_payload();
    PROTOBUF_NAMESPACE_ID::Struct* temp = payload_.json_payload_;
    payload_.json_payload_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void LogEntry::unsafe_arena_set_allocated_json_payload(PROTOBUF_NAMESPACE_ID::Struct* json_payload) {
  clear_payload();
  if (json_payload) {
    set_has_json_payload();
    payload_.json_payload_ = json_payload;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.LogEntry.json_payload)
}
inline PROTOBUF_NAMESPACE_ID::Struct* LogEntry::_internal_mutable_json_payload() {
  if (!_internal_has_json_payload()) {
    clear_payload();
    set_has_json_payload();
    payload_.json_payload_ = CreateMaybeMessage< PROTOBUF_NAMESPACE_ID::Struct >(GetArena());
  }
  return payload_.json_payload_;
}
inline PROTOBUF_NAMESPACE_ID::Struct* LogEntry::mutable_json_payload() {
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogEntry.json_payload)
  return _internal_mutable_json_payload();
}

// .google.protobuf.Timestamp timestamp = 9 [(.google.api.field_behavior) = OPTIONAL];
inline bool LogEntry::_internal_has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != nullptr;
}
inline bool LogEntry::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& LogEntry::_internal_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& LogEntry::timestamp() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogEntry.timestamp)
  return _internal_timestamp();
}
inline void LogEntry::unsafe_arena_set_allocated_timestamp(
    PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.LogEntry.timestamp)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* LogEntry::release_timestamp() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* LogEntry::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogEntry.timestamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* LogEntry::_internal_mutable_timestamp() {
  
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    timestamp_ = p;
  }
  return timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* LogEntry::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogEntry.timestamp)
  return _internal_mutable_timestamp();
}
inline void LogEntry::set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogEntry.timestamp)
}

// .google.protobuf.Timestamp receive_timestamp = 24 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool LogEntry::_internal_has_receive_timestamp() const {
  return this != internal_default_instance() && receive_timestamp_ != nullptr;
}
inline bool LogEntry::has_receive_timestamp() const {
  return _internal_has_receive_timestamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& LogEntry::_internal_receive_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = receive_timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& LogEntry::receive_timestamp() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogEntry.receive_timestamp)
  return _internal_receive_timestamp();
}
inline void LogEntry::unsafe_arena_set_allocated_receive_timestamp(
    PROTOBUF_NAMESPACE_ID::Timestamp* receive_timestamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(receive_timestamp_);
  }
  receive_timestamp_ = receive_timestamp;
  if (receive_timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.LogEntry.receive_timestamp)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* LogEntry::release_receive_timestamp() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = receive_timestamp_;
  receive_timestamp_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* LogEntry::unsafe_arena_release_receive_timestamp() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogEntry.receive_timestamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = receive_timestamp_;
  receive_timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* LogEntry::_internal_mutable_receive_timestamp() {
  
  if (receive_timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    receive_timestamp_ = p;
  }
  return receive_timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* LogEntry::mutable_receive_timestamp() {
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogEntry.receive_timestamp)
  return _internal_mutable_receive_timestamp();
}
inline void LogEntry::set_allocated_receive_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* receive_timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(receive_timestamp_);
  }
  if (receive_timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(receive_timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      receive_timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, receive_timestamp, submessage_arena);
    }
    
  } else {
    
  }
  receive_timestamp_ = receive_timestamp;
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogEntry.receive_timestamp)
}

// .google.logging.type.LogSeverity severity = 10 [(.google.api.field_behavior) = OPTIONAL];
inline void LogEntry::clear_severity() {
  severity_ = 0;
}
inline ::google::logging::type::LogSeverity LogEntry::_internal_severity() const {
  return static_cast< ::google::logging::type::LogSeverity >(severity_);
}
inline ::google::logging::type::LogSeverity LogEntry::severity() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogEntry.severity)
  return _internal_severity();
}
inline void LogEntry::_internal_set_severity(::google::logging::type::LogSeverity value) {
  
  severity_ = value;
}
inline void LogEntry::set_severity(::google::logging::type::LogSeverity value) {
  _internal_set_severity(value);
  // @@protoc_insertion_point(field_set:google.logging.v2.LogEntry.severity)
}

// string insert_id = 4 [(.google.api.field_behavior) = OPTIONAL];
inline void LogEntry::clear_insert_id() {
  insert_id_.ClearToEmpty();
}
inline const std::string& LogEntry::insert_id() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogEntry.insert_id)
  return _internal_insert_id();
}
inline void LogEntry::set_insert_id(const std::string& value) {
  _internal_set_insert_id(value);
  // @@protoc_insertion_point(field_set:google.logging.v2.LogEntry.insert_id)
}
inline std::string* LogEntry::mutable_insert_id() {
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogEntry.insert_id)
  return _internal_mutable_insert_id();
}
inline const std::string& LogEntry::_internal_insert_id() const {
  return insert_id_.Get();
}
inline void LogEntry::_internal_set_insert_id(const std::string& value) {
  
  insert_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LogEntry::set_insert_id(std::string&& value) {
  
  insert_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.logging.v2.LogEntry.insert_id)
}
inline void LogEntry::set_insert_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  insert_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.LogEntry.insert_id)
}
inline void LogEntry::set_insert_id(const char* value,
    size_t size) {
  
  insert_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.LogEntry.insert_id)
}
inline std::string* LogEntry::_internal_mutable_insert_id() {
  
  return insert_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LogEntry::release_insert_id() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogEntry.insert_id)
  return insert_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogEntry::set_allocated_insert_id(std::string* insert_id) {
  if (insert_id != nullptr) {
    
  } else {
    
  }
  insert_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), insert_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogEntry.insert_id)
}

// .google.logging.type.HttpRequest http_request = 7 [(.google.api.field_behavior) = OPTIONAL];
inline bool LogEntry::_internal_has_http_request() const {
  return this != internal_default_instance() && http_request_ != nullptr;
}
inline bool LogEntry::has_http_request() const {
  return _internal_has_http_request();
}
inline const ::google::logging::type::HttpRequest& LogEntry::_internal_http_request() const {
  const ::google::logging::type::HttpRequest* p = http_request_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::logging::type::HttpRequest&>(
      ::google::logging::type::_HttpRequest_default_instance_);
}
inline const ::google::logging::type::HttpRequest& LogEntry::http_request() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogEntry.http_request)
  return _internal_http_request();
}
inline void LogEntry::unsafe_arena_set_allocated_http_request(
    ::google::logging::type::HttpRequest* http_request) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(http_request_);
  }
  http_request_ = http_request;
  if (http_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.LogEntry.http_request)
}
inline ::google::logging::type::HttpRequest* LogEntry::release_http_request() {
  
  ::google::logging::type::HttpRequest* temp = http_request_;
  http_request_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::logging::type::HttpRequest* LogEntry::unsafe_arena_release_http_request() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogEntry.http_request)
  
  ::google::logging::type::HttpRequest* temp = http_request_;
  http_request_ = nullptr;
  return temp;
}
inline ::google::logging::type::HttpRequest* LogEntry::_internal_mutable_http_request() {
  
  if (http_request_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::logging::type::HttpRequest>(GetArena());
    http_request_ = p;
  }
  return http_request_;
}
inline ::google::logging::type::HttpRequest* LogEntry::mutable_http_request() {
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogEntry.http_request)
  return _internal_mutable_http_request();
}
inline void LogEntry::set_allocated_http_request(::google::logging::type::HttpRequest* http_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(http_request_);
  }
  if (http_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(http_request)->GetArena();
    if (message_arena != submessage_arena) {
      http_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, http_request, submessage_arena);
    }
    
  } else {
    
  }
  http_request_ = http_request;
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogEntry.http_request)
}

// map<string, string> labels = 11 [(.google.api.field_behavior) = OPTIONAL];
inline int LogEntry::_internal_labels_size() const {
  return labels_.size();
}
inline int LogEntry::labels_size() const {
  return _internal_labels_size();
}
inline void LogEntry::clear_labels() {
  labels_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
LogEntry::_internal_labels() const {
  return labels_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
LogEntry::labels() const {
  // @@protoc_insertion_point(field_map:google.logging.v2.LogEntry.labels)
  return _internal_labels();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
LogEntry::_internal_mutable_labels() {
  return labels_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
LogEntry::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:google.logging.v2.LogEntry.labels)
  return _internal_mutable_labels();
}

// .google.logging.v2.LogEntryOperation operation = 15 [(.google.api.field_behavior) = OPTIONAL];
inline bool LogEntry::_internal_has_operation() const {
  return this != internal_default_instance() && operation_ != nullptr;
}
inline bool LogEntry::has_operation() const {
  return _internal_has_operation();
}
inline void LogEntry::clear_operation() {
  if (GetArena() == nullptr && operation_ != nullptr) {
    delete operation_;
  }
  operation_ = nullptr;
}
inline const ::google::logging::v2::LogEntryOperation& LogEntry::_internal_operation() const {
  const ::google::logging::v2::LogEntryOperation* p = operation_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::logging::v2::LogEntryOperation&>(
      ::google::logging::v2::_LogEntryOperation_default_instance_);
}
inline const ::google::logging::v2::LogEntryOperation& LogEntry::operation() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogEntry.operation)
  return _internal_operation();
}
inline void LogEntry::unsafe_arena_set_allocated_operation(
    ::google::logging::v2::LogEntryOperation* operation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(operation_);
  }
  operation_ = operation;
  if (operation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.LogEntry.operation)
}
inline ::google::logging::v2::LogEntryOperation* LogEntry::release_operation() {
  
  ::google::logging::v2::LogEntryOperation* temp = operation_;
  operation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::logging::v2::LogEntryOperation* LogEntry::unsafe_arena_release_operation() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogEntry.operation)
  
  ::google::logging::v2::LogEntryOperation* temp = operation_;
  operation_ = nullptr;
  return temp;
}
inline ::google::logging::v2::LogEntryOperation* LogEntry::_internal_mutable_operation() {
  
  if (operation_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::logging::v2::LogEntryOperation>(GetArena());
    operation_ = p;
  }
  return operation_;
}
inline ::google::logging::v2::LogEntryOperation* LogEntry::mutable_operation() {
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogEntry.operation)
  return _internal_mutable_operation();
}
inline void LogEntry::set_allocated_operation(::google::logging::v2::LogEntryOperation* operation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete operation_;
  }
  if (operation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(operation);
    if (message_arena != submessage_arena) {
      operation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, operation, submessage_arena);
    }
    
  } else {
    
  }
  operation_ = operation;
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogEntry.operation)
}

// string trace = 22 [(.google.api.field_behavior) = OPTIONAL];
inline void LogEntry::clear_trace() {
  trace_.ClearToEmpty();
}
inline const std::string& LogEntry::trace() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogEntry.trace)
  return _internal_trace();
}
inline void LogEntry::set_trace(const std::string& value) {
  _internal_set_trace(value);
  // @@protoc_insertion_point(field_set:google.logging.v2.LogEntry.trace)
}
inline std::string* LogEntry::mutable_trace() {
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogEntry.trace)
  return _internal_mutable_trace();
}
inline const std::string& LogEntry::_internal_trace() const {
  return trace_.Get();
}
inline void LogEntry::_internal_set_trace(const std::string& value) {
  
  trace_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LogEntry::set_trace(std::string&& value) {
  
  trace_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.logging.v2.LogEntry.trace)
}
inline void LogEntry::set_trace(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trace_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.LogEntry.trace)
}
inline void LogEntry::set_trace(const char* value,
    size_t size) {
  
  trace_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.LogEntry.trace)
}
inline std::string* LogEntry::_internal_mutable_trace() {
  
  return trace_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LogEntry::release_trace() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogEntry.trace)
  return trace_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogEntry::set_allocated_trace(std::string* trace) {
  if (trace != nullptr) {
    
  } else {
    
  }
  trace_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trace,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogEntry.trace)
}

// string span_id = 27 [(.google.api.field_behavior) = OPTIONAL];
inline void LogEntry::clear_span_id() {
  span_id_.ClearToEmpty();
}
inline const std::string& LogEntry::span_id() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogEntry.span_id)
  return _internal_span_id();
}
inline void LogEntry::set_span_id(const std::string& value) {
  _internal_set_span_id(value);
  // @@protoc_insertion_point(field_set:google.logging.v2.LogEntry.span_id)
}
inline std::string* LogEntry::mutable_span_id() {
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogEntry.span_id)
  return _internal_mutable_span_id();
}
inline const std::string& LogEntry::_internal_span_id() const {
  return span_id_.Get();
}
inline void LogEntry::_internal_set_span_id(const std::string& value) {
  
  span_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LogEntry::set_span_id(std::string&& value) {
  
  span_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.logging.v2.LogEntry.span_id)
}
inline void LogEntry::set_span_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  span_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.LogEntry.span_id)
}
inline void LogEntry::set_span_id(const char* value,
    size_t size) {
  
  span_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.LogEntry.span_id)
}
inline std::string* LogEntry::_internal_mutable_span_id() {
  
  return span_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LogEntry::release_span_id() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogEntry.span_id)
  return span_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogEntry::set_allocated_span_id(std::string* span_id) {
  if (span_id != nullptr) {
    
  } else {
    
  }
  span_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), span_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogEntry.span_id)
}

// bool trace_sampled = 30 [(.google.api.field_behavior) = OPTIONAL];
inline void LogEntry::clear_trace_sampled() {
  trace_sampled_ = false;
}
inline bool LogEntry::_internal_trace_sampled() const {
  return trace_sampled_;
}
inline bool LogEntry::trace_sampled() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogEntry.trace_sampled)
  return _internal_trace_sampled();
}
inline void LogEntry::_internal_set_trace_sampled(bool value) {
  
  trace_sampled_ = value;
}
inline void LogEntry::set_trace_sampled(bool value) {
  _internal_set_trace_sampled(value);
  // @@protoc_insertion_point(field_set:google.logging.v2.LogEntry.trace_sampled)
}

// .google.logging.v2.LogEntrySourceLocation source_location = 23 [(.google.api.field_behavior) = OPTIONAL];
inline bool LogEntry::_internal_has_source_location() const {
  return this != internal_default_instance() && source_location_ != nullptr;
}
inline bool LogEntry::has_source_location() const {
  return _internal_has_source_location();
}
inline void LogEntry::clear_source_location() {
  if (GetArena() == nullptr && source_location_ != nullptr) {
    delete source_location_;
  }
  source_location_ = nullptr;
}
inline const ::google::logging::v2::LogEntrySourceLocation& LogEntry::_internal_source_location() const {
  const ::google::logging::v2::LogEntrySourceLocation* p = source_location_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::logging::v2::LogEntrySourceLocation&>(
      ::google::logging::v2::_LogEntrySourceLocation_default_instance_);
}
inline const ::google::logging::v2::LogEntrySourceLocation& LogEntry::source_location() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogEntry.source_location)
  return _internal_source_location();
}
inline void LogEntry::unsafe_arena_set_allocated_source_location(
    ::google::logging::v2::LogEntrySourceLocation* source_location) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_location_);
  }
  source_location_ = source_location;
  if (source_location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.LogEntry.source_location)
}
inline ::google::logging::v2::LogEntrySourceLocation* LogEntry::release_source_location() {
  
  ::google::logging::v2::LogEntrySourceLocation* temp = source_location_;
  source_location_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::logging::v2::LogEntrySourceLocation* LogEntry::unsafe_arena_release_source_location() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogEntry.source_location)
  
  ::google::logging::v2::LogEntrySourceLocation* temp = source_location_;
  source_location_ = nullptr;
  return temp;
}
inline ::google::logging::v2::LogEntrySourceLocation* LogEntry::_internal_mutable_source_location() {
  
  if (source_location_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::logging::v2::LogEntrySourceLocation>(GetArena());
    source_location_ = p;
  }
  return source_location_;
}
inline ::google::logging::v2::LogEntrySourceLocation* LogEntry::mutable_source_location() {
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogEntry.source_location)
  return _internal_mutable_source_location();
}
inline void LogEntry::set_allocated_source_location(::google::logging::v2::LogEntrySourceLocation* source_location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete source_location_;
  }
  if (source_location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(source_location);
    if (message_arena != submessage_arena) {
      source_location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source_location, submessage_arena);
    }
    
  } else {
    
  }
  source_location_ = source_location;
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogEntry.source_location)
}

inline bool LogEntry::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void LogEntry::clear_has_payload() {
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline LogEntry::PayloadCase LogEntry::payload_case() const {
  return LogEntry::PayloadCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// LogEntryOperation

// string id = 1 [(.google.api.field_behavior) = OPTIONAL];
inline void LogEntryOperation::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& LogEntryOperation::id() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogEntryOperation.id)
  return _internal_id();
}
inline void LogEntryOperation::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:google.logging.v2.LogEntryOperation.id)
}
inline std::string* LogEntryOperation::mutable_id() {
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogEntryOperation.id)
  return _internal_mutable_id();
}
inline const std::string& LogEntryOperation::_internal_id() const {
  return id_.Get();
}
inline void LogEntryOperation::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LogEntryOperation::set_id(std::string&& value) {
  
  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.logging.v2.LogEntryOperation.id)
}
inline void LogEntryOperation::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.LogEntryOperation.id)
}
inline void LogEntryOperation::set_id(const char* value,
    size_t size) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.LogEntryOperation.id)
}
inline std::string* LogEntryOperation::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LogEntryOperation::release_id() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogEntryOperation.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogEntryOperation::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogEntryOperation.id)
}

// string producer = 2 [(.google.api.field_behavior) = OPTIONAL];
inline void LogEntryOperation::clear_producer() {
  producer_.ClearToEmpty();
}
inline const std::string& LogEntryOperation::producer() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogEntryOperation.producer)
  return _internal_producer();
}
inline void LogEntryOperation::set_producer(const std::string& value) {
  _internal_set_producer(value);
  // @@protoc_insertion_point(field_set:google.logging.v2.LogEntryOperation.producer)
}
inline std::string* LogEntryOperation::mutable_producer() {
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogEntryOperation.producer)
  return _internal_mutable_producer();
}
inline const std::string& LogEntryOperation::_internal_producer() const {
  return producer_.Get();
}
inline void LogEntryOperation::_internal_set_producer(const std::string& value) {
  
  producer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LogEntryOperation::set_producer(std::string&& value) {
  
  producer_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.logging.v2.LogEntryOperation.producer)
}
inline void LogEntryOperation::set_producer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  producer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.LogEntryOperation.producer)
}
inline void LogEntryOperation::set_producer(const char* value,
    size_t size) {
  
  producer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.LogEntryOperation.producer)
}
inline std::string* LogEntryOperation::_internal_mutable_producer() {
  
  return producer_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LogEntryOperation::release_producer() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogEntryOperation.producer)
  return producer_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogEntryOperation::set_allocated_producer(std::string* producer) {
  if (producer != nullptr) {
    
  } else {
    
  }
  producer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), producer,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogEntryOperation.producer)
}

// bool first = 3 [(.google.api.field_behavior) = OPTIONAL];
inline void LogEntryOperation::clear_first() {
  first_ = false;
}
inline bool LogEntryOperation::_internal_first() const {
  return first_;
}
inline bool LogEntryOperation::first() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogEntryOperation.first)
  return _internal_first();
}
inline void LogEntryOperation::_internal_set_first(bool value) {
  
  first_ = value;
}
inline void LogEntryOperation::set_first(bool value) {
  _internal_set_first(value);
  // @@protoc_insertion_point(field_set:google.logging.v2.LogEntryOperation.first)
}

// bool last = 4 [(.google.api.field_behavior) = OPTIONAL];
inline void LogEntryOperation::clear_last() {
  last_ = false;
}
inline bool LogEntryOperation::_internal_last() const {
  return last_;
}
inline bool LogEntryOperation::last() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogEntryOperation.last)
  return _internal_last();
}
inline void LogEntryOperation::_internal_set_last(bool value) {
  
  last_ = value;
}
inline void LogEntryOperation::set_last(bool value) {
  _internal_set_last(value);
  // @@protoc_insertion_point(field_set:google.logging.v2.LogEntryOperation.last)
}

// -------------------------------------------------------------------

// LogEntrySourceLocation

// string file = 1 [(.google.api.field_behavior) = OPTIONAL];
inline void LogEntrySourceLocation::clear_file() {
  file_.ClearToEmpty();
}
inline const std::string& LogEntrySourceLocation::file() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogEntrySourceLocation.file)
  return _internal_file();
}
inline void LogEntrySourceLocation::set_file(const std::string& value) {
  _internal_set_file(value);
  // @@protoc_insertion_point(field_set:google.logging.v2.LogEntrySourceLocation.file)
}
inline std::string* LogEntrySourceLocation::mutable_file() {
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogEntrySourceLocation.file)
  return _internal_mutable_file();
}
inline const std::string& LogEntrySourceLocation::_internal_file() const {
  return file_.Get();
}
inline void LogEntrySourceLocation::_internal_set_file(const std::string& value) {
  
  file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LogEntrySourceLocation::set_file(std::string&& value) {
  
  file_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.logging.v2.LogEntrySourceLocation.file)
}
inline void LogEntrySourceLocation::set_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.LogEntrySourceLocation.file)
}
inline void LogEntrySourceLocation::set_file(const char* value,
    size_t size) {
  
  file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.LogEntrySourceLocation.file)
}
inline std::string* LogEntrySourceLocation::_internal_mutable_file() {
  
  return file_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LogEntrySourceLocation::release_file() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogEntrySourceLocation.file)
  return file_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogEntrySourceLocation::set_allocated_file(std::string* file) {
  if (file != nullptr) {
    
  } else {
    
  }
  file_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogEntrySourceLocation.file)
}

// int64 line = 2 [(.google.api.field_behavior) = OPTIONAL];
inline void LogEntrySourceLocation::clear_line() {
  line_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LogEntrySourceLocation::_internal_line() const {
  return line_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LogEntrySourceLocation::line() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogEntrySourceLocation.line)
  return _internal_line();
}
inline void LogEntrySourceLocation::_internal_set_line(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  line_ = value;
}
inline void LogEntrySourceLocation::set_line(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_line(value);
  // @@protoc_insertion_point(field_set:google.logging.v2.LogEntrySourceLocation.line)
}

// string function = 3 [(.google.api.field_behavior) = OPTIONAL];
inline void LogEntrySourceLocation::clear_function() {
  function_.ClearToEmpty();
}
inline const std::string& LogEntrySourceLocation::function() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogEntrySourceLocation.function)
  return _internal_function();
}
inline void LogEntrySourceLocation::set_function(const std::string& value) {
  _internal_set_function(value);
  // @@protoc_insertion_point(field_set:google.logging.v2.LogEntrySourceLocation.function)
}
inline std::string* LogEntrySourceLocation::mutable_function() {
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogEntrySourceLocation.function)
  return _internal_mutable_function();
}
inline const std::string& LogEntrySourceLocation::_internal_function() const {
  return function_.Get();
}
inline void LogEntrySourceLocation::_internal_set_function(const std::string& value) {
  
  function_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LogEntrySourceLocation::set_function(std::string&& value) {
  
  function_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.logging.v2.LogEntrySourceLocation.function)
}
inline void LogEntrySourceLocation::set_function(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  function_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.LogEntrySourceLocation.function)
}
inline void LogEntrySourceLocation::set_function(const char* value,
    size_t size) {
  
  function_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.LogEntrySourceLocation.function)
}
inline std::string* LogEntrySourceLocation::_internal_mutable_function() {
  
  return function_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LogEntrySourceLocation::release_function() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogEntrySourceLocation.function)
  return function_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogEntrySourceLocation::set_allocated_function(std::string* function) {
  if (function != nullptr) {
    
  } else {
    
  }
  function_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), function,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogEntrySourceLocation.function)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace logging
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2flogging_2fv2_2flog_5fentry_2eproto
