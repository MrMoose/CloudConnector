// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/logging/v2/logging_config.proto
// Original file comments:
// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_google_2flogging_2fv2_2flogging_5fconfig_2eproto__INCLUDED
#define GRPC_google_2flogging_2fv2_2flogging_5fconfig_2eproto__INCLUDED

#include "google/logging/v2/logging_config.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace google {
namespace logging {
namespace v2 {

// Service for configuring sinks used to route log entries.
class ConfigServiceV2 final {
 public:
  static constexpr char const* service_full_name() {
    return "google.logging.v2.ConfigServiceV2";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Lists buckets.
    virtual ::grpc::Status ListBuckets(::grpc::ClientContext* context, const ::google::logging::v2::ListBucketsRequest& request, ::google::logging::v2::ListBucketsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::ListBucketsResponse>> AsyncListBuckets(::grpc::ClientContext* context, const ::google::logging::v2::ListBucketsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::ListBucketsResponse>>(AsyncListBucketsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::ListBucketsResponse>> PrepareAsyncListBuckets(::grpc::ClientContext* context, const ::google::logging::v2::ListBucketsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::ListBucketsResponse>>(PrepareAsyncListBucketsRaw(context, request, cq));
    }
    // Gets a bucket.
    virtual ::grpc::Status GetBucket(::grpc::ClientContext* context, const ::google::logging::v2::GetBucketRequest& request, ::google::logging::v2::LogBucket* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogBucket>> AsyncGetBucket(::grpc::ClientContext* context, const ::google::logging::v2::GetBucketRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogBucket>>(AsyncGetBucketRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogBucket>> PrepareAsyncGetBucket(::grpc::ClientContext* context, const ::google::logging::v2::GetBucketRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogBucket>>(PrepareAsyncGetBucketRaw(context, request, cq));
    }
    // Creates a bucket that can be used to store log entries. Once a bucket has
    // been created, the region cannot be changed.
    virtual ::grpc::Status CreateBucket(::grpc::ClientContext* context, const ::google::logging::v2::CreateBucketRequest& request, ::google::logging::v2::LogBucket* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogBucket>> AsyncCreateBucket(::grpc::ClientContext* context, const ::google::logging::v2::CreateBucketRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogBucket>>(AsyncCreateBucketRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogBucket>> PrepareAsyncCreateBucket(::grpc::ClientContext* context, const ::google::logging::v2::CreateBucketRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogBucket>>(PrepareAsyncCreateBucketRaw(context, request, cq));
    }
    // Updates a bucket. This method replaces the following fields in the
    // existing bucket with values from the new bucket: `retention_period`
    //
    // If the retention period is decreased and the bucket is locked,
    // FAILED_PRECONDITION will be returned.
    //
    // If the bucket has a LifecycleState of DELETE_REQUESTED, FAILED_PRECONDITION
    // will be returned.
    //
    // A buckets region may not be modified after it is created.
    virtual ::grpc::Status UpdateBucket(::grpc::ClientContext* context, const ::google::logging::v2::UpdateBucketRequest& request, ::google::logging::v2::LogBucket* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogBucket>> AsyncUpdateBucket(::grpc::ClientContext* context, const ::google::logging::v2::UpdateBucketRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogBucket>>(AsyncUpdateBucketRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogBucket>> PrepareAsyncUpdateBucket(::grpc::ClientContext* context, const ::google::logging::v2::UpdateBucketRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogBucket>>(PrepareAsyncUpdateBucketRaw(context, request, cq));
    }
    // Deletes a bucket.
    // Moves the bucket to the DELETE_REQUESTED state. After 7 days, the
    // bucket will be purged and all logs in the bucket will be permanently
    // deleted.
    virtual ::grpc::Status DeleteBucket(::grpc::ClientContext* context, const ::google::logging::v2::DeleteBucketRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeleteBucket(::grpc::ClientContext* context, const ::google::logging::v2::DeleteBucketRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteBucketRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncDeleteBucket(::grpc::ClientContext* context, const ::google::logging::v2::DeleteBucketRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncDeleteBucketRaw(context, request, cq));
    }
    // Undeletes a bucket. A bucket that has been deleted may be undeleted within
    // the grace period of 7 days.
    virtual ::grpc::Status UndeleteBucket(::grpc::ClientContext* context, const ::google::logging::v2::UndeleteBucketRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncUndeleteBucket(::grpc::ClientContext* context, const ::google::logging::v2::UndeleteBucketRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncUndeleteBucketRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncUndeleteBucket(::grpc::ClientContext* context, const ::google::logging::v2::UndeleteBucketRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncUndeleteBucketRaw(context, request, cq));
    }
    // Lists views on a bucket.
    virtual ::grpc::Status ListViews(::grpc::ClientContext* context, const ::google::logging::v2::ListViewsRequest& request, ::google::logging::v2::ListViewsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::ListViewsResponse>> AsyncListViews(::grpc::ClientContext* context, const ::google::logging::v2::ListViewsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::ListViewsResponse>>(AsyncListViewsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::ListViewsResponse>> PrepareAsyncListViews(::grpc::ClientContext* context, const ::google::logging::v2::ListViewsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::ListViewsResponse>>(PrepareAsyncListViewsRaw(context, request, cq));
    }
    // Gets a view.
    virtual ::grpc::Status GetView(::grpc::ClientContext* context, const ::google::logging::v2::GetViewRequest& request, ::google::logging::v2::LogView* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogView>> AsyncGetView(::grpc::ClientContext* context, const ::google::logging::v2::GetViewRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogView>>(AsyncGetViewRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogView>> PrepareAsyncGetView(::grpc::ClientContext* context, const ::google::logging::v2::GetViewRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogView>>(PrepareAsyncGetViewRaw(context, request, cq));
    }
    // Creates a view over logs in a bucket. A bucket may contain a maximum of
    // 50 views.
    virtual ::grpc::Status CreateView(::grpc::ClientContext* context, const ::google::logging::v2::CreateViewRequest& request, ::google::logging::v2::LogView* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogView>> AsyncCreateView(::grpc::ClientContext* context, const ::google::logging::v2::CreateViewRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogView>>(AsyncCreateViewRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogView>> PrepareAsyncCreateView(::grpc::ClientContext* context, const ::google::logging::v2::CreateViewRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogView>>(PrepareAsyncCreateViewRaw(context, request, cq));
    }
    // Updates a view. This method replaces the following fields in the existing
    // view with values from the new view: `filter`.
    virtual ::grpc::Status UpdateView(::grpc::ClientContext* context, const ::google::logging::v2::UpdateViewRequest& request, ::google::logging::v2::LogView* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogView>> AsyncUpdateView(::grpc::ClientContext* context, const ::google::logging::v2::UpdateViewRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogView>>(AsyncUpdateViewRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogView>> PrepareAsyncUpdateView(::grpc::ClientContext* context, const ::google::logging::v2::UpdateViewRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogView>>(PrepareAsyncUpdateViewRaw(context, request, cq));
    }
    // Deletes a view from a bucket.
    virtual ::grpc::Status DeleteView(::grpc::ClientContext* context, const ::google::logging::v2::DeleteViewRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeleteView(::grpc::ClientContext* context, const ::google::logging::v2::DeleteViewRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteViewRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncDeleteView(::grpc::ClientContext* context, const ::google::logging::v2::DeleteViewRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncDeleteViewRaw(context, request, cq));
    }
    // Lists sinks.
    virtual ::grpc::Status ListSinks(::grpc::ClientContext* context, const ::google::logging::v2::ListSinksRequest& request, ::google::logging::v2::ListSinksResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::ListSinksResponse>> AsyncListSinks(::grpc::ClientContext* context, const ::google::logging::v2::ListSinksRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::ListSinksResponse>>(AsyncListSinksRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::ListSinksResponse>> PrepareAsyncListSinks(::grpc::ClientContext* context, const ::google::logging::v2::ListSinksRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::ListSinksResponse>>(PrepareAsyncListSinksRaw(context, request, cq));
    }
    // Gets a sink.
    virtual ::grpc::Status GetSink(::grpc::ClientContext* context, const ::google::logging::v2::GetSinkRequest& request, ::google::logging::v2::LogSink* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogSink>> AsyncGetSink(::grpc::ClientContext* context, const ::google::logging::v2::GetSinkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogSink>>(AsyncGetSinkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogSink>> PrepareAsyncGetSink(::grpc::ClientContext* context, const ::google::logging::v2::GetSinkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogSink>>(PrepareAsyncGetSinkRaw(context, request, cq));
    }
    // Creates a sink that exports specified log entries to a destination. The
    // export of newly-ingested log entries begins immediately, unless the sink's
    // `writer_identity` is not permitted to write to the destination. A sink can
    // export log entries only from the resource owning the sink.
    virtual ::grpc::Status CreateSink(::grpc::ClientContext* context, const ::google::logging::v2::CreateSinkRequest& request, ::google::logging::v2::LogSink* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogSink>> AsyncCreateSink(::grpc::ClientContext* context, const ::google::logging::v2::CreateSinkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogSink>>(AsyncCreateSinkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogSink>> PrepareAsyncCreateSink(::grpc::ClientContext* context, const ::google::logging::v2::CreateSinkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogSink>>(PrepareAsyncCreateSinkRaw(context, request, cq));
    }
    // Updates a sink. This method replaces the following fields in the existing
    // sink with values from the new sink: `destination`, and `filter`.
    //
    // The updated sink might also have a new `writer_identity`; see the
    // `unique_writer_identity` field.
    virtual ::grpc::Status UpdateSink(::grpc::ClientContext* context, const ::google::logging::v2::UpdateSinkRequest& request, ::google::logging::v2::LogSink* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogSink>> AsyncUpdateSink(::grpc::ClientContext* context, const ::google::logging::v2::UpdateSinkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogSink>>(AsyncUpdateSinkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogSink>> PrepareAsyncUpdateSink(::grpc::ClientContext* context, const ::google::logging::v2::UpdateSinkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogSink>>(PrepareAsyncUpdateSinkRaw(context, request, cq));
    }
    // Deletes a sink. If the sink has a unique `writer_identity`, then that
    // service account is also deleted.
    virtual ::grpc::Status DeleteSink(::grpc::ClientContext* context, const ::google::logging::v2::DeleteSinkRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeleteSink(::grpc::ClientContext* context, const ::google::logging::v2::DeleteSinkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteSinkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncDeleteSink(::grpc::ClientContext* context, const ::google::logging::v2::DeleteSinkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncDeleteSinkRaw(context, request, cq));
    }
    // Lists all the exclusions in a parent resource.
    virtual ::grpc::Status ListExclusions(::grpc::ClientContext* context, const ::google::logging::v2::ListExclusionsRequest& request, ::google::logging::v2::ListExclusionsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::ListExclusionsResponse>> AsyncListExclusions(::grpc::ClientContext* context, const ::google::logging::v2::ListExclusionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::ListExclusionsResponse>>(AsyncListExclusionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::ListExclusionsResponse>> PrepareAsyncListExclusions(::grpc::ClientContext* context, const ::google::logging::v2::ListExclusionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::ListExclusionsResponse>>(PrepareAsyncListExclusionsRaw(context, request, cq));
    }
    // Gets the description of an exclusion.
    virtual ::grpc::Status GetExclusion(::grpc::ClientContext* context, const ::google::logging::v2::GetExclusionRequest& request, ::google::logging::v2::LogExclusion* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogExclusion>> AsyncGetExclusion(::grpc::ClientContext* context, const ::google::logging::v2::GetExclusionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogExclusion>>(AsyncGetExclusionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogExclusion>> PrepareAsyncGetExclusion(::grpc::ClientContext* context, const ::google::logging::v2::GetExclusionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogExclusion>>(PrepareAsyncGetExclusionRaw(context, request, cq));
    }
    // Creates a new exclusion in a specified parent resource.
    // Only log entries belonging to that resource can be excluded.
    // You can have up to 10 exclusions in a resource.
    virtual ::grpc::Status CreateExclusion(::grpc::ClientContext* context, const ::google::logging::v2::CreateExclusionRequest& request, ::google::logging::v2::LogExclusion* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogExclusion>> AsyncCreateExclusion(::grpc::ClientContext* context, const ::google::logging::v2::CreateExclusionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogExclusion>>(AsyncCreateExclusionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogExclusion>> PrepareAsyncCreateExclusion(::grpc::ClientContext* context, const ::google::logging::v2::CreateExclusionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogExclusion>>(PrepareAsyncCreateExclusionRaw(context, request, cq));
    }
    // Changes one or more properties of an existing exclusion.
    virtual ::grpc::Status UpdateExclusion(::grpc::ClientContext* context, const ::google::logging::v2::UpdateExclusionRequest& request, ::google::logging::v2::LogExclusion* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogExclusion>> AsyncUpdateExclusion(::grpc::ClientContext* context, const ::google::logging::v2::UpdateExclusionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogExclusion>>(AsyncUpdateExclusionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogExclusion>> PrepareAsyncUpdateExclusion(::grpc::ClientContext* context, const ::google::logging::v2::UpdateExclusionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogExclusion>>(PrepareAsyncUpdateExclusionRaw(context, request, cq));
    }
    // Deletes an exclusion.
    virtual ::grpc::Status DeleteExclusion(::grpc::ClientContext* context, const ::google::logging::v2::DeleteExclusionRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeleteExclusion(::grpc::ClientContext* context, const ::google::logging::v2::DeleteExclusionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteExclusionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncDeleteExclusion(::grpc::ClientContext* context, const ::google::logging::v2::DeleteExclusionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncDeleteExclusionRaw(context, request, cq));
    }
    // Gets the Logs Router CMEK settings for the given resource.
    //
    // Note: CMEK for the Logs Router can currently only be configured for GCP
    // organizations. Once configured, it applies to all projects and folders in
    // the GCP organization.
    //
    // See [Enabling CMEK for Logs
    // Router](https://cloud.google.com/logging/docs/routing/managed-encryption)
    // for more information.
    virtual ::grpc::Status GetCmekSettings(::grpc::ClientContext* context, const ::google::logging::v2::GetCmekSettingsRequest& request, ::google::logging::v2::CmekSettings* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::CmekSettings>> AsyncGetCmekSettings(::grpc::ClientContext* context, const ::google::logging::v2::GetCmekSettingsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::CmekSettings>>(AsyncGetCmekSettingsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::CmekSettings>> PrepareAsyncGetCmekSettings(::grpc::ClientContext* context, const ::google::logging::v2::GetCmekSettingsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::CmekSettings>>(PrepareAsyncGetCmekSettingsRaw(context, request, cq));
    }
    // Updates the Logs Router CMEK settings for the given resource.
    //
    // Note: CMEK for the Logs Router can currently only be configured for GCP
    // organizations. Once configured, it applies to all projects and folders in
    // the GCP organization.
    //
    // [UpdateCmekSettings][google.logging.v2.ConfigServiceV2.UpdateCmekSettings]
    // will fail if 1) `kms_key_name` is invalid, or 2) the associated service
    // account does not have the required
    // `roles/cloudkms.cryptoKeyEncrypterDecrypter` role assigned for the key, or
    // 3) access to the key is disabled.
    //
    // See [Enabling CMEK for Logs
    // Router](https://cloud.google.com/logging/docs/routing/managed-encryption)
    // for more information.
    virtual ::grpc::Status UpdateCmekSettings(::grpc::ClientContext* context, const ::google::logging::v2::UpdateCmekSettingsRequest& request, ::google::logging::v2::CmekSettings* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::CmekSettings>> AsyncUpdateCmekSettings(::grpc::ClientContext* context, const ::google::logging::v2::UpdateCmekSettingsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::CmekSettings>>(AsyncUpdateCmekSettingsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::CmekSettings>> PrepareAsyncUpdateCmekSettings(::grpc::ClientContext* context, const ::google::logging::v2::UpdateCmekSettingsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::CmekSettings>>(PrepareAsyncUpdateCmekSettingsRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Lists buckets.
      virtual void ListBuckets(::grpc::ClientContext* context, const ::google::logging::v2::ListBucketsRequest* request, ::google::logging::v2::ListBucketsResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListBuckets(::grpc::ClientContext* context, const ::google::logging::v2::ListBucketsRequest* request, ::google::logging::v2::ListBucketsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ListBuckets(::grpc::ClientContext* context, const ::google::logging::v2::ListBucketsRequest* request, ::google::logging::v2::ListBucketsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Gets a bucket.
      virtual void GetBucket(::grpc::ClientContext* context, const ::google::logging::v2::GetBucketRequest* request, ::google::logging::v2::LogBucket* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetBucket(::grpc::ClientContext* context, const ::google::logging::v2::GetBucketRequest* request, ::google::logging::v2::LogBucket* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetBucket(::grpc::ClientContext* context, const ::google::logging::v2::GetBucketRequest* request, ::google::logging::v2::LogBucket* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Creates a bucket that can be used to store log entries. Once a bucket has
      // been created, the region cannot be changed.
      virtual void CreateBucket(::grpc::ClientContext* context, const ::google::logging::v2::CreateBucketRequest* request, ::google::logging::v2::LogBucket* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateBucket(::grpc::ClientContext* context, const ::google::logging::v2::CreateBucketRequest* request, ::google::logging::v2::LogBucket* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateBucket(::grpc::ClientContext* context, const ::google::logging::v2::CreateBucketRequest* request, ::google::logging::v2::LogBucket* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Updates a bucket. This method replaces the following fields in the
      // existing bucket with values from the new bucket: `retention_period`
      //
      // If the retention period is decreased and the bucket is locked,
      // FAILED_PRECONDITION will be returned.
      //
      // If the bucket has a LifecycleState of DELETE_REQUESTED, FAILED_PRECONDITION
      // will be returned.
      //
      // A buckets region may not be modified after it is created.
      virtual void UpdateBucket(::grpc::ClientContext* context, const ::google::logging::v2::UpdateBucketRequest* request, ::google::logging::v2::LogBucket* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateBucket(::grpc::ClientContext* context, const ::google::logging::v2::UpdateBucketRequest* request, ::google::logging::v2::LogBucket* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateBucket(::grpc::ClientContext* context, const ::google::logging::v2::UpdateBucketRequest* request, ::google::logging::v2::LogBucket* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Deletes a bucket.
      // Moves the bucket to the DELETE_REQUESTED state. After 7 days, the
      // bucket will be purged and all logs in the bucket will be permanently
      // deleted.
      virtual void DeleteBucket(::grpc::ClientContext* context, const ::google::logging::v2::DeleteBucketRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteBucket(::grpc::ClientContext* context, const ::google::logging::v2::DeleteBucketRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteBucket(::grpc::ClientContext* context, const ::google::logging::v2::DeleteBucketRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Undeletes a bucket. A bucket that has been deleted may be undeleted within
      // the grace period of 7 days.
      virtual void UndeleteBucket(::grpc::ClientContext* context, const ::google::logging::v2::UndeleteBucketRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UndeleteBucket(::grpc::ClientContext* context, const ::google::logging::v2::UndeleteBucketRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UndeleteBucket(::grpc::ClientContext* context, const ::google::logging::v2::UndeleteBucketRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Lists views on a bucket.
      virtual void ListViews(::grpc::ClientContext* context, const ::google::logging::v2::ListViewsRequest* request, ::google::logging::v2::ListViewsResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListViews(::grpc::ClientContext* context, const ::google::logging::v2::ListViewsRequest* request, ::google::logging::v2::ListViewsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ListViews(::grpc::ClientContext* context, const ::google::logging::v2::ListViewsRequest* request, ::google::logging::v2::ListViewsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Gets a view.
      virtual void GetView(::grpc::ClientContext* context, const ::google::logging::v2::GetViewRequest* request, ::google::logging::v2::LogView* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetView(::grpc::ClientContext* context, const ::google::logging::v2::GetViewRequest* request, ::google::logging::v2::LogView* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetView(::grpc::ClientContext* context, const ::google::logging::v2::GetViewRequest* request, ::google::logging::v2::LogView* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Creates a view over logs in a bucket. A bucket may contain a maximum of
      // 50 views.
      virtual void CreateView(::grpc::ClientContext* context, const ::google::logging::v2::CreateViewRequest* request, ::google::logging::v2::LogView* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateView(::grpc::ClientContext* context, const ::google::logging::v2::CreateViewRequest* request, ::google::logging::v2::LogView* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateView(::grpc::ClientContext* context, const ::google::logging::v2::CreateViewRequest* request, ::google::logging::v2::LogView* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Updates a view. This method replaces the following fields in the existing
      // view with values from the new view: `filter`.
      virtual void UpdateView(::grpc::ClientContext* context, const ::google::logging::v2::UpdateViewRequest* request, ::google::logging::v2::LogView* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateView(::grpc::ClientContext* context, const ::google::logging::v2::UpdateViewRequest* request, ::google::logging::v2::LogView* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateView(::grpc::ClientContext* context, const ::google::logging::v2::UpdateViewRequest* request, ::google::logging::v2::LogView* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Deletes a view from a bucket.
      virtual void DeleteView(::grpc::ClientContext* context, const ::google::logging::v2::DeleteViewRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteView(::grpc::ClientContext* context, const ::google::logging::v2::DeleteViewRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteView(::grpc::ClientContext* context, const ::google::logging::v2::DeleteViewRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Lists sinks.
      virtual void ListSinks(::grpc::ClientContext* context, const ::google::logging::v2::ListSinksRequest* request, ::google::logging::v2::ListSinksResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListSinks(::grpc::ClientContext* context, const ::google::logging::v2::ListSinksRequest* request, ::google::logging::v2::ListSinksResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ListSinks(::grpc::ClientContext* context, const ::google::logging::v2::ListSinksRequest* request, ::google::logging::v2::ListSinksResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Gets a sink.
      virtual void GetSink(::grpc::ClientContext* context, const ::google::logging::v2::GetSinkRequest* request, ::google::logging::v2::LogSink* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetSink(::grpc::ClientContext* context, const ::google::logging::v2::GetSinkRequest* request, ::google::logging::v2::LogSink* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetSink(::grpc::ClientContext* context, const ::google::logging::v2::GetSinkRequest* request, ::google::logging::v2::LogSink* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Creates a sink that exports specified log entries to a destination. The
      // export of newly-ingested log entries begins immediately, unless the sink's
      // `writer_identity` is not permitted to write to the destination. A sink can
      // export log entries only from the resource owning the sink.
      virtual void CreateSink(::grpc::ClientContext* context, const ::google::logging::v2::CreateSinkRequest* request, ::google::logging::v2::LogSink* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateSink(::grpc::ClientContext* context, const ::google::logging::v2::CreateSinkRequest* request, ::google::logging::v2::LogSink* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateSink(::grpc::ClientContext* context, const ::google::logging::v2::CreateSinkRequest* request, ::google::logging::v2::LogSink* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Updates a sink. This method replaces the following fields in the existing
      // sink with values from the new sink: `destination`, and `filter`.
      //
      // The updated sink might also have a new `writer_identity`; see the
      // `unique_writer_identity` field.
      virtual void UpdateSink(::grpc::ClientContext* context, const ::google::logging::v2::UpdateSinkRequest* request, ::google::logging::v2::LogSink* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateSink(::grpc::ClientContext* context, const ::google::logging::v2::UpdateSinkRequest* request, ::google::logging::v2::LogSink* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateSink(::grpc::ClientContext* context, const ::google::logging::v2::UpdateSinkRequest* request, ::google::logging::v2::LogSink* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Deletes a sink. If the sink has a unique `writer_identity`, then that
      // service account is also deleted.
      virtual void DeleteSink(::grpc::ClientContext* context, const ::google::logging::v2::DeleteSinkRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteSink(::grpc::ClientContext* context, const ::google::logging::v2::DeleteSinkRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteSink(::grpc::ClientContext* context, const ::google::logging::v2::DeleteSinkRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Lists all the exclusions in a parent resource.
      virtual void ListExclusions(::grpc::ClientContext* context, const ::google::logging::v2::ListExclusionsRequest* request, ::google::logging::v2::ListExclusionsResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListExclusions(::grpc::ClientContext* context, const ::google::logging::v2::ListExclusionsRequest* request, ::google::logging::v2::ListExclusionsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ListExclusions(::grpc::ClientContext* context, const ::google::logging::v2::ListExclusionsRequest* request, ::google::logging::v2::ListExclusionsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Gets the description of an exclusion.
      virtual void GetExclusion(::grpc::ClientContext* context, const ::google::logging::v2::GetExclusionRequest* request, ::google::logging::v2::LogExclusion* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetExclusion(::grpc::ClientContext* context, const ::google::logging::v2::GetExclusionRequest* request, ::google::logging::v2::LogExclusion* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetExclusion(::grpc::ClientContext* context, const ::google::logging::v2::GetExclusionRequest* request, ::google::logging::v2::LogExclusion* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Creates a new exclusion in a specified parent resource.
      // Only log entries belonging to that resource can be excluded.
      // You can have up to 10 exclusions in a resource.
      virtual void CreateExclusion(::grpc::ClientContext* context, const ::google::logging::v2::CreateExclusionRequest* request, ::google::logging::v2::LogExclusion* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateExclusion(::grpc::ClientContext* context, const ::google::logging::v2::CreateExclusionRequest* request, ::google::logging::v2::LogExclusion* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateExclusion(::grpc::ClientContext* context, const ::google::logging::v2::CreateExclusionRequest* request, ::google::logging::v2::LogExclusion* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Changes one or more properties of an existing exclusion.
      virtual void UpdateExclusion(::grpc::ClientContext* context, const ::google::logging::v2::UpdateExclusionRequest* request, ::google::logging::v2::LogExclusion* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateExclusion(::grpc::ClientContext* context, const ::google::logging::v2::UpdateExclusionRequest* request, ::google::logging::v2::LogExclusion* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateExclusion(::grpc::ClientContext* context, const ::google::logging::v2::UpdateExclusionRequest* request, ::google::logging::v2::LogExclusion* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Deletes an exclusion.
      virtual void DeleteExclusion(::grpc::ClientContext* context, const ::google::logging::v2::DeleteExclusionRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteExclusion(::grpc::ClientContext* context, const ::google::logging::v2::DeleteExclusionRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteExclusion(::grpc::ClientContext* context, const ::google::logging::v2::DeleteExclusionRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Gets the Logs Router CMEK settings for the given resource.
      //
      // Note: CMEK for the Logs Router can currently only be configured for GCP
      // organizations. Once configured, it applies to all projects and folders in
      // the GCP organization.
      //
      // See [Enabling CMEK for Logs
      // Router](https://cloud.google.com/logging/docs/routing/managed-encryption)
      // for more information.
      virtual void GetCmekSettings(::grpc::ClientContext* context, const ::google::logging::v2::GetCmekSettingsRequest* request, ::google::logging::v2::CmekSettings* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetCmekSettings(::grpc::ClientContext* context, const ::google::logging::v2::GetCmekSettingsRequest* request, ::google::logging::v2::CmekSettings* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetCmekSettings(::grpc::ClientContext* context, const ::google::logging::v2::GetCmekSettingsRequest* request, ::google::logging::v2::CmekSettings* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Updates the Logs Router CMEK settings for the given resource.
      //
      // Note: CMEK for the Logs Router can currently only be configured for GCP
      // organizations. Once configured, it applies to all projects and folders in
      // the GCP organization.
      //
      // [UpdateCmekSettings][google.logging.v2.ConfigServiceV2.UpdateCmekSettings]
      // will fail if 1) `kms_key_name` is invalid, or 2) the associated service
      // account does not have the required
      // `roles/cloudkms.cryptoKeyEncrypterDecrypter` role assigned for the key, or
      // 3) access to the key is disabled.
      //
      // See [Enabling CMEK for Logs
      // Router](https://cloud.google.com/logging/docs/routing/managed-encryption)
      // for more information.
      virtual void UpdateCmekSettings(::grpc::ClientContext* context, const ::google::logging::v2::UpdateCmekSettingsRequest* request, ::google::logging::v2::CmekSettings* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateCmekSettings(::grpc::ClientContext* context, const ::google::logging::v2::UpdateCmekSettingsRequest* request, ::google::logging::v2::CmekSettings* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateCmekSettings(::grpc::ClientContext* context, const ::google::logging::v2::UpdateCmekSettingsRequest* request, ::google::logging::v2::CmekSettings* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::ListBucketsResponse>* AsyncListBucketsRaw(::grpc::ClientContext* context, const ::google::logging::v2::ListBucketsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::ListBucketsResponse>* PrepareAsyncListBucketsRaw(::grpc::ClientContext* context, const ::google::logging::v2::ListBucketsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogBucket>* AsyncGetBucketRaw(::grpc::ClientContext* context, const ::google::logging::v2::GetBucketRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogBucket>* PrepareAsyncGetBucketRaw(::grpc::ClientContext* context, const ::google::logging::v2::GetBucketRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogBucket>* AsyncCreateBucketRaw(::grpc::ClientContext* context, const ::google::logging::v2::CreateBucketRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogBucket>* PrepareAsyncCreateBucketRaw(::grpc::ClientContext* context, const ::google::logging::v2::CreateBucketRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogBucket>* AsyncUpdateBucketRaw(::grpc::ClientContext* context, const ::google::logging::v2::UpdateBucketRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogBucket>* PrepareAsyncUpdateBucketRaw(::grpc::ClientContext* context, const ::google::logging::v2::UpdateBucketRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteBucketRaw(::grpc::ClientContext* context, const ::google::logging::v2::DeleteBucketRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncDeleteBucketRaw(::grpc::ClientContext* context, const ::google::logging::v2::DeleteBucketRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncUndeleteBucketRaw(::grpc::ClientContext* context, const ::google::logging::v2::UndeleteBucketRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncUndeleteBucketRaw(::grpc::ClientContext* context, const ::google::logging::v2::UndeleteBucketRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::ListViewsResponse>* AsyncListViewsRaw(::grpc::ClientContext* context, const ::google::logging::v2::ListViewsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::ListViewsResponse>* PrepareAsyncListViewsRaw(::grpc::ClientContext* context, const ::google::logging::v2::ListViewsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogView>* AsyncGetViewRaw(::grpc::ClientContext* context, const ::google::logging::v2::GetViewRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogView>* PrepareAsyncGetViewRaw(::grpc::ClientContext* context, const ::google::logging::v2::GetViewRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogView>* AsyncCreateViewRaw(::grpc::ClientContext* context, const ::google::logging::v2::CreateViewRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogView>* PrepareAsyncCreateViewRaw(::grpc::ClientContext* context, const ::google::logging::v2::CreateViewRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogView>* AsyncUpdateViewRaw(::grpc::ClientContext* context, const ::google::logging::v2::UpdateViewRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogView>* PrepareAsyncUpdateViewRaw(::grpc::ClientContext* context, const ::google::logging::v2::UpdateViewRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteViewRaw(::grpc::ClientContext* context, const ::google::logging::v2::DeleteViewRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncDeleteViewRaw(::grpc::ClientContext* context, const ::google::logging::v2::DeleteViewRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::ListSinksResponse>* AsyncListSinksRaw(::grpc::ClientContext* context, const ::google::logging::v2::ListSinksRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::ListSinksResponse>* PrepareAsyncListSinksRaw(::grpc::ClientContext* context, const ::google::logging::v2::ListSinksRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogSink>* AsyncGetSinkRaw(::grpc::ClientContext* context, const ::google::logging::v2::GetSinkRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogSink>* PrepareAsyncGetSinkRaw(::grpc::ClientContext* context, const ::google::logging::v2::GetSinkRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogSink>* AsyncCreateSinkRaw(::grpc::ClientContext* context, const ::google::logging::v2::CreateSinkRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogSink>* PrepareAsyncCreateSinkRaw(::grpc::ClientContext* context, const ::google::logging::v2::CreateSinkRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogSink>* AsyncUpdateSinkRaw(::grpc::ClientContext* context, const ::google::logging::v2::UpdateSinkRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogSink>* PrepareAsyncUpdateSinkRaw(::grpc::ClientContext* context, const ::google::logging::v2::UpdateSinkRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteSinkRaw(::grpc::ClientContext* context, const ::google::logging::v2::DeleteSinkRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncDeleteSinkRaw(::grpc::ClientContext* context, const ::google::logging::v2::DeleteSinkRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::ListExclusionsResponse>* AsyncListExclusionsRaw(::grpc::ClientContext* context, const ::google::logging::v2::ListExclusionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::ListExclusionsResponse>* PrepareAsyncListExclusionsRaw(::grpc::ClientContext* context, const ::google::logging::v2::ListExclusionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogExclusion>* AsyncGetExclusionRaw(::grpc::ClientContext* context, const ::google::logging::v2::GetExclusionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogExclusion>* PrepareAsyncGetExclusionRaw(::grpc::ClientContext* context, const ::google::logging::v2::GetExclusionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogExclusion>* AsyncCreateExclusionRaw(::grpc::ClientContext* context, const ::google::logging::v2::CreateExclusionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogExclusion>* PrepareAsyncCreateExclusionRaw(::grpc::ClientContext* context, const ::google::logging::v2::CreateExclusionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogExclusion>* AsyncUpdateExclusionRaw(::grpc::ClientContext* context, const ::google::logging::v2::UpdateExclusionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogExclusion>* PrepareAsyncUpdateExclusionRaw(::grpc::ClientContext* context, const ::google::logging::v2::UpdateExclusionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteExclusionRaw(::grpc::ClientContext* context, const ::google::logging::v2::DeleteExclusionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncDeleteExclusionRaw(::grpc::ClientContext* context, const ::google::logging::v2::DeleteExclusionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::CmekSettings>* AsyncGetCmekSettingsRaw(::grpc::ClientContext* context, const ::google::logging::v2::GetCmekSettingsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::CmekSettings>* PrepareAsyncGetCmekSettingsRaw(::grpc::ClientContext* context, const ::google::logging::v2::GetCmekSettingsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::CmekSettings>* AsyncUpdateCmekSettingsRaw(::grpc::ClientContext* context, const ::google::logging::v2::UpdateCmekSettingsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::CmekSettings>* PrepareAsyncUpdateCmekSettingsRaw(::grpc::ClientContext* context, const ::google::logging::v2::UpdateCmekSettingsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status ListBuckets(::grpc::ClientContext* context, const ::google::logging::v2::ListBucketsRequest& request, ::google::logging::v2::ListBucketsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::ListBucketsResponse>> AsyncListBuckets(::grpc::ClientContext* context, const ::google::logging::v2::ListBucketsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::ListBucketsResponse>>(AsyncListBucketsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::ListBucketsResponse>> PrepareAsyncListBuckets(::grpc::ClientContext* context, const ::google::logging::v2::ListBucketsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::ListBucketsResponse>>(PrepareAsyncListBucketsRaw(context, request, cq));
    }
    ::grpc::Status GetBucket(::grpc::ClientContext* context, const ::google::logging::v2::GetBucketRequest& request, ::google::logging::v2::LogBucket* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogBucket>> AsyncGetBucket(::grpc::ClientContext* context, const ::google::logging::v2::GetBucketRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogBucket>>(AsyncGetBucketRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogBucket>> PrepareAsyncGetBucket(::grpc::ClientContext* context, const ::google::logging::v2::GetBucketRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogBucket>>(PrepareAsyncGetBucketRaw(context, request, cq));
    }
    ::grpc::Status CreateBucket(::grpc::ClientContext* context, const ::google::logging::v2::CreateBucketRequest& request, ::google::logging::v2::LogBucket* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogBucket>> AsyncCreateBucket(::grpc::ClientContext* context, const ::google::logging::v2::CreateBucketRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogBucket>>(AsyncCreateBucketRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogBucket>> PrepareAsyncCreateBucket(::grpc::ClientContext* context, const ::google::logging::v2::CreateBucketRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogBucket>>(PrepareAsyncCreateBucketRaw(context, request, cq));
    }
    ::grpc::Status UpdateBucket(::grpc::ClientContext* context, const ::google::logging::v2::UpdateBucketRequest& request, ::google::logging::v2::LogBucket* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogBucket>> AsyncUpdateBucket(::grpc::ClientContext* context, const ::google::logging::v2::UpdateBucketRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogBucket>>(AsyncUpdateBucketRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogBucket>> PrepareAsyncUpdateBucket(::grpc::ClientContext* context, const ::google::logging::v2::UpdateBucketRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogBucket>>(PrepareAsyncUpdateBucketRaw(context, request, cq));
    }
    ::grpc::Status DeleteBucket(::grpc::ClientContext* context, const ::google::logging::v2::DeleteBucketRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeleteBucket(::grpc::ClientContext* context, const ::google::logging::v2::DeleteBucketRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteBucketRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncDeleteBucket(::grpc::ClientContext* context, const ::google::logging::v2::DeleteBucketRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncDeleteBucketRaw(context, request, cq));
    }
    ::grpc::Status UndeleteBucket(::grpc::ClientContext* context, const ::google::logging::v2::UndeleteBucketRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncUndeleteBucket(::grpc::ClientContext* context, const ::google::logging::v2::UndeleteBucketRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncUndeleteBucketRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncUndeleteBucket(::grpc::ClientContext* context, const ::google::logging::v2::UndeleteBucketRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncUndeleteBucketRaw(context, request, cq));
    }
    ::grpc::Status ListViews(::grpc::ClientContext* context, const ::google::logging::v2::ListViewsRequest& request, ::google::logging::v2::ListViewsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::ListViewsResponse>> AsyncListViews(::grpc::ClientContext* context, const ::google::logging::v2::ListViewsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::ListViewsResponse>>(AsyncListViewsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::ListViewsResponse>> PrepareAsyncListViews(::grpc::ClientContext* context, const ::google::logging::v2::ListViewsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::ListViewsResponse>>(PrepareAsyncListViewsRaw(context, request, cq));
    }
    ::grpc::Status GetView(::grpc::ClientContext* context, const ::google::logging::v2::GetViewRequest& request, ::google::logging::v2::LogView* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogView>> AsyncGetView(::grpc::ClientContext* context, const ::google::logging::v2::GetViewRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogView>>(AsyncGetViewRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogView>> PrepareAsyncGetView(::grpc::ClientContext* context, const ::google::logging::v2::GetViewRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogView>>(PrepareAsyncGetViewRaw(context, request, cq));
    }
    ::grpc::Status CreateView(::grpc::ClientContext* context, const ::google::logging::v2::CreateViewRequest& request, ::google::logging::v2::LogView* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogView>> AsyncCreateView(::grpc::ClientContext* context, const ::google::logging::v2::CreateViewRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogView>>(AsyncCreateViewRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogView>> PrepareAsyncCreateView(::grpc::ClientContext* context, const ::google::logging::v2::CreateViewRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogView>>(PrepareAsyncCreateViewRaw(context, request, cq));
    }
    ::grpc::Status UpdateView(::grpc::ClientContext* context, const ::google::logging::v2::UpdateViewRequest& request, ::google::logging::v2::LogView* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogView>> AsyncUpdateView(::grpc::ClientContext* context, const ::google::logging::v2::UpdateViewRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogView>>(AsyncUpdateViewRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogView>> PrepareAsyncUpdateView(::grpc::ClientContext* context, const ::google::logging::v2::UpdateViewRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogView>>(PrepareAsyncUpdateViewRaw(context, request, cq));
    }
    ::grpc::Status DeleteView(::grpc::ClientContext* context, const ::google::logging::v2::DeleteViewRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeleteView(::grpc::ClientContext* context, const ::google::logging::v2::DeleteViewRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteViewRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncDeleteView(::grpc::ClientContext* context, const ::google::logging::v2::DeleteViewRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncDeleteViewRaw(context, request, cq));
    }
    ::grpc::Status ListSinks(::grpc::ClientContext* context, const ::google::logging::v2::ListSinksRequest& request, ::google::logging::v2::ListSinksResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::ListSinksResponse>> AsyncListSinks(::grpc::ClientContext* context, const ::google::logging::v2::ListSinksRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::ListSinksResponse>>(AsyncListSinksRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::ListSinksResponse>> PrepareAsyncListSinks(::grpc::ClientContext* context, const ::google::logging::v2::ListSinksRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::ListSinksResponse>>(PrepareAsyncListSinksRaw(context, request, cq));
    }
    ::grpc::Status GetSink(::grpc::ClientContext* context, const ::google::logging::v2::GetSinkRequest& request, ::google::logging::v2::LogSink* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogSink>> AsyncGetSink(::grpc::ClientContext* context, const ::google::logging::v2::GetSinkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogSink>>(AsyncGetSinkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogSink>> PrepareAsyncGetSink(::grpc::ClientContext* context, const ::google::logging::v2::GetSinkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogSink>>(PrepareAsyncGetSinkRaw(context, request, cq));
    }
    ::grpc::Status CreateSink(::grpc::ClientContext* context, const ::google::logging::v2::CreateSinkRequest& request, ::google::logging::v2::LogSink* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogSink>> AsyncCreateSink(::grpc::ClientContext* context, const ::google::logging::v2::CreateSinkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogSink>>(AsyncCreateSinkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogSink>> PrepareAsyncCreateSink(::grpc::ClientContext* context, const ::google::logging::v2::CreateSinkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogSink>>(PrepareAsyncCreateSinkRaw(context, request, cq));
    }
    ::grpc::Status UpdateSink(::grpc::ClientContext* context, const ::google::logging::v2::UpdateSinkRequest& request, ::google::logging::v2::LogSink* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogSink>> AsyncUpdateSink(::grpc::ClientContext* context, const ::google::logging::v2::UpdateSinkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogSink>>(AsyncUpdateSinkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogSink>> PrepareAsyncUpdateSink(::grpc::ClientContext* context, const ::google::logging::v2::UpdateSinkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogSink>>(PrepareAsyncUpdateSinkRaw(context, request, cq));
    }
    ::grpc::Status DeleteSink(::grpc::ClientContext* context, const ::google::logging::v2::DeleteSinkRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeleteSink(::grpc::ClientContext* context, const ::google::logging::v2::DeleteSinkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteSinkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncDeleteSink(::grpc::ClientContext* context, const ::google::logging::v2::DeleteSinkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncDeleteSinkRaw(context, request, cq));
    }
    ::grpc::Status ListExclusions(::grpc::ClientContext* context, const ::google::logging::v2::ListExclusionsRequest& request, ::google::logging::v2::ListExclusionsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::ListExclusionsResponse>> AsyncListExclusions(::grpc::ClientContext* context, const ::google::logging::v2::ListExclusionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::ListExclusionsResponse>>(AsyncListExclusionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::ListExclusionsResponse>> PrepareAsyncListExclusions(::grpc::ClientContext* context, const ::google::logging::v2::ListExclusionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::ListExclusionsResponse>>(PrepareAsyncListExclusionsRaw(context, request, cq));
    }
    ::grpc::Status GetExclusion(::grpc::ClientContext* context, const ::google::logging::v2::GetExclusionRequest& request, ::google::logging::v2::LogExclusion* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogExclusion>> AsyncGetExclusion(::grpc::ClientContext* context, const ::google::logging::v2::GetExclusionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogExclusion>>(AsyncGetExclusionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogExclusion>> PrepareAsyncGetExclusion(::grpc::ClientContext* context, const ::google::logging::v2::GetExclusionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogExclusion>>(PrepareAsyncGetExclusionRaw(context, request, cq));
    }
    ::grpc::Status CreateExclusion(::grpc::ClientContext* context, const ::google::logging::v2::CreateExclusionRequest& request, ::google::logging::v2::LogExclusion* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogExclusion>> AsyncCreateExclusion(::grpc::ClientContext* context, const ::google::logging::v2::CreateExclusionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogExclusion>>(AsyncCreateExclusionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogExclusion>> PrepareAsyncCreateExclusion(::grpc::ClientContext* context, const ::google::logging::v2::CreateExclusionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogExclusion>>(PrepareAsyncCreateExclusionRaw(context, request, cq));
    }
    ::grpc::Status UpdateExclusion(::grpc::ClientContext* context, const ::google::logging::v2::UpdateExclusionRequest& request, ::google::logging::v2::LogExclusion* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogExclusion>> AsyncUpdateExclusion(::grpc::ClientContext* context, const ::google::logging::v2::UpdateExclusionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogExclusion>>(AsyncUpdateExclusionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogExclusion>> PrepareAsyncUpdateExclusion(::grpc::ClientContext* context, const ::google::logging::v2::UpdateExclusionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogExclusion>>(PrepareAsyncUpdateExclusionRaw(context, request, cq));
    }
    ::grpc::Status DeleteExclusion(::grpc::ClientContext* context, const ::google::logging::v2::DeleteExclusionRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeleteExclusion(::grpc::ClientContext* context, const ::google::logging::v2::DeleteExclusionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteExclusionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncDeleteExclusion(::grpc::ClientContext* context, const ::google::logging::v2::DeleteExclusionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncDeleteExclusionRaw(context, request, cq));
    }
    ::grpc::Status GetCmekSettings(::grpc::ClientContext* context, const ::google::logging::v2::GetCmekSettingsRequest& request, ::google::logging::v2::CmekSettings* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::CmekSettings>> AsyncGetCmekSettings(::grpc::ClientContext* context, const ::google::logging::v2::GetCmekSettingsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::CmekSettings>>(AsyncGetCmekSettingsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::CmekSettings>> PrepareAsyncGetCmekSettings(::grpc::ClientContext* context, const ::google::logging::v2::GetCmekSettingsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::CmekSettings>>(PrepareAsyncGetCmekSettingsRaw(context, request, cq));
    }
    ::grpc::Status UpdateCmekSettings(::grpc::ClientContext* context, const ::google::logging::v2::UpdateCmekSettingsRequest& request, ::google::logging::v2::CmekSettings* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::CmekSettings>> AsyncUpdateCmekSettings(::grpc::ClientContext* context, const ::google::logging::v2::UpdateCmekSettingsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::CmekSettings>>(AsyncUpdateCmekSettingsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::CmekSettings>> PrepareAsyncUpdateCmekSettings(::grpc::ClientContext* context, const ::google::logging::v2::UpdateCmekSettingsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::CmekSettings>>(PrepareAsyncUpdateCmekSettingsRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void ListBuckets(::grpc::ClientContext* context, const ::google::logging::v2::ListBucketsRequest* request, ::google::logging::v2::ListBucketsResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListBuckets(::grpc::ClientContext* context, const ::google::logging::v2::ListBucketsRequest* request, ::google::logging::v2::ListBucketsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ListBuckets(::grpc::ClientContext* context, const ::google::logging::v2::ListBucketsRequest* request, ::google::logging::v2::ListBucketsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetBucket(::grpc::ClientContext* context, const ::google::logging::v2::GetBucketRequest* request, ::google::logging::v2::LogBucket* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetBucket(::grpc::ClientContext* context, const ::google::logging::v2::GetBucketRequest* request, ::google::logging::v2::LogBucket* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetBucket(::grpc::ClientContext* context, const ::google::logging::v2::GetBucketRequest* request, ::google::logging::v2::LogBucket* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void CreateBucket(::grpc::ClientContext* context, const ::google::logging::v2::CreateBucketRequest* request, ::google::logging::v2::LogBucket* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateBucket(::grpc::ClientContext* context, const ::google::logging::v2::CreateBucketRequest* request, ::google::logging::v2::LogBucket* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateBucket(::grpc::ClientContext* context, const ::google::logging::v2::CreateBucketRequest* request, ::google::logging::v2::LogBucket* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void UpdateBucket(::grpc::ClientContext* context, const ::google::logging::v2::UpdateBucketRequest* request, ::google::logging::v2::LogBucket* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateBucket(::grpc::ClientContext* context, const ::google::logging::v2::UpdateBucketRequest* request, ::google::logging::v2::LogBucket* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateBucket(::grpc::ClientContext* context, const ::google::logging::v2::UpdateBucketRequest* request, ::google::logging::v2::LogBucket* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteBucket(::grpc::ClientContext* context, const ::google::logging::v2::DeleteBucketRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteBucket(::grpc::ClientContext* context, const ::google::logging::v2::DeleteBucketRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteBucket(::grpc::ClientContext* context, const ::google::logging::v2::DeleteBucketRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void UndeleteBucket(::grpc::ClientContext* context, const ::google::logging::v2::UndeleteBucketRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UndeleteBucket(::grpc::ClientContext* context, const ::google::logging::v2::UndeleteBucketRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UndeleteBucket(::grpc::ClientContext* context, const ::google::logging::v2::UndeleteBucketRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ListViews(::grpc::ClientContext* context, const ::google::logging::v2::ListViewsRequest* request, ::google::logging::v2::ListViewsResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListViews(::grpc::ClientContext* context, const ::google::logging::v2::ListViewsRequest* request, ::google::logging::v2::ListViewsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ListViews(::grpc::ClientContext* context, const ::google::logging::v2::ListViewsRequest* request, ::google::logging::v2::ListViewsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetView(::grpc::ClientContext* context, const ::google::logging::v2::GetViewRequest* request, ::google::logging::v2::LogView* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetView(::grpc::ClientContext* context, const ::google::logging::v2::GetViewRequest* request, ::google::logging::v2::LogView* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetView(::grpc::ClientContext* context, const ::google::logging::v2::GetViewRequest* request, ::google::logging::v2::LogView* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void CreateView(::grpc::ClientContext* context, const ::google::logging::v2::CreateViewRequest* request, ::google::logging::v2::LogView* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateView(::grpc::ClientContext* context, const ::google::logging::v2::CreateViewRequest* request, ::google::logging::v2::LogView* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateView(::grpc::ClientContext* context, const ::google::logging::v2::CreateViewRequest* request, ::google::logging::v2::LogView* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void UpdateView(::grpc::ClientContext* context, const ::google::logging::v2::UpdateViewRequest* request, ::google::logging::v2::LogView* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateView(::grpc::ClientContext* context, const ::google::logging::v2::UpdateViewRequest* request, ::google::logging::v2::LogView* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateView(::grpc::ClientContext* context, const ::google::logging::v2::UpdateViewRequest* request, ::google::logging::v2::LogView* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteView(::grpc::ClientContext* context, const ::google::logging::v2::DeleteViewRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteView(::grpc::ClientContext* context, const ::google::logging::v2::DeleteViewRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteView(::grpc::ClientContext* context, const ::google::logging::v2::DeleteViewRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ListSinks(::grpc::ClientContext* context, const ::google::logging::v2::ListSinksRequest* request, ::google::logging::v2::ListSinksResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListSinks(::grpc::ClientContext* context, const ::google::logging::v2::ListSinksRequest* request, ::google::logging::v2::ListSinksResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ListSinks(::grpc::ClientContext* context, const ::google::logging::v2::ListSinksRequest* request, ::google::logging::v2::ListSinksResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetSink(::grpc::ClientContext* context, const ::google::logging::v2::GetSinkRequest* request, ::google::logging::v2::LogSink* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetSink(::grpc::ClientContext* context, const ::google::logging::v2::GetSinkRequest* request, ::google::logging::v2::LogSink* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetSink(::grpc::ClientContext* context, const ::google::logging::v2::GetSinkRequest* request, ::google::logging::v2::LogSink* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void CreateSink(::grpc::ClientContext* context, const ::google::logging::v2::CreateSinkRequest* request, ::google::logging::v2::LogSink* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateSink(::grpc::ClientContext* context, const ::google::logging::v2::CreateSinkRequest* request, ::google::logging::v2::LogSink* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateSink(::grpc::ClientContext* context, const ::google::logging::v2::CreateSinkRequest* request, ::google::logging::v2::LogSink* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void UpdateSink(::grpc::ClientContext* context, const ::google::logging::v2::UpdateSinkRequest* request, ::google::logging::v2::LogSink* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateSink(::grpc::ClientContext* context, const ::google::logging::v2::UpdateSinkRequest* request, ::google::logging::v2::LogSink* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateSink(::grpc::ClientContext* context, const ::google::logging::v2::UpdateSinkRequest* request, ::google::logging::v2::LogSink* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteSink(::grpc::ClientContext* context, const ::google::logging::v2::DeleteSinkRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteSink(::grpc::ClientContext* context, const ::google::logging::v2::DeleteSinkRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteSink(::grpc::ClientContext* context, const ::google::logging::v2::DeleteSinkRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ListExclusions(::grpc::ClientContext* context, const ::google::logging::v2::ListExclusionsRequest* request, ::google::logging::v2::ListExclusionsResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListExclusions(::grpc::ClientContext* context, const ::google::logging::v2::ListExclusionsRequest* request, ::google::logging::v2::ListExclusionsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ListExclusions(::grpc::ClientContext* context, const ::google::logging::v2::ListExclusionsRequest* request, ::google::logging::v2::ListExclusionsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetExclusion(::grpc::ClientContext* context, const ::google::logging::v2::GetExclusionRequest* request, ::google::logging::v2::LogExclusion* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetExclusion(::grpc::ClientContext* context, const ::google::logging::v2::GetExclusionRequest* request, ::google::logging::v2::LogExclusion* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetExclusion(::grpc::ClientContext* context, const ::google::logging::v2::GetExclusionRequest* request, ::google::logging::v2::LogExclusion* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void CreateExclusion(::grpc::ClientContext* context, const ::google::logging::v2::CreateExclusionRequest* request, ::google::logging::v2::LogExclusion* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateExclusion(::grpc::ClientContext* context, const ::google::logging::v2::CreateExclusionRequest* request, ::google::logging::v2::LogExclusion* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateExclusion(::grpc::ClientContext* context, const ::google::logging::v2::CreateExclusionRequest* request, ::google::logging::v2::LogExclusion* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void UpdateExclusion(::grpc::ClientContext* context, const ::google::logging::v2::UpdateExclusionRequest* request, ::google::logging::v2::LogExclusion* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateExclusion(::grpc::ClientContext* context, const ::google::logging::v2::UpdateExclusionRequest* request, ::google::logging::v2::LogExclusion* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateExclusion(::grpc::ClientContext* context, const ::google::logging::v2::UpdateExclusionRequest* request, ::google::logging::v2::LogExclusion* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteExclusion(::grpc::ClientContext* context, const ::google::logging::v2::DeleteExclusionRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteExclusion(::grpc::ClientContext* context, const ::google::logging::v2::DeleteExclusionRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteExclusion(::grpc::ClientContext* context, const ::google::logging::v2::DeleteExclusionRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetCmekSettings(::grpc::ClientContext* context, const ::google::logging::v2::GetCmekSettingsRequest* request, ::google::logging::v2::CmekSettings* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetCmekSettings(::grpc::ClientContext* context, const ::google::logging::v2::GetCmekSettingsRequest* request, ::google::logging::v2::CmekSettings* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetCmekSettings(::grpc::ClientContext* context, const ::google::logging::v2::GetCmekSettingsRequest* request, ::google::logging::v2::CmekSettings* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void UpdateCmekSettings(::grpc::ClientContext* context, const ::google::logging::v2::UpdateCmekSettingsRequest* request, ::google::logging::v2::CmekSettings* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateCmekSettings(::grpc::ClientContext* context, const ::google::logging::v2::UpdateCmekSettingsRequest* request, ::google::logging::v2::CmekSettings* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateCmekSettings(::grpc::ClientContext* context, const ::google::logging::v2::UpdateCmekSettingsRequest* request, ::google::logging::v2::CmekSettings* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::google::logging::v2::ListBucketsResponse>* AsyncListBucketsRaw(::grpc::ClientContext* context, const ::google::logging::v2::ListBucketsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::logging::v2::ListBucketsResponse>* PrepareAsyncListBucketsRaw(::grpc::ClientContext* context, const ::google::logging::v2::ListBucketsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogBucket>* AsyncGetBucketRaw(::grpc::ClientContext* context, const ::google::logging::v2::GetBucketRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogBucket>* PrepareAsyncGetBucketRaw(::grpc::ClientContext* context, const ::google::logging::v2::GetBucketRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogBucket>* AsyncCreateBucketRaw(::grpc::ClientContext* context, const ::google::logging::v2::CreateBucketRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogBucket>* PrepareAsyncCreateBucketRaw(::grpc::ClientContext* context, const ::google::logging::v2::CreateBucketRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogBucket>* AsyncUpdateBucketRaw(::grpc::ClientContext* context, const ::google::logging::v2::UpdateBucketRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogBucket>* PrepareAsyncUpdateBucketRaw(::grpc::ClientContext* context, const ::google::logging::v2::UpdateBucketRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteBucketRaw(::grpc::ClientContext* context, const ::google::logging::v2::DeleteBucketRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncDeleteBucketRaw(::grpc::ClientContext* context, const ::google::logging::v2::DeleteBucketRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncUndeleteBucketRaw(::grpc::ClientContext* context, const ::google::logging::v2::UndeleteBucketRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncUndeleteBucketRaw(::grpc::ClientContext* context, const ::google::logging::v2::UndeleteBucketRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::logging::v2::ListViewsResponse>* AsyncListViewsRaw(::grpc::ClientContext* context, const ::google::logging::v2::ListViewsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::logging::v2::ListViewsResponse>* PrepareAsyncListViewsRaw(::grpc::ClientContext* context, const ::google::logging::v2::ListViewsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogView>* AsyncGetViewRaw(::grpc::ClientContext* context, const ::google::logging::v2::GetViewRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogView>* PrepareAsyncGetViewRaw(::grpc::ClientContext* context, const ::google::logging::v2::GetViewRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogView>* AsyncCreateViewRaw(::grpc::ClientContext* context, const ::google::logging::v2::CreateViewRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogView>* PrepareAsyncCreateViewRaw(::grpc::ClientContext* context, const ::google::logging::v2::CreateViewRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogView>* AsyncUpdateViewRaw(::grpc::ClientContext* context, const ::google::logging::v2::UpdateViewRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogView>* PrepareAsyncUpdateViewRaw(::grpc::ClientContext* context, const ::google::logging::v2::UpdateViewRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteViewRaw(::grpc::ClientContext* context, const ::google::logging::v2::DeleteViewRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncDeleteViewRaw(::grpc::ClientContext* context, const ::google::logging::v2::DeleteViewRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::logging::v2::ListSinksResponse>* AsyncListSinksRaw(::grpc::ClientContext* context, const ::google::logging::v2::ListSinksRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::logging::v2::ListSinksResponse>* PrepareAsyncListSinksRaw(::grpc::ClientContext* context, const ::google::logging::v2::ListSinksRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogSink>* AsyncGetSinkRaw(::grpc::ClientContext* context, const ::google::logging::v2::GetSinkRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogSink>* PrepareAsyncGetSinkRaw(::grpc::ClientContext* context, const ::google::logging::v2::GetSinkRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogSink>* AsyncCreateSinkRaw(::grpc::ClientContext* context, const ::google::logging::v2::CreateSinkRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogSink>* PrepareAsyncCreateSinkRaw(::grpc::ClientContext* context, const ::google::logging::v2::CreateSinkRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogSink>* AsyncUpdateSinkRaw(::grpc::ClientContext* context, const ::google::logging::v2::UpdateSinkRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogSink>* PrepareAsyncUpdateSinkRaw(::grpc::ClientContext* context, const ::google::logging::v2::UpdateSinkRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteSinkRaw(::grpc::ClientContext* context, const ::google::logging::v2::DeleteSinkRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncDeleteSinkRaw(::grpc::ClientContext* context, const ::google::logging::v2::DeleteSinkRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::logging::v2::ListExclusionsResponse>* AsyncListExclusionsRaw(::grpc::ClientContext* context, const ::google::logging::v2::ListExclusionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::logging::v2::ListExclusionsResponse>* PrepareAsyncListExclusionsRaw(::grpc::ClientContext* context, const ::google::logging::v2::ListExclusionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogExclusion>* AsyncGetExclusionRaw(::grpc::ClientContext* context, const ::google::logging::v2::GetExclusionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogExclusion>* PrepareAsyncGetExclusionRaw(::grpc::ClientContext* context, const ::google::logging::v2::GetExclusionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogExclusion>* AsyncCreateExclusionRaw(::grpc::ClientContext* context, const ::google::logging::v2::CreateExclusionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogExclusion>* PrepareAsyncCreateExclusionRaw(::grpc::ClientContext* context, const ::google::logging::v2::CreateExclusionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogExclusion>* AsyncUpdateExclusionRaw(::grpc::ClientContext* context, const ::google::logging::v2::UpdateExclusionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogExclusion>* PrepareAsyncUpdateExclusionRaw(::grpc::ClientContext* context, const ::google::logging::v2::UpdateExclusionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteExclusionRaw(::grpc::ClientContext* context, const ::google::logging::v2::DeleteExclusionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncDeleteExclusionRaw(::grpc::ClientContext* context, const ::google::logging::v2::DeleteExclusionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::logging::v2::CmekSettings>* AsyncGetCmekSettingsRaw(::grpc::ClientContext* context, const ::google::logging::v2::GetCmekSettingsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::logging::v2::CmekSettings>* PrepareAsyncGetCmekSettingsRaw(::grpc::ClientContext* context, const ::google::logging::v2::GetCmekSettingsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::logging::v2::CmekSettings>* AsyncUpdateCmekSettingsRaw(::grpc::ClientContext* context, const ::google::logging::v2::UpdateCmekSettingsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::logging::v2::CmekSettings>* PrepareAsyncUpdateCmekSettingsRaw(::grpc::ClientContext* context, const ::google::logging::v2::UpdateCmekSettingsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ListBuckets_;
    const ::grpc::internal::RpcMethod rpcmethod_GetBucket_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateBucket_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateBucket_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteBucket_;
    const ::grpc::internal::RpcMethod rpcmethod_UndeleteBucket_;
    const ::grpc::internal::RpcMethod rpcmethod_ListViews_;
    const ::grpc::internal::RpcMethod rpcmethod_GetView_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateView_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateView_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteView_;
    const ::grpc::internal::RpcMethod rpcmethod_ListSinks_;
    const ::grpc::internal::RpcMethod rpcmethod_GetSink_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateSink_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateSink_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteSink_;
    const ::grpc::internal::RpcMethod rpcmethod_ListExclusions_;
    const ::grpc::internal::RpcMethod rpcmethod_GetExclusion_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateExclusion_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateExclusion_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteExclusion_;
    const ::grpc::internal::RpcMethod rpcmethod_GetCmekSettings_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateCmekSettings_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Lists buckets.
    virtual ::grpc::Status ListBuckets(::grpc::ServerContext* context, const ::google::logging::v2::ListBucketsRequest* request, ::google::logging::v2::ListBucketsResponse* response);
    // Gets a bucket.
    virtual ::grpc::Status GetBucket(::grpc::ServerContext* context, const ::google::logging::v2::GetBucketRequest* request, ::google::logging::v2::LogBucket* response);
    // Creates a bucket that can be used to store log entries. Once a bucket has
    // been created, the region cannot be changed.
    virtual ::grpc::Status CreateBucket(::grpc::ServerContext* context, const ::google::logging::v2::CreateBucketRequest* request, ::google::logging::v2::LogBucket* response);
    // Updates a bucket. This method replaces the following fields in the
    // existing bucket with values from the new bucket: `retention_period`
    //
    // If the retention period is decreased and the bucket is locked,
    // FAILED_PRECONDITION will be returned.
    //
    // If the bucket has a LifecycleState of DELETE_REQUESTED, FAILED_PRECONDITION
    // will be returned.
    //
    // A buckets region may not be modified after it is created.
    virtual ::grpc::Status UpdateBucket(::grpc::ServerContext* context, const ::google::logging::v2::UpdateBucketRequest* request, ::google::logging::v2::LogBucket* response);
    // Deletes a bucket.
    // Moves the bucket to the DELETE_REQUESTED state. After 7 days, the
    // bucket will be purged and all logs in the bucket will be permanently
    // deleted.
    virtual ::grpc::Status DeleteBucket(::grpc::ServerContext* context, const ::google::logging::v2::DeleteBucketRequest* request, ::google::protobuf::Empty* response);
    // Undeletes a bucket. A bucket that has been deleted may be undeleted within
    // the grace period of 7 days.
    virtual ::grpc::Status UndeleteBucket(::grpc::ServerContext* context, const ::google::logging::v2::UndeleteBucketRequest* request, ::google::protobuf::Empty* response);
    // Lists views on a bucket.
    virtual ::grpc::Status ListViews(::grpc::ServerContext* context, const ::google::logging::v2::ListViewsRequest* request, ::google::logging::v2::ListViewsResponse* response);
    // Gets a view.
    virtual ::grpc::Status GetView(::grpc::ServerContext* context, const ::google::logging::v2::GetViewRequest* request, ::google::logging::v2::LogView* response);
    // Creates a view over logs in a bucket. A bucket may contain a maximum of
    // 50 views.
    virtual ::grpc::Status CreateView(::grpc::ServerContext* context, const ::google::logging::v2::CreateViewRequest* request, ::google::logging::v2::LogView* response);
    // Updates a view. This method replaces the following fields in the existing
    // view with values from the new view: `filter`.
    virtual ::grpc::Status UpdateView(::grpc::ServerContext* context, const ::google::logging::v2::UpdateViewRequest* request, ::google::logging::v2::LogView* response);
    // Deletes a view from a bucket.
    virtual ::grpc::Status DeleteView(::grpc::ServerContext* context, const ::google::logging::v2::DeleteViewRequest* request, ::google::protobuf::Empty* response);
    // Lists sinks.
    virtual ::grpc::Status ListSinks(::grpc::ServerContext* context, const ::google::logging::v2::ListSinksRequest* request, ::google::logging::v2::ListSinksResponse* response);
    // Gets a sink.
    virtual ::grpc::Status GetSink(::grpc::ServerContext* context, const ::google::logging::v2::GetSinkRequest* request, ::google::logging::v2::LogSink* response);
    // Creates a sink that exports specified log entries to a destination. The
    // export of newly-ingested log entries begins immediately, unless the sink's
    // `writer_identity` is not permitted to write to the destination. A sink can
    // export log entries only from the resource owning the sink.
    virtual ::grpc::Status CreateSink(::grpc::ServerContext* context, const ::google::logging::v2::CreateSinkRequest* request, ::google::logging::v2::LogSink* response);
    // Updates a sink. This method replaces the following fields in the existing
    // sink with values from the new sink: `destination`, and `filter`.
    //
    // The updated sink might also have a new `writer_identity`; see the
    // `unique_writer_identity` field.
    virtual ::grpc::Status UpdateSink(::grpc::ServerContext* context, const ::google::logging::v2::UpdateSinkRequest* request, ::google::logging::v2::LogSink* response);
    // Deletes a sink. If the sink has a unique `writer_identity`, then that
    // service account is also deleted.
    virtual ::grpc::Status DeleteSink(::grpc::ServerContext* context, const ::google::logging::v2::DeleteSinkRequest* request, ::google::protobuf::Empty* response);
    // Lists all the exclusions in a parent resource.
    virtual ::grpc::Status ListExclusions(::grpc::ServerContext* context, const ::google::logging::v2::ListExclusionsRequest* request, ::google::logging::v2::ListExclusionsResponse* response);
    // Gets the description of an exclusion.
    virtual ::grpc::Status GetExclusion(::grpc::ServerContext* context, const ::google::logging::v2::GetExclusionRequest* request, ::google::logging::v2::LogExclusion* response);
    // Creates a new exclusion in a specified parent resource.
    // Only log entries belonging to that resource can be excluded.
    // You can have up to 10 exclusions in a resource.
    virtual ::grpc::Status CreateExclusion(::grpc::ServerContext* context, const ::google::logging::v2::CreateExclusionRequest* request, ::google::logging::v2::LogExclusion* response);
    // Changes one or more properties of an existing exclusion.
    virtual ::grpc::Status UpdateExclusion(::grpc::ServerContext* context, const ::google::logging::v2::UpdateExclusionRequest* request, ::google::logging::v2::LogExclusion* response);
    // Deletes an exclusion.
    virtual ::grpc::Status DeleteExclusion(::grpc::ServerContext* context, const ::google::logging::v2::DeleteExclusionRequest* request, ::google::protobuf::Empty* response);
    // Gets the Logs Router CMEK settings for the given resource.
    //
    // Note: CMEK for the Logs Router can currently only be configured for GCP
    // organizations. Once configured, it applies to all projects and folders in
    // the GCP organization.
    //
    // See [Enabling CMEK for Logs
    // Router](https://cloud.google.com/logging/docs/routing/managed-encryption)
    // for more information.
    virtual ::grpc::Status GetCmekSettings(::grpc::ServerContext* context, const ::google::logging::v2::GetCmekSettingsRequest* request, ::google::logging::v2::CmekSettings* response);
    // Updates the Logs Router CMEK settings for the given resource.
    //
    // Note: CMEK for the Logs Router can currently only be configured for GCP
    // organizations. Once configured, it applies to all projects and folders in
    // the GCP organization.
    //
    // [UpdateCmekSettings][google.logging.v2.ConfigServiceV2.UpdateCmekSettings]
    // will fail if 1) `kms_key_name` is invalid, or 2) the associated service
    // account does not have the required
    // `roles/cloudkms.cryptoKeyEncrypterDecrypter` role assigned for the key, or
    // 3) access to the key is disabled.
    //
    // See [Enabling CMEK for Logs
    // Router](https://cloud.google.com/logging/docs/routing/managed-encryption)
    // for more information.
    virtual ::grpc::Status UpdateCmekSettings(::grpc::ServerContext* context, const ::google::logging::v2::UpdateCmekSettingsRequest* request, ::google::logging::v2::CmekSettings* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ListBuckets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListBuckets() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ListBuckets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListBuckets(::grpc::ServerContext* /*context*/, const ::google::logging::v2::ListBucketsRequest* /*request*/, ::google::logging::v2::ListBucketsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListBuckets(::grpc::ServerContext* context, ::google::logging::v2::ListBucketsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::logging::v2::ListBucketsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetBucket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetBucket() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetBucket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBucket(::grpc::ServerContext* /*context*/, const ::google::logging::v2::GetBucketRequest* /*request*/, ::google::logging::v2::LogBucket* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBucket(::grpc::ServerContext* context, ::google::logging::v2::GetBucketRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::logging::v2::LogBucket>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateBucket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateBucket() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_CreateBucket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateBucket(::grpc::ServerContext* /*context*/, const ::google::logging::v2::CreateBucketRequest* /*request*/, ::google::logging::v2::LogBucket* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateBucket(::grpc::ServerContext* context, ::google::logging::v2::CreateBucketRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::logging::v2::LogBucket>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateBucket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateBucket() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_UpdateBucket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateBucket(::grpc::ServerContext* /*context*/, const ::google::logging::v2::UpdateBucketRequest* /*request*/, ::google::logging::v2::LogBucket* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateBucket(::grpc::ServerContext* context, ::google::logging::v2::UpdateBucketRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::logging::v2::LogBucket>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteBucket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteBucket() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_DeleteBucket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteBucket(::grpc::ServerContext* /*context*/, const ::google::logging::v2::DeleteBucketRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteBucket(::grpc::ServerContext* context, ::google::logging::v2::DeleteBucketRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UndeleteBucket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UndeleteBucket() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_UndeleteBucket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UndeleteBucket(::grpc::ServerContext* /*context*/, const ::google::logging::v2::UndeleteBucketRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUndeleteBucket(::grpc::ServerContext* context, ::google::logging::v2::UndeleteBucketRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListViews : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListViews() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_ListViews() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListViews(::grpc::ServerContext* /*context*/, const ::google::logging::v2::ListViewsRequest* /*request*/, ::google::logging::v2::ListViewsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListViews(::grpc::ServerContext* context, ::google::logging::v2::ListViewsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::logging::v2::ListViewsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetView : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetView() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_GetView() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetView(::grpc::ServerContext* /*context*/, const ::google::logging::v2::GetViewRequest* /*request*/, ::google::logging::v2::LogView* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetView(::grpc::ServerContext* context, ::google::logging::v2::GetViewRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::logging::v2::LogView>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateView : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateView() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_CreateView() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateView(::grpc::ServerContext* /*context*/, const ::google::logging::v2::CreateViewRequest* /*request*/, ::google::logging::v2::LogView* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateView(::grpc::ServerContext* context, ::google::logging::v2::CreateViewRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::logging::v2::LogView>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateView : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateView() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_UpdateView() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateView(::grpc::ServerContext* /*context*/, const ::google::logging::v2::UpdateViewRequest* /*request*/, ::google::logging::v2::LogView* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateView(::grpc::ServerContext* context, ::google::logging::v2::UpdateViewRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::logging::v2::LogView>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteView : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteView() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_DeleteView() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteView(::grpc::ServerContext* /*context*/, const ::google::logging::v2::DeleteViewRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteView(::grpc::ServerContext* context, ::google::logging::v2::DeleteViewRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListSinks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListSinks() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_ListSinks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListSinks(::grpc::ServerContext* /*context*/, const ::google::logging::v2::ListSinksRequest* /*request*/, ::google::logging::v2::ListSinksResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListSinks(::grpc::ServerContext* context, ::google::logging::v2::ListSinksRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::logging::v2::ListSinksResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSink : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetSink() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_GetSink() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSink(::grpc::ServerContext* /*context*/, const ::google::logging::v2::GetSinkRequest* /*request*/, ::google::logging::v2::LogSink* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSink(::grpc::ServerContext* context, ::google::logging::v2::GetSinkRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::logging::v2::LogSink>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateSink : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateSink() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_CreateSink() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSink(::grpc::ServerContext* /*context*/, const ::google::logging::v2::CreateSinkRequest* /*request*/, ::google::logging::v2::LogSink* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateSink(::grpc::ServerContext* context, ::google::logging::v2::CreateSinkRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::logging::v2::LogSink>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateSink : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateSink() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_UpdateSink() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateSink(::grpc::ServerContext* /*context*/, const ::google::logging::v2::UpdateSinkRequest* /*request*/, ::google::logging::v2::LogSink* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateSink(::grpc::ServerContext* context, ::google::logging::v2::UpdateSinkRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::logging::v2::LogSink>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteSink : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteSink() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_DeleteSink() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSink(::grpc::ServerContext* /*context*/, const ::google::logging::v2::DeleteSinkRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteSink(::grpc::ServerContext* context, ::google::logging::v2::DeleteSinkRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListExclusions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListExclusions() {
      ::grpc::Service::MarkMethodAsync(16);
    }
    ~WithAsyncMethod_ListExclusions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListExclusions(::grpc::ServerContext* /*context*/, const ::google::logging::v2::ListExclusionsRequest* /*request*/, ::google::logging::v2::ListExclusionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListExclusions(::grpc::ServerContext* context, ::google::logging::v2::ListExclusionsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::logging::v2::ListExclusionsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetExclusion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetExclusion() {
      ::grpc::Service::MarkMethodAsync(17);
    }
    ~WithAsyncMethod_GetExclusion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExclusion(::grpc::ServerContext* /*context*/, const ::google::logging::v2::GetExclusionRequest* /*request*/, ::google::logging::v2::LogExclusion* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetExclusion(::grpc::ServerContext* context, ::google::logging::v2::GetExclusionRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::logging::v2::LogExclusion>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateExclusion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateExclusion() {
      ::grpc::Service::MarkMethodAsync(18);
    }
    ~WithAsyncMethod_CreateExclusion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateExclusion(::grpc::ServerContext* /*context*/, const ::google::logging::v2::CreateExclusionRequest* /*request*/, ::google::logging::v2::LogExclusion* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateExclusion(::grpc::ServerContext* context, ::google::logging::v2::CreateExclusionRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::logging::v2::LogExclusion>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateExclusion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateExclusion() {
      ::grpc::Service::MarkMethodAsync(19);
    }
    ~WithAsyncMethod_UpdateExclusion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateExclusion(::grpc::ServerContext* /*context*/, const ::google::logging::v2::UpdateExclusionRequest* /*request*/, ::google::logging::v2::LogExclusion* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateExclusion(::grpc::ServerContext* context, ::google::logging::v2::UpdateExclusionRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::logging::v2::LogExclusion>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteExclusion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteExclusion() {
      ::grpc::Service::MarkMethodAsync(20);
    }
    ~WithAsyncMethod_DeleteExclusion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteExclusion(::grpc::ServerContext* /*context*/, const ::google::logging::v2::DeleteExclusionRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteExclusion(::grpc::ServerContext* context, ::google::logging::v2::DeleteExclusionRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCmekSettings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetCmekSettings() {
      ::grpc::Service::MarkMethodAsync(21);
    }
    ~WithAsyncMethod_GetCmekSettings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCmekSettings(::grpc::ServerContext* /*context*/, const ::google::logging::v2::GetCmekSettingsRequest* /*request*/, ::google::logging::v2::CmekSettings* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCmekSettings(::grpc::ServerContext* context, ::google::logging::v2::GetCmekSettingsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::logging::v2::CmekSettings>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(21, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateCmekSettings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateCmekSettings() {
      ::grpc::Service::MarkMethodAsync(22);
    }
    ~WithAsyncMethod_UpdateCmekSettings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateCmekSettings(::grpc::ServerContext* /*context*/, const ::google::logging::v2::UpdateCmekSettingsRequest* /*request*/, ::google::logging::v2::CmekSettings* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateCmekSettings(::grpc::ServerContext* context, ::google::logging::v2::UpdateCmekSettingsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::logging::v2::CmekSettings>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(22, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ListBuckets<WithAsyncMethod_GetBucket<WithAsyncMethod_CreateBucket<WithAsyncMethod_UpdateBucket<WithAsyncMethod_DeleteBucket<WithAsyncMethod_UndeleteBucket<WithAsyncMethod_ListViews<WithAsyncMethod_GetView<WithAsyncMethod_CreateView<WithAsyncMethod_UpdateView<WithAsyncMethod_DeleteView<WithAsyncMethod_ListSinks<WithAsyncMethod_GetSink<WithAsyncMethod_CreateSink<WithAsyncMethod_UpdateSink<WithAsyncMethod_DeleteSink<WithAsyncMethod_ListExclusions<WithAsyncMethod_GetExclusion<WithAsyncMethod_CreateExclusion<WithAsyncMethod_UpdateExclusion<WithAsyncMethod_DeleteExclusion<WithAsyncMethod_GetCmekSettings<WithAsyncMethod_UpdateCmekSettings<Service > > > > > > > > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListBuckets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ListBuckets() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::google::logging::v2::ListBucketsRequest, ::google::logging::v2::ListBucketsResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::logging::v2::ListBucketsRequest* request, ::google::logging::v2::ListBucketsResponse* response) { return this->ListBuckets(context, request, response); }));}
    void SetMessageAllocatorFor_ListBuckets(
        ::grpc::experimental::MessageAllocator< ::google::logging::v2::ListBucketsRequest, ::google::logging::v2::ListBucketsResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::logging::v2::ListBucketsRequest, ::google::logging::v2::ListBucketsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ListBuckets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListBuckets(::grpc::ServerContext* /*context*/, const ::google::logging::v2::ListBucketsRequest* /*request*/, ::google::logging::v2::ListBucketsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListBuckets(
      ::grpc::CallbackServerContext* /*context*/, const ::google::logging::v2::ListBucketsRequest* /*request*/, ::google::logging::v2::ListBucketsResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListBuckets(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::logging::v2::ListBucketsRequest* /*request*/, ::google::logging::v2::ListBucketsResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetBucket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetBucket() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::google::logging::v2::GetBucketRequest, ::google::logging::v2::LogBucket>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::logging::v2::GetBucketRequest* request, ::google::logging::v2::LogBucket* response) { return this->GetBucket(context, request, response); }));}
    void SetMessageAllocatorFor_GetBucket(
        ::grpc::experimental::MessageAllocator< ::google::logging::v2::GetBucketRequest, ::google::logging::v2::LogBucket>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::logging::v2::GetBucketRequest, ::google::logging::v2::LogBucket>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetBucket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBucket(::grpc::ServerContext* /*context*/, const ::google::logging::v2::GetBucketRequest* /*request*/, ::google::logging::v2::LogBucket* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetBucket(
      ::grpc::CallbackServerContext* /*context*/, const ::google::logging::v2::GetBucketRequest* /*request*/, ::google::logging::v2::LogBucket* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetBucket(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::logging::v2::GetBucketRequest* /*request*/, ::google::logging::v2::LogBucket* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateBucket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateBucket() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::google::logging::v2::CreateBucketRequest, ::google::logging::v2::LogBucket>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::logging::v2::CreateBucketRequest* request, ::google::logging::v2::LogBucket* response) { return this->CreateBucket(context, request, response); }));}
    void SetMessageAllocatorFor_CreateBucket(
        ::grpc::experimental::MessageAllocator< ::google::logging::v2::CreateBucketRequest, ::google::logging::v2::LogBucket>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::logging::v2::CreateBucketRequest, ::google::logging::v2::LogBucket>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateBucket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateBucket(::grpc::ServerContext* /*context*/, const ::google::logging::v2::CreateBucketRequest* /*request*/, ::google::logging::v2::LogBucket* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateBucket(
      ::grpc::CallbackServerContext* /*context*/, const ::google::logging::v2::CreateBucketRequest* /*request*/, ::google::logging::v2::LogBucket* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateBucket(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::logging::v2::CreateBucketRequest* /*request*/, ::google::logging::v2::LogBucket* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UpdateBucket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UpdateBucket() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::google::logging::v2::UpdateBucketRequest, ::google::logging::v2::LogBucket>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::logging::v2::UpdateBucketRequest* request, ::google::logging::v2::LogBucket* response) { return this->UpdateBucket(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateBucket(
        ::grpc::experimental::MessageAllocator< ::google::logging::v2::UpdateBucketRequest, ::google::logging::v2::LogBucket>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::logging::v2::UpdateBucketRequest, ::google::logging::v2::LogBucket>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UpdateBucket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateBucket(::grpc::ServerContext* /*context*/, const ::google::logging::v2::UpdateBucketRequest* /*request*/, ::google::logging::v2::LogBucket* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateBucket(
      ::grpc::CallbackServerContext* /*context*/, const ::google::logging::v2::UpdateBucketRequest* /*request*/, ::google::logging::v2::LogBucket* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateBucket(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::logging::v2::UpdateBucketRequest* /*request*/, ::google::logging::v2::LogBucket* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteBucket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteBucket() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::google::logging::v2::DeleteBucketRequest, ::google::protobuf::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::logging::v2::DeleteBucketRequest* request, ::google::protobuf::Empty* response) { return this->DeleteBucket(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteBucket(
        ::grpc::experimental::MessageAllocator< ::google::logging::v2::DeleteBucketRequest, ::google::protobuf::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::logging::v2::DeleteBucketRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteBucket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteBucket(::grpc::ServerContext* /*context*/, const ::google::logging::v2::DeleteBucketRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteBucket(
      ::grpc::CallbackServerContext* /*context*/, const ::google::logging::v2::DeleteBucketRequest* /*request*/, ::google::protobuf::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteBucket(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::logging::v2::DeleteBucketRequest* /*request*/, ::google::protobuf::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UndeleteBucket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UndeleteBucket() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::google::logging::v2::UndeleteBucketRequest, ::google::protobuf::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::logging::v2::UndeleteBucketRequest* request, ::google::protobuf::Empty* response) { return this->UndeleteBucket(context, request, response); }));}
    void SetMessageAllocatorFor_UndeleteBucket(
        ::grpc::experimental::MessageAllocator< ::google::logging::v2::UndeleteBucketRequest, ::google::protobuf::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::logging::v2::UndeleteBucketRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UndeleteBucket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UndeleteBucket(::grpc::ServerContext* /*context*/, const ::google::logging::v2::UndeleteBucketRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UndeleteBucket(
      ::grpc::CallbackServerContext* /*context*/, const ::google::logging::v2::UndeleteBucketRequest* /*request*/, ::google::protobuf::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UndeleteBucket(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::logging::v2::UndeleteBucketRequest* /*request*/, ::google::protobuf::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListViews : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ListViews() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::google::logging::v2::ListViewsRequest, ::google::logging::v2::ListViewsResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::logging::v2::ListViewsRequest* request, ::google::logging::v2::ListViewsResponse* response) { return this->ListViews(context, request, response); }));}
    void SetMessageAllocatorFor_ListViews(
        ::grpc::experimental::MessageAllocator< ::google::logging::v2::ListViewsRequest, ::google::logging::v2::ListViewsResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(6);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::logging::v2::ListViewsRequest, ::google::logging::v2::ListViewsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ListViews() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListViews(::grpc::ServerContext* /*context*/, const ::google::logging::v2::ListViewsRequest* /*request*/, ::google::logging::v2::ListViewsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListViews(
      ::grpc::CallbackServerContext* /*context*/, const ::google::logging::v2::ListViewsRequest* /*request*/, ::google::logging::v2::ListViewsResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListViews(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::logging::v2::ListViewsRequest* /*request*/, ::google::logging::v2::ListViewsResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetView : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetView() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::google::logging::v2::GetViewRequest, ::google::logging::v2::LogView>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::logging::v2::GetViewRequest* request, ::google::logging::v2::LogView* response) { return this->GetView(context, request, response); }));}
    void SetMessageAllocatorFor_GetView(
        ::grpc::experimental::MessageAllocator< ::google::logging::v2::GetViewRequest, ::google::logging::v2::LogView>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(7);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::logging::v2::GetViewRequest, ::google::logging::v2::LogView>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetView() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetView(::grpc::ServerContext* /*context*/, const ::google::logging::v2::GetViewRequest* /*request*/, ::google::logging::v2::LogView* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetView(
      ::grpc::CallbackServerContext* /*context*/, const ::google::logging::v2::GetViewRequest* /*request*/, ::google::logging::v2::LogView* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetView(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::logging::v2::GetViewRequest* /*request*/, ::google::logging::v2::LogView* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateView : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateView() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::google::logging::v2::CreateViewRequest, ::google::logging::v2::LogView>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::logging::v2::CreateViewRequest* request, ::google::logging::v2::LogView* response) { return this->CreateView(context, request, response); }));}
    void SetMessageAllocatorFor_CreateView(
        ::grpc::experimental::MessageAllocator< ::google::logging::v2::CreateViewRequest, ::google::logging::v2::LogView>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(8);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::logging::v2::CreateViewRequest, ::google::logging::v2::LogView>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateView() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateView(::grpc::ServerContext* /*context*/, const ::google::logging::v2::CreateViewRequest* /*request*/, ::google::logging::v2::LogView* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateView(
      ::grpc::CallbackServerContext* /*context*/, const ::google::logging::v2::CreateViewRequest* /*request*/, ::google::logging::v2::LogView* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateView(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::logging::v2::CreateViewRequest* /*request*/, ::google::logging::v2::LogView* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UpdateView : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UpdateView() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::google::logging::v2::UpdateViewRequest, ::google::logging::v2::LogView>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::logging::v2::UpdateViewRequest* request, ::google::logging::v2::LogView* response) { return this->UpdateView(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateView(
        ::grpc::experimental::MessageAllocator< ::google::logging::v2::UpdateViewRequest, ::google::logging::v2::LogView>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(9);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::logging::v2::UpdateViewRequest, ::google::logging::v2::LogView>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UpdateView() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateView(::grpc::ServerContext* /*context*/, const ::google::logging::v2::UpdateViewRequest* /*request*/, ::google::logging::v2::LogView* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateView(
      ::grpc::CallbackServerContext* /*context*/, const ::google::logging::v2::UpdateViewRequest* /*request*/, ::google::logging::v2::LogView* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateView(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::logging::v2::UpdateViewRequest* /*request*/, ::google::logging::v2::LogView* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteView : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteView() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::google::logging::v2::DeleteViewRequest, ::google::protobuf::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::logging::v2::DeleteViewRequest* request, ::google::protobuf::Empty* response) { return this->DeleteView(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteView(
        ::grpc::experimental::MessageAllocator< ::google::logging::v2::DeleteViewRequest, ::google::protobuf::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(10);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::logging::v2::DeleteViewRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteView() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteView(::grpc::ServerContext* /*context*/, const ::google::logging::v2::DeleteViewRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteView(
      ::grpc::CallbackServerContext* /*context*/, const ::google::logging::v2::DeleteViewRequest* /*request*/, ::google::protobuf::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteView(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::logging::v2::DeleteViewRequest* /*request*/, ::google::protobuf::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListSinks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ListSinks() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::google::logging::v2::ListSinksRequest, ::google::logging::v2::ListSinksResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::logging::v2::ListSinksRequest* request, ::google::logging::v2::ListSinksResponse* response) { return this->ListSinks(context, request, response); }));}
    void SetMessageAllocatorFor_ListSinks(
        ::grpc::experimental::MessageAllocator< ::google::logging::v2::ListSinksRequest, ::google::logging::v2::ListSinksResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(11);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::logging::v2::ListSinksRequest, ::google::logging::v2::ListSinksResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ListSinks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListSinks(::grpc::ServerContext* /*context*/, const ::google::logging::v2::ListSinksRequest* /*request*/, ::google::logging::v2::ListSinksResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListSinks(
      ::grpc::CallbackServerContext* /*context*/, const ::google::logging::v2::ListSinksRequest* /*request*/, ::google::logging::v2::ListSinksResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListSinks(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::logging::v2::ListSinksRequest* /*request*/, ::google::logging::v2::ListSinksResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetSink : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetSink() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::google::logging::v2::GetSinkRequest, ::google::logging::v2::LogSink>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::logging::v2::GetSinkRequest* request, ::google::logging::v2::LogSink* response) { return this->GetSink(context, request, response); }));}
    void SetMessageAllocatorFor_GetSink(
        ::grpc::experimental::MessageAllocator< ::google::logging::v2::GetSinkRequest, ::google::logging::v2::LogSink>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(12);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::logging::v2::GetSinkRequest, ::google::logging::v2::LogSink>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetSink() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSink(::grpc::ServerContext* /*context*/, const ::google::logging::v2::GetSinkRequest* /*request*/, ::google::logging::v2::LogSink* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetSink(
      ::grpc::CallbackServerContext* /*context*/, const ::google::logging::v2::GetSinkRequest* /*request*/, ::google::logging::v2::LogSink* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetSink(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::logging::v2::GetSinkRequest* /*request*/, ::google::logging::v2::LogSink* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateSink : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateSink() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::google::logging::v2::CreateSinkRequest, ::google::logging::v2::LogSink>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::logging::v2::CreateSinkRequest* request, ::google::logging::v2::LogSink* response) { return this->CreateSink(context, request, response); }));}
    void SetMessageAllocatorFor_CreateSink(
        ::grpc::experimental::MessageAllocator< ::google::logging::v2::CreateSinkRequest, ::google::logging::v2::LogSink>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(13);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::logging::v2::CreateSinkRequest, ::google::logging::v2::LogSink>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateSink() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSink(::grpc::ServerContext* /*context*/, const ::google::logging::v2::CreateSinkRequest* /*request*/, ::google::logging::v2::LogSink* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateSink(
      ::grpc::CallbackServerContext* /*context*/, const ::google::logging::v2::CreateSinkRequest* /*request*/, ::google::logging::v2::LogSink* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateSink(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::logging::v2::CreateSinkRequest* /*request*/, ::google::logging::v2::LogSink* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UpdateSink : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UpdateSink() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::google::logging::v2::UpdateSinkRequest, ::google::logging::v2::LogSink>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::logging::v2::UpdateSinkRequest* request, ::google::logging::v2::LogSink* response) { return this->UpdateSink(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateSink(
        ::grpc::experimental::MessageAllocator< ::google::logging::v2::UpdateSinkRequest, ::google::logging::v2::LogSink>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(14);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(14);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::logging::v2::UpdateSinkRequest, ::google::logging::v2::LogSink>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UpdateSink() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateSink(::grpc::ServerContext* /*context*/, const ::google::logging::v2::UpdateSinkRequest* /*request*/, ::google::logging::v2::LogSink* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateSink(
      ::grpc::CallbackServerContext* /*context*/, const ::google::logging::v2::UpdateSinkRequest* /*request*/, ::google::logging::v2::LogSink* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateSink(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::logging::v2::UpdateSinkRequest* /*request*/, ::google::logging::v2::LogSink* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteSink : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteSink() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::google::logging::v2::DeleteSinkRequest, ::google::protobuf::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::logging::v2::DeleteSinkRequest* request, ::google::protobuf::Empty* response) { return this->DeleteSink(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteSink(
        ::grpc::experimental::MessageAllocator< ::google::logging::v2::DeleteSinkRequest, ::google::protobuf::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(15);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(15);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::logging::v2::DeleteSinkRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteSink() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSink(::grpc::ServerContext* /*context*/, const ::google::logging::v2::DeleteSinkRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteSink(
      ::grpc::CallbackServerContext* /*context*/, const ::google::logging::v2::DeleteSinkRequest* /*request*/, ::google::protobuf::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteSink(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::logging::v2::DeleteSinkRequest* /*request*/, ::google::protobuf::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListExclusions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ListExclusions() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::google::logging::v2::ListExclusionsRequest, ::google::logging::v2::ListExclusionsResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::logging::v2::ListExclusionsRequest* request, ::google::logging::v2::ListExclusionsResponse* response) { return this->ListExclusions(context, request, response); }));}
    void SetMessageAllocatorFor_ListExclusions(
        ::grpc::experimental::MessageAllocator< ::google::logging::v2::ListExclusionsRequest, ::google::logging::v2::ListExclusionsResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(16);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(16);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::logging::v2::ListExclusionsRequest, ::google::logging::v2::ListExclusionsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ListExclusions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListExclusions(::grpc::ServerContext* /*context*/, const ::google::logging::v2::ListExclusionsRequest* /*request*/, ::google::logging::v2::ListExclusionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListExclusions(
      ::grpc::CallbackServerContext* /*context*/, const ::google::logging::v2::ListExclusionsRequest* /*request*/, ::google::logging::v2::ListExclusionsResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListExclusions(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::logging::v2::ListExclusionsRequest* /*request*/, ::google::logging::v2::ListExclusionsResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetExclusion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetExclusion() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::google::logging::v2::GetExclusionRequest, ::google::logging::v2::LogExclusion>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::logging::v2::GetExclusionRequest* request, ::google::logging::v2::LogExclusion* response) { return this->GetExclusion(context, request, response); }));}
    void SetMessageAllocatorFor_GetExclusion(
        ::grpc::experimental::MessageAllocator< ::google::logging::v2::GetExclusionRequest, ::google::logging::v2::LogExclusion>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(17);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(17);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::logging::v2::GetExclusionRequest, ::google::logging::v2::LogExclusion>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetExclusion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExclusion(::grpc::ServerContext* /*context*/, const ::google::logging::v2::GetExclusionRequest* /*request*/, ::google::logging::v2::LogExclusion* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetExclusion(
      ::grpc::CallbackServerContext* /*context*/, const ::google::logging::v2::GetExclusionRequest* /*request*/, ::google::logging::v2::LogExclusion* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetExclusion(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::logging::v2::GetExclusionRequest* /*request*/, ::google::logging::v2::LogExclusion* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateExclusion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateExclusion() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(18,
          new ::grpc::internal::CallbackUnaryHandler< ::google::logging::v2::CreateExclusionRequest, ::google::logging::v2::LogExclusion>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::logging::v2::CreateExclusionRequest* request, ::google::logging::v2::LogExclusion* response) { return this->CreateExclusion(context, request, response); }));}
    void SetMessageAllocatorFor_CreateExclusion(
        ::grpc::experimental::MessageAllocator< ::google::logging::v2::CreateExclusionRequest, ::google::logging::v2::LogExclusion>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(18);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(18);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::logging::v2::CreateExclusionRequest, ::google::logging::v2::LogExclusion>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateExclusion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateExclusion(::grpc::ServerContext* /*context*/, const ::google::logging::v2::CreateExclusionRequest* /*request*/, ::google::logging::v2::LogExclusion* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateExclusion(
      ::grpc::CallbackServerContext* /*context*/, const ::google::logging::v2::CreateExclusionRequest* /*request*/, ::google::logging::v2::LogExclusion* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateExclusion(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::logging::v2::CreateExclusionRequest* /*request*/, ::google::logging::v2::LogExclusion* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UpdateExclusion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UpdateExclusion() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(19,
          new ::grpc::internal::CallbackUnaryHandler< ::google::logging::v2::UpdateExclusionRequest, ::google::logging::v2::LogExclusion>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::logging::v2::UpdateExclusionRequest* request, ::google::logging::v2::LogExclusion* response) { return this->UpdateExclusion(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateExclusion(
        ::grpc::experimental::MessageAllocator< ::google::logging::v2::UpdateExclusionRequest, ::google::logging::v2::LogExclusion>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(19);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(19);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::logging::v2::UpdateExclusionRequest, ::google::logging::v2::LogExclusion>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UpdateExclusion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateExclusion(::grpc::ServerContext* /*context*/, const ::google::logging::v2::UpdateExclusionRequest* /*request*/, ::google::logging::v2::LogExclusion* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateExclusion(
      ::grpc::CallbackServerContext* /*context*/, const ::google::logging::v2::UpdateExclusionRequest* /*request*/, ::google::logging::v2::LogExclusion* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateExclusion(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::logging::v2::UpdateExclusionRequest* /*request*/, ::google::logging::v2::LogExclusion* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteExclusion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteExclusion() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(20,
          new ::grpc::internal::CallbackUnaryHandler< ::google::logging::v2::DeleteExclusionRequest, ::google::protobuf::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::logging::v2::DeleteExclusionRequest* request, ::google::protobuf::Empty* response) { return this->DeleteExclusion(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteExclusion(
        ::grpc::experimental::MessageAllocator< ::google::logging::v2::DeleteExclusionRequest, ::google::protobuf::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(20);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(20);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::logging::v2::DeleteExclusionRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteExclusion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteExclusion(::grpc::ServerContext* /*context*/, const ::google::logging::v2::DeleteExclusionRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteExclusion(
      ::grpc::CallbackServerContext* /*context*/, const ::google::logging::v2::DeleteExclusionRequest* /*request*/, ::google::protobuf::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteExclusion(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::logging::v2::DeleteExclusionRequest* /*request*/, ::google::protobuf::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetCmekSettings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetCmekSettings() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(21,
          new ::grpc::internal::CallbackUnaryHandler< ::google::logging::v2::GetCmekSettingsRequest, ::google::logging::v2::CmekSettings>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::logging::v2::GetCmekSettingsRequest* request, ::google::logging::v2::CmekSettings* response) { return this->GetCmekSettings(context, request, response); }));}
    void SetMessageAllocatorFor_GetCmekSettings(
        ::grpc::experimental::MessageAllocator< ::google::logging::v2::GetCmekSettingsRequest, ::google::logging::v2::CmekSettings>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(21);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(21);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::logging::v2::GetCmekSettingsRequest, ::google::logging::v2::CmekSettings>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetCmekSettings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCmekSettings(::grpc::ServerContext* /*context*/, const ::google::logging::v2::GetCmekSettingsRequest* /*request*/, ::google::logging::v2::CmekSettings* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetCmekSettings(
      ::grpc::CallbackServerContext* /*context*/, const ::google::logging::v2::GetCmekSettingsRequest* /*request*/, ::google::logging::v2::CmekSettings* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetCmekSettings(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::logging::v2::GetCmekSettingsRequest* /*request*/, ::google::logging::v2::CmekSettings* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UpdateCmekSettings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UpdateCmekSettings() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(22,
          new ::grpc::internal::CallbackUnaryHandler< ::google::logging::v2::UpdateCmekSettingsRequest, ::google::logging::v2::CmekSettings>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::logging::v2::UpdateCmekSettingsRequest* request, ::google::logging::v2::CmekSettings* response) { return this->UpdateCmekSettings(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateCmekSettings(
        ::grpc::experimental::MessageAllocator< ::google::logging::v2::UpdateCmekSettingsRequest, ::google::logging::v2::CmekSettings>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(22);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(22);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::logging::v2::UpdateCmekSettingsRequest, ::google::logging::v2::CmekSettings>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UpdateCmekSettings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateCmekSettings(::grpc::ServerContext* /*context*/, const ::google::logging::v2::UpdateCmekSettingsRequest* /*request*/, ::google::logging::v2::CmekSettings* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateCmekSettings(
      ::grpc::CallbackServerContext* /*context*/, const ::google::logging::v2::UpdateCmekSettingsRequest* /*request*/, ::google::logging::v2::CmekSettings* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateCmekSettings(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::logging::v2::UpdateCmekSettingsRequest* /*request*/, ::google::logging::v2::CmekSettings* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_ListBuckets<ExperimentalWithCallbackMethod_GetBucket<ExperimentalWithCallbackMethod_CreateBucket<ExperimentalWithCallbackMethod_UpdateBucket<ExperimentalWithCallbackMethod_DeleteBucket<ExperimentalWithCallbackMethod_UndeleteBucket<ExperimentalWithCallbackMethod_ListViews<ExperimentalWithCallbackMethod_GetView<ExperimentalWithCallbackMethod_CreateView<ExperimentalWithCallbackMethod_UpdateView<ExperimentalWithCallbackMethod_DeleteView<ExperimentalWithCallbackMethod_ListSinks<ExperimentalWithCallbackMethod_GetSink<ExperimentalWithCallbackMethod_CreateSink<ExperimentalWithCallbackMethod_UpdateSink<ExperimentalWithCallbackMethod_DeleteSink<ExperimentalWithCallbackMethod_ListExclusions<ExperimentalWithCallbackMethod_GetExclusion<ExperimentalWithCallbackMethod_CreateExclusion<ExperimentalWithCallbackMethod_UpdateExclusion<ExperimentalWithCallbackMethod_DeleteExclusion<ExperimentalWithCallbackMethod_GetCmekSettings<ExperimentalWithCallbackMethod_UpdateCmekSettings<Service > > > > > > > > > > > > > > > > > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_ListBuckets<ExperimentalWithCallbackMethod_GetBucket<ExperimentalWithCallbackMethod_CreateBucket<ExperimentalWithCallbackMethod_UpdateBucket<ExperimentalWithCallbackMethod_DeleteBucket<ExperimentalWithCallbackMethod_UndeleteBucket<ExperimentalWithCallbackMethod_ListViews<ExperimentalWithCallbackMethod_GetView<ExperimentalWithCallbackMethod_CreateView<ExperimentalWithCallbackMethod_UpdateView<ExperimentalWithCallbackMethod_DeleteView<ExperimentalWithCallbackMethod_ListSinks<ExperimentalWithCallbackMethod_GetSink<ExperimentalWithCallbackMethod_CreateSink<ExperimentalWithCallbackMethod_UpdateSink<ExperimentalWithCallbackMethod_DeleteSink<ExperimentalWithCallbackMethod_ListExclusions<ExperimentalWithCallbackMethod_GetExclusion<ExperimentalWithCallbackMethod_CreateExclusion<ExperimentalWithCallbackMethod_UpdateExclusion<ExperimentalWithCallbackMethod_DeleteExclusion<ExperimentalWithCallbackMethod_GetCmekSettings<ExperimentalWithCallbackMethod_UpdateCmekSettings<Service > > > > > > > > > > > > > > > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ListBuckets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListBuckets() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ListBuckets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListBuckets(::grpc::ServerContext* /*context*/, const ::google::logging::v2::ListBucketsRequest* /*request*/, ::google::logging::v2::ListBucketsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetBucket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetBucket() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetBucket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBucket(::grpc::ServerContext* /*context*/, const ::google::logging::v2::GetBucketRequest* /*request*/, ::google::logging::v2::LogBucket* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateBucket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateBucket() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_CreateBucket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateBucket(::grpc::ServerContext* /*context*/, const ::google::logging::v2::CreateBucketRequest* /*request*/, ::google::logging::v2::LogBucket* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateBucket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateBucket() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_UpdateBucket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateBucket(::grpc::ServerContext* /*context*/, const ::google::logging::v2::UpdateBucketRequest* /*request*/, ::google::logging::v2::LogBucket* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteBucket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteBucket() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_DeleteBucket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteBucket(::grpc::ServerContext* /*context*/, const ::google::logging::v2::DeleteBucketRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UndeleteBucket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UndeleteBucket() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_UndeleteBucket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UndeleteBucket(::grpc::ServerContext* /*context*/, const ::google::logging::v2::UndeleteBucketRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListViews : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListViews() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_ListViews() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListViews(::grpc::ServerContext* /*context*/, const ::google::logging::v2::ListViewsRequest* /*request*/, ::google::logging::v2::ListViewsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetView : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetView() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_GetView() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetView(::grpc::ServerContext* /*context*/, const ::google::logging::v2::GetViewRequest* /*request*/, ::google::logging::v2::LogView* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateView : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateView() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_CreateView() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateView(::grpc::ServerContext* /*context*/, const ::google::logging::v2::CreateViewRequest* /*request*/, ::google::logging::v2::LogView* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateView : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateView() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_UpdateView() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateView(::grpc::ServerContext* /*context*/, const ::google::logging::v2::UpdateViewRequest* /*request*/, ::google::logging::v2::LogView* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteView : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteView() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_DeleteView() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteView(::grpc::ServerContext* /*context*/, const ::google::logging::v2::DeleteViewRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListSinks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListSinks() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_ListSinks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListSinks(::grpc::ServerContext* /*context*/, const ::google::logging::v2::ListSinksRequest* /*request*/, ::google::logging::v2::ListSinksResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSink : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetSink() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_GetSink() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSink(::grpc::ServerContext* /*context*/, const ::google::logging::v2::GetSinkRequest* /*request*/, ::google::logging::v2::LogSink* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateSink : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateSink() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_CreateSink() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSink(::grpc::ServerContext* /*context*/, const ::google::logging::v2::CreateSinkRequest* /*request*/, ::google::logging::v2::LogSink* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateSink : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateSink() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_UpdateSink() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateSink(::grpc::ServerContext* /*context*/, const ::google::logging::v2::UpdateSinkRequest* /*request*/, ::google::logging::v2::LogSink* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteSink : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteSink() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_DeleteSink() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSink(::grpc::ServerContext* /*context*/, const ::google::logging::v2::DeleteSinkRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListExclusions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListExclusions() {
      ::grpc::Service::MarkMethodGeneric(16);
    }
    ~WithGenericMethod_ListExclusions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListExclusions(::grpc::ServerContext* /*context*/, const ::google::logging::v2::ListExclusionsRequest* /*request*/, ::google::logging::v2::ListExclusionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetExclusion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetExclusion() {
      ::grpc::Service::MarkMethodGeneric(17);
    }
    ~WithGenericMethod_GetExclusion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExclusion(::grpc::ServerContext* /*context*/, const ::google::logging::v2::GetExclusionRequest* /*request*/, ::google::logging::v2::LogExclusion* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateExclusion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateExclusion() {
      ::grpc::Service::MarkMethodGeneric(18);
    }
    ~WithGenericMethod_CreateExclusion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateExclusion(::grpc::ServerContext* /*context*/, const ::google::logging::v2::CreateExclusionRequest* /*request*/, ::google::logging::v2::LogExclusion* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateExclusion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateExclusion() {
      ::grpc::Service::MarkMethodGeneric(19);
    }
    ~WithGenericMethod_UpdateExclusion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateExclusion(::grpc::ServerContext* /*context*/, const ::google::logging::v2::UpdateExclusionRequest* /*request*/, ::google::logging::v2::LogExclusion* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteExclusion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteExclusion() {
      ::grpc::Service::MarkMethodGeneric(20);
    }
    ~WithGenericMethod_DeleteExclusion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteExclusion(::grpc::ServerContext* /*context*/, const ::google::logging::v2::DeleteExclusionRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetCmekSettings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetCmekSettings() {
      ::grpc::Service::MarkMethodGeneric(21);
    }
    ~WithGenericMethod_GetCmekSettings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCmekSettings(::grpc::ServerContext* /*context*/, const ::google::logging::v2::GetCmekSettingsRequest* /*request*/, ::google::logging::v2::CmekSettings* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateCmekSettings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateCmekSettings() {
      ::grpc::Service::MarkMethodGeneric(22);
    }
    ~WithGenericMethod_UpdateCmekSettings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateCmekSettings(::grpc::ServerContext* /*context*/, const ::google::logging::v2::UpdateCmekSettingsRequest* /*request*/, ::google::logging::v2::CmekSettings* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListBuckets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListBuckets() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ListBuckets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListBuckets(::grpc::ServerContext* /*context*/, const ::google::logging::v2::ListBucketsRequest* /*request*/, ::google::logging::v2::ListBucketsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListBuckets(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetBucket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetBucket() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetBucket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBucket(::grpc::ServerContext* /*context*/, const ::google::logging::v2::GetBucketRequest* /*request*/, ::google::logging::v2::LogBucket* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBucket(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateBucket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateBucket() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_CreateBucket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateBucket(::grpc::ServerContext* /*context*/, const ::google::logging::v2::CreateBucketRequest* /*request*/, ::google::logging::v2::LogBucket* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateBucket(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateBucket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateBucket() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_UpdateBucket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateBucket(::grpc::ServerContext* /*context*/, const ::google::logging::v2::UpdateBucketRequest* /*request*/, ::google::logging::v2::LogBucket* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateBucket(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteBucket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteBucket() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_DeleteBucket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteBucket(::grpc::ServerContext* /*context*/, const ::google::logging::v2::DeleteBucketRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteBucket(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UndeleteBucket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UndeleteBucket() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_UndeleteBucket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UndeleteBucket(::grpc::ServerContext* /*context*/, const ::google::logging::v2::UndeleteBucketRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUndeleteBucket(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListViews : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListViews() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_ListViews() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListViews(::grpc::ServerContext* /*context*/, const ::google::logging::v2::ListViewsRequest* /*request*/, ::google::logging::v2::ListViewsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListViews(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetView : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetView() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_GetView() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetView(::grpc::ServerContext* /*context*/, const ::google::logging::v2::GetViewRequest* /*request*/, ::google::logging::v2::LogView* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetView(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateView : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateView() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_CreateView() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateView(::grpc::ServerContext* /*context*/, const ::google::logging::v2::CreateViewRequest* /*request*/, ::google::logging::v2::LogView* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateView(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateView : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateView() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_UpdateView() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateView(::grpc::ServerContext* /*context*/, const ::google::logging::v2::UpdateViewRequest* /*request*/, ::google::logging::v2::LogView* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateView(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteView : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteView() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_DeleteView() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteView(::grpc::ServerContext* /*context*/, const ::google::logging::v2::DeleteViewRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteView(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListSinks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListSinks() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_ListSinks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListSinks(::grpc::ServerContext* /*context*/, const ::google::logging::v2::ListSinksRequest* /*request*/, ::google::logging::v2::ListSinksResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListSinks(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetSink : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetSink() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_GetSink() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSink(::grpc::ServerContext* /*context*/, const ::google::logging::v2::GetSinkRequest* /*request*/, ::google::logging::v2::LogSink* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSink(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateSink : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateSink() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_CreateSink() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSink(::grpc::ServerContext* /*context*/, const ::google::logging::v2::CreateSinkRequest* /*request*/, ::google::logging::v2::LogSink* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateSink(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateSink : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateSink() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_UpdateSink() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateSink(::grpc::ServerContext* /*context*/, const ::google::logging::v2::UpdateSinkRequest* /*request*/, ::google::logging::v2::LogSink* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateSink(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteSink : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteSink() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_DeleteSink() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSink(::grpc::ServerContext* /*context*/, const ::google::logging::v2::DeleteSinkRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteSink(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListExclusions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListExclusions() {
      ::grpc::Service::MarkMethodRaw(16);
    }
    ~WithRawMethod_ListExclusions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListExclusions(::grpc::ServerContext* /*context*/, const ::google::logging::v2::ListExclusionsRequest* /*request*/, ::google::logging::v2::ListExclusionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListExclusions(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetExclusion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetExclusion() {
      ::grpc::Service::MarkMethodRaw(17);
    }
    ~WithRawMethod_GetExclusion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExclusion(::grpc::ServerContext* /*context*/, const ::google::logging::v2::GetExclusionRequest* /*request*/, ::google::logging::v2::LogExclusion* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetExclusion(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateExclusion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateExclusion() {
      ::grpc::Service::MarkMethodRaw(18);
    }
    ~WithRawMethod_CreateExclusion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateExclusion(::grpc::ServerContext* /*context*/, const ::google::logging::v2::CreateExclusionRequest* /*request*/, ::google::logging::v2::LogExclusion* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateExclusion(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateExclusion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateExclusion() {
      ::grpc::Service::MarkMethodRaw(19);
    }
    ~WithRawMethod_UpdateExclusion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateExclusion(::grpc::ServerContext* /*context*/, const ::google::logging::v2::UpdateExclusionRequest* /*request*/, ::google::logging::v2::LogExclusion* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateExclusion(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteExclusion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteExclusion() {
      ::grpc::Service::MarkMethodRaw(20);
    }
    ~WithRawMethod_DeleteExclusion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteExclusion(::grpc::ServerContext* /*context*/, const ::google::logging::v2::DeleteExclusionRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteExclusion(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetCmekSettings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetCmekSettings() {
      ::grpc::Service::MarkMethodRaw(21);
    }
    ~WithRawMethod_GetCmekSettings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCmekSettings(::grpc::ServerContext* /*context*/, const ::google::logging::v2::GetCmekSettingsRequest* /*request*/, ::google::logging::v2::CmekSettings* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCmekSettings(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(21, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateCmekSettings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateCmekSettings() {
      ::grpc::Service::MarkMethodRaw(22);
    }
    ~WithRawMethod_UpdateCmekSettings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateCmekSettings(::grpc::ServerContext* /*context*/, const ::google::logging::v2::UpdateCmekSettingsRequest* /*request*/, ::google::logging::v2::CmekSettings* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateCmekSettings(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(22, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListBuckets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ListBuckets() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListBuckets(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ListBuckets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListBuckets(::grpc::ServerContext* /*context*/, const ::google::logging::v2::ListBucketsRequest* /*request*/, ::google::logging::v2::ListBucketsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListBuckets(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListBuckets(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetBucket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetBucket() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetBucket(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetBucket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBucket(::grpc::ServerContext* /*context*/, const ::google::logging::v2::GetBucketRequest* /*request*/, ::google::logging::v2::LogBucket* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetBucket(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetBucket(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateBucket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateBucket() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateBucket(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateBucket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateBucket(::grpc::ServerContext* /*context*/, const ::google::logging::v2::CreateBucketRequest* /*request*/, ::google::logging::v2::LogBucket* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateBucket(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateBucket(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UpdateBucket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UpdateBucket() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateBucket(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_UpdateBucket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateBucket(::grpc::ServerContext* /*context*/, const ::google::logging::v2::UpdateBucketRequest* /*request*/, ::google::logging::v2::LogBucket* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateBucket(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateBucket(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteBucket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteBucket() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteBucket(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteBucket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteBucket(::grpc::ServerContext* /*context*/, const ::google::logging::v2::DeleteBucketRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteBucket(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteBucket(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UndeleteBucket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UndeleteBucket() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UndeleteBucket(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_UndeleteBucket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UndeleteBucket(::grpc::ServerContext* /*context*/, const ::google::logging::v2::UndeleteBucketRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UndeleteBucket(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UndeleteBucket(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListViews : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ListViews() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListViews(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ListViews() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListViews(::grpc::ServerContext* /*context*/, const ::google::logging::v2::ListViewsRequest* /*request*/, ::google::logging::v2::ListViewsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListViews(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListViews(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetView : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetView() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetView(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetView() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetView(::grpc::ServerContext* /*context*/, const ::google::logging::v2::GetViewRequest* /*request*/, ::google::logging::v2::LogView* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetView(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetView(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateView : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateView() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateView(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateView() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateView(::grpc::ServerContext* /*context*/, const ::google::logging::v2::CreateViewRequest* /*request*/, ::google::logging::v2::LogView* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateView(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateView(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UpdateView : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UpdateView() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateView(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_UpdateView() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateView(::grpc::ServerContext* /*context*/, const ::google::logging::v2::UpdateViewRequest* /*request*/, ::google::logging::v2::LogView* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateView(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateView(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteView : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteView() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteView(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteView() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteView(::grpc::ServerContext* /*context*/, const ::google::logging::v2::DeleteViewRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteView(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteView(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListSinks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ListSinks() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListSinks(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ListSinks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListSinks(::grpc::ServerContext* /*context*/, const ::google::logging::v2::ListSinksRequest* /*request*/, ::google::logging::v2::ListSinksResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListSinks(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListSinks(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetSink : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetSink() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetSink(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetSink() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSink(::grpc::ServerContext* /*context*/, const ::google::logging::v2::GetSinkRequest* /*request*/, ::google::logging::v2::LogSink* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetSink(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetSink(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateSink : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateSink() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateSink(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateSink() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSink(::grpc::ServerContext* /*context*/, const ::google::logging::v2::CreateSinkRequest* /*request*/, ::google::logging::v2::LogSink* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateSink(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateSink(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UpdateSink : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UpdateSink() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateSink(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_UpdateSink() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateSink(::grpc::ServerContext* /*context*/, const ::google::logging::v2::UpdateSinkRequest* /*request*/, ::google::logging::v2::LogSink* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateSink(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateSink(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteSink : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteSink() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteSink(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteSink() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSink(::grpc::ServerContext* /*context*/, const ::google::logging::v2::DeleteSinkRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteSink(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteSink(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListExclusions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ListExclusions() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListExclusions(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ListExclusions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListExclusions(::grpc::ServerContext* /*context*/, const ::google::logging::v2::ListExclusionsRequest* /*request*/, ::google::logging::v2::ListExclusionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListExclusions(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListExclusions(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetExclusion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetExclusion() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetExclusion(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetExclusion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExclusion(::grpc::ServerContext* /*context*/, const ::google::logging::v2::GetExclusionRequest* /*request*/, ::google::logging::v2::LogExclusion* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetExclusion(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetExclusion(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateExclusion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateExclusion() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(18,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateExclusion(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateExclusion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateExclusion(::grpc::ServerContext* /*context*/, const ::google::logging::v2::CreateExclusionRequest* /*request*/, ::google::logging::v2::LogExclusion* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateExclusion(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateExclusion(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UpdateExclusion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UpdateExclusion() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(19,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateExclusion(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_UpdateExclusion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateExclusion(::grpc::ServerContext* /*context*/, const ::google::logging::v2::UpdateExclusionRequest* /*request*/, ::google::logging::v2::LogExclusion* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateExclusion(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateExclusion(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteExclusion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteExclusion() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(20,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteExclusion(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteExclusion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteExclusion(::grpc::ServerContext* /*context*/, const ::google::logging::v2::DeleteExclusionRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteExclusion(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteExclusion(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetCmekSettings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetCmekSettings() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(21,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetCmekSettings(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetCmekSettings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCmekSettings(::grpc::ServerContext* /*context*/, const ::google::logging::v2::GetCmekSettingsRequest* /*request*/, ::google::logging::v2::CmekSettings* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetCmekSettings(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetCmekSettings(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UpdateCmekSettings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UpdateCmekSettings() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(22,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateCmekSettings(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_UpdateCmekSettings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateCmekSettings(::grpc::ServerContext* /*context*/, const ::google::logging::v2::UpdateCmekSettingsRequest* /*request*/, ::google::logging::v2::CmekSettings* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateCmekSettings(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateCmekSettings(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListBuckets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListBuckets() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::logging::v2::ListBucketsRequest, ::google::logging::v2::ListBucketsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::logging::v2::ListBucketsRequest, ::google::logging::v2::ListBucketsResponse>* streamer) {
                       return this->StreamedListBuckets(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListBuckets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListBuckets(::grpc::ServerContext* /*context*/, const ::google::logging::v2::ListBucketsRequest* /*request*/, ::google::logging::v2::ListBucketsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListBuckets(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::logging::v2::ListBucketsRequest,::google::logging::v2::ListBucketsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetBucket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetBucket() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::logging::v2::GetBucketRequest, ::google::logging::v2::LogBucket>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::logging::v2::GetBucketRequest, ::google::logging::v2::LogBucket>* streamer) {
                       return this->StreamedGetBucket(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetBucket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetBucket(::grpc::ServerContext* /*context*/, const ::google::logging::v2::GetBucketRequest* /*request*/, ::google::logging::v2::LogBucket* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetBucket(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::logging::v2::GetBucketRequest,::google::logging::v2::LogBucket>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateBucket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateBucket() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::logging::v2::CreateBucketRequest, ::google::logging::v2::LogBucket>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::logging::v2::CreateBucketRequest, ::google::logging::v2::LogBucket>* streamer) {
                       return this->StreamedCreateBucket(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateBucket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateBucket(::grpc::ServerContext* /*context*/, const ::google::logging::v2::CreateBucketRequest* /*request*/, ::google::logging::v2::LogBucket* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateBucket(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::logging::v2::CreateBucketRequest,::google::logging::v2::LogBucket>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateBucket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateBucket() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::logging::v2::UpdateBucketRequest, ::google::logging::v2::LogBucket>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::logging::v2::UpdateBucketRequest, ::google::logging::v2::LogBucket>* streamer) {
                       return this->StreamedUpdateBucket(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateBucket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateBucket(::grpc::ServerContext* /*context*/, const ::google::logging::v2::UpdateBucketRequest* /*request*/, ::google::logging::v2::LogBucket* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateBucket(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::logging::v2::UpdateBucketRequest,::google::logging::v2::LogBucket>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteBucket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteBucket() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::logging::v2::DeleteBucketRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::logging::v2::DeleteBucketRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedDeleteBucket(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteBucket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteBucket(::grpc::ServerContext* /*context*/, const ::google::logging::v2::DeleteBucketRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteBucket(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::logging::v2::DeleteBucketRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UndeleteBucket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UndeleteBucket() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::logging::v2::UndeleteBucketRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::logging::v2::UndeleteBucketRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedUndeleteBucket(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UndeleteBucket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UndeleteBucket(::grpc::ServerContext* /*context*/, const ::google::logging::v2::UndeleteBucketRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUndeleteBucket(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::logging::v2::UndeleteBucketRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListViews : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListViews() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::logging::v2::ListViewsRequest, ::google::logging::v2::ListViewsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::logging::v2::ListViewsRequest, ::google::logging::v2::ListViewsResponse>* streamer) {
                       return this->StreamedListViews(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListViews() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListViews(::grpc::ServerContext* /*context*/, const ::google::logging::v2::ListViewsRequest* /*request*/, ::google::logging::v2::ListViewsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListViews(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::logging::v2::ListViewsRequest,::google::logging::v2::ListViewsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetView : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetView() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::logging::v2::GetViewRequest, ::google::logging::v2::LogView>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::logging::v2::GetViewRequest, ::google::logging::v2::LogView>* streamer) {
                       return this->StreamedGetView(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetView() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetView(::grpc::ServerContext* /*context*/, const ::google::logging::v2::GetViewRequest* /*request*/, ::google::logging::v2::LogView* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetView(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::logging::v2::GetViewRequest,::google::logging::v2::LogView>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateView : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateView() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::logging::v2::CreateViewRequest, ::google::logging::v2::LogView>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::logging::v2::CreateViewRequest, ::google::logging::v2::LogView>* streamer) {
                       return this->StreamedCreateView(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateView() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateView(::grpc::ServerContext* /*context*/, const ::google::logging::v2::CreateViewRequest* /*request*/, ::google::logging::v2::LogView* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateView(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::logging::v2::CreateViewRequest,::google::logging::v2::LogView>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateView : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateView() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::logging::v2::UpdateViewRequest, ::google::logging::v2::LogView>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::logging::v2::UpdateViewRequest, ::google::logging::v2::LogView>* streamer) {
                       return this->StreamedUpdateView(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateView() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateView(::grpc::ServerContext* /*context*/, const ::google::logging::v2::UpdateViewRequest* /*request*/, ::google::logging::v2::LogView* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateView(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::logging::v2::UpdateViewRequest,::google::logging::v2::LogView>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteView : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteView() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::logging::v2::DeleteViewRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::logging::v2::DeleteViewRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedDeleteView(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteView() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteView(::grpc::ServerContext* /*context*/, const ::google::logging::v2::DeleteViewRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteView(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::logging::v2::DeleteViewRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListSinks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListSinks() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::logging::v2::ListSinksRequest, ::google::logging::v2::ListSinksResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::logging::v2::ListSinksRequest, ::google::logging::v2::ListSinksResponse>* streamer) {
                       return this->StreamedListSinks(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListSinks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListSinks(::grpc::ServerContext* /*context*/, const ::google::logging::v2::ListSinksRequest* /*request*/, ::google::logging::v2::ListSinksResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListSinks(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::logging::v2::ListSinksRequest,::google::logging::v2::ListSinksResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSink : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetSink() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::logging::v2::GetSinkRequest, ::google::logging::v2::LogSink>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::logging::v2::GetSinkRequest, ::google::logging::v2::LogSink>* streamer) {
                       return this->StreamedGetSink(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetSink() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSink(::grpc::ServerContext* /*context*/, const ::google::logging::v2::GetSinkRequest* /*request*/, ::google::logging::v2::LogSink* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSink(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::logging::v2::GetSinkRequest,::google::logging::v2::LogSink>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateSink : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateSink() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::logging::v2::CreateSinkRequest, ::google::logging::v2::LogSink>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::logging::v2::CreateSinkRequest, ::google::logging::v2::LogSink>* streamer) {
                       return this->StreamedCreateSink(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateSink() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateSink(::grpc::ServerContext* /*context*/, const ::google::logging::v2::CreateSinkRequest* /*request*/, ::google::logging::v2::LogSink* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateSink(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::logging::v2::CreateSinkRequest,::google::logging::v2::LogSink>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateSink : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateSink() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::logging::v2::UpdateSinkRequest, ::google::logging::v2::LogSink>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::logging::v2::UpdateSinkRequest, ::google::logging::v2::LogSink>* streamer) {
                       return this->StreamedUpdateSink(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateSink() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateSink(::grpc::ServerContext* /*context*/, const ::google::logging::v2::UpdateSinkRequest* /*request*/, ::google::logging::v2::LogSink* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateSink(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::logging::v2::UpdateSinkRequest,::google::logging::v2::LogSink>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteSink : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteSink() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::logging::v2::DeleteSinkRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::logging::v2::DeleteSinkRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedDeleteSink(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteSink() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteSink(::grpc::ServerContext* /*context*/, const ::google::logging::v2::DeleteSinkRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteSink(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::logging::v2::DeleteSinkRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListExclusions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListExclusions() {
      ::grpc::Service::MarkMethodStreamed(16,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::logging::v2::ListExclusionsRequest, ::google::logging::v2::ListExclusionsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::logging::v2::ListExclusionsRequest, ::google::logging::v2::ListExclusionsResponse>* streamer) {
                       return this->StreamedListExclusions(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListExclusions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListExclusions(::grpc::ServerContext* /*context*/, const ::google::logging::v2::ListExclusionsRequest* /*request*/, ::google::logging::v2::ListExclusionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListExclusions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::logging::v2::ListExclusionsRequest,::google::logging::v2::ListExclusionsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetExclusion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetExclusion() {
      ::grpc::Service::MarkMethodStreamed(17,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::logging::v2::GetExclusionRequest, ::google::logging::v2::LogExclusion>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::logging::v2::GetExclusionRequest, ::google::logging::v2::LogExclusion>* streamer) {
                       return this->StreamedGetExclusion(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetExclusion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetExclusion(::grpc::ServerContext* /*context*/, const ::google::logging::v2::GetExclusionRequest* /*request*/, ::google::logging::v2::LogExclusion* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetExclusion(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::logging::v2::GetExclusionRequest,::google::logging::v2::LogExclusion>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateExclusion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateExclusion() {
      ::grpc::Service::MarkMethodStreamed(18,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::logging::v2::CreateExclusionRequest, ::google::logging::v2::LogExclusion>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::logging::v2::CreateExclusionRequest, ::google::logging::v2::LogExclusion>* streamer) {
                       return this->StreamedCreateExclusion(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateExclusion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateExclusion(::grpc::ServerContext* /*context*/, const ::google::logging::v2::CreateExclusionRequest* /*request*/, ::google::logging::v2::LogExclusion* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateExclusion(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::logging::v2::CreateExclusionRequest,::google::logging::v2::LogExclusion>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateExclusion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateExclusion() {
      ::grpc::Service::MarkMethodStreamed(19,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::logging::v2::UpdateExclusionRequest, ::google::logging::v2::LogExclusion>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::logging::v2::UpdateExclusionRequest, ::google::logging::v2::LogExclusion>* streamer) {
                       return this->StreamedUpdateExclusion(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateExclusion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateExclusion(::grpc::ServerContext* /*context*/, const ::google::logging::v2::UpdateExclusionRequest* /*request*/, ::google::logging::v2::LogExclusion* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateExclusion(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::logging::v2::UpdateExclusionRequest,::google::logging::v2::LogExclusion>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteExclusion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteExclusion() {
      ::grpc::Service::MarkMethodStreamed(20,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::logging::v2::DeleteExclusionRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::logging::v2::DeleteExclusionRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedDeleteExclusion(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteExclusion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteExclusion(::grpc::ServerContext* /*context*/, const ::google::logging::v2::DeleteExclusionRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteExclusion(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::logging::v2::DeleteExclusionRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCmekSettings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetCmekSettings() {
      ::grpc::Service::MarkMethodStreamed(21,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::logging::v2::GetCmekSettingsRequest, ::google::logging::v2::CmekSettings>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::logging::v2::GetCmekSettingsRequest, ::google::logging::v2::CmekSettings>* streamer) {
                       return this->StreamedGetCmekSettings(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetCmekSettings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCmekSettings(::grpc::ServerContext* /*context*/, const ::google::logging::v2::GetCmekSettingsRequest* /*request*/, ::google::logging::v2::CmekSettings* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCmekSettings(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::logging::v2::GetCmekSettingsRequest,::google::logging::v2::CmekSettings>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateCmekSettings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateCmekSettings() {
      ::grpc::Service::MarkMethodStreamed(22,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::logging::v2::UpdateCmekSettingsRequest, ::google::logging::v2::CmekSettings>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::logging::v2::UpdateCmekSettingsRequest, ::google::logging::v2::CmekSettings>* streamer) {
                       return this->StreamedUpdateCmekSettings(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateCmekSettings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateCmekSettings(::grpc::ServerContext* /*context*/, const ::google::logging::v2::UpdateCmekSettingsRequest* /*request*/, ::google::logging::v2::CmekSettings* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateCmekSettings(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::logging::v2::UpdateCmekSettingsRequest,::google::logging::v2::CmekSettings>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ListBuckets<WithStreamedUnaryMethod_GetBucket<WithStreamedUnaryMethod_CreateBucket<WithStreamedUnaryMethod_UpdateBucket<WithStreamedUnaryMethod_DeleteBucket<WithStreamedUnaryMethod_UndeleteBucket<WithStreamedUnaryMethod_ListViews<WithStreamedUnaryMethod_GetView<WithStreamedUnaryMethod_CreateView<WithStreamedUnaryMethod_UpdateView<WithStreamedUnaryMethod_DeleteView<WithStreamedUnaryMethod_ListSinks<WithStreamedUnaryMethod_GetSink<WithStreamedUnaryMethod_CreateSink<WithStreamedUnaryMethod_UpdateSink<WithStreamedUnaryMethod_DeleteSink<WithStreamedUnaryMethod_ListExclusions<WithStreamedUnaryMethod_GetExclusion<WithStreamedUnaryMethod_CreateExclusion<WithStreamedUnaryMethod_UpdateExclusion<WithStreamedUnaryMethod_DeleteExclusion<WithStreamedUnaryMethod_GetCmekSettings<WithStreamedUnaryMethod_UpdateCmekSettings<Service > > > > > > > > > > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ListBuckets<WithStreamedUnaryMethod_GetBucket<WithStreamedUnaryMethod_CreateBucket<WithStreamedUnaryMethod_UpdateBucket<WithStreamedUnaryMethod_DeleteBucket<WithStreamedUnaryMethod_UndeleteBucket<WithStreamedUnaryMethod_ListViews<WithStreamedUnaryMethod_GetView<WithStreamedUnaryMethod_CreateView<WithStreamedUnaryMethod_UpdateView<WithStreamedUnaryMethod_DeleteView<WithStreamedUnaryMethod_ListSinks<WithStreamedUnaryMethod_GetSink<WithStreamedUnaryMethod_CreateSink<WithStreamedUnaryMethod_UpdateSink<WithStreamedUnaryMethod_DeleteSink<WithStreamedUnaryMethod_ListExclusions<WithStreamedUnaryMethod_GetExclusion<WithStreamedUnaryMethod_CreateExclusion<WithStreamedUnaryMethod_UpdateExclusion<WithStreamedUnaryMethod_DeleteExclusion<WithStreamedUnaryMethod_GetCmekSettings<WithStreamedUnaryMethod_UpdateCmekSettings<Service > > > > > > > > > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace v2
}  // namespace logging
}  // namespace google


#endif  // GRPC_google_2flogging_2fv2_2flogging_5fconfig_2eproto__INCLUDED
