// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/system_parameter.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fsystem_5fparameter_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fsystem_5fparameter_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fapi_2fsystem_5fparameter_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fapi_2fsystem_5fparameter_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fapi_2fsystem_5fparameter_2eproto;
namespace google {
namespace api {
class SystemParameter;
struct SystemParameterDefaultTypeInternal;
extern SystemParameterDefaultTypeInternal _SystemParameter_default_instance_;
class SystemParameterRule;
struct SystemParameterRuleDefaultTypeInternal;
extern SystemParameterRuleDefaultTypeInternal _SystemParameterRule_default_instance_;
class SystemParameters;
struct SystemParametersDefaultTypeInternal;
extern SystemParametersDefaultTypeInternal _SystemParameters_default_instance_;
}  // namespace api
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::api::SystemParameter* Arena::CreateMaybeMessage<::google::api::SystemParameter>(Arena*);
template<> ::google::api::SystemParameterRule* Arena::CreateMaybeMessage<::google::api::SystemParameterRule>(Arena*);
template<> ::google::api::SystemParameters* Arena::CreateMaybeMessage<::google::api::SystemParameters>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace api {

// ===================================================================

class SystemParameters final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.SystemParameters) */ {
 public:
  inline SystemParameters() : SystemParameters(nullptr) {}
  ~SystemParameters() override;
  explicit PROTOBUF_CONSTEXPR SystemParameters(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SystemParameters(const SystemParameters& from);
  SystemParameters(SystemParameters&& from) noexcept
    : SystemParameters() {
    *this = ::std::move(from);
  }

  inline SystemParameters& operator=(const SystemParameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemParameters& operator=(SystemParameters&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SystemParameters& default_instance() {
    return *internal_default_instance();
  }
  static inline const SystemParameters* internal_default_instance() {
    return reinterpret_cast<const SystemParameters*>(
               &_SystemParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SystemParameters& a, SystemParameters& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemParameters* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SystemParameters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SystemParameters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SystemParameters>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SystemParameters& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SystemParameters& from) {
    SystemParameters::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SystemParameters* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.SystemParameters";
  }
  protected:
  explicit SystemParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRulesFieldNumber = 1,
  };
  // repeated .google.api.SystemParameterRule rules = 1;
  int rules_size() const;
  private:
  int _internal_rules_size() const;
  public:
  void clear_rules();
  ::google::api::SystemParameterRule* mutable_rules(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::SystemParameterRule >*
      mutable_rules();
  private:
  const ::google::api::SystemParameterRule& _internal_rules(int index) const;
  ::google::api::SystemParameterRule* _internal_add_rules();
  public:
  const ::google::api::SystemParameterRule& rules(int index) const;
  ::google::api::SystemParameterRule* add_rules();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::SystemParameterRule >&
      rules() const;

  // @@protoc_insertion_point(class_scope:google.api.SystemParameters)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::SystemParameterRule > rules_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fsystem_5fparameter_2eproto;
};
// -------------------------------------------------------------------

class SystemParameterRule final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.SystemParameterRule) */ {
 public:
  inline SystemParameterRule() : SystemParameterRule(nullptr) {}
  ~SystemParameterRule() override;
  explicit PROTOBUF_CONSTEXPR SystemParameterRule(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SystemParameterRule(const SystemParameterRule& from);
  SystemParameterRule(SystemParameterRule&& from) noexcept
    : SystemParameterRule() {
    *this = ::std::move(from);
  }

  inline SystemParameterRule& operator=(const SystemParameterRule& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemParameterRule& operator=(SystemParameterRule&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SystemParameterRule& default_instance() {
    return *internal_default_instance();
  }
  static inline const SystemParameterRule* internal_default_instance() {
    return reinterpret_cast<const SystemParameterRule*>(
               &_SystemParameterRule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SystemParameterRule& a, SystemParameterRule& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemParameterRule* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SystemParameterRule* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SystemParameterRule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SystemParameterRule>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SystemParameterRule& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SystemParameterRule& from) {
    SystemParameterRule::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SystemParameterRule* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.SystemParameterRule";
  }
  protected:
  explicit SystemParameterRule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParametersFieldNumber = 2,
    kSelectorFieldNumber = 1,
  };
  // repeated .google.api.SystemParameter parameters = 2;
  int parameters_size() const;
  private:
  int _internal_parameters_size() const;
  public:
  void clear_parameters();
  ::google::api::SystemParameter* mutable_parameters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::SystemParameter >*
      mutable_parameters();
  private:
  const ::google::api::SystemParameter& _internal_parameters(int index) const;
  ::google::api::SystemParameter* _internal_add_parameters();
  public:
  const ::google::api::SystemParameter& parameters(int index) const;
  ::google::api::SystemParameter* add_parameters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::SystemParameter >&
      parameters() const;

  // string selector = 1;
  void clear_selector();
  const std::string& selector() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_selector(ArgT0&& arg0, ArgT... args);
  std::string* mutable_selector();
  PROTOBUF_NODISCARD std::string* release_selector();
  void set_allocated_selector(std::string* selector);
  private:
  const std::string& _internal_selector() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_selector(const std::string& value);
  std::string* _internal_mutable_selector();
  public:

  // @@protoc_insertion_point(class_scope:google.api.SystemParameterRule)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::SystemParameter > parameters_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr selector_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fsystem_5fparameter_2eproto;
};
// -------------------------------------------------------------------

class SystemParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.SystemParameter) */ {
 public:
  inline SystemParameter() : SystemParameter(nullptr) {}
  ~SystemParameter() override;
  explicit PROTOBUF_CONSTEXPR SystemParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SystemParameter(const SystemParameter& from);
  SystemParameter(SystemParameter&& from) noexcept
    : SystemParameter() {
    *this = ::std::move(from);
  }

  inline SystemParameter& operator=(const SystemParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemParameter& operator=(SystemParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SystemParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const SystemParameter* internal_default_instance() {
    return reinterpret_cast<const SystemParameter*>(
               &_SystemParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SystemParameter& a, SystemParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SystemParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SystemParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SystemParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SystemParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SystemParameter& from) {
    SystemParameter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SystemParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.SystemParameter";
  }
  protected:
  explicit SystemParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kHttpHeaderFieldNumber = 2,
    kUrlQueryParameterFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string http_header = 2;
  void clear_http_header();
  const std::string& http_header() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_http_header(ArgT0&& arg0, ArgT... args);
  std::string* mutable_http_header();
  PROTOBUF_NODISCARD std::string* release_http_header();
  void set_allocated_http_header(std::string* http_header);
  private:
  const std::string& _internal_http_header() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_http_header(const std::string& value);
  std::string* _internal_mutable_http_header();
  public:

  // string url_query_parameter = 3;
  void clear_url_query_parameter();
  const std::string& url_query_parameter() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url_query_parameter(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url_query_parameter();
  PROTOBUF_NODISCARD std::string* release_url_query_parameter();
  void set_allocated_url_query_parameter(std::string* url_query_parameter);
  private:
  const std::string& _internal_url_query_parameter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url_query_parameter(const std::string& value);
  std::string* _internal_mutable_url_query_parameter();
  public:

  // @@protoc_insertion_point(class_scope:google.api.SystemParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr http_header_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_query_parameter_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fsystem_5fparameter_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SystemParameters

// repeated .google.api.SystemParameterRule rules = 1;
inline int SystemParameters::_internal_rules_size() const {
  return _impl_.rules_.size();
}
inline int SystemParameters::rules_size() const {
  return _internal_rules_size();
}
inline void SystemParameters::clear_rules() {
  _impl_.rules_.Clear();
}
inline ::google::api::SystemParameterRule* SystemParameters::mutable_rules(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.SystemParameters.rules)
  return _impl_.rules_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::SystemParameterRule >*
SystemParameters::mutable_rules() {
  // @@protoc_insertion_point(field_mutable_list:google.api.SystemParameters.rules)
  return &_impl_.rules_;
}
inline const ::google::api::SystemParameterRule& SystemParameters::_internal_rules(int index) const {
  return _impl_.rules_.Get(index);
}
inline const ::google::api::SystemParameterRule& SystemParameters::rules(int index) const {
  // @@protoc_insertion_point(field_get:google.api.SystemParameters.rules)
  return _internal_rules(index);
}
inline ::google::api::SystemParameterRule* SystemParameters::_internal_add_rules() {
  return _impl_.rules_.Add();
}
inline ::google::api::SystemParameterRule* SystemParameters::add_rules() {
  ::google::api::SystemParameterRule* _add = _internal_add_rules();
  // @@protoc_insertion_point(field_add:google.api.SystemParameters.rules)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::SystemParameterRule >&
SystemParameters::rules() const {
  // @@protoc_insertion_point(field_list:google.api.SystemParameters.rules)
  return _impl_.rules_;
}

// -------------------------------------------------------------------

// SystemParameterRule

// string selector = 1;
inline void SystemParameterRule::clear_selector() {
  _impl_.selector_.ClearToEmpty();
}
inline const std::string& SystemParameterRule::selector() const {
  // @@protoc_insertion_point(field_get:google.api.SystemParameterRule.selector)
  return _internal_selector();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SystemParameterRule::set_selector(ArgT0&& arg0, ArgT... args) {
 
 _impl_.selector_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.SystemParameterRule.selector)
}
inline std::string* SystemParameterRule::mutable_selector() {
  std::string* _s = _internal_mutable_selector();
  // @@protoc_insertion_point(field_mutable:google.api.SystemParameterRule.selector)
  return _s;
}
inline const std::string& SystemParameterRule::_internal_selector() const {
  return _impl_.selector_.Get();
}
inline void SystemParameterRule::_internal_set_selector(const std::string& value) {
  
  _impl_.selector_.Set(value, GetArenaForAllocation());
}
inline std::string* SystemParameterRule::_internal_mutable_selector() {
  
  return _impl_.selector_.Mutable(GetArenaForAllocation());
}
inline std::string* SystemParameterRule::release_selector() {
  // @@protoc_insertion_point(field_release:google.api.SystemParameterRule.selector)
  return _impl_.selector_.Release();
}
inline void SystemParameterRule::set_allocated_selector(std::string* selector) {
  if (selector != nullptr) {
    
  } else {
    
  }
  _impl_.selector_.SetAllocated(selector, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.selector_.IsDefault()) {
    _impl_.selector_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.SystemParameterRule.selector)
}

// repeated .google.api.SystemParameter parameters = 2;
inline int SystemParameterRule::_internal_parameters_size() const {
  return _impl_.parameters_.size();
}
inline int SystemParameterRule::parameters_size() const {
  return _internal_parameters_size();
}
inline void SystemParameterRule::clear_parameters() {
  _impl_.parameters_.Clear();
}
inline ::google::api::SystemParameter* SystemParameterRule::mutable_parameters(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.SystemParameterRule.parameters)
  return _impl_.parameters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::SystemParameter >*
SystemParameterRule::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable_list:google.api.SystemParameterRule.parameters)
  return &_impl_.parameters_;
}
inline const ::google::api::SystemParameter& SystemParameterRule::_internal_parameters(int index) const {
  return _impl_.parameters_.Get(index);
}
inline const ::google::api::SystemParameter& SystemParameterRule::parameters(int index) const {
  // @@protoc_insertion_point(field_get:google.api.SystemParameterRule.parameters)
  return _internal_parameters(index);
}
inline ::google::api::SystemParameter* SystemParameterRule::_internal_add_parameters() {
  return _impl_.parameters_.Add();
}
inline ::google::api::SystemParameter* SystemParameterRule::add_parameters() {
  ::google::api::SystemParameter* _add = _internal_add_parameters();
  // @@protoc_insertion_point(field_add:google.api.SystemParameterRule.parameters)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::SystemParameter >&
SystemParameterRule::parameters() const {
  // @@protoc_insertion_point(field_list:google.api.SystemParameterRule.parameters)
  return _impl_.parameters_;
}

// -------------------------------------------------------------------

// SystemParameter

// string name = 1;
inline void SystemParameter::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& SystemParameter::name() const {
  // @@protoc_insertion_point(field_get:google.api.SystemParameter.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SystemParameter::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.SystemParameter.name)
}
inline std::string* SystemParameter::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.api.SystemParameter.name)
  return _s;
}
inline const std::string& SystemParameter::_internal_name() const {
  return _impl_.name_.Get();
}
inline void SystemParameter::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* SystemParameter::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* SystemParameter::release_name() {
  // @@protoc_insertion_point(field_release:google.api.SystemParameter.name)
  return _impl_.name_.Release();
}
inline void SystemParameter::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.SystemParameter.name)
}

// string http_header = 2;
inline void SystemParameter::clear_http_header() {
  _impl_.http_header_.ClearToEmpty();
}
inline const std::string& SystemParameter::http_header() const {
  // @@protoc_insertion_point(field_get:google.api.SystemParameter.http_header)
  return _internal_http_header();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SystemParameter::set_http_header(ArgT0&& arg0, ArgT... args) {
 
 _impl_.http_header_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.SystemParameter.http_header)
}
inline std::string* SystemParameter::mutable_http_header() {
  std::string* _s = _internal_mutable_http_header();
  // @@protoc_insertion_point(field_mutable:google.api.SystemParameter.http_header)
  return _s;
}
inline const std::string& SystemParameter::_internal_http_header() const {
  return _impl_.http_header_.Get();
}
inline void SystemParameter::_internal_set_http_header(const std::string& value) {
  
  _impl_.http_header_.Set(value, GetArenaForAllocation());
}
inline std::string* SystemParameter::_internal_mutable_http_header() {
  
  return _impl_.http_header_.Mutable(GetArenaForAllocation());
}
inline std::string* SystemParameter::release_http_header() {
  // @@protoc_insertion_point(field_release:google.api.SystemParameter.http_header)
  return _impl_.http_header_.Release();
}
inline void SystemParameter::set_allocated_http_header(std::string* http_header) {
  if (http_header != nullptr) {
    
  } else {
    
  }
  _impl_.http_header_.SetAllocated(http_header, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.http_header_.IsDefault()) {
    _impl_.http_header_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.SystemParameter.http_header)
}

// string url_query_parameter = 3;
inline void SystemParameter::clear_url_query_parameter() {
  _impl_.url_query_parameter_.ClearToEmpty();
}
inline const std::string& SystemParameter::url_query_parameter() const {
  // @@protoc_insertion_point(field_get:google.api.SystemParameter.url_query_parameter)
  return _internal_url_query_parameter();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SystemParameter::set_url_query_parameter(ArgT0&& arg0, ArgT... args) {
 
 _impl_.url_query_parameter_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.SystemParameter.url_query_parameter)
}
inline std::string* SystemParameter::mutable_url_query_parameter() {
  std::string* _s = _internal_mutable_url_query_parameter();
  // @@protoc_insertion_point(field_mutable:google.api.SystemParameter.url_query_parameter)
  return _s;
}
inline const std::string& SystemParameter::_internal_url_query_parameter() const {
  return _impl_.url_query_parameter_.Get();
}
inline void SystemParameter::_internal_set_url_query_parameter(const std::string& value) {
  
  _impl_.url_query_parameter_.Set(value, GetArenaForAllocation());
}
inline std::string* SystemParameter::_internal_mutable_url_query_parameter() {
  
  return _impl_.url_query_parameter_.Mutable(GetArenaForAllocation());
}
inline std::string* SystemParameter::release_url_query_parameter() {
  // @@protoc_insertion_point(field_release:google.api.SystemParameter.url_query_parameter)
  return _impl_.url_query_parameter_.Release();
}
inline void SystemParameter::set_allocated_url_query_parameter(std::string* url_query_parameter) {
  if (url_query_parameter != nullptr) {
    
  } else {
    
  }
  _impl_.url_query_parameter_.SetAllocated(url_query_parameter, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.url_query_parameter_.IsDefault()) {
    _impl_.url_query_parameter_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.SystemParameter.url_query_parameter)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace api
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fsystem_5fparameter_2eproto
