// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/metric.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fmetric_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fmetric_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/label.pb.h"
#include "google/api/launch_stage.pb.h"
#include <google/protobuf/duration.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fapi_2fmetric_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fapi_2fmetric_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fapi_2fmetric_2eproto;
namespace google {
namespace api {
class Metric;
struct MetricDefaultTypeInternal;
extern MetricDefaultTypeInternal _Metric_default_instance_;
class MetricDescriptor;
struct MetricDescriptorDefaultTypeInternal;
extern MetricDescriptorDefaultTypeInternal _MetricDescriptor_default_instance_;
class MetricDescriptor_MetricDescriptorMetadata;
struct MetricDescriptor_MetricDescriptorMetadataDefaultTypeInternal;
extern MetricDescriptor_MetricDescriptorMetadataDefaultTypeInternal _MetricDescriptor_MetricDescriptorMetadata_default_instance_;
class Metric_LabelsEntry_DoNotUse;
struct Metric_LabelsEntry_DoNotUseDefaultTypeInternal;
extern Metric_LabelsEntry_DoNotUseDefaultTypeInternal _Metric_LabelsEntry_DoNotUse_default_instance_;
}  // namespace api
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::api::Metric* Arena::CreateMaybeMessage<::google::api::Metric>(Arena*);
template<> ::google::api::MetricDescriptor* Arena::CreateMaybeMessage<::google::api::MetricDescriptor>(Arena*);
template<> ::google::api::MetricDescriptor_MetricDescriptorMetadata* Arena::CreateMaybeMessage<::google::api::MetricDescriptor_MetricDescriptorMetadata>(Arena*);
template<> ::google::api::Metric_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage<::google::api::Metric_LabelsEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace api {

enum MetricDescriptor_MetricKind : int {
  MetricDescriptor_MetricKind_METRIC_KIND_UNSPECIFIED = 0,
  MetricDescriptor_MetricKind_GAUGE = 1,
  MetricDescriptor_MetricKind_DELTA = 2,
  MetricDescriptor_MetricKind_CUMULATIVE = 3,
  MetricDescriptor_MetricKind_MetricDescriptor_MetricKind_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MetricDescriptor_MetricKind_MetricDescriptor_MetricKind_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MetricDescriptor_MetricKind_IsValid(int value);
constexpr MetricDescriptor_MetricKind MetricDescriptor_MetricKind_MetricKind_MIN = MetricDescriptor_MetricKind_METRIC_KIND_UNSPECIFIED;
constexpr MetricDescriptor_MetricKind MetricDescriptor_MetricKind_MetricKind_MAX = MetricDescriptor_MetricKind_CUMULATIVE;
constexpr int MetricDescriptor_MetricKind_MetricKind_ARRAYSIZE = MetricDescriptor_MetricKind_MetricKind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MetricDescriptor_MetricKind_descriptor();
template<typename T>
inline const std::string& MetricDescriptor_MetricKind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MetricDescriptor_MetricKind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MetricDescriptor_MetricKind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MetricDescriptor_MetricKind_descriptor(), enum_t_value);
}
inline bool MetricDescriptor_MetricKind_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MetricDescriptor_MetricKind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MetricDescriptor_MetricKind>(
    MetricDescriptor_MetricKind_descriptor(), name, value);
}
enum MetricDescriptor_ValueType : int {
  MetricDescriptor_ValueType_VALUE_TYPE_UNSPECIFIED = 0,
  MetricDescriptor_ValueType_BOOL = 1,
  MetricDescriptor_ValueType_INT64 = 2,
  MetricDescriptor_ValueType_DOUBLE = 3,
  MetricDescriptor_ValueType_STRING = 4,
  MetricDescriptor_ValueType_DISTRIBUTION = 5,
  MetricDescriptor_ValueType_MONEY = 6,
  MetricDescriptor_ValueType_MetricDescriptor_ValueType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MetricDescriptor_ValueType_MetricDescriptor_ValueType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MetricDescriptor_ValueType_IsValid(int value);
constexpr MetricDescriptor_ValueType MetricDescriptor_ValueType_ValueType_MIN = MetricDescriptor_ValueType_VALUE_TYPE_UNSPECIFIED;
constexpr MetricDescriptor_ValueType MetricDescriptor_ValueType_ValueType_MAX = MetricDescriptor_ValueType_MONEY;
constexpr int MetricDescriptor_ValueType_ValueType_ARRAYSIZE = MetricDescriptor_ValueType_ValueType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MetricDescriptor_ValueType_descriptor();
template<typename T>
inline const std::string& MetricDescriptor_ValueType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MetricDescriptor_ValueType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MetricDescriptor_ValueType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MetricDescriptor_ValueType_descriptor(), enum_t_value);
}
inline bool MetricDescriptor_ValueType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MetricDescriptor_ValueType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MetricDescriptor_ValueType>(
    MetricDescriptor_ValueType_descriptor(), name, value);
}
// ===================================================================

class MetricDescriptor_MetricDescriptorMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.MetricDescriptor.MetricDescriptorMetadata) */ {
 public:
  inline MetricDescriptor_MetricDescriptorMetadata() : MetricDescriptor_MetricDescriptorMetadata(nullptr) {}
  ~MetricDescriptor_MetricDescriptorMetadata() override;
  explicit PROTOBUF_CONSTEXPR MetricDescriptor_MetricDescriptorMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MetricDescriptor_MetricDescriptorMetadata(const MetricDescriptor_MetricDescriptorMetadata& from);
  MetricDescriptor_MetricDescriptorMetadata(MetricDescriptor_MetricDescriptorMetadata&& from) noexcept
    : MetricDescriptor_MetricDescriptorMetadata() {
    *this = ::std::move(from);
  }

  inline MetricDescriptor_MetricDescriptorMetadata& operator=(const MetricDescriptor_MetricDescriptorMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetricDescriptor_MetricDescriptorMetadata& operator=(MetricDescriptor_MetricDescriptorMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MetricDescriptor_MetricDescriptorMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const MetricDescriptor_MetricDescriptorMetadata* internal_default_instance() {
    return reinterpret_cast<const MetricDescriptor_MetricDescriptorMetadata*>(
               &_MetricDescriptor_MetricDescriptorMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MetricDescriptor_MetricDescriptorMetadata& a, MetricDescriptor_MetricDescriptorMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(MetricDescriptor_MetricDescriptorMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MetricDescriptor_MetricDescriptorMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MetricDescriptor_MetricDescriptorMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MetricDescriptor_MetricDescriptorMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MetricDescriptor_MetricDescriptorMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MetricDescriptor_MetricDescriptorMetadata& from) {
    MetricDescriptor_MetricDescriptorMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MetricDescriptor_MetricDescriptorMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.MetricDescriptor.MetricDescriptorMetadata";
  }
  protected:
  explicit MetricDescriptor_MetricDescriptorMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSamplePeriodFieldNumber = 2,
    kIngestDelayFieldNumber = 3,
    kLaunchStageFieldNumber = 1,
  };
  // .google.protobuf.Duration sample_period = 2;
  bool has_sample_period() const;
  private:
  bool _internal_has_sample_period() const;
  public:
  void clear_sample_period();
  const ::PROTOBUF_NAMESPACE_ID::Duration& sample_period() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_sample_period();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_sample_period();
  void set_allocated_sample_period(::PROTOBUF_NAMESPACE_ID::Duration* sample_period);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_sample_period() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_sample_period();
  public:
  void unsafe_arena_set_allocated_sample_period(
      ::PROTOBUF_NAMESPACE_ID::Duration* sample_period);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_sample_period();

  // .google.protobuf.Duration ingest_delay = 3;
  bool has_ingest_delay() const;
  private:
  bool _internal_has_ingest_delay() const;
  public:
  void clear_ingest_delay();
  const ::PROTOBUF_NAMESPACE_ID::Duration& ingest_delay() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_ingest_delay();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_ingest_delay();
  void set_allocated_ingest_delay(::PROTOBUF_NAMESPACE_ID::Duration* ingest_delay);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_ingest_delay() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_ingest_delay();
  public:
  void unsafe_arena_set_allocated_ingest_delay(
      ::PROTOBUF_NAMESPACE_ID::Duration* ingest_delay);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_ingest_delay();

  // .google.api.LaunchStage launch_stage = 1 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_launch_stage();
  PROTOBUF_DEPRECATED ::google::api::LaunchStage launch_stage() const;
  PROTOBUF_DEPRECATED void set_launch_stage(::google::api::LaunchStage value);
  private:
  ::google::api::LaunchStage _internal_launch_stage() const;
  void _internal_set_launch_stage(::google::api::LaunchStage value);
  public:

  // @@protoc_insertion_point(class_scope:google.api.MetricDescriptor.MetricDescriptorMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::Duration* sample_period_;
    ::PROTOBUF_NAMESPACE_ID::Duration* ingest_delay_;
    int launch_stage_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fmetric_2eproto;
};
// -------------------------------------------------------------------

class MetricDescriptor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.MetricDescriptor) */ {
 public:
  inline MetricDescriptor() : MetricDescriptor(nullptr) {}
  ~MetricDescriptor() override;
  explicit PROTOBUF_CONSTEXPR MetricDescriptor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MetricDescriptor(const MetricDescriptor& from);
  MetricDescriptor(MetricDescriptor&& from) noexcept
    : MetricDescriptor() {
    *this = ::std::move(from);
  }

  inline MetricDescriptor& operator=(const MetricDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetricDescriptor& operator=(MetricDescriptor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MetricDescriptor& default_instance() {
    return *internal_default_instance();
  }
  static inline const MetricDescriptor* internal_default_instance() {
    return reinterpret_cast<const MetricDescriptor*>(
               &_MetricDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MetricDescriptor& a, MetricDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(MetricDescriptor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MetricDescriptor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MetricDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MetricDescriptor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MetricDescriptor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MetricDescriptor& from) {
    MetricDescriptor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MetricDescriptor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.MetricDescriptor";
  }
  protected:
  explicit MetricDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MetricDescriptor_MetricDescriptorMetadata MetricDescriptorMetadata;

  typedef MetricDescriptor_MetricKind MetricKind;
  static constexpr MetricKind METRIC_KIND_UNSPECIFIED =
    MetricDescriptor_MetricKind_METRIC_KIND_UNSPECIFIED;
  static constexpr MetricKind GAUGE =
    MetricDescriptor_MetricKind_GAUGE;
  static constexpr MetricKind DELTA =
    MetricDescriptor_MetricKind_DELTA;
  static constexpr MetricKind CUMULATIVE =
    MetricDescriptor_MetricKind_CUMULATIVE;
  static inline bool MetricKind_IsValid(int value) {
    return MetricDescriptor_MetricKind_IsValid(value);
  }
  static constexpr MetricKind MetricKind_MIN =
    MetricDescriptor_MetricKind_MetricKind_MIN;
  static constexpr MetricKind MetricKind_MAX =
    MetricDescriptor_MetricKind_MetricKind_MAX;
  static constexpr int MetricKind_ARRAYSIZE =
    MetricDescriptor_MetricKind_MetricKind_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MetricKind_descriptor() {
    return MetricDescriptor_MetricKind_descriptor();
  }
  template<typename T>
  static inline const std::string& MetricKind_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MetricKind>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MetricKind_Name.");
    return MetricDescriptor_MetricKind_Name(enum_t_value);
  }
  static inline bool MetricKind_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MetricKind* value) {
    return MetricDescriptor_MetricKind_Parse(name, value);
  }

  typedef MetricDescriptor_ValueType ValueType;
  static constexpr ValueType VALUE_TYPE_UNSPECIFIED =
    MetricDescriptor_ValueType_VALUE_TYPE_UNSPECIFIED;
  static constexpr ValueType BOOL =
    MetricDescriptor_ValueType_BOOL;
  static constexpr ValueType INT64 =
    MetricDescriptor_ValueType_INT64;
  static constexpr ValueType DOUBLE =
    MetricDescriptor_ValueType_DOUBLE;
  static constexpr ValueType STRING =
    MetricDescriptor_ValueType_STRING;
  static constexpr ValueType DISTRIBUTION =
    MetricDescriptor_ValueType_DISTRIBUTION;
  static constexpr ValueType MONEY =
    MetricDescriptor_ValueType_MONEY;
  static inline bool ValueType_IsValid(int value) {
    return MetricDescriptor_ValueType_IsValid(value);
  }
  static constexpr ValueType ValueType_MIN =
    MetricDescriptor_ValueType_ValueType_MIN;
  static constexpr ValueType ValueType_MAX =
    MetricDescriptor_ValueType_ValueType_MAX;
  static constexpr int ValueType_ARRAYSIZE =
    MetricDescriptor_ValueType_ValueType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ValueType_descriptor() {
    return MetricDescriptor_ValueType_descriptor();
  }
  template<typename T>
  static inline const std::string& ValueType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ValueType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ValueType_Name.");
    return MetricDescriptor_ValueType_Name(enum_t_value);
  }
  static inline bool ValueType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ValueType* value) {
    return MetricDescriptor_ValueType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 2,
    kMonitoredResourceTypesFieldNumber = 13,
    kNameFieldNumber = 1,
    kUnitFieldNumber = 5,
    kDescriptionFieldNumber = 6,
    kDisplayNameFieldNumber = 7,
    kTypeFieldNumber = 8,
    kMetadataFieldNumber = 10,
    kMetricKindFieldNumber = 3,
    kValueTypeFieldNumber = 4,
    kLaunchStageFieldNumber = 12,
  };
  // repeated .google.api.LabelDescriptor labels = 2;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  ::google::api::LabelDescriptor* mutable_labels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::LabelDescriptor >*
      mutable_labels();
  private:
  const ::google::api::LabelDescriptor& _internal_labels(int index) const;
  ::google::api::LabelDescriptor* _internal_add_labels();
  public:
  const ::google::api::LabelDescriptor& labels(int index) const;
  ::google::api::LabelDescriptor* add_labels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::LabelDescriptor >&
      labels() const;

  // repeated string monitored_resource_types = 13;
  int monitored_resource_types_size() const;
  private:
  int _internal_monitored_resource_types_size() const;
  public:
  void clear_monitored_resource_types();
  const std::string& monitored_resource_types(int index) const;
  std::string* mutable_monitored_resource_types(int index);
  void set_monitored_resource_types(int index, const std::string& value);
  void set_monitored_resource_types(int index, std::string&& value);
  void set_monitored_resource_types(int index, const char* value);
  void set_monitored_resource_types(int index, const char* value, size_t size);
  std::string* add_monitored_resource_types();
  void add_monitored_resource_types(const std::string& value);
  void add_monitored_resource_types(std::string&& value);
  void add_monitored_resource_types(const char* value);
  void add_monitored_resource_types(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& monitored_resource_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_monitored_resource_types();
  private:
  const std::string& _internal_monitored_resource_types(int index) const;
  std::string* _internal_add_monitored_resource_types();
  public:

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string unit = 5;
  void clear_unit();
  const std::string& unit() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_unit(ArgT0&& arg0, ArgT... args);
  std::string* mutable_unit();
  PROTOBUF_NODISCARD std::string* release_unit();
  void set_allocated_unit(std::string* unit);
  private:
  const std::string& _internal_unit() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unit(const std::string& value);
  std::string* _internal_mutable_unit();
  public:

  // string description = 6;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string display_name = 7;
  void clear_display_name();
  const std::string& display_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_display_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_display_name();
  PROTOBUF_NODISCARD std::string* release_display_name();
  void set_allocated_display_name(std::string* display_name);
  private:
  const std::string& _internal_display_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_display_name(const std::string& value);
  std::string* _internal_mutable_display_name();
  public:

  // string type = 8;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // .google.api.MetricDescriptor.MetricDescriptorMetadata metadata = 10;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::google::api::MetricDescriptor_MetricDescriptorMetadata& metadata() const;
  PROTOBUF_NODISCARD ::google::api::MetricDescriptor_MetricDescriptorMetadata* release_metadata();
  ::google::api::MetricDescriptor_MetricDescriptorMetadata* mutable_metadata();
  void set_allocated_metadata(::google::api::MetricDescriptor_MetricDescriptorMetadata* metadata);
  private:
  const ::google::api::MetricDescriptor_MetricDescriptorMetadata& _internal_metadata() const;
  ::google::api::MetricDescriptor_MetricDescriptorMetadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::google::api::MetricDescriptor_MetricDescriptorMetadata* metadata);
  ::google::api::MetricDescriptor_MetricDescriptorMetadata* unsafe_arena_release_metadata();

  // .google.api.MetricDescriptor.MetricKind metric_kind = 3;
  void clear_metric_kind();
  ::google::api::MetricDescriptor_MetricKind metric_kind() const;
  void set_metric_kind(::google::api::MetricDescriptor_MetricKind value);
  private:
  ::google::api::MetricDescriptor_MetricKind _internal_metric_kind() const;
  void _internal_set_metric_kind(::google::api::MetricDescriptor_MetricKind value);
  public:

  // .google.api.MetricDescriptor.ValueType value_type = 4;
  void clear_value_type();
  ::google::api::MetricDescriptor_ValueType value_type() const;
  void set_value_type(::google::api::MetricDescriptor_ValueType value);
  private:
  ::google::api::MetricDescriptor_ValueType _internal_value_type() const;
  void _internal_set_value_type(::google::api::MetricDescriptor_ValueType value);
  public:

  // .google.api.LaunchStage launch_stage = 12;
  void clear_launch_stage();
  ::google::api::LaunchStage launch_stage() const;
  void set_launch_stage(::google::api::LaunchStage value);
  private:
  ::google::api::LaunchStage _internal_launch_stage() const;
  void _internal_set_launch_stage(::google::api::LaunchStage value);
  public:

  // @@protoc_insertion_point(class_scope:google.api.MetricDescriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::LabelDescriptor > labels_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> monitored_resource_types_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
    ::google::api::MetricDescriptor_MetricDescriptorMetadata* metadata_;
    int metric_kind_;
    int value_type_;
    int launch_stage_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fmetric_2eproto;
};
// -------------------------------------------------------------------

class Metric_LabelsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Metric_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Metric_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  Metric_LabelsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR Metric_LabelsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Metric_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Metric_LabelsEntry_DoNotUse& other);
  static const Metric_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Metric_LabelsEntry_DoNotUse*>(&_Metric_LabelsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.api.Metric.LabelsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.api.Metric.LabelsEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fapi_2fmetric_2eproto;
};

// -------------------------------------------------------------------

class Metric final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.Metric) */ {
 public:
  inline Metric() : Metric(nullptr) {}
  ~Metric() override;
  explicit PROTOBUF_CONSTEXPR Metric(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Metric(const Metric& from);
  Metric(Metric&& from) noexcept
    : Metric() {
    *this = ::std::move(from);
  }

  inline Metric& operator=(const Metric& from) {
    CopyFrom(from);
    return *this;
  }
  inline Metric& operator=(Metric&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Metric& default_instance() {
    return *internal_default_instance();
  }
  static inline const Metric* internal_default_instance() {
    return reinterpret_cast<const Metric*>(
               &_Metric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Metric& a, Metric& b) {
    a.Swap(&b);
  }
  inline void Swap(Metric* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Metric* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Metric* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Metric>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Metric& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Metric& from) {
    Metric::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Metric* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.Metric";
  }
  protected:
  explicit Metric(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // map<string, string> labels = 2;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_labels();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_labels();

  // string type = 3;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // @@protoc_insertion_point(class_scope:google.api.Metric)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        Metric_LabelsEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> labels_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fmetric_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MetricDescriptor_MetricDescriptorMetadata

// .google.api.LaunchStage launch_stage = 1 [deprecated = true];
inline void MetricDescriptor_MetricDescriptorMetadata::clear_launch_stage() {
  _impl_.launch_stage_ = 0;
}
inline ::google::api::LaunchStage MetricDescriptor_MetricDescriptorMetadata::_internal_launch_stage() const {
  return static_cast< ::google::api::LaunchStage >(_impl_.launch_stage_);
}
inline ::google::api::LaunchStage MetricDescriptor_MetricDescriptorMetadata::launch_stage() const {
  // @@protoc_insertion_point(field_get:google.api.MetricDescriptor.MetricDescriptorMetadata.launch_stage)
  return _internal_launch_stage();
}
inline void MetricDescriptor_MetricDescriptorMetadata::_internal_set_launch_stage(::google::api::LaunchStage value) {
  
  _impl_.launch_stage_ = value;
}
inline void MetricDescriptor_MetricDescriptorMetadata::set_launch_stage(::google::api::LaunchStage value) {
  _internal_set_launch_stage(value);
  // @@protoc_insertion_point(field_set:google.api.MetricDescriptor.MetricDescriptorMetadata.launch_stage)
}

// .google.protobuf.Duration sample_period = 2;
inline bool MetricDescriptor_MetricDescriptorMetadata::_internal_has_sample_period() const {
  return this != internal_default_instance() && _impl_.sample_period_ != nullptr;
}
inline bool MetricDescriptor_MetricDescriptorMetadata::has_sample_period() const {
  return _internal_has_sample_period();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& MetricDescriptor_MetricDescriptorMetadata::_internal_sample_period() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.sample_period_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& MetricDescriptor_MetricDescriptorMetadata::sample_period() const {
  // @@protoc_insertion_point(field_get:google.api.MetricDescriptor.MetricDescriptorMetadata.sample_period)
  return _internal_sample_period();
}
inline void MetricDescriptor_MetricDescriptorMetadata::unsafe_arena_set_allocated_sample_period(
    ::PROTOBUF_NAMESPACE_ID::Duration* sample_period) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sample_period_);
  }
  _impl_.sample_period_ = sample_period;
  if (sample_period) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.MetricDescriptor.MetricDescriptorMetadata.sample_period)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* MetricDescriptor_MetricDescriptorMetadata::release_sample_period() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.sample_period_;
  _impl_.sample_period_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* MetricDescriptor_MetricDescriptorMetadata::unsafe_arena_release_sample_period() {
  // @@protoc_insertion_point(field_release:google.api.MetricDescriptor.MetricDescriptorMetadata.sample_period)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.sample_period_;
  _impl_.sample_period_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* MetricDescriptor_MetricDescriptorMetadata::_internal_mutable_sample_period() {
  
  if (_impl_.sample_period_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.sample_period_ = p;
  }
  return _impl_.sample_period_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* MetricDescriptor_MetricDescriptorMetadata::mutable_sample_period() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_sample_period();
  // @@protoc_insertion_point(field_mutable:google.api.MetricDescriptor.MetricDescriptorMetadata.sample_period)
  return _msg;
}
inline void MetricDescriptor_MetricDescriptorMetadata::set_allocated_sample_period(::PROTOBUF_NAMESPACE_ID::Duration* sample_period) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sample_period_);
  }
  if (sample_period) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sample_period));
    if (message_arena != submessage_arena) {
      sample_period = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sample_period, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.sample_period_ = sample_period;
  // @@protoc_insertion_point(field_set_allocated:google.api.MetricDescriptor.MetricDescriptorMetadata.sample_period)
}

// .google.protobuf.Duration ingest_delay = 3;
inline bool MetricDescriptor_MetricDescriptorMetadata::_internal_has_ingest_delay() const {
  return this != internal_default_instance() && _impl_.ingest_delay_ != nullptr;
}
inline bool MetricDescriptor_MetricDescriptorMetadata::has_ingest_delay() const {
  return _internal_has_ingest_delay();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& MetricDescriptor_MetricDescriptorMetadata::_internal_ingest_delay() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.ingest_delay_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& MetricDescriptor_MetricDescriptorMetadata::ingest_delay() const {
  // @@protoc_insertion_point(field_get:google.api.MetricDescriptor.MetricDescriptorMetadata.ingest_delay)
  return _internal_ingest_delay();
}
inline void MetricDescriptor_MetricDescriptorMetadata::unsafe_arena_set_allocated_ingest_delay(
    ::PROTOBUF_NAMESPACE_ID::Duration* ingest_delay) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ingest_delay_);
  }
  _impl_.ingest_delay_ = ingest_delay;
  if (ingest_delay) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.MetricDescriptor.MetricDescriptorMetadata.ingest_delay)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* MetricDescriptor_MetricDescriptorMetadata::release_ingest_delay() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.ingest_delay_;
  _impl_.ingest_delay_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* MetricDescriptor_MetricDescriptorMetadata::unsafe_arena_release_ingest_delay() {
  // @@protoc_insertion_point(field_release:google.api.MetricDescriptor.MetricDescriptorMetadata.ingest_delay)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.ingest_delay_;
  _impl_.ingest_delay_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* MetricDescriptor_MetricDescriptorMetadata::_internal_mutable_ingest_delay() {
  
  if (_impl_.ingest_delay_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.ingest_delay_ = p;
  }
  return _impl_.ingest_delay_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* MetricDescriptor_MetricDescriptorMetadata::mutable_ingest_delay() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_ingest_delay();
  // @@protoc_insertion_point(field_mutable:google.api.MetricDescriptor.MetricDescriptorMetadata.ingest_delay)
  return _msg;
}
inline void MetricDescriptor_MetricDescriptorMetadata::set_allocated_ingest_delay(::PROTOBUF_NAMESPACE_ID::Duration* ingest_delay) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ingest_delay_);
  }
  if (ingest_delay) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ingest_delay));
    if (message_arena != submessage_arena) {
      ingest_delay = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ingest_delay, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.ingest_delay_ = ingest_delay;
  // @@protoc_insertion_point(field_set_allocated:google.api.MetricDescriptor.MetricDescriptorMetadata.ingest_delay)
}

// -------------------------------------------------------------------

// MetricDescriptor

// string name = 1;
inline void MetricDescriptor::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& MetricDescriptor::name() const {
  // @@protoc_insertion_point(field_get:google.api.MetricDescriptor.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MetricDescriptor::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.MetricDescriptor.name)
}
inline std::string* MetricDescriptor::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.api.MetricDescriptor.name)
  return _s;
}
inline const std::string& MetricDescriptor::_internal_name() const {
  return _impl_.name_.Get();
}
inline void MetricDescriptor::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* MetricDescriptor::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* MetricDescriptor::release_name() {
  // @@protoc_insertion_point(field_release:google.api.MetricDescriptor.name)
  return _impl_.name_.Release();
}
inline void MetricDescriptor::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.MetricDescriptor.name)
}

// string type = 8;
inline void MetricDescriptor::clear_type() {
  _impl_.type_.ClearToEmpty();
}
inline const std::string& MetricDescriptor::type() const {
  // @@protoc_insertion_point(field_get:google.api.MetricDescriptor.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MetricDescriptor::set_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.MetricDescriptor.type)
}
inline std::string* MetricDescriptor::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:google.api.MetricDescriptor.type)
  return _s;
}
inline const std::string& MetricDescriptor::_internal_type() const {
  return _impl_.type_.Get();
}
inline void MetricDescriptor::_internal_set_type(const std::string& value) {
  
  _impl_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* MetricDescriptor::_internal_mutable_type() {
  
  return _impl_.type_.Mutable(GetArenaForAllocation());
}
inline std::string* MetricDescriptor::release_type() {
  // @@protoc_insertion_point(field_release:google.api.MetricDescriptor.type)
  return _impl_.type_.Release();
}
inline void MetricDescriptor::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  _impl_.type_.SetAllocated(type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.MetricDescriptor.type)
}

// repeated .google.api.LabelDescriptor labels = 2;
inline int MetricDescriptor::_internal_labels_size() const {
  return _impl_.labels_.size();
}
inline int MetricDescriptor::labels_size() const {
  return _internal_labels_size();
}
inline ::google::api::LabelDescriptor* MetricDescriptor::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.MetricDescriptor.labels)
  return _impl_.labels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::LabelDescriptor >*
MetricDescriptor::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:google.api.MetricDescriptor.labels)
  return &_impl_.labels_;
}
inline const ::google::api::LabelDescriptor& MetricDescriptor::_internal_labels(int index) const {
  return _impl_.labels_.Get(index);
}
inline const ::google::api::LabelDescriptor& MetricDescriptor::labels(int index) const {
  // @@protoc_insertion_point(field_get:google.api.MetricDescriptor.labels)
  return _internal_labels(index);
}
inline ::google::api::LabelDescriptor* MetricDescriptor::_internal_add_labels() {
  return _impl_.labels_.Add();
}
inline ::google::api::LabelDescriptor* MetricDescriptor::add_labels() {
  ::google::api::LabelDescriptor* _add = _internal_add_labels();
  // @@protoc_insertion_point(field_add:google.api.MetricDescriptor.labels)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::LabelDescriptor >&
MetricDescriptor::labels() const {
  // @@protoc_insertion_point(field_list:google.api.MetricDescriptor.labels)
  return _impl_.labels_;
}

// .google.api.MetricDescriptor.MetricKind metric_kind = 3;
inline void MetricDescriptor::clear_metric_kind() {
  _impl_.metric_kind_ = 0;
}
inline ::google::api::MetricDescriptor_MetricKind MetricDescriptor::_internal_metric_kind() const {
  return static_cast< ::google::api::MetricDescriptor_MetricKind >(_impl_.metric_kind_);
}
inline ::google::api::MetricDescriptor_MetricKind MetricDescriptor::metric_kind() const {
  // @@protoc_insertion_point(field_get:google.api.MetricDescriptor.metric_kind)
  return _internal_metric_kind();
}
inline void MetricDescriptor::_internal_set_metric_kind(::google::api::MetricDescriptor_MetricKind value) {
  
  _impl_.metric_kind_ = value;
}
inline void MetricDescriptor::set_metric_kind(::google::api::MetricDescriptor_MetricKind value) {
  _internal_set_metric_kind(value);
  // @@protoc_insertion_point(field_set:google.api.MetricDescriptor.metric_kind)
}

// .google.api.MetricDescriptor.ValueType value_type = 4;
inline void MetricDescriptor::clear_value_type() {
  _impl_.value_type_ = 0;
}
inline ::google::api::MetricDescriptor_ValueType MetricDescriptor::_internal_value_type() const {
  return static_cast< ::google::api::MetricDescriptor_ValueType >(_impl_.value_type_);
}
inline ::google::api::MetricDescriptor_ValueType MetricDescriptor::value_type() const {
  // @@protoc_insertion_point(field_get:google.api.MetricDescriptor.value_type)
  return _internal_value_type();
}
inline void MetricDescriptor::_internal_set_value_type(::google::api::MetricDescriptor_ValueType value) {
  
  _impl_.value_type_ = value;
}
inline void MetricDescriptor::set_value_type(::google::api::MetricDescriptor_ValueType value) {
  _internal_set_value_type(value);
  // @@protoc_insertion_point(field_set:google.api.MetricDescriptor.value_type)
}

// string unit = 5;
inline void MetricDescriptor::clear_unit() {
  _impl_.unit_.ClearToEmpty();
}
inline const std::string& MetricDescriptor::unit() const {
  // @@protoc_insertion_point(field_get:google.api.MetricDescriptor.unit)
  return _internal_unit();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MetricDescriptor::set_unit(ArgT0&& arg0, ArgT... args) {
 
 _impl_.unit_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.MetricDescriptor.unit)
}
inline std::string* MetricDescriptor::mutable_unit() {
  std::string* _s = _internal_mutable_unit();
  // @@protoc_insertion_point(field_mutable:google.api.MetricDescriptor.unit)
  return _s;
}
inline const std::string& MetricDescriptor::_internal_unit() const {
  return _impl_.unit_.Get();
}
inline void MetricDescriptor::_internal_set_unit(const std::string& value) {
  
  _impl_.unit_.Set(value, GetArenaForAllocation());
}
inline std::string* MetricDescriptor::_internal_mutable_unit() {
  
  return _impl_.unit_.Mutable(GetArenaForAllocation());
}
inline std::string* MetricDescriptor::release_unit() {
  // @@protoc_insertion_point(field_release:google.api.MetricDescriptor.unit)
  return _impl_.unit_.Release();
}
inline void MetricDescriptor::set_allocated_unit(std::string* unit) {
  if (unit != nullptr) {
    
  } else {
    
  }
  _impl_.unit_.SetAllocated(unit, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.unit_.IsDefault()) {
    _impl_.unit_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.MetricDescriptor.unit)
}

// string description = 6;
inline void MetricDescriptor::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& MetricDescriptor::description() const {
  // @@protoc_insertion_point(field_get:google.api.MetricDescriptor.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MetricDescriptor::set_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.MetricDescriptor.description)
}
inline std::string* MetricDescriptor::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:google.api.MetricDescriptor.description)
  return _s;
}
inline const std::string& MetricDescriptor::_internal_description() const {
  return _impl_.description_.Get();
}
inline void MetricDescriptor::_internal_set_description(const std::string& value) {
  
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* MetricDescriptor::_internal_mutable_description() {
  
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* MetricDescriptor::release_description() {
  // @@protoc_insertion_point(field_release:google.api.MetricDescriptor.description)
  return _impl_.description_.Release();
}
inline void MetricDescriptor::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.MetricDescriptor.description)
}

// string display_name = 7;
inline void MetricDescriptor::clear_display_name() {
  _impl_.display_name_.ClearToEmpty();
}
inline const std::string& MetricDescriptor::display_name() const {
  // @@protoc_insertion_point(field_get:google.api.MetricDescriptor.display_name)
  return _internal_display_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MetricDescriptor::set_display_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.display_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.MetricDescriptor.display_name)
}
inline std::string* MetricDescriptor::mutable_display_name() {
  std::string* _s = _internal_mutable_display_name();
  // @@protoc_insertion_point(field_mutable:google.api.MetricDescriptor.display_name)
  return _s;
}
inline const std::string& MetricDescriptor::_internal_display_name() const {
  return _impl_.display_name_.Get();
}
inline void MetricDescriptor::_internal_set_display_name(const std::string& value) {
  
  _impl_.display_name_.Set(value, GetArenaForAllocation());
}
inline std::string* MetricDescriptor::_internal_mutable_display_name() {
  
  return _impl_.display_name_.Mutable(GetArenaForAllocation());
}
inline std::string* MetricDescriptor::release_display_name() {
  // @@protoc_insertion_point(field_release:google.api.MetricDescriptor.display_name)
  return _impl_.display_name_.Release();
}
inline void MetricDescriptor::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    
  } else {
    
  }
  _impl_.display_name_.SetAllocated(display_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.display_name_.IsDefault()) {
    _impl_.display_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.MetricDescriptor.display_name)
}

// .google.api.MetricDescriptor.MetricDescriptorMetadata metadata = 10;
inline bool MetricDescriptor::_internal_has_metadata() const {
  return this != internal_default_instance() && _impl_.metadata_ != nullptr;
}
inline bool MetricDescriptor::has_metadata() const {
  return _internal_has_metadata();
}
inline void MetricDescriptor::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
}
inline const ::google::api::MetricDescriptor_MetricDescriptorMetadata& MetricDescriptor::_internal_metadata() const {
  const ::google::api::MetricDescriptor_MetricDescriptorMetadata* p = _impl_.metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::api::MetricDescriptor_MetricDescriptorMetadata&>(
      ::google::api::_MetricDescriptor_MetricDescriptorMetadata_default_instance_);
}
inline const ::google::api::MetricDescriptor_MetricDescriptorMetadata& MetricDescriptor::metadata() const {
  // @@protoc_insertion_point(field_get:google.api.MetricDescriptor.metadata)
  return _internal_metadata();
}
inline void MetricDescriptor::unsafe_arena_set_allocated_metadata(
    ::google::api::MetricDescriptor_MetricDescriptorMetadata* metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metadata_);
  }
  _impl_.metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.MetricDescriptor.metadata)
}
inline ::google::api::MetricDescriptor_MetricDescriptorMetadata* MetricDescriptor::release_metadata() {
  
  ::google::api::MetricDescriptor_MetricDescriptorMetadata* temp = _impl_.metadata_;
  _impl_.metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::api::MetricDescriptor_MetricDescriptorMetadata* MetricDescriptor::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:google.api.MetricDescriptor.metadata)
  
  ::google::api::MetricDescriptor_MetricDescriptorMetadata* temp = _impl_.metadata_;
  _impl_.metadata_ = nullptr;
  return temp;
}
inline ::google::api::MetricDescriptor_MetricDescriptorMetadata* MetricDescriptor::_internal_mutable_metadata() {
  
  if (_impl_.metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::api::MetricDescriptor_MetricDescriptorMetadata>(GetArenaForAllocation());
    _impl_.metadata_ = p;
  }
  return _impl_.metadata_;
}
inline ::google::api::MetricDescriptor_MetricDescriptorMetadata* MetricDescriptor::mutable_metadata() {
  ::google::api::MetricDescriptor_MetricDescriptorMetadata* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:google.api.MetricDescriptor.metadata)
  return _msg;
}
inline void MetricDescriptor::set_allocated_metadata(::google::api::MetricDescriptor_MetricDescriptorMetadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(metadata);
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:google.api.MetricDescriptor.metadata)
}

// .google.api.LaunchStage launch_stage = 12;
inline void MetricDescriptor::clear_launch_stage() {
  _impl_.launch_stage_ = 0;
}
inline ::google::api::LaunchStage MetricDescriptor::_internal_launch_stage() const {
  return static_cast< ::google::api::LaunchStage >(_impl_.launch_stage_);
}
inline ::google::api::LaunchStage MetricDescriptor::launch_stage() const {
  // @@protoc_insertion_point(field_get:google.api.MetricDescriptor.launch_stage)
  return _internal_launch_stage();
}
inline void MetricDescriptor::_internal_set_launch_stage(::google::api::LaunchStage value) {
  
  _impl_.launch_stage_ = value;
}
inline void MetricDescriptor::set_launch_stage(::google::api::LaunchStage value) {
  _internal_set_launch_stage(value);
  // @@protoc_insertion_point(field_set:google.api.MetricDescriptor.launch_stage)
}

// repeated string monitored_resource_types = 13;
inline int MetricDescriptor::_internal_monitored_resource_types_size() const {
  return _impl_.monitored_resource_types_.size();
}
inline int MetricDescriptor::monitored_resource_types_size() const {
  return _internal_monitored_resource_types_size();
}
inline void MetricDescriptor::clear_monitored_resource_types() {
  _impl_.monitored_resource_types_.Clear();
}
inline std::string* MetricDescriptor::add_monitored_resource_types() {
  std::string* _s = _internal_add_monitored_resource_types();
  // @@protoc_insertion_point(field_add_mutable:google.api.MetricDescriptor.monitored_resource_types)
  return _s;
}
inline const std::string& MetricDescriptor::_internal_monitored_resource_types(int index) const {
  return _impl_.monitored_resource_types_.Get(index);
}
inline const std::string& MetricDescriptor::monitored_resource_types(int index) const {
  // @@protoc_insertion_point(field_get:google.api.MetricDescriptor.monitored_resource_types)
  return _internal_monitored_resource_types(index);
}
inline std::string* MetricDescriptor::mutable_monitored_resource_types(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.MetricDescriptor.monitored_resource_types)
  return _impl_.monitored_resource_types_.Mutable(index);
}
inline void MetricDescriptor::set_monitored_resource_types(int index, const std::string& value) {
  _impl_.monitored_resource_types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.api.MetricDescriptor.monitored_resource_types)
}
inline void MetricDescriptor::set_monitored_resource_types(int index, std::string&& value) {
  _impl_.monitored_resource_types_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.api.MetricDescriptor.monitored_resource_types)
}
inline void MetricDescriptor::set_monitored_resource_types(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.monitored_resource_types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.api.MetricDescriptor.monitored_resource_types)
}
inline void MetricDescriptor::set_monitored_resource_types(int index, const char* value, size_t size) {
  _impl_.monitored_resource_types_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.api.MetricDescriptor.monitored_resource_types)
}
inline std::string* MetricDescriptor::_internal_add_monitored_resource_types() {
  return _impl_.monitored_resource_types_.Add();
}
inline void MetricDescriptor::add_monitored_resource_types(const std::string& value) {
  _impl_.monitored_resource_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.api.MetricDescriptor.monitored_resource_types)
}
inline void MetricDescriptor::add_monitored_resource_types(std::string&& value) {
  _impl_.monitored_resource_types_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.api.MetricDescriptor.monitored_resource_types)
}
inline void MetricDescriptor::add_monitored_resource_types(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.monitored_resource_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.api.MetricDescriptor.monitored_resource_types)
}
inline void MetricDescriptor::add_monitored_resource_types(const char* value, size_t size) {
  _impl_.monitored_resource_types_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.api.MetricDescriptor.monitored_resource_types)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MetricDescriptor::monitored_resource_types() const {
  // @@protoc_insertion_point(field_list:google.api.MetricDescriptor.monitored_resource_types)
  return _impl_.monitored_resource_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MetricDescriptor::mutable_monitored_resource_types() {
  // @@protoc_insertion_point(field_mutable_list:google.api.MetricDescriptor.monitored_resource_types)
  return &_impl_.monitored_resource_types_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Metric

// string type = 3;
inline void Metric::clear_type() {
  _impl_.type_.ClearToEmpty();
}
inline const std::string& Metric::type() const {
  // @@protoc_insertion_point(field_get:google.api.Metric.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Metric::set_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.Metric.type)
}
inline std::string* Metric::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:google.api.Metric.type)
  return _s;
}
inline const std::string& Metric::_internal_type() const {
  return _impl_.type_.Get();
}
inline void Metric::_internal_set_type(const std::string& value) {
  
  _impl_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* Metric::_internal_mutable_type() {
  
  return _impl_.type_.Mutable(GetArenaForAllocation());
}
inline std::string* Metric::release_type() {
  // @@protoc_insertion_point(field_release:google.api.Metric.type)
  return _impl_.type_.Release();
}
inline void Metric::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  _impl_.type_.SetAllocated(type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.Metric.type)
}

// map<string, string> labels = 2;
inline int Metric::_internal_labels_size() const {
  return _impl_.labels_.size();
}
inline int Metric::labels_size() const {
  return _internal_labels_size();
}
inline void Metric::clear_labels() {
  _impl_.labels_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Metric::_internal_labels() const {
  return _impl_.labels_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Metric::labels() const {
  // @@protoc_insertion_point(field_map:google.api.Metric.labels)
  return _internal_labels();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Metric::_internal_mutable_labels() {
  return _impl_.labels_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Metric::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:google.api.Metric.labels)
  return _internal_mutable_labels();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace api
}  // namespace google

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::google::api::MetricDescriptor_MetricKind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::api::MetricDescriptor_MetricKind>() {
  return ::google::api::MetricDescriptor_MetricKind_descriptor();
}
template <> struct is_proto_enum< ::google::api::MetricDescriptor_ValueType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::api::MetricDescriptor_ValueType>() {
  return ::google::api::MetricDescriptor_ValueType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fmetric_2eproto
