// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/documentation.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fdocumentation_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fdocumentation_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fapi_2fdocumentation_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fapi_2fdocumentation_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fapi_2fdocumentation_2eproto;
namespace google {
namespace api {
class Documentation;
struct DocumentationDefaultTypeInternal;
extern DocumentationDefaultTypeInternal _Documentation_default_instance_;
class DocumentationRule;
struct DocumentationRuleDefaultTypeInternal;
extern DocumentationRuleDefaultTypeInternal _DocumentationRule_default_instance_;
class Page;
struct PageDefaultTypeInternal;
extern PageDefaultTypeInternal _Page_default_instance_;
}  // namespace api
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::api::Documentation* Arena::CreateMaybeMessage<::google::api::Documentation>(Arena*);
template<> ::google::api::DocumentationRule* Arena::CreateMaybeMessage<::google::api::DocumentationRule>(Arena*);
template<> ::google::api::Page* Arena::CreateMaybeMessage<::google::api::Page>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace api {

// ===================================================================

class Documentation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.Documentation) */ {
 public:
  inline Documentation() : Documentation(nullptr) {}
  ~Documentation() override;
  explicit PROTOBUF_CONSTEXPR Documentation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Documentation(const Documentation& from);
  Documentation(Documentation&& from) noexcept
    : Documentation() {
    *this = ::std::move(from);
  }

  inline Documentation& operator=(const Documentation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Documentation& operator=(Documentation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Documentation& default_instance() {
    return *internal_default_instance();
  }
  static inline const Documentation* internal_default_instance() {
    return reinterpret_cast<const Documentation*>(
               &_Documentation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Documentation& a, Documentation& b) {
    a.Swap(&b);
  }
  inline void Swap(Documentation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Documentation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Documentation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Documentation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Documentation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Documentation& from) {
    Documentation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Documentation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.Documentation";
  }
  protected:
  explicit Documentation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRulesFieldNumber = 3,
    kPagesFieldNumber = 5,
    kSummaryFieldNumber = 1,
    kOverviewFieldNumber = 2,
    kDocumentationRootUrlFieldNumber = 4,
    kServiceRootUrlFieldNumber = 6,
  };
  // repeated .google.api.DocumentationRule rules = 3;
  int rules_size() const;
  private:
  int _internal_rules_size() const;
  public:
  void clear_rules();
  ::google::api::DocumentationRule* mutable_rules(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::DocumentationRule >*
      mutable_rules();
  private:
  const ::google::api::DocumentationRule& _internal_rules(int index) const;
  ::google::api::DocumentationRule* _internal_add_rules();
  public:
  const ::google::api::DocumentationRule& rules(int index) const;
  ::google::api::DocumentationRule* add_rules();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::DocumentationRule >&
      rules() const;

  // repeated .google.api.Page pages = 5;
  int pages_size() const;
  private:
  int _internal_pages_size() const;
  public:
  void clear_pages();
  ::google::api::Page* mutable_pages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::Page >*
      mutable_pages();
  private:
  const ::google::api::Page& _internal_pages(int index) const;
  ::google::api::Page* _internal_add_pages();
  public:
  const ::google::api::Page& pages(int index) const;
  ::google::api::Page* add_pages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::Page >&
      pages() const;

  // string summary = 1;
  void clear_summary();
  const std::string& summary() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_summary(ArgT0&& arg0, ArgT... args);
  std::string* mutable_summary();
  PROTOBUF_NODISCARD std::string* release_summary();
  void set_allocated_summary(std::string* summary);
  private:
  const std::string& _internal_summary() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_summary(const std::string& value);
  std::string* _internal_mutable_summary();
  public:

  // string overview = 2;
  void clear_overview();
  const std::string& overview() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_overview(ArgT0&& arg0, ArgT... args);
  std::string* mutable_overview();
  PROTOBUF_NODISCARD std::string* release_overview();
  void set_allocated_overview(std::string* overview);
  private:
  const std::string& _internal_overview() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_overview(const std::string& value);
  std::string* _internal_mutable_overview();
  public:

  // string documentation_root_url = 4;
  void clear_documentation_root_url();
  const std::string& documentation_root_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_documentation_root_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_documentation_root_url();
  PROTOBUF_NODISCARD std::string* release_documentation_root_url();
  void set_allocated_documentation_root_url(std::string* documentation_root_url);
  private:
  const std::string& _internal_documentation_root_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_documentation_root_url(const std::string& value);
  std::string* _internal_mutable_documentation_root_url();
  public:

  // string service_root_url = 6;
  void clear_service_root_url();
  const std::string& service_root_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_service_root_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_service_root_url();
  PROTOBUF_NODISCARD std::string* release_service_root_url();
  void set_allocated_service_root_url(std::string* service_root_url);
  private:
  const std::string& _internal_service_root_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service_root_url(const std::string& value);
  std::string* _internal_mutable_service_root_url();
  public:

  // @@protoc_insertion_point(class_scope:google.api.Documentation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::DocumentationRule > rules_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::Page > pages_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr summary_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr overview_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr documentation_root_url_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_root_url_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fdocumentation_2eproto;
};
// -------------------------------------------------------------------

class DocumentationRule final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.DocumentationRule) */ {
 public:
  inline DocumentationRule() : DocumentationRule(nullptr) {}
  ~DocumentationRule() override;
  explicit PROTOBUF_CONSTEXPR DocumentationRule(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DocumentationRule(const DocumentationRule& from);
  DocumentationRule(DocumentationRule&& from) noexcept
    : DocumentationRule() {
    *this = ::std::move(from);
  }

  inline DocumentationRule& operator=(const DocumentationRule& from) {
    CopyFrom(from);
    return *this;
  }
  inline DocumentationRule& operator=(DocumentationRule&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DocumentationRule& default_instance() {
    return *internal_default_instance();
  }
  static inline const DocumentationRule* internal_default_instance() {
    return reinterpret_cast<const DocumentationRule*>(
               &_DocumentationRule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DocumentationRule& a, DocumentationRule& b) {
    a.Swap(&b);
  }
  inline void Swap(DocumentationRule* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DocumentationRule* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DocumentationRule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DocumentationRule>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DocumentationRule& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DocumentationRule& from) {
    DocumentationRule::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DocumentationRule* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.DocumentationRule";
  }
  protected:
  explicit DocumentationRule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSelectorFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kDeprecationDescriptionFieldNumber = 3,
  };
  // string selector = 1;
  void clear_selector();
  const std::string& selector() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_selector(ArgT0&& arg0, ArgT... args);
  std::string* mutable_selector();
  PROTOBUF_NODISCARD std::string* release_selector();
  void set_allocated_selector(std::string* selector);
  private:
  const std::string& _internal_selector() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_selector(const std::string& value);
  std::string* _internal_mutable_selector();
  public:

  // string description = 2;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string deprecation_description = 3;
  void clear_deprecation_description();
  const std::string& deprecation_description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_deprecation_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_deprecation_description();
  PROTOBUF_NODISCARD std::string* release_deprecation_description();
  void set_allocated_deprecation_description(std::string* deprecation_description);
  private:
  const std::string& _internal_deprecation_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_deprecation_description(const std::string& value);
  std::string* _internal_mutable_deprecation_description();
  public:

  // @@protoc_insertion_point(class_scope:google.api.DocumentationRule)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr selector_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deprecation_description_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fdocumentation_2eproto;
};
// -------------------------------------------------------------------

class Page final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.Page) */ {
 public:
  inline Page() : Page(nullptr) {}
  ~Page() override;
  explicit PROTOBUF_CONSTEXPR Page(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Page(const Page& from);
  Page(Page&& from) noexcept
    : Page() {
    *this = ::std::move(from);
  }

  inline Page& operator=(const Page& from) {
    CopyFrom(from);
    return *this;
  }
  inline Page& operator=(Page&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Page& default_instance() {
    return *internal_default_instance();
  }
  static inline const Page* internal_default_instance() {
    return reinterpret_cast<const Page*>(
               &_Page_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Page& a, Page& b) {
    a.Swap(&b);
  }
  inline void Swap(Page* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Page* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Page* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Page>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Page& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Page& from) {
    Page::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Page* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.Page";
  }
  protected:
  explicit Page(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubpagesFieldNumber = 3,
    kNameFieldNumber = 1,
    kContentFieldNumber = 2,
  };
  // repeated .google.api.Page subpages = 3;
  int subpages_size() const;
  private:
  int _internal_subpages_size() const;
  public:
  void clear_subpages();
  ::google::api::Page* mutable_subpages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::Page >*
      mutable_subpages();
  private:
  const ::google::api::Page& _internal_subpages(int index) const;
  ::google::api::Page* _internal_add_subpages();
  public:
  const ::google::api::Page& subpages(int index) const;
  ::google::api::Page* add_subpages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::Page >&
      subpages() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string content = 2;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // @@protoc_insertion_point(class_scope:google.api.Page)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::Page > subpages_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fdocumentation_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Documentation

// string summary = 1;
inline void Documentation::clear_summary() {
  _impl_.summary_.ClearToEmpty();
}
inline const std::string& Documentation::summary() const {
  // @@protoc_insertion_point(field_get:google.api.Documentation.summary)
  return _internal_summary();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Documentation::set_summary(ArgT0&& arg0, ArgT... args) {
 
 _impl_.summary_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.Documentation.summary)
}
inline std::string* Documentation::mutable_summary() {
  std::string* _s = _internal_mutable_summary();
  // @@protoc_insertion_point(field_mutable:google.api.Documentation.summary)
  return _s;
}
inline const std::string& Documentation::_internal_summary() const {
  return _impl_.summary_.Get();
}
inline void Documentation::_internal_set_summary(const std::string& value) {
  
  _impl_.summary_.Set(value, GetArenaForAllocation());
}
inline std::string* Documentation::_internal_mutable_summary() {
  
  return _impl_.summary_.Mutable(GetArenaForAllocation());
}
inline std::string* Documentation::release_summary() {
  // @@protoc_insertion_point(field_release:google.api.Documentation.summary)
  return _impl_.summary_.Release();
}
inline void Documentation::set_allocated_summary(std::string* summary) {
  if (summary != nullptr) {
    
  } else {
    
  }
  _impl_.summary_.SetAllocated(summary, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.summary_.IsDefault()) {
    _impl_.summary_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.Documentation.summary)
}

// repeated .google.api.Page pages = 5;
inline int Documentation::_internal_pages_size() const {
  return _impl_.pages_.size();
}
inline int Documentation::pages_size() const {
  return _internal_pages_size();
}
inline void Documentation::clear_pages() {
  _impl_.pages_.Clear();
}
inline ::google::api::Page* Documentation::mutable_pages(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.Documentation.pages)
  return _impl_.pages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::Page >*
Documentation::mutable_pages() {
  // @@protoc_insertion_point(field_mutable_list:google.api.Documentation.pages)
  return &_impl_.pages_;
}
inline const ::google::api::Page& Documentation::_internal_pages(int index) const {
  return _impl_.pages_.Get(index);
}
inline const ::google::api::Page& Documentation::pages(int index) const {
  // @@protoc_insertion_point(field_get:google.api.Documentation.pages)
  return _internal_pages(index);
}
inline ::google::api::Page* Documentation::_internal_add_pages() {
  return _impl_.pages_.Add();
}
inline ::google::api::Page* Documentation::add_pages() {
  ::google::api::Page* _add = _internal_add_pages();
  // @@protoc_insertion_point(field_add:google.api.Documentation.pages)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::Page >&
Documentation::pages() const {
  // @@protoc_insertion_point(field_list:google.api.Documentation.pages)
  return _impl_.pages_;
}

// repeated .google.api.DocumentationRule rules = 3;
inline int Documentation::_internal_rules_size() const {
  return _impl_.rules_.size();
}
inline int Documentation::rules_size() const {
  return _internal_rules_size();
}
inline void Documentation::clear_rules() {
  _impl_.rules_.Clear();
}
inline ::google::api::DocumentationRule* Documentation::mutable_rules(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.Documentation.rules)
  return _impl_.rules_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::DocumentationRule >*
Documentation::mutable_rules() {
  // @@protoc_insertion_point(field_mutable_list:google.api.Documentation.rules)
  return &_impl_.rules_;
}
inline const ::google::api::DocumentationRule& Documentation::_internal_rules(int index) const {
  return _impl_.rules_.Get(index);
}
inline const ::google::api::DocumentationRule& Documentation::rules(int index) const {
  // @@protoc_insertion_point(field_get:google.api.Documentation.rules)
  return _internal_rules(index);
}
inline ::google::api::DocumentationRule* Documentation::_internal_add_rules() {
  return _impl_.rules_.Add();
}
inline ::google::api::DocumentationRule* Documentation::add_rules() {
  ::google::api::DocumentationRule* _add = _internal_add_rules();
  // @@protoc_insertion_point(field_add:google.api.Documentation.rules)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::DocumentationRule >&
Documentation::rules() const {
  // @@protoc_insertion_point(field_list:google.api.Documentation.rules)
  return _impl_.rules_;
}

// string documentation_root_url = 4;
inline void Documentation::clear_documentation_root_url() {
  _impl_.documentation_root_url_.ClearToEmpty();
}
inline const std::string& Documentation::documentation_root_url() const {
  // @@protoc_insertion_point(field_get:google.api.Documentation.documentation_root_url)
  return _internal_documentation_root_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Documentation::set_documentation_root_url(ArgT0&& arg0, ArgT... args) {
 
 _impl_.documentation_root_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.Documentation.documentation_root_url)
}
inline std::string* Documentation::mutable_documentation_root_url() {
  std::string* _s = _internal_mutable_documentation_root_url();
  // @@protoc_insertion_point(field_mutable:google.api.Documentation.documentation_root_url)
  return _s;
}
inline const std::string& Documentation::_internal_documentation_root_url() const {
  return _impl_.documentation_root_url_.Get();
}
inline void Documentation::_internal_set_documentation_root_url(const std::string& value) {
  
  _impl_.documentation_root_url_.Set(value, GetArenaForAllocation());
}
inline std::string* Documentation::_internal_mutable_documentation_root_url() {
  
  return _impl_.documentation_root_url_.Mutable(GetArenaForAllocation());
}
inline std::string* Documentation::release_documentation_root_url() {
  // @@protoc_insertion_point(field_release:google.api.Documentation.documentation_root_url)
  return _impl_.documentation_root_url_.Release();
}
inline void Documentation::set_allocated_documentation_root_url(std::string* documentation_root_url) {
  if (documentation_root_url != nullptr) {
    
  } else {
    
  }
  _impl_.documentation_root_url_.SetAllocated(documentation_root_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.documentation_root_url_.IsDefault()) {
    _impl_.documentation_root_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.Documentation.documentation_root_url)
}

// string service_root_url = 6;
inline void Documentation::clear_service_root_url() {
  _impl_.service_root_url_.ClearToEmpty();
}
inline const std::string& Documentation::service_root_url() const {
  // @@protoc_insertion_point(field_get:google.api.Documentation.service_root_url)
  return _internal_service_root_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Documentation::set_service_root_url(ArgT0&& arg0, ArgT... args) {
 
 _impl_.service_root_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.Documentation.service_root_url)
}
inline std::string* Documentation::mutable_service_root_url() {
  std::string* _s = _internal_mutable_service_root_url();
  // @@protoc_insertion_point(field_mutable:google.api.Documentation.service_root_url)
  return _s;
}
inline const std::string& Documentation::_internal_service_root_url() const {
  return _impl_.service_root_url_.Get();
}
inline void Documentation::_internal_set_service_root_url(const std::string& value) {
  
  _impl_.service_root_url_.Set(value, GetArenaForAllocation());
}
inline std::string* Documentation::_internal_mutable_service_root_url() {
  
  return _impl_.service_root_url_.Mutable(GetArenaForAllocation());
}
inline std::string* Documentation::release_service_root_url() {
  // @@protoc_insertion_point(field_release:google.api.Documentation.service_root_url)
  return _impl_.service_root_url_.Release();
}
inline void Documentation::set_allocated_service_root_url(std::string* service_root_url) {
  if (service_root_url != nullptr) {
    
  } else {
    
  }
  _impl_.service_root_url_.SetAllocated(service_root_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.service_root_url_.IsDefault()) {
    _impl_.service_root_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.Documentation.service_root_url)
}

// string overview = 2;
inline void Documentation::clear_overview() {
  _impl_.overview_.ClearToEmpty();
}
inline const std::string& Documentation::overview() const {
  // @@protoc_insertion_point(field_get:google.api.Documentation.overview)
  return _internal_overview();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Documentation::set_overview(ArgT0&& arg0, ArgT... args) {
 
 _impl_.overview_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.Documentation.overview)
}
inline std::string* Documentation::mutable_overview() {
  std::string* _s = _internal_mutable_overview();
  // @@protoc_insertion_point(field_mutable:google.api.Documentation.overview)
  return _s;
}
inline const std::string& Documentation::_internal_overview() const {
  return _impl_.overview_.Get();
}
inline void Documentation::_internal_set_overview(const std::string& value) {
  
  _impl_.overview_.Set(value, GetArenaForAllocation());
}
inline std::string* Documentation::_internal_mutable_overview() {
  
  return _impl_.overview_.Mutable(GetArenaForAllocation());
}
inline std::string* Documentation::release_overview() {
  // @@protoc_insertion_point(field_release:google.api.Documentation.overview)
  return _impl_.overview_.Release();
}
inline void Documentation::set_allocated_overview(std::string* overview) {
  if (overview != nullptr) {
    
  } else {
    
  }
  _impl_.overview_.SetAllocated(overview, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.overview_.IsDefault()) {
    _impl_.overview_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.Documentation.overview)
}

// -------------------------------------------------------------------

// DocumentationRule

// string selector = 1;
inline void DocumentationRule::clear_selector() {
  _impl_.selector_.ClearToEmpty();
}
inline const std::string& DocumentationRule::selector() const {
  // @@protoc_insertion_point(field_get:google.api.DocumentationRule.selector)
  return _internal_selector();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DocumentationRule::set_selector(ArgT0&& arg0, ArgT... args) {
 
 _impl_.selector_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.DocumentationRule.selector)
}
inline std::string* DocumentationRule::mutable_selector() {
  std::string* _s = _internal_mutable_selector();
  // @@protoc_insertion_point(field_mutable:google.api.DocumentationRule.selector)
  return _s;
}
inline const std::string& DocumentationRule::_internal_selector() const {
  return _impl_.selector_.Get();
}
inline void DocumentationRule::_internal_set_selector(const std::string& value) {
  
  _impl_.selector_.Set(value, GetArenaForAllocation());
}
inline std::string* DocumentationRule::_internal_mutable_selector() {
  
  return _impl_.selector_.Mutable(GetArenaForAllocation());
}
inline std::string* DocumentationRule::release_selector() {
  // @@protoc_insertion_point(field_release:google.api.DocumentationRule.selector)
  return _impl_.selector_.Release();
}
inline void DocumentationRule::set_allocated_selector(std::string* selector) {
  if (selector != nullptr) {
    
  } else {
    
  }
  _impl_.selector_.SetAllocated(selector, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.selector_.IsDefault()) {
    _impl_.selector_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.DocumentationRule.selector)
}

// string description = 2;
inline void DocumentationRule::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& DocumentationRule::description() const {
  // @@protoc_insertion_point(field_get:google.api.DocumentationRule.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DocumentationRule::set_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.DocumentationRule.description)
}
inline std::string* DocumentationRule::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:google.api.DocumentationRule.description)
  return _s;
}
inline const std::string& DocumentationRule::_internal_description() const {
  return _impl_.description_.Get();
}
inline void DocumentationRule::_internal_set_description(const std::string& value) {
  
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* DocumentationRule::_internal_mutable_description() {
  
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* DocumentationRule::release_description() {
  // @@protoc_insertion_point(field_release:google.api.DocumentationRule.description)
  return _impl_.description_.Release();
}
inline void DocumentationRule::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.DocumentationRule.description)
}

// string deprecation_description = 3;
inline void DocumentationRule::clear_deprecation_description() {
  _impl_.deprecation_description_.ClearToEmpty();
}
inline const std::string& DocumentationRule::deprecation_description() const {
  // @@protoc_insertion_point(field_get:google.api.DocumentationRule.deprecation_description)
  return _internal_deprecation_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DocumentationRule::set_deprecation_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.deprecation_description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.DocumentationRule.deprecation_description)
}
inline std::string* DocumentationRule::mutable_deprecation_description() {
  std::string* _s = _internal_mutable_deprecation_description();
  // @@protoc_insertion_point(field_mutable:google.api.DocumentationRule.deprecation_description)
  return _s;
}
inline const std::string& DocumentationRule::_internal_deprecation_description() const {
  return _impl_.deprecation_description_.Get();
}
inline void DocumentationRule::_internal_set_deprecation_description(const std::string& value) {
  
  _impl_.deprecation_description_.Set(value, GetArenaForAllocation());
}
inline std::string* DocumentationRule::_internal_mutable_deprecation_description() {
  
  return _impl_.deprecation_description_.Mutable(GetArenaForAllocation());
}
inline std::string* DocumentationRule::release_deprecation_description() {
  // @@protoc_insertion_point(field_release:google.api.DocumentationRule.deprecation_description)
  return _impl_.deprecation_description_.Release();
}
inline void DocumentationRule::set_allocated_deprecation_description(std::string* deprecation_description) {
  if (deprecation_description != nullptr) {
    
  } else {
    
  }
  _impl_.deprecation_description_.SetAllocated(deprecation_description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.deprecation_description_.IsDefault()) {
    _impl_.deprecation_description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.DocumentationRule.deprecation_description)
}

// -------------------------------------------------------------------

// Page

// string name = 1;
inline void Page::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Page::name() const {
  // @@protoc_insertion_point(field_get:google.api.Page.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Page::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.Page.name)
}
inline std::string* Page::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.api.Page.name)
  return _s;
}
inline const std::string& Page::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Page::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Page::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Page::release_name() {
  // @@protoc_insertion_point(field_release:google.api.Page.name)
  return _impl_.name_.Release();
}
inline void Page::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.Page.name)
}

// string content = 2;
inline void Page::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& Page::content() const {
  // @@protoc_insertion_point(field_get:google.api.Page.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Page::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.Page.content)
}
inline std::string* Page::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:google.api.Page.content)
  return _s;
}
inline const std::string& Page::_internal_content() const {
  return _impl_.content_.Get();
}
inline void Page::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* Page::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* Page::release_content() {
  // @@protoc_insertion_point(field_release:google.api.Page.content)
  return _impl_.content_.Release();
}
inline void Page::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.Page.content)
}

// repeated .google.api.Page subpages = 3;
inline int Page::_internal_subpages_size() const {
  return _impl_.subpages_.size();
}
inline int Page::subpages_size() const {
  return _internal_subpages_size();
}
inline void Page::clear_subpages() {
  _impl_.subpages_.Clear();
}
inline ::google::api::Page* Page::mutable_subpages(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.Page.subpages)
  return _impl_.subpages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::Page >*
Page::mutable_subpages() {
  // @@protoc_insertion_point(field_mutable_list:google.api.Page.subpages)
  return &_impl_.subpages_;
}
inline const ::google::api::Page& Page::_internal_subpages(int index) const {
  return _impl_.subpages_.Get(index);
}
inline const ::google::api::Page& Page::subpages(int index) const {
  // @@protoc_insertion_point(field_get:google.api.Page.subpages)
  return _internal_subpages(index);
}
inline ::google::api::Page* Page::_internal_add_subpages() {
  return _impl_.subpages_.Add();
}
inline ::google::api::Page* Page::add_subpages() {
  ::google::api::Page* _add = _internal_add_subpages();
  // @@protoc_insertion_point(field_add:google.api.Page.subpages)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::Page >&
Page::subpages() const {
  // @@protoc_insertion_point(field_list:google.api.Page.subpages)
  return _impl_.subpages_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace api
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fdocumentation_2eproto
