// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/quota.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fquota_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fquota_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fapi_2fquota_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fapi_2fquota_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fapi_2fquota_2eproto;
namespace google {
namespace api {
class MetricRule;
struct MetricRuleDefaultTypeInternal;
extern MetricRuleDefaultTypeInternal _MetricRule_default_instance_;
class MetricRule_MetricCostsEntry_DoNotUse;
struct MetricRule_MetricCostsEntry_DoNotUseDefaultTypeInternal;
extern MetricRule_MetricCostsEntry_DoNotUseDefaultTypeInternal _MetricRule_MetricCostsEntry_DoNotUse_default_instance_;
class Quota;
struct QuotaDefaultTypeInternal;
extern QuotaDefaultTypeInternal _Quota_default_instance_;
class QuotaLimit;
struct QuotaLimitDefaultTypeInternal;
extern QuotaLimitDefaultTypeInternal _QuotaLimit_default_instance_;
class QuotaLimit_ValuesEntry_DoNotUse;
struct QuotaLimit_ValuesEntry_DoNotUseDefaultTypeInternal;
extern QuotaLimit_ValuesEntry_DoNotUseDefaultTypeInternal _QuotaLimit_ValuesEntry_DoNotUse_default_instance_;
}  // namespace api
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::api::MetricRule* Arena::CreateMaybeMessage<::google::api::MetricRule>(Arena*);
template<> ::google::api::MetricRule_MetricCostsEntry_DoNotUse* Arena::CreateMaybeMessage<::google::api::MetricRule_MetricCostsEntry_DoNotUse>(Arena*);
template<> ::google::api::Quota* Arena::CreateMaybeMessage<::google::api::Quota>(Arena*);
template<> ::google::api::QuotaLimit* Arena::CreateMaybeMessage<::google::api::QuotaLimit>(Arena*);
template<> ::google::api::QuotaLimit_ValuesEntry_DoNotUse* Arena::CreateMaybeMessage<::google::api::QuotaLimit_ValuesEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace api {

// ===================================================================

class Quota final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.Quota) */ {
 public:
  inline Quota() : Quota(nullptr) {}
  ~Quota() override;
  explicit PROTOBUF_CONSTEXPR Quota(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Quota(const Quota& from);
  Quota(Quota&& from) noexcept
    : Quota() {
    *this = ::std::move(from);
  }

  inline Quota& operator=(const Quota& from) {
    CopyFrom(from);
    return *this;
  }
  inline Quota& operator=(Quota&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Quota& default_instance() {
    return *internal_default_instance();
  }
  static inline const Quota* internal_default_instance() {
    return reinterpret_cast<const Quota*>(
               &_Quota_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Quota& a, Quota& b) {
    a.Swap(&b);
  }
  inline void Swap(Quota* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Quota* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Quota* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Quota>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Quota& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Quota& from) {
    Quota::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Quota* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.Quota";
  }
  protected:
  explicit Quota(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLimitsFieldNumber = 3,
    kMetricRulesFieldNumber = 4,
  };
  // repeated .google.api.QuotaLimit limits = 3;
  int limits_size() const;
  private:
  int _internal_limits_size() const;
  public:
  void clear_limits();
  ::google::api::QuotaLimit* mutable_limits(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::QuotaLimit >*
      mutable_limits();
  private:
  const ::google::api::QuotaLimit& _internal_limits(int index) const;
  ::google::api::QuotaLimit* _internal_add_limits();
  public:
  const ::google::api::QuotaLimit& limits(int index) const;
  ::google::api::QuotaLimit* add_limits();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::QuotaLimit >&
      limits() const;

  // repeated .google.api.MetricRule metric_rules = 4;
  int metric_rules_size() const;
  private:
  int _internal_metric_rules_size() const;
  public:
  void clear_metric_rules();
  ::google::api::MetricRule* mutable_metric_rules(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::MetricRule >*
      mutable_metric_rules();
  private:
  const ::google::api::MetricRule& _internal_metric_rules(int index) const;
  ::google::api::MetricRule* _internal_add_metric_rules();
  public:
  const ::google::api::MetricRule& metric_rules(int index) const;
  ::google::api::MetricRule* add_metric_rules();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::MetricRule >&
      metric_rules() const;

  // @@protoc_insertion_point(class_scope:google.api.Quota)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::QuotaLimit > limits_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::MetricRule > metric_rules_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fquota_2eproto;
};
// -------------------------------------------------------------------

class MetricRule_MetricCostsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MetricRule_MetricCostsEntry_DoNotUse, 
    std::string, int64_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MetricRule_MetricCostsEntry_DoNotUse, 
    std::string, int64_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64> SuperType;
  MetricRule_MetricCostsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR MetricRule_MetricCostsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit MetricRule_MetricCostsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const MetricRule_MetricCostsEntry_DoNotUse& other);
  static const MetricRule_MetricCostsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const MetricRule_MetricCostsEntry_DoNotUse*>(&_MetricRule_MetricCostsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.api.MetricRule.MetricCostsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fapi_2fquota_2eproto;
};

// -------------------------------------------------------------------

class MetricRule final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.MetricRule) */ {
 public:
  inline MetricRule() : MetricRule(nullptr) {}
  ~MetricRule() override;
  explicit PROTOBUF_CONSTEXPR MetricRule(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MetricRule(const MetricRule& from);
  MetricRule(MetricRule&& from) noexcept
    : MetricRule() {
    *this = ::std::move(from);
  }

  inline MetricRule& operator=(const MetricRule& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetricRule& operator=(MetricRule&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MetricRule& default_instance() {
    return *internal_default_instance();
  }
  static inline const MetricRule* internal_default_instance() {
    return reinterpret_cast<const MetricRule*>(
               &_MetricRule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MetricRule& a, MetricRule& b) {
    a.Swap(&b);
  }
  inline void Swap(MetricRule* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MetricRule* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MetricRule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MetricRule>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MetricRule& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MetricRule& from) {
    MetricRule::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MetricRule* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.MetricRule";
  }
  protected:
  explicit MetricRule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMetricCostsFieldNumber = 2,
    kSelectorFieldNumber = 1,
  };
  // map<string, int64> metric_costs = 2;
  int metric_costs_size() const;
  private:
  int _internal_metric_costs_size() const;
  public:
  void clear_metric_costs();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >&
      _internal_metric_costs() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >*
      _internal_mutable_metric_costs();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >&
      metric_costs() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >*
      mutable_metric_costs();

  // string selector = 1;
  void clear_selector();
  const std::string& selector() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_selector(ArgT0&& arg0, ArgT... args);
  std::string* mutable_selector();
  PROTOBUF_NODISCARD std::string* release_selector();
  void set_allocated_selector(std::string* selector);
  private:
  const std::string& _internal_selector() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_selector(const std::string& value);
  std::string* _internal_mutable_selector();
  public:

  // @@protoc_insertion_point(class_scope:google.api.MetricRule)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        MetricRule_MetricCostsEntry_DoNotUse,
        std::string, int64_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64> metric_costs_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr selector_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fquota_2eproto;
};
// -------------------------------------------------------------------

class QuotaLimit_ValuesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<QuotaLimit_ValuesEntry_DoNotUse, 
    std::string, int64_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<QuotaLimit_ValuesEntry_DoNotUse, 
    std::string, int64_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64> SuperType;
  QuotaLimit_ValuesEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR QuotaLimit_ValuesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit QuotaLimit_ValuesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const QuotaLimit_ValuesEntry_DoNotUse& other);
  static const QuotaLimit_ValuesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const QuotaLimit_ValuesEntry_DoNotUse*>(&_QuotaLimit_ValuesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.api.QuotaLimit.ValuesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fapi_2fquota_2eproto;
};

// -------------------------------------------------------------------

class QuotaLimit final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.QuotaLimit) */ {
 public:
  inline QuotaLimit() : QuotaLimit(nullptr) {}
  ~QuotaLimit() override;
  explicit PROTOBUF_CONSTEXPR QuotaLimit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QuotaLimit(const QuotaLimit& from);
  QuotaLimit(QuotaLimit&& from) noexcept
    : QuotaLimit() {
    *this = ::std::move(from);
  }

  inline QuotaLimit& operator=(const QuotaLimit& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuotaLimit& operator=(QuotaLimit&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QuotaLimit& default_instance() {
    return *internal_default_instance();
  }
  static inline const QuotaLimit* internal_default_instance() {
    return reinterpret_cast<const QuotaLimit*>(
               &_QuotaLimit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(QuotaLimit& a, QuotaLimit& b) {
    a.Swap(&b);
  }
  inline void Swap(QuotaLimit* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuotaLimit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QuotaLimit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QuotaLimit>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QuotaLimit& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QuotaLimit& from) {
    QuotaLimit::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuotaLimit* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.QuotaLimit";
  }
  protected:
  explicit QuotaLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 10,
    kDescriptionFieldNumber = 2,
    kDurationFieldNumber = 5,
    kNameFieldNumber = 6,
    kMetricFieldNumber = 8,
    kUnitFieldNumber = 9,
    kDisplayNameFieldNumber = 12,
    kDefaultLimitFieldNumber = 3,
    kMaxLimitFieldNumber = 4,
    kFreeTierFieldNumber = 7,
  };
  // map<string, int64> values = 10;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >&
      _internal_values() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >*
      _internal_mutable_values();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >*
      mutable_values();

  // string description = 2;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string duration = 5;
  void clear_duration();
  const std::string& duration() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_duration(ArgT0&& arg0, ArgT... args);
  std::string* mutable_duration();
  PROTOBUF_NODISCARD std::string* release_duration();
  void set_allocated_duration(std::string* duration);
  private:
  const std::string& _internal_duration() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_duration(const std::string& value);
  std::string* _internal_mutable_duration();
  public:

  // string name = 6;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string metric = 8;
  void clear_metric();
  const std::string& metric() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_metric(ArgT0&& arg0, ArgT... args);
  std::string* mutable_metric();
  PROTOBUF_NODISCARD std::string* release_metric();
  void set_allocated_metric(std::string* metric);
  private:
  const std::string& _internal_metric() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metric(const std::string& value);
  std::string* _internal_mutable_metric();
  public:

  // string unit = 9;
  void clear_unit();
  const std::string& unit() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_unit(ArgT0&& arg0, ArgT... args);
  std::string* mutable_unit();
  PROTOBUF_NODISCARD std::string* release_unit();
  void set_allocated_unit(std::string* unit);
  private:
  const std::string& _internal_unit() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unit(const std::string& value);
  std::string* _internal_mutable_unit();
  public:

  // string display_name = 12;
  void clear_display_name();
  const std::string& display_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_display_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_display_name();
  PROTOBUF_NODISCARD std::string* release_display_name();
  void set_allocated_display_name(std::string* display_name);
  private:
  const std::string& _internal_display_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_display_name(const std::string& value);
  std::string* _internal_mutable_display_name();
  public:

  // int64 default_limit = 3;
  void clear_default_limit();
  int64_t default_limit() const;
  void set_default_limit(int64_t value);
  private:
  int64_t _internal_default_limit() const;
  void _internal_set_default_limit(int64_t value);
  public:

  // int64 max_limit = 4;
  void clear_max_limit();
  int64_t max_limit() const;
  void set_max_limit(int64_t value);
  private:
  int64_t _internal_max_limit() const;
  void _internal_set_max_limit(int64_t value);
  public:

  // int64 free_tier = 7;
  void clear_free_tier();
  int64_t free_tier() const;
  void set_free_tier(int64_t value);
  private:
  int64_t _internal_free_tier() const;
  void _internal_set_free_tier(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.api.QuotaLimit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        QuotaLimit_ValuesEntry_DoNotUse,
        std::string, int64_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64> values_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr duration_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metric_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
    int64_t default_limit_;
    int64_t max_limit_;
    int64_t free_tier_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fquota_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Quota

// repeated .google.api.QuotaLimit limits = 3;
inline int Quota::_internal_limits_size() const {
  return _impl_.limits_.size();
}
inline int Quota::limits_size() const {
  return _internal_limits_size();
}
inline void Quota::clear_limits() {
  _impl_.limits_.Clear();
}
inline ::google::api::QuotaLimit* Quota::mutable_limits(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.Quota.limits)
  return _impl_.limits_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::QuotaLimit >*
Quota::mutable_limits() {
  // @@protoc_insertion_point(field_mutable_list:google.api.Quota.limits)
  return &_impl_.limits_;
}
inline const ::google::api::QuotaLimit& Quota::_internal_limits(int index) const {
  return _impl_.limits_.Get(index);
}
inline const ::google::api::QuotaLimit& Quota::limits(int index) const {
  // @@protoc_insertion_point(field_get:google.api.Quota.limits)
  return _internal_limits(index);
}
inline ::google::api::QuotaLimit* Quota::_internal_add_limits() {
  return _impl_.limits_.Add();
}
inline ::google::api::QuotaLimit* Quota::add_limits() {
  ::google::api::QuotaLimit* _add = _internal_add_limits();
  // @@protoc_insertion_point(field_add:google.api.Quota.limits)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::QuotaLimit >&
Quota::limits() const {
  // @@protoc_insertion_point(field_list:google.api.Quota.limits)
  return _impl_.limits_;
}

// repeated .google.api.MetricRule metric_rules = 4;
inline int Quota::_internal_metric_rules_size() const {
  return _impl_.metric_rules_.size();
}
inline int Quota::metric_rules_size() const {
  return _internal_metric_rules_size();
}
inline void Quota::clear_metric_rules() {
  _impl_.metric_rules_.Clear();
}
inline ::google::api::MetricRule* Quota::mutable_metric_rules(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.Quota.metric_rules)
  return _impl_.metric_rules_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::MetricRule >*
Quota::mutable_metric_rules() {
  // @@protoc_insertion_point(field_mutable_list:google.api.Quota.metric_rules)
  return &_impl_.metric_rules_;
}
inline const ::google::api::MetricRule& Quota::_internal_metric_rules(int index) const {
  return _impl_.metric_rules_.Get(index);
}
inline const ::google::api::MetricRule& Quota::metric_rules(int index) const {
  // @@protoc_insertion_point(field_get:google.api.Quota.metric_rules)
  return _internal_metric_rules(index);
}
inline ::google::api::MetricRule* Quota::_internal_add_metric_rules() {
  return _impl_.metric_rules_.Add();
}
inline ::google::api::MetricRule* Quota::add_metric_rules() {
  ::google::api::MetricRule* _add = _internal_add_metric_rules();
  // @@protoc_insertion_point(field_add:google.api.Quota.metric_rules)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::MetricRule >&
Quota::metric_rules() const {
  // @@protoc_insertion_point(field_list:google.api.Quota.metric_rules)
  return _impl_.metric_rules_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// MetricRule

// string selector = 1;
inline void MetricRule::clear_selector() {
  _impl_.selector_.ClearToEmpty();
}
inline const std::string& MetricRule::selector() const {
  // @@protoc_insertion_point(field_get:google.api.MetricRule.selector)
  return _internal_selector();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MetricRule::set_selector(ArgT0&& arg0, ArgT... args) {
 
 _impl_.selector_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.MetricRule.selector)
}
inline std::string* MetricRule::mutable_selector() {
  std::string* _s = _internal_mutable_selector();
  // @@protoc_insertion_point(field_mutable:google.api.MetricRule.selector)
  return _s;
}
inline const std::string& MetricRule::_internal_selector() const {
  return _impl_.selector_.Get();
}
inline void MetricRule::_internal_set_selector(const std::string& value) {
  
  _impl_.selector_.Set(value, GetArenaForAllocation());
}
inline std::string* MetricRule::_internal_mutable_selector() {
  
  return _impl_.selector_.Mutable(GetArenaForAllocation());
}
inline std::string* MetricRule::release_selector() {
  // @@protoc_insertion_point(field_release:google.api.MetricRule.selector)
  return _impl_.selector_.Release();
}
inline void MetricRule::set_allocated_selector(std::string* selector) {
  if (selector != nullptr) {
    
  } else {
    
  }
  _impl_.selector_.SetAllocated(selector, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.selector_.IsDefault()) {
    _impl_.selector_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.MetricRule.selector)
}

// map<string, int64> metric_costs = 2;
inline int MetricRule::_internal_metric_costs_size() const {
  return _impl_.metric_costs_.size();
}
inline int MetricRule::metric_costs_size() const {
  return _internal_metric_costs_size();
}
inline void MetricRule::clear_metric_costs() {
  _impl_.metric_costs_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >&
MetricRule::_internal_metric_costs() const {
  return _impl_.metric_costs_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >&
MetricRule::metric_costs() const {
  // @@protoc_insertion_point(field_map:google.api.MetricRule.metric_costs)
  return _internal_metric_costs();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >*
MetricRule::_internal_mutable_metric_costs() {
  return _impl_.metric_costs_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >*
MetricRule::mutable_metric_costs() {
  // @@protoc_insertion_point(field_mutable_map:google.api.MetricRule.metric_costs)
  return _internal_mutable_metric_costs();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// QuotaLimit

// string name = 6;
inline void QuotaLimit::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& QuotaLimit::name() const {
  // @@protoc_insertion_point(field_get:google.api.QuotaLimit.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QuotaLimit::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.QuotaLimit.name)
}
inline std::string* QuotaLimit::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.api.QuotaLimit.name)
  return _s;
}
inline const std::string& QuotaLimit::_internal_name() const {
  return _impl_.name_.Get();
}
inline void QuotaLimit::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* QuotaLimit::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* QuotaLimit::release_name() {
  // @@protoc_insertion_point(field_release:google.api.QuotaLimit.name)
  return _impl_.name_.Release();
}
inline void QuotaLimit::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.QuotaLimit.name)
}

// string description = 2;
inline void QuotaLimit::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& QuotaLimit::description() const {
  // @@protoc_insertion_point(field_get:google.api.QuotaLimit.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QuotaLimit::set_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.QuotaLimit.description)
}
inline std::string* QuotaLimit::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:google.api.QuotaLimit.description)
  return _s;
}
inline const std::string& QuotaLimit::_internal_description() const {
  return _impl_.description_.Get();
}
inline void QuotaLimit::_internal_set_description(const std::string& value) {
  
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* QuotaLimit::_internal_mutable_description() {
  
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* QuotaLimit::release_description() {
  // @@protoc_insertion_point(field_release:google.api.QuotaLimit.description)
  return _impl_.description_.Release();
}
inline void QuotaLimit::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.QuotaLimit.description)
}

// int64 default_limit = 3;
inline void QuotaLimit::clear_default_limit() {
  _impl_.default_limit_ = int64_t{0};
}
inline int64_t QuotaLimit::_internal_default_limit() const {
  return _impl_.default_limit_;
}
inline int64_t QuotaLimit::default_limit() const {
  // @@protoc_insertion_point(field_get:google.api.QuotaLimit.default_limit)
  return _internal_default_limit();
}
inline void QuotaLimit::_internal_set_default_limit(int64_t value) {
  
  _impl_.default_limit_ = value;
}
inline void QuotaLimit::set_default_limit(int64_t value) {
  _internal_set_default_limit(value);
  // @@protoc_insertion_point(field_set:google.api.QuotaLimit.default_limit)
}

// int64 max_limit = 4;
inline void QuotaLimit::clear_max_limit() {
  _impl_.max_limit_ = int64_t{0};
}
inline int64_t QuotaLimit::_internal_max_limit() const {
  return _impl_.max_limit_;
}
inline int64_t QuotaLimit::max_limit() const {
  // @@protoc_insertion_point(field_get:google.api.QuotaLimit.max_limit)
  return _internal_max_limit();
}
inline void QuotaLimit::_internal_set_max_limit(int64_t value) {
  
  _impl_.max_limit_ = value;
}
inline void QuotaLimit::set_max_limit(int64_t value) {
  _internal_set_max_limit(value);
  // @@protoc_insertion_point(field_set:google.api.QuotaLimit.max_limit)
}

// int64 free_tier = 7;
inline void QuotaLimit::clear_free_tier() {
  _impl_.free_tier_ = int64_t{0};
}
inline int64_t QuotaLimit::_internal_free_tier() const {
  return _impl_.free_tier_;
}
inline int64_t QuotaLimit::free_tier() const {
  // @@protoc_insertion_point(field_get:google.api.QuotaLimit.free_tier)
  return _internal_free_tier();
}
inline void QuotaLimit::_internal_set_free_tier(int64_t value) {
  
  _impl_.free_tier_ = value;
}
inline void QuotaLimit::set_free_tier(int64_t value) {
  _internal_set_free_tier(value);
  // @@protoc_insertion_point(field_set:google.api.QuotaLimit.free_tier)
}

// string duration = 5;
inline void QuotaLimit::clear_duration() {
  _impl_.duration_.ClearToEmpty();
}
inline const std::string& QuotaLimit::duration() const {
  // @@protoc_insertion_point(field_get:google.api.QuotaLimit.duration)
  return _internal_duration();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QuotaLimit::set_duration(ArgT0&& arg0, ArgT... args) {
 
 _impl_.duration_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.QuotaLimit.duration)
}
inline std::string* QuotaLimit::mutable_duration() {
  std::string* _s = _internal_mutable_duration();
  // @@protoc_insertion_point(field_mutable:google.api.QuotaLimit.duration)
  return _s;
}
inline const std::string& QuotaLimit::_internal_duration() const {
  return _impl_.duration_.Get();
}
inline void QuotaLimit::_internal_set_duration(const std::string& value) {
  
  _impl_.duration_.Set(value, GetArenaForAllocation());
}
inline std::string* QuotaLimit::_internal_mutable_duration() {
  
  return _impl_.duration_.Mutable(GetArenaForAllocation());
}
inline std::string* QuotaLimit::release_duration() {
  // @@protoc_insertion_point(field_release:google.api.QuotaLimit.duration)
  return _impl_.duration_.Release();
}
inline void QuotaLimit::set_allocated_duration(std::string* duration) {
  if (duration != nullptr) {
    
  } else {
    
  }
  _impl_.duration_.SetAllocated(duration, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.duration_.IsDefault()) {
    _impl_.duration_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.QuotaLimit.duration)
}

// string metric = 8;
inline void QuotaLimit::clear_metric() {
  _impl_.metric_.ClearToEmpty();
}
inline const std::string& QuotaLimit::metric() const {
  // @@protoc_insertion_point(field_get:google.api.QuotaLimit.metric)
  return _internal_metric();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QuotaLimit::set_metric(ArgT0&& arg0, ArgT... args) {
 
 _impl_.metric_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.QuotaLimit.metric)
}
inline std::string* QuotaLimit::mutable_metric() {
  std::string* _s = _internal_mutable_metric();
  // @@protoc_insertion_point(field_mutable:google.api.QuotaLimit.metric)
  return _s;
}
inline const std::string& QuotaLimit::_internal_metric() const {
  return _impl_.metric_.Get();
}
inline void QuotaLimit::_internal_set_metric(const std::string& value) {
  
  _impl_.metric_.Set(value, GetArenaForAllocation());
}
inline std::string* QuotaLimit::_internal_mutable_metric() {
  
  return _impl_.metric_.Mutable(GetArenaForAllocation());
}
inline std::string* QuotaLimit::release_metric() {
  // @@protoc_insertion_point(field_release:google.api.QuotaLimit.metric)
  return _impl_.metric_.Release();
}
inline void QuotaLimit::set_allocated_metric(std::string* metric) {
  if (metric != nullptr) {
    
  } else {
    
  }
  _impl_.metric_.SetAllocated(metric, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.metric_.IsDefault()) {
    _impl_.metric_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.QuotaLimit.metric)
}

// string unit = 9;
inline void QuotaLimit::clear_unit() {
  _impl_.unit_.ClearToEmpty();
}
inline const std::string& QuotaLimit::unit() const {
  // @@protoc_insertion_point(field_get:google.api.QuotaLimit.unit)
  return _internal_unit();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QuotaLimit::set_unit(ArgT0&& arg0, ArgT... args) {
 
 _impl_.unit_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.QuotaLimit.unit)
}
inline std::string* QuotaLimit::mutable_unit() {
  std::string* _s = _internal_mutable_unit();
  // @@protoc_insertion_point(field_mutable:google.api.QuotaLimit.unit)
  return _s;
}
inline const std::string& QuotaLimit::_internal_unit() const {
  return _impl_.unit_.Get();
}
inline void QuotaLimit::_internal_set_unit(const std::string& value) {
  
  _impl_.unit_.Set(value, GetArenaForAllocation());
}
inline std::string* QuotaLimit::_internal_mutable_unit() {
  
  return _impl_.unit_.Mutable(GetArenaForAllocation());
}
inline std::string* QuotaLimit::release_unit() {
  // @@protoc_insertion_point(field_release:google.api.QuotaLimit.unit)
  return _impl_.unit_.Release();
}
inline void QuotaLimit::set_allocated_unit(std::string* unit) {
  if (unit != nullptr) {
    
  } else {
    
  }
  _impl_.unit_.SetAllocated(unit, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.unit_.IsDefault()) {
    _impl_.unit_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.QuotaLimit.unit)
}

// map<string, int64> values = 10;
inline int QuotaLimit::_internal_values_size() const {
  return _impl_.values_.size();
}
inline int QuotaLimit::values_size() const {
  return _internal_values_size();
}
inline void QuotaLimit::clear_values() {
  _impl_.values_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >&
QuotaLimit::_internal_values() const {
  return _impl_.values_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >&
QuotaLimit::values() const {
  // @@protoc_insertion_point(field_map:google.api.QuotaLimit.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >*
QuotaLimit::_internal_mutable_values() {
  return _impl_.values_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >*
QuotaLimit::mutable_values() {
  // @@protoc_insertion_point(field_mutable_map:google.api.QuotaLimit.values)
  return _internal_mutable_values();
}

// string display_name = 12;
inline void QuotaLimit::clear_display_name() {
  _impl_.display_name_.ClearToEmpty();
}
inline const std::string& QuotaLimit::display_name() const {
  // @@protoc_insertion_point(field_get:google.api.QuotaLimit.display_name)
  return _internal_display_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QuotaLimit::set_display_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.display_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.QuotaLimit.display_name)
}
inline std::string* QuotaLimit::mutable_display_name() {
  std::string* _s = _internal_mutable_display_name();
  // @@protoc_insertion_point(field_mutable:google.api.QuotaLimit.display_name)
  return _s;
}
inline const std::string& QuotaLimit::_internal_display_name() const {
  return _impl_.display_name_.Get();
}
inline void QuotaLimit::_internal_set_display_name(const std::string& value) {
  
  _impl_.display_name_.Set(value, GetArenaForAllocation());
}
inline std::string* QuotaLimit::_internal_mutable_display_name() {
  
  return _impl_.display_name_.Mutable(GetArenaForAllocation());
}
inline std::string* QuotaLimit::release_display_name() {
  // @@protoc_insertion_point(field_release:google.api.QuotaLimit.display_name)
  return _impl_.display_name_.Release();
}
inline void QuotaLimit::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    
  } else {
    
  }
  _impl_.display_name_.SetAllocated(display_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.display_name_.IsDefault()) {
    _impl_.display_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.QuotaLimit.display_name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace api
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fquota_2eproto
