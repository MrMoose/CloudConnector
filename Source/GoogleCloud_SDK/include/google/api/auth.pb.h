// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/auth.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fauth_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fauth_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fapi_2fauth_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fapi_2fauth_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fapi_2fauth_2eproto;
namespace google {
namespace api {
class AuthProvider;
struct AuthProviderDefaultTypeInternal;
extern AuthProviderDefaultTypeInternal _AuthProvider_default_instance_;
class AuthRequirement;
struct AuthRequirementDefaultTypeInternal;
extern AuthRequirementDefaultTypeInternal _AuthRequirement_default_instance_;
class Authentication;
struct AuthenticationDefaultTypeInternal;
extern AuthenticationDefaultTypeInternal _Authentication_default_instance_;
class AuthenticationRule;
struct AuthenticationRuleDefaultTypeInternal;
extern AuthenticationRuleDefaultTypeInternal _AuthenticationRule_default_instance_;
class JwtLocation;
struct JwtLocationDefaultTypeInternal;
extern JwtLocationDefaultTypeInternal _JwtLocation_default_instance_;
class OAuthRequirements;
struct OAuthRequirementsDefaultTypeInternal;
extern OAuthRequirementsDefaultTypeInternal _OAuthRequirements_default_instance_;
}  // namespace api
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::api::AuthProvider* Arena::CreateMaybeMessage<::google::api::AuthProvider>(Arena*);
template<> ::google::api::AuthRequirement* Arena::CreateMaybeMessage<::google::api::AuthRequirement>(Arena*);
template<> ::google::api::Authentication* Arena::CreateMaybeMessage<::google::api::Authentication>(Arena*);
template<> ::google::api::AuthenticationRule* Arena::CreateMaybeMessage<::google::api::AuthenticationRule>(Arena*);
template<> ::google::api::JwtLocation* Arena::CreateMaybeMessage<::google::api::JwtLocation>(Arena*);
template<> ::google::api::OAuthRequirements* Arena::CreateMaybeMessage<::google::api::OAuthRequirements>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace api {

// ===================================================================

class Authentication final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.Authentication) */ {
 public:
  inline Authentication() : Authentication(nullptr) {}
  ~Authentication() override;
  explicit PROTOBUF_CONSTEXPR Authentication(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Authentication(const Authentication& from);
  Authentication(Authentication&& from) noexcept
    : Authentication() {
    *this = ::std::move(from);
  }

  inline Authentication& operator=(const Authentication& from) {
    CopyFrom(from);
    return *this;
  }
  inline Authentication& operator=(Authentication&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Authentication& default_instance() {
    return *internal_default_instance();
  }
  static inline const Authentication* internal_default_instance() {
    return reinterpret_cast<const Authentication*>(
               &_Authentication_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Authentication& a, Authentication& b) {
    a.Swap(&b);
  }
  inline void Swap(Authentication* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Authentication* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Authentication* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Authentication>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Authentication& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Authentication& from) {
    Authentication::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Authentication* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.Authentication";
  }
  protected:
  explicit Authentication(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRulesFieldNumber = 3,
    kProvidersFieldNumber = 4,
  };
  // repeated .google.api.AuthenticationRule rules = 3;
  int rules_size() const;
  private:
  int _internal_rules_size() const;
  public:
  void clear_rules();
  ::google::api::AuthenticationRule* mutable_rules(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::AuthenticationRule >*
      mutable_rules();
  private:
  const ::google::api::AuthenticationRule& _internal_rules(int index) const;
  ::google::api::AuthenticationRule* _internal_add_rules();
  public:
  const ::google::api::AuthenticationRule& rules(int index) const;
  ::google::api::AuthenticationRule* add_rules();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::AuthenticationRule >&
      rules() const;

  // repeated .google.api.AuthProvider providers = 4;
  int providers_size() const;
  private:
  int _internal_providers_size() const;
  public:
  void clear_providers();
  ::google::api::AuthProvider* mutable_providers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::AuthProvider >*
      mutable_providers();
  private:
  const ::google::api::AuthProvider& _internal_providers(int index) const;
  ::google::api::AuthProvider* _internal_add_providers();
  public:
  const ::google::api::AuthProvider& providers(int index) const;
  ::google::api::AuthProvider* add_providers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::AuthProvider >&
      providers() const;

  // @@protoc_insertion_point(class_scope:google.api.Authentication)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::AuthenticationRule > rules_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::AuthProvider > providers_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fauth_2eproto;
};
// -------------------------------------------------------------------

class AuthenticationRule final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.AuthenticationRule) */ {
 public:
  inline AuthenticationRule() : AuthenticationRule(nullptr) {}
  ~AuthenticationRule() override;
  explicit PROTOBUF_CONSTEXPR AuthenticationRule(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AuthenticationRule(const AuthenticationRule& from);
  AuthenticationRule(AuthenticationRule&& from) noexcept
    : AuthenticationRule() {
    *this = ::std::move(from);
  }

  inline AuthenticationRule& operator=(const AuthenticationRule& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthenticationRule& operator=(AuthenticationRule&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuthenticationRule& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuthenticationRule* internal_default_instance() {
    return reinterpret_cast<const AuthenticationRule*>(
               &_AuthenticationRule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AuthenticationRule& a, AuthenticationRule& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthenticationRule* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthenticationRule* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AuthenticationRule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AuthenticationRule>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AuthenticationRule& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AuthenticationRule& from) {
    AuthenticationRule::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthenticationRule* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.AuthenticationRule";
  }
  protected:
  explicit AuthenticationRule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequirementsFieldNumber = 7,
    kSelectorFieldNumber = 1,
    kOauthFieldNumber = 2,
    kAllowWithoutCredentialFieldNumber = 5,
  };
  // repeated .google.api.AuthRequirement requirements = 7;
  int requirements_size() const;
  private:
  int _internal_requirements_size() const;
  public:
  void clear_requirements();
  ::google::api::AuthRequirement* mutable_requirements(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::AuthRequirement >*
      mutable_requirements();
  private:
  const ::google::api::AuthRequirement& _internal_requirements(int index) const;
  ::google::api::AuthRequirement* _internal_add_requirements();
  public:
  const ::google::api::AuthRequirement& requirements(int index) const;
  ::google::api::AuthRequirement* add_requirements();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::AuthRequirement >&
      requirements() const;

  // string selector = 1;
  void clear_selector();
  const std::string& selector() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_selector(ArgT0&& arg0, ArgT... args);
  std::string* mutable_selector();
  PROTOBUF_NODISCARD std::string* release_selector();
  void set_allocated_selector(std::string* selector);
  private:
  const std::string& _internal_selector() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_selector(const std::string& value);
  std::string* _internal_mutable_selector();
  public:

  // .google.api.OAuthRequirements oauth = 2;
  bool has_oauth() const;
  private:
  bool _internal_has_oauth() const;
  public:
  void clear_oauth();
  const ::google::api::OAuthRequirements& oauth() const;
  PROTOBUF_NODISCARD ::google::api::OAuthRequirements* release_oauth();
  ::google::api::OAuthRequirements* mutable_oauth();
  void set_allocated_oauth(::google::api::OAuthRequirements* oauth);
  private:
  const ::google::api::OAuthRequirements& _internal_oauth() const;
  ::google::api::OAuthRequirements* _internal_mutable_oauth();
  public:
  void unsafe_arena_set_allocated_oauth(
      ::google::api::OAuthRequirements* oauth);
  ::google::api::OAuthRequirements* unsafe_arena_release_oauth();

  // bool allow_without_credential = 5;
  void clear_allow_without_credential();
  bool allow_without_credential() const;
  void set_allow_without_credential(bool value);
  private:
  bool _internal_allow_without_credential() const;
  void _internal_set_allow_without_credential(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.api.AuthenticationRule)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::AuthRequirement > requirements_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr selector_;
    ::google::api::OAuthRequirements* oauth_;
    bool allow_without_credential_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fauth_2eproto;
};
// -------------------------------------------------------------------

class JwtLocation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.JwtLocation) */ {
 public:
  inline JwtLocation() : JwtLocation(nullptr) {}
  ~JwtLocation() override;
  explicit PROTOBUF_CONSTEXPR JwtLocation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JwtLocation(const JwtLocation& from);
  JwtLocation(JwtLocation&& from) noexcept
    : JwtLocation() {
    *this = ::std::move(from);
  }

  inline JwtLocation& operator=(const JwtLocation& from) {
    CopyFrom(from);
    return *this;
  }
  inline JwtLocation& operator=(JwtLocation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JwtLocation& default_instance() {
    return *internal_default_instance();
  }
  enum InCase {
    kHeader = 1,
    kQuery = 2,
    IN_NOT_SET = 0,
  };

  static inline const JwtLocation* internal_default_instance() {
    return reinterpret_cast<const JwtLocation*>(
               &_JwtLocation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(JwtLocation& a, JwtLocation& b) {
    a.Swap(&b);
  }
  inline void Swap(JwtLocation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JwtLocation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JwtLocation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JwtLocation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JwtLocation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const JwtLocation& from) {
    JwtLocation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JwtLocation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.JwtLocation";
  }
  protected:
  explicit JwtLocation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuePrefixFieldNumber = 3,
    kHeaderFieldNumber = 1,
    kQueryFieldNumber = 2,
  };
  // string value_prefix = 3;
  void clear_value_prefix();
  const std::string& value_prefix() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value_prefix(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value_prefix();
  PROTOBUF_NODISCARD std::string* release_value_prefix();
  void set_allocated_value_prefix(std::string* value_prefix);
  private:
  const std::string& _internal_value_prefix() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value_prefix(const std::string& value);
  std::string* _internal_mutable_value_prefix();
  public:

  // string header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const std::string& header() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_header(ArgT0&& arg0, ArgT... args);
  std::string* mutable_header();
  PROTOBUF_NODISCARD std::string* release_header();
  void set_allocated_header(std::string* header);
  private:
  const std::string& _internal_header() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_header(const std::string& value);
  std::string* _internal_mutable_header();
  public:

  // string query = 2;
  bool has_query() const;
  private:
  bool _internal_has_query() const;
  public:
  void clear_query();
  const std::string& query() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_query(ArgT0&& arg0, ArgT... args);
  std::string* mutable_query();
  PROTOBUF_NODISCARD std::string* release_query();
  void set_allocated_query(std::string* query);
  private:
  const std::string& _internal_query() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_query(const std::string& value);
  std::string* _internal_mutable_query();
  public:

  void clear_in();
  InCase in_case() const;
  // @@protoc_insertion_point(class_scope:google.api.JwtLocation)
 private:
  class _Internal;
  void set_has_header();
  void set_has_query();

  inline bool has_in() const;
  inline void clear_has_in();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_prefix_;
    union InUnion {
      constexpr InUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr header_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
    } in_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fauth_2eproto;
};
// -------------------------------------------------------------------

class AuthProvider final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.AuthProvider) */ {
 public:
  inline AuthProvider() : AuthProvider(nullptr) {}
  ~AuthProvider() override;
  explicit PROTOBUF_CONSTEXPR AuthProvider(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AuthProvider(const AuthProvider& from);
  AuthProvider(AuthProvider&& from) noexcept
    : AuthProvider() {
    *this = ::std::move(from);
  }

  inline AuthProvider& operator=(const AuthProvider& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthProvider& operator=(AuthProvider&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuthProvider& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuthProvider* internal_default_instance() {
    return reinterpret_cast<const AuthProvider*>(
               &_AuthProvider_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AuthProvider& a, AuthProvider& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthProvider* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthProvider* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AuthProvider* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AuthProvider>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AuthProvider& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AuthProvider& from) {
    AuthProvider::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthProvider* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.AuthProvider";
  }
  protected:
  explicit AuthProvider(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJwtLocationsFieldNumber = 6,
    kIdFieldNumber = 1,
    kIssuerFieldNumber = 2,
    kJwksUriFieldNumber = 3,
    kAudiencesFieldNumber = 4,
    kAuthorizationUrlFieldNumber = 5,
  };
  // repeated .google.api.JwtLocation jwt_locations = 6;
  int jwt_locations_size() const;
  private:
  int _internal_jwt_locations_size() const;
  public:
  void clear_jwt_locations();
  ::google::api::JwtLocation* mutable_jwt_locations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::JwtLocation >*
      mutable_jwt_locations();
  private:
  const ::google::api::JwtLocation& _internal_jwt_locations(int index) const;
  ::google::api::JwtLocation* _internal_add_jwt_locations();
  public:
  const ::google::api::JwtLocation& jwt_locations(int index) const;
  ::google::api::JwtLocation* add_jwt_locations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::JwtLocation >&
      jwt_locations() const;

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string issuer = 2;
  void clear_issuer();
  const std::string& issuer() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_issuer(ArgT0&& arg0, ArgT... args);
  std::string* mutable_issuer();
  PROTOBUF_NODISCARD std::string* release_issuer();
  void set_allocated_issuer(std::string* issuer);
  private:
  const std::string& _internal_issuer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_issuer(const std::string& value);
  std::string* _internal_mutable_issuer();
  public:

  // string jwks_uri = 3;
  void clear_jwks_uri();
  const std::string& jwks_uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_jwks_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_jwks_uri();
  PROTOBUF_NODISCARD std::string* release_jwks_uri();
  void set_allocated_jwks_uri(std::string* jwks_uri);
  private:
  const std::string& _internal_jwks_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_jwks_uri(const std::string& value);
  std::string* _internal_mutable_jwks_uri();
  public:

  // string audiences = 4;
  void clear_audiences();
  const std::string& audiences() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_audiences(ArgT0&& arg0, ArgT... args);
  std::string* mutable_audiences();
  PROTOBUF_NODISCARD std::string* release_audiences();
  void set_allocated_audiences(std::string* audiences);
  private:
  const std::string& _internal_audiences() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_audiences(const std::string& value);
  std::string* _internal_mutable_audiences();
  public:

  // string authorization_url = 5;
  void clear_authorization_url();
  const std::string& authorization_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_authorization_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_authorization_url();
  PROTOBUF_NODISCARD std::string* release_authorization_url();
  void set_allocated_authorization_url(std::string* authorization_url);
  private:
  const std::string& _internal_authorization_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_authorization_url(const std::string& value);
  std::string* _internal_mutable_authorization_url();
  public:

  // @@protoc_insertion_point(class_scope:google.api.AuthProvider)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::JwtLocation > jwt_locations_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr issuer_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr jwks_uri_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr audiences_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr authorization_url_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fauth_2eproto;
};
// -------------------------------------------------------------------

class OAuthRequirements final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.OAuthRequirements) */ {
 public:
  inline OAuthRequirements() : OAuthRequirements(nullptr) {}
  ~OAuthRequirements() override;
  explicit PROTOBUF_CONSTEXPR OAuthRequirements(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OAuthRequirements(const OAuthRequirements& from);
  OAuthRequirements(OAuthRequirements&& from) noexcept
    : OAuthRequirements() {
    *this = ::std::move(from);
  }

  inline OAuthRequirements& operator=(const OAuthRequirements& from) {
    CopyFrom(from);
    return *this;
  }
  inline OAuthRequirements& operator=(OAuthRequirements&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OAuthRequirements& default_instance() {
    return *internal_default_instance();
  }
  static inline const OAuthRequirements* internal_default_instance() {
    return reinterpret_cast<const OAuthRequirements*>(
               &_OAuthRequirements_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(OAuthRequirements& a, OAuthRequirements& b) {
    a.Swap(&b);
  }
  inline void Swap(OAuthRequirements* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OAuthRequirements* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OAuthRequirements* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OAuthRequirements>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OAuthRequirements& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OAuthRequirements& from) {
    OAuthRequirements::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OAuthRequirements* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.OAuthRequirements";
  }
  protected:
  explicit OAuthRequirements(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCanonicalScopesFieldNumber = 1,
  };
  // string canonical_scopes = 1;
  void clear_canonical_scopes();
  const std::string& canonical_scopes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_canonical_scopes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_canonical_scopes();
  PROTOBUF_NODISCARD std::string* release_canonical_scopes();
  void set_allocated_canonical_scopes(std::string* canonical_scopes);
  private:
  const std::string& _internal_canonical_scopes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_canonical_scopes(const std::string& value);
  std::string* _internal_mutable_canonical_scopes();
  public:

  // @@protoc_insertion_point(class_scope:google.api.OAuthRequirements)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr canonical_scopes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fauth_2eproto;
};
// -------------------------------------------------------------------

class AuthRequirement final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.AuthRequirement) */ {
 public:
  inline AuthRequirement() : AuthRequirement(nullptr) {}
  ~AuthRequirement() override;
  explicit PROTOBUF_CONSTEXPR AuthRequirement(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AuthRequirement(const AuthRequirement& from);
  AuthRequirement(AuthRequirement&& from) noexcept
    : AuthRequirement() {
    *this = ::std::move(from);
  }

  inline AuthRequirement& operator=(const AuthRequirement& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthRequirement& operator=(AuthRequirement&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuthRequirement& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuthRequirement* internal_default_instance() {
    return reinterpret_cast<const AuthRequirement*>(
               &_AuthRequirement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AuthRequirement& a, AuthRequirement& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthRequirement* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthRequirement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AuthRequirement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AuthRequirement>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AuthRequirement& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AuthRequirement& from) {
    AuthRequirement::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthRequirement* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.AuthRequirement";
  }
  protected:
  explicit AuthRequirement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProviderIdFieldNumber = 1,
    kAudiencesFieldNumber = 2,
  };
  // string provider_id = 1;
  void clear_provider_id();
  const std::string& provider_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_provider_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_provider_id();
  PROTOBUF_NODISCARD std::string* release_provider_id();
  void set_allocated_provider_id(std::string* provider_id);
  private:
  const std::string& _internal_provider_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_provider_id(const std::string& value);
  std::string* _internal_mutable_provider_id();
  public:

  // string audiences = 2;
  void clear_audiences();
  const std::string& audiences() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_audiences(ArgT0&& arg0, ArgT... args);
  std::string* mutable_audiences();
  PROTOBUF_NODISCARD std::string* release_audiences();
  void set_allocated_audiences(std::string* audiences);
  private:
  const std::string& _internal_audiences() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_audiences(const std::string& value);
  std::string* _internal_mutable_audiences();
  public:

  // @@protoc_insertion_point(class_scope:google.api.AuthRequirement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr provider_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr audiences_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fauth_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Authentication

// repeated .google.api.AuthenticationRule rules = 3;
inline int Authentication::_internal_rules_size() const {
  return _impl_.rules_.size();
}
inline int Authentication::rules_size() const {
  return _internal_rules_size();
}
inline void Authentication::clear_rules() {
  _impl_.rules_.Clear();
}
inline ::google::api::AuthenticationRule* Authentication::mutable_rules(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.Authentication.rules)
  return _impl_.rules_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::AuthenticationRule >*
Authentication::mutable_rules() {
  // @@protoc_insertion_point(field_mutable_list:google.api.Authentication.rules)
  return &_impl_.rules_;
}
inline const ::google::api::AuthenticationRule& Authentication::_internal_rules(int index) const {
  return _impl_.rules_.Get(index);
}
inline const ::google::api::AuthenticationRule& Authentication::rules(int index) const {
  // @@protoc_insertion_point(field_get:google.api.Authentication.rules)
  return _internal_rules(index);
}
inline ::google::api::AuthenticationRule* Authentication::_internal_add_rules() {
  return _impl_.rules_.Add();
}
inline ::google::api::AuthenticationRule* Authentication::add_rules() {
  ::google::api::AuthenticationRule* _add = _internal_add_rules();
  // @@protoc_insertion_point(field_add:google.api.Authentication.rules)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::AuthenticationRule >&
Authentication::rules() const {
  // @@protoc_insertion_point(field_list:google.api.Authentication.rules)
  return _impl_.rules_;
}

// repeated .google.api.AuthProvider providers = 4;
inline int Authentication::_internal_providers_size() const {
  return _impl_.providers_.size();
}
inline int Authentication::providers_size() const {
  return _internal_providers_size();
}
inline void Authentication::clear_providers() {
  _impl_.providers_.Clear();
}
inline ::google::api::AuthProvider* Authentication::mutable_providers(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.Authentication.providers)
  return _impl_.providers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::AuthProvider >*
Authentication::mutable_providers() {
  // @@protoc_insertion_point(field_mutable_list:google.api.Authentication.providers)
  return &_impl_.providers_;
}
inline const ::google::api::AuthProvider& Authentication::_internal_providers(int index) const {
  return _impl_.providers_.Get(index);
}
inline const ::google::api::AuthProvider& Authentication::providers(int index) const {
  // @@protoc_insertion_point(field_get:google.api.Authentication.providers)
  return _internal_providers(index);
}
inline ::google::api::AuthProvider* Authentication::_internal_add_providers() {
  return _impl_.providers_.Add();
}
inline ::google::api::AuthProvider* Authentication::add_providers() {
  ::google::api::AuthProvider* _add = _internal_add_providers();
  // @@protoc_insertion_point(field_add:google.api.Authentication.providers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::AuthProvider >&
Authentication::providers() const {
  // @@protoc_insertion_point(field_list:google.api.Authentication.providers)
  return _impl_.providers_;
}

// -------------------------------------------------------------------

// AuthenticationRule

// string selector = 1;
inline void AuthenticationRule::clear_selector() {
  _impl_.selector_.ClearToEmpty();
}
inline const std::string& AuthenticationRule::selector() const {
  // @@protoc_insertion_point(field_get:google.api.AuthenticationRule.selector)
  return _internal_selector();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AuthenticationRule::set_selector(ArgT0&& arg0, ArgT... args) {
 
 _impl_.selector_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.AuthenticationRule.selector)
}
inline std::string* AuthenticationRule::mutable_selector() {
  std::string* _s = _internal_mutable_selector();
  // @@protoc_insertion_point(field_mutable:google.api.AuthenticationRule.selector)
  return _s;
}
inline const std::string& AuthenticationRule::_internal_selector() const {
  return _impl_.selector_.Get();
}
inline void AuthenticationRule::_internal_set_selector(const std::string& value) {
  
  _impl_.selector_.Set(value, GetArenaForAllocation());
}
inline std::string* AuthenticationRule::_internal_mutable_selector() {
  
  return _impl_.selector_.Mutable(GetArenaForAllocation());
}
inline std::string* AuthenticationRule::release_selector() {
  // @@protoc_insertion_point(field_release:google.api.AuthenticationRule.selector)
  return _impl_.selector_.Release();
}
inline void AuthenticationRule::set_allocated_selector(std::string* selector) {
  if (selector != nullptr) {
    
  } else {
    
  }
  _impl_.selector_.SetAllocated(selector, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.selector_.IsDefault()) {
    _impl_.selector_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.AuthenticationRule.selector)
}

// .google.api.OAuthRequirements oauth = 2;
inline bool AuthenticationRule::_internal_has_oauth() const {
  return this != internal_default_instance() && _impl_.oauth_ != nullptr;
}
inline bool AuthenticationRule::has_oauth() const {
  return _internal_has_oauth();
}
inline void AuthenticationRule::clear_oauth() {
  if (GetArenaForAllocation() == nullptr && _impl_.oauth_ != nullptr) {
    delete _impl_.oauth_;
  }
  _impl_.oauth_ = nullptr;
}
inline const ::google::api::OAuthRequirements& AuthenticationRule::_internal_oauth() const {
  const ::google::api::OAuthRequirements* p = _impl_.oauth_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::api::OAuthRequirements&>(
      ::google::api::_OAuthRequirements_default_instance_);
}
inline const ::google::api::OAuthRequirements& AuthenticationRule::oauth() const {
  // @@protoc_insertion_point(field_get:google.api.AuthenticationRule.oauth)
  return _internal_oauth();
}
inline void AuthenticationRule::unsafe_arena_set_allocated_oauth(
    ::google::api::OAuthRequirements* oauth) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.oauth_);
  }
  _impl_.oauth_ = oauth;
  if (oauth) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.AuthenticationRule.oauth)
}
inline ::google::api::OAuthRequirements* AuthenticationRule::release_oauth() {
  
  ::google::api::OAuthRequirements* temp = _impl_.oauth_;
  _impl_.oauth_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::api::OAuthRequirements* AuthenticationRule::unsafe_arena_release_oauth() {
  // @@protoc_insertion_point(field_release:google.api.AuthenticationRule.oauth)
  
  ::google::api::OAuthRequirements* temp = _impl_.oauth_;
  _impl_.oauth_ = nullptr;
  return temp;
}
inline ::google::api::OAuthRequirements* AuthenticationRule::_internal_mutable_oauth() {
  
  if (_impl_.oauth_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::api::OAuthRequirements>(GetArenaForAllocation());
    _impl_.oauth_ = p;
  }
  return _impl_.oauth_;
}
inline ::google::api::OAuthRequirements* AuthenticationRule::mutable_oauth() {
  ::google::api::OAuthRequirements* _msg = _internal_mutable_oauth();
  // @@protoc_insertion_point(field_mutable:google.api.AuthenticationRule.oauth)
  return _msg;
}
inline void AuthenticationRule::set_allocated_oauth(::google::api::OAuthRequirements* oauth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.oauth_;
  }
  if (oauth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(oauth);
    if (message_arena != submessage_arena) {
      oauth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oauth, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.oauth_ = oauth;
  // @@protoc_insertion_point(field_set_allocated:google.api.AuthenticationRule.oauth)
}

// bool allow_without_credential = 5;
inline void AuthenticationRule::clear_allow_without_credential() {
  _impl_.allow_without_credential_ = false;
}
inline bool AuthenticationRule::_internal_allow_without_credential() const {
  return _impl_.allow_without_credential_;
}
inline bool AuthenticationRule::allow_without_credential() const {
  // @@protoc_insertion_point(field_get:google.api.AuthenticationRule.allow_without_credential)
  return _internal_allow_without_credential();
}
inline void AuthenticationRule::_internal_set_allow_without_credential(bool value) {
  
  _impl_.allow_without_credential_ = value;
}
inline void AuthenticationRule::set_allow_without_credential(bool value) {
  _internal_set_allow_without_credential(value);
  // @@protoc_insertion_point(field_set:google.api.AuthenticationRule.allow_without_credential)
}

// repeated .google.api.AuthRequirement requirements = 7;
inline int AuthenticationRule::_internal_requirements_size() const {
  return _impl_.requirements_.size();
}
inline int AuthenticationRule::requirements_size() const {
  return _internal_requirements_size();
}
inline void AuthenticationRule::clear_requirements() {
  _impl_.requirements_.Clear();
}
inline ::google::api::AuthRequirement* AuthenticationRule::mutable_requirements(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.AuthenticationRule.requirements)
  return _impl_.requirements_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::AuthRequirement >*
AuthenticationRule::mutable_requirements() {
  // @@protoc_insertion_point(field_mutable_list:google.api.AuthenticationRule.requirements)
  return &_impl_.requirements_;
}
inline const ::google::api::AuthRequirement& AuthenticationRule::_internal_requirements(int index) const {
  return _impl_.requirements_.Get(index);
}
inline const ::google::api::AuthRequirement& AuthenticationRule::requirements(int index) const {
  // @@protoc_insertion_point(field_get:google.api.AuthenticationRule.requirements)
  return _internal_requirements(index);
}
inline ::google::api::AuthRequirement* AuthenticationRule::_internal_add_requirements() {
  return _impl_.requirements_.Add();
}
inline ::google::api::AuthRequirement* AuthenticationRule::add_requirements() {
  ::google::api::AuthRequirement* _add = _internal_add_requirements();
  // @@protoc_insertion_point(field_add:google.api.AuthenticationRule.requirements)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::AuthRequirement >&
AuthenticationRule::requirements() const {
  // @@protoc_insertion_point(field_list:google.api.AuthenticationRule.requirements)
  return _impl_.requirements_;
}

// -------------------------------------------------------------------

// JwtLocation

// string header = 1;
inline bool JwtLocation::_internal_has_header() const {
  return in_case() == kHeader;
}
inline bool JwtLocation::has_header() const {
  return _internal_has_header();
}
inline void JwtLocation::set_has_header() {
  _impl_._oneof_case_[0] = kHeader;
}
inline void JwtLocation::clear_header() {
  if (_internal_has_header()) {
    _impl_.in_.header_.Destroy();
    clear_has_in();
  }
}
inline const std::string& JwtLocation::header() const {
  // @@protoc_insertion_point(field_get:google.api.JwtLocation.header)
  return _internal_header();
}
template <typename ArgT0, typename... ArgT>
inline void JwtLocation::set_header(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_header()) {
    clear_in();
    set_has_header();
    _impl_.in_.header_.InitDefault();
  }
  _impl_.in_.header_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.JwtLocation.header)
}
inline std::string* JwtLocation::mutable_header() {
  std::string* _s = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:google.api.JwtLocation.header)
  return _s;
}
inline const std::string& JwtLocation::_internal_header() const {
  if (_internal_has_header()) {
    return _impl_.in_.header_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void JwtLocation::_internal_set_header(const std::string& value) {
  if (!_internal_has_header()) {
    clear_in();
    set_has_header();
    _impl_.in_.header_.InitDefault();
  }
  _impl_.in_.header_.Set(value, GetArenaForAllocation());
}
inline std::string* JwtLocation::_internal_mutable_header() {
  if (!_internal_has_header()) {
    clear_in();
    set_has_header();
    _impl_.in_.header_.InitDefault();
  }
  return _impl_.in_.header_.Mutable(      GetArenaForAllocation());
}
inline std::string* JwtLocation::release_header() {
  // @@protoc_insertion_point(field_release:google.api.JwtLocation.header)
  if (_internal_has_header()) {
    clear_has_in();
    return _impl_.in_.header_.Release();
  } else {
    return nullptr;
  }
}
inline void JwtLocation::set_allocated_header(std::string* header) {
  if (has_in()) {
    clear_in();
  }
  if (header != nullptr) {
    set_has_header();
    _impl_.in_.header_.InitAllocated(header, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:google.api.JwtLocation.header)
}

// string query = 2;
inline bool JwtLocation::_internal_has_query() const {
  return in_case() == kQuery;
}
inline bool JwtLocation::has_query() const {
  return _internal_has_query();
}
inline void JwtLocation::set_has_query() {
  _impl_._oneof_case_[0] = kQuery;
}
inline void JwtLocation::clear_query() {
  if (_internal_has_query()) {
    _impl_.in_.query_.Destroy();
    clear_has_in();
  }
}
inline const std::string& JwtLocation::query() const {
  // @@protoc_insertion_point(field_get:google.api.JwtLocation.query)
  return _internal_query();
}
template <typename ArgT0, typename... ArgT>
inline void JwtLocation::set_query(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_query()) {
    clear_in();
    set_has_query();
    _impl_.in_.query_.InitDefault();
  }
  _impl_.in_.query_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.JwtLocation.query)
}
inline std::string* JwtLocation::mutable_query() {
  std::string* _s = _internal_mutable_query();
  // @@protoc_insertion_point(field_mutable:google.api.JwtLocation.query)
  return _s;
}
inline const std::string& JwtLocation::_internal_query() const {
  if (_internal_has_query()) {
    return _impl_.in_.query_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void JwtLocation::_internal_set_query(const std::string& value) {
  if (!_internal_has_query()) {
    clear_in();
    set_has_query();
    _impl_.in_.query_.InitDefault();
  }
  _impl_.in_.query_.Set(value, GetArenaForAllocation());
}
inline std::string* JwtLocation::_internal_mutable_query() {
  if (!_internal_has_query()) {
    clear_in();
    set_has_query();
    _impl_.in_.query_.InitDefault();
  }
  return _impl_.in_.query_.Mutable(      GetArenaForAllocation());
}
inline std::string* JwtLocation::release_query() {
  // @@protoc_insertion_point(field_release:google.api.JwtLocation.query)
  if (_internal_has_query()) {
    clear_has_in();
    return _impl_.in_.query_.Release();
  } else {
    return nullptr;
  }
}
inline void JwtLocation::set_allocated_query(std::string* query) {
  if (has_in()) {
    clear_in();
  }
  if (query != nullptr) {
    set_has_query();
    _impl_.in_.query_.InitAllocated(query, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:google.api.JwtLocation.query)
}

// string value_prefix = 3;
inline void JwtLocation::clear_value_prefix() {
  _impl_.value_prefix_.ClearToEmpty();
}
inline const std::string& JwtLocation::value_prefix() const {
  // @@protoc_insertion_point(field_get:google.api.JwtLocation.value_prefix)
  return _internal_value_prefix();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void JwtLocation::set_value_prefix(ArgT0&& arg0, ArgT... args) {
 
 _impl_.value_prefix_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.JwtLocation.value_prefix)
}
inline std::string* JwtLocation::mutable_value_prefix() {
  std::string* _s = _internal_mutable_value_prefix();
  // @@protoc_insertion_point(field_mutable:google.api.JwtLocation.value_prefix)
  return _s;
}
inline const std::string& JwtLocation::_internal_value_prefix() const {
  return _impl_.value_prefix_.Get();
}
inline void JwtLocation::_internal_set_value_prefix(const std::string& value) {
  
  _impl_.value_prefix_.Set(value, GetArenaForAllocation());
}
inline std::string* JwtLocation::_internal_mutable_value_prefix() {
  
  return _impl_.value_prefix_.Mutable(GetArenaForAllocation());
}
inline std::string* JwtLocation::release_value_prefix() {
  // @@protoc_insertion_point(field_release:google.api.JwtLocation.value_prefix)
  return _impl_.value_prefix_.Release();
}
inline void JwtLocation::set_allocated_value_prefix(std::string* value_prefix) {
  if (value_prefix != nullptr) {
    
  } else {
    
  }
  _impl_.value_prefix_.SetAllocated(value_prefix, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_prefix_.IsDefault()) {
    _impl_.value_prefix_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.JwtLocation.value_prefix)
}

inline bool JwtLocation::has_in() const {
  return in_case() != IN_NOT_SET;
}
inline void JwtLocation::clear_has_in() {
  _impl_._oneof_case_[0] = IN_NOT_SET;
}
inline JwtLocation::InCase JwtLocation::in_case() const {
  return JwtLocation::InCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// AuthProvider

// string id = 1;
inline void AuthProvider::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& AuthProvider::id() const {
  // @@protoc_insertion_point(field_get:google.api.AuthProvider.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AuthProvider::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.AuthProvider.id)
}
inline std::string* AuthProvider::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:google.api.AuthProvider.id)
  return _s;
}
inline const std::string& AuthProvider::_internal_id() const {
  return _impl_.id_.Get();
}
inline void AuthProvider::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* AuthProvider::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* AuthProvider::release_id() {
  // @@protoc_insertion_point(field_release:google.api.AuthProvider.id)
  return _impl_.id_.Release();
}
inline void AuthProvider::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.AuthProvider.id)
}

// string issuer = 2;
inline void AuthProvider::clear_issuer() {
  _impl_.issuer_.ClearToEmpty();
}
inline const std::string& AuthProvider::issuer() const {
  // @@protoc_insertion_point(field_get:google.api.AuthProvider.issuer)
  return _internal_issuer();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AuthProvider::set_issuer(ArgT0&& arg0, ArgT... args) {
 
 _impl_.issuer_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.AuthProvider.issuer)
}
inline std::string* AuthProvider::mutable_issuer() {
  std::string* _s = _internal_mutable_issuer();
  // @@protoc_insertion_point(field_mutable:google.api.AuthProvider.issuer)
  return _s;
}
inline const std::string& AuthProvider::_internal_issuer() const {
  return _impl_.issuer_.Get();
}
inline void AuthProvider::_internal_set_issuer(const std::string& value) {
  
  _impl_.issuer_.Set(value, GetArenaForAllocation());
}
inline std::string* AuthProvider::_internal_mutable_issuer() {
  
  return _impl_.issuer_.Mutable(GetArenaForAllocation());
}
inline std::string* AuthProvider::release_issuer() {
  // @@protoc_insertion_point(field_release:google.api.AuthProvider.issuer)
  return _impl_.issuer_.Release();
}
inline void AuthProvider::set_allocated_issuer(std::string* issuer) {
  if (issuer != nullptr) {
    
  } else {
    
  }
  _impl_.issuer_.SetAllocated(issuer, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.issuer_.IsDefault()) {
    _impl_.issuer_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.AuthProvider.issuer)
}

// string jwks_uri = 3;
inline void AuthProvider::clear_jwks_uri() {
  _impl_.jwks_uri_.ClearToEmpty();
}
inline const std::string& AuthProvider::jwks_uri() const {
  // @@protoc_insertion_point(field_get:google.api.AuthProvider.jwks_uri)
  return _internal_jwks_uri();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AuthProvider::set_jwks_uri(ArgT0&& arg0, ArgT... args) {
 
 _impl_.jwks_uri_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.AuthProvider.jwks_uri)
}
inline std::string* AuthProvider::mutable_jwks_uri() {
  std::string* _s = _internal_mutable_jwks_uri();
  // @@protoc_insertion_point(field_mutable:google.api.AuthProvider.jwks_uri)
  return _s;
}
inline const std::string& AuthProvider::_internal_jwks_uri() const {
  return _impl_.jwks_uri_.Get();
}
inline void AuthProvider::_internal_set_jwks_uri(const std::string& value) {
  
  _impl_.jwks_uri_.Set(value, GetArenaForAllocation());
}
inline std::string* AuthProvider::_internal_mutable_jwks_uri() {
  
  return _impl_.jwks_uri_.Mutable(GetArenaForAllocation());
}
inline std::string* AuthProvider::release_jwks_uri() {
  // @@protoc_insertion_point(field_release:google.api.AuthProvider.jwks_uri)
  return _impl_.jwks_uri_.Release();
}
inline void AuthProvider::set_allocated_jwks_uri(std::string* jwks_uri) {
  if (jwks_uri != nullptr) {
    
  } else {
    
  }
  _impl_.jwks_uri_.SetAllocated(jwks_uri, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.jwks_uri_.IsDefault()) {
    _impl_.jwks_uri_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.AuthProvider.jwks_uri)
}

// string audiences = 4;
inline void AuthProvider::clear_audiences() {
  _impl_.audiences_.ClearToEmpty();
}
inline const std::string& AuthProvider::audiences() const {
  // @@protoc_insertion_point(field_get:google.api.AuthProvider.audiences)
  return _internal_audiences();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AuthProvider::set_audiences(ArgT0&& arg0, ArgT... args) {
 
 _impl_.audiences_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.AuthProvider.audiences)
}
inline std::string* AuthProvider::mutable_audiences() {
  std::string* _s = _internal_mutable_audiences();
  // @@protoc_insertion_point(field_mutable:google.api.AuthProvider.audiences)
  return _s;
}
inline const std::string& AuthProvider::_internal_audiences() const {
  return _impl_.audiences_.Get();
}
inline void AuthProvider::_internal_set_audiences(const std::string& value) {
  
  _impl_.audiences_.Set(value, GetArenaForAllocation());
}
inline std::string* AuthProvider::_internal_mutable_audiences() {
  
  return _impl_.audiences_.Mutable(GetArenaForAllocation());
}
inline std::string* AuthProvider::release_audiences() {
  // @@protoc_insertion_point(field_release:google.api.AuthProvider.audiences)
  return _impl_.audiences_.Release();
}
inline void AuthProvider::set_allocated_audiences(std::string* audiences) {
  if (audiences != nullptr) {
    
  } else {
    
  }
  _impl_.audiences_.SetAllocated(audiences, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.audiences_.IsDefault()) {
    _impl_.audiences_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.AuthProvider.audiences)
}

// string authorization_url = 5;
inline void AuthProvider::clear_authorization_url() {
  _impl_.authorization_url_.ClearToEmpty();
}
inline const std::string& AuthProvider::authorization_url() const {
  // @@protoc_insertion_point(field_get:google.api.AuthProvider.authorization_url)
  return _internal_authorization_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AuthProvider::set_authorization_url(ArgT0&& arg0, ArgT... args) {
 
 _impl_.authorization_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.AuthProvider.authorization_url)
}
inline std::string* AuthProvider::mutable_authorization_url() {
  std::string* _s = _internal_mutable_authorization_url();
  // @@protoc_insertion_point(field_mutable:google.api.AuthProvider.authorization_url)
  return _s;
}
inline const std::string& AuthProvider::_internal_authorization_url() const {
  return _impl_.authorization_url_.Get();
}
inline void AuthProvider::_internal_set_authorization_url(const std::string& value) {
  
  _impl_.authorization_url_.Set(value, GetArenaForAllocation());
}
inline std::string* AuthProvider::_internal_mutable_authorization_url() {
  
  return _impl_.authorization_url_.Mutable(GetArenaForAllocation());
}
inline std::string* AuthProvider::release_authorization_url() {
  // @@protoc_insertion_point(field_release:google.api.AuthProvider.authorization_url)
  return _impl_.authorization_url_.Release();
}
inline void AuthProvider::set_allocated_authorization_url(std::string* authorization_url) {
  if (authorization_url != nullptr) {
    
  } else {
    
  }
  _impl_.authorization_url_.SetAllocated(authorization_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.authorization_url_.IsDefault()) {
    _impl_.authorization_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.AuthProvider.authorization_url)
}

// repeated .google.api.JwtLocation jwt_locations = 6;
inline int AuthProvider::_internal_jwt_locations_size() const {
  return _impl_.jwt_locations_.size();
}
inline int AuthProvider::jwt_locations_size() const {
  return _internal_jwt_locations_size();
}
inline void AuthProvider::clear_jwt_locations() {
  _impl_.jwt_locations_.Clear();
}
inline ::google::api::JwtLocation* AuthProvider::mutable_jwt_locations(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.AuthProvider.jwt_locations)
  return _impl_.jwt_locations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::JwtLocation >*
AuthProvider::mutable_jwt_locations() {
  // @@protoc_insertion_point(field_mutable_list:google.api.AuthProvider.jwt_locations)
  return &_impl_.jwt_locations_;
}
inline const ::google::api::JwtLocation& AuthProvider::_internal_jwt_locations(int index) const {
  return _impl_.jwt_locations_.Get(index);
}
inline const ::google::api::JwtLocation& AuthProvider::jwt_locations(int index) const {
  // @@protoc_insertion_point(field_get:google.api.AuthProvider.jwt_locations)
  return _internal_jwt_locations(index);
}
inline ::google::api::JwtLocation* AuthProvider::_internal_add_jwt_locations() {
  return _impl_.jwt_locations_.Add();
}
inline ::google::api::JwtLocation* AuthProvider::add_jwt_locations() {
  ::google::api::JwtLocation* _add = _internal_add_jwt_locations();
  // @@protoc_insertion_point(field_add:google.api.AuthProvider.jwt_locations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::JwtLocation >&
AuthProvider::jwt_locations() const {
  // @@protoc_insertion_point(field_list:google.api.AuthProvider.jwt_locations)
  return _impl_.jwt_locations_;
}

// -------------------------------------------------------------------

// OAuthRequirements

// string canonical_scopes = 1;
inline void OAuthRequirements::clear_canonical_scopes() {
  _impl_.canonical_scopes_.ClearToEmpty();
}
inline const std::string& OAuthRequirements::canonical_scopes() const {
  // @@protoc_insertion_point(field_get:google.api.OAuthRequirements.canonical_scopes)
  return _internal_canonical_scopes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OAuthRequirements::set_canonical_scopes(ArgT0&& arg0, ArgT... args) {
 
 _impl_.canonical_scopes_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.OAuthRequirements.canonical_scopes)
}
inline std::string* OAuthRequirements::mutable_canonical_scopes() {
  std::string* _s = _internal_mutable_canonical_scopes();
  // @@protoc_insertion_point(field_mutable:google.api.OAuthRequirements.canonical_scopes)
  return _s;
}
inline const std::string& OAuthRequirements::_internal_canonical_scopes() const {
  return _impl_.canonical_scopes_.Get();
}
inline void OAuthRequirements::_internal_set_canonical_scopes(const std::string& value) {
  
  _impl_.canonical_scopes_.Set(value, GetArenaForAllocation());
}
inline std::string* OAuthRequirements::_internal_mutable_canonical_scopes() {
  
  return _impl_.canonical_scopes_.Mutable(GetArenaForAllocation());
}
inline std::string* OAuthRequirements::release_canonical_scopes() {
  // @@protoc_insertion_point(field_release:google.api.OAuthRequirements.canonical_scopes)
  return _impl_.canonical_scopes_.Release();
}
inline void OAuthRequirements::set_allocated_canonical_scopes(std::string* canonical_scopes) {
  if (canonical_scopes != nullptr) {
    
  } else {
    
  }
  _impl_.canonical_scopes_.SetAllocated(canonical_scopes, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.canonical_scopes_.IsDefault()) {
    _impl_.canonical_scopes_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.OAuthRequirements.canonical_scopes)
}

// -------------------------------------------------------------------

// AuthRequirement

// string provider_id = 1;
inline void AuthRequirement::clear_provider_id() {
  _impl_.provider_id_.ClearToEmpty();
}
inline const std::string& AuthRequirement::provider_id() const {
  // @@protoc_insertion_point(field_get:google.api.AuthRequirement.provider_id)
  return _internal_provider_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AuthRequirement::set_provider_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.provider_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.AuthRequirement.provider_id)
}
inline std::string* AuthRequirement::mutable_provider_id() {
  std::string* _s = _internal_mutable_provider_id();
  // @@protoc_insertion_point(field_mutable:google.api.AuthRequirement.provider_id)
  return _s;
}
inline const std::string& AuthRequirement::_internal_provider_id() const {
  return _impl_.provider_id_.Get();
}
inline void AuthRequirement::_internal_set_provider_id(const std::string& value) {
  
  _impl_.provider_id_.Set(value, GetArenaForAllocation());
}
inline std::string* AuthRequirement::_internal_mutable_provider_id() {
  
  return _impl_.provider_id_.Mutable(GetArenaForAllocation());
}
inline std::string* AuthRequirement::release_provider_id() {
  // @@protoc_insertion_point(field_release:google.api.AuthRequirement.provider_id)
  return _impl_.provider_id_.Release();
}
inline void AuthRequirement::set_allocated_provider_id(std::string* provider_id) {
  if (provider_id != nullptr) {
    
  } else {
    
  }
  _impl_.provider_id_.SetAllocated(provider_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.provider_id_.IsDefault()) {
    _impl_.provider_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.AuthRequirement.provider_id)
}

// string audiences = 2;
inline void AuthRequirement::clear_audiences() {
  _impl_.audiences_.ClearToEmpty();
}
inline const std::string& AuthRequirement::audiences() const {
  // @@protoc_insertion_point(field_get:google.api.AuthRequirement.audiences)
  return _internal_audiences();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AuthRequirement::set_audiences(ArgT0&& arg0, ArgT... args) {
 
 _impl_.audiences_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.AuthRequirement.audiences)
}
inline std::string* AuthRequirement::mutable_audiences() {
  std::string* _s = _internal_mutable_audiences();
  // @@protoc_insertion_point(field_mutable:google.api.AuthRequirement.audiences)
  return _s;
}
inline const std::string& AuthRequirement::_internal_audiences() const {
  return _impl_.audiences_.Get();
}
inline void AuthRequirement::_internal_set_audiences(const std::string& value) {
  
  _impl_.audiences_.Set(value, GetArenaForAllocation());
}
inline std::string* AuthRequirement::_internal_mutable_audiences() {
  
  return _impl_.audiences_.Mutable(GetArenaForAllocation());
}
inline std::string* AuthRequirement::release_audiences() {
  // @@protoc_insertion_point(field_release:google.api.AuthRequirement.audiences)
  return _impl_.audiences_.Release();
}
inline void AuthRequirement::set_allocated_audiences(std::string* audiences) {
  if (audiences != nullptr) {
    
  } else {
    
  }
  _impl_.audiences_.SetAllocated(audiences, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.audiences_.IsDefault()) {
    _impl_.audiences_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.AuthRequirement.audiences)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace api
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fauth_2eproto
