// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/monitored_resource.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fmonitored_5fresource_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fmonitored_5fresource_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/label.pb.h"
#include "google/api/launch_stage.pb.h"
#include <google/protobuf/struct.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fapi_2fmonitored_5fresource_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fapi_2fmonitored_5fresource_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fapi_2fmonitored_5fresource_2eproto;
namespace google {
namespace api {
class MonitoredResource;
struct MonitoredResourceDefaultTypeInternal;
extern MonitoredResourceDefaultTypeInternal _MonitoredResource_default_instance_;
class MonitoredResourceDescriptor;
struct MonitoredResourceDescriptorDefaultTypeInternal;
extern MonitoredResourceDescriptorDefaultTypeInternal _MonitoredResourceDescriptor_default_instance_;
class MonitoredResourceMetadata;
struct MonitoredResourceMetadataDefaultTypeInternal;
extern MonitoredResourceMetadataDefaultTypeInternal _MonitoredResourceMetadata_default_instance_;
class MonitoredResourceMetadata_UserLabelsEntry_DoNotUse;
struct MonitoredResourceMetadata_UserLabelsEntry_DoNotUseDefaultTypeInternal;
extern MonitoredResourceMetadata_UserLabelsEntry_DoNotUseDefaultTypeInternal _MonitoredResourceMetadata_UserLabelsEntry_DoNotUse_default_instance_;
class MonitoredResource_LabelsEntry_DoNotUse;
struct MonitoredResource_LabelsEntry_DoNotUseDefaultTypeInternal;
extern MonitoredResource_LabelsEntry_DoNotUseDefaultTypeInternal _MonitoredResource_LabelsEntry_DoNotUse_default_instance_;
}  // namespace api
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::api::MonitoredResource* Arena::CreateMaybeMessage<::google::api::MonitoredResource>(Arena*);
template<> ::google::api::MonitoredResourceDescriptor* Arena::CreateMaybeMessage<::google::api::MonitoredResourceDescriptor>(Arena*);
template<> ::google::api::MonitoredResourceMetadata* Arena::CreateMaybeMessage<::google::api::MonitoredResourceMetadata>(Arena*);
template<> ::google::api::MonitoredResourceMetadata_UserLabelsEntry_DoNotUse* Arena::CreateMaybeMessage<::google::api::MonitoredResourceMetadata_UserLabelsEntry_DoNotUse>(Arena*);
template<> ::google::api::MonitoredResource_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage<::google::api::MonitoredResource_LabelsEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace api {

// ===================================================================

class MonitoredResourceDescriptor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.MonitoredResourceDescriptor) */ {
 public:
  inline MonitoredResourceDescriptor() : MonitoredResourceDescriptor(nullptr) {}
  ~MonitoredResourceDescriptor() override;
  explicit PROTOBUF_CONSTEXPR MonitoredResourceDescriptor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MonitoredResourceDescriptor(const MonitoredResourceDescriptor& from);
  MonitoredResourceDescriptor(MonitoredResourceDescriptor&& from) noexcept
    : MonitoredResourceDescriptor() {
    *this = ::std::move(from);
  }

  inline MonitoredResourceDescriptor& operator=(const MonitoredResourceDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline MonitoredResourceDescriptor& operator=(MonitoredResourceDescriptor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MonitoredResourceDescriptor& default_instance() {
    return *internal_default_instance();
  }
  static inline const MonitoredResourceDescriptor* internal_default_instance() {
    return reinterpret_cast<const MonitoredResourceDescriptor*>(
               &_MonitoredResourceDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MonitoredResourceDescriptor& a, MonitoredResourceDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(MonitoredResourceDescriptor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MonitoredResourceDescriptor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MonitoredResourceDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MonitoredResourceDescriptor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MonitoredResourceDescriptor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MonitoredResourceDescriptor& from) {
    MonitoredResourceDescriptor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MonitoredResourceDescriptor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.MonitoredResourceDescriptor";
  }
  protected:
  explicit MonitoredResourceDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 4,
    kTypeFieldNumber = 1,
    kDisplayNameFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kNameFieldNumber = 5,
    kLaunchStageFieldNumber = 7,
  };
  // repeated .google.api.LabelDescriptor labels = 4;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  ::google::api::LabelDescriptor* mutable_labels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::LabelDescriptor >*
      mutable_labels();
  private:
  const ::google::api::LabelDescriptor& _internal_labels(int index) const;
  ::google::api::LabelDescriptor* _internal_add_labels();
  public:
  const ::google::api::LabelDescriptor& labels(int index) const;
  ::google::api::LabelDescriptor* add_labels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::LabelDescriptor >&
      labels() const;

  // string type = 1;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string display_name = 2;
  void clear_display_name();
  const std::string& display_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_display_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_display_name();
  PROTOBUF_NODISCARD std::string* release_display_name();
  void set_allocated_display_name(std::string* display_name);
  private:
  const std::string& _internal_display_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_display_name(const std::string& value);
  std::string* _internal_mutable_display_name();
  public:

  // string description = 3;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string name = 5;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.api.LaunchStage launch_stage = 7;
  void clear_launch_stage();
  ::google::api::LaunchStage launch_stage() const;
  void set_launch_stage(::google::api::LaunchStage value);
  private:
  ::google::api::LaunchStage _internal_launch_stage() const;
  void _internal_set_launch_stage(::google::api::LaunchStage value);
  public:

  // @@protoc_insertion_point(class_scope:google.api.MonitoredResourceDescriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::LabelDescriptor > labels_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int launch_stage_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fmonitored_5fresource_2eproto;
};
// -------------------------------------------------------------------

class MonitoredResource_LabelsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MonitoredResource_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MonitoredResource_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  MonitoredResource_LabelsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR MonitoredResource_LabelsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit MonitoredResource_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const MonitoredResource_LabelsEntry_DoNotUse& other);
  static const MonitoredResource_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const MonitoredResource_LabelsEntry_DoNotUse*>(&_MonitoredResource_LabelsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.api.MonitoredResource.LabelsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.api.MonitoredResource.LabelsEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fapi_2fmonitored_5fresource_2eproto;
};

// -------------------------------------------------------------------

class MonitoredResource final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.MonitoredResource) */ {
 public:
  inline MonitoredResource() : MonitoredResource(nullptr) {}
  ~MonitoredResource() override;
  explicit PROTOBUF_CONSTEXPR MonitoredResource(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MonitoredResource(const MonitoredResource& from);
  MonitoredResource(MonitoredResource&& from) noexcept
    : MonitoredResource() {
    *this = ::std::move(from);
  }

  inline MonitoredResource& operator=(const MonitoredResource& from) {
    CopyFrom(from);
    return *this;
  }
  inline MonitoredResource& operator=(MonitoredResource&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MonitoredResource& default_instance() {
    return *internal_default_instance();
  }
  static inline const MonitoredResource* internal_default_instance() {
    return reinterpret_cast<const MonitoredResource*>(
               &_MonitoredResource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MonitoredResource& a, MonitoredResource& b) {
    a.Swap(&b);
  }
  inline void Swap(MonitoredResource* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MonitoredResource* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MonitoredResource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MonitoredResource>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MonitoredResource& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MonitoredResource& from) {
    MonitoredResource::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MonitoredResource* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.MonitoredResource";
  }
  protected:
  explicit MonitoredResource(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // map<string, string> labels = 2;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_labels();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_labels();

  // string type = 1;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // @@protoc_insertion_point(class_scope:google.api.MonitoredResource)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        MonitoredResource_LabelsEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> labels_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fmonitored_5fresource_2eproto;
};
// -------------------------------------------------------------------

class MonitoredResourceMetadata_UserLabelsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MonitoredResourceMetadata_UserLabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MonitoredResourceMetadata_UserLabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  MonitoredResourceMetadata_UserLabelsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR MonitoredResourceMetadata_UserLabelsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit MonitoredResourceMetadata_UserLabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const MonitoredResourceMetadata_UserLabelsEntry_DoNotUse& other);
  static const MonitoredResourceMetadata_UserLabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const MonitoredResourceMetadata_UserLabelsEntry_DoNotUse*>(&_MonitoredResourceMetadata_UserLabelsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.api.MonitoredResourceMetadata.UserLabelsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.api.MonitoredResourceMetadata.UserLabelsEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fapi_2fmonitored_5fresource_2eproto;
};

// -------------------------------------------------------------------

class MonitoredResourceMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.MonitoredResourceMetadata) */ {
 public:
  inline MonitoredResourceMetadata() : MonitoredResourceMetadata(nullptr) {}
  ~MonitoredResourceMetadata() override;
  explicit PROTOBUF_CONSTEXPR MonitoredResourceMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MonitoredResourceMetadata(const MonitoredResourceMetadata& from);
  MonitoredResourceMetadata(MonitoredResourceMetadata&& from) noexcept
    : MonitoredResourceMetadata() {
    *this = ::std::move(from);
  }

  inline MonitoredResourceMetadata& operator=(const MonitoredResourceMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline MonitoredResourceMetadata& operator=(MonitoredResourceMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MonitoredResourceMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const MonitoredResourceMetadata* internal_default_instance() {
    return reinterpret_cast<const MonitoredResourceMetadata*>(
               &_MonitoredResourceMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MonitoredResourceMetadata& a, MonitoredResourceMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(MonitoredResourceMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MonitoredResourceMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MonitoredResourceMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MonitoredResourceMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MonitoredResourceMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MonitoredResourceMetadata& from) {
    MonitoredResourceMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MonitoredResourceMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.MonitoredResourceMetadata";
  }
  protected:
  explicit MonitoredResourceMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kUserLabelsFieldNumber = 2,
    kSystemLabelsFieldNumber = 1,
  };
  // map<string, string> user_labels = 2;
  int user_labels_size() const;
  private:
  int _internal_user_labels_size() const;
  public:
  void clear_user_labels();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_user_labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_user_labels();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      user_labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_user_labels();

  // .google.protobuf.Struct system_labels = 1;
  bool has_system_labels() const;
  private:
  bool _internal_has_system_labels() const;
  public:
  void clear_system_labels();
  const ::PROTOBUF_NAMESPACE_ID::Struct& system_labels() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_system_labels();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_system_labels();
  void set_allocated_system_labels(::PROTOBUF_NAMESPACE_ID::Struct* system_labels);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_system_labels() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_system_labels();
  public:
  void unsafe_arena_set_allocated_system_labels(
      ::PROTOBUF_NAMESPACE_ID::Struct* system_labels);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_system_labels();

  // @@protoc_insertion_point(class_scope:google.api.MonitoredResourceMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        MonitoredResourceMetadata_UserLabelsEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> user_labels_;
    ::PROTOBUF_NAMESPACE_ID::Struct* system_labels_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fmonitored_5fresource_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MonitoredResourceDescriptor

// string name = 5;
inline void MonitoredResourceDescriptor::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& MonitoredResourceDescriptor::name() const {
  // @@protoc_insertion_point(field_get:google.api.MonitoredResourceDescriptor.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MonitoredResourceDescriptor::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.MonitoredResourceDescriptor.name)
}
inline std::string* MonitoredResourceDescriptor::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.api.MonitoredResourceDescriptor.name)
  return _s;
}
inline const std::string& MonitoredResourceDescriptor::_internal_name() const {
  return _impl_.name_.Get();
}
inline void MonitoredResourceDescriptor::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* MonitoredResourceDescriptor::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* MonitoredResourceDescriptor::release_name() {
  // @@protoc_insertion_point(field_release:google.api.MonitoredResourceDescriptor.name)
  return _impl_.name_.Release();
}
inline void MonitoredResourceDescriptor::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.MonitoredResourceDescriptor.name)
}

// string type = 1;
inline void MonitoredResourceDescriptor::clear_type() {
  _impl_.type_.ClearToEmpty();
}
inline const std::string& MonitoredResourceDescriptor::type() const {
  // @@protoc_insertion_point(field_get:google.api.MonitoredResourceDescriptor.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MonitoredResourceDescriptor::set_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.MonitoredResourceDescriptor.type)
}
inline std::string* MonitoredResourceDescriptor::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:google.api.MonitoredResourceDescriptor.type)
  return _s;
}
inline const std::string& MonitoredResourceDescriptor::_internal_type() const {
  return _impl_.type_.Get();
}
inline void MonitoredResourceDescriptor::_internal_set_type(const std::string& value) {
  
  _impl_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* MonitoredResourceDescriptor::_internal_mutable_type() {
  
  return _impl_.type_.Mutable(GetArenaForAllocation());
}
inline std::string* MonitoredResourceDescriptor::release_type() {
  // @@protoc_insertion_point(field_release:google.api.MonitoredResourceDescriptor.type)
  return _impl_.type_.Release();
}
inline void MonitoredResourceDescriptor::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  _impl_.type_.SetAllocated(type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.MonitoredResourceDescriptor.type)
}

// string display_name = 2;
inline void MonitoredResourceDescriptor::clear_display_name() {
  _impl_.display_name_.ClearToEmpty();
}
inline const std::string& MonitoredResourceDescriptor::display_name() const {
  // @@protoc_insertion_point(field_get:google.api.MonitoredResourceDescriptor.display_name)
  return _internal_display_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MonitoredResourceDescriptor::set_display_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.display_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.MonitoredResourceDescriptor.display_name)
}
inline std::string* MonitoredResourceDescriptor::mutable_display_name() {
  std::string* _s = _internal_mutable_display_name();
  // @@protoc_insertion_point(field_mutable:google.api.MonitoredResourceDescriptor.display_name)
  return _s;
}
inline const std::string& MonitoredResourceDescriptor::_internal_display_name() const {
  return _impl_.display_name_.Get();
}
inline void MonitoredResourceDescriptor::_internal_set_display_name(const std::string& value) {
  
  _impl_.display_name_.Set(value, GetArenaForAllocation());
}
inline std::string* MonitoredResourceDescriptor::_internal_mutable_display_name() {
  
  return _impl_.display_name_.Mutable(GetArenaForAllocation());
}
inline std::string* MonitoredResourceDescriptor::release_display_name() {
  // @@protoc_insertion_point(field_release:google.api.MonitoredResourceDescriptor.display_name)
  return _impl_.display_name_.Release();
}
inline void MonitoredResourceDescriptor::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    
  } else {
    
  }
  _impl_.display_name_.SetAllocated(display_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.display_name_.IsDefault()) {
    _impl_.display_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.MonitoredResourceDescriptor.display_name)
}

// string description = 3;
inline void MonitoredResourceDescriptor::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& MonitoredResourceDescriptor::description() const {
  // @@protoc_insertion_point(field_get:google.api.MonitoredResourceDescriptor.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MonitoredResourceDescriptor::set_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.MonitoredResourceDescriptor.description)
}
inline std::string* MonitoredResourceDescriptor::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:google.api.MonitoredResourceDescriptor.description)
  return _s;
}
inline const std::string& MonitoredResourceDescriptor::_internal_description() const {
  return _impl_.description_.Get();
}
inline void MonitoredResourceDescriptor::_internal_set_description(const std::string& value) {
  
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* MonitoredResourceDescriptor::_internal_mutable_description() {
  
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* MonitoredResourceDescriptor::release_description() {
  // @@protoc_insertion_point(field_release:google.api.MonitoredResourceDescriptor.description)
  return _impl_.description_.Release();
}
inline void MonitoredResourceDescriptor::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.MonitoredResourceDescriptor.description)
}

// repeated .google.api.LabelDescriptor labels = 4;
inline int MonitoredResourceDescriptor::_internal_labels_size() const {
  return _impl_.labels_.size();
}
inline int MonitoredResourceDescriptor::labels_size() const {
  return _internal_labels_size();
}
inline ::google::api::LabelDescriptor* MonitoredResourceDescriptor::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.MonitoredResourceDescriptor.labels)
  return _impl_.labels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::LabelDescriptor >*
MonitoredResourceDescriptor::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:google.api.MonitoredResourceDescriptor.labels)
  return &_impl_.labels_;
}
inline const ::google::api::LabelDescriptor& MonitoredResourceDescriptor::_internal_labels(int index) const {
  return _impl_.labels_.Get(index);
}
inline const ::google::api::LabelDescriptor& MonitoredResourceDescriptor::labels(int index) const {
  // @@protoc_insertion_point(field_get:google.api.MonitoredResourceDescriptor.labels)
  return _internal_labels(index);
}
inline ::google::api::LabelDescriptor* MonitoredResourceDescriptor::_internal_add_labels() {
  return _impl_.labels_.Add();
}
inline ::google::api::LabelDescriptor* MonitoredResourceDescriptor::add_labels() {
  ::google::api::LabelDescriptor* _add = _internal_add_labels();
  // @@protoc_insertion_point(field_add:google.api.MonitoredResourceDescriptor.labels)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::LabelDescriptor >&
MonitoredResourceDescriptor::labels() const {
  // @@protoc_insertion_point(field_list:google.api.MonitoredResourceDescriptor.labels)
  return _impl_.labels_;
}

// .google.api.LaunchStage launch_stage = 7;
inline void MonitoredResourceDescriptor::clear_launch_stage() {
  _impl_.launch_stage_ = 0;
}
inline ::google::api::LaunchStage MonitoredResourceDescriptor::_internal_launch_stage() const {
  return static_cast< ::google::api::LaunchStage >(_impl_.launch_stage_);
}
inline ::google::api::LaunchStage MonitoredResourceDescriptor::launch_stage() const {
  // @@protoc_insertion_point(field_get:google.api.MonitoredResourceDescriptor.launch_stage)
  return _internal_launch_stage();
}
inline void MonitoredResourceDescriptor::_internal_set_launch_stage(::google::api::LaunchStage value) {
  
  _impl_.launch_stage_ = value;
}
inline void MonitoredResourceDescriptor::set_launch_stage(::google::api::LaunchStage value) {
  _internal_set_launch_stage(value);
  // @@protoc_insertion_point(field_set:google.api.MonitoredResourceDescriptor.launch_stage)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// MonitoredResource

// string type = 1;
inline void MonitoredResource::clear_type() {
  _impl_.type_.ClearToEmpty();
}
inline const std::string& MonitoredResource::type() const {
  // @@protoc_insertion_point(field_get:google.api.MonitoredResource.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MonitoredResource::set_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.MonitoredResource.type)
}
inline std::string* MonitoredResource::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:google.api.MonitoredResource.type)
  return _s;
}
inline const std::string& MonitoredResource::_internal_type() const {
  return _impl_.type_.Get();
}
inline void MonitoredResource::_internal_set_type(const std::string& value) {
  
  _impl_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* MonitoredResource::_internal_mutable_type() {
  
  return _impl_.type_.Mutable(GetArenaForAllocation());
}
inline std::string* MonitoredResource::release_type() {
  // @@protoc_insertion_point(field_release:google.api.MonitoredResource.type)
  return _impl_.type_.Release();
}
inline void MonitoredResource::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  _impl_.type_.SetAllocated(type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.MonitoredResource.type)
}

// map<string, string> labels = 2;
inline int MonitoredResource::_internal_labels_size() const {
  return _impl_.labels_.size();
}
inline int MonitoredResource::labels_size() const {
  return _internal_labels_size();
}
inline void MonitoredResource::clear_labels() {
  _impl_.labels_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
MonitoredResource::_internal_labels() const {
  return _impl_.labels_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
MonitoredResource::labels() const {
  // @@protoc_insertion_point(field_map:google.api.MonitoredResource.labels)
  return _internal_labels();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
MonitoredResource::_internal_mutable_labels() {
  return _impl_.labels_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
MonitoredResource::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:google.api.MonitoredResource.labels)
  return _internal_mutable_labels();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// MonitoredResourceMetadata

// .google.protobuf.Struct system_labels = 1;
inline bool MonitoredResourceMetadata::_internal_has_system_labels() const {
  return this != internal_default_instance() && _impl_.system_labels_ != nullptr;
}
inline bool MonitoredResourceMetadata::has_system_labels() const {
  return _internal_has_system_labels();
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& MonitoredResourceMetadata::_internal_system_labels() const {
  const ::PROTOBUF_NAMESPACE_ID::Struct* p = _impl_.system_labels_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Struct&>(
      ::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& MonitoredResourceMetadata::system_labels() const {
  // @@protoc_insertion_point(field_get:google.api.MonitoredResourceMetadata.system_labels)
  return _internal_system_labels();
}
inline void MonitoredResourceMetadata::unsafe_arena_set_allocated_system_labels(
    ::PROTOBUF_NAMESPACE_ID::Struct* system_labels) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.system_labels_);
  }
  _impl_.system_labels_ = system_labels;
  if (system_labels) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.MonitoredResourceMetadata.system_labels)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* MonitoredResourceMetadata::release_system_labels() {
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = _impl_.system_labels_;
  _impl_.system_labels_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* MonitoredResourceMetadata::unsafe_arena_release_system_labels() {
  // @@protoc_insertion_point(field_release:google.api.MonitoredResourceMetadata.system_labels)
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = _impl_.system_labels_;
  _impl_.system_labels_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* MonitoredResourceMetadata::_internal_mutable_system_labels() {
  
  if (_impl_.system_labels_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    _impl_.system_labels_ = p;
  }
  return _impl_.system_labels_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* MonitoredResourceMetadata::mutable_system_labels() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_system_labels();
  // @@protoc_insertion_point(field_mutable:google.api.MonitoredResourceMetadata.system_labels)
  return _msg;
}
inline void MonitoredResourceMetadata::set_allocated_system_labels(::PROTOBUF_NAMESPACE_ID::Struct* system_labels) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.system_labels_);
  }
  if (system_labels) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(system_labels));
    if (message_arena != submessage_arena) {
      system_labels = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, system_labels, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.system_labels_ = system_labels;
  // @@protoc_insertion_point(field_set_allocated:google.api.MonitoredResourceMetadata.system_labels)
}

// map<string, string> user_labels = 2;
inline int MonitoredResourceMetadata::_internal_user_labels_size() const {
  return _impl_.user_labels_.size();
}
inline int MonitoredResourceMetadata::user_labels_size() const {
  return _internal_user_labels_size();
}
inline void MonitoredResourceMetadata::clear_user_labels() {
  _impl_.user_labels_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
MonitoredResourceMetadata::_internal_user_labels() const {
  return _impl_.user_labels_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
MonitoredResourceMetadata::user_labels() const {
  // @@protoc_insertion_point(field_map:google.api.MonitoredResourceMetadata.user_labels)
  return _internal_user_labels();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
MonitoredResourceMetadata::_internal_mutable_user_labels() {
  return _impl_.user_labels_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
MonitoredResourceMetadata::mutable_user_labels() {
  // @@protoc_insertion_point(field_mutable_map:google.api.MonitoredResourceMetadata.user_labels)
  return _internal_mutable_user_labels();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace api
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fmonitored_5fresource_2eproto
