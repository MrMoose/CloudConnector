// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/iam/v1/policy.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fiam_2fv1_2fpolicy_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fiam_2fv1_2fpolicy_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/type/expr.pb.h"
#include "google/api/annotations.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fiam_2fv1_2fpolicy_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fiam_2fv1_2fpolicy_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fiam_2fv1_2fpolicy_2eproto;
namespace google {
namespace iam {
namespace v1 {
class AuditConfigDelta;
class AuditConfigDeltaDefaultTypeInternal;
extern AuditConfigDeltaDefaultTypeInternal _AuditConfigDelta_default_instance_;
class Binding;
class BindingDefaultTypeInternal;
extern BindingDefaultTypeInternal _Binding_default_instance_;
class BindingDelta;
class BindingDeltaDefaultTypeInternal;
extern BindingDeltaDefaultTypeInternal _BindingDelta_default_instance_;
class Policy;
class PolicyDefaultTypeInternal;
extern PolicyDefaultTypeInternal _Policy_default_instance_;
class PolicyDelta;
class PolicyDeltaDefaultTypeInternal;
extern PolicyDeltaDefaultTypeInternal _PolicyDelta_default_instance_;
}  // namespace v1
}  // namespace iam
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::iam::v1::AuditConfigDelta* Arena::CreateMaybeMessage<::google::iam::v1::AuditConfigDelta>(Arena*);
template<> ::google::iam::v1::Binding* Arena::CreateMaybeMessage<::google::iam::v1::Binding>(Arena*);
template<> ::google::iam::v1::BindingDelta* Arena::CreateMaybeMessage<::google::iam::v1::BindingDelta>(Arena*);
template<> ::google::iam::v1::Policy* Arena::CreateMaybeMessage<::google::iam::v1::Policy>(Arena*);
template<> ::google::iam::v1::PolicyDelta* Arena::CreateMaybeMessage<::google::iam::v1::PolicyDelta>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace iam {
namespace v1 {

enum BindingDelta_Action : int {
  BindingDelta_Action_ACTION_UNSPECIFIED = 0,
  BindingDelta_Action_ADD = 1,
  BindingDelta_Action_REMOVE = 2,
  BindingDelta_Action_BindingDelta_Action_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BindingDelta_Action_BindingDelta_Action_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BindingDelta_Action_IsValid(int value);
constexpr BindingDelta_Action BindingDelta_Action_Action_MIN = BindingDelta_Action_ACTION_UNSPECIFIED;
constexpr BindingDelta_Action BindingDelta_Action_Action_MAX = BindingDelta_Action_REMOVE;
constexpr int BindingDelta_Action_Action_ARRAYSIZE = BindingDelta_Action_Action_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BindingDelta_Action_descriptor();
template<typename T>
inline const std::string& BindingDelta_Action_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BindingDelta_Action>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BindingDelta_Action_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BindingDelta_Action_descriptor(), enum_t_value);
}
inline bool BindingDelta_Action_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BindingDelta_Action* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BindingDelta_Action>(
    BindingDelta_Action_descriptor(), name, value);
}
enum AuditConfigDelta_Action : int {
  AuditConfigDelta_Action_ACTION_UNSPECIFIED = 0,
  AuditConfigDelta_Action_ADD = 1,
  AuditConfigDelta_Action_REMOVE = 2,
  AuditConfigDelta_Action_AuditConfigDelta_Action_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AuditConfigDelta_Action_AuditConfigDelta_Action_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AuditConfigDelta_Action_IsValid(int value);
constexpr AuditConfigDelta_Action AuditConfigDelta_Action_Action_MIN = AuditConfigDelta_Action_ACTION_UNSPECIFIED;
constexpr AuditConfigDelta_Action AuditConfigDelta_Action_Action_MAX = AuditConfigDelta_Action_REMOVE;
constexpr int AuditConfigDelta_Action_Action_ARRAYSIZE = AuditConfigDelta_Action_Action_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AuditConfigDelta_Action_descriptor();
template<typename T>
inline const std::string& AuditConfigDelta_Action_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AuditConfigDelta_Action>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AuditConfigDelta_Action_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AuditConfigDelta_Action_descriptor(), enum_t_value);
}
inline bool AuditConfigDelta_Action_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AuditConfigDelta_Action* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AuditConfigDelta_Action>(
    AuditConfigDelta_Action_descriptor(), name, value);
}
// ===================================================================

class Policy PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.iam.v1.Policy) */ {
 public:
  inline Policy() : Policy(nullptr) {}
  virtual ~Policy();

  Policy(const Policy& from);
  Policy(Policy&& from) noexcept
    : Policy() {
    *this = ::std::move(from);
  }

  inline Policy& operator=(const Policy& from) {
    CopyFrom(from);
    return *this;
  }
  inline Policy& operator=(Policy&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Policy& default_instance();

  static inline const Policy* internal_default_instance() {
    return reinterpret_cast<const Policy*>(
               &_Policy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Policy& a, Policy& b) {
    a.Swap(&b);
  }
  inline void Swap(Policy* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Policy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Policy* New() const final {
    return CreateMaybeMessage<Policy>(nullptr);
  }

  Policy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Policy>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Policy& from);
  void MergeFrom(const Policy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Policy* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.iam.v1.Policy";
  }
  protected:
  explicit Policy(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fiam_2fv1_2fpolicy_2eproto);
    return ::descriptor_table_google_2fiam_2fv1_2fpolicy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBindingsFieldNumber = 4,
    kEtagFieldNumber = 3,
    kVersionFieldNumber = 1,
  };
  // repeated .google.iam.v1.Binding bindings = 4;
  int bindings_size() const;
  private:
  int _internal_bindings_size() const;
  public:
  void clear_bindings();
  ::google::iam::v1::Binding* mutable_bindings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::iam::v1::Binding >*
      mutable_bindings();
  private:
  const ::google::iam::v1::Binding& _internal_bindings(int index) const;
  ::google::iam::v1::Binding* _internal_add_bindings();
  public:
  const ::google::iam::v1::Binding& bindings(int index) const;
  ::google::iam::v1::Binding* add_bindings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::iam::v1::Binding >&
      bindings() const;

  // bytes etag = 3;
  void clear_etag();
  const std::string& etag() const;
  void set_etag(const std::string& value);
  void set_etag(std::string&& value);
  void set_etag(const char* value);
  void set_etag(const void* value, size_t size);
  std::string* mutable_etag();
  std::string* release_etag();
  void set_allocated_etag(std::string* etag);
  private:
  const std::string& _internal_etag() const;
  void _internal_set_etag(const std::string& value);
  std::string* _internal_mutable_etag();
  public:

  // int32 version = 1;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:google.iam.v1.Policy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::iam::v1::Binding > bindings_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr etag_;
  ::PROTOBUF_NAMESPACE_ID::int32 version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fiam_2fv1_2fpolicy_2eproto;
};
// -------------------------------------------------------------------

class Binding PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.iam.v1.Binding) */ {
 public:
  inline Binding() : Binding(nullptr) {}
  virtual ~Binding();

  Binding(const Binding& from);
  Binding(Binding&& from) noexcept
    : Binding() {
    *this = ::std::move(from);
  }

  inline Binding& operator=(const Binding& from) {
    CopyFrom(from);
    return *this;
  }
  inline Binding& operator=(Binding&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Binding& default_instance();

  static inline const Binding* internal_default_instance() {
    return reinterpret_cast<const Binding*>(
               &_Binding_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Binding& a, Binding& b) {
    a.Swap(&b);
  }
  inline void Swap(Binding* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Binding* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Binding* New() const final {
    return CreateMaybeMessage<Binding>(nullptr);
  }

  Binding* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Binding>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Binding& from);
  void MergeFrom(const Binding& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Binding* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.iam.v1.Binding";
  }
  protected:
  explicit Binding(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fiam_2fv1_2fpolicy_2eproto);
    return ::descriptor_table_google_2fiam_2fv1_2fpolicy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMembersFieldNumber = 2,
    kRoleFieldNumber = 1,
    kConditionFieldNumber = 3,
  };
  // repeated string members = 2;
  int members_size() const;
  private:
  int _internal_members_size() const;
  public:
  void clear_members();
  const std::string& members(int index) const;
  std::string* mutable_members(int index);
  void set_members(int index, const std::string& value);
  void set_members(int index, std::string&& value);
  void set_members(int index, const char* value);
  void set_members(int index, const char* value, size_t size);
  std::string* add_members();
  void add_members(const std::string& value);
  void add_members(std::string&& value);
  void add_members(const char* value);
  void add_members(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& members() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_members();
  private:
  const std::string& _internal_members(int index) const;
  std::string* _internal_add_members();
  public:

  // string role = 1;
  void clear_role();
  const std::string& role() const;
  void set_role(const std::string& value);
  void set_role(std::string&& value);
  void set_role(const char* value);
  void set_role(const char* value, size_t size);
  std::string* mutable_role();
  std::string* release_role();
  void set_allocated_role(std::string* role);
  private:
  const std::string& _internal_role() const;
  void _internal_set_role(const std::string& value);
  std::string* _internal_mutable_role();
  public:

  // .google.type.Expr condition = 3;
  bool has_condition() const;
  private:
  bool _internal_has_condition() const;
  public:
  void clear_condition();
  const ::google::type::Expr& condition() const;
  ::google::type::Expr* release_condition();
  ::google::type::Expr* mutable_condition();
  void set_allocated_condition(::google::type::Expr* condition);
  private:
  const ::google::type::Expr& _internal_condition() const;
  ::google::type::Expr* _internal_mutable_condition();
  public:
  void unsafe_arena_set_allocated_condition(
      ::google::type::Expr* condition);
  ::google::type::Expr* unsafe_arena_release_condition();

  // @@protoc_insertion_point(class_scope:google.iam.v1.Binding)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> members_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr role_;
  ::google::type::Expr* condition_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fiam_2fv1_2fpolicy_2eproto;
};
// -------------------------------------------------------------------

class PolicyDelta PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.iam.v1.PolicyDelta) */ {
 public:
  inline PolicyDelta() : PolicyDelta(nullptr) {}
  virtual ~PolicyDelta();

  PolicyDelta(const PolicyDelta& from);
  PolicyDelta(PolicyDelta&& from) noexcept
    : PolicyDelta() {
    *this = ::std::move(from);
  }

  inline PolicyDelta& operator=(const PolicyDelta& from) {
    CopyFrom(from);
    return *this;
  }
  inline PolicyDelta& operator=(PolicyDelta&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PolicyDelta& default_instance();

  static inline const PolicyDelta* internal_default_instance() {
    return reinterpret_cast<const PolicyDelta*>(
               &_PolicyDelta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PolicyDelta& a, PolicyDelta& b) {
    a.Swap(&b);
  }
  inline void Swap(PolicyDelta* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PolicyDelta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PolicyDelta* New() const final {
    return CreateMaybeMessage<PolicyDelta>(nullptr);
  }

  PolicyDelta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PolicyDelta>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PolicyDelta& from);
  void MergeFrom(const PolicyDelta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PolicyDelta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.iam.v1.PolicyDelta";
  }
  protected:
  explicit PolicyDelta(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fiam_2fv1_2fpolicy_2eproto);
    return ::descriptor_table_google_2fiam_2fv1_2fpolicy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBindingDeltasFieldNumber = 1,
    kAuditConfigDeltasFieldNumber = 2,
  };
  // repeated .google.iam.v1.BindingDelta binding_deltas = 1;
  int binding_deltas_size() const;
  private:
  int _internal_binding_deltas_size() const;
  public:
  void clear_binding_deltas();
  ::google::iam::v1::BindingDelta* mutable_binding_deltas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::iam::v1::BindingDelta >*
      mutable_binding_deltas();
  private:
  const ::google::iam::v1::BindingDelta& _internal_binding_deltas(int index) const;
  ::google::iam::v1::BindingDelta* _internal_add_binding_deltas();
  public:
  const ::google::iam::v1::BindingDelta& binding_deltas(int index) const;
  ::google::iam::v1::BindingDelta* add_binding_deltas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::iam::v1::BindingDelta >&
      binding_deltas() const;

  // repeated .google.iam.v1.AuditConfigDelta audit_config_deltas = 2;
  int audit_config_deltas_size() const;
  private:
  int _internal_audit_config_deltas_size() const;
  public:
  void clear_audit_config_deltas();
  ::google::iam::v1::AuditConfigDelta* mutable_audit_config_deltas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::iam::v1::AuditConfigDelta >*
      mutable_audit_config_deltas();
  private:
  const ::google::iam::v1::AuditConfigDelta& _internal_audit_config_deltas(int index) const;
  ::google::iam::v1::AuditConfigDelta* _internal_add_audit_config_deltas();
  public:
  const ::google::iam::v1::AuditConfigDelta& audit_config_deltas(int index) const;
  ::google::iam::v1::AuditConfigDelta* add_audit_config_deltas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::iam::v1::AuditConfigDelta >&
      audit_config_deltas() const;

  // @@protoc_insertion_point(class_scope:google.iam.v1.PolicyDelta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::iam::v1::BindingDelta > binding_deltas_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::iam::v1::AuditConfigDelta > audit_config_deltas_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fiam_2fv1_2fpolicy_2eproto;
};
// -------------------------------------------------------------------

class BindingDelta PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.iam.v1.BindingDelta) */ {
 public:
  inline BindingDelta() : BindingDelta(nullptr) {}
  virtual ~BindingDelta();

  BindingDelta(const BindingDelta& from);
  BindingDelta(BindingDelta&& from) noexcept
    : BindingDelta() {
    *this = ::std::move(from);
  }

  inline BindingDelta& operator=(const BindingDelta& from) {
    CopyFrom(from);
    return *this;
  }
  inline BindingDelta& operator=(BindingDelta&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BindingDelta& default_instance();

  static inline const BindingDelta* internal_default_instance() {
    return reinterpret_cast<const BindingDelta*>(
               &_BindingDelta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BindingDelta& a, BindingDelta& b) {
    a.Swap(&b);
  }
  inline void Swap(BindingDelta* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BindingDelta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BindingDelta* New() const final {
    return CreateMaybeMessage<BindingDelta>(nullptr);
  }

  BindingDelta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BindingDelta>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BindingDelta& from);
  void MergeFrom(const BindingDelta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BindingDelta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.iam.v1.BindingDelta";
  }
  protected:
  explicit BindingDelta(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fiam_2fv1_2fpolicy_2eproto);
    return ::descriptor_table_google_2fiam_2fv1_2fpolicy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef BindingDelta_Action Action;
  static constexpr Action ACTION_UNSPECIFIED =
    BindingDelta_Action_ACTION_UNSPECIFIED;
  static constexpr Action ADD =
    BindingDelta_Action_ADD;
  static constexpr Action REMOVE =
    BindingDelta_Action_REMOVE;
  static inline bool Action_IsValid(int value) {
    return BindingDelta_Action_IsValid(value);
  }
  static constexpr Action Action_MIN =
    BindingDelta_Action_Action_MIN;
  static constexpr Action Action_MAX =
    BindingDelta_Action_Action_MAX;
  static constexpr int Action_ARRAYSIZE =
    BindingDelta_Action_Action_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Action_descriptor() {
    return BindingDelta_Action_descriptor();
  }
  template<typename T>
  static inline const std::string& Action_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Action>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Action_Name.");
    return BindingDelta_Action_Name(enum_t_value);
  }
  static inline bool Action_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Action* value) {
    return BindingDelta_Action_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRoleFieldNumber = 2,
    kMemberFieldNumber = 3,
    kConditionFieldNumber = 4,
    kActionFieldNumber = 1,
  };
  // string role = 2;
  void clear_role();
  const std::string& role() const;
  void set_role(const std::string& value);
  void set_role(std::string&& value);
  void set_role(const char* value);
  void set_role(const char* value, size_t size);
  std::string* mutable_role();
  std::string* release_role();
  void set_allocated_role(std::string* role);
  private:
  const std::string& _internal_role() const;
  void _internal_set_role(const std::string& value);
  std::string* _internal_mutable_role();
  public:

  // string member = 3;
  void clear_member();
  const std::string& member() const;
  void set_member(const std::string& value);
  void set_member(std::string&& value);
  void set_member(const char* value);
  void set_member(const char* value, size_t size);
  std::string* mutable_member();
  std::string* release_member();
  void set_allocated_member(std::string* member);
  private:
  const std::string& _internal_member() const;
  void _internal_set_member(const std::string& value);
  std::string* _internal_mutable_member();
  public:

  // .google.type.Expr condition = 4;
  bool has_condition() const;
  private:
  bool _internal_has_condition() const;
  public:
  void clear_condition();
  const ::google::type::Expr& condition() const;
  ::google::type::Expr* release_condition();
  ::google::type::Expr* mutable_condition();
  void set_allocated_condition(::google::type::Expr* condition);
  private:
  const ::google::type::Expr& _internal_condition() const;
  ::google::type::Expr* _internal_mutable_condition();
  public:
  void unsafe_arena_set_allocated_condition(
      ::google::type::Expr* condition);
  ::google::type::Expr* unsafe_arena_release_condition();

  // .google.iam.v1.BindingDelta.Action action = 1;
  void clear_action();
  ::google::iam::v1::BindingDelta_Action action() const;
  void set_action(::google::iam::v1::BindingDelta_Action value);
  private:
  ::google::iam::v1::BindingDelta_Action _internal_action() const;
  void _internal_set_action(::google::iam::v1::BindingDelta_Action value);
  public:

  // @@protoc_insertion_point(class_scope:google.iam.v1.BindingDelta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr role_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr member_;
  ::google::type::Expr* condition_;
  int action_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fiam_2fv1_2fpolicy_2eproto;
};
// -------------------------------------------------------------------

class AuditConfigDelta PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.iam.v1.AuditConfigDelta) */ {
 public:
  inline AuditConfigDelta() : AuditConfigDelta(nullptr) {}
  virtual ~AuditConfigDelta();

  AuditConfigDelta(const AuditConfigDelta& from);
  AuditConfigDelta(AuditConfigDelta&& from) noexcept
    : AuditConfigDelta() {
    *this = ::std::move(from);
  }

  inline AuditConfigDelta& operator=(const AuditConfigDelta& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuditConfigDelta& operator=(AuditConfigDelta&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuditConfigDelta& default_instance();

  static inline const AuditConfigDelta* internal_default_instance() {
    return reinterpret_cast<const AuditConfigDelta*>(
               &_AuditConfigDelta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AuditConfigDelta& a, AuditConfigDelta& b) {
    a.Swap(&b);
  }
  inline void Swap(AuditConfigDelta* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuditConfigDelta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuditConfigDelta* New() const final {
    return CreateMaybeMessage<AuditConfigDelta>(nullptr);
  }

  AuditConfigDelta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuditConfigDelta>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuditConfigDelta& from);
  void MergeFrom(const AuditConfigDelta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuditConfigDelta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.iam.v1.AuditConfigDelta";
  }
  protected:
  explicit AuditConfigDelta(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fiam_2fv1_2fpolicy_2eproto);
    return ::descriptor_table_google_2fiam_2fv1_2fpolicy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef AuditConfigDelta_Action Action;
  static constexpr Action ACTION_UNSPECIFIED =
    AuditConfigDelta_Action_ACTION_UNSPECIFIED;
  static constexpr Action ADD =
    AuditConfigDelta_Action_ADD;
  static constexpr Action REMOVE =
    AuditConfigDelta_Action_REMOVE;
  static inline bool Action_IsValid(int value) {
    return AuditConfigDelta_Action_IsValid(value);
  }
  static constexpr Action Action_MIN =
    AuditConfigDelta_Action_Action_MIN;
  static constexpr Action Action_MAX =
    AuditConfigDelta_Action_Action_MAX;
  static constexpr int Action_ARRAYSIZE =
    AuditConfigDelta_Action_Action_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Action_descriptor() {
    return AuditConfigDelta_Action_descriptor();
  }
  template<typename T>
  static inline const std::string& Action_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Action>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Action_Name.");
    return AuditConfigDelta_Action_Name(enum_t_value);
  }
  static inline bool Action_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Action* value) {
    return AuditConfigDelta_Action_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kServiceFieldNumber = 2,
    kExemptedMemberFieldNumber = 3,
    kLogTypeFieldNumber = 4,
    kActionFieldNumber = 1,
  };
  // string service = 2;
  void clear_service();
  const std::string& service() const;
  void set_service(const std::string& value);
  void set_service(std::string&& value);
  void set_service(const char* value);
  void set_service(const char* value, size_t size);
  std::string* mutable_service();
  std::string* release_service();
  void set_allocated_service(std::string* service);
  private:
  const std::string& _internal_service() const;
  void _internal_set_service(const std::string& value);
  std::string* _internal_mutable_service();
  public:

  // string exempted_member = 3;
  void clear_exempted_member();
  const std::string& exempted_member() const;
  void set_exempted_member(const std::string& value);
  void set_exempted_member(std::string&& value);
  void set_exempted_member(const char* value);
  void set_exempted_member(const char* value, size_t size);
  std::string* mutable_exempted_member();
  std::string* release_exempted_member();
  void set_allocated_exempted_member(std::string* exempted_member);
  private:
  const std::string& _internal_exempted_member() const;
  void _internal_set_exempted_member(const std::string& value);
  std::string* _internal_mutable_exempted_member();
  public:

  // string log_type = 4;
  void clear_log_type();
  const std::string& log_type() const;
  void set_log_type(const std::string& value);
  void set_log_type(std::string&& value);
  void set_log_type(const char* value);
  void set_log_type(const char* value, size_t size);
  std::string* mutable_log_type();
  std::string* release_log_type();
  void set_allocated_log_type(std::string* log_type);
  private:
  const std::string& _internal_log_type() const;
  void _internal_set_log_type(const std::string& value);
  std::string* _internal_mutable_log_type();
  public:

  // .google.iam.v1.AuditConfigDelta.Action action = 1;
  void clear_action();
  ::google::iam::v1::AuditConfigDelta_Action action() const;
  void set_action(::google::iam::v1::AuditConfigDelta_Action value);
  private:
  ::google::iam::v1::AuditConfigDelta_Action _internal_action() const;
  void _internal_set_action(::google::iam::v1::AuditConfigDelta_Action value);
  public:

  // @@protoc_insertion_point(class_scope:google.iam.v1.AuditConfigDelta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exempted_member_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr log_type_;
  int action_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fiam_2fv1_2fpolicy_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Policy

// int32 version = 1;
inline void Policy::clear_version() {
  version_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Policy::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Policy::version() const {
  // @@protoc_insertion_point(field_get:google.iam.v1.Policy.version)
  return _internal_version();
}
inline void Policy::_internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  version_ = value;
}
inline void Policy::set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:google.iam.v1.Policy.version)
}

// repeated .google.iam.v1.Binding bindings = 4;
inline int Policy::_internal_bindings_size() const {
  return bindings_.size();
}
inline int Policy::bindings_size() const {
  return _internal_bindings_size();
}
inline void Policy::clear_bindings() {
  bindings_.Clear();
}
inline ::google::iam::v1::Binding* Policy::mutable_bindings(int index) {
  // @@protoc_insertion_point(field_mutable:google.iam.v1.Policy.bindings)
  return bindings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::iam::v1::Binding >*
Policy::mutable_bindings() {
  // @@protoc_insertion_point(field_mutable_list:google.iam.v1.Policy.bindings)
  return &bindings_;
}
inline const ::google::iam::v1::Binding& Policy::_internal_bindings(int index) const {
  return bindings_.Get(index);
}
inline const ::google::iam::v1::Binding& Policy::bindings(int index) const {
  // @@protoc_insertion_point(field_get:google.iam.v1.Policy.bindings)
  return _internal_bindings(index);
}
inline ::google::iam::v1::Binding* Policy::_internal_add_bindings() {
  return bindings_.Add();
}
inline ::google::iam::v1::Binding* Policy::add_bindings() {
  // @@protoc_insertion_point(field_add:google.iam.v1.Policy.bindings)
  return _internal_add_bindings();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::iam::v1::Binding >&
Policy::bindings() const {
  // @@protoc_insertion_point(field_list:google.iam.v1.Policy.bindings)
  return bindings_;
}

// bytes etag = 3;
inline void Policy::clear_etag() {
  etag_.ClearToEmpty();
}
inline const std::string& Policy::etag() const {
  // @@protoc_insertion_point(field_get:google.iam.v1.Policy.etag)
  return _internal_etag();
}
inline void Policy::set_etag(const std::string& value) {
  _internal_set_etag(value);
  // @@protoc_insertion_point(field_set:google.iam.v1.Policy.etag)
}
inline std::string* Policy::mutable_etag() {
  // @@protoc_insertion_point(field_mutable:google.iam.v1.Policy.etag)
  return _internal_mutable_etag();
}
inline const std::string& Policy::_internal_etag() const {
  return etag_.Get();
}
inline void Policy::_internal_set_etag(const std::string& value) {
  
  etag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Policy::set_etag(std::string&& value) {
  
  etag_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.iam.v1.Policy.etag)
}
inline void Policy::set_etag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  etag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.iam.v1.Policy.etag)
}
inline void Policy::set_etag(const void* value,
    size_t size) {
  
  etag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.iam.v1.Policy.etag)
}
inline std::string* Policy::_internal_mutable_etag() {
  
  return etag_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Policy::release_etag() {
  // @@protoc_insertion_point(field_release:google.iam.v1.Policy.etag)
  return etag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Policy::set_allocated_etag(std::string* etag) {
  if (etag != nullptr) {
    
  } else {
    
  }
  etag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), etag,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.iam.v1.Policy.etag)
}

// -------------------------------------------------------------------

// Binding

// string role = 1;
inline void Binding::clear_role() {
  role_.ClearToEmpty();
}
inline const std::string& Binding::role() const {
  // @@protoc_insertion_point(field_get:google.iam.v1.Binding.role)
  return _internal_role();
}
inline void Binding::set_role(const std::string& value) {
  _internal_set_role(value);
  // @@protoc_insertion_point(field_set:google.iam.v1.Binding.role)
}
inline std::string* Binding::mutable_role() {
  // @@protoc_insertion_point(field_mutable:google.iam.v1.Binding.role)
  return _internal_mutable_role();
}
inline const std::string& Binding::_internal_role() const {
  return role_.Get();
}
inline void Binding::_internal_set_role(const std::string& value) {
  
  role_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Binding::set_role(std::string&& value) {
  
  role_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.iam.v1.Binding.role)
}
inline void Binding::set_role(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  role_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.iam.v1.Binding.role)
}
inline void Binding::set_role(const char* value,
    size_t size) {
  
  role_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.iam.v1.Binding.role)
}
inline std::string* Binding::_internal_mutable_role() {
  
  return role_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Binding::release_role() {
  // @@protoc_insertion_point(field_release:google.iam.v1.Binding.role)
  return role_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Binding::set_allocated_role(std::string* role) {
  if (role != nullptr) {
    
  } else {
    
  }
  role_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), role,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.iam.v1.Binding.role)
}

// repeated string members = 2;
inline int Binding::_internal_members_size() const {
  return members_.size();
}
inline int Binding::members_size() const {
  return _internal_members_size();
}
inline void Binding::clear_members() {
  members_.Clear();
}
inline std::string* Binding::add_members() {
  // @@protoc_insertion_point(field_add_mutable:google.iam.v1.Binding.members)
  return _internal_add_members();
}
inline const std::string& Binding::_internal_members(int index) const {
  return members_.Get(index);
}
inline const std::string& Binding::members(int index) const {
  // @@protoc_insertion_point(field_get:google.iam.v1.Binding.members)
  return _internal_members(index);
}
inline std::string* Binding::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:google.iam.v1.Binding.members)
  return members_.Mutable(index);
}
inline void Binding::set_members(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:google.iam.v1.Binding.members)
  members_.Mutable(index)->assign(value);
}
inline void Binding::set_members(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:google.iam.v1.Binding.members)
  members_.Mutable(index)->assign(std::move(value));
}
inline void Binding::set_members(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  members_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.iam.v1.Binding.members)
}
inline void Binding::set_members(int index, const char* value, size_t size) {
  members_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.iam.v1.Binding.members)
}
inline std::string* Binding::_internal_add_members() {
  return members_.Add();
}
inline void Binding::add_members(const std::string& value) {
  members_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.iam.v1.Binding.members)
}
inline void Binding::add_members(std::string&& value) {
  members_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.iam.v1.Binding.members)
}
inline void Binding::add_members(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  members_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.iam.v1.Binding.members)
}
inline void Binding::add_members(const char* value, size_t size) {
  members_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.iam.v1.Binding.members)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Binding::members() const {
  // @@protoc_insertion_point(field_list:google.iam.v1.Binding.members)
  return members_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Binding::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:google.iam.v1.Binding.members)
  return &members_;
}

// .google.type.Expr condition = 3;
inline bool Binding::_internal_has_condition() const {
  return this != internal_default_instance() && condition_ != nullptr;
}
inline bool Binding::has_condition() const {
  return _internal_has_condition();
}
inline const ::google::type::Expr& Binding::_internal_condition() const {
  const ::google::type::Expr* p = condition_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::type::Expr&>(
      ::google::type::_Expr_default_instance_);
}
inline const ::google::type::Expr& Binding::condition() const {
  // @@protoc_insertion_point(field_get:google.iam.v1.Binding.condition)
  return _internal_condition();
}
inline void Binding::unsafe_arena_set_allocated_condition(
    ::google::type::Expr* condition) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(condition_);
  }
  condition_ = condition;
  if (condition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.v1.Binding.condition)
}
inline ::google::type::Expr* Binding::release_condition() {
  
  ::google::type::Expr* temp = condition_;
  condition_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::type::Expr* Binding::unsafe_arena_release_condition() {
  // @@protoc_insertion_point(field_release:google.iam.v1.Binding.condition)
  
  ::google::type::Expr* temp = condition_;
  condition_ = nullptr;
  return temp;
}
inline ::google::type::Expr* Binding::_internal_mutable_condition() {
  
  if (condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::type::Expr>(GetArena());
    condition_ = p;
  }
  return condition_;
}
inline ::google::type::Expr* Binding::mutable_condition() {
  // @@protoc_insertion_point(field_mutable:google.iam.v1.Binding.condition)
  return _internal_mutable_condition();
}
inline void Binding::set_allocated_condition(::google::type::Expr* condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(condition_);
  }
  if (condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(condition)->GetArena();
    if (message_arena != submessage_arena) {
      condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, condition, submessage_arena);
    }
    
  } else {
    
  }
  condition_ = condition;
  // @@protoc_insertion_point(field_set_allocated:google.iam.v1.Binding.condition)
}

// -------------------------------------------------------------------

// PolicyDelta

// repeated .google.iam.v1.BindingDelta binding_deltas = 1;
inline int PolicyDelta::_internal_binding_deltas_size() const {
  return binding_deltas_.size();
}
inline int PolicyDelta::binding_deltas_size() const {
  return _internal_binding_deltas_size();
}
inline void PolicyDelta::clear_binding_deltas() {
  binding_deltas_.Clear();
}
inline ::google::iam::v1::BindingDelta* PolicyDelta::mutable_binding_deltas(int index) {
  // @@protoc_insertion_point(field_mutable:google.iam.v1.PolicyDelta.binding_deltas)
  return binding_deltas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::iam::v1::BindingDelta >*
PolicyDelta::mutable_binding_deltas() {
  // @@protoc_insertion_point(field_mutable_list:google.iam.v1.PolicyDelta.binding_deltas)
  return &binding_deltas_;
}
inline const ::google::iam::v1::BindingDelta& PolicyDelta::_internal_binding_deltas(int index) const {
  return binding_deltas_.Get(index);
}
inline const ::google::iam::v1::BindingDelta& PolicyDelta::binding_deltas(int index) const {
  // @@protoc_insertion_point(field_get:google.iam.v1.PolicyDelta.binding_deltas)
  return _internal_binding_deltas(index);
}
inline ::google::iam::v1::BindingDelta* PolicyDelta::_internal_add_binding_deltas() {
  return binding_deltas_.Add();
}
inline ::google::iam::v1::BindingDelta* PolicyDelta::add_binding_deltas() {
  // @@protoc_insertion_point(field_add:google.iam.v1.PolicyDelta.binding_deltas)
  return _internal_add_binding_deltas();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::iam::v1::BindingDelta >&
PolicyDelta::binding_deltas() const {
  // @@protoc_insertion_point(field_list:google.iam.v1.PolicyDelta.binding_deltas)
  return binding_deltas_;
}

// repeated .google.iam.v1.AuditConfigDelta audit_config_deltas = 2;
inline int PolicyDelta::_internal_audit_config_deltas_size() const {
  return audit_config_deltas_.size();
}
inline int PolicyDelta::audit_config_deltas_size() const {
  return _internal_audit_config_deltas_size();
}
inline void PolicyDelta::clear_audit_config_deltas() {
  audit_config_deltas_.Clear();
}
inline ::google::iam::v1::AuditConfigDelta* PolicyDelta::mutable_audit_config_deltas(int index) {
  // @@protoc_insertion_point(field_mutable:google.iam.v1.PolicyDelta.audit_config_deltas)
  return audit_config_deltas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::iam::v1::AuditConfigDelta >*
PolicyDelta::mutable_audit_config_deltas() {
  // @@protoc_insertion_point(field_mutable_list:google.iam.v1.PolicyDelta.audit_config_deltas)
  return &audit_config_deltas_;
}
inline const ::google::iam::v1::AuditConfigDelta& PolicyDelta::_internal_audit_config_deltas(int index) const {
  return audit_config_deltas_.Get(index);
}
inline const ::google::iam::v1::AuditConfigDelta& PolicyDelta::audit_config_deltas(int index) const {
  // @@protoc_insertion_point(field_get:google.iam.v1.PolicyDelta.audit_config_deltas)
  return _internal_audit_config_deltas(index);
}
inline ::google::iam::v1::AuditConfigDelta* PolicyDelta::_internal_add_audit_config_deltas() {
  return audit_config_deltas_.Add();
}
inline ::google::iam::v1::AuditConfigDelta* PolicyDelta::add_audit_config_deltas() {
  // @@protoc_insertion_point(field_add:google.iam.v1.PolicyDelta.audit_config_deltas)
  return _internal_add_audit_config_deltas();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::iam::v1::AuditConfigDelta >&
PolicyDelta::audit_config_deltas() const {
  // @@protoc_insertion_point(field_list:google.iam.v1.PolicyDelta.audit_config_deltas)
  return audit_config_deltas_;
}

// -------------------------------------------------------------------

// BindingDelta

// .google.iam.v1.BindingDelta.Action action = 1;
inline void BindingDelta::clear_action() {
  action_ = 0;
}
inline ::google::iam::v1::BindingDelta_Action BindingDelta::_internal_action() const {
  return static_cast< ::google::iam::v1::BindingDelta_Action >(action_);
}
inline ::google::iam::v1::BindingDelta_Action BindingDelta::action() const {
  // @@protoc_insertion_point(field_get:google.iam.v1.BindingDelta.action)
  return _internal_action();
}
inline void BindingDelta::_internal_set_action(::google::iam::v1::BindingDelta_Action value) {
  
  action_ = value;
}
inline void BindingDelta::set_action(::google::iam::v1::BindingDelta_Action value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:google.iam.v1.BindingDelta.action)
}

// string role = 2;
inline void BindingDelta::clear_role() {
  role_.ClearToEmpty();
}
inline const std::string& BindingDelta::role() const {
  // @@protoc_insertion_point(field_get:google.iam.v1.BindingDelta.role)
  return _internal_role();
}
inline void BindingDelta::set_role(const std::string& value) {
  _internal_set_role(value);
  // @@protoc_insertion_point(field_set:google.iam.v1.BindingDelta.role)
}
inline std::string* BindingDelta::mutable_role() {
  // @@protoc_insertion_point(field_mutable:google.iam.v1.BindingDelta.role)
  return _internal_mutable_role();
}
inline const std::string& BindingDelta::_internal_role() const {
  return role_.Get();
}
inline void BindingDelta::_internal_set_role(const std::string& value) {
  
  role_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BindingDelta::set_role(std::string&& value) {
  
  role_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.iam.v1.BindingDelta.role)
}
inline void BindingDelta::set_role(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  role_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.iam.v1.BindingDelta.role)
}
inline void BindingDelta::set_role(const char* value,
    size_t size) {
  
  role_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.iam.v1.BindingDelta.role)
}
inline std::string* BindingDelta::_internal_mutable_role() {
  
  return role_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BindingDelta::release_role() {
  // @@protoc_insertion_point(field_release:google.iam.v1.BindingDelta.role)
  return role_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BindingDelta::set_allocated_role(std::string* role) {
  if (role != nullptr) {
    
  } else {
    
  }
  role_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), role,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.iam.v1.BindingDelta.role)
}

// string member = 3;
inline void BindingDelta::clear_member() {
  member_.ClearToEmpty();
}
inline const std::string& BindingDelta::member() const {
  // @@protoc_insertion_point(field_get:google.iam.v1.BindingDelta.member)
  return _internal_member();
}
inline void BindingDelta::set_member(const std::string& value) {
  _internal_set_member(value);
  // @@protoc_insertion_point(field_set:google.iam.v1.BindingDelta.member)
}
inline std::string* BindingDelta::mutable_member() {
  // @@protoc_insertion_point(field_mutable:google.iam.v1.BindingDelta.member)
  return _internal_mutable_member();
}
inline const std::string& BindingDelta::_internal_member() const {
  return member_.Get();
}
inline void BindingDelta::_internal_set_member(const std::string& value) {
  
  member_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BindingDelta::set_member(std::string&& value) {
  
  member_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.iam.v1.BindingDelta.member)
}
inline void BindingDelta::set_member(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  member_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.iam.v1.BindingDelta.member)
}
inline void BindingDelta::set_member(const char* value,
    size_t size) {
  
  member_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.iam.v1.BindingDelta.member)
}
inline std::string* BindingDelta::_internal_mutable_member() {
  
  return member_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BindingDelta::release_member() {
  // @@protoc_insertion_point(field_release:google.iam.v1.BindingDelta.member)
  return member_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BindingDelta::set_allocated_member(std::string* member) {
  if (member != nullptr) {
    
  } else {
    
  }
  member_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), member,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.iam.v1.BindingDelta.member)
}

// .google.type.Expr condition = 4;
inline bool BindingDelta::_internal_has_condition() const {
  return this != internal_default_instance() && condition_ != nullptr;
}
inline bool BindingDelta::has_condition() const {
  return _internal_has_condition();
}
inline const ::google::type::Expr& BindingDelta::_internal_condition() const {
  const ::google::type::Expr* p = condition_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::type::Expr&>(
      ::google::type::_Expr_default_instance_);
}
inline const ::google::type::Expr& BindingDelta::condition() const {
  // @@protoc_insertion_point(field_get:google.iam.v1.BindingDelta.condition)
  return _internal_condition();
}
inline void BindingDelta::unsafe_arena_set_allocated_condition(
    ::google::type::Expr* condition) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(condition_);
  }
  condition_ = condition;
  if (condition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.v1.BindingDelta.condition)
}
inline ::google::type::Expr* BindingDelta::release_condition() {
  
  ::google::type::Expr* temp = condition_;
  condition_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::type::Expr* BindingDelta::unsafe_arena_release_condition() {
  // @@protoc_insertion_point(field_release:google.iam.v1.BindingDelta.condition)
  
  ::google::type::Expr* temp = condition_;
  condition_ = nullptr;
  return temp;
}
inline ::google::type::Expr* BindingDelta::_internal_mutable_condition() {
  
  if (condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::type::Expr>(GetArena());
    condition_ = p;
  }
  return condition_;
}
inline ::google::type::Expr* BindingDelta::mutable_condition() {
  // @@protoc_insertion_point(field_mutable:google.iam.v1.BindingDelta.condition)
  return _internal_mutable_condition();
}
inline void BindingDelta::set_allocated_condition(::google::type::Expr* condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(condition_);
  }
  if (condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(condition)->GetArena();
    if (message_arena != submessage_arena) {
      condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, condition, submessage_arena);
    }
    
  } else {
    
  }
  condition_ = condition;
  // @@protoc_insertion_point(field_set_allocated:google.iam.v1.BindingDelta.condition)
}

// -------------------------------------------------------------------

// AuditConfigDelta

// .google.iam.v1.AuditConfigDelta.Action action = 1;
inline void AuditConfigDelta::clear_action() {
  action_ = 0;
}
inline ::google::iam::v1::AuditConfigDelta_Action AuditConfigDelta::_internal_action() const {
  return static_cast< ::google::iam::v1::AuditConfigDelta_Action >(action_);
}
inline ::google::iam::v1::AuditConfigDelta_Action AuditConfigDelta::action() const {
  // @@protoc_insertion_point(field_get:google.iam.v1.AuditConfigDelta.action)
  return _internal_action();
}
inline void AuditConfigDelta::_internal_set_action(::google::iam::v1::AuditConfigDelta_Action value) {
  
  action_ = value;
}
inline void AuditConfigDelta::set_action(::google::iam::v1::AuditConfigDelta_Action value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:google.iam.v1.AuditConfigDelta.action)
}

// string service = 2;
inline void AuditConfigDelta::clear_service() {
  service_.ClearToEmpty();
}
inline const std::string& AuditConfigDelta::service() const {
  // @@protoc_insertion_point(field_get:google.iam.v1.AuditConfigDelta.service)
  return _internal_service();
}
inline void AuditConfigDelta::set_service(const std::string& value) {
  _internal_set_service(value);
  // @@protoc_insertion_point(field_set:google.iam.v1.AuditConfigDelta.service)
}
inline std::string* AuditConfigDelta::mutable_service() {
  // @@protoc_insertion_point(field_mutable:google.iam.v1.AuditConfigDelta.service)
  return _internal_mutable_service();
}
inline const std::string& AuditConfigDelta::_internal_service() const {
  return service_.Get();
}
inline void AuditConfigDelta::_internal_set_service(const std::string& value) {
  
  service_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AuditConfigDelta::set_service(std::string&& value) {
  
  service_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.iam.v1.AuditConfigDelta.service)
}
inline void AuditConfigDelta::set_service(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  service_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.iam.v1.AuditConfigDelta.service)
}
inline void AuditConfigDelta::set_service(const char* value,
    size_t size) {
  
  service_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.iam.v1.AuditConfigDelta.service)
}
inline std::string* AuditConfigDelta::_internal_mutable_service() {
  
  return service_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AuditConfigDelta::release_service() {
  // @@protoc_insertion_point(field_release:google.iam.v1.AuditConfigDelta.service)
  return service_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AuditConfigDelta::set_allocated_service(std::string* service) {
  if (service != nullptr) {
    
  } else {
    
  }
  service_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.iam.v1.AuditConfigDelta.service)
}

// string exempted_member = 3;
inline void AuditConfigDelta::clear_exempted_member() {
  exempted_member_.ClearToEmpty();
}
inline const std::string& AuditConfigDelta::exempted_member() const {
  // @@protoc_insertion_point(field_get:google.iam.v1.AuditConfigDelta.exempted_member)
  return _internal_exempted_member();
}
inline void AuditConfigDelta::set_exempted_member(const std::string& value) {
  _internal_set_exempted_member(value);
  // @@protoc_insertion_point(field_set:google.iam.v1.AuditConfigDelta.exempted_member)
}
inline std::string* AuditConfigDelta::mutable_exempted_member() {
  // @@protoc_insertion_point(field_mutable:google.iam.v1.AuditConfigDelta.exempted_member)
  return _internal_mutable_exempted_member();
}
inline const std::string& AuditConfigDelta::_internal_exempted_member() const {
  return exempted_member_.Get();
}
inline void AuditConfigDelta::_internal_set_exempted_member(const std::string& value) {
  
  exempted_member_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AuditConfigDelta::set_exempted_member(std::string&& value) {
  
  exempted_member_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.iam.v1.AuditConfigDelta.exempted_member)
}
inline void AuditConfigDelta::set_exempted_member(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exempted_member_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.iam.v1.AuditConfigDelta.exempted_member)
}
inline void AuditConfigDelta::set_exempted_member(const char* value,
    size_t size) {
  
  exempted_member_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.iam.v1.AuditConfigDelta.exempted_member)
}
inline std::string* AuditConfigDelta::_internal_mutable_exempted_member() {
  
  return exempted_member_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AuditConfigDelta::release_exempted_member() {
  // @@protoc_insertion_point(field_release:google.iam.v1.AuditConfigDelta.exempted_member)
  return exempted_member_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AuditConfigDelta::set_allocated_exempted_member(std::string* exempted_member) {
  if (exempted_member != nullptr) {
    
  } else {
    
  }
  exempted_member_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exempted_member,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.iam.v1.AuditConfigDelta.exempted_member)
}

// string log_type = 4;
inline void AuditConfigDelta::clear_log_type() {
  log_type_.ClearToEmpty();
}
inline const std::string& AuditConfigDelta::log_type() const {
  // @@protoc_insertion_point(field_get:google.iam.v1.AuditConfigDelta.log_type)
  return _internal_log_type();
}
inline void AuditConfigDelta::set_log_type(const std::string& value) {
  _internal_set_log_type(value);
  // @@protoc_insertion_point(field_set:google.iam.v1.AuditConfigDelta.log_type)
}
inline std::string* AuditConfigDelta::mutable_log_type() {
  // @@protoc_insertion_point(field_mutable:google.iam.v1.AuditConfigDelta.log_type)
  return _internal_mutable_log_type();
}
inline const std::string& AuditConfigDelta::_internal_log_type() const {
  return log_type_.Get();
}
inline void AuditConfigDelta::_internal_set_log_type(const std::string& value) {
  
  log_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AuditConfigDelta::set_log_type(std::string&& value) {
  
  log_type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.iam.v1.AuditConfigDelta.log_type)
}
inline void AuditConfigDelta::set_log_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  log_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.iam.v1.AuditConfigDelta.log_type)
}
inline void AuditConfigDelta::set_log_type(const char* value,
    size_t size) {
  
  log_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.iam.v1.AuditConfigDelta.log_type)
}
inline std::string* AuditConfigDelta::_internal_mutable_log_type() {
  
  return log_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AuditConfigDelta::release_log_type() {
  // @@protoc_insertion_point(field_release:google.iam.v1.AuditConfigDelta.log_type)
  return log_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AuditConfigDelta::set_allocated_log_type(std::string* log_type) {
  if (log_type != nullptr) {
    
  } else {
    
  }
  log_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), log_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.iam.v1.AuditConfigDelta.log_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace iam
}  // namespace google

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::google::iam::v1::BindingDelta_Action> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::iam::v1::BindingDelta_Action>() {
  return ::google::iam::v1::BindingDelta_Action_descriptor();
}
template <> struct is_proto_enum< ::google::iam::v1::AuditConfigDelta_Action> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::iam::v1::AuditConfigDelta_Action>() {
  return ::google::iam::v1::AuditConfigDelta_Action_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fiam_2fv1_2fpolicy_2eproto
