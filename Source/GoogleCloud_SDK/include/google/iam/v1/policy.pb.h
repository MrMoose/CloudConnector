// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/iam/v1/policy.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fiam_2fv1_2fpolicy_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fiam_2fv1_2fpolicy_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/type/expr.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fiam_2fv1_2fpolicy_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fiam_2fv1_2fpolicy_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fiam_2fv1_2fpolicy_2eproto;
namespace google {
namespace iam {
namespace v1 {
class AuditConfig;
struct AuditConfigDefaultTypeInternal;
extern AuditConfigDefaultTypeInternal _AuditConfig_default_instance_;
class AuditConfigDelta;
struct AuditConfigDeltaDefaultTypeInternal;
extern AuditConfigDeltaDefaultTypeInternal _AuditConfigDelta_default_instance_;
class AuditLogConfig;
struct AuditLogConfigDefaultTypeInternal;
extern AuditLogConfigDefaultTypeInternal _AuditLogConfig_default_instance_;
class Binding;
struct BindingDefaultTypeInternal;
extern BindingDefaultTypeInternal _Binding_default_instance_;
class BindingDelta;
struct BindingDeltaDefaultTypeInternal;
extern BindingDeltaDefaultTypeInternal _BindingDelta_default_instance_;
class Policy;
struct PolicyDefaultTypeInternal;
extern PolicyDefaultTypeInternal _Policy_default_instance_;
class PolicyDelta;
struct PolicyDeltaDefaultTypeInternal;
extern PolicyDeltaDefaultTypeInternal _PolicyDelta_default_instance_;
}  // namespace v1
}  // namespace iam
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::iam::v1::AuditConfig* Arena::CreateMaybeMessage<::google::iam::v1::AuditConfig>(Arena*);
template<> ::google::iam::v1::AuditConfigDelta* Arena::CreateMaybeMessage<::google::iam::v1::AuditConfigDelta>(Arena*);
template<> ::google::iam::v1::AuditLogConfig* Arena::CreateMaybeMessage<::google::iam::v1::AuditLogConfig>(Arena*);
template<> ::google::iam::v1::Binding* Arena::CreateMaybeMessage<::google::iam::v1::Binding>(Arena*);
template<> ::google::iam::v1::BindingDelta* Arena::CreateMaybeMessage<::google::iam::v1::BindingDelta>(Arena*);
template<> ::google::iam::v1::Policy* Arena::CreateMaybeMessage<::google::iam::v1::Policy>(Arena*);
template<> ::google::iam::v1::PolicyDelta* Arena::CreateMaybeMessage<::google::iam::v1::PolicyDelta>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace iam {
namespace v1 {

enum AuditLogConfig_LogType : int {
  AuditLogConfig_LogType_LOG_TYPE_UNSPECIFIED = 0,
  AuditLogConfig_LogType_ADMIN_READ = 1,
  AuditLogConfig_LogType_DATA_WRITE = 2,
  AuditLogConfig_LogType_DATA_READ = 3,
  AuditLogConfig_LogType_AuditLogConfig_LogType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  AuditLogConfig_LogType_AuditLogConfig_LogType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool AuditLogConfig_LogType_IsValid(int value);
constexpr AuditLogConfig_LogType AuditLogConfig_LogType_LogType_MIN = AuditLogConfig_LogType_LOG_TYPE_UNSPECIFIED;
constexpr AuditLogConfig_LogType AuditLogConfig_LogType_LogType_MAX = AuditLogConfig_LogType_DATA_READ;
constexpr int AuditLogConfig_LogType_LogType_ARRAYSIZE = AuditLogConfig_LogType_LogType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AuditLogConfig_LogType_descriptor();
template<typename T>
inline const std::string& AuditLogConfig_LogType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AuditLogConfig_LogType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AuditLogConfig_LogType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AuditLogConfig_LogType_descriptor(), enum_t_value);
}
inline bool AuditLogConfig_LogType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AuditLogConfig_LogType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AuditLogConfig_LogType>(
    AuditLogConfig_LogType_descriptor(), name, value);
}
enum BindingDelta_Action : int {
  BindingDelta_Action_ACTION_UNSPECIFIED = 0,
  BindingDelta_Action_ADD = 1,
  BindingDelta_Action_REMOVE = 2,
  BindingDelta_Action_BindingDelta_Action_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  BindingDelta_Action_BindingDelta_Action_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool BindingDelta_Action_IsValid(int value);
constexpr BindingDelta_Action BindingDelta_Action_Action_MIN = BindingDelta_Action_ACTION_UNSPECIFIED;
constexpr BindingDelta_Action BindingDelta_Action_Action_MAX = BindingDelta_Action_REMOVE;
constexpr int BindingDelta_Action_Action_ARRAYSIZE = BindingDelta_Action_Action_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BindingDelta_Action_descriptor();
template<typename T>
inline const std::string& BindingDelta_Action_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BindingDelta_Action>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BindingDelta_Action_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BindingDelta_Action_descriptor(), enum_t_value);
}
inline bool BindingDelta_Action_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BindingDelta_Action* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BindingDelta_Action>(
    BindingDelta_Action_descriptor(), name, value);
}
enum AuditConfigDelta_Action : int {
  AuditConfigDelta_Action_ACTION_UNSPECIFIED = 0,
  AuditConfigDelta_Action_ADD = 1,
  AuditConfigDelta_Action_REMOVE = 2,
  AuditConfigDelta_Action_AuditConfigDelta_Action_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  AuditConfigDelta_Action_AuditConfigDelta_Action_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool AuditConfigDelta_Action_IsValid(int value);
constexpr AuditConfigDelta_Action AuditConfigDelta_Action_Action_MIN = AuditConfigDelta_Action_ACTION_UNSPECIFIED;
constexpr AuditConfigDelta_Action AuditConfigDelta_Action_Action_MAX = AuditConfigDelta_Action_REMOVE;
constexpr int AuditConfigDelta_Action_Action_ARRAYSIZE = AuditConfigDelta_Action_Action_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AuditConfigDelta_Action_descriptor();
template<typename T>
inline const std::string& AuditConfigDelta_Action_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AuditConfigDelta_Action>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AuditConfigDelta_Action_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AuditConfigDelta_Action_descriptor(), enum_t_value);
}
inline bool AuditConfigDelta_Action_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AuditConfigDelta_Action* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AuditConfigDelta_Action>(
    AuditConfigDelta_Action_descriptor(), name, value);
}
// ===================================================================

class Policy final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.iam.v1.Policy) */ {
 public:
  inline Policy() : Policy(nullptr) {}
  ~Policy() override;
  explicit PROTOBUF_CONSTEXPR Policy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Policy(const Policy& from);
  Policy(Policy&& from) noexcept
    : Policy() {
    *this = ::std::move(from);
  }

  inline Policy& operator=(const Policy& from) {
    CopyFrom(from);
    return *this;
  }
  inline Policy& operator=(Policy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Policy& default_instance() {
    return *internal_default_instance();
  }
  static inline const Policy* internal_default_instance() {
    return reinterpret_cast<const Policy*>(
               &_Policy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Policy& a, Policy& b) {
    a.Swap(&b);
  }
  inline void Swap(Policy* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Policy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Policy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Policy>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Policy& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Policy& from) {
    Policy::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Policy* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.iam.v1.Policy";
  }
  protected:
  explicit Policy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBindingsFieldNumber = 4,
    kAuditConfigsFieldNumber = 6,
    kEtagFieldNumber = 3,
    kVersionFieldNumber = 1,
  };
  // repeated .google.iam.v1.Binding bindings = 4;
  int bindings_size() const;
  private:
  int _internal_bindings_size() const;
  public:
  void clear_bindings();
  ::google::iam::v1::Binding* mutable_bindings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::iam::v1::Binding >*
      mutable_bindings();
  private:
  const ::google::iam::v1::Binding& _internal_bindings(int index) const;
  ::google::iam::v1::Binding* _internal_add_bindings();
  public:
  const ::google::iam::v1::Binding& bindings(int index) const;
  ::google::iam::v1::Binding* add_bindings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::iam::v1::Binding >&
      bindings() const;

  // repeated .google.iam.v1.AuditConfig audit_configs = 6;
  int audit_configs_size() const;
  private:
  int _internal_audit_configs_size() const;
  public:
  void clear_audit_configs();
  ::google::iam::v1::AuditConfig* mutable_audit_configs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::iam::v1::AuditConfig >*
      mutable_audit_configs();
  private:
  const ::google::iam::v1::AuditConfig& _internal_audit_configs(int index) const;
  ::google::iam::v1::AuditConfig* _internal_add_audit_configs();
  public:
  const ::google::iam::v1::AuditConfig& audit_configs(int index) const;
  ::google::iam::v1::AuditConfig* add_audit_configs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::iam::v1::AuditConfig >&
      audit_configs() const;

  // bytes etag = 3;
  void clear_etag();
  const std::string& etag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_etag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_etag();
  PROTOBUF_NODISCARD std::string* release_etag();
  void set_allocated_etag(std::string* etag);
  private:
  const std::string& _internal_etag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_etag(const std::string& value);
  std::string* _internal_mutable_etag();
  public:

  // int32 version = 1;
  void clear_version();
  int32_t version() const;
  void set_version(int32_t value);
  private:
  int32_t _internal_version() const;
  void _internal_set_version(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.iam.v1.Policy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::iam::v1::Binding > bindings_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::iam::v1::AuditConfig > audit_configs_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr etag_;
    int32_t version_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fiam_2fv1_2fpolicy_2eproto;
};
// -------------------------------------------------------------------

class Binding final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.iam.v1.Binding) */ {
 public:
  inline Binding() : Binding(nullptr) {}
  ~Binding() override;
  explicit PROTOBUF_CONSTEXPR Binding(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Binding(const Binding& from);
  Binding(Binding&& from) noexcept
    : Binding() {
    *this = ::std::move(from);
  }

  inline Binding& operator=(const Binding& from) {
    CopyFrom(from);
    return *this;
  }
  inline Binding& operator=(Binding&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Binding& default_instance() {
    return *internal_default_instance();
  }
  static inline const Binding* internal_default_instance() {
    return reinterpret_cast<const Binding*>(
               &_Binding_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Binding& a, Binding& b) {
    a.Swap(&b);
  }
  inline void Swap(Binding* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Binding* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Binding* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Binding>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Binding& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Binding& from) {
    Binding::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Binding* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.iam.v1.Binding";
  }
  protected:
  explicit Binding(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMembersFieldNumber = 2,
    kRoleFieldNumber = 1,
    kConditionFieldNumber = 3,
  };
  // repeated string members = 2;
  int members_size() const;
  private:
  int _internal_members_size() const;
  public:
  void clear_members();
  const std::string& members(int index) const;
  std::string* mutable_members(int index);
  void set_members(int index, const std::string& value);
  void set_members(int index, std::string&& value);
  void set_members(int index, const char* value);
  void set_members(int index, const char* value, size_t size);
  std::string* add_members();
  void add_members(const std::string& value);
  void add_members(std::string&& value);
  void add_members(const char* value);
  void add_members(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& members() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_members();
  private:
  const std::string& _internal_members(int index) const;
  std::string* _internal_add_members();
  public:

  // string role = 1;
  void clear_role();
  const std::string& role() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_role(ArgT0&& arg0, ArgT... args);
  std::string* mutable_role();
  PROTOBUF_NODISCARD std::string* release_role();
  void set_allocated_role(std::string* role);
  private:
  const std::string& _internal_role() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_role(const std::string& value);
  std::string* _internal_mutable_role();
  public:

  // .google.type.Expr condition = 3;
  bool has_condition() const;
  private:
  bool _internal_has_condition() const;
  public:
  void clear_condition();
  const ::google::type::Expr& condition() const;
  PROTOBUF_NODISCARD ::google::type::Expr* release_condition();
  ::google::type::Expr* mutable_condition();
  void set_allocated_condition(::google::type::Expr* condition);
  private:
  const ::google::type::Expr& _internal_condition() const;
  ::google::type::Expr* _internal_mutable_condition();
  public:
  void unsafe_arena_set_allocated_condition(
      ::google::type::Expr* condition);
  ::google::type::Expr* unsafe_arena_release_condition();

  // @@protoc_insertion_point(class_scope:google.iam.v1.Binding)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> members_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr role_;
    ::google::type::Expr* condition_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fiam_2fv1_2fpolicy_2eproto;
};
// -------------------------------------------------------------------

class AuditConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.iam.v1.AuditConfig) */ {
 public:
  inline AuditConfig() : AuditConfig(nullptr) {}
  ~AuditConfig() override;
  explicit PROTOBUF_CONSTEXPR AuditConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AuditConfig(const AuditConfig& from);
  AuditConfig(AuditConfig&& from) noexcept
    : AuditConfig() {
    *this = ::std::move(from);
  }

  inline AuditConfig& operator=(const AuditConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuditConfig& operator=(AuditConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuditConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuditConfig* internal_default_instance() {
    return reinterpret_cast<const AuditConfig*>(
               &_AuditConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AuditConfig& a, AuditConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(AuditConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuditConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AuditConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AuditConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AuditConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AuditConfig& from) {
    AuditConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuditConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.iam.v1.AuditConfig";
  }
  protected:
  explicit AuditConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuditLogConfigsFieldNumber = 3,
    kServiceFieldNumber = 1,
  };
  // repeated .google.iam.v1.AuditLogConfig audit_log_configs = 3;
  int audit_log_configs_size() const;
  private:
  int _internal_audit_log_configs_size() const;
  public:
  void clear_audit_log_configs();
  ::google::iam::v1::AuditLogConfig* mutable_audit_log_configs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::iam::v1::AuditLogConfig >*
      mutable_audit_log_configs();
  private:
  const ::google::iam::v1::AuditLogConfig& _internal_audit_log_configs(int index) const;
  ::google::iam::v1::AuditLogConfig* _internal_add_audit_log_configs();
  public:
  const ::google::iam::v1::AuditLogConfig& audit_log_configs(int index) const;
  ::google::iam::v1::AuditLogConfig* add_audit_log_configs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::iam::v1::AuditLogConfig >&
      audit_log_configs() const;

  // string service = 1;
  void clear_service();
  const std::string& service() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_service(ArgT0&& arg0, ArgT... args);
  std::string* mutable_service();
  PROTOBUF_NODISCARD std::string* release_service();
  void set_allocated_service(std::string* service);
  private:
  const std::string& _internal_service() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service(const std::string& value);
  std::string* _internal_mutable_service();
  public:

  // @@protoc_insertion_point(class_scope:google.iam.v1.AuditConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::iam::v1::AuditLogConfig > audit_log_configs_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fiam_2fv1_2fpolicy_2eproto;
};
// -------------------------------------------------------------------

class AuditLogConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.iam.v1.AuditLogConfig) */ {
 public:
  inline AuditLogConfig() : AuditLogConfig(nullptr) {}
  ~AuditLogConfig() override;
  explicit PROTOBUF_CONSTEXPR AuditLogConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AuditLogConfig(const AuditLogConfig& from);
  AuditLogConfig(AuditLogConfig&& from) noexcept
    : AuditLogConfig() {
    *this = ::std::move(from);
  }

  inline AuditLogConfig& operator=(const AuditLogConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuditLogConfig& operator=(AuditLogConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuditLogConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuditLogConfig* internal_default_instance() {
    return reinterpret_cast<const AuditLogConfig*>(
               &_AuditLogConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AuditLogConfig& a, AuditLogConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(AuditLogConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuditLogConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AuditLogConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AuditLogConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AuditLogConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AuditLogConfig& from) {
    AuditLogConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuditLogConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.iam.v1.AuditLogConfig";
  }
  protected:
  explicit AuditLogConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AuditLogConfig_LogType LogType;
  static constexpr LogType LOG_TYPE_UNSPECIFIED =
    AuditLogConfig_LogType_LOG_TYPE_UNSPECIFIED;
  static constexpr LogType ADMIN_READ =
    AuditLogConfig_LogType_ADMIN_READ;
  static constexpr LogType DATA_WRITE =
    AuditLogConfig_LogType_DATA_WRITE;
  static constexpr LogType DATA_READ =
    AuditLogConfig_LogType_DATA_READ;
  static inline bool LogType_IsValid(int value) {
    return AuditLogConfig_LogType_IsValid(value);
  }
  static constexpr LogType LogType_MIN =
    AuditLogConfig_LogType_LogType_MIN;
  static constexpr LogType LogType_MAX =
    AuditLogConfig_LogType_LogType_MAX;
  static constexpr int LogType_ARRAYSIZE =
    AuditLogConfig_LogType_LogType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  LogType_descriptor() {
    return AuditLogConfig_LogType_descriptor();
  }
  template<typename T>
  static inline const std::string& LogType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, LogType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function LogType_Name.");
    return AuditLogConfig_LogType_Name(enum_t_value);
  }
  static inline bool LogType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      LogType* value) {
    return AuditLogConfig_LogType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kExemptedMembersFieldNumber = 2,
    kLogTypeFieldNumber = 1,
  };
  // repeated string exempted_members = 2;
  int exempted_members_size() const;
  private:
  int _internal_exempted_members_size() const;
  public:
  void clear_exempted_members();
  const std::string& exempted_members(int index) const;
  std::string* mutable_exempted_members(int index);
  void set_exempted_members(int index, const std::string& value);
  void set_exempted_members(int index, std::string&& value);
  void set_exempted_members(int index, const char* value);
  void set_exempted_members(int index, const char* value, size_t size);
  std::string* add_exempted_members();
  void add_exempted_members(const std::string& value);
  void add_exempted_members(std::string&& value);
  void add_exempted_members(const char* value);
  void add_exempted_members(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& exempted_members() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_exempted_members();
  private:
  const std::string& _internal_exempted_members(int index) const;
  std::string* _internal_add_exempted_members();
  public:

  // .google.iam.v1.AuditLogConfig.LogType log_type = 1;
  void clear_log_type();
  ::google::iam::v1::AuditLogConfig_LogType log_type() const;
  void set_log_type(::google::iam::v1::AuditLogConfig_LogType value);
  private:
  ::google::iam::v1::AuditLogConfig_LogType _internal_log_type() const;
  void _internal_set_log_type(::google::iam::v1::AuditLogConfig_LogType value);
  public:

  // @@protoc_insertion_point(class_scope:google.iam.v1.AuditLogConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> exempted_members_;
    int log_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fiam_2fv1_2fpolicy_2eproto;
};
// -------------------------------------------------------------------

class PolicyDelta final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.iam.v1.PolicyDelta) */ {
 public:
  inline PolicyDelta() : PolicyDelta(nullptr) {}
  ~PolicyDelta() override;
  explicit PROTOBUF_CONSTEXPR PolicyDelta(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PolicyDelta(const PolicyDelta& from);
  PolicyDelta(PolicyDelta&& from) noexcept
    : PolicyDelta() {
    *this = ::std::move(from);
  }

  inline PolicyDelta& operator=(const PolicyDelta& from) {
    CopyFrom(from);
    return *this;
  }
  inline PolicyDelta& operator=(PolicyDelta&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PolicyDelta& default_instance() {
    return *internal_default_instance();
  }
  static inline const PolicyDelta* internal_default_instance() {
    return reinterpret_cast<const PolicyDelta*>(
               &_PolicyDelta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PolicyDelta& a, PolicyDelta& b) {
    a.Swap(&b);
  }
  inline void Swap(PolicyDelta* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PolicyDelta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PolicyDelta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PolicyDelta>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PolicyDelta& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PolicyDelta& from) {
    PolicyDelta::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PolicyDelta* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.iam.v1.PolicyDelta";
  }
  protected:
  explicit PolicyDelta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBindingDeltasFieldNumber = 1,
    kAuditConfigDeltasFieldNumber = 2,
  };
  // repeated .google.iam.v1.BindingDelta binding_deltas = 1;
  int binding_deltas_size() const;
  private:
  int _internal_binding_deltas_size() const;
  public:
  void clear_binding_deltas();
  ::google::iam::v1::BindingDelta* mutable_binding_deltas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::iam::v1::BindingDelta >*
      mutable_binding_deltas();
  private:
  const ::google::iam::v1::BindingDelta& _internal_binding_deltas(int index) const;
  ::google::iam::v1::BindingDelta* _internal_add_binding_deltas();
  public:
  const ::google::iam::v1::BindingDelta& binding_deltas(int index) const;
  ::google::iam::v1::BindingDelta* add_binding_deltas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::iam::v1::BindingDelta >&
      binding_deltas() const;

  // repeated .google.iam.v1.AuditConfigDelta audit_config_deltas = 2;
  int audit_config_deltas_size() const;
  private:
  int _internal_audit_config_deltas_size() const;
  public:
  void clear_audit_config_deltas();
  ::google::iam::v1::AuditConfigDelta* mutable_audit_config_deltas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::iam::v1::AuditConfigDelta >*
      mutable_audit_config_deltas();
  private:
  const ::google::iam::v1::AuditConfigDelta& _internal_audit_config_deltas(int index) const;
  ::google::iam::v1::AuditConfigDelta* _internal_add_audit_config_deltas();
  public:
  const ::google::iam::v1::AuditConfigDelta& audit_config_deltas(int index) const;
  ::google::iam::v1::AuditConfigDelta* add_audit_config_deltas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::iam::v1::AuditConfigDelta >&
      audit_config_deltas() const;

  // @@protoc_insertion_point(class_scope:google.iam.v1.PolicyDelta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::iam::v1::BindingDelta > binding_deltas_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::iam::v1::AuditConfigDelta > audit_config_deltas_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fiam_2fv1_2fpolicy_2eproto;
};
// -------------------------------------------------------------------

class BindingDelta final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.iam.v1.BindingDelta) */ {
 public:
  inline BindingDelta() : BindingDelta(nullptr) {}
  ~BindingDelta() override;
  explicit PROTOBUF_CONSTEXPR BindingDelta(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BindingDelta(const BindingDelta& from);
  BindingDelta(BindingDelta&& from) noexcept
    : BindingDelta() {
    *this = ::std::move(from);
  }

  inline BindingDelta& operator=(const BindingDelta& from) {
    CopyFrom(from);
    return *this;
  }
  inline BindingDelta& operator=(BindingDelta&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BindingDelta& default_instance() {
    return *internal_default_instance();
  }
  static inline const BindingDelta* internal_default_instance() {
    return reinterpret_cast<const BindingDelta*>(
               &_BindingDelta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(BindingDelta& a, BindingDelta& b) {
    a.Swap(&b);
  }
  inline void Swap(BindingDelta* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BindingDelta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BindingDelta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BindingDelta>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BindingDelta& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BindingDelta& from) {
    BindingDelta::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BindingDelta* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.iam.v1.BindingDelta";
  }
  protected:
  explicit BindingDelta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef BindingDelta_Action Action;
  static constexpr Action ACTION_UNSPECIFIED =
    BindingDelta_Action_ACTION_UNSPECIFIED;
  static constexpr Action ADD =
    BindingDelta_Action_ADD;
  static constexpr Action REMOVE =
    BindingDelta_Action_REMOVE;
  static inline bool Action_IsValid(int value) {
    return BindingDelta_Action_IsValid(value);
  }
  static constexpr Action Action_MIN =
    BindingDelta_Action_Action_MIN;
  static constexpr Action Action_MAX =
    BindingDelta_Action_Action_MAX;
  static constexpr int Action_ARRAYSIZE =
    BindingDelta_Action_Action_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Action_descriptor() {
    return BindingDelta_Action_descriptor();
  }
  template<typename T>
  static inline const std::string& Action_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Action>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Action_Name.");
    return BindingDelta_Action_Name(enum_t_value);
  }
  static inline bool Action_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Action* value) {
    return BindingDelta_Action_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRoleFieldNumber = 2,
    kMemberFieldNumber = 3,
    kConditionFieldNumber = 4,
    kActionFieldNumber = 1,
  };
  // string role = 2;
  void clear_role();
  const std::string& role() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_role(ArgT0&& arg0, ArgT... args);
  std::string* mutable_role();
  PROTOBUF_NODISCARD std::string* release_role();
  void set_allocated_role(std::string* role);
  private:
  const std::string& _internal_role() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_role(const std::string& value);
  std::string* _internal_mutable_role();
  public:

  // string member = 3;
  void clear_member();
  const std::string& member() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_member(ArgT0&& arg0, ArgT... args);
  std::string* mutable_member();
  PROTOBUF_NODISCARD std::string* release_member();
  void set_allocated_member(std::string* member);
  private:
  const std::string& _internal_member() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_member(const std::string& value);
  std::string* _internal_mutable_member();
  public:

  // .google.type.Expr condition = 4;
  bool has_condition() const;
  private:
  bool _internal_has_condition() const;
  public:
  void clear_condition();
  const ::google::type::Expr& condition() const;
  PROTOBUF_NODISCARD ::google::type::Expr* release_condition();
  ::google::type::Expr* mutable_condition();
  void set_allocated_condition(::google::type::Expr* condition);
  private:
  const ::google::type::Expr& _internal_condition() const;
  ::google::type::Expr* _internal_mutable_condition();
  public:
  void unsafe_arena_set_allocated_condition(
      ::google::type::Expr* condition);
  ::google::type::Expr* unsafe_arena_release_condition();

  // .google.iam.v1.BindingDelta.Action action = 1;
  void clear_action();
  ::google::iam::v1::BindingDelta_Action action() const;
  void set_action(::google::iam::v1::BindingDelta_Action value);
  private:
  ::google::iam::v1::BindingDelta_Action _internal_action() const;
  void _internal_set_action(::google::iam::v1::BindingDelta_Action value);
  public:

  // @@protoc_insertion_point(class_scope:google.iam.v1.BindingDelta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr role_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr member_;
    ::google::type::Expr* condition_;
    int action_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fiam_2fv1_2fpolicy_2eproto;
};
// -------------------------------------------------------------------

class AuditConfigDelta final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.iam.v1.AuditConfigDelta) */ {
 public:
  inline AuditConfigDelta() : AuditConfigDelta(nullptr) {}
  ~AuditConfigDelta() override;
  explicit PROTOBUF_CONSTEXPR AuditConfigDelta(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AuditConfigDelta(const AuditConfigDelta& from);
  AuditConfigDelta(AuditConfigDelta&& from) noexcept
    : AuditConfigDelta() {
    *this = ::std::move(from);
  }

  inline AuditConfigDelta& operator=(const AuditConfigDelta& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuditConfigDelta& operator=(AuditConfigDelta&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuditConfigDelta& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuditConfigDelta* internal_default_instance() {
    return reinterpret_cast<const AuditConfigDelta*>(
               &_AuditConfigDelta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AuditConfigDelta& a, AuditConfigDelta& b) {
    a.Swap(&b);
  }
  inline void Swap(AuditConfigDelta* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuditConfigDelta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AuditConfigDelta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AuditConfigDelta>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AuditConfigDelta& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AuditConfigDelta& from) {
    AuditConfigDelta::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuditConfigDelta* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.iam.v1.AuditConfigDelta";
  }
  protected:
  explicit AuditConfigDelta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AuditConfigDelta_Action Action;
  static constexpr Action ACTION_UNSPECIFIED =
    AuditConfigDelta_Action_ACTION_UNSPECIFIED;
  static constexpr Action ADD =
    AuditConfigDelta_Action_ADD;
  static constexpr Action REMOVE =
    AuditConfigDelta_Action_REMOVE;
  static inline bool Action_IsValid(int value) {
    return AuditConfigDelta_Action_IsValid(value);
  }
  static constexpr Action Action_MIN =
    AuditConfigDelta_Action_Action_MIN;
  static constexpr Action Action_MAX =
    AuditConfigDelta_Action_Action_MAX;
  static constexpr int Action_ARRAYSIZE =
    AuditConfigDelta_Action_Action_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Action_descriptor() {
    return AuditConfigDelta_Action_descriptor();
  }
  template<typename T>
  static inline const std::string& Action_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Action>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Action_Name.");
    return AuditConfigDelta_Action_Name(enum_t_value);
  }
  static inline bool Action_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Action* value) {
    return AuditConfigDelta_Action_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kServiceFieldNumber = 2,
    kExemptedMemberFieldNumber = 3,
    kLogTypeFieldNumber = 4,
    kActionFieldNumber = 1,
  };
  // string service = 2;
  void clear_service();
  const std::string& service() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_service(ArgT0&& arg0, ArgT... args);
  std::string* mutable_service();
  PROTOBUF_NODISCARD std::string* release_service();
  void set_allocated_service(std::string* service);
  private:
  const std::string& _internal_service() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service(const std::string& value);
  std::string* _internal_mutable_service();
  public:

  // string exempted_member = 3;
  void clear_exempted_member();
  const std::string& exempted_member() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_exempted_member(ArgT0&& arg0, ArgT... args);
  std::string* mutable_exempted_member();
  PROTOBUF_NODISCARD std::string* release_exempted_member();
  void set_allocated_exempted_member(std::string* exempted_member);
  private:
  const std::string& _internal_exempted_member() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exempted_member(const std::string& value);
  std::string* _internal_mutable_exempted_member();
  public:

  // string log_type = 4;
  void clear_log_type();
  const std::string& log_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_log_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_log_type();
  PROTOBUF_NODISCARD std::string* release_log_type();
  void set_allocated_log_type(std::string* log_type);
  private:
  const std::string& _internal_log_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_log_type(const std::string& value);
  std::string* _internal_mutable_log_type();
  public:

  // .google.iam.v1.AuditConfigDelta.Action action = 1;
  void clear_action();
  ::google::iam::v1::AuditConfigDelta_Action action() const;
  void set_action(::google::iam::v1::AuditConfigDelta_Action value);
  private:
  ::google::iam::v1::AuditConfigDelta_Action _internal_action() const;
  void _internal_set_action(::google::iam::v1::AuditConfigDelta_Action value);
  public:

  // @@protoc_insertion_point(class_scope:google.iam.v1.AuditConfigDelta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exempted_member_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr log_type_;
    int action_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fiam_2fv1_2fpolicy_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Policy

// int32 version = 1;
inline void Policy::clear_version() {
  _impl_.version_ = 0;
}
inline int32_t Policy::_internal_version() const {
  return _impl_.version_;
}
inline int32_t Policy::version() const {
  // @@protoc_insertion_point(field_get:google.iam.v1.Policy.version)
  return _internal_version();
}
inline void Policy::_internal_set_version(int32_t value) {
  
  _impl_.version_ = value;
}
inline void Policy::set_version(int32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:google.iam.v1.Policy.version)
}

// repeated .google.iam.v1.Binding bindings = 4;
inline int Policy::_internal_bindings_size() const {
  return _impl_.bindings_.size();
}
inline int Policy::bindings_size() const {
  return _internal_bindings_size();
}
inline void Policy::clear_bindings() {
  _impl_.bindings_.Clear();
}
inline ::google::iam::v1::Binding* Policy::mutable_bindings(int index) {
  // @@protoc_insertion_point(field_mutable:google.iam.v1.Policy.bindings)
  return _impl_.bindings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::iam::v1::Binding >*
Policy::mutable_bindings() {
  // @@protoc_insertion_point(field_mutable_list:google.iam.v1.Policy.bindings)
  return &_impl_.bindings_;
}
inline const ::google::iam::v1::Binding& Policy::_internal_bindings(int index) const {
  return _impl_.bindings_.Get(index);
}
inline const ::google::iam::v1::Binding& Policy::bindings(int index) const {
  // @@protoc_insertion_point(field_get:google.iam.v1.Policy.bindings)
  return _internal_bindings(index);
}
inline ::google::iam::v1::Binding* Policy::_internal_add_bindings() {
  return _impl_.bindings_.Add();
}
inline ::google::iam::v1::Binding* Policy::add_bindings() {
  ::google::iam::v1::Binding* _add = _internal_add_bindings();
  // @@protoc_insertion_point(field_add:google.iam.v1.Policy.bindings)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::iam::v1::Binding >&
Policy::bindings() const {
  // @@protoc_insertion_point(field_list:google.iam.v1.Policy.bindings)
  return _impl_.bindings_;
}

// repeated .google.iam.v1.AuditConfig audit_configs = 6;
inline int Policy::_internal_audit_configs_size() const {
  return _impl_.audit_configs_.size();
}
inline int Policy::audit_configs_size() const {
  return _internal_audit_configs_size();
}
inline void Policy::clear_audit_configs() {
  _impl_.audit_configs_.Clear();
}
inline ::google::iam::v1::AuditConfig* Policy::mutable_audit_configs(int index) {
  // @@protoc_insertion_point(field_mutable:google.iam.v1.Policy.audit_configs)
  return _impl_.audit_configs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::iam::v1::AuditConfig >*
Policy::mutable_audit_configs() {
  // @@protoc_insertion_point(field_mutable_list:google.iam.v1.Policy.audit_configs)
  return &_impl_.audit_configs_;
}
inline const ::google::iam::v1::AuditConfig& Policy::_internal_audit_configs(int index) const {
  return _impl_.audit_configs_.Get(index);
}
inline const ::google::iam::v1::AuditConfig& Policy::audit_configs(int index) const {
  // @@protoc_insertion_point(field_get:google.iam.v1.Policy.audit_configs)
  return _internal_audit_configs(index);
}
inline ::google::iam::v1::AuditConfig* Policy::_internal_add_audit_configs() {
  return _impl_.audit_configs_.Add();
}
inline ::google::iam::v1::AuditConfig* Policy::add_audit_configs() {
  ::google::iam::v1::AuditConfig* _add = _internal_add_audit_configs();
  // @@protoc_insertion_point(field_add:google.iam.v1.Policy.audit_configs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::iam::v1::AuditConfig >&
Policy::audit_configs() const {
  // @@protoc_insertion_point(field_list:google.iam.v1.Policy.audit_configs)
  return _impl_.audit_configs_;
}

// bytes etag = 3;
inline void Policy::clear_etag() {
  _impl_.etag_.ClearToEmpty();
}
inline const std::string& Policy::etag() const {
  // @@protoc_insertion_point(field_get:google.iam.v1.Policy.etag)
  return _internal_etag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Policy::set_etag(ArgT0&& arg0, ArgT... args) {
 
 _impl_.etag_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.iam.v1.Policy.etag)
}
inline std::string* Policy::mutable_etag() {
  std::string* _s = _internal_mutable_etag();
  // @@protoc_insertion_point(field_mutable:google.iam.v1.Policy.etag)
  return _s;
}
inline const std::string& Policy::_internal_etag() const {
  return _impl_.etag_.Get();
}
inline void Policy::_internal_set_etag(const std::string& value) {
  
  _impl_.etag_.Set(value, GetArenaForAllocation());
}
inline std::string* Policy::_internal_mutable_etag() {
  
  return _impl_.etag_.Mutable(GetArenaForAllocation());
}
inline std::string* Policy::release_etag() {
  // @@protoc_insertion_point(field_release:google.iam.v1.Policy.etag)
  return _impl_.etag_.Release();
}
inline void Policy::set_allocated_etag(std::string* etag) {
  if (etag != nullptr) {
    
  } else {
    
  }
  _impl_.etag_.SetAllocated(etag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.etag_.IsDefault()) {
    _impl_.etag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.iam.v1.Policy.etag)
}

// -------------------------------------------------------------------

// Binding

// string role = 1;
inline void Binding::clear_role() {
  _impl_.role_.ClearToEmpty();
}
inline const std::string& Binding::role() const {
  // @@protoc_insertion_point(field_get:google.iam.v1.Binding.role)
  return _internal_role();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Binding::set_role(ArgT0&& arg0, ArgT... args) {
 
 _impl_.role_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.iam.v1.Binding.role)
}
inline std::string* Binding::mutable_role() {
  std::string* _s = _internal_mutable_role();
  // @@protoc_insertion_point(field_mutable:google.iam.v1.Binding.role)
  return _s;
}
inline const std::string& Binding::_internal_role() const {
  return _impl_.role_.Get();
}
inline void Binding::_internal_set_role(const std::string& value) {
  
  _impl_.role_.Set(value, GetArenaForAllocation());
}
inline std::string* Binding::_internal_mutable_role() {
  
  return _impl_.role_.Mutable(GetArenaForAllocation());
}
inline std::string* Binding::release_role() {
  // @@protoc_insertion_point(field_release:google.iam.v1.Binding.role)
  return _impl_.role_.Release();
}
inline void Binding::set_allocated_role(std::string* role) {
  if (role != nullptr) {
    
  } else {
    
  }
  _impl_.role_.SetAllocated(role, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.role_.IsDefault()) {
    _impl_.role_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.iam.v1.Binding.role)
}

// repeated string members = 2;
inline int Binding::_internal_members_size() const {
  return _impl_.members_.size();
}
inline int Binding::members_size() const {
  return _internal_members_size();
}
inline void Binding::clear_members() {
  _impl_.members_.Clear();
}
inline std::string* Binding::add_members() {
  std::string* _s = _internal_add_members();
  // @@protoc_insertion_point(field_add_mutable:google.iam.v1.Binding.members)
  return _s;
}
inline const std::string& Binding::_internal_members(int index) const {
  return _impl_.members_.Get(index);
}
inline const std::string& Binding::members(int index) const {
  // @@protoc_insertion_point(field_get:google.iam.v1.Binding.members)
  return _internal_members(index);
}
inline std::string* Binding::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:google.iam.v1.Binding.members)
  return _impl_.members_.Mutable(index);
}
inline void Binding::set_members(int index, const std::string& value) {
  _impl_.members_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.iam.v1.Binding.members)
}
inline void Binding::set_members(int index, std::string&& value) {
  _impl_.members_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.iam.v1.Binding.members)
}
inline void Binding::set_members(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.members_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.iam.v1.Binding.members)
}
inline void Binding::set_members(int index, const char* value, size_t size) {
  _impl_.members_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.iam.v1.Binding.members)
}
inline std::string* Binding::_internal_add_members() {
  return _impl_.members_.Add();
}
inline void Binding::add_members(const std::string& value) {
  _impl_.members_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.iam.v1.Binding.members)
}
inline void Binding::add_members(std::string&& value) {
  _impl_.members_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.iam.v1.Binding.members)
}
inline void Binding::add_members(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.members_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.iam.v1.Binding.members)
}
inline void Binding::add_members(const char* value, size_t size) {
  _impl_.members_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.iam.v1.Binding.members)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Binding::members() const {
  // @@protoc_insertion_point(field_list:google.iam.v1.Binding.members)
  return _impl_.members_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Binding::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:google.iam.v1.Binding.members)
  return &_impl_.members_;
}

// .google.type.Expr condition = 3;
inline bool Binding::_internal_has_condition() const {
  return this != internal_default_instance() && _impl_.condition_ != nullptr;
}
inline bool Binding::has_condition() const {
  return _internal_has_condition();
}
inline const ::google::type::Expr& Binding::_internal_condition() const {
  const ::google::type::Expr* p = _impl_.condition_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::type::Expr&>(
      ::google::type::_Expr_default_instance_);
}
inline const ::google::type::Expr& Binding::condition() const {
  // @@protoc_insertion_point(field_get:google.iam.v1.Binding.condition)
  return _internal_condition();
}
inline void Binding::unsafe_arena_set_allocated_condition(
    ::google::type::Expr* condition) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.condition_);
  }
  _impl_.condition_ = condition;
  if (condition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.v1.Binding.condition)
}
inline ::google::type::Expr* Binding::release_condition() {
  
  ::google::type::Expr* temp = _impl_.condition_;
  _impl_.condition_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::type::Expr* Binding::unsafe_arena_release_condition() {
  // @@protoc_insertion_point(field_release:google.iam.v1.Binding.condition)
  
  ::google::type::Expr* temp = _impl_.condition_;
  _impl_.condition_ = nullptr;
  return temp;
}
inline ::google::type::Expr* Binding::_internal_mutable_condition() {
  
  if (_impl_.condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::type::Expr>(GetArenaForAllocation());
    _impl_.condition_ = p;
  }
  return _impl_.condition_;
}
inline ::google::type::Expr* Binding::mutable_condition() {
  ::google::type::Expr* _msg = _internal_mutable_condition();
  // @@protoc_insertion_point(field_mutable:google.iam.v1.Binding.condition)
  return _msg;
}
inline void Binding::set_allocated_condition(::google::type::Expr* condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.condition_);
  }
  if (condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(condition));
    if (message_arena != submessage_arena) {
      condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, condition, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.condition_ = condition;
  // @@protoc_insertion_point(field_set_allocated:google.iam.v1.Binding.condition)
}

// -------------------------------------------------------------------

// AuditConfig

// string service = 1;
inline void AuditConfig::clear_service() {
  _impl_.service_.ClearToEmpty();
}
inline const std::string& AuditConfig::service() const {
  // @@protoc_insertion_point(field_get:google.iam.v1.AuditConfig.service)
  return _internal_service();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AuditConfig::set_service(ArgT0&& arg0, ArgT... args) {
 
 _impl_.service_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.iam.v1.AuditConfig.service)
}
inline std::string* AuditConfig::mutable_service() {
  std::string* _s = _internal_mutable_service();
  // @@protoc_insertion_point(field_mutable:google.iam.v1.AuditConfig.service)
  return _s;
}
inline const std::string& AuditConfig::_internal_service() const {
  return _impl_.service_.Get();
}
inline void AuditConfig::_internal_set_service(const std::string& value) {
  
  _impl_.service_.Set(value, GetArenaForAllocation());
}
inline std::string* AuditConfig::_internal_mutable_service() {
  
  return _impl_.service_.Mutable(GetArenaForAllocation());
}
inline std::string* AuditConfig::release_service() {
  // @@protoc_insertion_point(field_release:google.iam.v1.AuditConfig.service)
  return _impl_.service_.Release();
}
inline void AuditConfig::set_allocated_service(std::string* service) {
  if (service != nullptr) {
    
  } else {
    
  }
  _impl_.service_.SetAllocated(service, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.service_.IsDefault()) {
    _impl_.service_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.iam.v1.AuditConfig.service)
}

// repeated .google.iam.v1.AuditLogConfig audit_log_configs = 3;
inline int AuditConfig::_internal_audit_log_configs_size() const {
  return _impl_.audit_log_configs_.size();
}
inline int AuditConfig::audit_log_configs_size() const {
  return _internal_audit_log_configs_size();
}
inline void AuditConfig::clear_audit_log_configs() {
  _impl_.audit_log_configs_.Clear();
}
inline ::google::iam::v1::AuditLogConfig* AuditConfig::mutable_audit_log_configs(int index) {
  // @@protoc_insertion_point(field_mutable:google.iam.v1.AuditConfig.audit_log_configs)
  return _impl_.audit_log_configs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::iam::v1::AuditLogConfig >*
AuditConfig::mutable_audit_log_configs() {
  // @@protoc_insertion_point(field_mutable_list:google.iam.v1.AuditConfig.audit_log_configs)
  return &_impl_.audit_log_configs_;
}
inline const ::google::iam::v1::AuditLogConfig& AuditConfig::_internal_audit_log_configs(int index) const {
  return _impl_.audit_log_configs_.Get(index);
}
inline const ::google::iam::v1::AuditLogConfig& AuditConfig::audit_log_configs(int index) const {
  // @@protoc_insertion_point(field_get:google.iam.v1.AuditConfig.audit_log_configs)
  return _internal_audit_log_configs(index);
}
inline ::google::iam::v1::AuditLogConfig* AuditConfig::_internal_add_audit_log_configs() {
  return _impl_.audit_log_configs_.Add();
}
inline ::google::iam::v1::AuditLogConfig* AuditConfig::add_audit_log_configs() {
  ::google::iam::v1::AuditLogConfig* _add = _internal_add_audit_log_configs();
  // @@protoc_insertion_point(field_add:google.iam.v1.AuditConfig.audit_log_configs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::iam::v1::AuditLogConfig >&
AuditConfig::audit_log_configs() const {
  // @@protoc_insertion_point(field_list:google.iam.v1.AuditConfig.audit_log_configs)
  return _impl_.audit_log_configs_;
}

// -------------------------------------------------------------------

// AuditLogConfig

// .google.iam.v1.AuditLogConfig.LogType log_type = 1;
inline void AuditLogConfig::clear_log_type() {
  _impl_.log_type_ = 0;
}
inline ::google::iam::v1::AuditLogConfig_LogType AuditLogConfig::_internal_log_type() const {
  return static_cast< ::google::iam::v1::AuditLogConfig_LogType >(_impl_.log_type_);
}
inline ::google::iam::v1::AuditLogConfig_LogType AuditLogConfig::log_type() const {
  // @@protoc_insertion_point(field_get:google.iam.v1.AuditLogConfig.log_type)
  return _internal_log_type();
}
inline void AuditLogConfig::_internal_set_log_type(::google::iam::v1::AuditLogConfig_LogType value) {
  
  _impl_.log_type_ = value;
}
inline void AuditLogConfig::set_log_type(::google::iam::v1::AuditLogConfig_LogType value) {
  _internal_set_log_type(value);
  // @@protoc_insertion_point(field_set:google.iam.v1.AuditLogConfig.log_type)
}

// repeated string exempted_members = 2;
inline int AuditLogConfig::_internal_exempted_members_size() const {
  return _impl_.exempted_members_.size();
}
inline int AuditLogConfig::exempted_members_size() const {
  return _internal_exempted_members_size();
}
inline void AuditLogConfig::clear_exempted_members() {
  _impl_.exempted_members_.Clear();
}
inline std::string* AuditLogConfig::add_exempted_members() {
  std::string* _s = _internal_add_exempted_members();
  // @@protoc_insertion_point(field_add_mutable:google.iam.v1.AuditLogConfig.exempted_members)
  return _s;
}
inline const std::string& AuditLogConfig::_internal_exempted_members(int index) const {
  return _impl_.exempted_members_.Get(index);
}
inline const std::string& AuditLogConfig::exempted_members(int index) const {
  // @@protoc_insertion_point(field_get:google.iam.v1.AuditLogConfig.exempted_members)
  return _internal_exempted_members(index);
}
inline std::string* AuditLogConfig::mutable_exempted_members(int index) {
  // @@protoc_insertion_point(field_mutable:google.iam.v1.AuditLogConfig.exempted_members)
  return _impl_.exempted_members_.Mutable(index);
}
inline void AuditLogConfig::set_exempted_members(int index, const std::string& value) {
  _impl_.exempted_members_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.iam.v1.AuditLogConfig.exempted_members)
}
inline void AuditLogConfig::set_exempted_members(int index, std::string&& value) {
  _impl_.exempted_members_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.iam.v1.AuditLogConfig.exempted_members)
}
inline void AuditLogConfig::set_exempted_members(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.exempted_members_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.iam.v1.AuditLogConfig.exempted_members)
}
inline void AuditLogConfig::set_exempted_members(int index, const char* value, size_t size) {
  _impl_.exempted_members_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.iam.v1.AuditLogConfig.exempted_members)
}
inline std::string* AuditLogConfig::_internal_add_exempted_members() {
  return _impl_.exempted_members_.Add();
}
inline void AuditLogConfig::add_exempted_members(const std::string& value) {
  _impl_.exempted_members_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.iam.v1.AuditLogConfig.exempted_members)
}
inline void AuditLogConfig::add_exempted_members(std::string&& value) {
  _impl_.exempted_members_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.iam.v1.AuditLogConfig.exempted_members)
}
inline void AuditLogConfig::add_exempted_members(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.exempted_members_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.iam.v1.AuditLogConfig.exempted_members)
}
inline void AuditLogConfig::add_exempted_members(const char* value, size_t size) {
  _impl_.exempted_members_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.iam.v1.AuditLogConfig.exempted_members)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AuditLogConfig::exempted_members() const {
  // @@protoc_insertion_point(field_list:google.iam.v1.AuditLogConfig.exempted_members)
  return _impl_.exempted_members_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AuditLogConfig::mutable_exempted_members() {
  // @@protoc_insertion_point(field_mutable_list:google.iam.v1.AuditLogConfig.exempted_members)
  return &_impl_.exempted_members_;
}

// -------------------------------------------------------------------

// PolicyDelta

// repeated .google.iam.v1.BindingDelta binding_deltas = 1;
inline int PolicyDelta::_internal_binding_deltas_size() const {
  return _impl_.binding_deltas_.size();
}
inline int PolicyDelta::binding_deltas_size() const {
  return _internal_binding_deltas_size();
}
inline void PolicyDelta::clear_binding_deltas() {
  _impl_.binding_deltas_.Clear();
}
inline ::google::iam::v1::BindingDelta* PolicyDelta::mutable_binding_deltas(int index) {
  // @@protoc_insertion_point(field_mutable:google.iam.v1.PolicyDelta.binding_deltas)
  return _impl_.binding_deltas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::iam::v1::BindingDelta >*
PolicyDelta::mutable_binding_deltas() {
  // @@protoc_insertion_point(field_mutable_list:google.iam.v1.PolicyDelta.binding_deltas)
  return &_impl_.binding_deltas_;
}
inline const ::google::iam::v1::BindingDelta& PolicyDelta::_internal_binding_deltas(int index) const {
  return _impl_.binding_deltas_.Get(index);
}
inline const ::google::iam::v1::BindingDelta& PolicyDelta::binding_deltas(int index) const {
  // @@protoc_insertion_point(field_get:google.iam.v1.PolicyDelta.binding_deltas)
  return _internal_binding_deltas(index);
}
inline ::google::iam::v1::BindingDelta* PolicyDelta::_internal_add_binding_deltas() {
  return _impl_.binding_deltas_.Add();
}
inline ::google::iam::v1::BindingDelta* PolicyDelta::add_binding_deltas() {
  ::google::iam::v1::BindingDelta* _add = _internal_add_binding_deltas();
  // @@protoc_insertion_point(field_add:google.iam.v1.PolicyDelta.binding_deltas)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::iam::v1::BindingDelta >&
PolicyDelta::binding_deltas() const {
  // @@protoc_insertion_point(field_list:google.iam.v1.PolicyDelta.binding_deltas)
  return _impl_.binding_deltas_;
}

// repeated .google.iam.v1.AuditConfigDelta audit_config_deltas = 2;
inline int PolicyDelta::_internal_audit_config_deltas_size() const {
  return _impl_.audit_config_deltas_.size();
}
inline int PolicyDelta::audit_config_deltas_size() const {
  return _internal_audit_config_deltas_size();
}
inline void PolicyDelta::clear_audit_config_deltas() {
  _impl_.audit_config_deltas_.Clear();
}
inline ::google::iam::v1::AuditConfigDelta* PolicyDelta::mutable_audit_config_deltas(int index) {
  // @@protoc_insertion_point(field_mutable:google.iam.v1.PolicyDelta.audit_config_deltas)
  return _impl_.audit_config_deltas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::iam::v1::AuditConfigDelta >*
PolicyDelta::mutable_audit_config_deltas() {
  // @@protoc_insertion_point(field_mutable_list:google.iam.v1.PolicyDelta.audit_config_deltas)
  return &_impl_.audit_config_deltas_;
}
inline const ::google::iam::v1::AuditConfigDelta& PolicyDelta::_internal_audit_config_deltas(int index) const {
  return _impl_.audit_config_deltas_.Get(index);
}
inline const ::google::iam::v1::AuditConfigDelta& PolicyDelta::audit_config_deltas(int index) const {
  // @@protoc_insertion_point(field_get:google.iam.v1.PolicyDelta.audit_config_deltas)
  return _internal_audit_config_deltas(index);
}
inline ::google::iam::v1::AuditConfigDelta* PolicyDelta::_internal_add_audit_config_deltas() {
  return _impl_.audit_config_deltas_.Add();
}
inline ::google::iam::v1::AuditConfigDelta* PolicyDelta::add_audit_config_deltas() {
  ::google::iam::v1::AuditConfigDelta* _add = _internal_add_audit_config_deltas();
  // @@protoc_insertion_point(field_add:google.iam.v1.PolicyDelta.audit_config_deltas)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::iam::v1::AuditConfigDelta >&
PolicyDelta::audit_config_deltas() const {
  // @@protoc_insertion_point(field_list:google.iam.v1.PolicyDelta.audit_config_deltas)
  return _impl_.audit_config_deltas_;
}

// -------------------------------------------------------------------

// BindingDelta

// .google.iam.v1.BindingDelta.Action action = 1;
inline void BindingDelta::clear_action() {
  _impl_.action_ = 0;
}
inline ::google::iam::v1::BindingDelta_Action BindingDelta::_internal_action() const {
  return static_cast< ::google::iam::v1::BindingDelta_Action >(_impl_.action_);
}
inline ::google::iam::v1::BindingDelta_Action BindingDelta::action() const {
  // @@protoc_insertion_point(field_get:google.iam.v1.BindingDelta.action)
  return _internal_action();
}
inline void BindingDelta::_internal_set_action(::google::iam::v1::BindingDelta_Action value) {
  
  _impl_.action_ = value;
}
inline void BindingDelta::set_action(::google::iam::v1::BindingDelta_Action value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:google.iam.v1.BindingDelta.action)
}

// string role = 2;
inline void BindingDelta::clear_role() {
  _impl_.role_.ClearToEmpty();
}
inline const std::string& BindingDelta::role() const {
  // @@protoc_insertion_point(field_get:google.iam.v1.BindingDelta.role)
  return _internal_role();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BindingDelta::set_role(ArgT0&& arg0, ArgT... args) {
 
 _impl_.role_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.iam.v1.BindingDelta.role)
}
inline std::string* BindingDelta::mutable_role() {
  std::string* _s = _internal_mutable_role();
  // @@protoc_insertion_point(field_mutable:google.iam.v1.BindingDelta.role)
  return _s;
}
inline const std::string& BindingDelta::_internal_role() const {
  return _impl_.role_.Get();
}
inline void BindingDelta::_internal_set_role(const std::string& value) {
  
  _impl_.role_.Set(value, GetArenaForAllocation());
}
inline std::string* BindingDelta::_internal_mutable_role() {
  
  return _impl_.role_.Mutable(GetArenaForAllocation());
}
inline std::string* BindingDelta::release_role() {
  // @@protoc_insertion_point(field_release:google.iam.v1.BindingDelta.role)
  return _impl_.role_.Release();
}
inline void BindingDelta::set_allocated_role(std::string* role) {
  if (role != nullptr) {
    
  } else {
    
  }
  _impl_.role_.SetAllocated(role, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.role_.IsDefault()) {
    _impl_.role_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.iam.v1.BindingDelta.role)
}

// string member = 3;
inline void BindingDelta::clear_member() {
  _impl_.member_.ClearToEmpty();
}
inline const std::string& BindingDelta::member() const {
  // @@protoc_insertion_point(field_get:google.iam.v1.BindingDelta.member)
  return _internal_member();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BindingDelta::set_member(ArgT0&& arg0, ArgT... args) {
 
 _impl_.member_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.iam.v1.BindingDelta.member)
}
inline std::string* BindingDelta::mutable_member() {
  std::string* _s = _internal_mutable_member();
  // @@protoc_insertion_point(field_mutable:google.iam.v1.BindingDelta.member)
  return _s;
}
inline const std::string& BindingDelta::_internal_member() const {
  return _impl_.member_.Get();
}
inline void BindingDelta::_internal_set_member(const std::string& value) {
  
  _impl_.member_.Set(value, GetArenaForAllocation());
}
inline std::string* BindingDelta::_internal_mutable_member() {
  
  return _impl_.member_.Mutable(GetArenaForAllocation());
}
inline std::string* BindingDelta::release_member() {
  // @@protoc_insertion_point(field_release:google.iam.v1.BindingDelta.member)
  return _impl_.member_.Release();
}
inline void BindingDelta::set_allocated_member(std::string* member) {
  if (member != nullptr) {
    
  } else {
    
  }
  _impl_.member_.SetAllocated(member, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.member_.IsDefault()) {
    _impl_.member_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.iam.v1.BindingDelta.member)
}

// .google.type.Expr condition = 4;
inline bool BindingDelta::_internal_has_condition() const {
  return this != internal_default_instance() && _impl_.condition_ != nullptr;
}
inline bool BindingDelta::has_condition() const {
  return _internal_has_condition();
}
inline const ::google::type::Expr& BindingDelta::_internal_condition() const {
  const ::google::type::Expr* p = _impl_.condition_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::type::Expr&>(
      ::google::type::_Expr_default_instance_);
}
inline const ::google::type::Expr& BindingDelta::condition() const {
  // @@protoc_insertion_point(field_get:google.iam.v1.BindingDelta.condition)
  return _internal_condition();
}
inline void BindingDelta::unsafe_arena_set_allocated_condition(
    ::google::type::Expr* condition) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.condition_);
  }
  _impl_.condition_ = condition;
  if (condition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.v1.BindingDelta.condition)
}
inline ::google::type::Expr* BindingDelta::release_condition() {
  
  ::google::type::Expr* temp = _impl_.condition_;
  _impl_.condition_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::type::Expr* BindingDelta::unsafe_arena_release_condition() {
  // @@protoc_insertion_point(field_release:google.iam.v1.BindingDelta.condition)
  
  ::google::type::Expr* temp = _impl_.condition_;
  _impl_.condition_ = nullptr;
  return temp;
}
inline ::google::type::Expr* BindingDelta::_internal_mutable_condition() {
  
  if (_impl_.condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::type::Expr>(GetArenaForAllocation());
    _impl_.condition_ = p;
  }
  return _impl_.condition_;
}
inline ::google::type::Expr* BindingDelta::mutable_condition() {
  ::google::type::Expr* _msg = _internal_mutable_condition();
  // @@protoc_insertion_point(field_mutable:google.iam.v1.BindingDelta.condition)
  return _msg;
}
inline void BindingDelta::set_allocated_condition(::google::type::Expr* condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.condition_);
  }
  if (condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(condition));
    if (message_arena != submessage_arena) {
      condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, condition, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.condition_ = condition;
  // @@protoc_insertion_point(field_set_allocated:google.iam.v1.BindingDelta.condition)
}

// -------------------------------------------------------------------

// AuditConfigDelta

// .google.iam.v1.AuditConfigDelta.Action action = 1;
inline void AuditConfigDelta::clear_action() {
  _impl_.action_ = 0;
}
inline ::google::iam::v1::AuditConfigDelta_Action AuditConfigDelta::_internal_action() const {
  return static_cast< ::google::iam::v1::AuditConfigDelta_Action >(_impl_.action_);
}
inline ::google::iam::v1::AuditConfigDelta_Action AuditConfigDelta::action() const {
  // @@protoc_insertion_point(field_get:google.iam.v1.AuditConfigDelta.action)
  return _internal_action();
}
inline void AuditConfigDelta::_internal_set_action(::google::iam::v1::AuditConfigDelta_Action value) {
  
  _impl_.action_ = value;
}
inline void AuditConfigDelta::set_action(::google::iam::v1::AuditConfigDelta_Action value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:google.iam.v1.AuditConfigDelta.action)
}

// string service = 2;
inline void AuditConfigDelta::clear_service() {
  _impl_.service_.ClearToEmpty();
}
inline const std::string& AuditConfigDelta::service() const {
  // @@protoc_insertion_point(field_get:google.iam.v1.AuditConfigDelta.service)
  return _internal_service();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AuditConfigDelta::set_service(ArgT0&& arg0, ArgT... args) {
 
 _impl_.service_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.iam.v1.AuditConfigDelta.service)
}
inline std::string* AuditConfigDelta::mutable_service() {
  std::string* _s = _internal_mutable_service();
  // @@protoc_insertion_point(field_mutable:google.iam.v1.AuditConfigDelta.service)
  return _s;
}
inline const std::string& AuditConfigDelta::_internal_service() const {
  return _impl_.service_.Get();
}
inline void AuditConfigDelta::_internal_set_service(const std::string& value) {
  
  _impl_.service_.Set(value, GetArenaForAllocation());
}
inline std::string* AuditConfigDelta::_internal_mutable_service() {
  
  return _impl_.service_.Mutable(GetArenaForAllocation());
}
inline std::string* AuditConfigDelta::release_service() {
  // @@protoc_insertion_point(field_release:google.iam.v1.AuditConfigDelta.service)
  return _impl_.service_.Release();
}
inline void AuditConfigDelta::set_allocated_service(std::string* service) {
  if (service != nullptr) {
    
  } else {
    
  }
  _impl_.service_.SetAllocated(service, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.service_.IsDefault()) {
    _impl_.service_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.iam.v1.AuditConfigDelta.service)
}

// string exempted_member = 3;
inline void AuditConfigDelta::clear_exempted_member() {
  _impl_.exempted_member_.ClearToEmpty();
}
inline const std::string& AuditConfigDelta::exempted_member() const {
  // @@protoc_insertion_point(field_get:google.iam.v1.AuditConfigDelta.exempted_member)
  return _internal_exempted_member();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AuditConfigDelta::set_exempted_member(ArgT0&& arg0, ArgT... args) {
 
 _impl_.exempted_member_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.iam.v1.AuditConfigDelta.exempted_member)
}
inline std::string* AuditConfigDelta::mutable_exempted_member() {
  std::string* _s = _internal_mutable_exempted_member();
  // @@protoc_insertion_point(field_mutable:google.iam.v1.AuditConfigDelta.exempted_member)
  return _s;
}
inline const std::string& AuditConfigDelta::_internal_exempted_member() const {
  return _impl_.exempted_member_.Get();
}
inline void AuditConfigDelta::_internal_set_exempted_member(const std::string& value) {
  
  _impl_.exempted_member_.Set(value, GetArenaForAllocation());
}
inline std::string* AuditConfigDelta::_internal_mutable_exempted_member() {
  
  return _impl_.exempted_member_.Mutable(GetArenaForAllocation());
}
inline std::string* AuditConfigDelta::release_exempted_member() {
  // @@protoc_insertion_point(field_release:google.iam.v1.AuditConfigDelta.exempted_member)
  return _impl_.exempted_member_.Release();
}
inline void AuditConfigDelta::set_allocated_exempted_member(std::string* exempted_member) {
  if (exempted_member != nullptr) {
    
  } else {
    
  }
  _impl_.exempted_member_.SetAllocated(exempted_member, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.exempted_member_.IsDefault()) {
    _impl_.exempted_member_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.iam.v1.AuditConfigDelta.exempted_member)
}

// string log_type = 4;
inline void AuditConfigDelta::clear_log_type() {
  _impl_.log_type_.ClearToEmpty();
}
inline const std::string& AuditConfigDelta::log_type() const {
  // @@protoc_insertion_point(field_get:google.iam.v1.AuditConfigDelta.log_type)
  return _internal_log_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AuditConfigDelta::set_log_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.log_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.iam.v1.AuditConfigDelta.log_type)
}
inline std::string* AuditConfigDelta::mutable_log_type() {
  std::string* _s = _internal_mutable_log_type();
  // @@protoc_insertion_point(field_mutable:google.iam.v1.AuditConfigDelta.log_type)
  return _s;
}
inline const std::string& AuditConfigDelta::_internal_log_type() const {
  return _impl_.log_type_.Get();
}
inline void AuditConfigDelta::_internal_set_log_type(const std::string& value) {
  
  _impl_.log_type_.Set(value, GetArenaForAllocation());
}
inline std::string* AuditConfigDelta::_internal_mutable_log_type() {
  
  return _impl_.log_type_.Mutable(GetArenaForAllocation());
}
inline std::string* AuditConfigDelta::release_log_type() {
  // @@protoc_insertion_point(field_release:google.iam.v1.AuditConfigDelta.log_type)
  return _impl_.log_type_.Release();
}
inline void AuditConfigDelta::set_allocated_log_type(std::string* log_type) {
  if (log_type != nullptr) {
    
  } else {
    
  }
  _impl_.log_type_.SetAllocated(log_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.log_type_.IsDefault()) {
    _impl_.log_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.iam.v1.AuditConfigDelta.log_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace iam
}  // namespace google

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::google::iam::v1::AuditLogConfig_LogType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::iam::v1::AuditLogConfig_LogType>() {
  return ::google::iam::v1::AuditLogConfig_LogType_descriptor();
}
template <> struct is_proto_enum< ::google::iam::v1::BindingDelta_Action> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::iam::v1::BindingDelta_Action>() {
  return ::google::iam::v1::BindingDelta_Action_descriptor();
}
template <> struct is_proto_enum< ::google::iam::v1::AuditConfigDelta_Action> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::iam::v1::AuditConfigDelta_Action>() {
  return ::google::iam::v1::AuditConfigDelta_Action_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fiam_2fv1_2fpolicy_2eproto
