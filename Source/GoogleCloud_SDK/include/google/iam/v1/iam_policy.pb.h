// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/iam/v1/iam_policy.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fiam_2fv1_2fiam_5fpolicy_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fiam_2fv1_2fiam_5fpolicy_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include "google/api/field_behavior.pb.h"
#include "google/api/resource.pb.h"
#include "google/iam/v1/options.pb.h"
#include "google/iam/v1/policy.pb.h"
#include <google/protobuf/field_mask.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fiam_2fv1_2fiam_5fpolicy_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fiam_2fv1_2fiam_5fpolicy_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fiam_2fv1_2fiam_5fpolicy_2eproto;
namespace google {
namespace iam {
namespace v1 {
class GetIamPolicyRequest;
struct GetIamPolicyRequestDefaultTypeInternal;
extern GetIamPolicyRequestDefaultTypeInternal _GetIamPolicyRequest_default_instance_;
class SetIamPolicyRequest;
struct SetIamPolicyRequestDefaultTypeInternal;
extern SetIamPolicyRequestDefaultTypeInternal _SetIamPolicyRequest_default_instance_;
class TestIamPermissionsRequest;
struct TestIamPermissionsRequestDefaultTypeInternal;
extern TestIamPermissionsRequestDefaultTypeInternal _TestIamPermissionsRequest_default_instance_;
class TestIamPermissionsResponse;
struct TestIamPermissionsResponseDefaultTypeInternal;
extern TestIamPermissionsResponseDefaultTypeInternal _TestIamPermissionsResponse_default_instance_;
}  // namespace v1
}  // namespace iam
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::iam::v1::GetIamPolicyRequest* Arena::CreateMaybeMessage<::google::iam::v1::GetIamPolicyRequest>(Arena*);
template<> ::google::iam::v1::SetIamPolicyRequest* Arena::CreateMaybeMessage<::google::iam::v1::SetIamPolicyRequest>(Arena*);
template<> ::google::iam::v1::TestIamPermissionsRequest* Arena::CreateMaybeMessage<::google::iam::v1::TestIamPermissionsRequest>(Arena*);
template<> ::google::iam::v1::TestIamPermissionsResponse* Arena::CreateMaybeMessage<::google::iam::v1::TestIamPermissionsResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace iam {
namespace v1 {

// ===================================================================

class SetIamPolicyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.iam.v1.SetIamPolicyRequest) */ {
 public:
  inline SetIamPolicyRequest() : SetIamPolicyRequest(nullptr) {}
  ~SetIamPolicyRequest() override;
  explicit PROTOBUF_CONSTEXPR SetIamPolicyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetIamPolicyRequest(const SetIamPolicyRequest& from);
  SetIamPolicyRequest(SetIamPolicyRequest&& from) noexcept
    : SetIamPolicyRequest() {
    *this = ::std::move(from);
  }

  inline SetIamPolicyRequest& operator=(const SetIamPolicyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetIamPolicyRequest& operator=(SetIamPolicyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetIamPolicyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetIamPolicyRequest* internal_default_instance() {
    return reinterpret_cast<const SetIamPolicyRequest*>(
               &_SetIamPolicyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SetIamPolicyRequest& a, SetIamPolicyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetIamPolicyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetIamPolicyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetIamPolicyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetIamPolicyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetIamPolicyRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetIamPolicyRequest& from) {
    SetIamPolicyRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetIamPolicyRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.iam.v1.SetIamPolicyRequest";
  }
  protected:
  explicit SetIamPolicyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourceFieldNumber = 1,
    kPolicyFieldNumber = 2,
    kUpdateMaskFieldNumber = 3,
  };
  // string resource = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_resource();
  const std::string& resource() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_resource(ArgT0&& arg0, ArgT... args);
  std::string* mutable_resource();
  PROTOBUF_NODISCARD std::string* release_resource();
  void set_allocated_resource(std::string* resource);
  private:
  const std::string& _internal_resource() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_resource(const std::string& value);
  std::string* _internal_mutable_resource();
  public:

  // .google.iam.v1.Policy policy = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_policy() const;
  private:
  bool _internal_has_policy() const;
  public:
  void clear_policy();
  const ::google::iam::v1::Policy& policy() const;
  PROTOBUF_NODISCARD ::google::iam::v1::Policy* release_policy();
  ::google::iam::v1::Policy* mutable_policy();
  void set_allocated_policy(::google::iam::v1::Policy* policy);
  private:
  const ::google::iam::v1::Policy& _internal_policy() const;
  ::google::iam::v1::Policy* _internal_mutable_policy();
  public:
  void unsafe_arena_set_allocated_policy(
      ::google::iam::v1::Policy* policy);
  ::google::iam::v1::Policy* unsafe_arena_release_policy();

  // .google.protobuf.FieldMask update_mask = 3;
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // @@protoc_insertion_point(class_scope:google.iam.v1.SetIamPolicyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resource_;
    ::google::iam::v1::Policy* policy_;
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fiam_2fv1_2fiam_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class GetIamPolicyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.iam.v1.GetIamPolicyRequest) */ {
 public:
  inline GetIamPolicyRequest() : GetIamPolicyRequest(nullptr) {}
  ~GetIamPolicyRequest() override;
  explicit PROTOBUF_CONSTEXPR GetIamPolicyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetIamPolicyRequest(const GetIamPolicyRequest& from);
  GetIamPolicyRequest(GetIamPolicyRequest&& from) noexcept
    : GetIamPolicyRequest() {
    *this = ::std::move(from);
  }

  inline GetIamPolicyRequest& operator=(const GetIamPolicyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetIamPolicyRequest& operator=(GetIamPolicyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetIamPolicyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetIamPolicyRequest* internal_default_instance() {
    return reinterpret_cast<const GetIamPolicyRequest*>(
               &_GetIamPolicyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetIamPolicyRequest& a, GetIamPolicyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetIamPolicyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetIamPolicyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetIamPolicyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetIamPolicyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetIamPolicyRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetIamPolicyRequest& from) {
    GetIamPolicyRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetIamPolicyRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.iam.v1.GetIamPolicyRequest";
  }
  protected:
  explicit GetIamPolicyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourceFieldNumber = 1,
    kOptionsFieldNumber = 2,
  };
  // string resource = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_resource();
  const std::string& resource() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_resource(ArgT0&& arg0, ArgT... args);
  std::string* mutable_resource();
  PROTOBUF_NODISCARD std::string* release_resource();
  void set_allocated_resource(std::string* resource);
  private:
  const std::string& _internal_resource() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_resource(const std::string& value);
  std::string* _internal_mutable_resource();
  public:

  // .google.iam.v1.GetPolicyOptions options = 2;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::google::iam::v1::GetPolicyOptions& options() const;
  PROTOBUF_NODISCARD ::google::iam::v1::GetPolicyOptions* release_options();
  ::google::iam::v1::GetPolicyOptions* mutable_options();
  void set_allocated_options(::google::iam::v1::GetPolicyOptions* options);
  private:
  const ::google::iam::v1::GetPolicyOptions& _internal_options() const;
  ::google::iam::v1::GetPolicyOptions* _internal_mutable_options();
  public:
  void unsafe_arena_set_allocated_options(
      ::google::iam::v1::GetPolicyOptions* options);
  ::google::iam::v1::GetPolicyOptions* unsafe_arena_release_options();

  // @@protoc_insertion_point(class_scope:google.iam.v1.GetIamPolicyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resource_;
    ::google::iam::v1::GetPolicyOptions* options_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fiam_2fv1_2fiam_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class TestIamPermissionsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.iam.v1.TestIamPermissionsRequest) */ {
 public:
  inline TestIamPermissionsRequest() : TestIamPermissionsRequest(nullptr) {}
  ~TestIamPermissionsRequest() override;
  explicit PROTOBUF_CONSTEXPR TestIamPermissionsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestIamPermissionsRequest(const TestIamPermissionsRequest& from);
  TestIamPermissionsRequest(TestIamPermissionsRequest&& from) noexcept
    : TestIamPermissionsRequest() {
    *this = ::std::move(from);
  }

  inline TestIamPermissionsRequest& operator=(const TestIamPermissionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestIamPermissionsRequest& operator=(TestIamPermissionsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestIamPermissionsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestIamPermissionsRequest* internal_default_instance() {
    return reinterpret_cast<const TestIamPermissionsRequest*>(
               &_TestIamPermissionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TestIamPermissionsRequest& a, TestIamPermissionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TestIamPermissionsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestIamPermissionsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestIamPermissionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestIamPermissionsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestIamPermissionsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TestIamPermissionsRequest& from) {
    TestIamPermissionsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestIamPermissionsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.iam.v1.TestIamPermissionsRequest";
  }
  protected:
  explicit TestIamPermissionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPermissionsFieldNumber = 2,
    kResourceFieldNumber = 1,
  };
  // repeated string permissions = 2 [(.google.api.field_behavior) = REQUIRED];
  int permissions_size() const;
  private:
  int _internal_permissions_size() const;
  public:
  void clear_permissions();
  const std::string& permissions(int index) const;
  std::string* mutable_permissions(int index);
  void set_permissions(int index, const std::string& value);
  void set_permissions(int index, std::string&& value);
  void set_permissions(int index, const char* value);
  void set_permissions(int index, const char* value, size_t size);
  std::string* add_permissions();
  void add_permissions(const std::string& value);
  void add_permissions(std::string&& value);
  void add_permissions(const char* value);
  void add_permissions(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& permissions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_permissions();
  private:
  const std::string& _internal_permissions(int index) const;
  std::string* _internal_add_permissions();
  public:

  // string resource = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_resource();
  const std::string& resource() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_resource(ArgT0&& arg0, ArgT... args);
  std::string* mutable_resource();
  PROTOBUF_NODISCARD std::string* release_resource();
  void set_allocated_resource(std::string* resource);
  private:
  const std::string& _internal_resource() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_resource(const std::string& value);
  std::string* _internal_mutable_resource();
  public:

  // @@protoc_insertion_point(class_scope:google.iam.v1.TestIamPermissionsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> permissions_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resource_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fiam_2fv1_2fiam_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class TestIamPermissionsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.iam.v1.TestIamPermissionsResponse) */ {
 public:
  inline TestIamPermissionsResponse() : TestIamPermissionsResponse(nullptr) {}
  ~TestIamPermissionsResponse() override;
  explicit PROTOBUF_CONSTEXPR TestIamPermissionsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestIamPermissionsResponse(const TestIamPermissionsResponse& from);
  TestIamPermissionsResponse(TestIamPermissionsResponse&& from) noexcept
    : TestIamPermissionsResponse() {
    *this = ::std::move(from);
  }

  inline TestIamPermissionsResponse& operator=(const TestIamPermissionsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestIamPermissionsResponse& operator=(TestIamPermissionsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestIamPermissionsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestIamPermissionsResponse* internal_default_instance() {
    return reinterpret_cast<const TestIamPermissionsResponse*>(
               &_TestIamPermissionsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TestIamPermissionsResponse& a, TestIamPermissionsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TestIamPermissionsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestIamPermissionsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestIamPermissionsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestIamPermissionsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestIamPermissionsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TestIamPermissionsResponse& from) {
    TestIamPermissionsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestIamPermissionsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.iam.v1.TestIamPermissionsResponse";
  }
  protected:
  explicit TestIamPermissionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPermissionsFieldNumber = 1,
  };
  // repeated string permissions = 1;
  int permissions_size() const;
  private:
  int _internal_permissions_size() const;
  public:
  void clear_permissions();
  const std::string& permissions(int index) const;
  std::string* mutable_permissions(int index);
  void set_permissions(int index, const std::string& value);
  void set_permissions(int index, std::string&& value);
  void set_permissions(int index, const char* value);
  void set_permissions(int index, const char* value, size_t size);
  std::string* add_permissions();
  void add_permissions(const std::string& value);
  void add_permissions(std::string&& value);
  void add_permissions(const char* value);
  void add_permissions(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& permissions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_permissions();
  private:
  const std::string& _internal_permissions(int index) const;
  std::string* _internal_add_permissions();
  public:

  // @@protoc_insertion_point(class_scope:google.iam.v1.TestIamPermissionsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> permissions_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fiam_2fv1_2fiam_5fpolicy_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SetIamPolicyRequest

// string resource = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void SetIamPolicyRequest::clear_resource() {
  _impl_.resource_.ClearToEmpty();
}
inline const std::string& SetIamPolicyRequest::resource() const {
  // @@protoc_insertion_point(field_get:google.iam.v1.SetIamPolicyRequest.resource)
  return _internal_resource();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetIamPolicyRequest::set_resource(ArgT0&& arg0, ArgT... args) {
 
 _impl_.resource_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.iam.v1.SetIamPolicyRequest.resource)
}
inline std::string* SetIamPolicyRequest::mutable_resource() {
  std::string* _s = _internal_mutable_resource();
  // @@protoc_insertion_point(field_mutable:google.iam.v1.SetIamPolicyRequest.resource)
  return _s;
}
inline const std::string& SetIamPolicyRequest::_internal_resource() const {
  return _impl_.resource_.Get();
}
inline void SetIamPolicyRequest::_internal_set_resource(const std::string& value) {
  
  _impl_.resource_.Set(value, GetArenaForAllocation());
}
inline std::string* SetIamPolicyRequest::_internal_mutable_resource() {
  
  return _impl_.resource_.Mutable(GetArenaForAllocation());
}
inline std::string* SetIamPolicyRequest::release_resource() {
  // @@protoc_insertion_point(field_release:google.iam.v1.SetIamPolicyRequest.resource)
  return _impl_.resource_.Release();
}
inline void SetIamPolicyRequest::set_allocated_resource(std::string* resource) {
  if (resource != nullptr) {
    
  } else {
    
  }
  _impl_.resource_.SetAllocated(resource, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.resource_.IsDefault()) {
    _impl_.resource_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.iam.v1.SetIamPolicyRequest.resource)
}

// .google.iam.v1.Policy policy = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool SetIamPolicyRequest::_internal_has_policy() const {
  return this != internal_default_instance() && _impl_.policy_ != nullptr;
}
inline bool SetIamPolicyRequest::has_policy() const {
  return _internal_has_policy();
}
inline const ::google::iam::v1::Policy& SetIamPolicyRequest::_internal_policy() const {
  const ::google::iam::v1::Policy* p = _impl_.policy_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::iam::v1::Policy&>(
      ::google::iam::v1::_Policy_default_instance_);
}
inline const ::google::iam::v1::Policy& SetIamPolicyRequest::policy() const {
  // @@protoc_insertion_point(field_get:google.iam.v1.SetIamPolicyRequest.policy)
  return _internal_policy();
}
inline void SetIamPolicyRequest::unsafe_arena_set_allocated_policy(
    ::google::iam::v1::Policy* policy) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.policy_);
  }
  _impl_.policy_ = policy;
  if (policy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.v1.SetIamPolicyRequest.policy)
}
inline ::google::iam::v1::Policy* SetIamPolicyRequest::release_policy() {
  
  ::google::iam::v1::Policy* temp = _impl_.policy_;
  _impl_.policy_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::iam::v1::Policy* SetIamPolicyRequest::unsafe_arena_release_policy() {
  // @@protoc_insertion_point(field_release:google.iam.v1.SetIamPolicyRequest.policy)
  
  ::google::iam::v1::Policy* temp = _impl_.policy_;
  _impl_.policy_ = nullptr;
  return temp;
}
inline ::google::iam::v1::Policy* SetIamPolicyRequest::_internal_mutable_policy() {
  
  if (_impl_.policy_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::iam::v1::Policy>(GetArenaForAllocation());
    _impl_.policy_ = p;
  }
  return _impl_.policy_;
}
inline ::google::iam::v1::Policy* SetIamPolicyRequest::mutable_policy() {
  ::google::iam::v1::Policy* _msg = _internal_mutable_policy();
  // @@protoc_insertion_point(field_mutable:google.iam.v1.SetIamPolicyRequest.policy)
  return _msg;
}
inline void SetIamPolicyRequest::set_allocated_policy(::google::iam::v1::Policy* policy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.policy_);
  }
  if (policy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(policy));
    if (message_arena != submessage_arena) {
      policy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, policy, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.policy_ = policy;
  // @@protoc_insertion_point(field_set_allocated:google.iam.v1.SetIamPolicyRequest.policy)
}

// .google.protobuf.FieldMask update_mask = 3;
inline bool SetIamPolicyRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && _impl_.update_mask_ != nullptr;
}
inline bool SetIamPolicyRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& SetIamPolicyRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = _impl_.update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& SetIamPolicyRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:google.iam.v1.SetIamPolicyRequest.update_mask)
  return _internal_update_mask();
}
inline void SetIamPolicyRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  _impl_.update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.v1.SetIamPolicyRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* SetIamPolicyRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* SetIamPolicyRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:google.iam.v1.SetIamPolicyRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* SetIamPolicyRequest::_internal_mutable_update_mask() {
  
  if (_impl_.update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    _impl_.update_mask_ = p;
  }
  return _impl_.update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* SetIamPolicyRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:google.iam.v1.SetIamPolicyRequest.update_mask)
  return _msg;
}
inline void SetIamPolicyRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:google.iam.v1.SetIamPolicyRequest.update_mask)
}

// -------------------------------------------------------------------

// GetIamPolicyRequest

// string resource = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetIamPolicyRequest::clear_resource() {
  _impl_.resource_.ClearToEmpty();
}
inline const std::string& GetIamPolicyRequest::resource() const {
  // @@protoc_insertion_point(field_get:google.iam.v1.GetIamPolicyRequest.resource)
  return _internal_resource();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetIamPolicyRequest::set_resource(ArgT0&& arg0, ArgT... args) {
 
 _impl_.resource_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.iam.v1.GetIamPolicyRequest.resource)
}
inline std::string* GetIamPolicyRequest::mutable_resource() {
  std::string* _s = _internal_mutable_resource();
  // @@protoc_insertion_point(field_mutable:google.iam.v1.GetIamPolicyRequest.resource)
  return _s;
}
inline const std::string& GetIamPolicyRequest::_internal_resource() const {
  return _impl_.resource_.Get();
}
inline void GetIamPolicyRequest::_internal_set_resource(const std::string& value) {
  
  _impl_.resource_.Set(value, GetArenaForAllocation());
}
inline std::string* GetIamPolicyRequest::_internal_mutable_resource() {
  
  return _impl_.resource_.Mutable(GetArenaForAllocation());
}
inline std::string* GetIamPolicyRequest::release_resource() {
  // @@protoc_insertion_point(field_release:google.iam.v1.GetIamPolicyRequest.resource)
  return _impl_.resource_.Release();
}
inline void GetIamPolicyRequest::set_allocated_resource(std::string* resource) {
  if (resource != nullptr) {
    
  } else {
    
  }
  _impl_.resource_.SetAllocated(resource, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.resource_.IsDefault()) {
    _impl_.resource_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.iam.v1.GetIamPolicyRequest.resource)
}

// .google.iam.v1.GetPolicyOptions options = 2;
inline bool GetIamPolicyRequest::_internal_has_options() const {
  return this != internal_default_instance() && _impl_.options_ != nullptr;
}
inline bool GetIamPolicyRequest::has_options() const {
  return _internal_has_options();
}
inline const ::google::iam::v1::GetPolicyOptions& GetIamPolicyRequest::_internal_options() const {
  const ::google::iam::v1::GetPolicyOptions* p = _impl_.options_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::iam::v1::GetPolicyOptions&>(
      ::google::iam::v1::_GetPolicyOptions_default_instance_);
}
inline const ::google::iam::v1::GetPolicyOptions& GetIamPolicyRequest::options() const {
  // @@protoc_insertion_point(field_get:google.iam.v1.GetIamPolicyRequest.options)
  return _internal_options();
}
inline void GetIamPolicyRequest::unsafe_arena_set_allocated_options(
    ::google::iam::v1::GetPolicyOptions* options) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.options_);
  }
  _impl_.options_ = options;
  if (options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.v1.GetIamPolicyRequest.options)
}
inline ::google::iam::v1::GetPolicyOptions* GetIamPolicyRequest::release_options() {
  
  ::google::iam::v1::GetPolicyOptions* temp = _impl_.options_;
  _impl_.options_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::iam::v1::GetPolicyOptions* GetIamPolicyRequest::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_release:google.iam.v1.GetIamPolicyRequest.options)
  
  ::google::iam::v1::GetPolicyOptions* temp = _impl_.options_;
  _impl_.options_ = nullptr;
  return temp;
}
inline ::google::iam::v1::GetPolicyOptions* GetIamPolicyRequest::_internal_mutable_options() {
  
  if (_impl_.options_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::iam::v1::GetPolicyOptions>(GetArenaForAllocation());
    _impl_.options_ = p;
  }
  return _impl_.options_;
}
inline ::google::iam::v1::GetPolicyOptions* GetIamPolicyRequest::mutable_options() {
  ::google::iam::v1::GetPolicyOptions* _msg = _internal_mutable_options();
  // @@protoc_insertion_point(field_mutable:google.iam.v1.GetIamPolicyRequest.options)
  return _msg;
}
inline void GetIamPolicyRequest::set_allocated_options(::google::iam::v1::GetPolicyOptions* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.options_);
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(options));
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.options_ = options;
  // @@protoc_insertion_point(field_set_allocated:google.iam.v1.GetIamPolicyRequest.options)
}

// -------------------------------------------------------------------

// TestIamPermissionsRequest

// string resource = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void TestIamPermissionsRequest::clear_resource() {
  _impl_.resource_.ClearToEmpty();
}
inline const std::string& TestIamPermissionsRequest::resource() const {
  // @@protoc_insertion_point(field_get:google.iam.v1.TestIamPermissionsRequest.resource)
  return _internal_resource();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestIamPermissionsRequest::set_resource(ArgT0&& arg0, ArgT... args) {
 
 _impl_.resource_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.iam.v1.TestIamPermissionsRequest.resource)
}
inline std::string* TestIamPermissionsRequest::mutable_resource() {
  std::string* _s = _internal_mutable_resource();
  // @@protoc_insertion_point(field_mutable:google.iam.v1.TestIamPermissionsRequest.resource)
  return _s;
}
inline const std::string& TestIamPermissionsRequest::_internal_resource() const {
  return _impl_.resource_.Get();
}
inline void TestIamPermissionsRequest::_internal_set_resource(const std::string& value) {
  
  _impl_.resource_.Set(value, GetArenaForAllocation());
}
inline std::string* TestIamPermissionsRequest::_internal_mutable_resource() {
  
  return _impl_.resource_.Mutable(GetArenaForAllocation());
}
inline std::string* TestIamPermissionsRequest::release_resource() {
  // @@protoc_insertion_point(field_release:google.iam.v1.TestIamPermissionsRequest.resource)
  return _impl_.resource_.Release();
}
inline void TestIamPermissionsRequest::set_allocated_resource(std::string* resource) {
  if (resource != nullptr) {
    
  } else {
    
  }
  _impl_.resource_.SetAllocated(resource, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.resource_.IsDefault()) {
    _impl_.resource_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.iam.v1.TestIamPermissionsRequest.resource)
}

// repeated string permissions = 2 [(.google.api.field_behavior) = REQUIRED];
inline int TestIamPermissionsRequest::_internal_permissions_size() const {
  return _impl_.permissions_.size();
}
inline int TestIamPermissionsRequest::permissions_size() const {
  return _internal_permissions_size();
}
inline void TestIamPermissionsRequest::clear_permissions() {
  _impl_.permissions_.Clear();
}
inline std::string* TestIamPermissionsRequest::add_permissions() {
  std::string* _s = _internal_add_permissions();
  // @@protoc_insertion_point(field_add_mutable:google.iam.v1.TestIamPermissionsRequest.permissions)
  return _s;
}
inline const std::string& TestIamPermissionsRequest::_internal_permissions(int index) const {
  return _impl_.permissions_.Get(index);
}
inline const std::string& TestIamPermissionsRequest::permissions(int index) const {
  // @@protoc_insertion_point(field_get:google.iam.v1.TestIamPermissionsRequest.permissions)
  return _internal_permissions(index);
}
inline std::string* TestIamPermissionsRequest::mutable_permissions(int index) {
  // @@protoc_insertion_point(field_mutable:google.iam.v1.TestIamPermissionsRequest.permissions)
  return _impl_.permissions_.Mutable(index);
}
inline void TestIamPermissionsRequest::set_permissions(int index, const std::string& value) {
  _impl_.permissions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.iam.v1.TestIamPermissionsRequest.permissions)
}
inline void TestIamPermissionsRequest::set_permissions(int index, std::string&& value) {
  _impl_.permissions_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.iam.v1.TestIamPermissionsRequest.permissions)
}
inline void TestIamPermissionsRequest::set_permissions(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.permissions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.iam.v1.TestIamPermissionsRequest.permissions)
}
inline void TestIamPermissionsRequest::set_permissions(int index, const char* value, size_t size) {
  _impl_.permissions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.iam.v1.TestIamPermissionsRequest.permissions)
}
inline std::string* TestIamPermissionsRequest::_internal_add_permissions() {
  return _impl_.permissions_.Add();
}
inline void TestIamPermissionsRequest::add_permissions(const std::string& value) {
  _impl_.permissions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.iam.v1.TestIamPermissionsRequest.permissions)
}
inline void TestIamPermissionsRequest::add_permissions(std::string&& value) {
  _impl_.permissions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.iam.v1.TestIamPermissionsRequest.permissions)
}
inline void TestIamPermissionsRequest::add_permissions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.permissions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.iam.v1.TestIamPermissionsRequest.permissions)
}
inline void TestIamPermissionsRequest::add_permissions(const char* value, size_t size) {
  _impl_.permissions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.iam.v1.TestIamPermissionsRequest.permissions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TestIamPermissionsRequest::permissions() const {
  // @@protoc_insertion_point(field_list:google.iam.v1.TestIamPermissionsRequest.permissions)
  return _impl_.permissions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TestIamPermissionsRequest::mutable_permissions() {
  // @@protoc_insertion_point(field_mutable_list:google.iam.v1.TestIamPermissionsRequest.permissions)
  return &_impl_.permissions_;
}

// -------------------------------------------------------------------

// TestIamPermissionsResponse

// repeated string permissions = 1;
inline int TestIamPermissionsResponse::_internal_permissions_size() const {
  return _impl_.permissions_.size();
}
inline int TestIamPermissionsResponse::permissions_size() const {
  return _internal_permissions_size();
}
inline void TestIamPermissionsResponse::clear_permissions() {
  _impl_.permissions_.Clear();
}
inline std::string* TestIamPermissionsResponse::add_permissions() {
  std::string* _s = _internal_add_permissions();
  // @@protoc_insertion_point(field_add_mutable:google.iam.v1.TestIamPermissionsResponse.permissions)
  return _s;
}
inline const std::string& TestIamPermissionsResponse::_internal_permissions(int index) const {
  return _impl_.permissions_.Get(index);
}
inline const std::string& TestIamPermissionsResponse::permissions(int index) const {
  // @@protoc_insertion_point(field_get:google.iam.v1.TestIamPermissionsResponse.permissions)
  return _internal_permissions(index);
}
inline std::string* TestIamPermissionsResponse::mutable_permissions(int index) {
  // @@protoc_insertion_point(field_mutable:google.iam.v1.TestIamPermissionsResponse.permissions)
  return _impl_.permissions_.Mutable(index);
}
inline void TestIamPermissionsResponse::set_permissions(int index, const std::string& value) {
  _impl_.permissions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.iam.v1.TestIamPermissionsResponse.permissions)
}
inline void TestIamPermissionsResponse::set_permissions(int index, std::string&& value) {
  _impl_.permissions_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.iam.v1.TestIamPermissionsResponse.permissions)
}
inline void TestIamPermissionsResponse::set_permissions(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.permissions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.iam.v1.TestIamPermissionsResponse.permissions)
}
inline void TestIamPermissionsResponse::set_permissions(int index, const char* value, size_t size) {
  _impl_.permissions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.iam.v1.TestIamPermissionsResponse.permissions)
}
inline std::string* TestIamPermissionsResponse::_internal_add_permissions() {
  return _impl_.permissions_.Add();
}
inline void TestIamPermissionsResponse::add_permissions(const std::string& value) {
  _impl_.permissions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.iam.v1.TestIamPermissionsResponse.permissions)
}
inline void TestIamPermissionsResponse::add_permissions(std::string&& value) {
  _impl_.permissions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.iam.v1.TestIamPermissionsResponse.permissions)
}
inline void TestIamPermissionsResponse::add_permissions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.permissions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.iam.v1.TestIamPermissionsResponse.permissions)
}
inline void TestIamPermissionsResponse::add_permissions(const char* value, size_t size) {
  _impl_.permissions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.iam.v1.TestIamPermissionsResponse.permissions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TestIamPermissionsResponse::permissions() const {
  // @@protoc_insertion_point(field_list:google.iam.v1.TestIamPermissionsResponse.permissions)
  return _impl_.permissions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TestIamPermissionsResponse::mutable_permissions() {
  // @@protoc_insertion_point(field_mutable_list:google.iam.v1.TestIamPermissionsResponse.permissions)
  return &_impl_.permissions_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace iam
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fiam_2fv1_2fiam_5fpolicy_2eproto
