// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/iam/v2/policy.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fiam_2fv2_2fpolicy_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fiam_2fv2_2fpolicy_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include "google/api/field_behavior.pb.h"
#include "google/iam/v2/deny.pb.h"
#include "google/longrunning/operations.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fiam_2fv2_2fpolicy_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fiam_2fv2_2fpolicy_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fiam_2fv2_2fpolicy_2eproto;
namespace google {
namespace iam {
namespace v2 {
class CreatePolicyRequest;
struct CreatePolicyRequestDefaultTypeInternal;
extern CreatePolicyRequestDefaultTypeInternal _CreatePolicyRequest_default_instance_;
class DeletePolicyRequest;
struct DeletePolicyRequestDefaultTypeInternal;
extern DeletePolicyRequestDefaultTypeInternal _DeletePolicyRequest_default_instance_;
class GetPolicyRequest;
struct GetPolicyRequestDefaultTypeInternal;
extern GetPolicyRequestDefaultTypeInternal _GetPolicyRequest_default_instance_;
class ListPoliciesRequest;
struct ListPoliciesRequestDefaultTypeInternal;
extern ListPoliciesRequestDefaultTypeInternal _ListPoliciesRequest_default_instance_;
class ListPoliciesResponse;
struct ListPoliciesResponseDefaultTypeInternal;
extern ListPoliciesResponseDefaultTypeInternal _ListPoliciesResponse_default_instance_;
class Policy;
struct PolicyDefaultTypeInternal;
extern PolicyDefaultTypeInternal _Policy_default_instance_;
class PolicyOperationMetadata;
struct PolicyOperationMetadataDefaultTypeInternal;
extern PolicyOperationMetadataDefaultTypeInternal _PolicyOperationMetadata_default_instance_;
class PolicyRule;
struct PolicyRuleDefaultTypeInternal;
extern PolicyRuleDefaultTypeInternal _PolicyRule_default_instance_;
class Policy_AnnotationsEntry_DoNotUse;
struct Policy_AnnotationsEntry_DoNotUseDefaultTypeInternal;
extern Policy_AnnotationsEntry_DoNotUseDefaultTypeInternal _Policy_AnnotationsEntry_DoNotUse_default_instance_;
class UpdatePolicyRequest;
struct UpdatePolicyRequestDefaultTypeInternal;
extern UpdatePolicyRequestDefaultTypeInternal _UpdatePolicyRequest_default_instance_;
}  // namespace v2
}  // namespace iam
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::iam::v2::CreatePolicyRequest* Arena::CreateMaybeMessage<::google::iam::v2::CreatePolicyRequest>(Arena*);
template<> ::google::iam::v2::DeletePolicyRequest* Arena::CreateMaybeMessage<::google::iam::v2::DeletePolicyRequest>(Arena*);
template<> ::google::iam::v2::GetPolicyRequest* Arena::CreateMaybeMessage<::google::iam::v2::GetPolicyRequest>(Arena*);
template<> ::google::iam::v2::ListPoliciesRequest* Arena::CreateMaybeMessage<::google::iam::v2::ListPoliciesRequest>(Arena*);
template<> ::google::iam::v2::ListPoliciesResponse* Arena::CreateMaybeMessage<::google::iam::v2::ListPoliciesResponse>(Arena*);
template<> ::google::iam::v2::Policy* Arena::CreateMaybeMessage<::google::iam::v2::Policy>(Arena*);
template<> ::google::iam::v2::PolicyOperationMetadata* Arena::CreateMaybeMessage<::google::iam::v2::PolicyOperationMetadata>(Arena*);
template<> ::google::iam::v2::PolicyRule* Arena::CreateMaybeMessage<::google::iam::v2::PolicyRule>(Arena*);
template<> ::google::iam::v2::Policy_AnnotationsEntry_DoNotUse* Arena::CreateMaybeMessage<::google::iam::v2::Policy_AnnotationsEntry_DoNotUse>(Arena*);
template<> ::google::iam::v2::UpdatePolicyRequest* Arena::CreateMaybeMessage<::google::iam::v2::UpdatePolicyRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace iam {
namespace v2 {

// ===================================================================

class Policy_AnnotationsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Policy_AnnotationsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Policy_AnnotationsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  Policy_AnnotationsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR Policy_AnnotationsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Policy_AnnotationsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Policy_AnnotationsEntry_DoNotUse& other);
  static const Policy_AnnotationsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Policy_AnnotationsEntry_DoNotUse*>(&_Policy_AnnotationsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.iam.v2.Policy.AnnotationsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.iam.v2.Policy.AnnotationsEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fiam_2fv2_2fpolicy_2eproto;
};

// -------------------------------------------------------------------

class Policy final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.iam.v2.Policy) */ {
 public:
  inline Policy() : Policy(nullptr) {}
  ~Policy() override;
  explicit PROTOBUF_CONSTEXPR Policy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Policy(const Policy& from);
  Policy(Policy&& from) noexcept
    : Policy() {
    *this = ::std::move(from);
  }

  inline Policy& operator=(const Policy& from) {
    CopyFrom(from);
    return *this;
  }
  inline Policy& operator=(Policy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Policy& default_instance() {
    return *internal_default_instance();
  }
  static inline const Policy* internal_default_instance() {
    return reinterpret_cast<const Policy*>(
               &_Policy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Policy& a, Policy& b) {
    a.Swap(&b);
  }
  inline void Swap(Policy* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Policy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Policy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Policy>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Policy& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Policy& from) {
    Policy::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Policy* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.iam.v2.Policy";
  }
  protected:
  explicit Policy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kAnnotationsFieldNumber = 5,
    kRulesFieldNumber = 10,
    kNameFieldNumber = 1,
    kUidFieldNumber = 2,
    kKindFieldNumber = 3,
    kDisplayNameFieldNumber = 4,
    kEtagFieldNumber = 6,
    kManagingAuthorityFieldNumber = 11,
    kCreateTimeFieldNumber = 7,
    kUpdateTimeFieldNumber = 8,
    kDeleteTimeFieldNumber = 9,
  };
  // map<string, string> annotations = 5;
  int annotations_size() const;
  private:
  int _internal_annotations_size() const;
  public:
  void clear_annotations();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_annotations() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_annotations();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      annotations() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_annotations();

  // repeated .google.iam.v2.PolicyRule rules = 10;
  int rules_size() const;
  private:
  int _internal_rules_size() const;
  public:
  void clear_rules();
  ::google::iam::v2::PolicyRule* mutable_rules(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::iam::v2::PolicyRule >*
      mutable_rules();
  private:
  const ::google::iam::v2::PolicyRule& _internal_rules(int index) const;
  ::google::iam::v2::PolicyRule* _internal_add_rules();
  public:
  const ::google::iam::v2::PolicyRule& rules(int index) const;
  ::google::iam::v2::PolicyRule* add_rules();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::iam::v2::PolicyRule >&
      rules() const;

  // string name = 1 [(.google.api.field_behavior) = IMMUTABLE];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string uid = 2 [(.google.api.field_behavior) = IMMUTABLE];
  void clear_uid();
  const std::string& uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uid();
  PROTOBUF_NODISCARD std::string* release_uid();
  void set_allocated_uid(std::string* uid);
  private:
  const std::string& _internal_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uid(const std::string& value);
  std::string* _internal_mutable_uid();
  public:

  // string kind = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_kind();
  const std::string& kind() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_kind(ArgT0&& arg0, ArgT... args);
  std::string* mutable_kind();
  PROTOBUF_NODISCARD std::string* release_kind();
  void set_allocated_kind(std::string* kind);
  private:
  const std::string& _internal_kind() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_kind(const std::string& value);
  std::string* _internal_mutable_kind();
  public:

  // string display_name = 4;
  void clear_display_name();
  const std::string& display_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_display_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_display_name();
  PROTOBUF_NODISCARD std::string* release_display_name();
  void set_allocated_display_name(std::string* display_name);
  private:
  const std::string& _internal_display_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_display_name(const std::string& value);
  std::string* _internal_mutable_display_name();
  public:

  // string etag = 6;
  void clear_etag();
  const std::string& etag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_etag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_etag();
  PROTOBUF_NODISCARD std::string* release_etag();
  void set_allocated_etag(std::string* etag);
  private:
  const std::string& _internal_etag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_etag(const std::string& value);
  std::string* _internal_mutable_etag();
  public:

  // string managing_authority = 11 [(.google.api.field_behavior) = IMMUTABLE];
  void clear_managing_authority();
  const std::string& managing_authority() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_managing_authority(ArgT0&& arg0, ArgT... args);
  std::string* mutable_managing_authority();
  PROTOBUF_NODISCARD std::string* release_managing_authority();
  void set_allocated_managing_authority(std::string* managing_authority);
  private:
  const std::string& _internal_managing_authority() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_managing_authority(const std::string& value);
  std::string* _internal_mutable_managing_authority();
  public:

  // .google.protobuf.Timestamp create_time = 7 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_create_time() const;
  private:
  bool _internal_has_create_time() const;
  public:
  void clear_create_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& create_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_create_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_create_time();
  void set_allocated_create_time(::PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_create_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_create_time();
  public:
  void unsafe_arena_set_allocated_create_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_create_time();

  // .google.protobuf.Timestamp update_time = 8 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_update_time() const;
  private:
  bool _internal_has_update_time() const;
  public:
  void clear_update_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& update_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_update_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_update_time();
  void set_allocated_update_time(::PROTOBUF_NAMESPACE_ID::Timestamp* update_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_update_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_update_time();
  public:
  void unsafe_arena_set_allocated_update_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* update_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_update_time();

  // .google.protobuf.Timestamp delete_time = 9 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_delete_time() const;
  private:
  bool _internal_has_delete_time() const;
  public:
  void clear_delete_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& delete_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_delete_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_delete_time();
  void set_allocated_delete_time(::PROTOBUF_NAMESPACE_ID::Timestamp* delete_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_delete_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_delete_time();
  public:
  void unsafe_arena_set_allocated_delete_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* delete_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_delete_time();

  // @@protoc_insertion_point(class_scope:google.iam.v2.Policy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        Policy_AnnotationsEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> annotations_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::iam::v2::PolicyRule > rules_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kind_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr etag_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr managing_authority_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* create_time_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* update_time_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* delete_time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fiam_2fv2_2fpolicy_2eproto;
};
// -------------------------------------------------------------------

class PolicyRule final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.iam.v2.PolicyRule) */ {
 public:
  inline PolicyRule() : PolicyRule(nullptr) {}
  ~PolicyRule() override;
  explicit PROTOBUF_CONSTEXPR PolicyRule(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PolicyRule(const PolicyRule& from);
  PolicyRule(PolicyRule&& from) noexcept
    : PolicyRule() {
    *this = ::std::move(from);
  }

  inline PolicyRule& operator=(const PolicyRule& from) {
    CopyFrom(from);
    return *this;
  }
  inline PolicyRule& operator=(PolicyRule&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PolicyRule& default_instance() {
    return *internal_default_instance();
  }
  enum KindCase {
    kDenyRule = 2,
    KIND_NOT_SET = 0,
  };

  static inline const PolicyRule* internal_default_instance() {
    return reinterpret_cast<const PolicyRule*>(
               &_PolicyRule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PolicyRule& a, PolicyRule& b) {
    a.Swap(&b);
  }
  inline void Swap(PolicyRule* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PolicyRule* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PolicyRule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PolicyRule>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PolicyRule& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PolicyRule& from) {
    PolicyRule::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PolicyRule* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.iam.v2.PolicyRule";
  }
  protected:
  explicit PolicyRule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 1,
    kDenyRuleFieldNumber = 2,
  };
  // string description = 1;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // .google.iam.v2.DenyRule deny_rule = 2;
  bool has_deny_rule() const;
  private:
  bool _internal_has_deny_rule() const;
  public:
  void clear_deny_rule();
  const ::google::iam::v2::DenyRule& deny_rule() const;
  PROTOBUF_NODISCARD ::google::iam::v2::DenyRule* release_deny_rule();
  ::google::iam::v2::DenyRule* mutable_deny_rule();
  void set_allocated_deny_rule(::google::iam::v2::DenyRule* deny_rule);
  private:
  const ::google::iam::v2::DenyRule& _internal_deny_rule() const;
  ::google::iam::v2::DenyRule* _internal_mutable_deny_rule();
  public:
  void unsafe_arena_set_allocated_deny_rule(
      ::google::iam::v2::DenyRule* deny_rule);
  ::google::iam::v2::DenyRule* unsafe_arena_release_deny_rule();

  void clear_kind();
  KindCase kind_case() const;
  // @@protoc_insertion_point(class_scope:google.iam.v2.PolicyRule)
 private:
  class _Internal;
  void set_has_deny_rule();

  inline bool has_kind() const;
  inline void clear_has_kind();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    union KindUnion {
      constexpr KindUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::google::iam::v2::DenyRule* deny_rule_;
    } kind_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fiam_2fv2_2fpolicy_2eproto;
};
// -------------------------------------------------------------------

class ListPoliciesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.iam.v2.ListPoliciesRequest) */ {
 public:
  inline ListPoliciesRequest() : ListPoliciesRequest(nullptr) {}
  ~ListPoliciesRequest() override;
  explicit PROTOBUF_CONSTEXPR ListPoliciesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListPoliciesRequest(const ListPoliciesRequest& from);
  ListPoliciesRequest(ListPoliciesRequest&& from) noexcept
    : ListPoliciesRequest() {
    *this = ::std::move(from);
  }

  inline ListPoliciesRequest& operator=(const ListPoliciesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListPoliciesRequest& operator=(ListPoliciesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListPoliciesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListPoliciesRequest* internal_default_instance() {
    return reinterpret_cast<const ListPoliciesRequest*>(
               &_ListPoliciesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ListPoliciesRequest& a, ListPoliciesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListPoliciesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListPoliciesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListPoliciesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListPoliciesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListPoliciesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListPoliciesRequest& from) {
    ListPoliciesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListPoliciesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.iam.v2.ListPoliciesRequest";
  }
  protected:
  explicit ListPoliciesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kPageSizeFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 3;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 2;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.iam.v2.ListPoliciesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
    int32_t page_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fiam_2fv2_2fpolicy_2eproto;
};
// -------------------------------------------------------------------

class ListPoliciesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.iam.v2.ListPoliciesResponse) */ {
 public:
  inline ListPoliciesResponse() : ListPoliciesResponse(nullptr) {}
  ~ListPoliciesResponse() override;
  explicit PROTOBUF_CONSTEXPR ListPoliciesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListPoliciesResponse(const ListPoliciesResponse& from);
  ListPoliciesResponse(ListPoliciesResponse&& from) noexcept
    : ListPoliciesResponse() {
    *this = ::std::move(from);
  }

  inline ListPoliciesResponse& operator=(const ListPoliciesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListPoliciesResponse& operator=(ListPoliciesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListPoliciesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListPoliciesResponse* internal_default_instance() {
    return reinterpret_cast<const ListPoliciesResponse*>(
               &_ListPoliciesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ListPoliciesResponse& a, ListPoliciesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListPoliciesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListPoliciesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListPoliciesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListPoliciesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListPoliciesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListPoliciesResponse& from) {
    ListPoliciesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListPoliciesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.iam.v2.ListPoliciesResponse";
  }
  protected:
  explicit ListPoliciesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoliciesFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .google.iam.v2.Policy policies = 1;
  int policies_size() const;
  private:
  int _internal_policies_size() const;
  public:
  void clear_policies();
  ::google::iam::v2::Policy* mutable_policies(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::iam::v2::Policy >*
      mutable_policies();
  private:
  const ::google::iam::v2::Policy& _internal_policies(int index) const;
  ::google::iam::v2::Policy* _internal_add_policies();
  public:
  const ::google::iam::v2::Policy& policies(int index) const;
  ::google::iam::v2::Policy* add_policies();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::iam::v2::Policy >&
      policies() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:google.iam.v2.ListPoliciesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::iam::v2::Policy > policies_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fiam_2fv2_2fpolicy_2eproto;
};
// -------------------------------------------------------------------

class GetPolicyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.iam.v2.GetPolicyRequest) */ {
 public:
  inline GetPolicyRequest() : GetPolicyRequest(nullptr) {}
  ~GetPolicyRequest() override;
  explicit PROTOBUF_CONSTEXPR GetPolicyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPolicyRequest(const GetPolicyRequest& from);
  GetPolicyRequest(GetPolicyRequest&& from) noexcept
    : GetPolicyRequest() {
    *this = ::std::move(from);
  }

  inline GetPolicyRequest& operator=(const GetPolicyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPolicyRequest& operator=(GetPolicyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPolicyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPolicyRequest* internal_default_instance() {
    return reinterpret_cast<const GetPolicyRequest*>(
               &_GetPolicyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetPolicyRequest& a, GetPolicyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPolicyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPolicyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPolicyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPolicyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPolicyRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetPolicyRequest& from) {
    GetPolicyRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPolicyRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.iam.v2.GetPolicyRequest";
  }
  protected:
  explicit GetPolicyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.iam.v2.GetPolicyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fiam_2fv2_2fpolicy_2eproto;
};
// -------------------------------------------------------------------

class CreatePolicyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.iam.v2.CreatePolicyRequest) */ {
 public:
  inline CreatePolicyRequest() : CreatePolicyRequest(nullptr) {}
  ~CreatePolicyRequest() override;
  explicit PROTOBUF_CONSTEXPR CreatePolicyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreatePolicyRequest(const CreatePolicyRequest& from);
  CreatePolicyRequest(CreatePolicyRequest&& from) noexcept
    : CreatePolicyRequest() {
    *this = ::std::move(from);
  }

  inline CreatePolicyRequest& operator=(const CreatePolicyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreatePolicyRequest& operator=(CreatePolicyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreatePolicyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreatePolicyRequest* internal_default_instance() {
    return reinterpret_cast<const CreatePolicyRequest*>(
               &_CreatePolicyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CreatePolicyRequest& a, CreatePolicyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreatePolicyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreatePolicyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreatePolicyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreatePolicyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreatePolicyRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreatePolicyRequest& from) {
    CreatePolicyRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreatePolicyRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.iam.v2.CreatePolicyRequest";
  }
  protected:
  explicit CreatePolicyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPolicyIdFieldNumber = 3,
    kPolicyFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string policy_id = 3;
  void clear_policy_id();
  const std::string& policy_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_policy_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_policy_id();
  PROTOBUF_NODISCARD std::string* release_policy_id();
  void set_allocated_policy_id(std::string* policy_id);
  private:
  const std::string& _internal_policy_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_policy_id(const std::string& value);
  std::string* _internal_mutable_policy_id();
  public:

  // .google.iam.v2.Policy policy = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_policy() const;
  private:
  bool _internal_has_policy() const;
  public:
  void clear_policy();
  const ::google::iam::v2::Policy& policy() const;
  PROTOBUF_NODISCARD ::google::iam::v2::Policy* release_policy();
  ::google::iam::v2::Policy* mutable_policy();
  void set_allocated_policy(::google::iam::v2::Policy* policy);
  private:
  const ::google::iam::v2::Policy& _internal_policy() const;
  ::google::iam::v2::Policy* _internal_mutable_policy();
  public:
  void unsafe_arena_set_allocated_policy(
      ::google::iam::v2::Policy* policy);
  ::google::iam::v2::Policy* unsafe_arena_release_policy();

  // @@protoc_insertion_point(class_scope:google.iam.v2.CreatePolicyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr policy_id_;
    ::google::iam::v2::Policy* policy_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fiam_2fv2_2fpolicy_2eproto;
};
// -------------------------------------------------------------------

class UpdatePolicyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.iam.v2.UpdatePolicyRequest) */ {
 public:
  inline UpdatePolicyRequest() : UpdatePolicyRequest(nullptr) {}
  ~UpdatePolicyRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdatePolicyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdatePolicyRequest(const UpdatePolicyRequest& from);
  UpdatePolicyRequest(UpdatePolicyRequest&& from) noexcept
    : UpdatePolicyRequest() {
    *this = ::std::move(from);
  }

  inline UpdatePolicyRequest& operator=(const UpdatePolicyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdatePolicyRequest& operator=(UpdatePolicyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdatePolicyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdatePolicyRequest* internal_default_instance() {
    return reinterpret_cast<const UpdatePolicyRequest*>(
               &_UpdatePolicyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UpdatePolicyRequest& a, UpdatePolicyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdatePolicyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdatePolicyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdatePolicyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdatePolicyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdatePolicyRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdatePolicyRequest& from) {
    UpdatePolicyRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdatePolicyRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.iam.v2.UpdatePolicyRequest";
  }
  protected:
  explicit UpdatePolicyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPolicyFieldNumber = 1,
  };
  // .google.iam.v2.Policy policy = 1 [(.google.api.field_behavior) = REQUIRED];
  bool has_policy() const;
  private:
  bool _internal_has_policy() const;
  public:
  void clear_policy();
  const ::google::iam::v2::Policy& policy() const;
  PROTOBUF_NODISCARD ::google::iam::v2::Policy* release_policy();
  ::google::iam::v2::Policy* mutable_policy();
  void set_allocated_policy(::google::iam::v2::Policy* policy);
  private:
  const ::google::iam::v2::Policy& _internal_policy() const;
  ::google::iam::v2::Policy* _internal_mutable_policy();
  public:
  void unsafe_arena_set_allocated_policy(
      ::google::iam::v2::Policy* policy);
  ::google::iam::v2::Policy* unsafe_arena_release_policy();

  // @@protoc_insertion_point(class_scope:google.iam.v2.UpdatePolicyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::iam::v2::Policy* policy_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fiam_2fv2_2fpolicy_2eproto;
};
// -------------------------------------------------------------------

class DeletePolicyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.iam.v2.DeletePolicyRequest) */ {
 public:
  inline DeletePolicyRequest() : DeletePolicyRequest(nullptr) {}
  ~DeletePolicyRequest() override;
  explicit PROTOBUF_CONSTEXPR DeletePolicyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeletePolicyRequest(const DeletePolicyRequest& from);
  DeletePolicyRequest(DeletePolicyRequest&& from) noexcept
    : DeletePolicyRequest() {
    *this = ::std::move(from);
  }

  inline DeletePolicyRequest& operator=(const DeletePolicyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeletePolicyRequest& operator=(DeletePolicyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeletePolicyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeletePolicyRequest* internal_default_instance() {
    return reinterpret_cast<const DeletePolicyRequest*>(
               &_DeletePolicyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DeletePolicyRequest& a, DeletePolicyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeletePolicyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeletePolicyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeletePolicyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeletePolicyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeletePolicyRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeletePolicyRequest& from) {
    DeletePolicyRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeletePolicyRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.iam.v2.DeletePolicyRequest";
  }
  protected:
  explicit DeletePolicyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kEtagFieldNumber = 2,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string etag = 2 [(.google.api.field_behavior) = OPTIONAL];
  void clear_etag();
  const std::string& etag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_etag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_etag();
  PROTOBUF_NODISCARD std::string* release_etag();
  void set_allocated_etag(std::string* etag);
  private:
  const std::string& _internal_etag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_etag(const std::string& value);
  std::string* _internal_mutable_etag();
  public:

  // @@protoc_insertion_point(class_scope:google.iam.v2.DeletePolicyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr etag_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fiam_2fv2_2fpolicy_2eproto;
};
// -------------------------------------------------------------------

class PolicyOperationMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.iam.v2.PolicyOperationMetadata) */ {
 public:
  inline PolicyOperationMetadata() : PolicyOperationMetadata(nullptr) {}
  ~PolicyOperationMetadata() override;
  explicit PROTOBUF_CONSTEXPR PolicyOperationMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PolicyOperationMetadata(const PolicyOperationMetadata& from);
  PolicyOperationMetadata(PolicyOperationMetadata&& from) noexcept
    : PolicyOperationMetadata() {
    *this = ::std::move(from);
  }

  inline PolicyOperationMetadata& operator=(const PolicyOperationMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline PolicyOperationMetadata& operator=(PolicyOperationMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PolicyOperationMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const PolicyOperationMetadata* internal_default_instance() {
    return reinterpret_cast<const PolicyOperationMetadata*>(
               &_PolicyOperationMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(PolicyOperationMetadata& a, PolicyOperationMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(PolicyOperationMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PolicyOperationMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PolicyOperationMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PolicyOperationMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PolicyOperationMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PolicyOperationMetadata& from) {
    PolicyOperationMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PolicyOperationMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.iam.v2.PolicyOperationMetadata";
  }
  protected:
  explicit PolicyOperationMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCreateTimeFieldNumber = 1,
  };
  // .google.protobuf.Timestamp create_time = 1;
  bool has_create_time() const;
  private:
  bool _internal_has_create_time() const;
  public:
  void clear_create_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& create_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_create_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_create_time();
  void set_allocated_create_time(::PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_create_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_create_time();
  public:
  void unsafe_arena_set_allocated_create_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_create_time();

  // @@protoc_insertion_point(class_scope:google.iam.v2.PolicyOperationMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::Timestamp* create_time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fiam_2fv2_2fpolicy_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Policy

// string name = 1 [(.google.api.field_behavior) = IMMUTABLE];
inline void Policy::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Policy::name() const {
  // @@protoc_insertion_point(field_get:google.iam.v2.Policy.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Policy::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.iam.v2.Policy.name)
}
inline std::string* Policy::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.iam.v2.Policy.name)
  return _s;
}
inline const std::string& Policy::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Policy::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Policy::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Policy::release_name() {
  // @@protoc_insertion_point(field_release:google.iam.v2.Policy.name)
  return _impl_.name_.Release();
}
inline void Policy::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.iam.v2.Policy.name)
}

// string uid = 2 [(.google.api.field_behavior) = IMMUTABLE];
inline void Policy::clear_uid() {
  _impl_.uid_.ClearToEmpty();
}
inline const std::string& Policy::uid() const {
  // @@protoc_insertion_point(field_get:google.iam.v2.Policy.uid)
  return _internal_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Policy::set_uid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.iam.v2.Policy.uid)
}
inline std::string* Policy::mutable_uid() {
  std::string* _s = _internal_mutable_uid();
  // @@protoc_insertion_point(field_mutable:google.iam.v2.Policy.uid)
  return _s;
}
inline const std::string& Policy::_internal_uid() const {
  return _impl_.uid_.Get();
}
inline void Policy::_internal_set_uid(const std::string& value) {
  
  _impl_.uid_.Set(value, GetArenaForAllocation());
}
inline std::string* Policy::_internal_mutable_uid() {
  
  return _impl_.uid_.Mutable(GetArenaForAllocation());
}
inline std::string* Policy::release_uid() {
  // @@protoc_insertion_point(field_release:google.iam.v2.Policy.uid)
  return _impl_.uid_.Release();
}
inline void Policy::set_allocated_uid(std::string* uid) {
  if (uid != nullptr) {
    
  } else {
    
  }
  _impl_.uid_.SetAllocated(uid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uid_.IsDefault()) {
    _impl_.uid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.iam.v2.Policy.uid)
}

// string kind = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void Policy::clear_kind() {
  _impl_.kind_.ClearToEmpty();
}
inline const std::string& Policy::kind() const {
  // @@protoc_insertion_point(field_get:google.iam.v2.Policy.kind)
  return _internal_kind();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Policy::set_kind(ArgT0&& arg0, ArgT... args) {
 
 _impl_.kind_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.iam.v2.Policy.kind)
}
inline std::string* Policy::mutable_kind() {
  std::string* _s = _internal_mutable_kind();
  // @@protoc_insertion_point(field_mutable:google.iam.v2.Policy.kind)
  return _s;
}
inline const std::string& Policy::_internal_kind() const {
  return _impl_.kind_.Get();
}
inline void Policy::_internal_set_kind(const std::string& value) {
  
  _impl_.kind_.Set(value, GetArenaForAllocation());
}
inline std::string* Policy::_internal_mutable_kind() {
  
  return _impl_.kind_.Mutable(GetArenaForAllocation());
}
inline std::string* Policy::release_kind() {
  // @@protoc_insertion_point(field_release:google.iam.v2.Policy.kind)
  return _impl_.kind_.Release();
}
inline void Policy::set_allocated_kind(std::string* kind) {
  if (kind != nullptr) {
    
  } else {
    
  }
  _impl_.kind_.SetAllocated(kind, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.kind_.IsDefault()) {
    _impl_.kind_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.iam.v2.Policy.kind)
}

// string display_name = 4;
inline void Policy::clear_display_name() {
  _impl_.display_name_.ClearToEmpty();
}
inline const std::string& Policy::display_name() const {
  // @@protoc_insertion_point(field_get:google.iam.v2.Policy.display_name)
  return _internal_display_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Policy::set_display_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.display_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.iam.v2.Policy.display_name)
}
inline std::string* Policy::mutable_display_name() {
  std::string* _s = _internal_mutable_display_name();
  // @@protoc_insertion_point(field_mutable:google.iam.v2.Policy.display_name)
  return _s;
}
inline const std::string& Policy::_internal_display_name() const {
  return _impl_.display_name_.Get();
}
inline void Policy::_internal_set_display_name(const std::string& value) {
  
  _impl_.display_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Policy::_internal_mutable_display_name() {
  
  return _impl_.display_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Policy::release_display_name() {
  // @@protoc_insertion_point(field_release:google.iam.v2.Policy.display_name)
  return _impl_.display_name_.Release();
}
inline void Policy::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    
  } else {
    
  }
  _impl_.display_name_.SetAllocated(display_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.display_name_.IsDefault()) {
    _impl_.display_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.iam.v2.Policy.display_name)
}

// map<string, string> annotations = 5;
inline int Policy::_internal_annotations_size() const {
  return _impl_.annotations_.size();
}
inline int Policy::annotations_size() const {
  return _internal_annotations_size();
}
inline void Policy::clear_annotations() {
  _impl_.annotations_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Policy::_internal_annotations() const {
  return _impl_.annotations_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Policy::annotations() const {
  // @@protoc_insertion_point(field_map:google.iam.v2.Policy.annotations)
  return _internal_annotations();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Policy::_internal_mutable_annotations() {
  return _impl_.annotations_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Policy::mutable_annotations() {
  // @@protoc_insertion_point(field_mutable_map:google.iam.v2.Policy.annotations)
  return _internal_mutable_annotations();
}

// string etag = 6;
inline void Policy::clear_etag() {
  _impl_.etag_.ClearToEmpty();
}
inline const std::string& Policy::etag() const {
  // @@protoc_insertion_point(field_get:google.iam.v2.Policy.etag)
  return _internal_etag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Policy::set_etag(ArgT0&& arg0, ArgT... args) {
 
 _impl_.etag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.iam.v2.Policy.etag)
}
inline std::string* Policy::mutable_etag() {
  std::string* _s = _internal_mutable_etag();
  // @@protoc_insertion_point(field_mutable:google.iam.v2.Policy.etag)
  return _s;
}
inline const std::string& Policy::_internal_etag() const {
  return _impl_.etag_.Get();
}
inline void Policy::_internal_set_etag(const std::string& value) {
  
  _impl_.etag_.Set(value, GetArenaForAllocation());
}
inline std::string* Policy::_internal_mutable_etag() {
  
  return _impl_.etag_.Mutable(GetArenaForAllocation());
}
inline std::string* Policy::release_etag() {
  // @@protoc_insertion_point(field_release:google.iam.v2.Policy.etag)
  return _impl_.etag_.Release();
}
inline void Policy::set_allocated_etag(std::string* etag) {
  if (etag != nullptr) {
    
  } else {
    
  }
  _impl_.etag_.SetAllocated(etag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.etag_.IsDefault()) {
    _impl_.etag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.iam.v2.Policy.etag)
}

// .google.protobuf.Timestamp create_time = 7 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool Policy::_internal_has_create_time() const {
  return this != internal_default_instance() && _impl_.create_time_ != nullptr;
}
inline bool Policy::has_create_time() const {
  return _internal_has_create_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Policy::_internal_create_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.create_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Policy::create_time() const {
  // @@protoc_insertion_point(field_get:google.iam.v2.Policy.create_time)
  return _internal_create_time();
}
inline void Policy::unsafe_arena_set_allocated_create_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.create_time_);
  }
  _impl_.create_time_ = create_time;
  if (create_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.v2.Policy.create_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Policy::release_create_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.create_time_;
  _impl_.create_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Policy::unsafe_arena_release_create_time() {
  // @@protoc_insertion_point(field_release:google.iam.v2.Policy.create_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.create_time_;
  _impl_.create_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Policy::_internal_mutable_create_time() {
  
  if (_impl_.create_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.create_time_ = p;
  }
  return _impl_.create_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Policy::mutable_create_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_create_time();
  // @@protoc_insertion_point(field_mutable:google.iam.v2.Policy.create_time)
  return _msg;
}
inline void Policy::set_allocated_create_time(::PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.create_time_);
  }
  if (create_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time));
    if (message_arena != submessage_arena) {
      create_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:google.iam.v2.Policy.create_time)
}

// .google.protobuf.Timestamp update_time = 8 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool Policy::_internal_has_update_time() const {
  return this != internal_default_instance() && _impl_.update_time_ != nullptr;
}
inline bool Policy::has_update_time() const {
  return _internal_has_update_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Policy::_internal_update_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.update_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Policy::update_time() const {
  // @@protoc_insertion_point(field_get:google.iam.v2.Policy.update_time)
  return _internal_update_time();
}
inline void Policy::unsafe_arena_set_allocated_update_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* update_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_time_);
  }
  _impl_.update_time_ = update_time;
  if (update_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.v2.Policy.update_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Policy::release_update_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.update_time_;
  _impl_.update_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Policy::unsafe_arena_release_update_time() {
  // @@protoc_insertion_point(field_release:google.iam.v2.Policy.update_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.update_time_;
  _impl_.update_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Policy::_internal_mutable_update_time() {
  
  if (_impl_.update_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.update_time_ = p;
  }
  return _impl_.update_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Policy::mutable_update_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_update_time();
  // @@protoc_insertion_point(field_mutable:google.iam.v2.Policy.update_time)
  return _msg;
}
inline void Policy::set_allocated_update_time(::PROTOBUF_NAMESPACE_ID::Timestamp* update_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_time_);
  }
  if (update_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_time));
    if (message_arena != submessage_arena) {
      update_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.update_time_ = update_time;
  // @@protoc_insertion_point(field_set_allocated:google.iam.v2.Policy.update_time)
}

// .google.protobuf.Timestamp delete_time = 9 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool Policy::_internal_has_delete_time() const {
  return this != internal_default_instance() && _impl_.delete_time_ != nullptr;
}
inline bool Policy::has_delete_time() const {
  return _internal_has_delete_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Policy::_internal_delete_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.delete_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Policy::delete_time() const {
  // @@protoc_insertion_point(field_get:google.iam.v2.Policy.delete_time)
  return _internal_delete_time();
}
inline void Policy::unsafe_arena_set_allocated_delete_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* delete_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.delete_time_);
  }
  _impl_.delete_time_ = delete_time;
  if (delete_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.v2.Policy.delete_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Policy::release_delete_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.delete_time_;
  _impl_.delete_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Policy::unsafe_arena_release_delete_time() {
  // @@protoc_insertion_point(field_release:google.iam.v2.Policy.delete_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.delete_time_;
  _impl_.delete_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Policy::_internal_mutable_delete_time() {
  
  if (_impl_.delete_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.delete_time_ = p;
  }
  return _impl_.delete_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Policy::mutable_delete_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_delete_time();
  // @@protoc_insertion_point(field_mutable:google.iam.v2.Policy.delete_time)
  return _msg;
}
inline void Policy::set_allocated_delete_time(::PROTOBUF_NAMESPACE_ID::Timestamp* delete_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.delete_time_);
  }
  if (delete_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(delete_time));
    if (message_arena != submessage_arena) {
      delete_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delete_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.delete_time_ = delete_time;
  // @@protoc_insertion_point(field_set_allocated:google.iam.v2.Policy.delete_time)
}

// repeated .google.iam.v2.PolicyRule rules = 10;
inline int Policy::_internal_rules_size() const {
  return _impl_.rules_.size();
}
inline int Policy::rules_size() const {
  return _internal_rules_size();
}
inline void Policy::clear_rules() {
  _impl_.rules_.Clear();
}
inline ::google::iam::v2::PolicyRule* Policy::mutable_rules(int index) {
  // @@protoc_insertion_point(field_mutable:google.iam.v2.Policy.rules)
  return _impl_.rules_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::iam::v2::PolicyRule >*
Policy::mutable_rules() {
  // @@protoc_insertion_point(field_mutable_list:google.iam.v2.Policy.rules)
  return &_impl_.rules_;
}
inline const ::google::iam::v2::PolicyRule& Policy::_internal_rules(int index) const {
  return _impl_.rules_.Get(index);
}
inline const ::google::iam::v2::PolicyRule& Policy::rules(int index) const {
  // @@protoc_insertion_point(field_get:google.iam.v2.Policy.rules)
  return _internal_rules(index);
}
inline ::google::iam::v2::PolicyRule* Policy::_internal_add_rules() {
  return _impl_.rules_.Add();
}
inline ::google::iam::v2::PolicyRule* Policy::add_rules() {
  ::google::iam::v2::PolicyRule* _add = _internal_add_rules();
  // @@protoc_insertion_point(field_add:google.iam.v2.Policy.rules)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::iam::v2::PolicyRule >&
Policy::rules() const {
  // @@protoc_insertion_point(field_list:google.iam.v2.Policy.rules)
  return _impl_.rules_;
}

// string managing_authority = 11 [(.google.api.field_behavior) = IMMUTABLE];
inline void Policy::clear_managing_authority() {
  _impl_.managing_authority_.ClearToEmpty();
}
inline const std::string& Policy::managing_authority() const {
  // @@protoc_insertion_point(field_get:google.iam.v2.Policy.managing_authority)
  return _internal_managing_authority();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Policy::set_managing_authority(ArgT0&& arg0, ArgT... args) {
 
 _impl_.managing_authority_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.iam.v2.Policy.managing_authority)
}
inline std::string* Policy::mutable_managing_authority() {
  std::string* _s = _internal_mutable_managing_authority();
  // @@protoc_insertion_point(field_mutable:google.iam.v2.Policy.managing_authority)
  return _s;
}
inline const std::string& Policy::_internal_managing_authority() const {
  return _impl_.managing_authority_.Get();
}
inline void Policy::_internal_set_managing_authority(const std::string& value) {
  
  _impl_.managing_authority_.Set(value, GetArenaForAllocation());
}
inline std::string* Policy::_internal_mutable_managing_authority() {
  
  return _impl_.managing_authority_.Mutable(GetArenaForAllocation());
}
inline std::string* Policy::release_managing_authority() {
  // @@protoc_insertion_point(field_release:google.iam.v2.Policy.managing_authority)
  return _impl_.managing_authority_.Release();
}
inline void Policy::set_allocated_managing_authority(std::string* managing_authority) {
  if (managing_authority != nullptr) {
    
  } else {
    
  }
  _impl_.managing_authority_.SetAllocated(managing_authority, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.managing_authority_.IsDefault()) {
    _impl_.managing_authority_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.iam.v2.Policy.managing_authority)
}

// -------------------------------------------------------------------

// PolicyRule

// .google.iam.v2.DenyRule deny_rule = 2;
inline bool PolicyRule::_internal_has_deny_rule() const {
  return kind_case() == kDenyRule;
}
inline bool PolicyRule::has_deny_rule() const {
  return _internal_has_deny_rule();
}
inline void PolicyRule::set_has_deny_rule() {
  _impl_._oneof_case_[0] = kDenyRule;
}
inline ::google::iam::v2::DenyRule* PolicyRule::release_deny_rule() {
  // @@protoc_insertion_point(field_release:google.iam.v2.PolicyRule.deny_rule)
  if (_internal_has_deny_rule()) {
    clear_has_kind();
    ::google::iam::v2::DenyRule* temp = _impl_.kind_.deny_rule_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.kind_.deny_rule_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::iam::v2::DenyRule& PolicyRule::_internal_deny_rule() const {
  return _internal_has_deny_rule()
      ? *_impl_.kind_.deny_rule_
      : reinterpret_cast< ::google::iam::v2::DenyRule&>(::google::iam::v2::_DenyRule_default_instance_);
}
inline const ::google::iam::v2::DenyRule& PolicyRule::deny_rule() const {
  // @@protoc_insertion_point(field_get:google.iam.v2.PolicyRule.deny_rule)
  return _internal_deny_rule();
}
inline ::google::iam::v2::DenyRule* PolicyRule::unsafe_arena_release_deny_rule() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.v2.PolicyRule.deny_rule)
  if (_internal_has_deny_rule()) {
    clear_has_kind();
    ::google::iam::v2::DenyRule* temp = _impl_.kind_.deny_rule_;
    _impl_.kind_.deny_rule_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PolicyRule::unsafe_arena_set_allocated_deny_rule(::google::iam::v2::DenyRule* deny_rule) {
  clear_kind();
  if (deny_rule) {
    set_has_deny_rule();
    _impl_.kind_.deny_rule_ = deny_rule;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.v2.PolicyRule.deny_rule)
}
inline ::google::iam::v2::DenyRule* PolicyRule::_internal_mutable_deny_rule() {
  if (!_internal_has_deny_rule()) {
    clear_kind();
    set_has_deny_rule();
    _impl_.kind_.deny_rule_ = CreateMaybeMessage< ::google::iam::v2::DenyRule >(GetArenaForAllocation());
  }
  return _impl_.kind_.deny_rule_;
}
inline ::google::iam::v2::DenyRule* PolicyRule::mutable_deny_rule() {
  ::google::iam::v2::DenyRule* _msg = _internal_mutable_deny_rule();
  // @@protoc_insertion_point(field_mutable:google.iam.v2.PolicyRule.deny_rule)
  return _msg;
}

// string description = 1;
inline void PolicyRule::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& PolicyRule::description() const {
  // @@protoc_insertion_point(field_get:google.iam.v2.PolicyRule.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PolicyRule::set_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.iam.v2.PolicyRule.description)
}
inline std::string* PolicyRule::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:google.iam.v2.PolicyRule.description)
  return _s;
}
inline const std::string& PolicyRule::_internal_description() const {
  return _impl_.description_.Get();
}
inline void PolicyRule::_internal_set_description(const std::string& value) {
  
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* PolicyRule::_internal_mutable_description() {
  
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* PolicyRule::release_description() {
  // @@protoc_insertion_point(field_release:google.iam.v2.PolicyRule.description)
  return _impl_.description_.Release();
}
inline void PolicyRule::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.iam.v2.PolicyRule.description)
}

inline bool PolicyRule::has_kind() const {
  return kind_case() != KIND_NOT_SET;
}
inline void PolicyRule::clear_has_kind() {
  _impl_._oneof_case_[0] = KIND_NOT_SET;
}
inline PolicyRule::KindCase PolicyRule::kind_case() const {
  return PolicyRule::KindCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ListPoliciesRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED];
inline void ListPoliciesRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& ListPoliciesRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.iam.v2.ListPoliciesRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListPoliciesRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.iam.v2.ListPoliciesRequest.parent)
}
inline std::string* ListPoliciesRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.iam.v2.ListPoliciesRequest.parent)
  return _s;
}
inline const std::string& ListPoliciesRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void ListPoliciesRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* ListPoliciesRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* ListPoliciesRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.iam.v2.ListPoliciesRequest.parent)
  return _impl_.parent_.Release();
}
inline void ListPoliciesRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.iam.v2.ListPoliciesRequest.parent)
}

// int32 page_size = 2;
inline void ListPoliciesRequest::clear_page_size() {
  _impl_.page_size_ = 0;
}
inline int32_t ListPoliciesRequest::_internal_page_size() const {
  return _impl_.page_size_;
}
inline int32_t ListPoliciesRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.iam.v2.ListPoliciesRequest.page_size)
  return _internal_page_size();
}
inline void ListPoliciesRequest::_internal_set_page_size(int32_t value) {
  
  _impl_.page_size_ = value;
}
inline void ListPoliciesRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:google.iam.v2.ListPoliciesRequest.page_size)
}

// string page_token = 3;
inline void ListPoliciesRequest::clear_page_token() {
  _impl_.page_token_.ClearToEmpty();
}
inline const std::string& ListPoliciesRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.iam.v2.ListPoliciesRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListPoliciesRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.iam.v2.ListPoliciesRequest.page_token)
}
inline std::string* ListPoliciesRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:google.iam.v2.ListPoliciesRequest.page_token)
  return _s;
}
inline const std::string& ListPoliciesRequest::_internal_page_token() const {
  return _impl_.page_token_.Get();
}
inline void ListPoliciesRequest::_internal_set_page_token(const std::string& value) {
  
  _impl_.page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListPoliciesRequest::_internal_mutable_page_token() {
  
  return _impl_.page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListPoliciesRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.iam.v2.ListPoliciesRequest.page_token)
  return _impl_.page_token_.Release();
}
inline void ListPoliciesRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  _impl_.page_token_.SetAllocated(page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.page_token_.IsDefault()) {
    _impl_.page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.iam.v2.ListPoliciesRequest.page_token)
}

// -------------------------------------------------------------------

// ListPoliciesResponse

// repeated .google.iam.v2.Policy policies = 1;
inline int ListPoliciesResponse::_internal_policies_size() const {
  return _impl_.policies_.size();
}
inline int ListPoliciesResponse::policies_size() const {
  return _internal_policies_size();
}
inline void ListPoliciesResponse::clear_policies() {
  _impl_.policies_.Clear();
}
inline ::google::iam::v2::Policy* ListPoliciesResponse::mutable_policies(int index) {
  // @@protoc_insertion_point(field_mutable:google.iam.v2.ListPoliciesResponse.policies)
  return _impl_.policies_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::iam::v2::Policy >*
ListPoliciesResponse::mutable_policies() {
  // @@protoc_insertion_point(field_mutable_list:google.iam.v2.ListPoliciesResponse.policies)
  return &_impl_.policies_;
}
inline const ::google::iam::v2::Policy& ListPoliciesResponse::_internal_policies(int index) const {
  return _impl_.policies_.Get(index);
}
inline const ::google::iam::v2::Policy& ListPoliciesResponse::policies(int index) const {
  // @@protoc_insertion_point(field_get:google.iam.v2.ListPoliciesResponse.policies)
  return _internal_policies(index);
}
inline ::google::iam::v2::Policy* ListPoliciesResponse::_internal_add_policies() {
  return _impl_.policies_.Add();
}
inline ::google::iam::v2::Policy* ListPoliciesResponse::add_policies() {
  ::google::iam::v2::Policy* _add = _internal_add_policies();
  // @@protoc_insertion_point(field_add:google.iam.v2.ListPoliciesResponse.policies)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::iam::v2::Policy >&
ListPoliciesResponse::policies() const {
  // @@protoc_insertion_point(field_list:google.iam.v2.ListPoliciesResponse.policies)
  return _impl_.policies_;
}

// string next_page_token = 2;
inline void ListPoliciesResponse::clear_next_page_token() {
  _impl_.next_page_token_.ClearToEmpty();
}
inline const std::string& ListPoliciesResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.iam.v2.ListPoliciesResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListPoliciesResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.next_page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.iam.v2.ListPoliciesResponse.next_page_token)
}
inline std::string* ListPoliciesResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:google.iam.v2.ListPoliciesResponse.next_page_token)
  return _s;
}
inline const std::string& ListPoliciesResponse::_internal_next_page_token() const {
  return _impl_.next_page_token_.Get();
}
inline void ListPoliciesResponse::_internal_set_next_page_token(const std::string& value) {
  
  _impl_.next_page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListPoliciesResponse::_internal_mutable_next_page_token() {
  
  return _impl_.next_page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListPoliciesResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.iam.v2.ListPoliciesResponse.next_page_token)
  return _impl_.next_page_token_.Release();
}
inline void ListPoliciesResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  _impl_.next_page_token_.SetAllocated(next_page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.next_page_token_.IsDefault()) {
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.iam.v2.ListPoliciesResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetPolicyRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED];
inline void GetPolicyRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GetPolicyRequest::name() const {
  // @@protoc_insertion_point(field_get:google.iam.v2.GetPolicyRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetPolicyRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.iam.v2.GetPolicyRequest.name)
}
inline std::string* GetPolicyRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.iam.v2.GetPolicyRequest.name)
  return _s;
}
inline const std::string& GetPolicyRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GetPolicyRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetPolicyRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetPolicyRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.iam.v2.GetPolicyRequest.name)
  return _impl_.name_.Release();
}
inline void GetPolicyRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.iam.v2.GetPolicyRequest.name)
}

// -------------------------------------------------------------------

// CreatePolicyRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED];
inline void CreatePolicyRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& CreatePolicyRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.iam.v2.CreatePolicyRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreatePolicyRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.iam.v2.CreatePolicyRequest.parent)
}
inline std::string* CreatePolicyRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.iam.v2.CreatePolicyRequest.parent)
  return _s;
}
inline const std::string& CreatePolicyRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void CreatePolicyRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* CreatePolicyRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* CreatePolicyRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.iam.v2.CreatePolicyRequest.parent)
  return _impl_.parent_.Release();
}
inline void CreatePolicyRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.iam.v2.CreatePolicyRequest.parent)
}

// .google.iam.v2.Policy policy = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool CreatePolicyRequest::_internal_has_policy() const {
  return this != internal_default_instance() && _impl_.policy_ != nullptr;
}
inline bool CreatePolicyRequest::has_policy() const {
  return _internal_has_policy();
}
inline void CreatePolicyRequest::clear_policy() {
  if (GetArenaForAllocation() == nullptr && _impl_.policy_ != nullptr) {
    delete _impl_.policy_;
  }
  _impl_.policy_ = nullptr;
}
inline const ::google::iam::v2::Policy& CreatePolicyRequest::_internal_policy() const {
  const ::google::iam::v2::Policy* p = _impl_.policy_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::iam::v2::Policy&>(
      ::google::iam::v2::_Policy_default_instance_);
}
inline const ::google::iam::v2::Policy& CreatePolicyRequest::policy() const {
  // @@protoc_insertion_point(field_get:google.iam.v2.CreatePolicyRequest.policy)
  return _internal_policy();
}
inline void CreatePolicyRequest::unsafe_arena_set_allocated_policy(
    ::google::iam::v2::Policy* policy) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.policy_);
  }
  _impl_.policy_ = policy;
  if (policy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.v2.CreatePolicyRequest.policy)
}
inline ::google::iam::v2::Policy* CreatePolicyRequest::release_policy() {
  
  ::google::iam::v2::Policy* temp = _impl_.policy_;
  _impl_.policy_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::iam::v2::Policy* CreatePolicyRequest::unsafe_arena_release_policy() {
  // @@protoc_insertion_point(field_release:google.iam.v2.CreatePolicyRequest.policy)
  
  ::google::iam::v2::Policy* temp = _impl_.policy_;
  _impl_.policy_ = nullptr;
  return temp;
}
inline ::google::iam::v2::Policy* CreatePolicyRequest::_internal_mutable_policy() {
  
  if (_impl_.policy_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::iam::v2::Policy>(GetArenaForAllocation());
    _impl_.policy_ = p;
  }
  return _impl_.policy_;
}
inline ::google::iam::v2::Policy* CreatePolicyRequest::mutable_policy() {
  ::google::iam::v2::Policy* _msg = _internal_mutable_policy();
  // @@protoc_insertion_point(field_mutable:google.iam.v2.CreatePolicyRequest.policy)
  return _msg;
}
inline void CreatePolicyRequest::set_allocated_policy(::google::iam::v2::Policy* policy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.policy_;
  }
  if (policy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(policy);
    if (message_arena != submessage_arena) {
      policy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, policy, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.policy_ = policy;
  // @@protoc_insertion_point(field_set_allocated:google.iam.v2.CreatePolicyRequest.policy)
}

// string policy_id = 3;
inline void CreatePolicyRequest::clear_policy_id() {
  _impl_.policy_id_.ClearToEmpty();
}
inline const std::string& CreatePolicyRequest::policy_id() const {
  // @@protoc_insertion_point(field_get:google.iam.v2.CreatePolicyRequest.policy_id)
  return _internal_policy_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreatePolicyRequest::set_policy_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.policy_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.iam.v2.CreatePolicyRequest.policy_id)
}
inline std::string* CreatePolicyRequest::mutable_policy_id() {
  std::string* _s = _internal_mutable_policy_id();
  // @@protoc_insertion_point(field_mutable:google.iam.v2.CreatePolicyRequest.policy_id)
  return _s;
}
inline const std::string& CreatePolicyRequest::_internal_policy_id() const {
  return _impl_.policy_id_.Get();
}
inline void CreatePolicyRequest::_internal_set_policy_id(const std::string& value) {
  
  _impl_.policy_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CreatePolicyRequest::_internal_mutable_policy_id() {
  
  return _impl_.policy_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CreatePolicyRequest::release_policy_id() {
  // @@protoc_insertion_point(field_release:google.iam.v2.CreatePolicyRequest.policy_id)
  return _impl_.policy_id_.Release();
}
inline void CreatePolicyRequest::set_allocated_policy_id(std::string* policy_id) {
  if (policy_id != nullptr) {
    
  } else {
    
  }
  _impl_.policy_id_.SetAllocated(policy_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.policy_id_.IsDefault()) {
    _impl_.policy_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.iam.v2.CreatePolicyRequest.policy_id)
}

// -------------------------------------------------------------------

// UpdatePolicyRequest

// .google.iam.v2.Policy policy = 1 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdatePolicyRequest::_internal_has_policy() const {
  return this != internal_default_instance() && _impl_.policy_ != nullptr;
}
inline bool UpdatePolicyRequest::has_policy() const {
  return _internal_has_policy();
}
inline void UpdatePolicyRequest::clear_policy() {
  if (GetArenaForAllocation() == nullptr && _impl_.policy_ != nullptr) {
    delete _impl_.policy_;
  }
  _impl_.policy_ = nullptr;
}
inline const ::google::iam::v2::Policy& UpdatePolicyRequest::_internal_policy() const {
  const ::google::iam::v2::Policy* p = _impl_.policy_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::iam::v2::Policy&>(
      ::google::iam::v2::_Policy_default_instance_);
}
inline const ::google::iam::v2::Policy& UpdatePolicyRequest::policy() const {
  // @@protoc_insertion_point(field_get:google.iam.v2.UpdatePolicyRequest.policy)
  return _internal_policy();
}
inline void UpdatePolicyRequest::unsafe_arena_set_allocated_policy(
    ::google::iam::v2::Policy* policy) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.policy_);
  }
  _impl_.policy_ = policy;
  if (policy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.v2.UpdatePolicyRequest.policy)
}
inline ::google::iam::v2::Policy* UpdatePolicyRequest::release_policy() {
  
  ::google::iam::v2::Policy* temp = _impl_.policy_;
  _impl_.policy_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::iam::v2::Policy* UpdatePolicyRequest::unsafe_arena_release_policy() {
  // @@protoc_insertion_point(field_release:google.iam.v2.UpdatePolicyRequest.policy)
  
  ::google::iam::v2::Policy* temp = _impl_.policy_;
  _impl_.policy_ = nullptr;
  return temp;
}
inline ::google::iam::v2::Policy* UpdatePolicyRequest::_internal_mutable_policy() {
  
  if (_impl_.policy_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::iam::v2::Policy>(GetArenaForAllocation());
    _impl_.policy_ = p;
  }
  return _impl_.policy_;
}
inline ::google::iam::v2::Policy* UpdatePolicyRequest::mutable_policy() {
  ::google::iam::v2::Policy* _msg = _internal_mutable_policy();
  // @@protoc_insertion_point(field_mutable:google.iam.v2.UpdatePolicyRequest.policy)
  return _msg;
}
inline void UpdatePolicyRequest::set_allocated_policy(::google::iam::v2::Policy* policy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.policy_;
  }
  if (policy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(policy);
    if (message_arena != submessage_arena) {
      policy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, policy, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.policy_ = policy;
  // @@protoc_insertion_point(field_set_allocated:google.iam.v2.UpdatePolicyRequest.policy)
}

// -------------------------------------------------------------------

// DeletePolicyRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED];
inline void DeletePolicyRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DeletePolicyRequest::name() const {
  // @@protoc_insertion_point(field_get:google.iam.v2.DeletePolicyRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeletePolicyRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.iam.v2.DeletePolicyRequest.name)
}
inline std::string* DeletePolicyRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.iam.v2.DeletePolicyRequest.name)
  return _s;
}
inline const std::string& DeletePolicyRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DeletePolicyRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DeletePolicyRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* DeletePolicyRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.iam.v2.DeletePolicyRequest.name)
  return _impl_.name_.Release();
}
inline void DeletePolicyRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.iam.v2.DeletePolicyRequest.name)
}

// string etag = 2 [(.google.api.field_behavior) = OPTIONAL];
inline void DeletePolicyRequest::clear_etag() {
  _impl_.etag_.ClearToEmpty();
}
inline const std::string& DeletePolicyRequest::etag() const {
  // @@protoc_insertion_point(field_get:google.iam.v2.DeletePolicyRequest.etag)
  return _internal_etag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeletePolicyRequest::set_etag(ArgT0&& arg0, ArgT... args) {
 
 _impl_.etag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.iam.v2.DeletePolicyRequest.etag)
}
inline std::string* DeletePolicyRequest::mutable_etag() {
  std::string* _s = _internal_mutable_etag();
  // @@protoc_insertion_point(field_mutable:google.iam.v2.DeletePolicyRequest.etag)
  return _s;
}
inline const std::string& DeletePolicyRequest::_internal_etag() const {
  return _impl_.etag_.Get();
}
inline void DeletePolicyRequest::_internal_set_etag(const std::string& value) {
  
  _impl_.etag_.Set(value, GetArenaForAllocation());
}
inline std::string* DeletePolicyRequest::_internal_mutable_etag() {
  
  return _impl_.etag_.Mutable(GetArenaForAllocation());
}
inline std::string* DeletePolicyRequest::release_etag() {
  // @@protoc_insertion_point(field_release:google.iam.v2.DeletePolicyRequest.etag)
  return _impl_.etag_.Release();
}
inline void DeletePolicyRequest::set_allocated_etag(std::string* etag) {
  if (etag != nullptr) {
    
  } else {
    
  }
  _impl_.etag_.SetAllocated(etag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.etag_.IsDefault()) {
    _impl_.etag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.iam.v2.DeletePolicyRequest.etag)
}

// -------------------------------------------------------------------

// PolicyOperationMetadata

// .google.protobuf.Timestamp create_time = 1;
inline bool PolicyOperationMetadata::_internal_has_create_time() const {
  return this != internal_default_instance() && _impl_.create_time_ != nullptr;
}
inline bool PolicyOperationMetadata::has_create_time() const {
  return _internal_has_create_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& PolicyOperationMetadata::_internal_create_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.create_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& PolicyOperationMetadata::create_time() const {
  // @@protoc_insertion_point(field_get:google.iam.v2.PolicyOperationMetadata.create_time)
  return _internal_create_time();
}
inline void PolicyOperationMetadata::unsafe_arena_set_allocated_create_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.create_time_);
  }
  _impl_.create_time_ = create_time;
  if (create_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.v2.PolicyOperationMetadata.create_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PolicyOperationMetadata::release_create_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.create_time_;
  _impl_.create_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PolicyOperationMetadata::unsafe_arena_release_create_time() {
  // @@protoc_insertion_point(field_release:google.iam.v2.PolicyOperationMetadata.create_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.create_time_;
  _impl_.create_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PolicyOperationMetadata::_internal_mutable_create_time() {
  
  if (_impl_.create_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.create_time_ = p;
  }
  return _impl_.create_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PolicyOperationMetadata::mutable_create_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_create_time();
  // @@protoc_insertion_point(field_mutable:google.iam.v2.PolicyOperationMetadata.create_time)
  return _msg;
}
inline void PolicyOperationMetadata::set_allocated_create_time(::PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.create_time_);
  }
  if (create_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time));
    if (message_arena != submessage_arena) {
      create_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:google.iam.v2.PolicyOperationMetadata.create_time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace iam
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fiam_2fv2_2fpolicy_2eproto
