// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/iam/v2/policy.proto
// Original file comments:
// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_google_2fiam_2fv2_2fpolicy_2eproto__INCLUDED
#define GRPC_google_2fiam_2fv2_2fpolicy_2eproto__INCLUDED

#include "google/iam/v2/policy.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace google {
namespace iam {
namespace v2 {

// An interface for managing Identity and Access Management (IAM) policies.
class Policies final {
 public:
  static constexpr char const* service_full_name() {
    return "google.iam.v2.Policies";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Retrieves the policies of the specified kind that are attached to a
    // resource.
    //
    // The response lists only policy metadata. In particular, policy rules are
    // omitted.
    virtual ::grpc::Status ListPolicies(::grpc::ClientContext* context, const ::google::iam::v2::ListPoliciesRequest& request, ::google::iam::v2::ListPoliciesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v2::ListPoliciesResponse>> AsyncListPolicies(::grpc::ClientContext* context, const ::google::iam::v2::ListPoliciesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v2::ListPoliciesResponse>>(AsyncListPoliciesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v2::ListPoliciesResponse>> PrepareAsyncListPolicies(::grpc::ClientContext* context, const ::google::iam::v2::ListPoliciesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v2::ListPoliciesResponse>>(PrepareAsyncListPoliciesRaw(context, request, cq));
    }
    // Gets a policy.
    virtual ::grpc::Status GetPolicy(::grpc::ClientContext* context, const ::google::iam::v2::GetPolicyRequest& request, ::google::iam::v2::Policy* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v2::Policy>> AsyncGetPolicy(::grpc::ClientContext* context, const ::google::iam::v2::GetPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v2::Policy>>(AsyncGetPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v2::Policy>> PrepareAsyncGetPolicy(::grpc::ClientContext* context, const ::google::iam::v2::GetPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v2::Policy>>(PrepareAsyncGetPolicyRaw(context, request, cq));
    }
    // Creates a policy.
    virtual ::grpc::Status CreatePolicy(::grpc::ClientContext* context, const ::google::iam::v2::CreatePolicyRequest& request, ::google::longrunning::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> AsyncCreatePolicy(::grpc::ClientContext* context, const ::google::iam::v2::CreatePolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(AsyncCreatePolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> PrepareAsyncCreatePolicy(::grpc::ClientContext* context, const ::google::iam::v2::CreatePolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(PrepareAsyncCreatePolicyRaw(context, request, cq));
    }
    // Updates the specified policy.
    //
    // You can update only the rules and the display name for the policy.
    //
    // To update a policy, you should use a read-modify-write loop:
    //
    // 1. Use [GetPolicy][google.iam.v2.Policies.GetPolicy] to read the current version of the policy.
    // 2. Modify the policy as needed.
    // 3. Use `UpdatePolicy` to write the updated policy.
    //
    // This pattern helps prevent conflicts between concurrent updates.
    virtual ::grpc::Status UpdatePolicy(::grpc::ClientContext* context, const ::google::iam::v2::UpdatePolicyRequest& request, ::google::longrunning::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> AsyncUpdatePolicy(::grpc::ClientContext* context, const ::google::iam::v2::UpdatePolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(AsyncUpdatePolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> PrepareAsyncUpdatePolicy(::grpc::ClientContext* context, const ::google::iam::v2::UpdatePolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(PrepareAsyncUpdatePolicyRaw(context, request, cq));
    }
    // Deletes a policy. This action is permanent.
    virtual ::grpc::Status DeletePolicy(::grpc::ClientContext* context, const ::google::iam::v2::DeletePolicyRequest& request, ::google::longrunning::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> AsyncDeletePolicy(::grpc::ClientContext* context, const ::google::iam::v2::DeletePolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(AsyncDeletePolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> PrepareAsyncDeletePolicy(::grpc::ClientContext* context, const ::google::iam::v2::DeletePolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(PrepareAsyncDeletePolicyRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Retrieves the policies of the specified kind that are attached to a
      // resource.
      //
      // The response lists only policy metadata. In particular, policy rules are
      // omitted.
      virtual void ListPolicies(::grpc::ClientContext* context, const ::google::iam::v2::ListPoliciesRequest* request, ::google::iam::v2::ListPoliciesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListPolicies(::grpc::ClientContext* context, const ::google::iam::v2::ListPoliciesRequest* request, ::google::iam::v2::ListPoliciesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Gets a policy.
      virtual void GetPolicy(::grpc::ClientContext* context, const ::google::iam::v2::GetPolicyRequest* request, ::google::iam::v2::Policy* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetPolicy(::grpc::ClientContext* context, const ::google::iam::v2::GetPolicyRequest* request, ::google::iam::v2::Policy* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Creates a policy.
      virtual void CreatePolicy(::grpc::ClientContext* context, const ::google::iam::v2::CreatePolicyRequest* request, ::google::longrunning::Operation* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreatePolicy(::grpc::ClientContext* context, const ::google::iam::v2::CreatePolicyRequest* request, ::google::longrunning::Operation* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Updates the specified policy.
      //
      // You can update only the rules and the display name for the policy.
      //
      // To update a policy, you should use a read-modify-write loop:
      //
      // 1. Use [GetPolicy][google.iam.v2.Policies.GetPolicy] to read the current version of the policy.
      // 2. Modify the policy as needed.
      // 3. Use `UpdatePolicy` to write the updated policy.
      //
      // This pattern helps prevent conflicts between concurrent updates.
      virtual void UpdatePolicy(::grpc::ClientContext* context, const ::google::iam::v2::UpdatePolicyRequest* request, ::google::longrunning::Operation* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdatePolicy(::grpc::ClientContext* context, const ::google::iam::v2::UpdatePolicyRequest* request, ::google::longrunning::Operation* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Deletes a policy. This action is permanent.
      virtual void DeletePolicy(::grpc::ClientContext* context, const ::google::iam::v2::DeletePolicyRequest* request, ::google::longrunning::Operation* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeletePolicy(::grpc::ClientContext* context, const ::google::iam::v2::DeletePolicyRequest* request, ::google::longrunning::Operation* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v2::ListPoliciesResponse>* AsyncListPoliciesRaw(::grpc::ClientContext* context, const ::google::iam::v2::ListPoliciesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v2::ListPoliciesResponse>* PrepareAsyncListPoliciesRaw(::grpc::ClientContext* context, const ::google::iam::v2::ListPoliciesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v2::Policy>* AsyncGetPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v2::GetPolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v2::Policy>* PrepareAsyncGetPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v2::GetPolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* AsyncCreatePolicyRaw(::grpc::ClientContext* context, const ::google::iam::v2::CreatePolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* PrepareAsyncCreatePolicyRaw(::grpc::ClientContext* context, const ::google::iam::v2::CreatePolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* AsyncUpdatePolicyRaw(::grpc::ClientContext* context, const ::google::iam::v2::UpdatePolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* PrepareAsyncUpdatePolicyRaw(::grpc::ClientContext* context, const ::google::iam::v2::UpdatePolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* AsyncDeletePolicyRaw(::grpc::ClientContext* context, const ::google::iam::v2::DeletePolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* PrepareAsyncDeletePolicyRaw(::grpc::ClientContext* context, const ::google::iam::v2::DeletePolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status ListPolicies(::grpc::ClientContext* context, const ::google::iam::v2::ListPoliciesRequest& request, ::google::iam::v2::ListPoliciesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v2::ListPoliciesResponse>> AsyncListPolicies(::grpc::ClientContext* context, const ::google::iam::v2::ListPoliciesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v2::ListPoliciesResponse>>(AsyncListPoliciesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v2::ListPoliciesResponse>> PrepareAsyncListPolicies(::grpc::ClientContext* context, const ::google::iam::v2::ListPoliciesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v2::ListPoliciesResponse>>(PrepareAsyncListPoliciesRaw(context, request, cq));
    }
    ::grpc::Status GetPolicy(::grpc::ClientContext* context, const ::google::iam::v2::GetPolicyRequest& request, ::google::iam::v2::Policy* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v2::Policy>> AsyncGetPolicy(::grpc::ClientContext* context, const ::google::iam::v2::GetPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v2::Policy>>(AsyncGetPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v2::Policy>> PrepareAsyncGetPolicy(::grpc::ClientContext* context, const ::google::iam::v2::GetPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v2::Policy>>(PrepareAsyncGetPolicyRaw(context, request, cq));
    }
    ::grpc::Status CreatePolicy(::grpc::ClientContext* context, const ::google::iam::v2::CreatePolicyRequest& request, ::google::longrunning::Operation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> AsyncCreatePolicy(::grpc::ClientContext* context, const ::google::iam::v2::CreatePolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(AsyncCreatePolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> PrepareAsyncCreatePolicy(::grpc::ClientContext* context, const ::google::iam::v2::CreatePolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(PrepareAsyncCreatePolicyRaw(context, request, cq));
    }
    ::grpc::Status UpdatePolicy(::grpc::ClientContext* context, const ::google::iam::v2::UpdatePolicyRequest& request, ::google::longrunning::Operation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> AsyncUpdatePolicy(::grpc::ClientContext* context, const ::google::iam::v2::UpdatePolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(AsyncUpdatePolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> PrepareAsyncUpdatePolicy(::grpc::ClientContext* context, const ::google::iam::v2::UpdatePolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(PrepareAsyncUpdatePolicyRaw(context, request, cq));
    }
    ::grpc::Status DeletePolicy(::grpc::ClientContext* context, const ::google::iam::v2::DeletePolicyRequest& request, ::google::longrunning::Operation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> AsyncDeletePolicy(::grpc::ClientContext* context, const ::google::iam::v2::DeletePolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(AsyncDeletePolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> PrepareAsyncDeletePolicy(::grpc::ClientContext* context, const ::google::iam::v2::DeletePolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(PrepareAsyncDeletePolicyRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void ListPolicies(::grpc::ClientContext* context, const ::google::iam::v2::ListPoliciesRequest* request, ::google::iam::v2::ListPoliciesResponse* response, std::function<void(::grpc::Status)>) override;
      void ListPolicies(::grpc::ClientContext* context, const ::google::iam::v2::ListPoliciesRequest* request, ::google::iam::v2::ListPoliciesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetPolicy(::grpc::ClientContext* context, const ::google::iam::v2::GetPolicyRequest* request, ::google::iam::v2::Policy* response, std::function<void(::grpc::Status)>) override;
      void GetPolicy(::grpc::ClientContext* context, const ::google::iam::v2::GetPolicyRequest* request, ::google::iam::v2::Policy* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreatePolicy(::grpc::ClientContext* context, const ::google::iam::v2::CreatePolicyRequest* request, ::google::longrunning::Operation* response, std::function<void(::grpc::Status)>) override;
      void CreatePolicy(::grpc::ClientContext* context, const ::google::iam::v2::CreatePolicyRequest* request, ::google::longrunning::Operation* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdatePolicy(::grpc::ClientContext* context, const ::google::iam::v2::UpdatePolicyRequest* request, ::google::longrunning::Operation* response, std::function<void(::grpc::Status)>) override;
      void UpdatePolicy(::grpc::ClientContext* context, const ::google::iam::v2::UpdatePolicyRequest* request, ::google::longrunning::Operation* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeletePolicy(::grpc::ClientContext* context, const ::google::iam::v2::DeletePolicyRequest* request, ::google::longrunning::Operation* response, std::function<void(::grpc::Status)>) override;
      void DeletePolicy(::grpc::ClientContext* context, const ::google::iam::v2::DeletePolicyRequest* request, ::google::longrunning::Operation* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::google::iam::v2::ListPoliciesResponse>* AsyncListPoliciesRaw(::grpc::ClientContext* context, const ::google::iam::v2::ListPoliciesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::v2::ListPoliciesResponse>* PrepareAsyncListPoliciesRaw(::grpc::ClientContext* context, const ::google::iam::v2::ListPoliciesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::v2::Policy>* AsyncGetPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v2::GetPolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::v2::Policy>* PrepareAsyncGetPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v2::GetPolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* AsyncCreatePolicyRaw(::grpc::ClientContext* context, const ::google::iam::v2::CreatePolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* PrepareAsyncCreatePolicyRaw(::grpc::ClientContext* context, const ::google::iam::v2::CreatePolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* AsyncUpdatePolicyRaw(::grpc::ClientContext* context, const ::google::iam::v2::UpdatePolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* PrepareAsyncUpdatePolicyRaw(::grpc::ClientContext* context, const ::google::iam::v2::UpdatePolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* AsyncDeletePolicyRaw(::grpc::ClientContext* context, const ::google::iam::v2::DeletePolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* PrepareAsyncDeletePolicyRaw(::grpc::ClientContext* context, const ::google::iam::v2::DeletePolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ListPolicies_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPolicy_;
    const ::grpc::internal::RpcMethod rpcmethod_CreatePolicy_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdatePolicy_;
    const ::grpc::internal::RpcMethod rpcmethod_DeletePolicy_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Retrieves the policies of the specified kind that are attached to a
    // resource.
    //
    // The response lists only policy metadata. In particular, policy rules are
    // omitted.
    virtual ::grpc::Status ListPolicies(::grpc::ServerContext* context, const ::google::iam::v2::ListPoliciesRequest* request, ::google::iam::v2::ListPoliciesResponse* response);
    // Gets a policy.
    virtual ::grpc::Status GetPolicy(::grpc::ServerContext* context, const ::google::iam::v2::GetPolicyRequest* request, ::google::iam::v2::Policy* response);
    // Creates a policy.
    virtual ::grpc::Status CreatePolicy(::grpc::ServerContext* context, const ::google::iam::v2::CreatePolicyRequest* request, ::google::longrunning::Operation* response);
    // Updates the specified policy.
    //
    // You can update only the rules and the display name for the policy.
    //
    // To update a policy, you should use a read-modify-write loop:
    //
    // 1. Use [GetPolicy][google.iam.v2.Policies.GetPolicy] to read the current version of the policy.
    // 2. Modify the policy as needed.
    // 3. Use `UpdatePolicy` to write the updated policy.
    //
    // This pattern helps prevent conflicts between concurrent updates.
    virtual ::grpc::Status UpdatePolicy(::grpc::ServerContext* context, const ::google::iam::v2::UpdatePolicyRequest* request, ::google::longrunning::Operation* response);
    // Deletes a policy. This action is permanent.
    virtual ::grpc::Status DeletePolicy(::grpc::ServerContext* context, const ::google::iam::v2::DeletePolicyRequest* request, ::google::longrunning::Operation* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ListPolicies : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListPolicies() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ListPolicies() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListPolicies(::grpc::ServerContext* /*context*/, const ::google::iam::v2::ListPoliciesRequest* /*request*/, ::google::iam::v2::ListPoliciesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListPolicies(::grpc::ServerContext* context, ::google::iam::v2::ListPoliciesRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::iam::v2::ListPoliciesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetPolicy() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPolicy(::grpc::ServerContext* /*context*/, const ::google::iam::v2::GetPolicyRequest* /*request*/, ::google::iam::v2::Policy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPolicy(::grpc::ServerContext* context, ::google::iam::v2::GetPolicyRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::iam::v2::Policy>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreatePolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreatePolicy() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_CreatePolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreatePolicy(::grpc::ServerContext* /*context*/, const ::google::iam::v2::CreatePolicyRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreatePolicy(::grpc::ServerContext* context, ::google::iam::v2::CreatePolicyRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::longrunning::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdatePolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdatePolicy() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_UpdatePolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdatePolicy(::grpc::ServerContext* /*context*/, const ::google::iam::v2::UpdatePolicyRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdatePolicy(::grpc::ServerContext* context, ::google::iam::v2::UpdatePolicyRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::longrunning::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeletePolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeletePolicy() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_DeletePolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePolicy(::grpc::ServerContext* /*context*/, const ::google::iam::v2::DeletePolicyRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeletePolicy(::grpc::ServerContext* context, ::google::iam::v2::DeletePolicyRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::longrunning::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ListPolicies<WithAsyncMethod_GetPolicy<WithAsyncMethod_CreatePolicy<WithAsyncMethod_UpdatePolicy<WithAsyncMethod_DeletePolicy<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_ListPolicies : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListPolicies() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::google::iam::v2::ListPoliciesRequest, ::google::iam::v2::ListPoliciesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::iam::v2::ListPoliciesRequest* request, ::google::iam::v2::ListPoliciesResponse* response) { return this->ListPolicies(context, request, response); }));}
    void SetMessageAllocatorFor_ListPolicies(
        ::grpc::MessageAllocator< ::google::iam::v2::ListPoliciesRequest, ::google::iam::v2::ListPoliciesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::iam::v2::ListPoliciesRequest, ::google::iam::v2::ListPoliciesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListPolicies() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListPolicies(::grpc::ServerContext* /*context*/, const ::google::iam::v2::ListPoliciesRequest* /*request*/, ::google::iam::v2::ListPoliciesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListPolicies(
      ::grpc::CallbackServerContext* /*context*/, const ::google::iam::v2::ListPoliciesRequest* /*request*/, ::google::iam::v2::ListPoliciesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetPolicy() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::google::iam::v2::GetPolicyRequest, ::google::iam::v2::Policy>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::iam::v2::GetPolicyRequest* request, ::google::iam::v2::Policy* response) { return this->GetPolicy(context, request, response); }));}
    void SetMessageAllocatorFor_GetPolicy(
        ::grpc::MessageAllocator< ::google::iam::v2::GetPolicyRequest, ::google::iam::v2::Policy>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::iam::v2::GetPolicyRequest, ::google::iam::v2::Policy>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPolicy(::grpc::ServerContext* /*context*/, const ::google::iam::v2::GetPolicyRequest* /*request*/, ::google::iam::v2::Policy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::google::iam::v2::GetPolicyRequest* /*request*/, ::google::iam::v2::Policy* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreatePolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreatePolicy() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::google::iam::v2::CreatePolicyRequest, ::google::longrunning::Operation>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::iam::v2::CreatePolicyRequest* request, ::google::longrunning::Operation* response) { return this->CreatePolicy(context, request, response); }));}
    void SetMessageAllocatorFor_CreatePolicy(
        ::grpc::MessageAllocator< ::google::iam::v2::CreatePolicyRequest, ::google::longrunning::Operation>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::iam::v2::CreatePolicyRequest, ::google::longrunning::Operation>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreatePolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreatePolicy(::grpc::ServerContext* /*context*/, const ::google::iam::v2::CreatePolicyRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreatePolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::google::iam::v2::CreatePolicyRequest* /*request*/, ::google::longrunning::Operation* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdatePolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdatePolicy() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::google::iam::v2::UpdatePolicyRequest, ::google::longrunning::Operation>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::iam::v2::UpdatePolicyRequest* request, ::google::longrunning::Operation* response) { return this->UpdatePolicy(context, request, response); }));}
    void SetMessageAllocatorFor_UpdatePolicy(
        ::grpc::MessageAllocator< ::google::iam::v2::UpdatePolicyRequest, ::google::longrunning::Operation>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::iam::v2::UpdatePolicyRequest, ::google::longrunning::Operation>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdatePolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdatePolicy(::grpc::ServerContext* /*context*/, const ::google::iam::v2::UpdatePolicyRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdatePolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::google::iam::v2::UpdatePolicyRequest* /*request*/, ::google::longrunning::Operation* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeletePolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeletePolicy() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::google::iam::v2::DeletePolicyRequest, ::google::longrunning::Operation>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::iam::v2::DeletePolicyRequest* request, ::google::longrunning::Operation* response) { return this->DeletePolicy(context, request, response); }));}
    void SetMessageAllocatorFor_DeletePolicy(
        ::grpc::MessageAllocator< ::google::iam::v2::DeletePolicyRequest, ::google::longrunning::Operation>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::iam::v2::DeletePolicyRequest, ::google::longrunning::Operation>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeletePolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePolicy(::grpc::ServerContext* /*context*/, const ::google::iam::v2::DeletePolicyRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeletePolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::google::iam::v2::DeletePolicyRequest* /*request*/, ::google::longrunning::Operation* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_ListPolicies<WithCallbackMethod_GetPolicy<WithCallbackMethod_CreatePolicy<WithCallbackMethod_UpdatePolicy<WithCallbackMethod_DeletePolicy<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ListPolicies : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListPolicies() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ListPolicies() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListPolicies(::grpc::ServerContext* /*context*/, const ::google::iam::v2::ListPoliciesRequest* /*request*/, ::google::iam::v2::ListPoliciesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetPolicy() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPolicy(::grpc::ServerContext* /*context*/, const ::google::iam::v2::GetPolicyRequest* /*request*/, ::google::iam::v2::Policy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreatePolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreatePolicy() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_CreatePolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreatePolicy(::grpc::ServerContext* /*context*/, const ::google::iam::v2::CreatePolicyRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdatePolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdatePolicy() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_UpdatePolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdatePolicy(::grpc::ServerContext* /*context*/, const ::google::iam::v2::UpdatePolicyRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeletePolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeletePolicy() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_DeletePolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePolicy(::grpc::ServerContext* /*context*/, const ::google::iam::v2::DeletePolicyRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListPolicies : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListPolicies() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ListPolicies() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListPolicies(::grpc::ServerContext* /*context*/, const ::google::iam::v2::ListPoliciesRequest* /*request*/, ::google::iam::v2::ListPoliciesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListPolicies(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetPolicy() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPolicy(::grpc::ServerContext* /*context*/, const ::google::iam::v2::GetPolicyRequest* /*request*/, ::google::iam::v2::Policy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPolicy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreatePolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreatePolicy() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_CreatePolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreatePolicy(::grpc::ServerContext* /*context*/, const ::google::iam::v2::CreatePolicyRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreatePolicy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdatePolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdatePolicy() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_UpdatePolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdatePolicy(::grpc::ServerContext* /*context*/, const ::google::iam::v2::UpdatePolicyRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdatePolicy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeletePolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeletePolicy() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_DeletePolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePolicy(::grpc::ServerContext* /*context*/, const ::google::iam::v2::DeletePolicyRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeletePolicy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListPolicies : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListPolicies() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListPolicies(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListPolicies() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListPolicies(::grpc::ServerContext* /*context*/, const ::google::iam::v2::ListPoliciesRequest* /*request*/, ::google::iam::v2::ListPoliciesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListPolicies(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetPolicy() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetPolicy(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPolicy(::grpc::ServerContext* /*context*/, const ::google::iam::v2::GetPolicyRequest* /*request*/, ::google::iam::v2::Policy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreatePolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreatePolicy() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreatePolicy(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreatePolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreatePolicy(::grpc::ServerContext* /*context*/, const ::google::iam::v2::CreatePolicyRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreatePolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdatePolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdatePolicy() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdatePolicy(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdatePolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdatePolicy(::grpc::ServerContext* /*context*/, const ::google::iam::v2::UpdatePolicyRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdatePolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeletePolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeletePolicy() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeletePolicy(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeletePolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePolicy(::grpc::ServerContext* /*context*/, const ::google::iam::v2::DeletePolicyRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeletePolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListPolicies : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListPolicies() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::iam::v2::ListPoliciesRequest, ::google::iam::v2::ListPoliciesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::iam::v2::ListPoliciesRequest, ::google::iam::v2::ListPoliciesResponse>* streamer) {
                       return this->StreamedListPolicies(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListPolicies() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListPolicies(::grpc::ServerContext* /*context*/, const ::google::iam::v2::ListPoliciesRequest* /*request*/, ::google::iam::v2::ListPoliciesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListPolicies(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::iam::v2::ListPoliciesRequest,::google::iam::v2::ListPoliciesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetPolicy() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::iam::v2::GetPolicyRequest, ::google::iam::v2::Policy>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::iam::v2::GetPolicyRequest, ::google::iam::v2::Policy>* streamer) {
                       return this->StreamedGetPolicy(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPolicy(::grpc::ServerContext* /*context*/, const ::google::iam::v2::GetPolicyRequest* /*request*/, ::google::iam::v2::Policy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPolicy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::iam::v2::GetPolicyRequest,::google::iam::v2::Policy>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreatePolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreatePolicy() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::iam::v2::CreatePolicyRequest, ::google::longrunning::Operation>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::iam::v2::CreatePolicyRequest, ::google::longrunning::Operation>* streamer) {
                       return this->StreamedCreatePolicy(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreatePolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreatePolicy(::grpc::ServerContext* /*context*/, const ::google::iam::v2::CreatePolicyRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreatePolicy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::iam::v2::CreatePolicyRequest,::google::longrunning::Operation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdatePolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdatePolicy() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::iam::v2::UpdatePolicyRequest, ::google::longrunning::Operation>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::iam::v2::UpdatePolicyRequest, ::google::longrunning::Operation>* streamer) {
                       return this->StreamedUpdatePolicy(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdatePolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdatePolicy(::grpc::ServerContext* /*context*/, const ::google::iam::v2::UpdatePolicyRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdatePolicy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::iam::v2::UpdatePolicyRequest,::google::longrunning::Operation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeletePolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeletePolicy() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::iam::v2::DeletePolicyRequest, ::google::longrunning::Operation>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::iam::v2::DeletePolicyRequest, ::google::longrunning::Operation>* streamer) {
                       return this->StreamedDeletePolicy(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeletePolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeletePolicy(::grpc::ServerContext* /*context*/, const ::google::iam::v2::DeletePolicyRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeletePolicy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::iam::v2::DeletePolicyRequest,::google::longrunning::Operation>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ListPolicies<WithStreamedUnaryMethod_GetPolicy<WithStreamedUnaryMethod_CreatePolicy<WithStreamedUnaryMethod_UpdatePolicy<WithStreamedUnaryMethod_DeletePolicy<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ListPolicies<WithStreamedUnaryMethod_GetPolicy<WithStreamedUnaryMethod_CreatePolicy<WithStreamedUnaryMethod_UpdatePolicy<WithStreamedUnaryMethod_DeletePolicy<Service > > > > > StreamedService;
};

}  // namespace v2
}  // namespace iam
}  // namespace google


#endif  // GRPC_google_2fiam_2fv2_2fpolicy_2eproto__INCLUDED
