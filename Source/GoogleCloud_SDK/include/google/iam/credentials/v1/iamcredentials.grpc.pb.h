// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/iam/credentials/v1/iamcredentials.proto
// Original file comments:
// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_google_2fiam_2fcredentials_2fv1_2fiamcredentials_2eproto__INCLUDED
#define GRPC_google_2fiam_2fcredentials_2fv1_2fiamcredentials_2eproto__INCLUDED

#include "google/iam/credentials/v1/iamcredentials.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace google {
namespace iam {
namespace credentials {
namespace v1 {

// A service account is a special type of Google account that belongs to your
// application or a virtual machine (VM), instead of to an individual end user.
// Your application assumes the identity of the service account to call Google
// APIs, so that the users aren't directly involved.
//
// Service account credentials are used to temporarily assume the identity
// of the service account. Supported credential types include OAuth 2.0 access
// tokens, OpenID Connect ID tokens, self-signed JSON Web Tokens (JWTs), and
// more.
class IAMCredentials final {
 public:
  static constexpr char const* service_full_name() {
    return "google.iam.credentials.v1.IAMCredentials";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Generates an OAuth 2.0 access token for a service account.
    virtual ::grpc::Status GenerateAccessToken(::grpc::ClientContext* context, const ::google::iam::credentials::v1::GenerateAccessTokenRequest& request, ::google::iam::credentials::v1::GenerateAccessTokenResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::credentials::v1::GenerateAccessTokenResponse>> AsyncGenerateAccessToken(::grpc::ClientContext* context, const ::google::iam::credentials::v1::GenerateAccessTokenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::credentials::v1::GenerateAccessTokenResponse>>(AsyncGenerateAccessTokenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::credentials::v1::GenerateAccessTokenResponse>> PrepareAsyncGenerateAccessToken(::grpc::ClientContext* context, const ::google::iam::credentials::v1::GenerateAccessTokenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::credentials::v1::GenerateAccessTokenResponse>>(PrepareAsyncGenerateAccessTokenRaw(context, request, cq));
    }
    // Generates an OpenID Connect ID token for a service account.
    virtual ::grpc::Status GenerateIdToken(::grpc::ClientContext* context, const ::google::iam::credentials::v1::GenerateIdTokenRequest& request, ::google::iam::credentials::v1::GenerateIdTokenResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::credentials::v1::GenerateIdTokenResponse>> AsyncGenerateIdToken(::grpc::ClientContext* context, const ::google::iam::credentials::v1::GenerateIdTokenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::credentials::v1::GenerateIdTokenResponse>>(AsyncGenerateIdTokenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::credentials::v1::GenerateIdTokenResponse>> PrepareAsyncGenerateIdToken(::grpc::ClientContext* context, const ::google::iam::credentials::v1::GenerateIdTokenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::credentials::v1::GenerateIdTokenResponse>>(PrepareAsyncGenerateIdTokenRaw(context, request, cq));
    }
    // Signs a blob using a service account's system-managed private key.
    virtual ::grpc::Status SignBlob(::grpc::ClientContext* context, const ::google::iam::credentials::v1::SignBlobRequest& request, ::google::iam::credentials::v1::SignBlobResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::credentials::v1::SignBlobResponse>> AsyncSignBlob(::grpc::ClientContext* context, const ::google::iam::credentials::v1::SignBlobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::credentials::v1::SignBlobResponse>>(AsyncSignBlobRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::credentials::v1::SignBlobResponse>> PrepareAsyncSignBlob(::grpc::ClientContext* context, const ::google::iam::credentials::v1::SignBlobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::credentials::v1::SignBlobResponse>>(PrepareAsyncSignBlobRaw(context, request, cq));
    }
    // Signs a JWT using a service account's system-managed private key.
    virtual ::grpc::Status SignJwt(::grpc::ClientContext* context, const ::google::iam::credentials::v1::SignJwtRequest& request, ::google::iam::credentials::v1::SignJwtResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::credentials::v1::SignJwtResponse>> AsyncSignJwt(::grpc::ClientContext* context, const ::google::iam::credentials::v1::SignJwtRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::credentials::v1::SignJwtResponse>>(AsyncSignJwtRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::credentials::v1::SignJwtResponse>> PrepareAsyncSignJwt(::grpc::ClientContext* context, const ::google::iam::credentials::v1::SignJwtRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::credentials::v1::SignJwtResponse>>(PrepareAsyncSignJwtRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Generates an OAuth 2.0 access token for a service account.
      virtual void GenerateAccessToken(::grpc::ClientContext* context, const ::google::iam::credentials::v1::GenerateAccessTokenRequest* request, ::google::iam::credentials::v1::GenerateAccessTokenResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GenerateAccessToken(::grpc::ClientContext* context, const ::google::iam::credentials::v1::GenerateAccessTokenRequest* request, ::google::iam::credentials::v1::GenerateAccessTokenResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GenerateAccessToken(::grpc::ClientContext* context, const ::google::iam::credentials::v1::GenerateAccessTokenRequest* request, ::google::iam::credentials::v1::GenerateAccessTokenResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Generates an OpenID Connect ID token for a service account.
      virtual void GenerateIdToken(::grpc::ClientContext* context, const ::google::iam::credentials::v1::GenerateIdTokenRequest* request, ::google::iam::credentials::v1::GenerateIdTokenResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GenerateIdToken(::grpc::ClientContext* context, const ::google::iam::credentials::v1::GenerateIdTokenRequest* request, ::google::iam::credentials::v1::GenerateIdTokenResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GenerateIdToken(::grpc::ClientContext* context, const ::google::iam::credentials::v1::GenerateIdTokenRequest* request, ::google::iam::credentials::v1::GenerateIdTokenResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Signs a blob using a service account's system-managed private key.
      virtual void SignBlob(::grpc::ClientContext* context, const ::google::iam::credentials::v1::SignBlobRequest* request, ::google::iam::credentials::v1::SignBlobResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SignBlob(::grpc::ClientContext* context, const ::google::iam::credentials::v1::SignBlobRequest* request, ::google::iam::credentials::v1::SignBlobResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SignBlob(::grpc::ClientContext* context, const ::google::iam::credentials::v1::SignBlobRequest* request, ::google::iam::credentials::v1::SignBlobResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Signs a JWT using a service account's system-managed private key.
      virtual void SignJwt(::grpc::ClientContext* context, const ::google::iam::credentials::v1::SignJwtRequest* request, ::google::iam::credentials::v1::SignJwtResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SignJwt(::grpc::ClientContext* context, const ::google::iam::credentials::v1::SignJwtRequest* request, ::google::iam::credentials::v1::SignJwtResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SignJwt(::grpc::ClientContext* context, const ::google::iam::credentials::v1::SignJwtRequest* request, ::google::iam::credentials::v1::SignJwtResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::credentials::v1::GenerateAccessTokenResponse>* AsyncGenerateAccessTokenRaw(::grpc::ClientContext* context, const ::google::iam::credentials::v1::GenerateAccessTokenRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::credentials::v1::GenerateAccessTokenResponse>* PrepareAsyncGenerateAccessTokenRaw(::grpc::ClientContext* context, const ::google::iam::credentials::v1::GenerateAccessTokenRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::credentials::v1::GenerateIdTokenResponse>* AsyncGenerateIdTokenRaw(::grpc::ClientContext* context, const ::google::iam::credentials::v1::GenerateIdTokenRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::credentials::v1::GenerateIdTokenResponse>* PrepareAsyncGenerateIdTokenRaw(::grpc::ClientContext* context, const ::google::iam::credentials::v1::GenerateIdTokenRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::credentials::v1::SignBlobResponse>* AsyncSignBlobRaw(::grpc::ClientContext* context, const ::google::iam::credentials::v1::SignBlobRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::credentials::v1::SignBlobResponse>* PrepareAsyncSignBlobRaw(::grpc::ClientContext* context, const ::google::iam::credentials::v1::SignBlobRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::credentials::v1::SignJwtResponse>* AsyncSignJwtRaw(::grpc::ClientContext* context, const ::google::iam::credentials::v1::SignJwtRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::credentials::v1::SignJwtResponse>* PrepareAsyncSignJwtRaw(::grpc::ClientContext* context, const ::google::iam::credentials::v1::SignJwtRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GenerateAccessToken(::grpc::ClientContext* context, const ::google::iam::credentials::v1::GenerateAccessTokenRequest& request, ::google::iam::credentials::v1::GenerateAccessTokenResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::credentials::v1::GenerateAccessTokenResponse>> AsyncGenerateAccessToken(::grpc::ClientContext* context, const ::google::iam::credentials::v1::GenerateAccessTokenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::credentials::v1::GenerateAccessTokenResponse>>(AsyncGenerateAccessTokenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::credentials::v1::GenerateAccessTokenResponse>> PrepareAsyncGenerateAccessToken(::grpc::ClientContext* context, const ::google::iam::credentials::v1::GenerateAccessTokenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::credentials::v1::GenerateAccessTokenResponse>>(PrepareAsyncGenerateAccessTokenRaw(context, request, cq));
    }
    ::grpc::Status GenerateIdToken(::grpc::ClientContext* context, const ::google::iam::credentials::v1::GenerateIdTokenRequest& request, ::google::iam::credentials::v1::GenerateIdTokenResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::credentials::v1::GenerateIdTokenResponse>> AsyncGenerateIdToken(::grpc::ClientContext* context, const ::google::iam::credentials::v1::GenerateIdTokenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::credentials::v1::GenerateIdTokenResponse>>(AsyncGenerateIdTokenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::credentials::v1::GenerateIdTokenResponse>> PrepareAsyncGenerateIdToken(::grpc::ClientContext* context, const ::google::iam::credentials::v1::GenerateIdTokenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::credentials::v1::GenerateIdTokenResponse>>(PrepareAsyncGenerateIdTokenRaw(context, request, cq));
    }
    ::grpc::Status SignBlob(::grpc::ClientContext* context, const ::google::iam::credentials::v1::SignBlobRequest& request, ::google::iam::credentials::v1::SignBlobResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::credentials::v1::SignBlobResponse>> AsyncSignBlob(::grpc::ClientContext* context, const ::google::iam::credentials::v1::SignBlobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::credentials::v1::SignBlobResponse>>(AsyncSignBlobRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::credentials::v1::SignBlobResponse>> PrepareAsyncSignBlob(::grpc::ClientContext* context, const ::google::iam::credentials::v1::SignBlobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::credentials::v1::SignBlobResponse>>(PrepareAsyncSignBlobRaw(context, request, cq));
    }
    ::grpc::Status SignJwt(::grpc::ClientContext* context, const ::google::iam::credentials::v1::SignJwtRequest& request, ::google::iam::credentials::v1::SignJwtResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::credentials::v1::SignJwtResponse>> AsyncSignJwt(::grpc::ClientContext* context, const ::google::iam::credentials::v1::SignJwtRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::credentials::v1::SignJwtResponse>>(AsyncSignJwtRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::credentials::v1::SignJwtResponse>> PrepareAsyncSignJwt(::grpc::ClientContext* context, const ::google::iam::credentials::v1::SignJwtRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::credentials::v1::SignJwtResponse>>(PrepareAsyncSignJwtRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void GenerateAccessToken(::grpc::ClientContext* context, const ::google::iam::credentials::v1::GenerateAccessTokenRequest* request, ::google::iam::credentials::v1::GenerateAccessTokenResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GenerateAccessToken(::grpc::ClientContext* context, const ::google::iam::credentials::v1::GenerateAccessTokenRequest* request, ::google::iam::credentials::v1::GenerateAccessTokenResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GenerateAccessToken(::grpc::ClientContext* context, const ::google::iam::credentials::v1::GenerateAccessTokenRequest* request, ::google::iam::credentials::v1::GenerateAccessTokenResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GenerateIdToken(::grpc::ClientContext* context, const ::google::iam::credentials::v1::GenerateIdTokenRequest* request, ::google::iam::credentials::v1::GenerateIdTokenResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GenerateIdToken(::grpc::ClientContext* context, const ::google::iam::credentials::v1::GenerateIdTokenRequest* request, ::google::iam::credentials::v1::GenerateIdTokenResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GenerateIdToken(::grpc::ClientContext* context, const ::google::iam::credentials::v1::GenerateIdTokenRequest* request, ::google::iam::credentials::v1::GenerateIdTokenResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SignBlob(::grpc::ClientContext* context, const ::google::iam::credentials::v1::SignBlobRequest* request, ::google::iam::credentials::v1::SignBlobResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SignBlob(::grpc::ClientContext* context, const ::google::iam::credentials::v1::SignBlobRequest* request, ::google::iam::credentials::v1::SignBlobResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SignBlob(::grpc::ClientContext* context, const ::google::iam::credentials::v1::SignBlobRequest* request, ::google::iam::credentials::v1::SignBlobResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SignJwt(::grpc::ClientContext* context, const ::google::iam::credentials::v1::SignJwtRequest* request, ::google::iam::credentials::v1::SignJwtResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SignJwt(::grpc::ClientContext* context, const ::google::iam::credentials::v1::SignJwtRequest* request, ::google::iam::credentials::v1::SignJwtResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SignJwt(::grpc::ClientContext* context, const ::google::iam::credentials::v1::SignJwtRequest* request, ::google::iam::credentials::v1::SignJwtResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::google::iam::credentials::v1::GenerateAccessTokenResponse>* AsyncGenerateAccessTokenRaw(::grpc::ClientContext* context, const ::google::iam::credentials::v1::GenerateAccessTokenRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::credentials::v1::GenerateAccessTokenResponse>* PrepareAsyncGenerateAccessTokenRaw(::grpc::ClientContext* context, const ::google::iam::credentials::v1::GenerateAccessTokenRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::credentials::v1::GenerateIdTokenResponse>* AsyncGenerateIdTokenRaw(::grpc::ClientContext* context, const ::google::iam::credentials::v1::GenerateIdTokenRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::credentials::v1::GenerateIdTokenResponse>* PrepareAsyncGenerateIdTokenRaw(::grpc::ClientContext* context, const ::google::iam::credentials::v1::GenerateIdTokenRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::credentials::v1::SignBlobResponse>* AsyncSignBlobRaw(::grpc::ClientContext* context, const ::google::iam::credentials::v1::SignBlobRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::credentials::v1::SignBlobResponse>* PrepareAsyncSignBlobRaw(::grpc::ClientContext* context, const ::google::iam::credentials::v1::SignBlobRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::credentials::v1::SignJwtResponse>* AsyncSignJwtRaw(::grpc::ClientContext* context, const ::google::iam::credentials::v1::SignJwtRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::credentials::v1::SignJwtResponse>* PrepareAsyncSignJwtRaw(::grpc::ClientContext* context, const ::google::iam::credentials::v1::SignJwtRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GenerateAccessToken_;
    const ::grpc::internal::RpcMethod rpcmethod_GenerateIdToken_;
    const ::grpc::internal::RpcMethod rpcmethod_SignBlob_;
    const ::grpc::internal::RpcMethod rpcmethod_SignJwt_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Generates an OAuth 2.0 access token for a service account.
    virtual ::grpc::Status GenerateAccessToken(::grpc::ServerContext* context, const ::google::iam::credentials::v1::GenerateAccessTokenRequest* request, ::google::iam::credentials::v1::GenerateAccessTokenResponse* response);
    // Generates an OpenID Connect ID token for a service account.
    virtual ::grpc::Status GenerateIdToken(::grpc::ServerContext* context, const ::google::iam::credentials::v1::GenerateIdTokenRequest* request, ::google::iam::credentials::v1::GenerateIdTokenResponse* response);
    // Signs a blob using a service account's system-managed private key.
    virtual ::grpc::Status SignBlob(::grpc::ServerContext* context, const ::google::iam::credentials::v1::SignBlobRequest* request, ::google::iam::credentials::v1::SignBlobResponse* response);
    // Signs a JWT using a service account's system-managed private key.
    virtual ::grpc::Status SignJwt(::grpc::ServerContext* context, const ::google::iam::credentials::v1::SignJwtRequest* request, ::google::iam::credentials::v1::SignJwtResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GenerateAccessToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GenerateAccessToken() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GenerateAccessToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateAccessToken(::grpc::ServerContext* /*context*/, const ::google::iam::credentials::v1::GenerateAccessTokenRequest* /*request*/, ::google::iam::credentials::v1::GenerateAccessTokenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGenerateAccessToken(::grpc::ServerContext* context, ::google::iam::credentials::v1::GenerateAccessTokenRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::iam::credentials::v1::GenerateAccessTokenResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GenerateIdToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GenerateIdToken() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GenerateIdToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateIdToken(::grpc::ServerContext* /*context*/, const ::google::iam::credentials::v1::GenerateIdTokenRequest* /*request*/, ::google::iam::credentials::v1::GenerateIdTokenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGenerateIdToken(::grpc::ServerContext* context, ::google::iam::credentials::v1::GenerateIdTokenRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::iam::credentials::v1::GenerateIdTokenResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SignBlob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SignBlob() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SignBlob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignBlob(::grpc::ServerContext* /*context*/, const ::google::iam::credentials::v1::SignBlobRequest* /*request*/, ::google::iam::credentials::v1::SignBlobResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSignBlob(::grpc::ServerContext* context, ::google::iam::credentials::v1::SignBlobRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::iam::credentials::v1::SignBlobResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SignJwt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SignJwt() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_SignJwt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignJwt(::grpc::ServerContext* /*context*/, const ::google::iam::credentials::v1::SignJwtRequest* /*request*/, ::google::iam::credentials::v1::SignJwtResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSignJwt(::grpc::ServerContext* context, ::google::iam::credentials::v1::SignJwtRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::iam::credentials::v1::SignJwtResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GenerateAccessToken<WithAsyncMethod_GenerateIdToken<WithAsyncMethod_SignBlob<WithAsyncMethod_SignJwt<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GenerateAccessToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GenerateAccessToken() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::google::iam::credentials::v1::GenerateAccessTokenRequest, ::google::iam::credentials::v1::GenerateAccessTokenResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::iam::credentials::v1::GenerateAccessTokenRequest* request, ::google::iam::credentials::v1::GenerateAccessTokenResponse* response) { return this->GenerateAccessToken(context, request, response); }));}
    void SetMessageAllocatorFor_GenerateAccessToken(
        ::grpc::experimental::MessageAllocator< ::google::iam::credentials::v1::GenerateAccessTokenRequest, ::google::iam::credentials::v1::GenerateAccessTokenResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::iam::credentials::v1::GenerateAccessTokenRequest, ::google::iam::credentials::v1::GenerateAccessTokenResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GenerateAccessToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateAccessToken(::grpc::ServerContext* /*context*/, const ::google::iam::credentials::v1::GenerateAccessTokenRequest* /*request*/, ::google::iam::credentials::v1::GenerateAccessTokenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GenerateAccessToken(
      ::grpc::CallbackServerContext* /*context*/, const ::google::iam::credentials::v1::GenerateAccessTokenRequest* /*request*/, ::google::iam::credentials::v1::GenerateAccessTokenResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GenerateAccessToken(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::iam::credentials::v1::GenerateAccessTokenRequest* /*request*/, ::google::iam::credentials::v1::GenerateAccessTokenResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GenerateIdToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GenerateIdToken() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::google::iam::credentials::v1::GenerateIdTokenRequest, ::google::iam::credentials::v1::GenerateIdTokenResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::iam::credentials::v1::GenerateIdTokenRequest* request, ::google::iam::credentials::v1::GenerateIdTokenResponse* response) { return this->GenerateIdToken(context, request, response); }));}
    void SetMessageAllocatorFor_GenerateIdToken(
        ::grpc::experimental::MessageAllocator< ::google::iam::credentials::v1::GenerateIdTokenRequest, ::google::iam::credentials::v1::GenerateIdTokenResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::iam::credentials::v1::GenerateIdTokenRequest, ::google::iam::credentials::v1::GenerateIdTokenResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GenerateIdToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateIdToken(::grpc::ServerContext* /*context*/, const ::google::iam::credentials::v1::GenerateIdTokenRequest* /*request*/, ::google::iam::credentials::v1::GenerateIdTokenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GenerateIdToken(
      ::grpc::CallbackServerContext* /*context*/, const ::google::iam::credentials::v1::GenerateIdTokenRequest* /*request*/, ::google::iam::credentials::v1::GenerateIdTokenResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GenerateIdToken(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::iam::credentials::v1::GenerateIdTokenRequest* /*request*/, ::google::iam::credentials::v1::GenerateIdTokenResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SignBlob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SignBlob() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::google::iam::credentials::v1::SignBlobRequest, ::google::iam::credentials::v1::SignBlobResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::iam::credentials::v1::SignBlobRequest* request, ::google::iam::credentials::v1::SignBlobResponse* response) { return this->SignBlob(context, request, response); }));}
    void SetMessageAllocatorFor_SignBlob(
        ::grpc::experimental::MessageAllocator< ::google::iam::credentials::v1::SignBlobRequest, ::google::iam::credentials::v1::SignBlobResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::iam::credentials::v1::SignBlobRequest, ::google::iam::credentials::v1::SignBlobResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SignBlob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignBlob(::grpc::ServerContext* /*context*/, const ::google::iam::credentials::v1::SignBlobRequest* /*request*/, ::google::iam::credentials::v1::SignBlobResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SignBlob(
      ::grpc::CallbackServerContext* /*context*/, const ::google::iam::credentials::v1::SignBlobRequest* /*request*/, ::google::iam::credentials::v1::SignBlobResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SignBlob(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::iam::credentials::v1::SignBlobRequest* /*request*/, ::google::iam::credentials::v1::SignBlobResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SignJwt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SignJwt() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::google::iam::credentials::v1::SignJwtRequest, ::google::iam::credentials::v1::SignJwtResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::iam::credentials::v1::SignJwtRequest* request, ::google::iam::credentials::v1::SignJwtResponse* response) { return this->SignJwt(context, request, response); }));}
    void SetMessageAllocatorFor_SignJwt(
        ::grpc::experimental::MessageAllocator< ::google::iam::credentials::v1::SignJwtRequest, ::google::iam::credentials::v1::SignJwtResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::iam::credentials::v1::SignJwtRequest, ::google::iam::credentials::v1::SignJwtResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SignJwt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignJwt(::grpc::ServerContext* /*context*/, const ::google::iam::credentials::v1::SignJwtRequest* /*request*/, ::google::iam::credentials::v1::SignJwtResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SignJwt(
      ::grpc::CallbackServerContext* /*context*/, const ::google::iam::credentials::v1::SignJwtRequest* /*request*/, ::google::iam::credentials::v1::SignJwtResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SignJwt(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::iam::credentials::v1::SignJwtRequest* /*request*/, ::google::iam::credentials::v1::SignJwtResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_GenerateAccessToken<ExperimentalWithCallbackMethod_GenerateIdToken<ExperimentalWithCallbackMethod_SignBlob<ExperimentalWithCallbackMethod_SignJwt<Service > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_GenerateAccessToken<ExperimentalWithCallbackMethod_GenerateIdToken<ExperimentalWithCallbackMethod_SignBlob<ExperimentalWithCallbackMethod_SignJwt<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GenerateAccessToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GenerateAccessToken() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GenerateAccessToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateAccessToken(::grpc::ServerContext* /*context*/, const ::google::iam::credentials::v1::GenerateAccessTokenRequest* /*request*/, ::google::iam::credentials::v1::GenerateAccessTokenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GenerateIdToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GenerateIdToken() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GenerateIdToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateIdToken(::grpc::ServerContext* /*context*/, const ::google::iam::credentials::v1::GenerateIdTokenRequest* /*request*/, ::google::iam::credentials::v1::GenerateIdTokenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SignBlob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SignBlob() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SignBlob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignBlob(::grpc::ServerContext* /*context*/, const ::google::iam::credentials::v1::SignBlobRequest* /*request*/, ::google::iam::credentials::v1::SignBlobResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SignJwt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SignJwt() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_SignJwt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignJwt(::grpc::ServerContext* /*context*/, const ::google::iam::credentials::v1::SignJwtRequest* /*request*/, ::google::iam::credentials::v1::SignJwtResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GenerateAccessToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GenerateAccessToken() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GenerateAccessToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateAccessToken(::grpc::ServerContext* /*context*/, const ::google::iam::credentials::v1::GenerateAccessTokenRequest* /*request*/, ::google::iam::credentials::v1::GenerateAccessTokenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGenerateAccessToken(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GenerateIdToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GenerateIdToken() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GenerateIdToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateIdToken(::grpc::ServerContext* /*context*/, const ::google::iam::credentials::v1::GenerateIdTokenRequest* /*request*/, ::google::iam::credentials::v1::GenerateIdTokenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGenerateIdToken(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SignBlob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SignBlob() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SignBlob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignBlob(::grpc::ServerContext* /*context*/, const ::google::iam::credentials::v1::SignBlobRequest* /*request*/, ::google::iam::credentials::v1::SignBlobResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSignBlob(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SignJwt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SignJwt() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_SignJwt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignJwt(::grpc::ServerContext* /*context*/, const ::google::iam::credentials::v1::SignJwtRequest* /*request*/, ::google::iam::credentials::v1::SignJwtResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSignJwt(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GenerateAccessToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GenerateAccessToken() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GenerateAccessToken(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GenerateAccessToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateAccessToken(::grpc::ServerContext* /*context*/, const ::google::iam::credentials::v1::GenerateAccessTokenRequest* /*request*/, ::google::iam::credentials::v1::GenerateAccessTokenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GenerateAccessToken(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GenerateAccessToken(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GenerateIdToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GenerateIdToken() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GenerateIdToken(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GenerateIdToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateIdToken(::grpc::ServerContext* /*context*/, const ::google::iam::credentials::v1::GenerateIdTokenRequest* /*request*/, ::google::iam::credentials::v1::GenerateIdTokenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GenerateIdToken(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GenerateIdToken(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SignBlob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SignBlob() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SignBlob(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SignBlob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignBlob(::grpc::ServerContext* /*context*/, const ::google::iam::credentials::v1::SignBlobRequest* /*request*/, ::google::iam::credentials::v1::SignBlobResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SignBlob(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SignBlob(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SignJwt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SignJwt() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SignJwt(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SignJwt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignJwt(::grpc::ServerContext* /*context*/, const ::google::iam::credentials::v1::SignJwtRequest* /*request*/, ::google::iam::credentials::v1::SignJwtResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SignJwt(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SignJwt(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GenerateAccessToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GenerateAccessToken() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::iam::credentials::v1::GenerateAccessTokenRequest, ::google::iam::credentials::v1::GenerateAccessTokenResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::iam::credentials::v1::GenerateAccessTokenRequest, ::google::iam::credentials::v1::GenerateAccessTokenResponse>* streamer) {
                       return this->StreamedGenerateAccessToken(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GenerateAccessToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GenerateAccessToken(::grpc::ServerContext* /*context*/, const ::google::iam::credentials::v1::GenerateAccessTokenRequest* /*request*/, ::google::iam::credentials::v1::GenerateAccessTokenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGenerateAccessToken(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::iam::credentials::v1::GenerateAccessTokenRequest,::google::iam::credentials::v1::GenerateAccessTokenResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GenerateIdToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GenerateIdToken() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::iam::credentials::v1::GenerateIdTokenRequest, ::google::iam::credentials::v1::GenerateIdTokenResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::iam::credentials::v1::GenerateIdTokenRequest, ::google::iam::credentials::v1::GenerateIdTokenResponse>* streamer) {
                       return this->StreamedGenerateIdToken(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GenerateIdToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GenerateIdToken(::grpc::ServerContext* /*context*/, const ::google::iam::credentials::v1::GenerateIdTokenRequest* /*request*/, ::google::iam::credentials::v1::GenerateIdTokenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGenerateIdToken(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::iam::credentials::v1::GenerateIdTokenRequest,::google::iam::credentials::v1::GenerateIdTokenResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SignBlob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SignBlob() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::iam::credentials::v1::SignBlobRequest, ::google::iam::credentials::v1::SignBlobResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::iam::credentials::v1::SignBlobRequest, ::google::iam::credentials::v1::SignBlobResponse>* streamer) {
                       return this->StreamedSignBlob(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SignBlob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SignBlob(::grpc::ServerContext* /*context*/, const ::google::iam::credentials::v1::SignBlobRequest* /*request*/, ::google::iam::credentials::v1::SignBlobResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSignBlob(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::iam::credentials::v1::SignBlobRequest,::google::iam::credentials::v1::SignBlobResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SignJwt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SignJwt() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::iam::credentials::v1::SignJwtRequest, ::google::iam::credentials::v1::SignJwtResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::iam::credentials::v1::SignJwtRequest, ::google::iam::credentials::v1::SignJwtResponse>* streamer) {
                       return this->StreamedSignJwt(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SignJwt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SignJwt(::grpc::ServerContext* /*context*/, const ::google::iam::credentials::v1::SignJwtRequest* /*request*/, ::google::iam::credentials::v1::SignJwtResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSignJwt(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::iam::credentials::v1::SignJwtRequest,::google::iam::credentials::v1::SignJwtResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GenerateAccessToken<WithStreamedUnaryMethod_GenerateIdToken<WithStreamedUnaryMethod_SignBlob<WithStreamedUnaryMethod_SignJwt<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GenerateAccessToken<WithStreamedUnaryMethod_GenerateIdToken<WithStreamedUnaryMethod_SignBlob<WithStreamedUnaryMethod_SignJwt<Service > > > > StreamedService;
};

}  // namespace v1
}  // namespace credentials
}  // namespace iam
}  // namespace google


#endif  // GRPC_google_2fiam_2fcredentials_2fv1_2fiamcredentials_2eproto__INCLUDED
