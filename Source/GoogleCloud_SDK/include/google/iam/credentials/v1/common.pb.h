// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/iam/credentials/v1/common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fiam_2fcredentials_2fv1_2fcommon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fiam_2fcredentials_2fv1_2fcommon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/field_behavior.pb.h"
#include "google/api/resource.pb.h"
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fiam_2fcredentials_2fv1_2fcommon_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fiam_2fcredentials_2fv1_2fcommon_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fiam_2fcredentials_2fv1_2fcommon_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_google_2fiam_2fcredentials_2fv1_2fcommon_2eproto_metadata_getter(int index);
namespace google {
namespace iam {
namespace credentials {
namespace v1 {
class GenerateAccessTokenRequest;
struct GenerateAccessTokenRequestDefaultTypeInternal;
extern GenerateAccessTokenRequestDefaultTypeInternal _GenerateAccessTokenRequest_default_instance_;
class GenerateAccessTokenResponse;
struct GenerateAccessTokenResponseDefaultTypeInternal;
extern GenerateAccessTokenResponseDefaultTypeInternal _GenerateAccessTokenResponse_default_instance_;
class GenerateIdTokenRequest;
struct GenerateIdTokenRequestDefaultTypeInternal;
extern GenerateIdTokenRequestDefaultTypeInternal _GenerateIdTokenRequest_default_instance_;
class GenerateIdTokenResponse;
struct GenerateIdTokenResponseDefaultTypeInternal;
extern GenerateIdTokenResponseDefaultTypeInternal _GenerateIdTokenResponse_default_instance_;
class SignBlobRequest;
struct SignBlobRequestDefaultTypeInternal;
extern SignBlobRequestDefaultTypeInternal _SignBlobRequest_default_instance_;
class SignBlobResponse;
struct SignBlobResponseDefaultTypeInternal;
extern SignBlobResponseDefaultTypeInternal _SignBlobResponse_default_instance_;
class SignJwtRequest;
struct SignJwtRequestDefaultTypeInternal;
extern SignJwtRequestDefaultTypeInternal _SignJwtRequest_default_instance_;
class SignJwtResponse;
struct SignJwtResponseDefaultTypeInternal;
extern SignJwtResponseDefaultTypeInternal _SignJwtResponse_default_instance_;
}  // namespace v1
}  // namespace credentials
}  // namespace iam
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::iam::credentials::v1::GenerateAccessTokenRequest* Arena::CreateMaybeMessage<::google::iam::credentials::v1::GenerateAccessTokenRequest>(Arena*);
template<> ::google::iam::credentials::v1::GenerateAccessTokenResponse* Arena::CreateMaybeMessage<::google::iam::credentials::v1::GenerateAccessTokenResponse>(Arena*);
template<> ::google::iam::credentials::v1::GenerateIdTokenRequest* Arena::CreateMaybeMessage<::google::iam::credentials::v1::GenerateIdTokenRequest>(Arena*);
template<> ::google::iam::credentials::v1::GenerateIdTokenResponse* Arena::CreateMaybeMessage<::google::iam::credentials::v1::GenerateIdTokenResponse>(Arena*);
template<> ::google::iam::credentials::v1::SignBlobRequest* Arena::CreateMaybeMessage<::google::iam::credentials::v1::SignBlobRequest>(Arena*);
template<> ::google::iam::credentials::v1::SignBlobResponse* Arena::CreateMaybeMessage<::google::iam::credentials::v1::SignBlobResponse>(Arena*);
template<> ::google::iam::credentials::v1::SignJwtRequest* Arena::CreateMaybeMessage<::google::iam::credentials::v1::SignJwtRequest>(Arena*);
template<> ::google::iam::credentials::v1::SignJwtResponse* Arena::CreateMaybeMessage<::google::iam::credentials::v1::SignJwtResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace iam {
namespace credentials {
namespace v1 {

// ===================================================================

class GenerateAccessTokenRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.iam.credentials.v1.GenerateAccessTokenRequest) */ {
 public:
  inline GenerateAccessTokenRequest() : GenerateAccessTokenRequest(nullptr) {}
  virtual ~GenerateAccessTokenRequest();
  explicit constexpr GenerateAccessTokenRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GenerateAccessTokenRequest(const GenerateAccessTokenRequest& from);
  GenerateAccessTokenRequest(GenerateAccessTokenRequest&& from) noexcept
    : GenerateAccessTokenRequest() {
    *this = ::std::move(from);
  }

  inline GenerateAccessTokenRequest& operator=(const GenerateAccessTokenRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenerateAccessTokenRequest& operator=(GenerateAccessTokenRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GenerateAccessTokenRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GenerateAccessTokenRequest* internal_default_instance() {
    return reinterpret_cast<const GenerateAccessTokenRequest*>(
               &_GenerateAccessTokenRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GenerateAccessTokenRequest& a, GenerateAccessTokenRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GenerateAccessTokenRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenerateAccessTokenRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenerateAccessTokenRequest* New() const final {
    return CreateMaybeMessage<GenerateAccessTokenRequest>(nullptr);
  }

  GenerateAccessTokenRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenerateAccessTokenRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GenerateAccessTokenRequest& from);
  void MergeFrom(const GenerateAccessTokenRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenerateAccessTokenRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.iam.credentials.v1.GenerateAccessTokenRequest";
  }
  protected:
  explicit GenerateAccessTokenRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fiam_2fcredentials_2fv1_2fcommon_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDelegatesFieldNumber = 2,
    kScopeFieldNumber = 4,
    kNameFieldNumber = 1,
    kLifetimeFieldNumber = 7,
  };
  // repeated string delegates = 2;
  int delegates_size() const;
  private:
  int _internal_delegates_size() const;
  public:
  void clear_delegates();
  const std::string& delegates(int index) const;
  std::string* mutable_delegates(int index);
  void set_delegates(int index, const std::string& value);
  void set_delegates(int index, std::string&& value);
  void set_delegates(int index, const char* value);
  void set_delegates(int index, const char* value, size_t size);
  std::string* add_delegates();
  void add_delegates(const std::string& value);
  void add_delegates(std::string&& value);
  void add_delegates(const char* value);
  void add_delegates(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& delegates() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_delegates();
  private:
  const std::string& _internal_delegates(int index) const;
  std::string* _internal_add_delegates();
  public:

  // repeated string scope = 4 [(.google.api.field_behavior) = REQUIRED];
  int scope_size() const;
  private:
  int _internal_scope_size() const;
  public:
  void clear_scope();
  const std::string& scope(int index) const;
  std::string* mutable_scope(int index);
  void set_scope(int index, const std::string& value);
  void set_scope(int index, std::string&& value);
  void set_scope(int index, const char* value);
  void set_scope(int index, const char* value, size_t size);
  std::string* add_scope();
  void add_scope(const std::string& value);
  void add_scope(std::string&& value);
  void add_scope(const char* value);
  void add_scope(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& scope() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_scope();
  private:
  const std::string& _internal_scope(int index) const;
  std::string* _internal_add_scope();
  public:

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.protobuf.Duration lifetime = 7;
  bool has_lifetime() const;
  private:
  bool _internal_has_lifetime() const;
  public:
  void clear_lifetime();
  const PROTOBUF_NAMESPACE_ID::Duration& lifetime() const;
  PROTOBUF_NAMESPACE_ID::Duration* release_lifetime();
  PROTOBUF_NAMESPACE_ID::Duration* mutable_lifetime();
  void set_allocated_lifetime(PROTOBUF_NAMESPACE_ID::Duration* lifetime);
  private:
  const PROTOBUF_NAMESPACE_ID::Duration& _internal_lifetime() const;
  PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_lifetime();
  public:
  void unsafe_arena_set_allocated_lifetime(
      PROTOBUF_NAMESPACE_ID::Duration* lifetime);
  PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_lifetime();

  // @@protoc_insertion_point(class_scope:google.iam.credentials.v1.GenerateAccessTokenRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> delegates_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> scope_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  PROTOBUF_NAMESPACE_ID::Duration* lifetime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fiam_2fcredentials_2fv1_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class GenerateAccessTokenResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.iam.credentials.v1.GenerateAccessTokenResponse) */ {
 public:
  inline GenerateAccessTokenResponse() : GenerateAccessTokenResponse(nullptr) {}
  virtual ~GenerateAccessTokenResponse();
  explicit constexpr GenerateAccessTokenResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GenerateAccessTokenResponse(const GenerateAccessTokenResponse& from);
  GenerateAccessTokenResponse(GenerateAccessTokenResponse&& from) noexcept
    : GenerateAccessTokenResponse() {
    *this = ::std::move(from);
  }

  inline GenerateAccessTokenResponse& operator=(const GenerateAccessTokenResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenerateAccessTokenResponse& operator=(GenerateAccessTokenResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GenerateAccessTokenResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GenerateAccessTokenResponse* internal_default_instance() {
    return reinterpret_cast<const GenerateAccessTokenResponse*>(
               &_GenerateAccessTokenResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GenerateAccessTokenResponse& a, GenerateAccessTokenResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GenerateAccessTokenResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenerateAccessTokenResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenerateAccessTokenResponse* New() const final {
    return CreateMaybeMessage<GenerateAccessTokenResponse>(nullptr);
  }

  GenerateAccessTokenResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenerateAccessTokenResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GenerateAccessTokenResponse& from);
  void MergeFrom(const GenerateAccessTokenResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenerateAccessTokenResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.iam.credentials.v1.GenerateAccessTokenResponse";
  }
  protected:
  explicit GenerateAccessTokenResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fiam_2fcredentials_2fv1_2fcommon_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccessTokenFieldNumber = 1,
    kExpireTimeFieldNumber = 3,
  };
  // string access_token = 1;
  void clear_access_token();
  const std::string& access_token() const;
  void set_access_token(const std::string& value);
  void set_access_token(std::string&& value);
  void set_access_token(const char* value);
  void set_access_token(const char* value, size_t size);
  std::string* mutable_access_token();
  std::string* release_access_token();
  void set_allocated_access_token(std::string* access_token);
  private:
  const std::string& _internal_access_token() const;
  void _internal_set_access_token(const std::string& value);
  std::string* _internal_mutable_access_token();
  public:

  // .google.protobuf.Timestamp expire_time = 3;
  bool has_expire_time() const;
  private:
  bool _internal_has_expire_time() const;
  public:
  void clear_expire_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& expire_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_expire_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_expire_time();
  void set_allocated_expire_time(PROTOBUF_NAMESPACE_ID::Timestamp* expire_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_expire_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_expire_time();
  public:
  void unsafe_arena_set_allocated_expire_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* expire_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_expire_time();

  // @@protoc_insertion_point(class_scope:google.iam.credentials.v1.GenerateAccessTokenResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr access_token_;
  PROTOBUF_NAMESPACE_ID::Timestamp* expire_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fiam_2fcredentials_2fv1_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class SignBlobRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.iam.credentials.v1.SignBlobRequest) */ {
 public:
  inline SignBlobRequest() : SignBlobRequest(nullptr) {}
  virtual ~SignBlobRequest();
  explicit constexpr SignBlobRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SignBlobRequest(const SignBlobRequest& from);
  SignBlobRequest(SignBlobRequest&& from) noexcept
    : SignBlobRequest() {
    *this = ::std::move(from);
  }

  inline SignBlobRequest& operator=(const SignBlobRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignBlobRequest& operator=(SignBlobRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SignBlobRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SignBlobRequest* internal_default_instance() {
    return reinterpret_cast<const SignBlobRequest*>(
               &_SignBlobRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SignBlobRequest& a, SignBlobRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SignBlobRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignBlobRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SignBlobRequest* New() const final {
    return CreateMaybeMessage<SignBlobRequest>(nullptr);
  }

  SignBlobRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SignBlobRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SignBlobRequest& from);
  void MergeFrom(const SignBlobRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignBlobRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.iam.credentials.v1.SignBlobRequest";
  }
  protected:
  explicit SignBlobRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fiam_2fcredentials_2fv1_2fcommon_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDelegatesFieldNumber = 3,
    kNameFieldNumber = 1,
    kPayloadFieldNumber = 5,
  };
  // repeated string delegates = 3;
  int delegates_size() const;
  private:
  int _internal_delegates_size() const;
  public:
  void clear_delegates();
  const std::string& delegates(int index) const;
  std::string* mutable_delegates(int index);
  void set_delegates(int index, const std::string& value);
  void set_delegates(int index, std::string&& value);
  void set_delegates(int index, const char* value);
  void set_delegates(int index, const char* value, size_t size);
  std::string* add_delegates();
  void add_delegates(const std::string& value);
  void add_delegates(std::string&& value);
  void add_delegates(const char* value);
  void add_delegates(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& delegates() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_delegates();
  private:
  const std::string& _internal_delegates(int index) const;
  std::string* _internal_add_delegates();
  public:

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes payload = 5 [(.google.api.field_behavior) = REQUIRED];
  void clear_payload();
  const std::string& payload() const;
  void set_payload(const std::string& value);
  void set_payload(std::string&& value);
  void set_payload(const char* value);
  void set_payload(const void* value, size_t size);
  std::string* mutable_payload();
  std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // @@protoc_insertion_point(class_scope:google.iam.credentials.v1.SignBlobRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> delegates_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fiam_2fcredentials_2fv1_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class SignBlobResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.iam.credentials.v1.SignBlobResponse) */ {
 public:
  inline SignBlobResponse() : SignBlobResponse(nullptr) {}
  virtual ~SignBlobResponse();
  explicit constexpr SignBlobResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SignBlobResponse(const SignBlobResponse& from);
  SignBlobResponse(SignBlobResponse&& from) noexcept
    : SignBlobResponse() {
    *this = ::std::move(from);
  }

  inline SignBlobResponse& operator=(const SignBlobResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignBlobResponse& operator=(SignBlobResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SignBlobResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SignBlobResponse* internal_default_instance() {
    return reinterpret_cast<const SignBlobResponse*>(
               &_SignBlobResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SignBlobResponse& a, SignBlobResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SignBlobResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignBlobResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SignBlobResponse* New() const final {
    return CreateMaybeMessage<SignBlobResponse>(nullptr);
  }

  SignBlobResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SignBlobResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SignBlobResponse& from);
  void MergeFrom(const SignBlobResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignBlobResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.iam.credentials.v1.SignBlobResponse";
  }
  protected:
  explicit SignBlobResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fiam_2fcredentials_2fv1_2fcommon_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyIdFieldNumber = 1,
    kSignedBlobFieldNumber = 4,
  };
  // string key_id = 1;
  void clear_key_id();
  const std::string& key_id() const;
  void set_key_id(const std::string& value);
  void set_key_id(std::string&& value);
  void set_key_id(const char* value);
  void set_key_id(const char* value, size_t size);
  std::string* mutable_key_id();
  std::string* release_key_id();
  void set_allocated_key_id(std::string* key_id);
  private:
  const std::string& _internal_key_id() const;
  void _internal_set_key_id(const std::string& value);
  std::string* _internal_mutable_key_id();
  public:

  // bytes signed_blob = 4;
  void clear_signed_blob();
  const std::string& signed_blob() const;
  void set_signed_blob(const std::string& value);
  void set_signed_blob(std::string&& value);
  void set_signed_blob(const char* value);
  void set_signed_blob(const void* value, size_t size);
  std::string* mutable_signed_blob();
  std::string* release_signed_blob();
  void set_allocated_signed_blob(std::string* signed_blob);
  private:
  const std::string& _internal_signed_blob() const;
  void _internal_set_signed_blob(const std::string& value);
  std::string* _internal_mutable_signed_blob();
  public:

  // @@protoc_insertion_point(class_scope:google.iam.credentials.v1.SignBlobResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signed_blob_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fiam_2fcredentials_2fv1_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class SignJwtRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.iam.credentials.v1.SignJwtRequest) */ {
 public:
  inline SignJwtRequest() : SignJwtRequest(nullptr) {}
  virtual ~SignJwtRequest();
  explicit constexpr SignJwtRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SignJwtRequest(const SignJwtRequest& from);
  SignJwtRequest(SignJwtRequest&& from) noexcept
    : SignJwtRequest() {
    *this = ::std::move(from);
  }

  inline SignJwtRequest& operator=(const SignJwtRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignJwtRequest& operator=(SignJwtRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SignJwtRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SignJwtRequest* internal_default_instance() {
    return reinterpret_cast<const SignJwtRequest*>(
               &_SignJwtRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SignJwtRequest& a, SignJwtRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SignJwtRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignJwtRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SignJwtRequest* New() const final {
    return CreateMaybeMessage<SignJwtRequest>(nullptr);
  }

  SignJwtRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SignJwtRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SignJwtRequest& from);
  void MergeFrom(const SignJwtRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignJwtRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.iam.credentials.v1.SignJwtRequest";
  }
  protected:
  explicit SignJwtRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fiam_2fcredentials_2fv1_2fcommon_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDelegatesFieldNumber = 3,
    kNameFieldNumber = 1,
    kPayloadFieldNumber = 5,
  };
  // repeated string delegates = 3;
  int delegates_size() const;
  private:
  int _internal_delegates_size() const;
  public:
  void clear_delegates();
  const std::string& delegates(int index) const;
  std::string* mutable_delegates(int index);
  void set_delegates(int index, const std::string& value);
  void set_delegates(int index, std::string&& value);
  void set_delegates(int index, const char* value);
  void set_delegates(int index, const char* value, size_t size);
  std::string* add_delegates();
  void add_delegates(const std::string& value);
  void add_delegates(std::string&& value);
  void add_delegates(const char* value);
  void add_delegates(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& delegates() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_delegates();
  private:
  const std::string& _internal_delegates(int index) const;
  std::string* _internal_add_delegates();
  public:

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string payload = 5 [(.google.api.field_behavior) = REQUIRED];
  void clear_payload();
  const std::string& payload() const;
  void set_payload(const std::string& value);
  void set_payload(std::string&& value);
  void set_payload(const char* value);
  void set_payload(const char* value, size_t size);
  std::string* mutable_payload();
  std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // @@protoc_insertion_point(class_scope:google.iam.credentials.v1.SignJwtRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> delegates_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fiam_2fcredentials_2fv1_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class SignJwtResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.iam.credentials.v1.SignJwtResponse) */ {
 public:
  inline SignJwtResponse() : SignJwtResponse(nullptr) {}
  virtual ~SignJwtResponse();
  explicit constexpr SignJwtResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SignJwtResponse(const SignJwtResponse& from);
  SignJwtResponse(SignJwtResponse&& from) noexcept
    : SignJwtResponse() {
    *this = ::std::move(from);
  }

  inline SignJwtResponse& operator=(const SignJwtResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignJwtResponse& operator=(SignJwtResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SignJwtResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SignJwtResponse* internal_default_instance() {
    return reinterpret_cast<const SignJwtResponse*>(
               &_SignJwtResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SignJwtResponse& a, SignJwtResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SignJwtResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignJwtResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SignJwtResponse* New() const final {
    return CreateMaybeMessage<SignJwtResponse>(nullptr);
  }

  SignJwtResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SignJwtResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SignJwtResponse& from);
  void MergeFrom(const SignJwtResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignJwtResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.iam.credentials.v1.SignJwtResponse";
  }
  protected:
  explicit SignJwtResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fiam_2fcredentials_2fv1_2fcommon_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyIdFieldNumber = 1,
    kSignedJwtFieldNumber = 2,
  };
  // string key_id = 1;
  void clear_key_id();
  const std::string& key_id() const;
  void set_key_id(const std::string& value);
  void set_key_id(std::string&& value);
  void set_key_id(const char* value);
  void set_key_id(const char* value, size_t size);
  std::string* mutable_key_id();
  std::string* release_key_id();
  void set_allocated_key_id(std::string* key_id);
  private:
  const std::string& _internal_key_id() const;
  void _internal_set_key_id(const std::string& value);
  std::string* _internal_mutable_key_id();
  public:

  // string signed_jwt = 2;
  void clear_signed_jwt();
  const std::string& signed_jwt() const;
  void set_signed_jwt(const std::string& value);
  void set_signed_jwt(std::string&& value);
  void set_signed_jwt(const char* value);
  void set_signed_jwt(const char* value, size_t size);
  std::string* mutable_signed_jwt();
  std::string* release_signed_jwt();
  void set_allocated_signed_jwt(std::string* signed_jwt);
  private:
  const std::string& _internal_signed_jwt() const;
  void _internal_set_signed_jwt(const std::string& value);
  std::string* _internal_mutable_signed_jwt();
  public:

  // @@protoc_insertion_point(class_scope:google.iam.credentials.v1.SignJwtResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signed_jwt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fiam_2fcredentials_2fv1_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class GenerateIdTokenRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.iam.credentials.v1.GenerateIdTokenRequest) */ {
 public:
  inline GenerateIdTokenRequest() : GenerateIdTokenRequest(nullptr) {}
  virtual ~GenerateIdTokenRequest();
  explicit constexpr GenerateIdTokenRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GenerateIdTokenRequest(const GenerateIdTokenRequest& from);
  GenerateIdTokenRequest(GenerateIdTokenRequest&& from) noexcept
    : GenerateIdTokenRequest() {
    *this = ::std::move(from);
  }

  inline GenerateIdTokenRequest& operator=(const GenerateIdTokenRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenerateIdTokenRequest& operator=(GenerateIdTokenRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GenerateIdTokenRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GenerateIdTokenRequest* internal_default_instance() {
    return reinterpret_cast<const GenerateIdTokenRequest*>(
               &_GenerateIdTokenRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GenerateIdTokenRequest& a, GenerateIdTokenRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GenerateIdTokenRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenerateIdTokenRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenerateIdTokenRequest* New() const final {
    return CreateMaybeMessage<GenerateIdTokenRequest>(nullptr);
  }

  GenerateIdTokenRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenerateIdTokenRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GenerateIdTokenRequest& from);
  void MergeFrom(const GenerateIdTokenRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenerateIdTokenRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.iam.credentials.v1.GenerateIdTokenRequest";
  }
  protected:
  explicit GenerateIdTokenRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fiam_2fcredentials_2fv1_2fcommon_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDelegatesFieldNumber = 2,
    kNameFieldNumber = 1,
    kAudienceFieldNumber = 3,
    kIncludeEmailFieldNumber = 4,
  };
  // repeated string delegates = 2;
  int delegates_size() const;
  private:
  int _internal_delegates_size() const;
  public:
  void clear_delegates();
  const std::string& delegates(int index) const;
  std::string* mutable_delegates(int index);
  void set_delegates(int index, const std::string& value);
  void set_delegates(int index, std::string&& value);
  void set_delegates(int index, const char* value);
  void set_delegates(int index, const char* value, size_t size);
  std::string* add_delegates();
  void add_delegates(const std::string& value);
  void add_delegates(std::string&& value);
  void add_delegates(const char* value);
  void add_delegates(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& delegates() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_delegates();
  private:
  const std::string& _internal_delegates(int index) const;
  std::string* _internal_add_delegates();
  public:

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string audience = 3 [(.google.api.field_behavior) = REQUIRED];
  void clear_audience();
  const std::string& audience() const;
  void set_audience(const std::string& value);
  void set_audience(std::string&& value);
  void set_audience(const char* value);
  void set_audience(const char* value, size_t size);
  std::string* mutable_audience();
  std::string* release_audience();
  void set_allocated_audience(std::string* audience);
  private:
  const std::string& _internal_audience() const;
  void _internal_set_audience(const std::string& value);
  std::string* _internal_mutable_audience();
  public:

  // bool include_email = 4;
  void clear_include_email();
  bool include_email() const;
  void set_include_email(bool value);
  private:
  bool _internal_include_email() const;
  void _internal_set_include_email(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.iam.credentials.v1.GenerateIdTokenRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> delegates_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr audience_;
  bool include_email_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fiam_2fcredentials_2fv1_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class GenerateIdTokenResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.iam.credentials.v1.GenerateIdTokenResponse) */ {
 public:
  inline GenerateIdTokenResponse() : GenerateIdTokenResponse(nullptr) {}
  virtual ~GenerateIdTokenResponse();
  explicit constexpr GenerateIdTokenResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GenerateIdTokenResponse(const GenerateIdTokenResponse& from);
  GenerateIdTokenResponse(GenerateIdTokenResponse&& from) noexcept
    : GenerateIdTokenResponse() {
    *this = ::std::move(from);
  }

  inline GenerateIdTokenResponse& operator=(const GenerateIdTokenResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenerateIdTokenResponse& operator=(GenerateIdTokenResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GenerateIdTokenResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GenerateIdTokenResponse* internal_default_instance() {
    return reinterpret_cast<const GenerateIdTokenResponse*>(
               &_GenerateIdTokenResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GenerateIdTokenResponse& a, GenerateIdTokenResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GenerateIdTokenResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenerateIdTokenResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenerateIdTokenResponse* New() const final {
    return CreateMaybeMessage<GenerateIdTokenResponse>(nullptr);
  }

  GenerateIdTokenResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenerateIdTokenResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GenerateIdTokenResponse& from);
  void MergeFrom(const GenerateIdTokenResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenerateIdTokenResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.iam.credentials.v1.GenerateIdTokenResponse";
  }
  protected:
  explicit GenerateIdTokenResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fiam_2fcredentials_2fv1_2fcommon_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // @@protoc_insertion_point(class_scope:google.iam.credentials.v1.GenerateIdTokenResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fiam_2fcredentials_2fv1_2fcommon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GenerateAccessTokenRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GenerateAccessTokenRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GenerateAccessTokenRequest::name() const {
  // @@protoc_insertion_point(field_get:google.iam.credentials.v1.GenerateAccessTokenRequest.name)
  return _internal_name();
}
inline void GenerateAccessTokenRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:google.iam.credentials.v1.GenerateAccessTokenRequest.name)
}
inline std::string* GenerateAccessTokenRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:google.iam.credentials.v1.GenerateAccessTokenRequest.name)
  return _internal_mutable_name();
}
inline const std::string& GenerateAccessTokenRequest::_internal_name() const {
  return name_.Get();
}
inline void GenerateAccessTokenRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GenerateAccessTokenRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.iam.credentials.v1.GenerateAccessTokenRequest.name)
}
inline void GenerateAccessTokenRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.iam.credentials.v1.GenerateAccessTokenRequest.name)
}
inline void GenerateAccessTokenRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.iam.credentials.v1.GenerateAccessTokenRequest.name)
}
inline std::string* GenerateAccessTokenRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GenerateAccessTokenRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.iam.credentials.v1.GenerateAccessTokenRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GenerateAccessTokenRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.iam.credentials.v1.GenerateAccessTokenRequest.name)
}

// repeated string delegates = 2;
inline int GenerateAccessTokenRequest::_internal_delegates_size() const {
  return delegates_.size();
}
inline int GenerateAccessTokenRequest::delegates_size() const {
  return _internal_delegates_size();
}
inline void GenerateAccessTokenRequest::clear_delegates() {
  delegates_.Clear();
}
inline std::string* GenerateAccessTokenRequest::add_delegates() {
  // @@protoc_insertion_point(field_add_mutable:google.iam.credentials.v1.GenerateAccessTokenRequest.delegates)
  return _internal_add_delegates();
}
inline const std::string& GenerateAccessTokenRequest::_internal_delegates(int index) const {
  return delegates_.Get(index);
}
inline const std::string& GenerateAccessTokenRequest::delegates(int index) const {
  // @@protoc_insertion_point(field_get:google.iam.credentials.v1.GenerateAccessTokenRequest.delegates)
  return _internal_delegates(index);
}
inline std::string* GenerateAccessTokenRequest::mutable_delegates(int index) {
  // @@protoc_insertion_point(field_mutable:google.iam.credentials.v1.GenerateAccessTokenRequest.delegates)
  return delegates_.Mutable(index);
}
inline void GenerateAccessTokenRequest::set_delegates(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:google.iam.credentials.v1.GenerateAccessTokenRequest.delegates)
  delegates_.Mutable(index)->assign(value);
}
inline void GenerateAccessTokenRequest::set_delegates(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:google.iam.credentials.v1.GenerateAccessTokenRequest.delegates)
  delegates_.Mutable(index)->assign(std::move(value));
}
inline void GenerateAccessTokenRequest::set_delegates(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  delegates_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.iam.credentials.v1.GenerateAccessTokenRequest.delegates)
}
inline void GenerateAccessTokenRequest::set_delegates(int index, const char* value, size_t size) {
  delegates_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.iam.credentials.v1.GenerateAccessTokenRequest.delegates)
}
inline std::string* GenerateAccessTokenRequest::_internal_add_delegates() {
  return delegates_.Add();
}
inline void GenerateAccessTokenRequest::add_delegates(const std::string& value) {
  delegates_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.iam.credentials.v1.GenerateAccessTokenRequest.delegates)
}
inline void GenerateAccessTokenRequest::add_delegates(std::string&& value) {
  delegates_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.iam.credentials.v1.GenerateAccessTokenRequest.delegates)
}
inline void GenerateAccessTokenRequest::add_delegates(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  delegates_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.iam.credentials.v1.GenerateAccessTokenRequest.delegates)
}
inline void GenerateAccessTokenRequest::add_delegates(const char* value, size_t size) {
  delegates_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.iam.credentials.v1.GenerateAccessTokenRequest.delegates)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GenerateAccessTokenRequest::delegates() const {
  // @@protoc_insertion_point(field_list:google.iam.credentials.v1.GenerateAccessTokenRequest.delegates)
  return delegates_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GenerateAccessTokenRequest::mutable_delegates() {
  // @@protoc_insertion_point(field_mutable_list:google.iam.credentials.v1.GenerateAccessTokenRequest.delegates)
  return &delegates_;
}

// repeated string scope = 4 [(.google.api.field_behavior) = REQUIRED];
inline int GenerateAccessTokenRequest::_internal_scope_size() const {
  return scope_.size();
}
inline int GenerateAccessTokenRequest::scope_size() const {
  return _internal_scope_size();
}
inline void GenerateAccessTokenRequest::clear_scope() {
  scope_.Clear();
}
inline std::string* GenerateAccessTokenRequest::add_scope() {
  // @@protoc_insertion_point(field_add_mutable:google.iam.credentials.v1.GenerateAccessTokenRequest.scope)
  return _internal_add_scope();
}
inline const std::string& GenerateAccessTokenRequest::_internal_scope(int index) const {
  return scope_.Get(index);
}
inline const std::string& GenerateAccessTokenRequest::scope(int index) const {
  // @@protoc_insertion_point(field_get:google.iam.credentials.v1.GenerateAccessTokenRequest.scope)
  return _internal_scope(index);
}
inline std::string* GenerateAccessTokenRequest::mutable_scope(int index) {
  // @@protoc_insertion_point(field_mutable:google.iam.credentials.v1.GenerateAccessTokenRequest.scope)
  return scope_.Mutable(index);
}
inline void GenerateAccessTokenRequest::set_scope(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:google.iam.credentials.v1.GenerateAccessTokenRequest.scope)
  scope_.Mutable(index)->assign(value);
}
inline void GenerateAccessTokenRequest::set_scope(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:google.iam.credentials.v1.GenerateAccessTokenRequest.scope)
  scope_.Mutable(index)->assign(std::move(value));
}
inline void GenerateAccessTokenRequest::set_scope(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  scope_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.iam.credentials.v1.GenerateAccessTokenRequest.scope)
}
inline void GenerateAccessTokenRequest::set_scope(int index, const char* value, size_t size) {
  scope_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.iam.credentials.v1.GenerateAccessTokenRequest.scope)
}
inline std::string* GenerateAccessTokenRequest::_internal_add_scope() {
  return scope_.Add();
}
inline void GenerateAccessTokenRequest::add_scope(const std::string& value) {
  scope_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.iam.credentials.v1.GenerateAccessTokenRequest.scope)
}
inline void GenerateAccessTokenRequest::add_scope(std::string&& value) {
  scope_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.iam.credentials.v1.GenerateAccessTokenRequest.scope)
}
inline void GenerateAccessTokenRequest::add_scope(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  scope_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.iam.credentials.v1.GenerateAccessTokenRequest.scope)
}
inline void GenerateAccessTokenRequest::add_scope(const char* value, size_t size) {
  scope_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.iam.credentials.v1.GenerateAccessTokenRequest.scope)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GenerateAccessTokenRequest::scope() const {
  // @@protoc_insertion_point(field_list:google.iam.credentials.v1.GenerateAccessTokenRequest.scope)
  return scope_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GenerateAccessTokenRequest::mutable_scope() {
  // @@protoc_insertion_point(field_mutable_list:google.iam.credentials.v1.GenerateAccessTokenRequest.scope)
  return &scope_;
}

// .google.protobuf.Duration lifetime = 7;
inline bool GenerateAccessTokenRequest::_internal_has_lifetime() const {
  return this != internal_default_instance() && lifetime_ != nullptr;
}
inline bool GenerateAccessTokenRequest::has_lifetime() const {
  return _internal_has_lifetime();
}
inline const PROTOBUF_NAMESPACE_ID::Duration& GenerateAccessTokenRequest::_internal_lifetime() const {
  const PROTOBUF_NAMESPACE_ID::Duration* p = lifetime_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Duration&>(
      PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Duration& GenerateAccessTokenRequest::lifetime() const {
  // @@protoc_insertion_point(field_get:google.iam.credentials.v1.GenerateAccessTokenRequest.lifetime)
  return _internal_lifetime();
}
inline void GenerateAccessTokenRequest::unsafe_arena_set_allocated_lifetime(
    PROTOBUF_NAMESPACE_ID::Duration* lifetime) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lifetime_);
  }
  lifetime_ = lifetime;
  if (lifetime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.credentials.v1.GenerateAccessTokenRequest.lifetime)
}
inline PROTOBUF_NAMESPACE_ID::Duration* GenerateAccessTokenRequest::release_lifetime() {
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = lifetime_;
  lifetime_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* GenerateAccessTokenRequest::unsafe_arena_release_lifetime() {
  // @@protoc_insertion_point(field_release:google.iam.credentials.v1.GenerateAccessTokenRequest.lifetime)
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = lifetime_;
  lifetime_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* GenerateAccessTokenRequest::_internal_mutable_lifetime() {
  
  if (lifetime_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Duration>(GetArena());
    lifetime_ = p;
  }
  return lifetime_;
}
inline PROTOBUF_NAMESPACE_ID::Duration* GenerateAccessTokenRequest::mutable_lifetime() {
  // @@protoc_insertion_point(field_mutable:google.iam.credentials.v1.GenerateAccessTokenRequest.lifetime)
  return _internal_mutable_lifetime();
}
inline void GenerateAccessTokenRequest::set_allocated_lifetime(PROTOBUF_NAMESPACE_ID::Duration* lifetime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lifetime_);
  }
  if (lifetime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lifetime)->GetArena();
    if (message_arena != submessage_arena) {
      lifetime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lifetime, submessage_arena);
    }
    
  } else {
    
  }
  lifetime_ = lifetime;
  // @@protoc_insertion_point(field_set_allocated:google.iam.credentials.v1.GenerateAccessTokenRequest.lifetime)
}

// -------------------------------------------------------------------

// GenerateAccessTokenResponse

// string access_token = 1;
inline void GenerateAccessTokenResponse::clear_access_token() {
  access_token_.ClearToEmpty();
}
inline const std::string& GenerateAccessTokenResponse::access_token() const {
  // @@protoc_insertion_point(field_get:google.iam.credentials.v1.GenerateAccessTokenResponse.access_token)
  return _internal_access_token();
}
inline void GenerateAccessTokenResponse::set_access_token(const std::string& value) {
  _internal_set_access_token(value);
  // @@protoc_insertion_point(field_set:google.iam.credentials.v1.GenerateAccessTokenResponse.access_token)
}
inline std::string* GenerateAccessTokenResponse::mutable_access_token() {
  // @@protoc_insertion_point(field_mutable:google.iam.credentials.v1.GenerateAccessTokenResponse.access_token)
  return _internal_mutable_access_token();
}
inline const std::string& GenerateAccessTokenResponse::_internal_access_token() const {
  return access_token_.Get();
}
inline void GenerateAccessTokenResponse::_internal_set_access_token(const std::string& value) {
  
  access_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GenerateAccessTokenResponse::set_access_token(std::string&& value) {
  
  access_token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.iam.credentials.v1.GenerateAccessTokenResponse.access_token)
}
inline void GenerateAccessTokenResponse::set_access_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  access_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.iam.credentials.v1.GenerateAccessTokenResponse.access_token)
}
inline void GenerateAccessTokenResponse::set_access_token(const char* value,
    size_t size) {
  
  access_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.iam.credentials.v1.GenerateAccessTokenResponse.access_token)
}
inline std::string* GenerateAccessTokenResponse::_internal_mutable_access_token() {
  
  return access_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GenerateAccessTokenResponse::release_access_token() {
  // @@protoc_insertion_point(field_release:google.iam.credentials.v1.GenerateAccessTokenResponse.access_token)
  return access_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GenerateAccessTokenResponse::set_allocated_access_token(std::string* access_token) {
  if (access_token != nullptr) {
    
  } else {
    
  }
  access_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), access_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.iam.credentials.v1.GenerateAccessTokenResponse.access_token)
}

// .google.protobuf.Timestamp expire_time = 3;
inline bool GenerateAccessTokenResponse::_internal_has_expire_time() const {
  return this != internal_default_instance() && expire_time_ != nullptr;
}
inline bool GenerateAccessTokenResponse::has_expire_time() const {
  return _internal_has_expire_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GenerateAccessTokenResponse::_internal_expire_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = expire_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GenerateAccessTokenResponse::expire_time() const {
  // @@protoc_insertion_point(field_get:google.iam.credentials.v1.GenerateAccessTokenResponse.expire_time)
  return _internal_expire_time();
}
inline void GenerateAccessTokenResponse::unsafe_arena_set_allocated_expire_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* expire_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expire_time_);
  }
  expire_time_ = expire_time;
  if (expire_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.credentials.v1.GenerateAccessTokenResponse.expire_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GenerateAccessTokenResponse::release_expire_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = expire_time_;
  expire_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GenerateAccessTokenResponse::unsafe_arena_release_expire_time() {
  // @@protoc_insertion_point(field_release:google.iam.credentials.v1.GenerateAccessTokenResponse.expire_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = expire_time_;
  expire_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GenerateAccessTokenResponse::_internal_mutable_expire_time() {
  
  if (expire_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    expire_time_ = p;
  }
  return expire_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GenerateAccessTokenResponse::mutable_expire_time() {
  // @@protoc_insertion_point(field_mutable:google.iam.credentials.v1.GenerateAccessTokenResponse.expire_time)
  return _internal_mutable_expire_time();
}
inline void GenerateAccessTokenResponse::set_allocated_expire_time(PROTOBUF_NAMESPACE_ID::Timestamp* expire_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(expire_time_);
  }
  if (expire_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expire_time)->GetArena();
    if (message_arena != submessage_arena) {
      expire_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expire_time, submessage_arena);
    }
    
  } else {
    
  }
  expire_time_ = expire_time;
  // @@protoc_insertion_point(field_set_allocated:google.iam.credentials.v1.GenerateAccessTokenResponse.expire_time)
}

// -------------------------------------------------------------------

// SignBlobRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void SignBlobRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& SignBlobRequest::name() const {
  // @@protoc_insertion_point(field_get:google.iam.credentials.v1.SignBlobRequest.name)
  return _internal_name();
}
inline void SignBlobRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:google.iam.credentials.v1.SignBlobRequest.name)
}
inline std::string* SignBlobRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:google.iam.credentials.v1.SignBlobRequest.name)
  return _internal_mutable_name();
}
inline const std::string& SignBlobRequest::_internal_name() const {
  return name_.Get();
}
inline void SignBlobRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SignBlobRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.iam.credentials.v1.SignBlobRequest.name)
}
inline void SignBlobRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.iam.credentials.v1.SignBlobRequest.name)
}
inline void SignBlobRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.iam.credentials.v1.SignBlobRequest.name)
}
inline std::string* SignBlobRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SignBlobRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.iam.credentials.v1.SignBlobRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SignBlobRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.iam.credentials.v1.SignBlobRequest.name)
}

// repeated string delegates = 3;
inline int SignBlobRequest::_internal_delegates_size() const {
  return delegates_.size();
}
inline int SignBlobRequest::delegates_size() const {
  return _internal_delegates_size();
}
inline void SignBlobRequest::clear_delegates() {
  delegates_.Clear();
}
inline std::string* SignBlobRequest::add_delegates() {
  // @@protoc_insertion_point(field_add_mutable:google.iam.credentials.v1.SignBlobRequest.delegates)
  return _internal_add_delegates();
}
inline const std::string& SignBlobRequest::_internal_delegates(int index) const {
  return delegates_.Get(index);
}
inline const std::string& SignBlobRequest::delegates(int index) const {
  // @@protoc_insertion_point(field_get:google.iam.credentials.v1.SignBlobRequest.delegates)
  return _internal_delegates(index);
}
inline std::string* SignBlobRequest::mutable_delegates(int index) {
  // @@protoc_insertion_point(field_mutable:google.iam.credentials.v1.SignBlobRequest.delegates)
  return delegates_.Mutable(index);
}
inline void SignBlobRequest::set_delegates(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:google.iam.credentials.v1.SignBlobRequest.delegates)
  delegates_.Mutable(index)->assign(value);
}
inline void SignBlobRequest::set_delegates(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:google.iam.credentials.v1.SignBlobRequest.delegates)
  delegates_.Mutable(index)->assign(std::move(value));
}
inline void SignBlobRequest::set_delegates(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  delegates_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.iam.credentials.v1.SignBlobRequest.delegates)
}
inline void SignBlobRequest::set_delegates(int index, const char* value, size_t size) {
  delegates_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.iam.credentials.v1.SignBlobRequest.delegates)
}
inline std::string* SignBlobRequest::_internal_add_delegates() {
  return delegates_.Add();
}
inline void SignBlobRequest::add_delegates(const std::string& value) {
  delegates_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.iam.credentials.v1.SignBlobRequest.delegates)
}
inline void SignBlobRequest::add_delegates(std::string&& value) {
  delegates_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.iam.credentials.v1.SignBlobRequest.delegates)
}
inline void SignBlobRequest::add_delegates(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  delegates_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.iam.credentials.v1.SignBlobRequest.delegates)
}
inline void SignBlobRequest::add_delegates(const char* value, size_t size) {
  delegates_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.iam.credentials.v1.SignBlobRequest.delegates)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SignBlobRequest::delegates() const {
  // @@protoc_insertion_point(field_list:google.iam.credentials.v1.SignBlobRequest.delegates)
  return delegates_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SignBlobRequest::mutable_delegates() {
  // @@protoc_insertion_point(field_mutable_list:google.iam.credentials.v1.SignBlobRequest.delegates)
  return &delegates_;
}

// bytes payload = 5 [(.google.api.field_behavior) = REQUIRED];
inline void SignBlobRequest::clear_payload() {
  payload_.ClearToEmpty();
}
inline const std::string& SignBlobRequest::payload() const {
  // @@protoc_insertion_point(field_get:google.iam.credentials.v1.SignBlobRequest.payload)
  return _internal_payload();
}
inline void SignBlobRequest::set_payload(const std::string& value) {
  _internal_set_payload(value);
  // @@protoc_insertion_point(field_set:google.iam.credentials.v1.SignBlobRequest.payload)
}
inline std::string* SignBlobRequest::mutable_payload() {
  // @@protoc_insertion_point(field_mutable:google.iam.credentials.v1.SignBlobRequest.payload)
  return _internal_mutable_payload();
}
inline const std::string& SignBlobRequest::_internal_payload() const {
  return payload_.Get();
}
inline void SignBlobRequest::_internal_set_payload(const std::string& value) {
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SignBlobRequest::set_payload(std::string&& value) {
  
  payload_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.iam.credentials.v1.SignBlobRequest.payload)
}
inline void SignBlobRequest::set_payload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.iam.credentials.v1.SignBlobRequest.payload)
}
inline void SignBlobRequest::set_payload(const void* value,
    size_t size) {
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.iam.credentials.v1.SignBlobRequest.payload)
}
inline std::string* SignBlobRequest::_internal_mutable_payload() {
  
  return payload_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SignBlobRequest::release_payload() {
  // @@protoc_insertion_point(field_release:google.iam.credentials.v1.SignBlobRequest.payload)
  return payload_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SignBlobRequest::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.iam.credentials.v1.SignBlobRequest.payload)
}

// -------------------------------------------------------------------

// SignBlobResponse

// string key_id = 1;
inline void SignBlobResponse::clear_key_id() {
  key_id_.ClearToEmpty();
}
inline const std::string& SignBlobResponse::key_id() const {
  // @@protoc_insertion_point(field_get:google.iam.credentials.v1.SignBlobResponse.key_id)
  return _internal_key_id();
}
inline void SignBlobResponse::set_key_id(const std::string& value) {
  _internal_set_key_id(value);
  // @@protoc_insertion_point(field_set:google.iam.credentials.v1.SignBlobResponse.key_id)
}
inline std::string* SignBlobResponse::mutable_key_id() {
  // @@protoc_insertion_point(field_mutable:google.iam.credentials.v1.SignBlobResponse.key_id)
  return _internal_mutable_key_id();
}
inline const std::string& SignBlobResponse::_internal_key_id() const {
  return key_id_.Get();
}
inline void SignBlobResponse::_internal_set_key_id(const std::string& value) {
  
  key_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SignBlobResponse::set_key_id(std::string&& value) {
  
  key_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.iam.credentials.v1.SignBlobResponse.key_id)
}
inline void SignBlobResponse::set_key_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.iam.credentials.v1.SignBlobResponse.key_id)
}
inline void SignBlobResponse::set_key_id(const char* value,
    size_t size) {
  
  key_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.iam.credentials.v1.SignBlobResponse.key_id)
}
inline std::string* SignBlobResponse::_internal_mutable_key_id() {
  
  return key_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SignBlobResponse::release_key_id() {
  // @@protoc_insertion_point(field_release:google.iam.credentials.v1.SignBlobResponse.key_id)
  return key_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SignBlobResponse::set_allocated_key_id(std::string* key_id) {
  if (key_id != nullptr) {
    
  } else {
    
  }
  key_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.iam.credentials.v1.SignBlobResponse.key_id)
}

// bytes signed_blob = 4;
inline void SignBlobResponse::clear_signed_blob() {
  signed_blob_.ClearToEmpty();
}
inline const std::string& SignBlobResponse::signed_blob() const {
  // @@protoc_insertion_point(field_get:google.iam.credentials.v1.SignBlobResponse.signed_blob)
  return _internal_signed_blob();
}
inline void SignBlobResponse::set_signed_blob(const std::string& value) {
  _internal_set_signed_blob(value);
  // @@protoc_insertion_point(field_set:google.iam.credentials.v1.SignBlobResponse.signed_blob)
}
inline std::string* SignBlobResponse::mutable_signed_blob() {
  // @@protoc_insertion_point(field_mutable:google.iam.credentials.v1.SignBlobResponse.signed_blob)
  return _internal_mutable_signed_blob();
}
inline const std::string& SignBlobResponse::_internal_signed_blob() const {
  return signed_blob_.Get();
}
inline void SignBlobResponse::_internal_set_signed_blob(const std::string& value) {
  
  signed_blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SignBlobResponse::set_signed_blob(std::string&& value) {
  
  signed_blob_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.iam.credentials.v1.SignBlobResponse.signed_blob)
}
inline void SignBlobResponse::set_signed_blob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signed_blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.iam.credentials.v1.SignBlobResponse.signed_blob)
}
inline void SignBlobResponse::set_signed_blob(const void* value,
    size_t size) {
  
  signed_blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.iam.credentials.v1.SignBlobResponse.signed_blob)
}
inline std::string* SignBlobResponse::_internal_mutable_signed_blob() {
  
  return signed_blob_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SignBlobResponse::release_signed_blob() {
  // @@protoc_insertion_point(field_release:google.iam.credentials.v1.SignBlobResponse.signed_blob)
  return signed_blob_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SignBlobResponse::set_allocated_signed_blob(std::string* signed_blob) {
  if (signed_blob != nullptr) {
    
  } else {
    
  }
  signed_blob_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signed_blob,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.iam.credentials.v1.SignBlobResponse.signed_blob)
}

// -------------------------------------------------------------------

// SignJwtRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void SignJwtRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& SignJwtRequest::name() const {
  // @@protoc_insertion_point(field_get:google.iam.credentials.v1.SignJwtRequest.name)
  return _internal_name();
}
inline void SignJwtRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:google.iam.credentials.v1.SignJwtRequest.name)
}
inline std::string* SignJwtRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:google.iam.credentials.v1.SignJwtRequest.name)
  return _internal_mutable_name();
}
inline const std::string& SignJwtRequest::_internal_name() const {
  return name_.Get();
}
inline void SignJwtRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SignJwtRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.iam.credentials.v1.SignJwtRequest.name)
}
inline void SignJwtRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.iam.credentials.v1.SignJwtRequest.name)
}
inline void SignJwtRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.iam.credentials.v1.SignJwtRequest.name)
}
inline std::string* SignJwtRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SignJwtRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.iam.credentials.v1.SignJwtRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SignJwtRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.iam.credentials.v1.SignJwtRequest.name)
}

// repeated string delegates = 3;
inline int SignJwtRequest::_internal_delegates_size() const {
  return delegates_.size();
}
inline int SignJwtRequest::delegates_size() const {
  return _internal_delegates_size();
}
inline void SignJwtRequest::clear_delegates() {
  delegates_.Clear();
}
inline std::string* SignJwtRequest::add_delegates() {
  // @@protoc_insertion_point(field_add_mutable:google.iam.credentials.v1.SignJwtRequest.delegates)
  return _internal_add_delegates();
}
inline const std::string& SignJwtRequest::_internal_delegates(int index) const {
  return delegates_.Get(index);
}
inline const std::string& SignJwtRequest::delegates(int index) const {
  // @@protoc_insertion_point(field_get:google.iam.credentials.v1.SignJwtRequest.delegates)
  return _internal_delegates(index);
}
inline std::string* SignJwtRequest::mutable_delegates(int index) {
  // @@protoc_insertion_point(field_mutable:google.iam.credentials.v1.SignJwtRequest.delegates)
  return delegates_.Mutable(index);
}
inline void SignJwtRequest::set_delegates(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:google.iam.credentials.v1.SignJwtRequest.delegates)
  delegates_.Mutable(index)->assign(value);
}
inline void SignJwtRequest::set_delegates(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:google.iam.credentials.v1.SignJwtRequest.delegates)
  delegates_.Mutable(index)->assign(std::move(value));
}
inline void SignJwtRequest::set_delegates(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  delegates_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.iam.credentials.v1.SignJwtRequest.delegates)
}
inline void SignJwtRequest::set_delegates(int index, const char* value, size_t size) {
  delegates_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.iam.credentials.v1.SignJwtRequest.delegates)
}
inline std::string* SignJwtRequest::_internal_add_delegates() {
  return delegates_.Add();
}
inline void SignJwtRequest::add_delegates(const std::string& value) {
  delegates_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.iam.credentials.v1.SignJwtRequest.delegates)
}
inline void SignJwtRequest::add_delegates(std::string&& value) {
  delegates_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.iam.credentials.v1.SignJwtRequest.delegates)
}
inline void SignJwtRequest::add_delegates(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  delegates_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.iam.credentials.v1.SignJwtRequest.delegates)
}
inline void SignJwtRequest::add_delegates(const char* value, size_t size) {
  delegates_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.iam.credentials.v1.SignJwtRequest.delegates)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SignJwtRequest::delegates() const {
  // @@protoc_insertion_point(field_list:google.iam.credentials.v1.SignJwtRequest.delegates)
  return delegates_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SignJwtRequest::mutable_delegates() {
  // @@protoc_insertion_point(field_mutable_list:google.iam.credentials.v1.SignJwtRequest.delegates)
  return &delegates_;
}

// string payload = 5 [(.google.api.field_behavior) = REQUIRED];
inline void SignJwtRequest::clear_payload() {
  payload_.ClearToEmpty();
}
inline const std::string& SignJwtRequest::payload() const {
  // @@protoc_insertion_point(field_get:google.iam.credentials.v1.SignJwtRequest.payload)
  return _internal_payload();
}
inline void SignJwtRequest::set_payload(const std::string& value) {
  _internal_set_payload(value);
  // @@protoc_insertion_point(field_set:google.iam.credentials.v1.SignJwtRequest.payload)
}
inline std::string* SignJwtRequest::mutable_payload() {
  // @@protoc_insertion_point(field_mutable:google.iam.credentials.v1.SignJwtRequest.payload)
  return _internal_mutable_payload();
}
inline const std::string& SignJwtRequest::_internal_payload() const {
  return payload_.Get();
}
inline void SignJwtRequest::_internal_set_payload(const std::string& value) {
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SignJwtRequest::set_payload(std::string&& value) {
  
  payload_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.iam.credentials.v1.SignJwtRequest.payload)
}
inline void SignJwtRequest::set_payload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.iam.credentials.v1.SignJwtRequest.payload)
}
inline void SignJwtRequest::set_payload(const char* value,
    size_t size) {
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.iam.credentials.v1.SignJwtRequest.payload)
}
inline std::string* SignJwtRequest::_internal_mutable_payload() {
  
  return payload_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SignJwtRequest::release_payload() {
  // @@protoc_insertion_point(field_release:google.iam.credentials.v1.SignJwtRequest.payload)
  return payload_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SignJwtRequest::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.iam.credentials.v1.SignJwtRequest.payload)
}

// -------------------------------------------------------------------

// SignJwtResponse

// string key_id = 1;
inline void SignJwtResponse::clear_key_id() {
  key_id_.ClearToEmpty();
}
inline const std::string& SignJwtResponse::key_id() const {
  // @@protoc_insertion_point(field_get:google.iam.credentials.v1.SignJwtResponse.key_id)
  return _internal_key_id();
}
inline void SignJwtResponse::set_key_id(const std::string& value) {
  _internal_set_key_id(value);
  // @@protoc_insertion_point(field_set:google.iam.credentials.v1.SignJwtResponse.key_id)
}
inline std::string* SignJwtResponse::mutable_key_id() {
  // @@protoc_insertion_point(field_mutable:google.iam.credentials.v1.SignJwtResponse.key_id)
  return _internal_mutable_key_id();
}
inline const std::string& SignJwtResponse::_internal_key_id() const {
  return key_id_.Get();
}
inline void SignJwtResponse::_internal_set_key_id(const std::string& value) {
  
  key_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SignJwtResponse::set_key_id(std::string&& value) {
  
  key_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.iam.credentials.v1.SignJwtResponse.key_id)
}
inline void SignJwtResponse::set_key_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.iam.credentials.v1.SignJwtResponse.key_id)
}
inline void SignJwtResponse::set_key_id(const char* value,
    size_t size) {
  
  key_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.iam.credentials.v1.SignJwtResponse.key_id)
}
inline std::string* SignJwtResponse::_internal_mutable_key_id() {
  
  return key_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SignJwtResponse::release_key_id() {
  // @@protoc_insertion_point(field_release:google.iam.credentials.v1.SignJwtResponse.key_id)
  return key_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SignJwtResponse::set_allocated_key_id(std::string* key_id) {
  if (key_id != nullptr) {
    
  } else {
    
  }
  key_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.iam.credentials.v1.SignJwtResponse.key_id)
}

// string signed_jwt = 2;
inline void SignJwtResponse::clear_signed_jwt() {
  signed_jwt_.ClearToEmpty();
}
inline const std::string& SignJwtResponse::signed_jwt() const {
  // @@protoc_insertion_point(field_get:google.iam.credentials.v1.SignJwtResponse.signed_jwt)
  return _internal_signed_jwt();
}
inline void SignJwtResponse::set_signed_jwt(const std::string& value) {
  _internal_set_signed_jwt(value);
  // @@protoc_insertion_point(field_set:google.iam.credentials.v1.SignJwtResponse.signed_jwt)
}
inline std::string* SignJwtResponse::mutable_signed_jwt() {
  // @@protoc_insertion_point(field_mutable:google.iam.credentials.v1.SignJwtResponse.signed_jwt)
  return _internal_mutable_signed_jwt();
}
inline const std::string& SignJwtResponse::_internal_signed_jwt() const {
  return signed_jwt_.Get();
}
inline void SignJwtResponse::_internal_set_signed_jwt(const std::string& value) {
  
  signed_jwt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SignJwtResponse::set_signed_jwt(std::string&& value) {
  
  signed_jwt_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.iam.credentials.v1.SignJwtResponse.signed_jwt)
}
inline void SignJwtResponse::set_signed_jwt(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signed_jwt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.iam.credentials.v1.SignJwtResponse.signed_jwt)
}
inline void SignJwtResponse::set_signed_jwt(const char* value,
    size_t size) {
  
  signed_jwt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.iam.credentials.v1.SignJwtResponse.signed_jwt)
}
inline std::string* SignJwtResponse::_internal_mutable_signed_jwt() {
  
  return signed_jwt_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SignJwtResponse::release_signed_jwt() {
  // @@protoc_insertion_point(field_release:google.iam.credentials.v1.SignJwtResponse.signed_jwt)
  return signed_jwt_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SignJwtResponse::set_allocated_signed_jwt(std::string* signed_jwt) {
  if (signed_jwt != nullptr) {
    
  } else {
    
  }
  signed_jwt_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signed_jwt,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.iam.credentials.v1.SignJwtResponse.signed_jwt)
}

// -------------------------------------------------------------------

// GenerateIdTokenRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GenerateIdTokenRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GenerateIdTokenRequest::name() const {
  // @@protoc_insertion_point(field_get:google.iam.credentials.v1.GenerateIdTokenRequest.name)
  return _internal_name();
}
inline void GenerateIdTokenRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:google.iam.credentials.v1.GenerateIdTokenRequest.name)
}
inline std::string* GenerateIdTokenRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:google.iam.credentials.v1.GenerateIdTokenRequest.name)
  return _internal_mutable_name();
}
inline const std::string& GenerateIdTokenRequest::_internal_name() const {
  return name_.Get();
}
inline void GenerateIdTokenRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GenerateIdTokenRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.iam.credentials.v1.GenerateIdTokenRequest.name)
}
inline void GenerateIdTokenRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.iam.credentials.v1.GenerateIdTokenRequest.name)
}
inline void GenerateIdTokenRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.iam.credentials.v1.GenerateIdTokenRequest.name)
}
inline std::string* GenerateIdTokenRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GenerateIdTokenRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.iam.credentials.v1.GenerateIdTokenRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GenerateIdTokenRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.iam.credentials.v1.GenerateIdTokenRequest.name)
}

// repeated string delegates = 2;
inline int GenerateIdTokenRequest::_internal_delegates_size() const {
  return delegates_.size();
}
inline int GenerateIdTokenRequest::delegates_size() const {
  return _internal_delegates_size();
}
inline void GenerateIdTokenRequest::clear_delegates() {
  delegates_.Clear();
}
inline std::string* GenerateIdTokenRequest::add_delegates() {
  // @@protoc_insertion_point(field_add_mutable:google.iam.credentials.v1.GenerateIdTokenRequest.delegates)
  return _internal_add_delegates();
}
inline const std::string& GenerateIdTokenRequest::_internal_delegates(int index) const {
  return delegates_.Get(index);
}
inline const std::string& GenerateIdTokenRequest::delegates(int index) const {
  // @@protoc_insertion_point(field_get:google.iam.credentials.v1.GenerateIdTokenRequest.delegates)
  return _internal_delegates(index);
}
inline std::string* GenerateIdTokenRequest::mutable_delegates(int index) {
  // @@protoc_insertion_point(field_mutable:google.iam.credentials.v1.GenerateIdTokenRequest.delegates)
  return delegates_.Mutable(index);
}
inline void GenerateIdTokenRequest::set_delegates(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:google.iam.credentials.v1.GenerateIdTokenRequest.delegates)
  delegates_.Mutable(index)->assign(value);
}
inline void GenerateIdTokenRequest::set_delegates(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:google.iam.credentials.v1.GenerateIdTokenRequest.delegates)
  delegates_.Mutable(index)->assign(std::move(value));
}
inline void GenerateIdTokenRequest::set_delegates(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  delegates_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.iam.credentials.v1.GenerateIdTokenRequest.delegates)
}
inline void GenerateIdTokenRequest::set_delegates(int index, const char* value, size_t size) {
  delegates_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.iam.credentials.v1.GenerateIdTokenRequest.delegates)
}
inline std::string* GenerateIdTokenRequest::_internal_add_delegates() {
  return delegates_.Add();
}
inline void GenerateIdTokenRequest::add_delegates(const std::string& value) {
  delegates_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.iam.credentials.v1.GenerateIdTokenRequest.delegates)
}
inline void GenerateIdTokenRequest::add_delegates(std::string&& value) {
  delegates_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.iam.credentials.v1.GenerateIdTokenRequest.delegates)
}
inline void GenerateIdTokenRequest::add_delegates(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  delegates_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.iam.credentials.v1.GenerateIdTokenRequest.delegates)
}
inline void GenerateIdTokenRequest::add_delegates(const char* value, size_t size) {
  delegates_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.iam.credentials.v1.GenerateIdTokenRequest.delegates)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GenerateIdTokenRequest::delegates() const {
  // @@protoc_insertion_point(field_list:google.iam.credentials.v1.GenerateIdTokenRequest.delegates)
  return delegates_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GenerateIdTokenRequest::mutable_delegates() {
  // @@protoc_insertion_point(field_mutable_list:google.iam.credentials.v1.GenerateIdTokenRequest.delegates)
  return &delegates_;
}

// string audience = 3 [(.google.api.field_behavior) = REQUIRED];
inline void GenerateIdTokenRequest::clear_audience() {
  audience_.ClearToEmpty();
}
inline const std::string& GenerateIdTokenRequest::audience() const {
  // @@protoc_insertion_point(field_get:google.iam.credentials.v1.GenerateIdTokenRequest.audience)
  return _internal_audience();
}
inline void GenerateIdTokenRequest::set_audience(const std::string& value) {
  _internal_set_audience(value);
  // @@protoc_insertion_point(field_set:google.iam.credentials.v1.GenerateIdTokenRequest.audience)
}
inline std::string* GenerateIdTokenRequest::mutable_audience() {
  // @@protoc_insertion_point(field_mutable:google.iam.credentials.v1.GenerateIdTokenRequest.audience)
  return _internal_mutable_audience();
}
inline const std::string& GenerateIdTokenRequest::_internal_audience() const {
  return audience_.Get();
}
inline void GenerateIdTokenRequest::_internal_set_audience(const std::string& value) {
  
  audience_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GenerateIdTokenRequest::set_audience(std::string&& value) {
  
  audience_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.iam.credentials.v1.GenerateIdTokenRequest.audience)
}
inline void GenerateIdTokenRequest::set_audience(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  audience_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.iam.credentials.v1.GenerateIdTokenRequest.audience)
}
inline void GenerateIdTokenRequest::set_audience(const char* value,
    size_t size) {
  
  audience_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.iam.credentials.v1.GenerateIdTokenRequest.audience)
}
inline std::string* GenerateIdTokenRequest::_internal_mutable_audience() {
  
  return audience_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GenerateIdTokenRequest::release_audience() {
  // @@protoc_insertion_point(field_release:google.iam.credentials.v1.GenerateIdTokenRequest.audience)
  return audience_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GenerateIdTokenRequest::set_allocated_audience(std::string* audience) {
  if (audience != nullptr) {
    
  } else {
    
  }
  audience_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), audience,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.iam.credentials.v1.GenerateIdTokenRequest.audience)
}

// bool include_email = 4;
inline void GenerateIdTokenRequest::clear_include_email() {
  include_email_ = false;
}
inline bool GenerateIdTokenRequest::_internal_include_email() const {
  return include_email_;
}
inline bool GenerateIdTokenRequest::include_email() const {
  // @@protoc_insertion_point(field_get:google.iam.credentials.v1.GenerateIdTokenRequest.include_email)
  return _internal_include_email();
}
inline void GenerateIdTokenRequest::_internal_set_include_email(bool value) {
  
  include_email_ = value;
}
inline void GenerateIdTokenRequest::set_include_email(bool value) {
  _internal_set_include_email(value);
  // @@protoc_insertion_point(field_set:google.iam.credentials.v1.GenerateIdTokenRequest.include_email)
}

// -------------------------------------------------------------------

// GenerateIdTokenResponse

// string token = 1;
inline void GenerateIdTokenResponse::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& GenerateIdTokenResponse::token() const {
  // @@protoc_insertion_point(field_get:google.iam.credentials.v1.GenerateIdTokenResponse.token)
  return _internal_token();
}
inline void GenerateIdTokenResponse::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:google.iam.credentials.v1.GenerateIdTokenResponse.token)
}
inline std::string* GenerateIdTokenResponse::mutable_token() {
  // @@protoc_insertion_point(field_mutable:google.iam.credentials.v1.GenerateIdTokenResponse.token)
  return _internal_mutable_token();
}
inline const std::string& GenerateIdTokenResponse::_internal_token() const {
  return token_.Get();
}
inline void GenerateIdTokenResponse::_internal_set_token(const std::string& value) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GenerateIdTokenResponse::set_token(std::string&& value) {
  
  token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.iam.credentials.v1.GenerateIdTokenResponse.token)
}
inline void GenerateIdTokenResponse::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.iam.credentials.v1.GenerateIdTokenResponse.token)
}
inline void GenerateIdTokenResponse::set_token(const char* value,
    size_t size) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.iam.credentials.v1.GenerateIdTokenResponse.token)
}
inline std::string* GenerateIdTokenResponse::_internal_mutable_token() {
  
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GenerateIdTokenResponse::release_token() {
  // @@protoc_insertion_point(field_release:google.iam.credentials.v1.GenerateIdTokenResponse.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GenerateIdTokenResponse::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.iam.credentials.v1.GenerateIdTokenResponse.token)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace credentials
}  // namespace iam
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fiam_2fcredentials_2fv1_2fcommon_2eproto
