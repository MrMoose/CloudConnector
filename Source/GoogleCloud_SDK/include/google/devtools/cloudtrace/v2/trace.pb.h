// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/cloudtrace/v2/trace.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/field_behavior.pb.h"
#include "google/api/resource.pb.h"
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/wrappers.pb.h>
#include "google/rpc/status.pb.h"
#include "google/api/annotations.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[15]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto_metadata_getter(int index);
namespace google {
namespace devtools {
namespace cloudtrace {
namespace v2 {
class AttributeValue;
struct AttributeValueDefaultTypeInternal;
extern AttributeValueDefaultTypeInternal _AttributeValue_default_instance_;
class Module;
struct ModuleDefaultTypeInternal;
extern ModuleDefaultTypeInternal _Module_default_instance_;
class Span;
struct SpanDefaultTypeInternal;
extern SpanDefaultTypeInternal _Span_default_instance_;
class Span_Attributes;
struct Span_AttributesDefaultTypeInternal;
extern Span_AttributesDefaultTypeInternal _Span_Attributes_default_instance_;
class Span_Attributes_AttributeMapEntry_DoNotUse;
struct Span_Attributes_AttributeMapEntry_DoNotUseDefaultTypeInternal;
extern Span_Attributes_AttributeMapEntry_DoNotUseDefaultTypeInternal _Span_Attributes_AttributeMapEntry_DoNotUse_default_instance_;
class Span_Link;
struct Span_LinkDefaultTypeInternal;
extern Span_LinkDefaultTypeInternal _Span_Link_default_instance_;
class Span_Links;
struct Span_LinksDefaultTypeInternal;
extern Span_LinksDefaultTypeInternal _Span_Links_default_instance_;
class Span_TimeEvent;
struct Span_TimeEventDefaultTypeInternal;
extern Span_TimeEventDefaultTypeInternal _Span_TimeEvent_default_instance_;
class Span_TimeEvent_Annotation;
struct Span_TimeEvent_AnnotationDefaultTypeInternal;
extern Span_TimeEvent_AnnotationDefaultTypeInternal _Span_TimeEvent_Annotation_default_instance_;
class Span_TimeEvent_MessageEvent;
struct Span_TimeEvent_MessageEventDefaultTypeInternal;
extern Span_TimeEvent_MessageEventDefaultTypeInternal _Span_TimeEvent_MessageEvent_default_instance_;
class Span_TimeEvents;
struct Span_TimeEventsDefaultTypeInternal;
extern Span_TimeEventsDefaultTypeInternal _Span_TimeEvents_default_instance_;
class StackTrace;
struct StackTraceDefaultTypeInternal;
extern StackTraceDefaultTypeInternal _StackTrace_default_instance_;
class StackTrace_StackFrame;
struct StackTrace_StackFrameDefaultTypeInternal;
extern StackTrace_StackFrameDefaultTypeInternal _StackTrace_StackFrame_default_instance_;
class StackTrace_StackFrames;
struct StackTrace_StackFramesDefaultTypeInternal;
extern StackTrace_StackFramesDefaultTypeInternal _StackTrace_StackFrames_default_instance_;
class TruncatableString;
struct TruncatableStringDefaultTypeInternal;
extern TruncatableStringDefaultTypeInternal _TruncatableString_default_instance_;
}  // namespace v2
}  // namespace cloudtrace
}  // namespace devtools
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::devtools::cloudtrace::v2::AttributeValue* Arena::CreateMaybeMessage<::google::devtools::cloudtrace::v2::AttributeValue>(Arena*);
template<> ::google::devtools::cloudtrace::v2::Module* Arena::CreateMaybeMessage<::google::devtools::cloudtrace::v2::Module>(Arena*);
template<> ::google::devtools::cloudtrace::v2::Span* Arena::CreateMaybeMessage<::google::devtools::cloudtrace::v2::Span>(Arena*);
template<> ::google::devtools::cloudtrace::v2::Span_Attributes* Arena::CreateMaybeMessage<::google::devtools::cloudtrace::v2::Span_Attributes>(Arena*);
template<> ::google::devtools::cloudtrace::v2::Span_Attributes_AttributeMapEntry_DoNotUse* Arena::CreateMaybeMessage<::google::devtools::cloudtrace::v2::Span_Attributes_AttributeMapEntry_DoNotUse>(Arena*);
template<> ::google::devtools::cloudtrace::v2::Span_Link* Arena::CreateMaybeMessage<::google::devtools::cloudtrace::v2::Span_Link>(Arena*);
template<> ::google::devtools::cloudtrace::v2::Span_Links* Arena::CreateMaybeMessage<::google::devtools::cloudtrace::v2::Span_Links>(Arena*);
template<> ::google::devtools::cloudtrace::v2::Span_TimeEvent* Arena::CreateMaybeMessage<::google::devtools::cloudtrace::v2::Span_TimeEvent>(Arena*);
template<> ::google::devtools::cloudtrace::v2::Span_TimeEvent_Annotation* Arena::CreateMaybeMessage<::google::devtools::cloudtrace::v2::Span_TimeEvent_Annotation>(Arena*);
template<> ::google::devtools::cloudtrace::v2::Span_TimeEvent_MessageEvent* Arena::CreateMaybeMessage<::google::devtools::cloudtrace::v2::Span_TimeEvent_MessageEvent>(Arena*);
template<> ::google::devtools::cloudtrace::v2::Span_TimeEvents* Arena::CreateMaybeMessage<::google::devtools::cloudtrace::v2::Span_TimeEvents>(Arena*);
template<> ::google::devtools::cloudtrace::v2::StackTrace* Arena::CreateMaybeMessage<::google::devtools::cloudtrace::v2::StackTrace>(Arena*);
template<> ::google::devtools::cloudtrace::v2::StackTrace_StackFrame* Arena::CreateMaybeMessage<::google::devtools::cloudtrace::v2::StackTrace_StackFrame>(Arena*);
template<> ::google::devtools::cloudtrace::v2::StackTrace_StackFrames* Arena::CreateMaybeMessage<::google::devtools::cloudtrace::v2::StackTrace_StackFrames>(Arena*);
template<> ::google::devtools::cloudtrace::v2::TruncatableString* Arena::CreateMaybeMessage<::google::devtools::cloudtrace::v2::TruncatableString>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace devtools {
namespace cloudtrace {
namespace v2 {

enum Span_TimeEvent_MessageEvent_Type : int {
  Span_TimeEvent_MessageEvent_Type_TYPE_UNSPECIFIED = 0,
  Span_TimeEvent_MessageEvent_Type_SENT = 1,
  Span_TimeEvent_MessageEvent_Type_RECEIVED = 2,
  Span_TimeEvent_MessageEvent_Type_Span_TimeEvent_MessageEvent_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Span_TimeEvent_MessageEvent_Type_Span_TimeEvent_MessageEvent_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Span_TimeEvent_MessageEvent_Type_IsValid(int value);
constexpr Span_TimeEvent_MessageEvent_Type Span_TimeEvent_MessageEvent_Type_Type_MIN = Span_TimeEvent_MessageEvent_Type_TYPE_UNSPECIFIED;
constexpr Span_TimeEvent_MessageEvent_Type Span_TimeEvent_MessageEvent_Type_Type_MAX = Span_TimeEvent_MessageEvent_Type_RECEIVED;
constexpr int Span_TimeEvent_MessageEvent_Type_Type_ARRAYSIZE = Span_TimeEvent_MessageEvent_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Span_TimeEvent_MessageEvent_Type_descriptor();
template<typename T>
inline const std::string& Span_TimeEvent_MessageEvent_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Span_TimeEvent_MessageEvent_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Span_TimeEvent_MessageEvent_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Span_TimeEvent_MessageEvent_Type_descriptor(), enum_t_value);
}
inline bool Span_TimeEvent_MessageEvent_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Span_TimeEvent_MessageEvent_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Span_TimeEvent_MessageEvent_Type>(
    Span_TimeEvent_MessageEvent_Type_descriptor(), name, value);
}
enum Span_Link_Type : int {
  Span_Link_Type_TYPE_UNSPECIFIED = 0,
  Span_Link_Type_CHILD_LINKED_SPAN = 1,
  Span_Link_Type_PARENT_LINKED_SPAN = 2,
  Span_Link_Type_Span_Link_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Span_Link_Type_Span_Link_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Span_Link_Type_IsValid(int value);
constexpr Span_Link_Type Span_Link_Type_Type_MIN = Span_Link_Type_TYPE_UNSPECIFIED;
constexpr Span_Link_Type Span_Link_Type_Type_MAX = Span_Link_Type_PARENT_LINKED_SPAN;
constexpr int Span_Link_Type_Type_ARRAYSIZE = Span_Link_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Span_Link_Type_descriptor();
template<typename T>
inline const std::string& Span_Link_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Span_Link_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Span_Link_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Span_Link_Type_descriptor(), enum_t_value);
}
inline bool Span_Link_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Span_Link_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Span_Link_Type>(
    Span_Link_Type_descriptor(), name, value);
}
enum Span_SpanKind : int {
  Span_SpanKind_SPAN_KIND_UNSPECIFIED = 0,
  Span_SpanKind_INTERNAL = 1,
  Span_SpanKind_SERVER = 2,
  Span_SpanKind_CLIENT = 3,
  Span_SpanKind_PRODUCER = 4,
  Span_SpanKind_CONSUMER = 5,
  Span_SpanKind_Span_SpanKind_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Span_SpanKind_Span_SpanKind_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Span_SpanKind_IsValid(int value);
constexpr Span_SpanKind Span_SpanKind_SpanKind_MIN = Span_SpanKind_SPAN_KIND_UNSPECIFIED;
constexpr Span_SpanKind Span_SpanKind_SpanKind_MAX = Span_SpanKind_CONSUMER;
constexpr int Span_SpanKind_SpanKind_ARRAYSIZE = Span_SpanKind_SpanKind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Span_SpanKind_descriptor();
template<typename T>
inline const std::string& Span_SpanKind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Span_SpanKind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Span_SpanKind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Span_SpanKind_descriptor(), enum_t_value);
}
inline bool Span_SpanKind_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Span_SpanKind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Span_SpanKind>(
    Span_SpanKind_descriptor(), name, value);
}
// ===================================================================

class Span_Attributes_AttributeMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Span_Attributes_AttributeMapEntry_DoNotUse, 
    std::string, ::google::devtools::cloudtrace::v2::AttributeValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Span_Attributes_AttributeMapEntry_DoNotUse, 
    std::string, ::google::devtools::cloudtrace::v2::AttributeValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  Span_Attributes_AttributeMapEntry_DoNotUse();
  explicit constexpr Span_Attributes_AttributeMapEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Span_Attributes_AttributeMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Span_Attributes_AttributeMapEntry_DoNotUse& other);
  static const Span_Attributes_AttributeMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Span_Attributes_AttributeMapEntry_DoNotUse*>(&_Span_Attributes_AttributeMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.devtools.cloudtrace.v2.Span.Attributes.AttributeMapEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto);
    return ::descriptor_table_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto.file_level_metadata[0];
  }

  public:
};

// -------------------------------------------------------------------

class Span_Attributes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.devtools.cloudtrace.v2.Span.Attributes) */ {
 public:
  inline Span_Attributes() : Span_Attributes(nullptr) {}
  virtual ~Span_Attributes();
  explicit constexpr Span_Attributes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Span_Attributes(const Span_Attributes& from);
  Span_Attributes(Span_Attributes&& from) noexcept
    : Span_Attributes() {
    *this = ::std::move(from);
  }

  inline Span_Attributes& operator=(const Span_Attributes& from) {
    CopyFrom(from);
    return *this;
  }
  inline Span_Attributes& operator=(Span_Attributes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Span_Attributes& default_instance() {
    return *internal_default_instance();
  }
  static inline const Span_Attributes* internal_default_instance() {
    return reinterpret_cast<const Span_Attributes*>(
               &_Span_Attributes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Span_Attributes& a, Span_Attributes& b) {
    a.Swap(&b);
  }
  inline void Swap(Span_Attributes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Span_Attributes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Span_Attributes* New() const final {
    return CreateMaybeMessage<Span_Attributes>(nullptr);
  }

  Span_Attributes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Span_Attributes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Span_Attributes& from);
  void MergeFrom(const Span_Attributes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Span_Attributes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.devtools.cloudtrace.v2.Span.Attributes";
  }
  protected:
  explicit Span_Attributes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kAttributeMapFieldNumber = 1,
    kDroppedAttributesCountFieldNumber = 2,
  };
  // map<string, .google.devtools.cloudtrace.v2.AttributeValue> attribute_map = 1;
  int attribute_map_size() const;
  private:
  int _internal_attribute_map_size() const;
  public:
  void clear_attribute_map();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::google::devtools::cloudtrace::v2::AttributeValue >&
      _internal_attribute_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::google::devtools::cloudtrace::v2::AttributeValue >*
      _internal_mutable_attribute_map();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::google::devtools::cloudtrace::v2::AttributeValue >&
      attribute_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::google::devtools::cloudtrace::v2::AttributeValue >*
      mutable_attribute_map();

  // int32 dropped_attributes_count = 2;
  void clear_dropped_attributes_count();
  ::PROTOBUF_NAMESPACE_ID::int32 dropped_attributes_count() const;
  void set_dropped_attributes_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dropped_attributes_count() const;
  void _internal_set_dropped_attributes_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:google.devtools.cloudtrace.v2.Span.Attributes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Span_Attributes_AttributeMapEntry_DoNotUse,
      std::string, ::google::devtools::cloudtrace::v2::AttributeValue,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> attribute_map_;
  ::PROTOBUF_NAMESPACE_ID::int32 dropped_attributes_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto;
};
// -------------------------------------------------------------------

class Span_TimeEvent_Annotation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation) */ {
 public:
  inline Span_TimeEvent_Annotation() : Span_TimeEvent_Annotation(nullptr) {}
  virtual ~Span_TimeEvent_Annotation();
  explicit constexpr Span_TimeEvent_Annotation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Span_TimeEvent_Annotation(const Span_TimeEvent_Annotation& from);
  Span_TimeEvent_Annotation(Span_TimeEvent_Annotation&& from) noexcept
    : Span_TimeEvent_Annotation() {
    *this = ::std::move(from);
  }

  inline Span_TimeEvent_Annotation& operator=(const Span_TimeEvent_Annotation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Span_TimeEvent_Annotation& operator=(Span_TimeEvent_Annotation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Span_TimeEvent_Annotation& default_instance() {
    return *internal_default_instance();
  }
  static inline const Span_TimeEvent_Annotation* internal_default_instance() {
    return reinterpret_cast<const Span_TimeEvent_Annotation*>(
               &_Span_TimeEvent_Annotation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Span_TimeEvent_Annotation& a, Span_TimeEvent_Annotation& b) {
    a.Swap(&b);
  }
  inline void Swap(Span_TimeEvent_Annotation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Span_TimeEvent_Annotation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Span_TimeEvent_Annotation* New() const final {
    return CreateMaybeMessage<Span_TimeEvent_Annotation>(nullptr);
  }

  Span_TimeEvent_Annotation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Span_TimeEvent_Annotation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Span_TimeEvent_Annotation& from);
  void MergeFrom(const Span_TimeEvent_Annotation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Span_TimeEvent_Annotation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation";
  }
  protected:
  explicit Span_TimeEvent_Annotation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 1,
    kAttributesFieldNumber = 2,
  };
  // .google.devtools.cloudtrace.v2.TruncatableString description = 1;
  bool has_description() const;
  private:
  bool _internal_has_description() const;
  public:
  void clear_description();
  const ::google::devtools::cloudtrace::v2::TruncatableString& description() const;
  ::google::devtools::cloudtrace::v2::TruncatableString* release_description();
  ::google::devtools::cloudtrace::v2::TruncatableString* mutable_description();
  void set_allocated_description(::google::devtools::cloudtrace::v2::TruncatableString* description);
  private:
  const ::google::devtools::cloudtrace::v2::TruncatableString& _internal_description() const;
  ::google::devtools::cloudtrace::v2::TruncatableString* _internal_mutable_description();
  public:
  void unsafe_arena_set_allocated_description(
      ::google::devtools::cloudtrace::v2::TruncatableString* description);
  ::google::devtools::cloudtrace::v2::TruncatableString* unsafe_arena_release_description();

  // .google.devtools.cloudtrace.v2.Span.Attributes attributes = 2;
  bool has_attributes() const;
  private:
  bool _internal_has_attributes() const;
  public:
  void clear_attributes();
  const ::google::devtools::cloudtrace::v2::Span_Attributes& attributes() const;
  ::google::devtools::cloudtrace::v2::Span_Attributes* release_attributes();
  ::google::devtools::cloudtrace::v2::Span_Attributes* mutable_attributes();
  void set_allocated_attributes(::google::devtools::cloudtrace::v2::Span_Attributes* attributes);
  private:
  const ::google::devtools::cloudtrace::v2::Span_Attributes& _internal_attributes() const;
  ::google::devtools::cloudtrace::v2::Span_Attributes* _internal_mutable_attributes();
  public:
  void unsafe_arena_set_allocated_attributes(
      ::google::devtools::cloudtrace::v2::Span_Attributes* attributes);
  ::google::devtools::cloudtrace::v2::Span_Attributes* unsafe_arena_release_attributes();

  // @@protoc_insertion_point(class_scope:google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::devtools::cloudtrace::v2::TruncatableString* description_;
  ::google::devtools::cloudtrace::v2::Span_Attributes* attributes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto;
};
// -------------------------------------------------------------------

class Span_TimeEvent_MessageEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent) */ {
 public:
  inline Span_TimeEvent_MessageEvent() : Span_TimeEvent_MessageEvent(nullptr) {}
  virtual ~Span_TimeEvent_MessageEvent();
  explicit constexpr Span_TimeEvent_MessageEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Span_TimeEvent_MessageEvent(const Span_TimeEvent_MessageEvent& from);
  Span_TimeEvent_MessageEvent(Span_TimeEvent_MessageEvent&& from) noexcept
    : Span_TimeEvent_MessageEvent() {
    *this = ::std::move(from);
  }

  inline Span_TimeEvent_MessageEvent& operator=(const Span_TimeEvent_MessageEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Span_TimeEvent_MessageEvent& operator=(Span_TimeEvent_MessageEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Span_TimeEvent_MessageEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Span_TimeEvent_MessageEvent* internal_default_instance() {
    return reinterpret_cast<const Span_TimeEvent_MessageEvent*>(
               &_Span_TimeEvent_MessageEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Span_TimeEvent_MessageEvent& a, Span_TimeEvent_MessageEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Span_TimeEvent_MessageEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Span_TimeEvent_MessageEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Span_TimeEvent_MessageEvent* New() const final {
    return CreateMaybeMessage<Span_TimeEvent_MessageEvent>(nullptr);
  }

  Span_TimeEvent_MessageEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Span_TimeEvent_MessageEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Span_TimeEvent_MessageEvent& from);
  void MergeFrom(const Span_TimeEvent_MessageEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Span_TimeEvent_MessageEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent";
  }
  protected:
  explicit Span_TimeEvent_MessageEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef Span_TimeEvent_MessageEvent_Type Type;
  static constexpr Type TYPE_UNSPECIFIED =
    Span_TimeEvent_MessageEvent_Type_TYPE_UNSPECIFIED;
  static constexpr Type SENT =
    Span_TimeEvent_MessageEvent_Type_SENT;
  static constexpr Type RECEIVED =
    Span_TimeEvent_MessageEvent_Type_RECEIVED;
  static inline bool Type_IsValid(int value) {
    return Span_TimeEvent_MessageEvent_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Span_TimeEvent_MessageEvent_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Span_TimeEvent_MessageEvent_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Span_TimeEvent_MessageEvent_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Span_TimeEvent_MessageEvent_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Span_TimeEvent_MessageEvent_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return Span_TimeEvent_MessageEvent_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 2,
    kUncompressedSizeBytesFieldNumber = 3,
    kCompressedSizeBytesFieldNumber = 4,
    kTypeFieldNumber = 1,
  };
  // int64 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 uncompressed_size_bytes = 3;
  void clear_uncompressed_size_bytes();
  ::PROTOBUF_NAMESPACE_ID::int64 uncompressed_size_bytes() const;
  void set_uncompressed_size_bytes(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_uncompressed_size_bytes() const;
  void _internal_set_uncompressed_size_bytes(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 compressed_size_bytes = 4;
  void clear_compressed_size_bytes();
  ::PROTOBUF_NAMESPACE_ID::int64 compressed_size_bytes() const;
  void set_compressed_size_bytes(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_compressed_size_bytes() const;
  void _internal_set_compressed_size_bytes(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent.Type type = 1;
  void clear_type();
  ::google::devtools::cloudtrace::v2::Span_TimeEvent_MessageEvent_Type type() const;
  void set_type(::google::devtools::cloudtrace::v2::Span_TimeEvent_MessageEvent_Type value);
  private:
  ::google::devtools::cloudtrace::v2::Span_TimeEvent_MessageEvent_Type _internal_type() const;
  void _internal_set_type(::google::devtools::cloudtrace::v2::Span_TimeEvent_MessageEvent_Type value);
  public:

  // @@protoc_insertion_point(class_scope:google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int64 uncompressed_size_bytes_;
  ::PROTOBUF_NAMESPACE_ID::int64 compressed_size_bytes_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto;
};
// -------------------------------------------------------------------

class Span_TimeEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.devtools.cloudtrace.v2.Span.TimeEvent) */ {
 public:
  inline Span_TimeEvent() : Span_TimeEvent(nullptr) {}
  virtual ~Span_TimeEvent();
  explicit constexpr Span_TimeEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Span_TimeEvent(const Span_TimeEvent& from);
  Span_TimeEvent(Span_TimeEvent&& from) noexcept
    : Span_TimeEvent() {
    *this = ::std::move(from);
  }

  inline Span_TimeEvent& operator=(const Span_TimeEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Span_TimeEvent& operator=(Span_TimeEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Span_TimeEvent& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kAnnotation = 2,
    kMessageEvent = 3,
    VALUE_NOT_SET = 0,
  };

  static inline const Span_TimeEvent* internal_default_instance() {
    return reinterpret_cast<const Span_TimeEvent*>(
               &_Span_TimeEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Span_TimeEvent& a, Span_TimeEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Span_TimeEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Span_TimeEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Span_TimeEvent* New() const final {
    return CreateMaybeMessage<Span_TimeEvent>(nullptr);
  }

  Span_TimeEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Span_TimeEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Span_TimeEvent& from);
  void MergeFrom(const Span_TimeEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Span_TimeEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.devtools.cloudtrace.v2.Span.TimeEvent";
  }
  protected:
  explicit Span_TimeEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef Span_TimeEvent_Annotation Annotation;
  typedef Span_TimeEvent_MessageEvent MessageEvent;

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
    kAnnotationFieldNumber = 2,
    kMessageEventFieldNumber = 3,
  };
  // .google.protobuf.Timestamp time = 1;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_time();
  void set_allocated_time(PROTOBUF_NAMESPACE_ID::Timestamp* time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_time();
  public:
  void unsafe_arena_set_allocated_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_time();

  // .google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation annotation = 2;
  bool has_annotation() const;
  private:
  bool _internal_has_annotation() const;
  public:
  void clear_annotation();
  const ::google::devtools::cloudtrace::v2::Span_TimeEvent_Annotation& annotation() const;
  ::google::devtools::cloudtrace::v2::Span_TimeEvent_Annotation* release_annotation();
  ::google::devtools::cloudtrace::v2::Span_TimeEvent_Annotation* mutable_annotation();
  void set_allocated_annotation(::google::devtools::cloudtrace::v2::Span_TimeEvent_Annotation* annotation);
  private:
  const ::google::devtools::cloudtrace::v2::Span_TimeEvent_Annotation& _internal_annotation() const;
  ::google::devtools::cloudtrace::v2::Span_TimeEvent_Annotation* _internal_mutable_annotation();
  public:
  void unsafe_arena_set_allocated_annotation(
      ::google::devtools::cloudtrace::v2::Span_TimeEvent_Annotation* annotation);
  ::google::devtools::cloudtrace::v2::Span_TimeEvent_Annotation* unsafe_arena_release_annotation();

  // .google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent message_event = 3;
  bool has_message_event() const;
  private:
  bool _internal_has_message_event() const;
  public:
  void clear_message_event();
  const ::google::devtools::cloudtrace::v2::Span_TimeEvent_MessageEvent& message_event() const;
  ::google::devtools::cloudtrace::v2::Span_TimeEvent_MessageEvent* release_message_event();
  ::google::devtools::cloudtrace::v2::Span_TimeEvent_MessageEvent* mutable_message_event();
  void set_allocated_message_event(::google::devtools::cloudtrace::v2::Span_TimeEvent_MessageEvent* message_event);
  private:
  const ::google::devtools::cloudtrace::v2::Span_TimeEvent_MessageEvent& _internal_message_event() const;
  ::google::devtools::cloudtrace::v2::Span_TimeEvent_MessageEvent* _internal_mutable_message_event();
  public:
  void unsafe_arena_set_allocated_message_event(
      ::google::devtools::cloudtrace::v2::Span_TimeEvent_MessageEvent* message_event);
  ::google::devtools::cloudtrace::v2::Span_TimeEvent_MessageEvent* unsafe_arena_release_message_event();

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:google.devtools.cloudtrace.v2.Span.TimeEvent)
 private:
  class _Internal;
  void set_has_annotation();
  void set_has_message_event();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::Timestamp* time_;
  union ValueUnion {
    constexpr ValueUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::google::devtools::cloudtrace::v2::Span_TimeEvent_Annotation* annotation_;
    ::google::devtools::cloudtrace::v2::Span_TimeEvent_MessageEvent* message_event_;
  } value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto;
};
// -------------------------------------------------------------------

class Span_TimeEvents PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.devtools.cloudtrace.v2.Span.TimeEvents) */ {
 public:
  inline Span_TimeEvents() : Span_TimeEvents(nullptr) {}
  virtual ~Span_TimeEvents();
  explicit constexpr Span_TimeEvents(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Span_TimeEvents(const Span_TimeEvents& from);
  Span_TimeEvents(Span_TimeEvents&& from) noexcept
    : Span_TimeEvents() {
    *this = ::std::move(from);
  }

  inline Span_TimeEvents& operator=(const Span_TimeEvents& from) {
    CopyFrom(from);
    return *this;
  }
  inline Span_TimeEvents& operator=(Span_TimeEvents&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Span_TimeEvents& default_instance() {
    return *internal_default_instance();
  }
  static inline const Span_TimeEvents* internal_default_instance() {
    return reinterpret_cast<const Span_TimeEvents*>(
               &_Span_TimeEvents_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Span_TimeEvents& a, Span_TimeEvents& b) {
    a.Swap(&b);
  }
  inline void Swap(Span_TimeEvents* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Span_TimeEvents* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Span_TimeEvents* New() const final {
    return CreateMaybeMessage<Span_TimeEvents>(nullptr);
  }

  Span_TimeEvents* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Span_TimeEvents>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Span_TimeEvents& from);
  void MergeFrom(const Span_TimeEvents& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Span_TimeEvents* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.devtools.cloudtrace.v2.Span.TimeEvents";
  }
  protected:
  explicit Span_TimeEvents(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeEventFieldNumber = 1,
    kDroppedAnnotationsCountFieldNumber = 2,
    kDroppedMessageEventsCountFieldNumber = 3,
  };
  // repeated .google.devtools.cloudtrace.v2.Span.TimeEvent time_event = 1;
  int time_event_size() const;
  private:
  int _internal_time_event_size() const;
  public:
  void clear_time_event();
  ::google::devtools::cloudtrace::v2::Span_TimeEvent* mutable_time_event(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::devtools::cloudtrace::v2::Span_TimeEvent >*
      mutable_time_event();
  private:
  const ::google::devtools::cloudtrace::v2::Span_TimeEvent& _internal_time_event(int index) const;
  ::google::devtools::cloudtrace::v2::Span_TimeEvent* _internal_add_time_event();
  public:
  const ::google::devtools::cloudtrace::v2::Span_TimeEvent& time_event(int index) const;
  ::google::devtools::cloudtrace::v2::Span_TimeEvent* add_time_event();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::devtools::cloudtrace::v2::Span_TimeEvent >&
      time_event() const;

  // int32 dropped_annotations_count = 2;
  void clear_dropped_annotations_count();
  ::PROTOBUF_NAMESPACE_ID::int32 dropped_annotations_count() const;
  void set_dropped_annotations_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dropped_annotations_count() const;
  void _internal_set_dropped_annotations_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 dropped_message_events_count = 3;
  void clear_dropped_message_events_count();
  ::PROTOBUF_NAMESPACE_ID::int32 dropped_message_events_count() const;
  void set_dropped_message_events_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dropped_message_events_count() const;
  void _internal_set_dropped_message_events_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:google.devtools.cloudtrace.v2.Span.TimeEvents)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::devtools::cloudtrace::v2::Span_TimeEvent > time_event_;
  ::PROTOBUF_NAMESPACE_ID::int32 dropped_annotations_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 dropped_message_events_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto;
};
// -------------------------------------------------------------------

class Span_Link PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.devtools.cloudtrace.v2.Span.Link) */ {
 public:
  inline Span_Link() : Span_Link(nullptr) {}
  virtual ~Span_Link();
  explicit constexpr Span_Link(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Span_Link(const Span_Link& from);
  Span_Link(Span_Link&& from) noexcept
    : Span_Link() {
    *this = ::std::move(from);
  }

  inline Span_Link& operator=(const Span_Link& from) {
    CopyFrom(from);
    return *this;
  }
  inline Span_Link& operator=(Span_Link&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Span_Link& default_instance() {
    return *internal_default_instance();
  }
  static inline const Span_Link* internal_default_instance() {
    return reinterpret_cast<const Span_Link*>(
               &_Span_Link_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Span_Link& a, Span_Link& b) {
    a.Swap(&b);
  }
  inline void Swap(Span_Link* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Span_Link* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Span_Link* New() const final {
    return CreateMaybeMessage<Span_Link>(nullptr);
  }

  Span_Link* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Span_Link>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Span_Link& from);
  void MergeFrom(const Span_Link& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Span_Link* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.devtools.cloudtrace.v2.Span.Link";
  }
  protected:
  explicit Span_Link(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef Span_Link_Type Type;
  static constexpr Type TYPE_UNSPECIFIED =
    Span_Link_Type_TYPE_UNSPECIFIED;
  static constexpr Type CHILD_LINKED_SPAN =
    Span_Link_Type_CHILD_LINKED_SPAN;
  static constexpr Type PARENT_LINKED_SPAN =
    Span_Link_Type_PARENT_LINKED_SPAN;
  static inline bool Type_IsValid(int value) {
    return Span_Link_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Span_Link_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Span_Link_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Span_Link_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Span_Link_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Span_Link_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return Span_Link_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTraceIdFieldNumber = 1,
    kSpanIdFieldNumber = 2,
    kAttributesFieldNumber = 4,
    kTypeFieldNumber = 3,
  };
  // string trace_id = 1;
  void clear_trace_id();
  const std::string& trace_id() const;
  void set_trace_id(const std::string& value);
  void set_trace_id(std::string&& value);
  void set_trace_id(const char* value);
  void set_trace_id(const char* value, size_t size);
  std::string* mutable_trace_id();
  std::string* release_trace_id();
  void set_allocated_trace_id(std::string* trace_id);
  private:
  const std::string& _internal_trace_id() const;
  void _internal_set_trace_id(const std::string& value);
  std::string* _internal_mutable_trace_id();
  public:

  // string span_id = 2;
  void clear_span_id();
  const std::string& span_id() const;
  void set_span_id(const std::string& value);
  void set_span_id(std::string&& value);
  void set_span_id(const char* value);
  void set_span_id(const char* value, size_t size);
  std::string* mutable_span_id();
  std::string* release_span_id();
  void set_allocated_span_id(std::string* span_id);
  private:
  const std::string& _internal_span_id() const;
  void _internal_set_span_id(const std::string& value);
  std::string* _internal_mutable_span_id();
  public:

  // .google.devtools.cloudtrace.v2.Span.Attributes attributes = 4;
  bool has_attributes() const;
  private:
  bool _internal_has_attributes() const;
  public:
  void clear_attributes();
  const ::google::devtools::cloudtrace::v2::Span_Attributes& attributes() const;
  ::google::devtools::cloudtrace::v2::Span_Attributes* release_attributes();
  ::google::devtools::cloudtrace::v2::Span_Attributes* mutable_attributes();
  void set_allocated_attributes(::google::devtools::cloudtrace::v2::Span_Attributes* attributes);
  private:
  const ::google::devtools::cloudtrace::v2::Span_Attributes& _internal_attributes() const;
  ::google::devtools::cloudtrace::v2::Span_Attributes* _internal_mutable_attributes();
  public:
  void unsafe_arena_set_allocated_attributes(
      ::google::devtools::cloudtrace::v2::Span_Attributes* attributes);
  ::google::devtools::cloudtrace::v2::Span_Attributes* unsafe_arena_release_attributes();

  // .google.devtools.cloudtrace.v2.Span.Link.Type type = 3;
  void clear_type();
  ::google::devtools::cloudtrace::v2::Span_Link_Type type() const;
  void set_type(::google::devtools::cloudtrace::v2::Span_Link_Type value);
  private:
  ::google::devtools::cloudtrace::v2::Span_Link_Type _internal_type() const;
  void _internal_set_type(::google::devtools::cloudtrace::v2::Span_Link_Type value);
  public:

  // @@protoc_insertion_point(class_scope:google.devtools.cloudtrace.v2.Span.Link)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trace_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr span_id_;
  ::google::devtools::cloudtrace::v2::Span_Attributes* attributes_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto;
};
// -------------------------------------------------------------------

class Span_Links PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.devtools.cloudtrace.v2.Span.Links) */ {
 public:
  inline Span_Links() : Span_Links(nullptr) {}
  virtual ~Span_Links();
  explicit constexpr Span_Links(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Span_Links(const Span_Links& from);
  Span_Links(Span_Links&& from) noexcept
    : Span_Links() {
    *this = ::std::move(from);
  }

  inline Span_Links& operator=(const Span_Links& from) {
    CopyFrom(from);
    return *this;
  }
  inline Span_Links& operator=(Span_Links&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Span_Links& default_instance() {
    return *internal_default_instance();
  }
  static inline const Span_Links* internal_default_instance() {
    return reinterpret_cast<const Span_Links*>(
               &_Span_Links_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Span_Links& a, Span_Links& b) {
    a.Swap(&b);
  }
  inline void Swap(Span_Links* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Span_Links* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Span_Links* New() const final {
    return CreateMaybeMessage<Span_Links>(nullptr);
  }

  Span_Links* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Span_Links>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Span_Links& from);
  void MergeFrom(const Span_Links& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Span_Links* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.devtools.cloudtrace.v2.Span.Links";
  }
  protected:
  explicit Span_Links(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLinkFieldNumber = 1,
    kDroppedLinksCountFieldNumber = 2,
  };
  // repeated .google.devtools.cloudtrace.v2.Span.Link link = 1;
  int link_size() const;
  private:
  int _internal_link_size() const;
  public:
  void clear_link();
  ::google::devtools::cloudtrace::v2::Span_Link* mutable_link(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::devtools::cloudtrace::v2::Span_Link >*
      mutable_link();
  private:
  const ::google::devtools::cloudtrace::v2::Span_Link& _internal_link(int index) const;
  ::google::devtools::cloudtrace::v2::Span_Link* _internal_add_link();
  public:
  const ::google::devtools::cloudtrace::v2::Span_Link& link(int index) const;
  ::google::devtools::cloudtrace::v2::Span_Link* add_link();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::devtools::cloudtrace::v2::Span_Link >&
      link() const;

  // int32 dropped_links_count = 2;
  void clear_dropped_links_count();
  ::PROTOBUF_NAMESPACE_ID::int32 dropped_links_count() const;
  void set_dropped_links_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dropped_links_count() const;
  void _internal_set_dropped_links_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:google.devtools.cloudtrace.v2.Span.Links)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::devtools::cloudtrace::v2::Span_Link > link_;
  ::PROTOBUF_NAMESPACE_ID::int32 dropped_links_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto;
};
// -------------------------------------------------------------------

class Span PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.devtools.cloudtrace.v2.Span) */ {
 public:
  inline Span() : Span(nullptr) {}
  virtual ~Span();
  explicit constexpr Span(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Span(const Span& from);
  Span(Span&& from) noexcept
    : Span() {
    *this = ::std::move(from);
  }

  inline Span& operator=(const Span& from) {
    CopyFrom(from);
    return *this;
  }
  inline Span& operator=(Span&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Span& default_instance() {
    return *internal_default_instance();
  }
  static inline const Span* internal_default_instance() {
    return reinterpret_cast<const Span*>(
               &_Span_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Span& a, Span& b) {
    a.Swap(&b);
  }
  inline void Swap(Span* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Span* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Span* New() const final {
    return CreateMaybeMessage<Span>(nullptr);
  }

  Span* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Span>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Span& from);
  void MergeFrom(const Span& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Span* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.devtools.cloudtrace.v2.Span";
  }
  protected:
  explicit Span(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef Span_Attributes Attributes;
  typedef Span_TimeEvent TimeEvent;
  typedef Span_TimeEvents TimeEvents;
  typedef Span_Link Link;
  typedef Span_Links Links;

  typedef Span_SpanKind SpanKind;
  static constexpr SpanKind SPAN_KIND_UNSPECIFIED =
    Span_SpanKind_SPAN_KIND_UNSPECIFIED;
  static constexpr SpanKind INTERNAL =
    Span_SpanKind_INTERNAL;
  static constexpr SpanKind SERVER =
    Span_SpanKind_SERVER;
  static constexpr SpanKind CLIENT =
    Span_SpanKind_CLIENT;
  static constexpr SpanKind PRODUCER =
    Span_SpanKind_PRODUCER;
  static constexpr SpanKind CONSUMER =
    Span_SpanKind_CONSUMER;
  static inline bool SpanKind_IsValid(int value) {
    return Span_SpanKind_IsValid(value);
  }
  static constexpr SpanKind SpanKind_MIN =
    Span_SpanKind_SpanKind_MIN;
  static constexpr SpanKind SpanKind_MAX =
    Span_SpanKind_SpanKind_MAX;
  static constexpr int SpanKind_ARRAYSIZE =
    Span_SpanKind_SpanKind_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SpanKind_descriptor() {
    return Span_SpanKind_descriptor();
  }
  template<typename T>
  static inline const std::string& SpanKind_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SpanKind>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SpanKind_Name.");
    return Span_SpanKind_Name(enum_t_value);
  }
  static inline bool SpanKind_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SpanKind* value) {
    return Span_SpanKind_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kSpanIdFieldNumber = 2,
    kParentSpanIdFieldNumber = 3,
    kDisplayNameFieldNumber = 4,
    kStartTimeFieldNumber = 5,
    kEndTimeFieldNumber = 6,
    kAttributesFieldNumber = 7,
    kStackTraceFieldNumber = 8,
    kTimeEventsFieldNumber = 9,
    kLinksFieldNumber = 10,
    kStatusFieldNumber = 11,
    kSameProcessAsParentSpanFieldNumber = 12,
    kChildSpanCountFieldNumber = 13,
    kSpanKindFieldNumber = 14,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string span_id = 2 [(.google.api.field_behavior) = REQUIRED];
  void clear_span_id();
  const std::string& span_id() const;
  void set_span_id(const std::string& value);
  void set_span_id(std::string&& value);
  void set_span_id(const char* value);
  void set_span_id(const char* value, size_t size);
  std::string* mutable_span_id();
  std::string* release_span_id();
  void set_allocated_span_id(std::string* span_id);
  private:
  const std::string& _internal_span_id() const;
  void _internal_set_span_id(const std::string& value);
  std::string* _internal_mutable_span_id();
  public:

  // string parent_span_id = 3;
  void clear_parent_span_id();
  const std::string& parent_span_id() const;
  void set_parent_span_id(const std::string& value);
  void set_parent_span_id(std::string&& value);
  void set_parent_span_id(const char* value);
  void set_parent_span_id(const char* value, size_t size);
  std::string* mutable_parent_span_id();
  std::string* release_parent_span_id();
  void set_allocated_parent_span_id(std::string* parent_span_id);
  private:
  const std::string& _internal_parent_span_id() const;
  void _internal_set_parent_span_id(const std::string& value);
  std::string* _internal_mutable_parent_span_id();
  public:

  // .google.devtools.cloudtrace.v2.TruncatableString display_name = 4 [(.google.api.field_behavior) = REQUIRED];
  bool has_display_name() const;
  private:
  bool _internal_has_display_name() const;
  public:
  void clear_display_name();
  const ::google::devtools::cloudtrace::v2::TruncatableString& display_name() const;
  ::google::devtools::cloudtrace::v2::TruncatableString* release_display_name();
  ::google::devtools::cloudtrace::v2::TruncatableString* mutable_display_name();
  void set_allocated_display_name(::google::devtools::cloudtrace::v2::TruncatableString* display_name);
  private:
  const ::google::devtools::cloudtrace::v2::TruncatableString& _internal_display_name() const;
  ::google::devtools::cloudtrace::v2::TruncatableString* _internal_mutable_display_name();
  public:
  void unsafe_arena_set_allocated_display_name(
      ::google::devtools::cloudtrace::v2::TruncatableString* display_name);
  ::google::devtools::cloudtrace::v2::TruncatableString* unsafe_arena_release_display_name();

  // .google.protobuf.Timestamp start_time = 5 [(.google.api.field_behavior) = REQUIRED];
  bool has_start_time() const;
  private:
  bool _internal_has_start_time() const;
  public:
  void clear_start_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& start_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_start_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_start_time();
  void set_allocated_start_time(PROTOBUF_NAMESPACE_ID::Timestamp* start_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_start_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_start_time();
  public:
  void unsafe_arena_set_allocated_start_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* start_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_start_time();

  // .google.protobuf.Timestamp end_time = 6 [(.google.api.field_behavior) = REQUIRED];
  bool has_end_time() const;
  private:
  bool _internal_has_end_time() const;
  public:
  void clear_end_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& end_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_end_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_end_time();
  void set_allocated_end_time(PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_end_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_end_time();
  public:
  void unsafe_arena_set_allocated_end_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_end_time();

  // .google.devtools.cloudtrace.v2.Span.Attributes attributes = 7;
  bool has_attributes() const;
  private:
  bool _internal_has_attributes() const;
  public:
  void clear_attributes();
  const ::google::devtools::cloudtrace::v2::Span_Attributes& attributes() const;
  ::google::devtools::cloudtrace::v2::Span_Attributes* release_attributes();
  ::google::devtools::cloudtrace::v2::Span_Attributes* mutable_attributes();
  void set_allocated_attributes(::google::devtools::cloudtrace::v2::Span_Attributes* attributes);
  private:
  const ::google::devtools::cloudtrace::v2::Span_Attributes& _internal_attributes() const;
  ::google::devtools::cloudtrace::v2::Span_Attributes* _internal_mutable_attributes();
  public:
  void unsafe_arena_set_allocated_attributes(
      ::google::devtools::cloudtrace::v2::Span_Attributes* attributes);
  ::google::devtools::cloudtrace::v2::Span_Attributes* unsafe_arena_release_attributes();

  // .google.devtools.cloudtrace.v2.StackTrace stack_trace = 8;
  bool has_stack_trace() const;
  private:
  bool _internal_has_stack_trace() const;
  public:
  void clear_stack_trace();
  const ::google::devtools::cloudtrace::v2::StackTrace& stack_trace() const;
  ::google::devtools::cloudtrace::v2::StackTrace* release_stack_trace();
  ::google::devtools::cloudtrace::v2::StackTrace* mutable_stack_trace();
  void set_allocated_stack_trace(::google::devtools::cloudtrace::v2::StackTrace* stack_trace);
  private:
  const ::google::devtools::cloudtrace::v2::StackTrace& _internal_stack_trace() const;
  ::google::devtools::cloudtrace::v2::StackTrace* _internal_mutable_stack_trace();
  public:
  void unsafe_arena_set_allocated_stack_trace(
      ::google::devtools::cloudtrace::v2::StackTrace* stack_trace);
  ::google::devtools::cloudtrace::v2::StackTrace* unsafe_arena_release_stack_trace();

  // .google.devtools.cloudtrace.v2.Span.TimeEvents time_events = 9;
  bool has_time_events() const;
  private:
  bool _internal_has_time_events() const;
  public:
  void clear_time_events();
  const ::google::devtools::cloudtrace::v2::Span_TimeEvents& time_events() const;
  ::google::devtools::cloudtrace::v2::Span_TimeEvents* release_time_events();
  ::google::devtools::cloudtrace::v2::Span_TimeEvents* mutable_time_events();
  void set_allocated_time_events(::google::devtools::cloudtrace::v2::Span_TimeEvents* time_events);
  private:
  const ::google::devtools::cloudtrace::v2::Span_TimeEvents& _internal_time_events() const;
  ::google::devtools::cloudtrace::v2::Span_TimeEvents* _internal_mutable_time_events();
  public:
  void unsafe_arena_set_allocated_time_events(
      ::google::devtools::cloudtrace::v2::Span_TimeEvents* time_events);
  ::google::devtools::cloudtrace::v2::Span_TimeEvents* unsafe_arena_release_time_events();

  // .google.devtools.cloudtrace.v2.Span.Links links = 10;
  bool has_links() const;
  private:
  bool _internal_has_links() const;
  public:
  void clear_links();
  const ::google::devtools::cloudtrace::v2::Span_Links& links() const;
  ::google::devtools::cloudtrace::v2::Span_Links* release_links();
  ::google::devtools::cloudtrace::v2::Span_Links* mutable_links();
  void set_allocated_links(::google::devtools::cloudtrace::v2::Span_Links* links);
  private:
  const ::google::devtools::cloudtrace::v2::Span_Links& _internal_links() const;
  ::google::devtools::cloudtrace::v2::Span_Links* _internal_mutable_links();
  public:
  void unsafe_arena_set_allocated_links(
      ::google::devtools::cloudtrace::v2::Span_Links* links);
  ::google::devtools::cloudtrace::v2::Span_Links* unsafe_arena_release_links();

  // .google.rpc.Status status = 11 [(.google.api.field_behavior) = OPTIONAL];
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::google::rpc::Status& status() const;
  ::google::rpc::Status* release_status();
  ::google::rpc::Status* mutable_status();
  void set_allocated_status(::google::rpc::Status* status);
  private:
  const ::google::rpc::Status& _internal_status() const;
  ::google::rpc::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::google::rpc::Status* status);
  ::google::rpc::Status* unsafe_arena_release_status();

  // .google.protobuf.BoolValue same_process_as_parent_span = 12 [(.google.api.field_behavior) = OPTIONAL];
  bool has_same_process_as_parent_span() const;
  private:
  bool _internal_has_same_process_as_parent_span() const;
  public:
  void clear_same_process_as_parent_span();
  const PROTOBUF_NAMESPACE_ID::BoolValue& same_process_as_parent_span() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* release_same_process_as_parent_span();
  PROTOBUF_NAMESPACE_ID::BoolValue* mutable_same_process_as_parent_span();
  void set_allocated_same_process_as_parent_span(PROTOBUF_NAMESPACE_ID::BoolValue* same_process_as_parent_span);
  private:
  const PROTOBUF_NAMESPACE_ID::BoolValue& _internal_same_process_as_parent_span() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_same_process_as_parent_span();
  public:
  void unsafe_arena_set_allocated_same_process_as_parent_span(
      PROTOBUF_NAMESPACE_ID::BoolValue* same_process_as_parent_span);
  PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_same_process_as_parent_span();

  // .google.protobuf.Int32Value child_span_count = 13 [(.google.api.field_behavior) = OPTIONAL];
  bool has_child_span_count() const;
  private:
  bool _internal_has_child_span_count() const;
  public:
  void clear_child_span_count();
  const PROTOBUF_NAMESPACE_ID::Int32Value& child_span_count() const;
  PROTOBUF_NAMESPACE_ID::Int32Value* release_child_span_count();
  PROTOBUF_NAMESPACE_ID::Int32Value* mutable_child_span_count();
  void set_allocated_child_span_count(PROTOBUF_NAMESPACE_ID::Int32Value* child_span_count);
  private:
  const PROTOBUF_NAMESPACE_ID::Int32Value& _internal_child_span_count() const;
  PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_child_span_count();
  public:
  void unsafe_arena_set_allocated_child_span_count(
      PROTOBUF_NAMESPACE_ID::Int32Value* child_span_count);
  PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_child_span_count();

  // .google.devtools.cloudtrace.v2.Span.SpanKind span_kind = 14 [(.google.api.field_behavior) = OPTIONAL];
  void clear_span_kind();
  ::google::devtools::cloudtrace::v2::Span_SpanKind span_kind() const;
  void set_span_kind(::google::devtools::cloudtrace::v2::Span_SpanKind value);
  private:
  ::google::devtools::cloudtrace::v2::Span_SpanKind _internal_span_kind() const;
  void _internal_set_span_kind(::google::devtools::cloudtrace::v2::Span_SpanKind value);
  public:

  // @@protoc_insertion_point(class_scope:google.devtools.cloudtrace.v2.Span)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr span_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_span_id_;
  ::google::devtools::cloudtrace::v2::TruncatableString* display_name_;
  PROTOBUF_NAMESPACE_ID::Timestamp* start_time_;
  PROTOBUF_NAMESPACE_ID::Timestamp* end_time_;
  ::google::devtools::cloudtrace::v2::Span_Attributes* attributes_;
  ::google::devtools::cloudtrace::v2::StackTrace* stack_trace_;
  ::google::devtools::cloudtrace::v2::Span_TimeEvents* time_events_;
  ::google::devtools::cloudtrace::v2::Span_Links* links_;
  ::google::rpc::Status* status_;
  PROTOBUF_NAMESPACE_ID::BoolValue* same_process_as_parent_span_;
  PROTOBUF_NAMESPACE_ID::Int32Value* child_span_count_;
  int span_kind_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto;
};
// -------------------------------------------------------------------

class AttributeValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.devtools.cloudtrace.v2.AttributeValue) */ {
 public:
  inline AttributeValue() : AttributeValue(nullptr) {}
  virtual ~AttributeValue();
  explicit constexpr AttributeValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AttributeValue(const AttributeValue& from);
  AttributeValue(AttributeValue&& from) noexcept
    : AttributeValue() {
    *this = ::std::move(from);
  }

  inline AttributeValue& operator=(const AttributeValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttributeValue& operator=(AttributeValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AttributeValue& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kStringValue = 1,
    kIntValue = 2,
    kBoolValue = 3,
    VALUE_NOT_SET = 0,
  };

  static inline const AttributeValue* internal_default_instance() {
    return reinterpret_cast<const AttributeValue*>(
               &_AttributeValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(AttributeValue& a, AttributeValue& b) {
    a.Swap(&b);
  }
  inline void Swap(AttributeValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttributeValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AttributeValue* New() const final {
    return CreateMaybeMessage<AttributeValue>(nullptr);
  }

  AttributeValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AttributeValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AttributeValue& from);
  void MergeFrom(const AttributeValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttributeValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.devtools.cloudtrace.v2.AttributeValue";
  }
  protected:
  explicit AttributeValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStringValueFieldNumber = 1,
    kIntValueFieldNumber = 2,
    kBoolValueFieldNumber = 3,
  };
  // .google.devtools.cloudtrace.v2.TruncatableString string_value = 1;
  bool has_string_value() const;
  private:
  bool _internal_has_string_value() const;
  public:
  void clear_string_value();
  const ::google::devtools::cloudtrace::v2::TruncatableString& string_value() const;
  ::google::devtools::cloudtrace::v2::TruncatableString* release_string_value();
  ::google::devtools::cloudtrace::v2::TruncatableString* mutable_string_value();
  void set_allocated_string_value(::google::devtools::cloudtrace::v2::TruncatableString* string_value);
  private:
  const ::google::devtools::cloudtrace::v2::TruncatableString& _internal_string_value() const;
  ::google::devtools::cloudtrace::v2::TruncatableString* _internal_mutable_string_value();
  public:
  void unsafe_arena_set_allocated_string_value(
      ::google::devtools::cloudtrace::v2::TruncatableString* string_value);
  ::google::devtools::cloudtrace::v2::TruncatableString* unsafe_arena_release_string_value();

  // int64 int_value = 2;
  bool has_int_value() const;
  private:
  bool _internal_has_int_value() const;
  public:
  void clear_int_value();
  ::PROTOBUF_NAMESPACE_ID::int64 int_value() const;
  void set_int_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_int_value() const;
  void _internal_set_int_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool bool_value = 3;
  bool has_bool_value() const;
  private:
  bool _internal_has_bool_value() const;
  public:
  void clear_bool_value();
  bool bool_value() const;
  void set_bool_value(bool value);
  private:
  bool _internal_bool_value() const;
  void _internal_set_bool_value(bool value);
  public:

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:google.devtools.cloudtrace.v2.AttributeValue)
 private:
  class _Internal;
  void set_has_string_value();
  void set_has_int_value();
  void set_has_bool_value();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ValueUnion {
    constexpr ValueUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::google::devtools::cloudtrace::v2::TruncatableString* string_value_;
    ::PROTOBUF_NAMESPACE_ID::int64 int_value_;
    bool bool_value_;
  } value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto;
};
// -------------------------------------------------------------------

class StackTrace_StackFrame PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.devtools.cloudtrace.v2.StackTrace.StackFrame) */ {
 public:
  inline StackTrace_StackFrame() : StackTrace_StackFrame(nullptr) {}
  virtual ~StackTrace_StackFrame();
  explicit constexpr StackTrace_StackFrame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StackTrace_StackFrame(const StackTrace_StackFrame& from);
  StackTrace_StackFrame(StackTrace_StackFrame&& from) noexcept
    : StackTrace_StackFrame() {
    *this = ::std::move(from);
  }

  inline StackTrace_StackFrame& operator=(const StackTrace_StackFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline StackTrace_StackFrame& operator=(StackTrace_StackFrame&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StackTrace_StackFrame& default_instance() {
    return *internal_default_instance();
  }
  static inline const StackTrace_StackFrame* internal_default_instance() {
    return reinterpret_cast<const StackTrace_StackFrame*>(
               &_StackTrace_StackFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(StackTrace_StackFrame& a, StackTrace_StackFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(StackTrace_StackFrame* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StackTrace_StackFrame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StackTrace_StackFrame* New() const final {
    return CreateMaybeMessage<StackTrace_StackFrame>(nullptr);
  }

  StackTrace_StackFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StackTrace_StackFrame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StackTrace_StackFrame& from);
  void MergeFrom(const StackTrace_StackFrame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StackTrace_StackFrame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.devtools.cloudtrace.v2.StackTrace.StackFrame";
  }
  protected:
  explicit StackTrace_StackFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFunctionNameFieldNumber = 1,
    kOriginalFunctionNameFieldNumber = 2,
    kFileNameFieldNumber = 3,
    kLoadModuleFieldNumber = 6,
    kSourceVersionFieldNumber = 7,
    kLineNumberFieldNumber = 4,
    kColumnNumberFieldNumber = 5,
  };
  // .google.devtools.cloudtrace.v2.TruncatableString function_name = 1;
  bool has_function_name() const;
  private:
  bool _internal_has_function_name() const;
  public:
  void clear_function_name();
  const ::google::devtools::cloudtrace::v2::TruncatableString& function_name() const;
  ::google::devtools::cloudtrace::v2::TruncatableString* release_function_name();
  ::google::devtools::cloudtrace::v2::TruncatableString* mutable_function_name();
  void set_allocated_function_name(::google::devtools::cloudtrace::v2::TruncatableString* function_name);
  private:
  const ::google::devtools::cloudtrace::v2::TruncatableString& _internal_function_name() const;
  ::google::devtools::cloudtrace::v2::TruncatableString* _internal_mutable_function_name();
  public:
  void unsafe_arena_set_allocated_function_name(
      ::google::devtools::cloudtrace::v2::TruncatableString* function_name);
  ::google::devtools::cloudtrace::v2::TruncatableString* unsafe_arena_release_function_name();

  // .google.devtools.cloudtrace.v2.TruncatableString original_function_name = 2;
  bool has_original_function_name() const;
  private:
  bool _internal_has_original_function_name() const;
  public:
  void clear_original_function_name();
  const ::google::devtools::cloudtrace::v2::TruncatableString& original_function_name() const;
  ::google::devtools::cloudtrace::v2::TruncatableString* release_original_function_name();
  ::google::devtools::cloudtrace::v2::TruncatableString* mutable_original_function_name();
  void set_allocated_original_function_name(::google::devtools::cloudtrace::v2::TruncatableString* original_function_name);
  private:
  const ::google::devtools::cloudtrace::v2::TruncatableString& _internal_original_function_name() const;
  ::google::devtools::cloudtrace::v2::TruncatableString* _internal_mutable_original_function_name();
  public:
  void unsafe_arena_set_allocated_original_function_name(
      ::google::devtools::cloudtrace::v2::TruncatableString* original_function_name);
  ::google::devtools::cloudtrace::v2::TruncatableString* unsafe_arena_release_original_function_name();

  // .google.devtools.cloudtrace.v2.TruncatableString file_name = 3;
  bool has_file_name() const;
  private:
  bool _internal_has_file_name() const;
  public:
  void clear_file_name();
  const ::google::devtools::cloudtrace::v2::TruncatableString& file_name() const;
  ::google::devtools::cloudtrace::v2::TruncatableString* release_file_name();
  ::google::devtools::cloudtrace::v2::TruncatableString* mutable_file_name();
  void set_allocated_file_name(::google::devtools::cloudtrace::v2::TruncatableString* file_name);
  private:
  const ::google::devtools::cloudtrace::v2::TruncatableString& _internal_file_name() const;
  ::google::devtools::cloudtrace::v2::TruncatableString* _internal_mutable_file_name();
  public:
  void unsafe_arena_set_allocated_file_name(
      ::google::devtools::cloudtrace::v2::TruncatableString* file_name);
  ::google::devtools::cloudtrace::v2::TruncatableString* unsafe_arena_release_file_name();

  // .google.devtools.cloudtrace.v2.Module load_module = 6;
  bool has_load_module() const;
  private:
  bool _internal_has_load_module() const;
  public:
  void clear_load_module();
  const ::google::devtools::cloudtrace::v2::Module& load_module() const;
  ::google::devtools::cloudtrace::v2::Module* release_load_module();
  ::google::devtools::cloudtrace::v2::Module* mutable_load_module();
  void set_allocated_load_module(::google::devtools::cloudtrace::v2::Module* load_module);
  private:
  const ::google::devtools::cloudtrace::v2::Module& _internal_load_module() const;
  ::google::devtools::cloudtrace::v2::Module* _internal_mutable_load_module();
  public:
  void unsafe_arena_set_allocated_load_module(
      ::google::devtools::cloudtrace::v2::Module* load_module);
  ::google::devtools::cloudtrace::v2::Module* unsafe_arena_release_load_module();

  // .google.devtools.cloudtrace.v2.TruncatableString source_version = 7;
  bool has_source_version() const;
  private:
  bool _internal_has_source_version() const;
  public:
  void clear_source_version();
  const ::google::devtools::cloudtrace::v2::TruncatableString& source_version() const;
  ::google::devtools::cloudtrace::v2::TruncatableString* release_source_version();
  ::google::devtools::cloudtrace::v2::TruncatableString* mutable_source_version();
  void set_allocated_source_version(::google::devtools::cloudtrace::v2::TruncatableString* source_version);
  private:
  const ::google::devtools::cloudtrace::v2::TruncatableString& _internal_source_version() const;
  ::google::devtools::cloudtrace::v2::TruncatableString* _internal_mutable_source_version();
  public:
  void unsafe_arena_set_allocated_source_version(
      ::google::devtools::cloudtrace::v2::TruncatableString* source_version);
  ::google::devtools::cloudtrace::v2::TruncatableString* unsafe_arena_release_source_version();

  // int64 line_number = 4;
  void clear_line_number();
  ::PROTOBUF_NAMESPACE_ID::int64 line_number() const;
  void set_line_number(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_line_number() const;
  void _internal_set_line_number(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 column_number = 5;
  void clear_column_number();
  ::PROTOBUF_NAMESPACE_ID::int64 column_number() const;
  void set_column_number(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_column_number() const;
  void _internal_set_column_number(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:google.devtools.cloudtrace.v2.StackTrace.StackFrame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::devtools::cloudtrace::v2::TruncatableString* function_name_;
  ::google::devtools::cloudtrace::v2::TruncatableString* original_function_name_;
  ::google::devtools::cloudtrace::v2::TruncatableString* file_name_;
  ::google::devtools::cloudtrace::v2::Module* load_module_;
  ::google::devtools::cloudtrace::v2::TruncatableString* source_version_;
  ::PROTOBUF_NAMESPACE_ID::int64 line_number_;
  ::PROTOBUF_NAMESPACE_ID::int64 column_number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto;
};
// -------------------------------------------------------------------

class StackTrace_StackFrames PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.devtools.cloudtrace.v2.StackTrace.StackFrames) */ {
 public:
  inline StackTrace_StackFrames() : StackTrace_StackFrames(nullptr) {}
  virtual ~StackTrace_StackFrames();
  explicit constexpr StackTrace_StackFrames(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StackTrace_StackFrames(const StackTrace_StackFrames& from);
  StackTrace_StackFrames(StackTrace_StackFrames&& from) noexcept
    : StackTrace_StackFrames() {
    *this = ::std::move(from);
  }

  inline StackTrace_StackFrames& operator=(const StackTrace_StackFrames& from) {
    CopyFrom(from);
    return *this;
  }
  inline StackTrace_StackFrames& operator=(StackTrace_StackFrames&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StackTrace_StackFrames& default_instance() {
    return *internal_default_instance();
  }
  static inline const StackTrace_StackFrames* internal_default_instance() {
    return reinterpret_cast<const StackTrace_StackFrames*>(
               &_StackTrace_StackFrames_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(StackTrace_StackFrames& a, StackTrace_StackFrames& b) {
    a.Swap(&b);
  }
  inline void Swap(StackTrace_StackFrames* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StackTrace_StackFrames* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StackTrace_StackFrames* New() const final {
    return CreateMaybeMessage<StackTrace_StackFrames>(nullptr);
  }

  StackTrace_StackFrames* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StackTrace_StackFrames>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StackTrace_StackFrames& from);
  void MergeFrom(const StackTrace_StackFrames& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StackTrace_StackFrames* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.devtools.cloudtrace.v2.StackTrace.StackFrames";
  }
  protected:
  explicit StackTrace_StackFrames(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrameFieldNumber = 1,
    kDroppedFramesCountFieldNumber = 2,
  };
  // repeated .google.devtools.cloudtrace.v2.StackTrace.StackFrame frame = 1;
  int frame_size() const;
  private:
  int _internal_frame_size() const;
  public:
  void clear_frame();
  ::google::devtools::cloudtrace::v2::StackTrace_StackFrame* mutable_frame(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::devtools::cloudtrace::v2::StackTrace_StackFrame >*
      mutable_frame();
  private:
  const ::google::devtools::cloudtrace::v2::StackTrace_StackFrame& _internal_frame(int index) const;
  ::google::devtools::cloudtrace::v2::StackTrace_StackFrame* _internal_add_frame();
  public:
  const ::google::devtools::cloudtrace::v2::StackTrace_StackFrame& frame(int index) const;
  ::google::devtools::cloudtrace::v2::StackTrace_StackFrame* add_frame();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::devtools::cloudtrace::v2::StackTrace_StackFrame >&
      frame() const;

  // int32 dropped_frames_count = 2;
  void clear_dropped_frames_count();
  ::PROTOBUF_NAMESPACE_ID::int32 dropped_frames_count() const;
  void set_dropped_frames_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dropped_frames_count() const;
  void _internal_set_dropped_frames_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:google.devtools.cloudtrace.v2.StackTrace.StackFrames)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::devtools::cloudtrace::v2::StackTrace_StackFrame > frame_;
  ::PROTOBUF_NAMESPACE_ID::int32 dropped_frames_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto;
};
// -------------------------------------------------------------------

class StackTrace PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.devtools.cloudtrace.v2.StackTrace) */ {
 public:
  inline StackTrace() : StackTrace(nullptr) {}
  virtual ~StackTrace();
  explicit constexpr StackTrace(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StackTrace(const StackTrace& from);
  StackTrace(StackTrace&& from) noexcept
    : StackTrace() {
    *this = ::std::move(from);
  }

  inline StackTrace& operator=(const StackTrace& from) {
    CopyFrom(from);
    return *this;
  }
  inline StackTrace& operator=(StackTrace&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StackTrace& default_instance() {
    return *internal_default_instance();
  }
  static inline const StackTrace* internal_default_instance() {
    return reinterpret_cast<const StackTrace*>(
               &_StackTrace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(StackTrace& a, StackTrace& b) {
    a.Swap(&b);
  }
  inline void Swap(StackTrace* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StackTrace* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StackTrace* New() const final {
    return CreateMaybeMessage<StackTrace>(nullptr);
  }

  StackTrace* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StackTrace>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StackTrace& from);
  void MergeFrom(const StackTrace& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StackTrace* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.devtools.cloudtrace.v2.StackTrace";
  }
  protected:
  explicit StackTrace(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef StackTrace_StackFrame StackFrame;
  typedef StackTrace_StackFrames StackFrames;

  // accessors -------------------------------------------------------

  enum : int {
    kStackFramesFieldNumber = 1,
    kStackTraceHashIdFieldNumber = 2,
  };
  // .google.devtools.cloudtrace.v2.StackTrace.StackFrames stack_frames = 1;
  bool has_stack_frames() const;
  private:
  bool _internal_has_stack_frames() const;
  public:
  void clear_stack_frames();
  const ::google::devtools::cloudtrace::v2::StackTrace_StackFrames& stack_frames() const;
  ::google::devtools::cloudtrace::v2::StackTrace_StackFrames* release_stack_frames();
  ::google::devtools::cloudtrace::v2::StackTrace_StackFrames* mutable_stack_frames();
  void set_allocated_stack_frames(::google::devtools::cloudtrace::v2::StackTrace_StackFrames* stack_frames);
  private:
  const ::google::devtools::cloudtrace::v2::StackTrace_StackFrames& _internal_stack_frames() const;
  ::google::devtools::cloudtrace::v2::StackTrace_StackFrames* _internal_mutable_stack_frames();
  public:
  void unsafe_arena_set_allocated_stack_frames(
      ::google::devtools::cloudtrace::v2::StackTrace_StackFrames* stack_frames);
  ::google::devtools::cloudtrace::v2::StackTrace_StackFrames* unsafe_arena_release_stack_frames();

  // int64 stack_trace_hash_id = 2;
  void clear_stack_trace_hash_id();
  ::PROTOBUF_NAMESPACE_ID::int64 stack_trace_hash_id() const;
  void set_stack_trace_hash_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_stack_trace_hash_id() const;
  void _internal_set_stack_trace_hash_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:google.devtools.cloudtrace.v2.StackTrace)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::devtools::cloudtrace::v2::StackTrace_StackFrames* stack_frames_;
  ::PROTOBUF_NAMESPACE_ID::int64 stack_trace_hash_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto;
};
// -------------------------------------------------------------------

class Module PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.devtools.cloudtrace.v2.Module) */ {
 public:
  inline Module() : Module(nullptr) {}
  virtual ~Module();
  explicit constexpr Module(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Module(const Module& from);
  Module(Module&& from) noexcept
    : Module() {
    *this = ::std::move(from);
  }

  inline Module& operator=(const Module& from) {
    CopyFrom(from);
    return *this;
  }
  inline Module& operator=(Module&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Module& default_instance() {
    return *internal_default_instance();
  }
  static inline const Module* internal_default_instance() {
    return reinterpret_cast<const Module*>(
               &_Module_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Module& a, Module& b) {
    a.Swap(&b);
  }
  inline void Swap(Module* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Module* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Module* New() const final {
    return CreateMaybeMessage<Module>(nullptr);
  }

  Module* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Module>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Module& from);
  void MergeFrom(const Module& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Module* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.devtools.cloudtrace.v2.Module";
  }
  protected:
  explicit Module(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModuleFieldNumber = 1,
    kBuildIdFieldNumber = 2,
  };
  // .google.devtools.cloudtrace.v2.TruncatableString module = 1;
  bool has_module() const;
  private:
  bool _internal_has_module() const;
  public:
  void clear_module();
  const ::google::devtools::cloudtrace::v2::TruncatableString& module() const;
  ::google::devtools::cloudtrace::v2::TruncatableString* release_module();
  ::google::devtools::cloudtrace::v2::TruncatableString* mutable_module();
  void set_allocated_module(::google::devtools::cloudtrace::v2::TruncatableString* module);
  private:
  const ::google::devtools::cloudtrace::v2::TruncatableString& _internal_module() const;
  ::google::devtools::cloudtrace::v2::TruncatableString* _internal_mutable_module();
  public:
  void unsafe_arena_set_allocated_module(
      ::google::devtools::cloudtrace::v2::TruncatableString* module);
  ::google::devtools::cloudtrace::v2::TruncatableString* unsafe_arena_release_module();

  // .google.devtools.cloudtrace.v2.TruncatableString build_id = 2;
  bool has_build_id() const;
  private:
  bool _internal_has_build_id() const;
  public:
  void clear_build_id();
  const ::google::devtools::cloudtrace::v2::TruncatableString& build_id() const;
  ::google::devtools::cloudtrace::v2::TruncatableString* release_build_id();
  ::google::devtools::cloudtrace::v2::TruncatableString* mutable_build_id();
  void set_allocated_build_id(::google::devtools::cloudtrace::v2::TruncatableString* build_id);
  private:
  const ::google::devtools::cloudtrace::v2::TruncatableString& _internal_build_id() const;
  ::google::devtools::cloudtrace::v2::TruncatableString* _internal_mutable_build_id();
  public:
  void unsafe_arena_set_allocated_build_id(
      ::google::devtools::cloudtrace::v2::TruncatableString* build_id);
  ::google::devtools::cloudtrace::v2::TruncatableString* unsafe_arena_release_build_id();

  // @@protoc_insertion_point(class_scope:google.devtools.cloudtrace.v2.Module)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::devtools::cloudtrace::v2::TruncatableString* module_;
  ::google::devtools::cloudtrace::v2::TruncatableString* build_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto;
};
// -------------------------------------------------------------------

class TruncatableString PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.devtools.cloudtrace.v2.TruncatableString) */ {
 public:
  inline TruncatableString() : TruncatableString(nullptr) {}
  virtual ~TruncatableString();
  explicit constexpr TruncatableString(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TruncatableString(const TruncatableString& from);
  TruncatableString(TruncatableString&& from) noexcept
    : TruncatableString() {
    *this = ::std::move(from);
  }

  inline TruncatableString& operator=(const TruncatableString& from) {
    CopyFrom(from);
    return *this;
  }
  inline TruncatableString& operator=(TruncatableString&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TruncatableString& default_instance() {
    return *internal_default_instance();
  }
  static inline const TruncatableString* internal_default_instance() {
    return reinterpret_cast<const TruncatableString*>(
               &_TruncatableString_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(TruncatableString& a, TruncatableString& b) {
    a.Swap(&b);
  }
  inline void Swap(TruncatableString* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TruncatableString* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TruncatableString* New() const final {
    return CreateMaybeMessage<TruncatableString>(nullptr);
  }

  TruncatableString* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TruncatableString>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TruncatableString& from);
  void MergeFrom(const TruncatableString& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TruncatableString* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.devtools.cloudtrace.v2.TruncatableString";
  }
  protected:
  explicit TruncatableString(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
    kTruncatedByteCountFieldNumber = 2,
  };
  // string value = 1;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // int32 truncated_byte_count = 2;
  void clear_truncated_byte_count();
  ::PROTOBUF_NAMESPACE_ID::int32 truncated_byte_count() const;
  void set_truncated_byte_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_truncated_byte_count() const;
  void _internal_set_truncated_byte_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:google.devtools.cloudtrace.v2.TruncatableString)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::int32 truncated_byte_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Span_Attributes

// map<string, .google.devtools.cloudtrace.v2.AttributeValue> attribute_map = 1;
inline int Span_Attributes::_internal_attribute_map_size() const {
  return attribute_map_.size();
}
inline int Span_Attributes::attribute_map_size() const {
  return _internal_attribute_map_size();
}
inline void Span_Attributes::clear_attribute_map() {
  attribute_map_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::google::devtools::cloudtrace::v2::AttributeValue >&
Span_Attributes::_internal_attribute_map() const {
  return attribute_map_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::google::devtools::cloudtrace::v2::AttributeValue >&
Span_Attributes::attribute_map() const {
  // @@protoc_insertion_point(field_map:google.devtools.cloudtrace.v2.Span.Attributes.attribute_map)
  return _internal_attribute_map();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::google::devtools::cloudtrace::v2::AttributeValue >*
Span_Attributes::_internal_mutable_attribute_map() {
  return attribute_map_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::google::devtools::cloudtrace::v2::AttributeValue >*
Span_Attributes::mutable_attribute_map() {
  // @@protoc_insertion_point(field_mutable_map:google.devtools.cloudtrace.v2.Span.Attributes.attribute_map)
  return _internal_mutable_attribute_map();
}

// int32 dropped_attributes_count = 2;
inline void Span_Attributes::clear_dropped_attributes_count() {
  dropped_attributes_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Span_Attributes::_internal_dropped_attributes_count() const {
  return dropped_attributes_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Span_Attributes::dropped_attributes_count() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v2.Span.Attributes.dropped_attributes_count)
  return _internal_dropped_attributes_count();
}
inline void Span_Attributes::_internal_set_dropped_attributes_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dropped_attributes_count_ = value;
}
inline void Span_Attributes::set_dropped_attributes_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dropped_attributes_count(value);
  // @@protoc_insertion_point(field_set:google.devtools.cloudtrace.v2.Span.Attributes.dropped_attributes_count)
}

// -------------------------------------------------------------------

// Span_TimeEvent_Annotation

// .google.devtools.cloudtrace.v2.TruncatableString description = 1;
inline bool Span_TimeEvent_Annotation::_internal_has_description() const {
  return this != internal_default_instance() && description_ != nullptr;
}
inline bool Span_TimeEvent_Annotation::has_description() const {
  return _internal_has_description();
}
inline void Span_TimeEvent_Annotation::clear_description() {
  if (GetArena() == nullptr && description_ != nullptr) {
    delete description_;
  }
  description_ = nullptr;
}
inline const ::google::devtools::cloudtrace::v2::TruncatableString& Span_TimeEvent_Annotation::_internal_description() const {
  const ::google::devtools::cloudtrace::v2::TruncatableString* p = description_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::devtools::cloudtrace::v2::TruncatableString&>(
      ::google::devtools::cloudtrace::v2::_TruncatableString_default_instance_);
}
inline const ::google::devtools::cloudtrace::v2::TruncatableString& Span_TimeEvent_Annotation::description() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation.description)
  return _internal_description();
}
inline void Span_TimeEvent_Annotation::unsafe_arena_set_allocated_description(
    ::google::devtools::cloudtrace::v2::TruncatableString* description) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(description_);
  }
  description_ = description;
  if (description) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation.description)
}
inline ::google::devtools::cloudtrace::v2::TruncatableString* Span_TimeEvent_Annotation::release_description() {
  
  ::google::devtools::cloudtrace::v2::TruncatableString* temp = description_;
  description_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::devtools::cloudtrace::v2::TruncatableString* Span_TimeEvent_Annotation::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_release:google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation.description)
  
  ::google::devtools::cloudtrace::v2::TruncatableString* temp = description_;
  description_ = nullptr;
  return temp;
}
inline ::google::devtools::cloudtrace::v2::TruncatableString* Span_TimeEvent_Annotation::_internal_mutable_description() {
  
  if (description_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::devtools::cloudtrace::v2::TruncatableString>(GetArena());
    description_ = p;
  }
  return description_;
}
inline ::google::devtools::cloudtrace::v2::TruncatableString* Span_TimeEvent_Annotation::mutable_description() {
  // @@protoc_insertion_point(field_mutable:google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation.description)
  return _internal_mutable_description();
}
inline void Span_TimeEvent_Annotation::set_allocated_description(::google::devtools::cloudtrace::v2::TruncatableString* description) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete description_;
  }
  if (description) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(description);
    if (message_arena != submessage_arena) {
      description = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, description, submessage_arena);
    }
    
  } else {
    
  }
  description_ = description;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation.description)
}

// .google.devtools.cloudtrace.v2.Span.Attributes attributes = 2;
inline bool Span_TimeEvent_Annotation::_internal_has_attributes() const {
  return this != internal_default_instance() && attributes_ != nullptr;
}
inline bool Span_TimeEvent_Annotation::has_attributes() const {
  return _internal_has_attributes();
}
inline void Span_TimeEvent_Annotation::clear_attributes() {
  if (GetArena() == nullptr && attributes_ != nullptr) {
    delete attributes_;
  }
  attributes_ = nullptr;
}
inline const ::google::devtools::cloudtrace::v2::Span_Attributes& Span_TimeEvent_Annotation::_internal_attributes() const {
  const ::google::devtools::cloudtrace::v2::Span_Attributes* p = attributes_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::devtools::cloudtrace::v2::Span_Attributes&>(
      ::google::devtools::cloudtrace::v2::_Span_Attributes_default_instance_);
}
inline const ::google::devtools::cloudtrace::v2::Span_Attributes& Span_TimeEvent_Annotation::attributes() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation.attributes)
  return _internal_attributes();
}
inline void Span_TimeEvent_Annotation::unsafe_arena_set_allocated_attributes(
    ::google::devtools::cloudtrace::v2::Span_Attributes* attributes) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attributes_);
  }
  attributes_ = attributes;
  if (attributes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation.attributes)
}
inline ::google::devtools::cloudtrace::v2::Span_Attributes* Span_TimeEvent_Annotation::release_attributes() {
  
  ::google::devtools::cloudtrace::v2::Span_Attributes* temp = attributes_;
  attributes_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::devtools::cloudtrace::v2::Span_Attributes* Span_TimeEvent_Annotation::unsafe_arena_release_attributes() {
  // @@protoc_insertion_point(field_release:google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation.attributes)
  
  ::google::devtools::cloudtrace::v2::Span_Attributes* temp = attributes_;
  attributes_ = nullptr;
  return temp;
}
inline ::google::devtools::cloudtrace::v2::Span_Attributes* Span_TimeEvent_Annotation::_internal_mutable_attributes() {
  
  if (attributes_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::devtools::cloudtrace::v2::Span_Attributes>(GetArena());
    attributes_ = p;
  }
  return attributes_;
}
inline ::google::devtools::cloudtrace::v2::Span_Attributes* Span_TimeEvent_Annotation::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable:google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation.attributes)
  return _internal_mutable_attributes();
}
inline void Span_TimeEvent_Annotation::set_allocated_attributes(::google::devtools::cloudtrace::v2::Span_Attributes* attributes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete attributes_;
  }
  if (attributes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(attributes);
    if (message_arena != submessage_arena) {
      attributes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attributes, submessage_arena);
    }
    
  } else {
    
  }
  attributes_ = attributes;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation.attributes)
}

// -------------------------------------------------------------------

// Span_TimeEvent_MessageEvent

// .google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent.Type type = 1;
inline void Span_TimeEvent_MessageEvent::clear_type() {
  type_ = 0;
}
inline ::google::devtools::cloudtrace::v2::Span_TimeEvent_MessageEvent_Type Span_TimeEvent_MessageEvent::_internal_type() const {
  return static_cast< ::google::devtools::cloudtrace::v2::Span_TimeEvent_MessageEvent_Type >(type_);
}
inline ::google::devtools::cloudtrace::v2::Span_TimeEvent_MessageEvent_Type Span_TimeEvent_MessageEvent::type() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent.type)
  return _internal_type();
}
inline void Span_TimeEvent_MessageEvent::_internal_set_type(::google::devtools::cloudtrace::v2::Span_TimeEvent_MessageEvent_Type value) {
  
  type_ = value;
}
inline void Span_TimeEvent_MessageEvent::set_type(::google::devtools::cloudtrace::v2::Span_TimeEvent_MessageEvent_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent.type)
}

// int64 id = 2;
inline void Span_TimeEvent_MessageEvent::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Span_TimeEvent_MessageEvent::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Span_TimeEvent_MessageEvent::id() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent.id)
  return _internal_id();
}
inline void Span_TimeEvent_MessageEvent::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void Span_TimeEvent_MessageEvent::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent.id)
}

// int64 uncompressed_size_bytes = 3;
inline void Span_TimeEvent_MessageEvent::clear_uncompressed_size_bytes() {
  uncompressed_size_bytes_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Span_TimeEvent_MessageEvent::_internal_uncompressed_size_bytes() const {
  return uncompressed_size_bytes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Span_TimeEvent_MessageEvent::uncompressed_size_bytes() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent.uncompressed_size_bytes)
  return _internal_uncompressed_size_bytes();
}
inline void Span_TimeEvent_MessageEvent::_internal_set_uncompressed_size_bytes(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  uncompressed_size_bytes_ = value;
}
inline void Span_TimeEvent_MessageEvent::set_uncompressed_size_bytes(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_uncompressed_size_bytes(value);
  // @@protoc_insertion_point(field_set:google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent.uncompressed_size_bytes)
}

// int64 compressed_size_bytes = 4;
inline void Span_TimeEvent_MessageEvent::clear_compressed_size_bytes() {
  compressed_size_bytes_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Span_TimeEvent_MessageEvent::_internal_compressed_size_bytes() const {
  return compressed_size_bytes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Span_TimeEvent_MessageEvent::compressed_size_bytes() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent.compressed_size_bytes)
  return _internal_compressed_size_bytes();
}
inline void Span_TimeEvent_MessageEvent::_internal_set_compressed_size_bytes(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  compressed_size_bytes_ = value;
}
inline void Span_TimeEvent_MessageEvent::set_compressed_size_bytes(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_compressed_size_bytes(value);
  // @@protoc_insertion_point(field_set:google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent.compressed_size_bytes)
}

// -------------------------------------------------------------------

// Span_TimeEvent

// .google.protobuf.Timestamp time = 1;
inline bool Span_TimeEvent::_internal_has_time() const {
  return this != internal_default_instance() && time_ != nullptr;
}
inline bool Span_TimeEvent::has_time() const {
  return _internal_has_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Span_TimeEvent::_internal_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Span_TimeEvent::time() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v2.Span.TimeEvent.time)
  return _internal_time();
}
inline void Span_TimeEvent::unsafe_arena_set_allocated_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_);
  }
  time_ = time;
  if (time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.devtools.cloudtrace.v2.Span.TimeEvent.time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Span_TimeEvent::release_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = time_;
  time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Span_TimeEvent::unsafe_arena_release_time() {
  // @@protoc_insertion_point(field_release:google.devtools.cloudtrace.v2.Span.TimeEvent.time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = time_;
  time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Span_TimeEvent::_internal_mutable_time() {
  
  if (time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    time_ = p;
  }
  return time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Span_TimeEvent::mutable_time() {
  // @@protoc_insertion_point(field_mutable:google.devtools.cloudtrace.v2.Span.TimeEvent.time)
  return _internal_mutable_time();
}
inline void Span_TimeEvent::set_allocated_time(PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_);
  }
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time)->GetArena();
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    
  } else {
    
  }
  time_ = time;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.cloudtrace.v2.Span.TimeEvent.time)
}

// .google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation annotation = 2;
inline bool Span_TimeEvent::_internal_has_annotation() const {
  return value_case() == kAnnotation;
}
inline bool Span_TimeEvent::has_annotation() const {
  return _internal_has_annotation();
}
inline void Span_TimeEvent::set_has_annotation() {
  _oneof_case_[0] = kAnnotation;
}
inline void Span_TimeEvent::clear_annotation() {
  if (_internal_has_annotation()) {
    if (GetArena() == nullptr) {
      delete value_.annotation_;
    }
    clear_has_value();
  }
}
inline ::google::devtools::cloudtrace::v2::Span_TimeEvent_Annotation* Span_TimeEvent::release_annotation() {
  // @@protoc_insertion_point(field_release:google.devtools.cloudtrace.v2.Span.TimeEvent.annotation)
  if (_internal_has_annotation()) {
    clear_has_value();
      ::google::devtools::cloudtrace::v2::Span_TimeEvent_Annotation* temp = value_.annotation_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.annotation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::devtools::cloudtrace::v2::Span_TimeEvent_Annotation& Span_TimeEvent::_internal_annotation() const {
  return _internal_has_annotation()
      ? *value_.annotation_
      : reinterpret_cast< ::google::devtools::cloudtrace::v2::Span_TimeEvent_Annotation&>(::google::devtools::cloudtrace::v2::_Span_TimeEvent_Annotation_default_instance_);
}
inline const ::google::devtools::cloudtrace::v2::Span_TimeEvent_Annotation& Span_TimeEvent::annotation() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v2.Span.TimeEvent.annotation)
  return _internal_annotation();
}
inline ::google::devtools::cloudtrace::v2::Span_TimeEvent_Annotation* Span_TimeEvent::unsafe_arena_release_annotation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.devtools.cloudtrace.v2.Span.TimeEvent.annotation)
  if (_internal_has_annotation()) {
    clear_has_value();
    ::google::devtools::cloudtrace::v2::Span_TimeEvent_Annotation* temp = value_.annotation_;
    value_.annotation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Span_TimeEvent::unsafe_arena_set_allocated_annotation(::google::devtools::cloudtrace::v2::Span_TimeEvent_Annotation* annotation) {
  clear_value();
  if (annotation) {
    set_has_annotation();
    value_.annotation_ = annotation;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.devtools.cloudtrace.v2.Span.TimeEvent.annotation)
}
inline ::google::devtools::cloudtrace::v2::Span_TimeEvent_Annotation* Span_TimeEvent::_internal_mutable_annotation() {
  if (!_internal_has_annotation()) {
    clear_value();
    set_has_annotation();
    value_.annotation_ = CreateMaybeMessage< ::google::devtools::cloudtrace::v2::Span_TimeEvent_Annotation >(GetArena());
  }
  return value_.annotation_;
}
inline ::google::devtools::cloudtrace::v2::Span_TimeEvent_Annotation* Span_TimeEvent::mutable_annotation() {
  // @@protoc_insertion_point(field_mutable:google.devtools.cloudtrace.v2.Span.TimeEvent.annotation)
  return _internal_mutable_annotation();
}

// .google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent message_event = 3;
inline bool Span_TimeEvent::_internal_has_message_event() const {
  return value_case() == kMessageEvent;
}
inline bool Span_TimeEvent::has_message_event() const {
  return _internal_has_message_event();
}
inline void Span_TimeEvent::set_has_message_event() {
  _oneof_case_[0] = kMessageEvent;
}
inline void Span_TimeEvent::clear_message_event() {
  if (_internal_has_message_event()) {
    if (GetArena() == nullptr) {
      delete value_.message_event_;
    }
    clear_has_value();
  }
}
inline ::google::devtools::cloudtrace::v2::Span_TimeEvent_MessageEvent* Span_TimeEvent::release_message_event() {
  // @@protoc_insertion_point(field_release:google.devtools.cloudtrace.v2.Span.TimeEvent.message_event)
  if (_internal_has_message_event()) {
    clear_has_value();
      ::google::devtools::cloudtrace::v2::Span_TimeEvent_MessageEvent* temp = value_.message_event_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.message_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::devtools::cloudtrace::v2::Span_TimeEvent_MessageEvent& Span_TimeEvent::_internal_message_event() const {
  return _internal_has_message_event()
      ? *value_.message_event_
      : reinterpret_cast< ::google::devtools::cloudtrace::v2::Span_TimeEvent_MessageEvent&>(::google::devtools::cloudtrace::v2::_Span_TimeEvent_MessageEvent_default_instance_);
}
inline const ::google::devtools::cloudtrace::v2::Span_TimeEvent_MessageEvent& Span_TimeEvent::message_event() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v2.Span.TimeEvent.message_event)
  return _internal_message_event();
}
inline ::google::devtools::cloudtrace::v2::Span_TimeEvent_MessageEvent* Span_TimeEvent::unsafe_arena_release_message_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.devtools.cloudtrace.v2.Span.TimeEvent.message_event)
  if (_internal_has_message_event()) {
    clear_has_value();
    ::google::devtools::cloudtrace::v2::Span_TimeEvent_MessageEvent* temp = value_.message_event_;
    value_.message_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Span_TimeEvent::unsafe_arena_set_allocated_message_event(::google::devtools::cloudtrace::v2::Span_TimeEvent_MessageEvent* message_event) {
  clear_value();
  if (message_event) {
    set_has_message_event();
    value_.message_event_ = message_event;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.devtools.cloudtrace.v2.Span.TimeEvent.message_event)
}
inline ::google::devtools::cloudtrace::v2::Span_TimeEvent_MessageEvent* Span_TimeEvent::_internal_mutable_message_event() {
  if (!_internal_has_message_event()) {
    clear_value();
    set_has_message_event();
    value_.message_event_ = CreateMaybeMessage< ::google::devtools::cloudtrace::v2::Span_TimeEvent_MessageEvent >(GetArena());
  }
  return value_.message_event_;
}
inline ::google::devtools::cloudtrace::v2::Span_TimeEvent_MessageEvent* Span_TimeEvent::mutable_message_event() {
  // @@protoc_insertion_point(field_mutable:google.devtools.cloudtrace.v2.Span.TimeEvent.message_event)
  return _internal_mutable_message_event();
}

inline bool Span_TimeEvent::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void Span_TimeEvent::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline Span_TimeEvent::ValueCase Span_TimeEvent::value_case() const {
  return Span_TimeEvent::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Span_TimeEvents

// repeated .google.devtools.cloudtrace.v2.Span.TimeEvent time_event = 1;
inline int Span_TimeEvents::_internal_time_event_size() const {
  return time_event_.size();
}
inline int Span_TimeEvents::time_event_size() const {
  return _internal_time_event_size();
}
inline void Span_TimeEvents::clear_time_event() {
  time_event_.Clear();
}
inline ::google::devtools::cloudtrace::v2::Span_TimeEvent* Span_TimeEvents::mutable_time_event(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.cloudtrace.v2.Span.TimeEvents.time_event)
  return time_event_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::devtools::cloudtrace::v2::Span_TimeEvent >*
Span_TimeEvents::mutable_time_event() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.cloudtrace.v2.Span.TimeEvents.time_event)
  return &time_event_;
}
inline const ::google::devtools::cloudtrace::v2::Span_TimeEvent& Span_TimeEvents::_internal_time_event(int index) const {
  return time_event_.Get(index);
}
inline const ::google::devtools::cloudtrace::v2::Span_TimeEvent& Span_TimeEvents::time_event(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v2.Span.TimeEvents.time_event)
  return _internal_time_event(index);
}
inline ::google::devtools::cloudtrace::v2::Span_TimeEvent* Span_TimeEvents::_internal_add_time_event() {
  return time_event_.Add();
}
inline ::google::devtools::cloudtrace::v2::Span_TimeEvent* Span_TimeEvents::add_time_event() {
  // @@protoc_insertion_point(field_add:google.devtools.cloudtrace.v2.Span.TimeEvents.time_event)
  return _internal_add_time_event();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::devtools::cloudtrace::v2::Span_TimeEvent >&
Span_TimeEvents::time_event() const {
  // @@protoc_insertion_point(field_list:google.devtools.cloudtrace.v2.Span.TimeEvents.time_event)
  return time_event_;
}

// int32 dropped_annotations_count = 2;
inline void Span_TimeEvents::clear_dropped_annotations_count() {
  dropped_annotations_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Span_TimeEvents::_internal_dropped_annotations_count() const {
  return dropped_annotations_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Span_TimeEvents::dropped_annotations_count() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v2.Span.TimeEvents.dropped_annotations_count)
  return _internal_dropped_annotations_count();
}
inline void Span_TimeEvents::_internal_set_dropped_annotations_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dropped_annotations_count_ = value;
}
inline void Span_TimeEvents::set_dropped_annotations_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dropped_annotations_count(value);
  // @@protoc_insertion_point(field_set:google.devtools.cloudtrace.v2.Span.TimeEvents.dropped_annotations_count)
}

// int32 dropped_message_events_count = 3;
inline void Span_TimeEvents::clear_dropped_message_events_count() {
  dropped_message_events_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Span_TimeEvents::_internal_dropped_message_events_count() const {
  return dropped_message_events_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Span_TimeEvents::dropped_message_events_count() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v2.Span.TimeEvents.dropped_message_events_count)
  return _internal_dropped_message_events_count();
}
inline void Span_TimeEvents::_internal_set_dropped_message_events_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dropped_message_events_count_ = value;
}
inline void Span_TimeEvents::set_dropped_message_events_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dropped_message_events_count(value);
  // @@protoc_insertion_point(field_set:google.devtools.cloudtrace.v2.Span.TimeEvents.dropped_message_events_count)
}

// -------------------------------------------------------------------

// Span_Link

// string trace_id = 1;
inline void Span_Link::clear_trace_id() {
  trace_id_.ClearToEmpty();
}
inline const std::string& Span_Link::trace_id() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v2.Span.Link.trace_id)
  return _internal_trace_id();
}
inline void Span_Link::set_trace_id(const std::string& value) {
  _internal_set_trace_id(value);
  // @@protoc_insertion_point(field_set:google.devtools.cloudtrace.v2.Span.Link.trace_id)
}
inline std::string* Span_Link::mutable_trace_id() {
  // @@protoc_insertion_point(field_mutable:google.devtools.cloudtrace.v2.Span.Link.trace_id)
  return _internal_mutable_trace_id();
}
inline const std::string& Span_Link::_internal_trace_id() const {
  return trace_id_.Get();
}
inline void Span_Link::_internal_set_trace_id(const std::string& value) {
  
  trace_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Span_Link::set_trace_id(std::string&& value) {
  
  trace_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.cloudtrace.v2.Span.Link.trace_id)
}
inline void Span_Link::set_trace_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trace_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.devtools.cloudtrace.v2.Span.Link.trace_id)
}
inline void Span_Link::set_trace_id(const char* value,
    size_t size) {
  
  trace_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.devtools.cloudtrace.v2.Span.Link.trace_id)
}
inline std::string* Span_Link::_internal_mutable_trace_id() {
  
  return trace_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Span_Link::release_trace_id() {
  // @@protoc_insertion_point(field_release:google.devtools.cloudtrace.v2.Span.Link.trace_id)
  return trace_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Span_Link::set_allocated_trace_id(std::string* trace_id) {
  if (trace_id != nullptr) {
    
  } else {
    
  }
  trace_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trace_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.devtools.cloudtrace.v2.Span.Link.trace_id)
}

// string span_id = 2;
inline void Span_Link::clear_span_id() {
  span_id_.ClearToEmpty();
}
inline const std::string& Span_Link::span_id() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v2.Span.Link.span_id)
  return _internal_span_id();
}
inline void Span_Link::set_span_id(const std::string& value) {
  _internal_set_span_id(value);
  // @@protoc_insertion_point(field_set:google.devtools.cloudtrace.v2.Span.Link.span_id)
}
inline std::string* Span_Link::mutable_span_id() {
  // @@protoc_insertion_point(field_mutable:google.devtools.cloudtrace.v2.Span.Link.span_id)
  return _internal_mutable_span_id();
}
inline const std::string& Span_Link::_internal_span_id() const {
  return span_id_.Get();
}
inline void Span_Link::_internal_set_span_id(const std::string& value) {
  
  span_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Span_Link::set_span_id(std::string&& value) {
  
  span_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.cloudtrace.v2.Span.Link.span_id)
}
inline void Span_Link::set_span_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  span_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.devtools.cloudtrace.v2.Span.Link.span_id)
}
inline void Span_Link::set_span_id(const char* value,
    size_t size) {
  
  span_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.devtools.cloudtrace.v2.Span.Link.span_id)
}
inline std::string* Span_Link::_internal_mutable_span_id() {
  
  return span_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Span_Link::release_span_id() {
  // @@protoc_insertion_point(field_release:google.devtools.cloudtrace.v2.Span.Link.span_id)
  return span_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Span_Link::set_allocated_span_id(std::string* span_id) {
  if (span_id != nullptr) {
    
  } else {
    
  }
  span_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), span_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.devtools.cloudtrace.v2.Span.Link.span_id)
}

// .google.devtools.cloudtrace.v2.Span.Link.Type type = 3;
inline void Span_Link::clear_type() {
  type_ = 0;
}
inline ::google::devtools::cloudtrace::v2::Span_Link_Type Span_Link::_internal_type() const {
  return static_cast< ::google::devtools::cloudtrace::v2::Span_Link_Type >(type_);
}
inline ::google::devtools::cloudtrace::v2::Span_Link_Type Span_Link::type() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v2.Span.Link.type)
  return _internal_type();
}
inline void Span_Link::_internal_set_type(::google::devtools::cloudtrace::v2::Span_Link_Type value) {
  
  type_ = value;
}
inline void Span_Link::set_type(::google::devtools::cloudtrace::v2::Span_Link_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:google.devtools.cloudtrace.v2.Span.Link.type)
}

// .google.devtools.cloudtrace.v2.Span.Attributes attributes = 4;
inline bool Span_Link::_internal_has_attributes() const {
  return this != internal_default_instance() && attributes_ != nullptr;
}
inline bool Span_Link::has_attributes() const {
  return _internal_has_attributes();
}
inline void Span_Link::clear_attributes() {
  if (GetArena() == nullptr && attributes_ != nullptr) {
    delete attributes_;
  }
  attributes_ = nullptr;
}
inline const ::google::devtools::cloudtrace::v2::Span_Attributes& Span_Link::_internal_attributes() const {
  const ::google::devtools::cloudtrace::v2::Span_Attributes* p = attributes_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::devtools::cloudtrace::v2::Span_Attributes&>(
      ::google::devtools::cloudtrace::v2::_Span_Attributes_default_instance_);
}
inline const ::google::devtools::cloudtrace::v2::Span_Attributes& Span_Link::attributes() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v2.Span.Link.attributes)
  return _internal_attributes();
}
inline void Span_Link::unsafe_arena_set_allocated_attributes(
    ::google::devtools::cloudtrace::v2::Span_Attributes* attributes) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attributes_);
  }
  attributes_ = attributes;
  if (attributes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.devtools.cloudtrace.v2.Span.Link.attributes)
}
inline ::google::devtools::cloudtrace::v2::Span_Attributes* Span_Link::release_attributes() {
  
  ::google::devtools::cloudtrace::v2::Span_Attributes* temp = attributes_;
  attributes_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::devtools::cloudtrace::v2::Span_Attributes* Span_Link::unsafe_arena_release_attributes() {
  // @@protoc_insertion_point(field_release:google.devtools.cloudtrace.v2.Span.Link.attributes)
  
  ::google::devtools::cloudtrace::v2::Span_Attributes* temp = attributes_;
  attributes_ = nullptr;
  return temp;
}
inline ::google::devtools::cloudtrace::v2::Span_Attributes* Span_Link::_internal_mutable_attributes() {
  
  if (attributes_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::devtools::cloudtrace::v2::Span_Attributes>(GetArena());
    attributes_ = p;
  }
  return attributes_;
}
inline ::google::devtools::cloudtrace::v2::Span_Attributes* Span_Link::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable:google.devtools.cloudtrace.v2.Span.Link.attributes)
  return _internal_mutable_attributes();
}
inline void Span_Link::set_allocated_attributes(::google::devtools::cloudtrace::v2::Span_Attributes* attributes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete attributes_;
  }
  if (attributes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(attributes);
    if (message_arena != submessage_arena) {
      attributes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attributes, submessage_arena);
    }
    
  } else {
    
  }
  attributes_ = attributes;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.cloudtrace.v2.Span.Link.attributes)
}

// -------------------------------------------------------------------

// Span_Links

// repeated .google.devtools.cloudtrace.v2.Span.Link link = 1;
inline int Span_Links::_internal_link_size() const {
  return link_.size();
}
inline int Span_Links::link_size() const {
  return _internal_link_size();
}
inline void Span_Links::clear_link() {
  link_.Clear();
}
inline ::google::devtools::cloudtrace::v2::Span_Link* Span_Links::mutable_link(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.cloudtrace.v2.Span.Links.link)
  return link_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::devtools::cloudtrace::v2::Span_Link >*
Span_Links::mutable_link() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.cloudtrace.v2.Span.Links.link)
  return &link_;
}
inline const ::google::devtools::cloudtrace::v2::Span_Link& Span_Links::_internal_link(int index) const {
  return link_.Get(index);
}
inline const ::google::devtools::cloudtrace::v2::Span_Link& Span_Links::link(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v2.Span.Links.link)
  return _internal_link(index);
}
inline ::google::devtools::cloudtrace::v2::Span_Link* Span_Links::_internal_add_link() {
  return link_.Add();
}
inline ::google::devtools::cloudtrace::v2::Span_Link* Span_Links::add_link() {
  // @@protoc_insertion_point(field_add:google.devtools.cloudtrace.v2.Span.Links.link)
  return _internal_add_link();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::devtools::cloudtrace::v2::Span_Link >&
Span_Links::link() const {
  // @@protoc_insertion_point(field_list:google.devtools.cloudtrace.v2.Span.Links.link)
  return link_;
}

// int32 dropped_links_count = 2;
inline void Span_Links::clear_dropped_links_count() {
  dropped_links_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Span_Links::_internal_dropped_links_count() const {
  return dropped_links_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Span_Links::dropped_links_count() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v2.Span.Links.dropped_links_count)
  return _internal_dropped_links_count();
}
inline void Span_Links::_internal_set_dropped_links_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dropped_links_count_ = value;
}
inline void Span_Links::set_dropped_links_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dropped_links_count(value);
  // @@protoc_insertion_point(field_set:google.devtools.cloudtrace.v2.Span.Links.dropped_links_count)
}

// -------------------------------------------------------------------

// Span

// string name = 1 [(.google.api.field_behavior) = REQUIRED];
inline void Span::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Span::name() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v2.Span.name)
  return _internal_name();
}
inline void Span::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:google.devtools.cloudtrace.v2.Span.name)
}
inline std::string* Span::mutable_name() {
  // @@protoc_insertion_point(field_mutable:google.devtools.cloudtrace.v2.Span.name)
  return _internal_mutable_name();
}
inline const std::string& Span::_internal_name() const {
  return name_.Get();
}
inline void Span::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Span::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.cloudtrace.v2.Span.name)
}
inline void Span::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.devtools.cloudtrace.v2.Span.name)
}
inline void Span::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.devtools.cloudtrace.v2.Span.name)
}
inline std::string* Span::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Span::release_name() {
  // @@protoc_insertion_point(field_release:google.devtools.cloudtrace.v2.Span.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Span::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.devtools.cloudtrace.v2.Span.name)
}

// string span_id = 2 [(.google.api.field_behavior) = REQUIRED];
inline void Span::clear_span_id() {
  span_id_.ClearToEmpty();
}
inline const std::string& Span::span_id() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v2.Span.span_id)
  return _internal_span_id();
}
inline void Span::set_span_id(const std::string& value) {
  _internal_set_span_id(value);
  // @@protoc_insertion_point(field_set:google.devtools.cloudtrace.v2.Span.span_id)
}
inline std::string* Span::mutable_span_id() {
  // @@protoc_insertion_point(field_mutable:google.devtools.cloudtrace.v2.Span.span_id)
  return _internal_mutable_span_id();
}
inline const std::string& Span::_internal_span_id() const {
  return span_id_.Get();
}
inline void Span::_internal_set_span_id(const std::string& value) {
  
  span_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Span::set_span_id(std::string&& value) {
  
  span_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.cloudtrace.v2.Span.span_id)
}
inline void Span::set_span_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  span_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.devtools.cloudtrace.v2.Span.span_id)
}
inline void Span::set_span_id(const char* value,
    size_t size) {
  
  span_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.devtools.cloudtrace.v2.Span.span_id)
}
inline std::string* Span::_internal_mutable_span_id() {
  
  return span_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Span::release_span_id() {
  // @@protoc_insertion_point(field_release:google.devtools.cloudtrace.v2.Span.span_id)
  return span_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Span::set_allocated_span_id(std::string* span_id) {
  if (span_id != nullptr) {
    
  } else {
    
  }
  span_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), span_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.devtools.cloudtrace.v2.Span.span_id)
}

// string parent_span_id = 3;
inline void Span::clear_parent_span_id() {
  parent_span_id_.ClearToEmpty();
}
inline const std::string& Span::parent_span_id() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v2.Span.parent_span_id)
  return _internal_parent_span_id();
}
inline void Span::set_parent_span_id(const std::string& value) {
  _internal_set_parent_span_id(value);
  // @@protoc_insertion_point(field_set:google.devtools.cloudtrace.v2.Span.parent_span_id)
}
inline std::string* Span::mutable_parent_span_id() {
  // @@protoc_insertion_point(field_mutable:google.devtools.cloudtrace.v2.Span.parent_span_id)
  return _internal_mutable_parent_span_id();
}
inline const std::string& Span::_internal_parent_span_id() const {
  return parent_span_id_.Get();
}
inline void Span::_internal_set_parent_span_id(const std::string& value) {
  
  parent_span_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Span::set_parent_span_id(std::string&& value) {
  
  parent_span_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.cloudtrace.v2.Span.parent_span_id)
}
inline void Span::set_parent_span_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parent_span_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.devtools.cloudtrace.v2.Span.parent_span_id)
}
inline void Span::set_parent_span_id(const char* value,
    size_t size) {
  
  parent_span_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.devtools.cloudtrace.v2.Span.parent_span_id)
}
inline std::string* Span::_internal_mutable_parent_span_id() {
  
  return parent_span_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Span::release_parent_span_id() {
  // @@protoc_insertion_point(field_release:google.devtools.cloudtrace.v2.Span.parent_span_id)
  return parent_span_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Span::set_allocated_parent_span_id(std::string* parent_span_id) {
  if (parent_span_id != nullptr) {
    
  } else {
    
  }
  parent_span_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent_span_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.devtools.cloudtrace.v2.Span.parent_span_id)
}

// .google.devtools.cloudtrace.v2.TruncatableString display_name = 4 [(.google.api.field_behavior) = REQUIRED];
inline bool Span::_internal_has_display_name() const {
  return this != internal_default_instance() && display_name_ != nullptr;
}
inline bool Span::has_display_name() const {
  return _internal_has_display_name();
}
inline void Span::clear_display_name() {
  if (GetArena() == nullptr && display_name_ != nullptr) {
    delete display_name_;
  }
  display_name_ = nullptr;
}
inline const ::google::devtools::cloudtrace::v2::TruncatableString& Span::_internal_display_name() const {
  const ::google::devtools::cloudtrace::v2::TruncatableString* p = display_name_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::devtools::cloudtrace::v2::TruncatableString&>(
      ::google::devtools::cloudtrace::v2::_TruncatableString_default_instance_);
}
inline const ::google::devtools::cloudtrace::v2::TruncatableString& Span::display_name() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v2.Span.display_name)
  return _internal_display_name();
}
inline void Span::unsafe_arena_set_allocated_display_name(
    ::google::devtools::cloudtrace::v2::TruncatableString* display_name) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(display_name_);
  }
  display_name_ = display_name;
  if (display_name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.devtools.cloudtrace.v2.Span.display_name)
}
inline ::google::devtools::cloudtrace::v2::TruncatableString* Span::release_display_name() {
  
  ::google::devtools::cloudtrace::v2::TruncatableString* temp = display_name_;
  display_name_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::devtools::cloudtrace::v2::TruncatableString* Span::unsafe_arena_release_display_name() {
  // @@protoc_insertion_point(field_release:google.devtools.cloudtrace.v2.Span.display_name)
  
  ::google::devtools::cloudtrace::v2::TruncatableString* temp = display_name_;
  display_name_ = nullptr;
  return temp;
}
inline ::google::devtools::cloudtrace::v2::TruncatableString* Span::_internal_mutable_display_name() {
  
  if (display_name_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::devtools::cloudtrace::v2::TruncatableString>(GetArena());
    display_name_ = p;
  }
  return display_name_;
}
inline ::google::devtools::cloudtrace::v2::TruncatableString* Span::mutable_display_name() {
  // @@protoc_insertion_point(field_mutable:google.devtools.cloudtrace.v2.Span.display_name)
  return _internal_mutable_display_name();
}
inline void Span::set_allocated_display_name(::google::devtools::cloudtrace::v2::TruncatableString* display_name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete display_name_;
  }
  if (display_name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(display_name);
    if (message_arena != submessage_arena) {
      display_name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, display_name, submessage_arena);
    }
    
  } else {
    
  }
  display_name_ = display_name;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.cloudtrace.v2.Span.display_name)
}

// .google.protobuf.Timestamp start_time = 5 [(.google.api.field_behavior) = REQUIRED];
inline bool Span::_internal_has_start_time() const {
  return this != internal_default_instance() && start_time_ != nullptr;
}
inline bool Span::has_start_time() const {
  return _internal_has_start_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Span::_internal_start_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = start_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Span::start_time() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v2.Span.start_time)
  return _internal_start_time();
}
inline void Span::unsafe_arena_set_allocated_start_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* start_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time_);
  }
  start_time_ = start_time;
  if (start_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.devtools.cloudtrace.v2.Span.start_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Span::release_start_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = start_time_;
  start_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Span::unsafe_arena_release_start_time() {
  // @@protoc_insertion_point(field_release:google.devtools.cloudtrace.v2.Span.start_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = start_time_;
  start_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Span::_internal_mutable_start_time() {
  
  if (start_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    start_time_ = p;
  }
  return start_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Span::mutable_start_time() {
  // @@protoc_insertion_point(field_mutable:google.devtools.cloudtrace.v2.Span.start_time)
  return _internal_mutable_start_time();
}
inline void Span::set_allocated_start_time(PROTOBUF_NAMESPACE_ID::Timestamp* start_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time_);
  }
  if (start_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time)->GetArena();
    if (message_arena != submessage_arena) {
      start_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_time, submessage_arena);
    }
    
  } else {
    
  }
  start_time_ = start_time;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.cloudtrace.v2.Span.start_time)
}

// .google.protobuf.Timestamp end_time = 6 [(.google.api.field_behavior) = REQUIRED];
inline bool Span::_internal_has_end_time() const {
  return this != internal_default_instance() && end_time_ != nullptr;
}
inline bool Span::has_end_time() const {
  return _internal_has_end_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Span::_internal_end_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = end_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Span::end_time() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v2.Span.end_time)
  return _internal_end_time();
}
inline void Span::unsafe_arena_set_allocated_end_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time_);
  }
  end_time_ = end_time;
  if (end_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.devtools.cloudtrace.v2.Span.end_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Span::release_end_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_time_;
  end_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Span::unsafe_arena_release_end_time() {
  // @@protoc_insertion_point(field_release:google.devtools.cloudtrace.v2.Span.end_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_time_;
  end_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Span::_internal_mutable_end_time() {
  
  if (end_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    end_time_ = p;
  }
  return end_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Span::mutable_end_time() {
  // @@protoc_insertion_point(field_mutable:google.devtools.cloudtrace.v2.Span.end_time)
  return _internal_mutable_end_time();
}
inline void Span::set_allocated_end_time(PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time_);
  }
  if (end_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time)->GetArena();
    if (message_arena != submessage_arena) {
      end_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_time, submessage_arena);
    }
    
  } else {
    
  }
  end_time_ = end_time;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.cloudtrace.v2.Span.end_time)
}

// .google.devtools.cloudtrace.v2.Span.Attributes attributes = 7;
inline bool Span::_internal_has_attributes() const {
  return this != internal_default_instance() && attributes_ != nullptr;
}
inline bool Span::has_attributes() const {
  return _internal_has_attributes();
}
inline void Span::clear_attributes() {
  if (GetArena() == nullptr && attributes_ != nullptr) {
    delete attributes_;
  }
  attributes_ = nullptr;
}
inline const ::google::devtools::cloudtrace::v2::Span_Attributes& Span::_internal_attributes() const {
  const ::google::devtools::cloudtrace::v2::Span_Attributes* p = attributes_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::devtools::cloudtrace::v2::Span_Attributes&>(
      ::google::devtools::cloudtrace::v2::_Span_Attributes_default_instance_);
}
inline const ::google::devtools::cloudtrace::v2::Span_Attributes& Span::attributes() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v2.Span.attributes)
  return _internal_attributes();
}
inline void Span::unsafe_arena_set_allocated_attributes(
    ::google::devtools::cloudtrace::v2::Span_Attributes* attributes) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attributes_);
  }
  attributes_ = attributes;
  if (attributes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.devtools.cloudtrace.v2.Span.attributes)
}
inline ::google::devtools::cloudtrace::v2::Span_Attributes* Span::release_attributes() {
  
  ::google::devtools::cloudtrace::v2::Span_Attributes* temp = attributes_;
  attributes_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::devtools::cloudtrace::v2::Span_Attributes* Span::unsafe_arena_release_attributes() {
  // @@protoc_insertion_point(field_release:google.devtools.cloudtrace.v2.Span.attributes)
  
  ::google::devtools::cloudtrace::v2::Span_Attributes* temp = attributes_;
  attributes_ = nullptr;
  return temp;
}
inline ::google::devtools::cloudtrace::v2::Span_Attributes* Span::_internal_mutable_attributes() {
  
  if (attributes_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::devtools::cloudtrace::v2::Span_Attributes>(GetArena());
    attributes_ = p;
  }
  return attributes_;
}
inline ::google::devtools::cloudtrace::v2::Span_Attributes* Span::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable:google.devtools.cloudtrace.v2.Span.attributes)
  return _internal_mutable_attributes();
}
inline void Span::set_allocated_attributes(::google::devtools::cloudtrace::v2::Span_Attributes* attributes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete attributes_;
  }
  if (attributes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(attributes);
    if (message_arena != submessage_arena) {
      attributes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attributes, submessage_arena);
    }
    
  } else {
    
  }
  attributes_ = attributes;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.cloudtrace.v2.Span.attributes)
}

// .google.devtools.cloudtrace.v2.StackTrace stack_trace = 8;
inline bool Span::_internal_has_stack_trace() const {
  return this != internal_default_instance() && stack_trace_ != nullptr;
}
inline bool Span::has_stack_trace() const {
  return _internal_has_stack_trace();
}
inline void Span::clear_stack_trace() {
  if (GetArena() == nullptr && stack_trace_ != nullptr) {
    delete stack_trace_;
  }
  stack_trace_ = nullptr;
}
inline const ::google::devtools::cloudtrace::v2::StackTrace& Span::_internal_stack_trace() const {
  const ::google::devtools::cloudtrace::v2::StackTrace* p = stack_trace_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::devtools::cloudtrace::v2::StackTrace&>(
      ::google::devtools::cloudtrace::v2::_StackTrace_default_instance_);
}
inline const ::google::devtools::cloudtrace::v2::StackTrace& Span::stack_trace() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v2.Span.stack_trace)
  return _internal_stack_trace();
}
inline void Span::unsafe_arena_set_allocated_stack_trace(
    ::google::devtools::cloudtrace::v2::StackTrace* stack_trace) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stack_trace_);
  }
  stack_trace_ = stack_trace;
  if (stack_trace) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.devtools.cloudtrace.v2.Span.stack_trace)
}
inline ::google::devtools::cloudtrace::v2::StackTrace* Span::release_stack_trace() {
  
  ::google::devtools::cloudtrace::v2::StackTrace* temp = stack_trace_;
  stack_trace_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::devtools::cloudtrace::v2::StackTrace* Span::unsafe_arena_release_stack_trace() {
  // @@protoc_insertion_point(field_release:google.devtools.cloudtrace.v2.Span.stack_trace)
  
  ::google::devtools::cloudtrace::v2::StackTrace* temp = stack_trace_;
  stack_trace_ = nullptr;
  return temp;
}
inline ::google::devtools::cloudtrace::v2::StackTrace* Span::_internal_mutable_stack_trace() {
  
  if (stack_trace_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::devtools::cloudtrace::v2::StackTrace>(GetArena());
    stack_trace_ = p;
  }
  return stack_trace_;
}
inline ::google::devtools::cloudtrace::v2::StackTrace* Span::mutable_stack_trace() {
  // @@protoc_insertion_point(field_mutable:google.devtools.cloudtrace.v2.Span.stack_trace)
  return _internal_mutable_stack_trace();
}
inline void Span::set_allocated_stack_trace(::google::devtools::cloudtrace::v2::StackTrace* stack_trace) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete stack_trace_;
  }
  if (stack_trace) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stack_trace);
    if (message_arena != submessage_arena) {
      stack_trace = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stack_trace, submessage_arena);
    }
    
  } else {
    
  }
  stack_trace_ = stack_trace;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.cloudtrace.v2.Span.stack_trace)
}

// .google.devtools.cloudtrace.v2.Span.TimeEvents time_events = 9;
inline bool Span::_internal_has_time_events() const {
  return this != internal_default_instance() && time_events_ != nullptr;
}
inline bool Span::has_time_events() const {
  return _internal_has_time_events();
}
inline void Span::clear_time_events() {
  if (GetArena() == nullptr && time_events_ != nullptr) {
    delete time_events_;
  }
  time_events_ = nullptr;
}
inline const ::google::devtools::cloudtrace::v2::Span_TimeEvents& Span::_internal_time_events() const {
  const ::google::devtools::cloudtrace::v2::Span_TimeEvents* p = time_events_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::devtools::cloudtrace::v2::Span_TimeEvents&>(
      ::google::devtools::cloudtrace::v2::_Span_TimeEvents_default_instance_);
}
inline const ::google::devtools::cloudtrace::v2::Span_TimeEvents& Span::time_events() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v2.Span.time_events)
  return _internal_time_events();
}
inline void Span::unsafe_arena_set_allocated_time_events(
    ::google::devtools::cloudtrace::v2::Span_TimeEvents* time_events) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_events_);
  }
  time_events_ = time_events;
  if (time_events) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.devtools.cloudtrace.v2.Span.time_events)
}
inline ::google::devtools::cloudtrace::v2::Span_TimeEvents* Span::release_time_events() {
  
  ::google::devtools::cloudtrace::v2::Span_TimeEvents* temp = time_events_;
  time_events_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::devtools::cloudtrace::v2::Span_TimeEvents* Span::unsafe_arena_release_time_events() {
  // @@protoc_insertion_point(field_release:google.devtools.cloudtrace.v2.Span.time_events)
  
  ::google::devtools::cloudtrace::v2::Span_TimeEvents* temp = time_events_;
  time_events_ = nullptr;
  return temp;
}
inline ::google::devtools::cloudtrace::v2::Span_TimeEvents* Span::_internal_mutable_time_events() {
  
  if (time_events_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::devtools::cloudtrace::v2::Span_TimeEvents>(GetArena());
    time_events_ = p;
  }
  return time_events_;
}
inline ::google::devtools::cloudtrace::v2::Span_TimeEvents* Span::mutable_time_events() {
  // @@protoc_insertion_point(field_mutable:google.devtools.cloudtrace.v2.Span.time_events)
  return _internal_mutable_time_events();
}
inline void Span::set_allocated_time_events(::google::devtools::cloudtrace::v2::Span_TimeEvents* time_events) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete time_events_;
  }
  if (time_events) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(time_events);
    if (message_arena != submessage_arena) {
      time_events = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_events, submessage_arena);
    }
    
  } else {
    
  }
  time_events_ = time_events;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.cloudtrace.v2.Span.time_events)
}

// .google.devtools.cloudtrace.v2.Span.Links links = 10;
inline bool Span::_internal_has_links() const {
  return this != internal_default_instance() && links_ != nullptr;
}
inline bool Span::has_links() const {
  return _internal_has_links();
}
inline void Span::clear_links() {
  if (GetArena() == nullptr && links_ != nullptr) {
    delete links_;
  }
  links_ = nullptr;
}
inline const ::google::devtools::cloudtrace::v2::Span_Links& Span::_internal_links() const {
  const ::google::devtools::cloudtrace::v2::Span_Links* p = links_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::devtools::cloudtrace::v2::Span_Links&>(
      ::google::devtools::cloudtrace::v2::_Span_Links_default_instance_);
}
inline const ::google::devtools::cloudtrace::v2::Span_Links& Span::links() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v2.Span.links)
  return _internal_links();
}
inline void Span::unsafe_arena_set_allocated_links(
    ::google::devtools::cloudtrace::v2::Span_Links* links) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(links_);
  }
  links_ = links;
  if (links) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.devtools.cloudtrace.v2.Span.links)
}
inline ::google::devtools::cloudtrace::v2::Span_Links* Span::release_links() {
  
  ::google::devtools::cloudtrace::v2::Span_Links* temp = links_;
  links_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::devtools::cloudtrace::v2::Span_Links* Span::unsafe_arena_release_links() {
  // @@protoc_insertion_point(field_release:google.devtools.cloudtrace.v2.Span.links)
  
  ::google::devtools::cloudtrace::v2::Span_Links* temp = links_;
  links_ = nullptr;
  return temp;
}
inline ::google::devtools::cloudtrace::v2::Span_Links* Span::_internal_mutable_links() {
  
  if (links_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::devtools::cloudtrace::v2::Span_Links>(GetArena());
    links_ = p;
  }
  return links_;
}
inline ::google::devtools::cloudtrace::v2::Span_Links* Span::mutable_links() {
  // @@protoc_insertion_point(field_mutable:google.devtools.cloudtrace.v2.Span.links)
  return _internal_mutable_links();
}
inline void Span::set_allocated_links(::google::devtools::cloudtrace::v2::Span_Links* links) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete links_;
  }
  if (links) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(links);
    if (message_arena != submessage_arena) {
      links = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, links, submessage_arena);
    }
    
  } else {
    
  }
  links_ = links;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.cloudtrace.v2.Span.links)
}

// .google.rpc.Status status = 11 [(.google.api.field_behavior) = OPTIONAL];
inline bool Span::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool Span::has_status() const {
  return _internal_has_status();
}
inline const ::google::rpc::Status& Span::_internal_status() const {
  const ::google::rpc::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::rpc::Status&>(
      ::google::rpc::_Status_default_instance_);
}
inline const ::google::rpc::Status& Span::status() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v2.Span.status)
  return _internal_status();
}
inline void Span::unsafe_arena_set_allocated_status(
    ::google::rpc::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.devtools.cloudtrace.v2.Span.status)
}
inline ::google::rpc::Status* Span::release_status() {
  
  ::google::rpc::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::rpc::Status* Span::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:google.devtools.cloudtrace.v2.Span.status)
  
  ::google::rpc::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::google::rpc::Status* Span::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::rpc::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::google::rpc::Status* Span::mutable_status() {
  // @@protoc_insertion_point(field_mutable:google.devtools.cloudtrace.v2.Span.status)
  return _internal_mutable_status();
}
inline void Span::set_allocated_status(::google::rpc::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.cloudtrace.v2.Span.status)
}

// .google.protobuf.BoolValue same_process_as_parent_span = 12 [(.google.api.field_behavior) = OPTIONAL];
inline bool Span::_internal_has_same_process_as_parent_span() const {
  return this != internal_default_instance() && same_process_as_parent_span_ != nullptr;
}
inline bool Span::has_same_process_as_parent_span() const {
  return _internal_has_same_process_as_parent_span();
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& Span::_internal_same_process_as_parent_span() const {
  const PROTOBUF_NAMESPACE_ID::BoolValue* p = same_process_as_parent_span_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::BoolValue&>(
      PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& Span::same_process_as_parent_span() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v2.Span.same_process_as_parent_span)
  return _internal_same_process_as_parent_span();
}
inline void Span::unsafe_arena_set_allocated_same_process_as_parent_span(
    PROTOBUF_NAMESPACE_ID::BoolValue* same_process_as_parent_span) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(same_process_as_parent_span_);
  }
  same_process_as_parent_span_ = same_process_as_parent_span;
  if (same_process_as_parent_span) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.devtools.cloudtrace.v2.Span.same_process_as_parent_span)
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* Span::release_same_process_as_parent_span() {
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = same_process_as_parent_span_;
  same_process_as_parent_span_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* Span::unsafe_arena_release_same_process_as_parent_span() {
  // @@protoc_insertion_point(field_release:google.devtools.cloudtrace.v2.Span.same_process_as_parent_span)
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = same_process_as_parent_span_;
  same_process_as_parent_span_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* Span::_internal_mutable_same_process_as_parent_span() {
  
  if (same_process_as_parent_span_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::BoolValue>(GetArena());
    same_process_as_parent_span_ = p;
  }
  return same_process_as_parent_span_;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* Span::mutable_same_process_as_parent_span() {
  // @@protoc_insertion_point(field_mutable:google.devtools.cloudtrace.v2.Span.same_process_as_parent_span)
  return _internal_mutable_same_process_as_parent_span();
}
inline void Span::set_allocated_same_process_as_parent_span(PROTOBUF_NAMESPACE_ID::BoolValue* same_process_as_parent_span) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(same_process_as_parent_span_);
  }
  if (same_process_as_parent_span) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(same_process_as_parent_span)->GetArena();
    if (message_arena != submessage_arena) {
      same_process_as_parent_span = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, same_process_as_parent_span, submessage_arena);
    }
    
  } else {
    
  }
  same_process_as_parent_span_ = same_process_as_parent_span;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.cloudtrace.v2.Span.same_process_as_parent_span)
}

// .google.protobuf.Int32Value child_span_count = 13 [(.google.api.field_behavior) = OPTIONAL];
inline bool Span::_internal_has_child_span_count() const {
  return this != internal_default_instance() && child_span_count_ != nullptr;
}
inline bool Span::has_child_span_count() const {
  return _internal_has_child_span_count();
}
inline const PROTOBUF_NAMESPACE_ID::Int32Value& Span::_internal_child_span_count() const {
  const PROTOBUF_NAMESPACE_ID::Int32Value* p = child_span_count_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Int32Value&>(
      PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Int32Value& Span::child_span_count() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v2.Span.child_span_count)
  return _internal_child_span_count();
}
inline void Span::unsafe_arena_set_allocated_child_span_count(
    PROTOBUF_NAMESPACE_ID::Int32Value* child_span_count) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(child_span_count_);
  }
  child_span_count_ = child_span_count;
  if (child_span_count) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.devtools.cloudtrace.v2.Span.child_span_count)
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* Span::release_child_span_count() {
  
  PROTOBUF_NAMESPACE_ID::Int32Value* temp = child_span_count_;
  child_span_count_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* Span::unsafe_arena_release_child_span_count() {
  // @@protoc_insertion_point(field_release:google.devtools.cloudtrace.v2.Span.child_span_count)
  
  PROTOBUF_NAMESPACE_ID::Int32Value* temp = child_span_count_;
  child_span_count_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* Span::_internal_mutable_child_span_count() {
  
  if (child_span_count_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Int32Value>(GetArena());
    child_span_count_ = p;
  }
  return child_span_count_;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* Span::mutable_child_span_count() {
  // @@protoc_insertion_point(field_mutable:google.devtools.cloudtrace.v2.Span.child_span_count)
  return _internal_mutable_child_span_count();
}
inline void Span::set_allocated_child_span_count(PROTOBUF_NAMESPACE_ID::Int32Value* child_span_count) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(child_span_count_);
  }
  if (child_span_count) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(child_span_count)->GetArena();
    if (message_arena != submessage_arena) {
      child_span_count = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, child_span_count, submessage_arena);
    }
    
  } else {
    
  }
  child_span_count_ = child_span_count;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.cloudtrace.v2.Span.child_span_count)
}

// .google.devtools.cloudtrace.v2.Span.SpanKind span_kind = 14 [(.google.api.field_behavior) = OPTIONAL];
inline void Span::clear_span_kind() {
  span_kind_ = 0;
}
inline ::google::devtools::cloudtrace::v2::Span_SpanKind Span::_internal_span_kind() const {
  return static_cast< ::google::devtools::cloudtrace::v2::Span_SpanKind >(span_kind_);
}
inline ::google::devtools::cloudtrace::v2::Span_SpanKind Span::span_kind() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v2.Span.span_kind)
  return _internal_span_kind();
}
inline void Span::_internal_set_span_kind(::google::devtools::cloudtrace::v2::Span_SpanKind value) {
  
  span_kind_ = value;
}
inline void Span::set_span_kind(::google::devtools::cloudtrace::v2::Span_SpanKind value) {
  _internal_set_span_kind(value);
  // @@protoc_insertion_point(field_set:google.devtools.cloudtrace.v2.Span.span_kind)
}

// -------------------------------------------------------------------

// AttributeValue

// .google.devtools.cloudtrace.v2.TruncatableString string_value = 1;
inline bool AttributeValue::_internal_has_string_value() const {
  return value_case() == kStringValue;
}
inline bool AttributeValue::has_string_value() const {
  return _internal_has_string_value();
}
inline void AttributeValue::set_has_string_value() {
  _oneof_case_[0] = kStringValue;
}
inline void AttributeValue::clear_string_value() {
  if (_internal_has_string_value()) {
    if (GetArena() == nullptr) {
      delete value_.string_value_;
    }
    clear_has_value();
  }
}
inline ::google::devtools::cloudtrace::v2::TruncatableString* AttributeValue::release_string_value() {
  // @@protoc_insertion_point(field_release:google.devtools.cloudtrace.v2.AttributeValue.string_value)
  if (_internal_has_string_value()) {
    clear_has_value();
      ::google::devtools::cloudtrace::v2::TruncatableString* temp = value_.string_value_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.string_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::devtools::cloudtrace::v2::TruncatableString& AttributeValue::_internal_string_value() const {
  return _internal_has_string_value()
      ? *value_.string_value_
      : reinterpret_cast< ::google::devtools::cloudtrace::v2::TruncatableString&>(::google::devtools::cloudtrace::v2::_TruncatableString_default_instance_);
}
inline const ::google::devtools::cloudtrace::v2::TruncatableString& AttributeValue::string_value() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v2.AttributeValue.string_value)
  return _internal_string_value();
}
inline ::google::devtools::cloudtrace::v2::TruncatableString* AttributeValue::unsafe_arena_release_string_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.devtools.cloudtrace.v2.AttributeValue.string_value)
  if (_internal_has_string_value()) {
    clear_has_value();
    ::google::devtools::cloudtrace::v2::TruncatableString* temp = value_.string_value_;
    value_.string_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AttributeValue::unsafe_arena_set_allocated_string_value(::google::devtools::cloudtrace::v2::TruncatableString* string_value) {
  clear_value();
  if (string_value) {
    set_has_string_value();
    value_.string_value_ = string_value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.devtools.cloudtrace.v2.AttributeValue.string_value)
}
inline ::google::devtools::cloudtrace::v2::TruncatableString* AttributeValue::_internal_mutable_string_value() {
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_ = CreateMaybeMessage< ::google::devtools::cloudtrace::v2::TruncatableString >(GetArena());
  }
  return value_.string_value_;
}
inline ::google::devtools::cloudtrace::v2::TruncatableString* AttributeValue::mutable_string_value() {
  // @@protoc_insertion_point(field_mutable:google.devtools.cloudtrace.v2.AttributeValue.string_value)
  return _internal_mutable_string_value();
}

// int64 int_value = 2;
inline bool AttributeValue::_internal_has_int_value() const {
  return value_case() == kIntValue;
}
inline bool AttributeValue::has_int_value() const {
  return _internal_has_int_value();
}
inline void AttributeValue::set_has_int_value() {
  _oneof_case_[0] = kIntValue;
}
inline void AttributeValue::clear_int_value() {
  if (_internal_has_int_value()) {
    value_.int_value_ = PROTOBUF_LONGLONG(0);
    clear_has_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AttributeValue::_internal_int_value() const {
  if (_internal_has_int_value()) {
    return value_.int_value_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void AttributeValue::_internal_set_int_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_int_value()) {
    clear_value();
    set_has_int_value();
  }
  value_.int_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AttributeValue::int_value() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v2.AttributeValue.int_value)
  return _internal_int_value();
}
inline void AttributeValue::set_int_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_int_value(value);
  // @@protoc_insertion_point(field_set:google.devtools.cloudtrace.v2.AttributeValue.int_value)
}

// bool bool_value = 3;
inline bool AttributeValue::_internal_has_bool_value() const {
  return value_case() == kBoolValue;
}
inline bool AttributeValue::has_bool_value() const {
  return _internal_has_bool_value();
}
inline void AttributeValue::set_has_bool_value() {
  _oneof_case_[0] = kBoolValue;
}
inline void AttributeValue::clear_bool_value() {
  if (_internal_has_bool_value()) {
    value_.bool_value_ = false;
    clear_has_value();
  }
}
inline bool AttributeValue::_internal_bool_value() const {
  if (_internal_has_bool_value()) {
    return value_.bool_value_;
  }
  return false;
}
inline void AttributeValue::_internal_set_bool_value(bool value) {
  if (!_internal_has_bool_value()) {
    clear_value();
    set_has_bool_value();
  }
  value_.bool_value_ = value;
}
inline bool AttributeValue::bool_value() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v2.AttributeValue.bool_value)
  return _internal_bool_value();
}
inline void AttributeValue::set_bool_value(bool value) {
  _internal_set_bool_value(value);
  // @@protoc_insertion_point(field_set:google.devtools.cloudtrace.v2.AttributeValue.bool_value)
}

inline bool AttributeValue::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void AttributeValue::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline AttributeValue::ValueCase AttributeValue::value_case() const {
  return AttributeValue::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// StackTrace_StackFrame

// .google.devtools.cloudtrace.v2.TruncatableString function_name = 1;
inline bool StackTrace_StackFrame::_internal_has_function_name() const {
  return this != internal_default_instance() && function_name_ != nullptr;
}
inline bool StackTrace_StackFrame::has_function_name() const {
  return _internal_has_function_name();
}
inline void StackTrace_StackFrame::clear_function_name() {
  if (GetArena() == nullptr && function_name_ != nullptr) {
    delete function_name_;
  }
  function_name_ = nullptr;
}
inline const ::google::devtools::cloudtrace::v2::TruncatableString& StackTrace_StackFrame::_internal_function_name() const {
  const ::google::devtools::cloudtrace::v2::TruncatableString* p = function_name_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::devtools::cloudtrace::v2::TruncatableString&>(
      ::google::devtools::cloudtrace::v2::_TruncatableString_default_instance_);
}
inline const ::google::devtools::cloudtrace::v2::TruncatableString& StackTrace_StackFrame::function_name() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v2.StackTrace.StackFrame.function_name)
  return _internal_function_name();
}
inline void StackTrace_StackFrame::unsafe_arena_set_allocated_function_name(
    ::google::devtools::cloudtrace::v2::TruncatableString* function_name) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(function_name_);
  }
  function_name_ = function_name;
  if (function_name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.devtools.cloudtrace.v2.StackTrace.StackFrame.function_name)
}
inline ::google::devtools::cloudtrace::v2::TruncatableString* StackTrace_StackFrame::release_function_name() {
  
  ::google::devtools::cloudtrace::v2::TruncatableString* temp = function_name_;
  function_name_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::devtools::cloudtrace::v2::TruncatableString* StackTrace_StackFrame::unsafe_arena_release_function_name() {
  // @@protoc_insertion_point(field_release:google.devtools.cloudtrace.v2.StackTrace.StackFrame.function_name)
  
  ::google::devtools::cloudtrace::v2::TruncatableString* temp = function_name_;
  function_name_ = nullptr;
  return temp;
}
inline ::google::devtools::cloudtrace::v2::TruncatableString* StackTrace_StackFrame::_internal_mutable_function_name() {
  
  if (function_name_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::devtools::cloudtrace::v2::TruncatableString>(GetArena());
    function_name_ = p;
  }
  return function_name_;
}
inline ::google::devtools::cloudtrace::v2::TruncatableString* StackTrace_StackFrame::mutable_function_name() {
  // @@protoc_insertion_point(field_mutable:google.devtools.cloudtrace.v2.StackTrace.StackFrame.function_name)
  return _internal_mutable_function_name();
}
inline void StackTrace_StackFrame::set_allocated_function_name(::google::devtools::cloudtrace::v2::TruncatableString* function_name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete function_name_;
  }
  if (function_name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(function_name);
    if (message_arena != submessage_arena) {
      function_name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, function_name, submessage_arena);
    }
    
  } else {
    
  }
  function_name_ = function_name;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.cloudtrace.v2.StackTrace.StackFrame.function_name)
}

// .google.devtools.cloudtrace.v2.TruncatableString original_function_name = 2;
inline bool StackTrace_StackFrame::_internal_has_original_function_name() const {
  return this != internal_default_instance() && original_function_name_ != nullptr;
}
inline bool StackTrace_StackFrame::has_original_function_name() const {
  return _internal_has_original_function_name();
}
inline void StackTrace_StackFrame::clear_original_function_name() {
  if (GetArena() == nullptr && original_function_name_ != nullptr) {
    delete original_function_name_;
  }
  original_function_name_ = nullptr;
}
inline const ::google::devtools::cloudtrace::v2::TruncatableString& StackTrace_StackFrame::_internal_original_function_name() const {
  const ::google::devtools::cloudtrace::v2::TruncatableString* p = original_function_name_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::devtools::cloudtrace::v2::TruncatableString&>(
      ::google::devtools::cloudtrace::v2::_TruncatableString_default_instance_);
}
inline const ::google::devtools::cloudtrace::v2::TruncatableString& StackTrace_StackFrame::original_function_name() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v2.StackTrace.StackFrame.original_function_name)
  return _internal_original_function_name();
}
inline void StackTrace_StackFrame::unsafe_arena_set_allocated_original_function_name(
    ::google::devtools::cloudtrace::v2::TruncatableString* original_function_name) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(original_function_name_);
  }
  original_function_name_ = original_function_name;
  if (original_function_name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.devtools.cloudtrace.v2.StackTrace.StackFrame.original_function_name)
}
inline ::google::devtools::cloudtrace::v2::TruncatableString* StackTrace_StackFrame::release_original_function_name() {
  
  ::google::devtools::cloudtrace::v2::TruncatableString* temp = original_function_name_;
  original_function_name_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::devtools::cloudtrace::v2::TruncatableString* StackTrace_StackFrame::unsafe_arena_release_original_function_name() {
  // @@protoc_insertion_point(field_release:google.devtools.cloudtrace.v2.StackTrace.StackFrame.original_function_name)
  
  ::google::devtools::cloudtrace::v2::TruncatableString* temp = original_function_name_;
  original_function_name_ = nullptr;
  return temp;
}
inline ::google::devtools::cloudtrace::v2::TruncatableString* StackTrace_StackFrame::_internal_mutable_original_function_name() {
  
  if (original_function_name_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::devtools::cloudtrace::v2::TruncatableString>(GetArena());
    original_function_name_ = p;
  }
  return original_function_name_;
}
inline ::google::devtools::cloudtrace::v2::TruncatableString* StackTrace_StackFrame::mutable_original_function_name() {
  // @@protoc_insertion_point(field_mutable:google.devtools.cloudtrace.v2.StackTrace.StackFrame.original_function_name)
  return _internal_mutable_original_function_name();
}
inline void StackTrace_StackFrame::set_allocated_original_function_name(::google::devtools::cloudtrace::v2::TruncatableString* original_function_name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete original_function_name_;
  }
  if (original_function_name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(original_function_name);
    if (message_arena != submessage_arena) {
      original_function_name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, original_function_name, submessage_arena);
    }
    
  } else {
    
  }
  original_function_name_ = original_function_name;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.cloudtrace.v2.StackTrace.StackFrame.original_function_name)
}

// .google.devtools.cloudtrace.v2.TruncatableString file_name = 3;
inline bool StackTrace_StackFrame::_internal_has_file_name() const {
  return this != internal_default_instance() && file_name_ != nullptr;
}
inline bool StackTrace_StackFrame::has_file_name() const {
  return _internal_has_file_name();
}
inline void StackTrace_StackFrame::clear_file_name() {
  if (GetArena() == nullptr && file_name_ != nullptr) {
    delete file_name_;
  }
  file_name_ = nullptr;
}
inline const ::google::devtools::cloudtrace::v2::TruncatableString& StackTrace_StackFrame::_internal_file_name() const {
  const ::google::devtools::cloudtrace::v2::TruncatableString* p = file_name_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::devtools::cloudtrace::v2::TruncatableString&>(
      ::google::devtools::cloudtrace::v2::_TruncatableString_default_instance_);
}
inline const ::google::devtools::cloudtrace::v2::TruncatableString& StackTrace_StackFrame::file_name() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v2.StackTrace.StackFrame.file_name)
  return _internal_file_name();
}
inline void StackTrace_StackFrame::unsafe_arena_set_allocated_file_name(
    ::google::devtools::cloudtrace::v2::TruncatableString* file_name) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(file_name_);
  }
  file_name_ = file_name;
  if (file_name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.devtools.cloudtrace.v2.StackTrace.StackFrame.file_name)
}
inline ::google::devtools::cloudtrace::v2::TruncatableString* StackTrace_StackFrame::release_file_name() {
  
  ::google::devtools::cloudtrace::v2::TruncatableString* temp = file_name_;
  file_name_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::devtools::cloudtrace::v2::TruncatableString* StackTrace_StackFrame::unsafe_arena_release_file_name() {
  // @@protoc_insertion_point(field_release:google.devtools.cloudtrace.v2.StackTrace.StackFrame.file_name)
  
  ::google::devtools::cloudtrace::v2::TruncatableString* temp = file_name_;
  file_name_ = nullptr;
  return temp;
}
inline ::google::devtools::cloudtrace::v2::TruncatableString* StackTrace_StackFrame::_internal_mutable_file_name() {
  
  if (file_name_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::devtools::cloudtrace::v2::TruncatableString>(GetArena());
    file_name_ = p;
  }
  return file_name_;
}
inline ::google::devtools::cloudtrace::v2::TruncatableString* StackTrace_StackFrame::mutable_file_name() {
  // @@protoc_insertion_point(field_mutable:google.devtools.cloudtrace.v2.StackTrace.StackFrame.file_name)
  return _internal_mutable_file_name();
}
inline void StackTrace_StackFrame::set_allocated_file_name(::google::devtools::cloudtrace::v2::TruncatableString* file_name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete file_name_;
  }
  if (file_name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(file_name);
    if (message_arena != submessage_arena) {
      file_name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, file_name, submessage_arena);
    }
    
  } else {
    
  }
  file_name_ = file_name;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.cloudtrace.v2.StackTrace.StackFrame.file_name)
}

// int64 line_number = 4;
inline void StackTrace_StackFrame::clear_line_number() {
  line_number_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StackTrace_StackFrame::_internal_line_number() const {
  return line_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StackTrace_StackFrame::line_number() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v2.StackTrace.StackFrame.line_number)
  return _internal_line_number();
}
inline void StackTrace_StackFrame::_internal_set_line_number(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  line_number_ = value;
}
inline void StackTrace_StackFrame::set_line_number(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_line_number(value);
  // @@protoc_insertion_point(field_set:google.devtools.cloudtrace.v2.StackTrace.StackFrame.line_number)
}

// int64 column_number = 5;
inline void StackTrace_StackFrame::clear_column_number() {
  column_number_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StackTrace_StackFrame::_internal_column_number() const {
  return column_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StackTrace_StackFrame::column_number() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v2.StackTrace.StackFrame.column_number)
  return _internal_column_number();
}
inline void StackTrace_StackFrame::_internal_set_column_number(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  column_number_ = value;
}
inline void StackTrace_StackFrame::set_column_number(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_column_number(value);
  // @@protoc_insertion_point(field_set:google.devtools.cloudtrace.v2.StackTrace.StackFrame.column_number)
}

// .google.devtools.cloudtrace.v2.Module load_module = 6;
inline bool StackTrace_StackFrame::_internal_has_load_module() const {
  return this != internal_default_instance() && load_module_ != nullptr;
}
inline bool StackTrace_StackFrame::has_load_module() const {
  return _internal_has_load_module();
}
inline void StackTrace_StackFrame::clear_load_module() {
  if (GetArena() == nullptr && load_module_ != nullptr) {
    delete load_module_;
  }
  load_module_ = nullptr;
}
inline const ::google::devtools::cloudtrace::v2::Module& StackTrace_StackFrame::_internal_load_module() const {
  const ::google::devtools::cloudtrace::v2::Module* p = load_module_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::devtools::cloudtrace::v2::Module&>(
      ::google::devtools::cloudtrace::v2::_Module_default_instance_);
}
inline const ::google::devtools::cloudtrace::v2::Module& StackTrace_StackFrame::load_module() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v2.StackTrace.StackFrame.load_module)
  return _internal_load_module();
}
inline void StackTrace_StackFrame::unsafe_arena_set_allocated_load_module(
    ::google::devtools::cloudtrace::v2::Module* load_module) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(load_module_);
  }
  load_module_ = load_module;
  if (load_module) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.devtools.cloudtrace.v2.StackTrace.StackFrame.load_module)
}
inline ::google::devtools::cloudtrace::v2::Module* StackTrace_StackFrame::release_load_module() {
  
  ::google::devtools::cloudtrace::v2::Module* temp = load_module_;
  load_module_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::devtools::cloudtrace::v2::Module* StackTrace_StackFrame::unsafe_arena_release_load_module() {
  // @@protoc_insertion_point(field_release:google.devtools.cloudtrace.v2.StackTrace.StackFrame.load_module)
  
  ::google::devtools::cloudtrace::v2::Module* temp = load_module_;
  load_module_ = nullptr;
  return temp;
}
inline ::google::devtools::cloudtrace::v2::Module* StackTrace_StackFrame::_internal_mutable_load_module() {
  
  if (load_module_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::devtools::cloudtrace::v2::Module>(GetArena());
    load_module_ = p;
  }
  return load_module_;
}
inline ::google::devtools::cloudtrace::v2::Module* StackTrace_StackFrame::mutable_load_module() {
  // @@protoc_insertion_point(field_mutable:google.devtools.cloudtrace.v2.StackTrace.StackFrame.load_module)
  return _internal_mutable_load_module();
}
inline void StackTrace_StackFrame::set_allocated_load_module(::google::devtools::cloudtrace::v2::Module* load_module) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete load_module_;
  }
  if (load_module) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(load_module);
    if (message_arena != submessage_arena) {
      load_module = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, load_module, submessage_arena);
    }
    
  } else {
    
  }
  load_module_ = load_module;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.cloudtrace.v2.StackTrace.StackFrame.load_module)
}

// .google.devtools.cloudtrace.v2.TruncatableString source_version = 7;
inline bool StackTrace_StackFrame::_internal_has_source_version() const {
  return this != internal_default_instance() && source_version_ != nullptr;
}
inline bool StackTrace_StackFrame::has_source_version() const {
  return _internal_has_source_version();
}
inline void StackTrace_StackFrame::clear_source_version() {
  if (GetArena() == nullptr && source_version_ != nullptr) {
    delete source_version_;
  }
  source_version_ = nullptr;
}
inline const ::google::devtools::cloudtrace::v2::TruncatableString& StackTrace_StackFrame::_internal_source_version() const {
  const ::google::devtools::cloudtrace::v2::TruncatableString* p = source_version_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::devtools::cloudtrace::v2::TruncatableString&>(
      ::google::devtools::cloudtrace::v2::_TruncatableString_default_instance_);
}
inline const ::google::devtools::cloudtrace::v2::TruncatableString& StackTrace_StackFrame::source_version() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v2.StackTrace.StackFrame.source_version)
  return _internal_source_version();
}
inline void StackTrace_StackFrame::unsafe_arena_set_allocated_source_version(
    ::google::devtools::cloudtrace::v2::TruncatableString* source_version) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_version_);
  }
  source_version_ = source_version;
  if (source_version) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.devtools.cloudtrace.v2.StackTrace.StackFrame.source_version)
}
inline ::google::devtools::cloudtrace::v2::TruncatableString* StackTrace_StackFrame::release_source_version() {
  
  ::google::devtools::cloudtrace::v2::TruncatableString* temp = source_version_;
  source_version_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::devtools::cloudtrace::v2::TruncatableString* StackTrace_StackFrame::unsafe_arena_release_source_version() {
  // @@protoc_insertion_point(field_release:google.devtools.cloudtrace.v2.StackTrace.StackFrame.source_version)
  
  ::google::devtools::cloudtrace::v2::TruncatableString* temp = source_version_;
  source_version_ = nullptr;
  return temp;
}
inline ::google::devtools::cloudtrace::v2::TruncatableString* StackTrace_StackFrame::_internal_mutable_source_version() {
  
  if (source_version_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::devtools::cloudtrace::v2::TruncatableString>(GetArena());
    source_version_ = p;
  }
  return source_version_;
}
inline ::google::devtools::cloudtrace::v2::TruncatableString* StackTrace_StackFrame::mutable_source_version() {
  // @@protoc_insertion_point(field_mutable:google.devtools.cloudtrace.v2.StackTrace.StackFrame.source_version)
  return _internal_mutable_source_version();
}
inline void StackTrace_StackFrame::set_allocated_source_version(::google::devtools::cloudtrace::v2::TruncatableString* source_version) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete source_version_;
  }
  if (source_version) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(source_version);
    if (message_arena != submessage_arena) {
      source_version = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source_version, submessage_arena);
    }
    
  } else {
    
  }
  source_version_ = source_version;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.cloudtrace.v2.StackTrace.StackFrame.source_version)
}

// -------------------------------------------------------------------

// StackTrace_StackFrames

// repeated .google.devtools.cloudtrace.v2.StackTrace.StackFrame frame = 1;
inline int StackTrace_StackFrames::_internal_frame_size() const {
  return frame_.size();
}
inline int StackTrace_StackFrames::frame_size() const {
  return _internal_frame_size();
}
inline void StackTrace_StackFrames::clear_frame() {
  frame_.Clear();
}
inline ::google::devtools::cloudtrace::v2::StackTrace_StackFrame* StackTrace_StackFrames::mutable_frame(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.cloudtrace.v2.StackTrace.StackFrames.frame)
  return frame_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::devtools::cloudtrace::v2::StackTrace_StackFrame >*
StackTrace_StackFrames::mutable_frame() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.cloudtrace.v2.StackTrace.StackFrames.frame)
  return &frame_;
}
inline const ::google::devtools::cloudtrace::v2::StackTrace_StackFrame& StackTrace_StackFrames::_internal_frame(int index) const {
  return frame_.Get(index);
}
inline const ::google::devtools::cloudtrace::v2::StackTrace_StackFrame& StackTrace_StackFrames::frame(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v2.StackTrace.StackFrames.frame)
  return _internal_frame(index);
}
inline ::google::devtools::cloudtrace::v2::StackTrace_StackFrame* StackTrace_StackFrames::_internal_add_frame() {
  return frame_.Add();
}
inline ::google::devtools::cloudtrace::v2::StackTrace_StackFrame* StackTrace_StackFrames::add_frame() {
  // @@protoc_insertion_point(field_add:google.devtools.cloudtrace.v2.StackTrace.StackFrames.frame)
  return _internal_add_frame();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::devtools::cloudtrace::v2::StackTrace_StackFrame >&
StackTrace_StackFrames::frame() const {
  // @@protoc_insertion_point(field_list:google.devtools.cloudtrace.v2.StackTrace.StackFrames.frame)
  return frame_;
}

// int32 dropped_frames_count = 2;
inline void StackTrace_StackFrames::clear_dropped_frames_count() {
  dropped_frames_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StackTrace_StackFrames::_internal_dropped_frames_count() const {
  return dropped_frames_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StackTrace_StackFrames::dropped_frames_count() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v2.StackTrace.StackFrames.dropped_frames_count)
  return _internal_dropped_frames_count();
}
inline void StackTrace_StackFrames::_internal_set_dropped_frames_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dropped_frames_count_ = value;
}
inline void StackTrace_StackFrames::set_dropped_frames_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dropped_frames_count(value);
  // @@protoc_insertion_point(field_set:google.devtools.cloudtrace.v2.StackTrace.StackFrames.dropped_frames_count)
}

// -------------------------------------------------------------------

// StackTrace

// .google.devtools.cloudtrace.v2.StackTrace.StackFrames stack_frames = 1;
inline bool StackTrace::_internal_has_stack_frames() const {
  return this != internal_default_instance() && stack_frames_ != nullptr;
}
inline bool StackTrace::has_stack_frames() const {
  return _internal_has_stack_frames();
}
inline void StackTrace::clear_stack_frames() {
  if (GetArena() == nullptr && stack_frames_ != nullptr) {
    delete stack_frames_;
  }
  stack_frames_ = nullptr;
}
inline const ::google::devtools::cloudtrace::v2::StackTrace_StackFrames& StackTrace::_internal_stack_frames() const {
  const ::google::devtools::cloudtrace::v2::StackTrace_StackFrames* p = stack_frames_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::devtools::cloudtrace::v2::StackTrace_StackFrames&>(
      ::google::devtools::cloudtrace::v2::_StackTrace_StackFrames_default_instance_);
}
inline const ::google::devtools::cloudtrace::v2::StackTrace_StackFrames& StackTrace::stack_frames() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v2.StackTrace.stack_frames)
  return _internal_stack_frames();
}
inline void StackTrace::unsafe_arena_set_allocated_stack_frames(
    ::google::devtools::cloudtrace::v2::StackTrace_StackFrames* stack_frames) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stack_frames_);
  }
  stack_frames_ = stack_frames;
  if (stack_frames) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.devtools.cloudtrace.v2.StackTrace.stack_frames)
}
inline ::google::devtools::cloudtrace::v2::StackTrace_StackFrames* StackTrace::release_stack_frames() {
  
  ::google::devtools::cloudtrace::v2::StackTrace_StackFrames* temp = stack_frames_;
  stack_frames_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::devtools::cloudtrace::v2::StackTrace_StackFrames* StackTrace::unsafe_arena_release_stack_frames() {
  // @@protoc_insertion_point(field_release:google.devtools.cloudtrace.v2.StackTrace.stack_frames)
  
  ::google::devtools::cloudtrace::v2::StackTrace_StackFrames* temp = stack_frames_;
  stack_frames_ = nullptr;
  return temp;
}
inline ::google::devtools::cloudtrace::v2::StackTrace_StackFrames* StackTrace::_internal_mutable_stack_frames() {
  
  if (stack_frames_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::devtools::cloudtrace::v2::StackTrace_StackFrames>(GetArena());
    stack_frames_ = p;
  }
  return stack_frames_;
}
inline ::google::devtools::cloudtrace::v2::StackTrace_StackFrames* StackTrace::mutable_stack_frames() {
  // @@protoc_insertion_point(field_mutable:google.devtools.cloudtrace.v2.StackTrace.stack_frames)
  return _internal_mutable_stack_frames();
}
inline void StackTrace::set_allocated_stack_frames(::google::devtools::cloudtrace::v2::StackTrace_StackFrames* stack_frames) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete stack_frames_;
  }
  if (stack_frames) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stack_frames);
    if (message_arena != submessage_arena) {
      stack_frames = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stack_frames, submessage_arena);
    }
    
  } else {
    
  }
  stack_frames_ = stack_frames;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.cloudtrace.v2.StackTrace.stack_frames)
}

// int64 stack_trace_hash_id = 2;
inline void StackTrace::clear_stack_trace_hash_id() {
  stack_trace_hash_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StackTrace::_internal_stack_trace_hash_id() const {
  return stack_trace_hash_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StackTrace::stack_trace_hash_id() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v2.StackTrace.stack_trace_hash_id)
  return _internal_stack_trace_hash_id();
}
inline void StackTrace::_internal_set_stack_trace_hash_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  stack_trace_hash_id_ = value;
}
inline void StackTrace::set_stack_trace_hash_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_stack_trace_hash_id(value);
  // @@protoc_insertion_point(field_set:google.devtools.cloudtrace.v2.StackTrace.stack_trace_hash_id)
}

// -------------------------------------------------------------------

// Module

// .google.devtools.cloudtrace.v2.TruncatableString module = 1;
inline bool Module::_internal_has_module() const {
  return this != internal_default_instance() && module_ != nullptr;
}
inline bool Module::has_module() const {
  return _internal_has_module();
}
inline void Module::clear_module() {
  if (GetArena() == nullptr && module_ != nullptr) {
    delete module_;
  }
  module_ = nullptr;
}
inline const ::google::devtools::cloudtrace::v2::TruncatableString& Module::_internal_module() const {
  const ::google::devtools::cloudtrace::v2::TruncatableString* p = module_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::devtools::cloudtrace::v2::TruncatableString&>(
      ::google::devtools::cloudtrace::v2::_TruncatableString_default_instance_);
}
inline const ::google::devtools::cloudtrace::v2::TruncatableString& Module::module() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v2.Module.module)
  return _internal_module();
}
inline void Module::unsafe_arena_set_allocated_module(
    ::google::devtools::cloudtrace::v2::TruncatableString* module) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(module_);
  }
  module_ = module;
  if (module) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.devtools.cloudtrace.v2.Module.module)
}
inline ::google::devtools::cloudtrace::v2::TruncatableString* Module::release_module() {
  
  ::google::devtools::cloudtrace::v2::TruncatableString* temp = module_;
  module_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::devtools::cloudtrace::v2::TruncatableString* Module::unsafe_arena_release_module() {
  // @@protoc_insertion_point(field_release:google.devtools.cloudtrace.v2.Module.module)
  
  ::google::devtools::cloudtrace::v2::TruncatableString* temp = module_;
  module_ = nullptr;
  return temp;
}
inline ::google::devtools::cloudtrace::v2::TruncatableString* Module::_internal_mutable_module() {
  
  if (module_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::devtools::cloudtrace::v2::TruncatableString>(GetArena());
    module_ = p;
  }
  return module_;
}
inline ::google::devtools::cloudtrace::v2::TruncatableString* Module::mutable_module() {
  // @@protoc_insertion_point(field_mutable:google.devtools.cloudtrace.v2.Module.module)
  return _internal_mutable_module();
}
inline void Module::set_allocated_module(::google::devtools::cloudtrace::v2::TruncatableString* module) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete module_;
  }
  if (module) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(module);
    if (message_arena != submessage_arena) {
      module = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, module, submessage_arena);
    }
    
  } else {
    
  }
  module_ = module;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.cloudtrace.v2.Module.module)
}

// .google.devtools.cloudtrace.v2.TruncatableString build_id = 2;
inline bool Module::_internal_has_build_id() const {
  return this != internal_default_instance() && build_id_ != nullptr;
}
inline bool Module::has_build_id() const {
  return _internal_has_build_id();
}
inline void Module::clear_build_id() {
  if (GetArena() == nullptr && build_id_ != nullptr) {
    delete build_id_;
  }
  build_id_ = nullptr;
}
inline const ::google::devtools::cloudtrace::v2::TruncatableString& Module::_internal_build_id() const {
  const ::google::devtools::cloudtrace::v2::TruncatableString* p = build_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::devtools::cloudtrace::v2::TruncatableString&>(
      ::google::devtools::cloudtrace::v2::_TruncatableString_default_instance_);
}
inline const ::google::devtools::cloudtrace::v2::TruncatableString& Module::build_id() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v2.Module.build_id)
  return _internal_build_id();
}
inline void Module::unsafe_arena_set_allocated_build_id(
    ::google::devtools::cloudtrace::v2::TruncatableString* build_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(build_id_);
  }
  build_id_ = build_id;
  if (build_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.devtools.cloudtrace.v2.Module.build_id)
}
inline ::google::devtools::cloudtrace::v2::TruncatableString* Module::release_build_id() {
  
  ::google::devtools::cloudtrace::v2::TruncatableString* temp = build_id_;
  build_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::devtools::cloudtrace::v2::TruncatableString* Module::unsafe_arena_release_build_id() {
  // @@protoc_insertion_point(field_release:google.devtools.cloudtrace.v2.Module.build_id)
  
  ::google::devtools::cloudtrace::v2::TruncatableString* temp = build_id_;
  build_id_ = nullptr;
  return temp;
}
inline ::google::devtools::cloudtrace::v2::TruncatableString* Module::_internal_mutable_build_id() {
  
  if (build_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::devtools::cloudtrace::v2::TruncatableString>(GetArena());
    build_id_ = p;
  }
  return build_id_;
}
inline ::google::devtools::cloudtrace::v2::TruncatableString* Module::mutable_build_id() {
  // @@protoc_insertion_point(field_mutable:google.devtools.cloudtrace.v2.Module.build_id)
  return _internal_mutable_build_id();
}
inline void Module::set_allocated_build_id(::google::devtools::cloudtrace::v2::TruncatableString* build_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete build_id_;
  }
  if (build_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(build_id);
    if (message_arena != submessage_arena) {
      build_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, build_id, submessage_arena);
    }
    
  } else {
    
  }
  build_id_ = build_id;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.cloudtrace.v2.Module.build_id)
}

// -------------------------------------------------------------------

// TruncatableString

// string value = 1;
inline void TruncatableString::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& TruncatableString::value() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v2.TruncatableString.value)
  return _internal_value();
}
inline void TruncatableString::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:google.devtools.cloudtrace.v2.TruncatableString.value)
}
inline std::string* TruncatableString::mutable_value() {
  // @@protoc_insertion_point(field_mutable:google.devtools.cloudtrace.v2.TruncatableString.value)
  return _internal_mutable_value();
}
inline const std::string& TruncatableString::_internal_value() const {
  return value_.Get();
}
inline void TruncatableString::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TruncatableString::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.cloudtrace.v2.TruncatableString.value)
}
inline void TruncatableString::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.devtools.cloudtrace.v2.TruncatableString.value)
}
inline void TruncatableString::set_value(const char* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.devtools.cloudtrace.v2.TruncatableString.value)
}
inline std::string* TruncatableString::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TruncatableString::release_value() {
  // @@protoc_insertion_point(field_release:google.devtools.cloudtrace.v2.TruncatableString.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TruncatableString::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.devtools.cloudtrace.v2.TruncatableString.value)
}

// int32 truncated_byte_count = 2;
inline void TruncatableString::clear_truncated_byte_count() {
  truncated_byte_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TruncatableString::_internal_truncated_byte_count() const {
  return truncated_byte_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TruncatableString::truncated_byte_count() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v2.TruncatableString.truncated_byte_count)
  return _internal_truncated_byte_count();
}
inline void TruncatableString::_internal_set_truncated_byte_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  truncated_byte_count_ = value;
}
inline void TruncatableString::set_truncated_byte_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_truncated_byte_count(value);
  // @@protoc_insertion_point(field_set:google.devtools.cloudtrace.v2.TruncatableString.truncated_byte_count)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace cloudtrace
}  // namespace devtools
}  // namespace google

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::google::devtools::cloudtrace::v2::Span_TimeEvent_MessageEvent_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::devtools::cloudtrace::v2::Span_TimeEvent_MessageEvent_Type>() {
  return ::google::devtools::cloudtrace::v2::Span_TimeEvent_MessageEvent_Type_descriptor();
}
template <> struct is_proto_enum< ::google::devtools::cloudtrace::v2::Span_Link_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::devtools::cloudtrace::v2::Span_Link_Type>() {
  return ::google::devtools::cloudtrace::v2::Span_Link_Type_descriptor();
}
template <> struct is_proto_enum< ::google::devtools::cloudtrace::v2::Span_SpanKind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::devtools::cloudtrace::v2::Span_SpanKind>() {
  return ::google::devtools::cloudtrace::v2::Span_SpanKind_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto
