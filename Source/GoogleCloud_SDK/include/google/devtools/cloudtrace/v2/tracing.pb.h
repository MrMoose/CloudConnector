// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/cloudtrace/v2/tracing.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fdevtools_2fcloudtrace_2fv2_2ftracing_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fdevtools_2fcloudtrace_2fv2_2ftracing_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include "google/api/field_behavior.pb.h"
#include "google/api/resource.pb.h"
#include "google/devtools/cloudtrace/v2/trace.pb.h"
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fdevtools_2fcloudtrace_2fv2_2ftracing_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fdevtools_2fcloudtrace_2fv2_2ftracing_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fdevtools_2fcloudtrace_2fv2_2ftracing_2eproto;
namespace google {
namespace devtools {
namespace cloudtrace {
namespace v2 {
class BatchWriteSpansRequest;
class BatchWriteSpansRequestDefaultTypeInternal;
extern BatchWriteSpansRequestDefaultTypeInternal _BatchWriteSpansRequest_default_instance_;
}  // namespace v2
}  // namespace cloudtrace
}  // namespace devtools
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::devtools::cloudtrace::v2::BatchWriteSpansRequest* Arena::CreateMaybeMessage<::google::devtools::cloudtrace::v2::BatchWriteSpansRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace devtools {
namespace cloudtrace {
namespace v2 {

// ===================================================================

class BatchWriteSpansRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.devtools.cloudtrace.v2.BatchWriteSpansRequest) */ {
 public:
  inline BatchWriteSpansRequest() : BatchWriteSpansRequest(nullptr) {}
  virtual ~BatchWriteSpansRequest();

  BatchWriteSpansRequest(const BatchWriteSpansRequest& from);
  BatchWriteSpansRequest(BatchWriteSpansRequest&& from) noexcept
    : BatchWriteSpansRequest() {
    *this = ::std::move(from);
  }

  inline BatchWriteSpansRequest& operator=(const BatchWriteSpansRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchWriteSpansRequest& operator=(BatchWriteSpansRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BatchWriteSpansRequest& default_instance();

  static inline const BatchWriteSpansRequest* internal_default_instance() {
    return reinterpret_cast<const BatchWriteSpansRequest*>(
               &_BatchWriteSpansRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BatchWriteSpansRequest& a, BatchWriteSpansRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchWriteSpansRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchWriteSpansRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BatchWriteSpansRequest* New() const final {
    return CreateMaybeMessage<BatchWriteSpansRequest>(nullptr);
  }

  BatchWriteSpansRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BatchWriteSpansRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BatchWriteSpansRequest& from);
  void MergeFrom(const BatchWriteSpansRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchWriteSpansRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.devtools.cloudtrace.v2.BatchWriteSpansRequest";
  }
  protected:
  explicit BatchWriteSpansRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fdevtools_2fcloudtrace_2fv2_2ftracing_2eproto);
    return ::descriptor_table_google_2fdevtools_2fcloudtrace_2fv2_2ftracing_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpansFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated .google.devtools.cloudtrace.v2.Span spans = 2 [(.google.api.field_behavior) = REQUIRED];
  int spans_size() const;
  private:
  int _internal_spans_size() const;
  public:
  void clear_spans();
  ::google::devtools::cloudtrace::v2::Span* mutable_spans(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::devtools::cloudtrace::v2::Span >*
      mutable_spans();
  private:
  const ::google::devtools::cloudtrace::v2::Span& _internal_spans(int index) const;
  ::google::devtools::cloudtrace::v2::Span* _internal_add_spans();
  public:
  const ::google::devtools::cloudtrace::v2::Span& spans(int index) const;
  ::google::devtools::cloudtrace::v2::Span* add_spans();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::devtools::cloudtrace::v2::Span >&
      spans() const;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.devtools.cloudtrace.v2.BatchWriteSpansRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::devtools::cloudtrace::v2::Span > spans_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fdevtools_2fcloudtrace_2fv2_2ftracing_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BatchWriteSpansRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void BatchWriteSpansRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& BatchWriteSpansRequest::name() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v2.BatchWriteSpansRequest.name)
  return _internal_name();
}
inline void BatchWriteSpansRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:google.devtools.cloudtrace.v2.BatchWriteSpansRequest.name)
}
inline std::string* BatchWriteSpansRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:google.devtools.cloudtrace.v2.BatchWriteSpansRequest.name)
  return _internal_mutable_name();
}
inline const std::string& BatchWriteSpansRequest::_internal_name() const {
  return name_.Get();
}
inline void BatchWriteSpansRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BatchWriteSpansRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.cloudtrace.v2.BatchWriteSpansRequest.name)
}
inline void BatchWriteSpansRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.devtools.cloudtrace.v2.BatchWriteSpansRequest.name)
}
inline void BatchWriteSpansRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.devtools.cloudtrace.v2.BatchWriteSpansRequest.name)
}
inline std::string* BatchWriteSpansRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BatchWriteSpansRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.devtools.cloudtrace.v2.BatchWriteSpansRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BatchWriteSpansRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.devtools.cloudtrace.v2.BatchWriteSpansRequest.name)
}

// repeated .google.devtools.cloudtrace.v2.Span spans = 2 [(.google.api.field_behavior) = REQUIRED];
inline int BatchWriteSpansRequest::_internal_spans_size() const {
  return spans_.size();
}
inline int BatchWriteSpansRequest::spans_size() const {
  return _internal_spans_size();
}
inline ::google::devtools::cloudtrace::v2::Span* BatchWriteSpansRequest::mutable_spans(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.cloudtrace.v2.BatchWriteSpansRequest.spans)
  return spans_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::devtools::cloudtrace::v2::Span >*
BatchWriteSpansRequest::mutable_spans() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.cloudtrace.v2.BatchWriteSpansRequest.spans)
  return &spans_;
}
inline const ::google::devtools::cloudtrace::v2::Span& BatchWriteSpansRequest::_internal_spans(int index) const {
  return spans_.Get(index);
}
inline const ::google::devtools::cloudtrace::v2::Span& BatchWriteSpansRequest::spans(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v2.BatchWriteSpansRequest.spans)
  return _internal_spans(index);
}
inline ::google::devtools::cloudtrace::v2::Span* BatchWriteSpansRequest::_internal_add_spans() {
  return spans_.Add();
}
inline ::google::devtools::cloudtrace::v2::Span* BatchWriteSpansRequest::add_spans() {
  // @@protoc_insertion_point(field_add:google.devtools.cloudtrace.v2.BatchWriteSpansRequest.spans)
  return _internal_add_spans();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::devtools::cloudtrace::v2::Span >&
BatchWriteSpansRequest::spans() const {
  // @@protoc_insertion_point(field_list:google.devtools.cloudtrace.v2.BatchWriteSpansRequest.spans)
  return spans_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace cloudtrace
}  // namespace devtools
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fdevtools_2fcloudtrace_2fv2_2ftracing_2eproto
