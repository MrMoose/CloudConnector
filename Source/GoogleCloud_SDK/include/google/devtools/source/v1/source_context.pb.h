// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/source/v1/source_context.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto;
namespace google {
namespace devtools {
namespace source {
namespace v1 {
class AliasContext;
struct AliasContextDefaultTypeInternal;
extern AliasContextDefaultTypeInternal _AliasContext_default_instance_;
class CloudRepoSourceContext;
struct CloudRepoSourceContextDefaultTypeInternal;
extern CloudRepoSourceContextDefaultTypeInternal _CloudRepoSourceContext_default_instance_;
class CloudWorkspaceId;
struct CloudWorkspaceIdDefaultTypeInternal;
extern CloudWorkspaceIdDefaultTypeInternal _CloudWorkspaceId_default_instance_;
class CloudWorkspaceSourceContext;
struct CloudWorkspaceSourceContextDefaultTypeInternal;
extern CloudWorkspaceSourceContextDefaultTypeInternal _CloudWorkspaceSourceContext_default_instance_;
class ExtendedSourceContext;
struct ExtendedSourceContextDefaultTypeInternal;
extern ExtendedSourceContextDefaultTypeInternal _ExtendedSourceContext_default_instance_;
class ExtendedSourceContext_LabelsEntry_DoNotUse;
struct ExtendedSourceContext_LabelsEntry_DoNotUseDefaultTypeInternal;
extern ExtendedSourceContext_LabelsEntry_DoNotUseDefaultTypeInternal _ExtendedSourceContext_LabelsEntry_DoNotUse_default_instance_;
class GerritSourceContext;
struct GerritSourceContextDefaultTypeInternal;
extern GerritSourceContextDefaultTypeInternal _GerritSourceContext_default_instance_;
class GitSourceContext;
struct GitSourceContextDefaultTypeInternal;
extern GitSourceContextDefaultTypeInternal _GitSourceContext_default_instance_;
class ProjectRepoId;
struct ProjectRepoIdDefaultTypeInternal;
extern ProjectRepoIdDefaultTypeInternal _ProjectRepoId_default_instance_;
class RepoId;
struct RepoIdDefaultTypeInternal;
extern RepoIdDefaultTypeInternal _RepoId_default_instance_;
class SourceContext;
struct SourceContextDefaultTypeInternal;
extern SourceContextDefaultTypeInternal _SourceContext_default_instance_;
}  // namespace v1
}  // namespace source
}  // namespace devtools
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::devtools::source::v1::AliasContext* Arena::CreateMaybeMessage<::google::devtools::source::v1::AliasContext>(Arena*);
template<> ::google::devtools::source::v1::CloudRepoSourceContext* Arena::CreateMaybeMessage<::google::devtools::source::v1::CloudRepoSourceContext>(Arena*);
template<> ::google::devtools::source::v1::CloudWorkspaceId* Arena::CreateMaybeMessage<::google::devtools::source::v1::CloudWorkspaceId>(Arena*);
template<> ::google::devtools::source::v1::CloudWorkspaceSourceContext* Arena::CreateMaybeMessage<::google::devtools::source::v1::CloudWorkspaceSourceContext>(Arena*);
template<> ::google::devtools::source::v1::ExtendedSourceContext* Arena::CreateMaybeMessage<::google::devtools::source::v1::ExtendedSourceContext>(Arena*);
template<> ::google::devtools::source::v1::ExtendedSourceContext_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage<::google::devtools::source::v1::ExtendedSourceContext_LabelsEntry_DoNotUse>(Arena*);
template<> ::google::devtools::source::v1::GerritSourceContext* Arena::CreateMaybeMessage<::google::devtools::source::v1::GerritSourceContext>(Arena*);
template<> ::google::devtools::source::v1::GitSourceContext* Arena::CreateMaybeMessage<::google::devtools::source::v1::GitSourceContext>(Arena*);
template<> ::google::devtools::source::v1::ProjectRepoId* Arena::CreateMaybeMessage<::google::devtools::source::v1::ProjectRepoId>(Arena*);
template<> ::google::devtools::source::v1::RepoId* Arena::CreateMaybeMessage<::google::devtools::source::v1::RepoId>(Arena*);
template<> ::google::devtools::source::v1::SourceContext* Arena::CreateMaybeMessage<::google::devtools::source::v1::SourceContext>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace devtools {
namespace source {
namespace v1 {

enum AliasContext_Kind : int {
  AliasContext_Kind_ANY = 0,
  AliasContext_Kind_FIXED = 1,
  AliasContext_Kind_MOVABLE = 2,
  AliasContext_Kind_OTHER = 4,
  AliasContext_Kind_AliasContext_Kind_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  AliasContext_Kind_AliasContext_Kind_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool AliasContext_Kind_IsValid(int value);
constexpr AliasContext_Kind AliasContext_Kind_Kind_MIN = AliasContext_Kind_ANY;
constexpr AliasContext_Kind AliasContext_Kind_Kind_MAX = AliasContext_Kind_OTHER;
constexpr int AliasContext_Kind_Kind_ARRAYSIZE = AliasContext_Kind_Kind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AliasContext_Kind_descriptor();
template<typename T>
inline const std::string& AliasContext_Kind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AliasContext_Kind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AliasContext_Kind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AliasContext_Kind_descriptor(), enum_t_value);
}
inline bool AliasContext_Kind_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AliasContext_Kind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AliasContext_Kind>(
    AliasContext_Kind_descriptor(), name, value);
}
// ===================================================================

class SourceContext final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.devtools.source.v1.SourceContext) */ {
 public:
  inline SourceContext() : SourceContext(nullptr) {}
  ~SourceContext() override;
  explicit PROTOBUF_CONSTEXPR SourceContext(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SourceContext(const SourceContext& from);
  SourceContext(SourceContext&& from) noexcept
    : SourceContext() {
    *this = ::std::move(from);
  }

  inline SourceContext& operator=(const SourceContext& from) {
    CopyFrom(from);
    return *this;
  }
  inline SourceContext& operator=(SourceContext&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SourceContext& default_instance() {
    return *internal_default_instance();
  }
  enum ContextCase {
    kCloudRepo = 1,
    kCloudWorkspace = 2,
    kGerrit = 3,
    kGit = 6,
    CONTEXT_NOT_SET = 0,
  };

  static inline const SourceContext* internal_default_instance() {
    return reinterpret_cast<const SourceContext*>(
               &_SourceContext_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SourceContext& a, SourceContext& b) {
    a.Swap(&b);
  }
  inline void Swap(SourceContext* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SourceContext* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SourceContext* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SourceContext>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SourceContext& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SourceContext& from) {
    SourceContext::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SourceContext* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.devtools.source.v1.SourceContext";
  }
  protected:
  explicit SourceContext(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCloudRepoFieldNumber = 1,
    kCloudWorkspaceFieldNumber = 2,
    kGerritFieldNumber = 3,
    kGitFieldNumber = 6,
  };
  // .google.devtools.source.v1.CloudRepoSourceContext cloud_repo = 1;
  bool has_cloud_repo() const;
  private:
  bool _internal_has_cloud_repo() const;
  public:
  void clear_cloud_repo();
  const ::google::devtools::source::v1::CloudRepoSourceContext& cloud_repo() const;
  PROTOBUF_NODISCARD ::google::devtools::source::v1::CloudRepoSourceContext* release_cloud_repo();
  ::google::devtools::source::v1::CloudRepoSourceContext* mutable_cloud_repo();
  void set_allocated_cloud_repo(::google::devtools::source::v1::CloudRepoSourceContext* cloud_repo);
  private:
  const ::google::devtools::source::v1::CloudRepoSourceContext& _internal_cloud_repo() const;
  ::google::devtools::source::v1::CloudRepoSourceContext* _internal_mutable_cloud_repo();
  public:
  void unsafe_arena_set_allocated_cloud_repo(
      ::google::devtools::source::v1::CloudRepoSourceContext* cloud_repo);
  ::google::devtools::source::v1::CloudRepoSourceContext* unsafe_arena_release_cloud_repo();

  // .google.devtools.source.v1.CloudWorkspaceSourceContext cloud_workspace = 2;
  bool has_cloud_workspace() const;
  private:
  bool _internal_has_cloud_workspace() const;
  public:
  void clear_cloud_workspace();
  const ::google::devtools::source::v1::CloudWorkspaceSourceContext& cloud_workspace() const;
  PROTOBUF_NODISCARD ::google::devtools::source::v1::CloudWorkspaceSourceContext* release_cloud_workspace();
  ::google::devtools::source::v1::CloudWorkspaceSourceContext* mutable_cloud_workspace();
  void set_allocated_cloud_workspace(::google::devtools::source::v1::CloudWorkspaceSourceContext* cloud_workspace);
  private:
  const ::google::devtools::source::v1::CloudWorkspaceSourceContext& _internal_cloud_workspace() const;
  ::google::devtools::source::v1::CloudWorkspaceSourceContext* _internal_mutable_cloud_workspace();
  public:
  void unsafe_arena_set_allocated_cloud_workspace(
      ::google::devtools::source::v1::CloudWorkspaceSourceContext* cloud_workspace);
  ::google::devtools::source::v1::CloudWorkspaceSourceContext* unsafe_arena_release_cloud_workspace();

  // .google.devtools.source.v1.GerritSourceContext gerrit = 3;
  bool has_gerrit() const;
  private:
  bool _internal_has_gerrit() const;
  public:
  void clear_gerrit();
  const ::google::devtools::source::v1::GerritSourceContext& gerrit() const;
  PROTOBUF_NODISCARD ::google::devtools::source::v1::GerritSourceContext* release_gerrit();
  ::google::devtools::source::v1::GerritSourceContext* mutable_gerrit();
  void set_allocated_gerrit(::google::devtools::source::v1::GerritSourceContext* gerrit);
  private:
  const ::google::devtools::source::v1::GerritSourceContext& _internal_gerrit() const;
  ::google::devtools::source::v1::GerritSourceContext* _internal_mutable_gerrit();
  public:
  void unsafe_arena_set_allocated_gerrit(
      ::google::devtools::source::v1::GerritSourceContext* gerrit);
  ::google::devtools::source::v1::GerritSourceContext* unsafe_arena_release_gerrit();

  // .google.devtools.source.v1.GitSourceContext git = 6;
  bool has_git() const;
  private:
  bool _internal_has_git() const;
  public:
  void clear_git();
  const ::google::devtools::source::v1::GitSourceContext& git() const;
  PROTOBUF_NODISCARD ::google::devtools::source::v1::GitSourceContext* release_git();
  ::google::devtools::source::v1::GitSourceContext* mutable_git();
  void set_allocated_git(::google::devtools::source::v1::GitSourceContext* git);
  private:
  const ::google::devtools::source::v1::GitSourceContext& _internal_git() const;
  ::google::devtools::source::v1::GitSourceContext* _internal_mutable_git();
  public:
  void unsafe_arena_set_allocated_git(
      ::google::devtools::source::v1::GitSourceContext* git);
  ::google::devtools::source::v1::GitSourceContext* unsafe_arena_release_git();

  void clear_context();
  ContextCase context_case() const;
  // @@protoc_insertion_point(class_scope:google.devtools.source.v1.SourceContext)
 private:
  class _Internal;
  void set_has_cloud_repo();
  void set_has_cloud_workspace();
  void set_has_gerrit();
  void set_has_git();

  inline bool has_context() const;
  inline void clear_has_context();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union ContextUnion {
      constexpr ContextUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::google::devtools::source::v1::CloudRepoSourceContext* cloud_repo_;
      ::google::devtools::source::v1::CloudWorkspaceSourceContext* cloud_workspace_;
      ::google::devtools::source::v1::GerritSourceContext* gerrit_;
      ::google::devtools::source::v1::GitSourceContext* git_;
    } context_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto;
};
// -------------------------------------------------------------------

class ExtendedSourceContext_LabelsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ExtendedSourceContext_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ExtendedSourceContext_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  ExtendedSourceContext_LabelsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR ExtendedSourceContext_LabelsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit ExtendedSourceContext_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ExtendedSourceContext_LabelsEntry_DoNotUse& other);
  static const ExtendedSourceContext_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ExtendedSourceContext_LabelsEntry_DoNotUse*>(&_ExtendedSourceContext_LabelsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.devtools.source.v1.ExtendedSourceContext.LabelsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.devtools.source.v1.ExtendedSourceContext.LabelsEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto;
};

// -------------------------------------------------------------------

class ExtendedSourceContext final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.devtools.source.v1.ExtendedSourceContext) */ {
 public:
  inline ExtendedSourceContext() : ExtendedSourceContext(nullptr) {}
  ~ExtendedSourceContext() override;
  explicit PROTOBUF_CONSTEXPR ExtendedSourceContext(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExtendedSourceContext(const ExtendedSourceContext& from);
  ExtendedSourceContext(ExtendedSourceContext&& from) noexcept
    : ExtendedSourceContext() {
    *this = ::std::move(from);
  }

  inline ExtendedSourceContext& operator=(const ExtendedSourceContext& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExtendedSourceContext& operator=(ExtendedSourceContext&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExtendedSourceContext& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExtendedSourceContext* internal_default_instance() {
    return reinterpret_cast<const ExtendedSourceContext*>(
               &_ExtendedSourceContext_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ExtendedSourceContext& a, ExtendedSourceContext& b) {
    a.Swap(&b);
  }
  inline void Swap(ExtendedSourceContext* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExtendedSourceContext* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExtendedSourceContext* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExtendedSourceContext>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExtendedSourceContext& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ExtendedSourceContext& from) {
    ExtendedSourceContext::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExtendedSourceContext* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.devtools.source.v1.ExtendedSourceContext";
  }
  protected:
  explicit ExtendedSourceContext(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 2,
    kContextFieldNumber = 1,
  };
  // map<string, string> labels = 2;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_labels();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_labels();

  // .google.devtools.source.v1.SourceContext context = 1;
  bool has_context() const;
  private:
  bool _internal_has_context() const;
  public:
  void clear_context();
  const ::google::devtools::source::v1::SourceContext& context() const;
  PROTOBUF_NODISCARD ::google::devtools::source::v1::SourceContext* release_context();
  ::google::devtools::source::v1::SourceContext* mutable_context();
  void set_allocated_context(::google::devtools::source::v1::SourceContext* context);
  private:
  const ::google::devtools::source::v1::SourceContext& _internal_context() const;
  ::google::devtools::source::v1::SourceContext* _internal_mutable_context();
  public:
  void unsafe_arena_set_allocated_context(
      ::google::devtools::source::v1::SourceContext* context);
  ::google::devtools::source::v1::SourceContext* unsafe_arena_release_context();

  // @@protoc_insertion_point(class_scope:google.devtools.source.v1.ExtendedSourceContext)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        ExtendedSourceContext_LabelsEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> labels_;
    ::google::devtools::source::v1::SourceContext* context_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto;
};
// -------------------------------------------------------------------

class AliasContext final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.devtools.source.v1.AliasContext) */ {
 public:
  inline AliasContext() : AliasContext(nullptr) {}
  ~AliasContext() override;
  explicit PROTOBUF_CONSTEXPR AliasContext(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AliasContext(const AliasContext& from);
  AliasContext(AliasContext&& from) noexcept
    : AliasContext() {
    *this = ::std::move(from);
  }

  inline AliasContext& operator=(const AliasContext& from) {
    CopyFrom(from);
    return *this;
  }
  inline AliasContext& operator=(AliasContext&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AliasContext& default_instance() {
    return *internal_default_instance();
  }
  static inline const AliasContext* internal_default_instance() {
    return reinterpret_cast<const AliasContext*>(
               &_AliasContext_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AliasContext& a, AliasContext& b) {
    a.Swap(&b);
  }
  inline void Swap(AliasContext* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AliasContext* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AliasContext* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AliasContext>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AliasContext& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AliasContext& from) {
    AliasContext::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AliasContext* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.devtools.source.v1.AliasContext";
  }
  protected:
  explicit AliasContext(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AliasContext_Kind Kind;
  static constexpr Kind ANY =
    AliasContext_Kind_ANY;
  static constexpr Kind FIXED =
    AliasContext_Kind_FIXED;
  static constexpr Kind MOVABLE =
    AliasContext_Kind_MOVABLE;
  static constexpr Kind OTHER =
    AliasContext_Kind_OTHER;
  static inline bool Kind_IsValid(int value) {
    return AliasContext_Kind_IsValid(value);
  }
  static constexpr Kind Kind_MIN =
    AliasContext_Kind_Kind_MIN;
  static constexpr Kind Kind_MAX =
    AliasContext_Kind_Kind_MAX;
  static constexpr int Kind_ARRAYSIZE =
    AliasContext_Kind_Kind_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Kind_descriptor() {
    return AliasContext_Kind_descriptor();
  }
  template<typename T>
  static inline const std::string& Kind_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Kind>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Kind_Name.");
    return AliasContext_Kind_Name(enum_t_value);
  }
  static inline bool Kind_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Kind* value) {
    return AliasContext_Kind_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kKindFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.devtools.source.v1.AliasContext.Kind kind = 1;
  void clear_kind();
  ::google::devtools::source::v1::AliasContext_Kind kind() const;
  void set_kind(::google::devtools::source::v1::AliasContext_Kind value);
  private:
  ::google::devtools::source::v1::AliasContext_Kind _internal_kind() const;
  void _internal_set_kind(::google::devtools::source::v1::AliasContext_Kind value);
  public:

  // @@protoc_insertion_point(class_scope:google.devtools.source.v1.AliasContext)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int kind_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto;
};
// -------------------------------------------------------------------

class CloudRepoSourceContext final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.devtools.source.v1.CloudRepoSourceContext) */ {
 public:
  inline CloudRepoSourceContext() : CloudRepoSourceContext(nullptr) {}
  ~CloudRepoSourceContext() override;
  explicit PROTOBUF_CONSTEXPR CloudRepoSourceContext(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CloudRepoSourceContext(const CloudRepoSourceContext& from);
  CloudRepoSourceContext(CloudRepoSourceContext&& from) noexcept
    : CloudRepoSourceContext() {
    *this = ::std::move(from);
  }

  inline CloudRepoSourceContext& operator=(const CloudRepoSourceContext& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloudRepoSourceContext& operator=(CloudRepoSourceContext&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CloudRepoSourceContext& default_instance() {
    return *internal_default_instance();
  }
  enum RevisionCase {
    kRevisionId = 2,
    kAliasName = 3,
    kAliasContext = 4,
    REVISION_NOT_SET = 0,
  };

  static inline const CloudRepoSourceContext* internal_default_instance() {
    return reinterpret_cast<const CloudRepoSourceContext*>(
               &_CloudRepoSourceContext_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CloudRepoSourceContext& a, CloudRepoSourceContext& b) {
    a.Swap(&b);
  }
  inline void Swap(CloudRepoSourceContext* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CloudRepoSourceContext* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CloudRepoSourceContext* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CloudRepoSourceContext>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CloudRepoSourceContext& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CloudRepoSourceContext& from) {
    CloudRepoSourceContext::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloudRepoSourceContext* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.devtools.source.v1.CloudRepoSourceContext";
  }
  protected:
  explicit CloudRepoSourceContext(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRepoIdFieldNumber = 1,
    kRevisionIdFieldNumber = 2,
    kAliasNameFieldNumber = 3,
    kAliasContextFieldNumber = 4,
  };
  // .google.devtools.source.v1.RepoId repo_id = 1;
  bool has_repo_id() const;
  private:
  bool _internal_has_repo_id() const;
  public:
  void clear_repo_id();
  const ::google::devtools::source::v1::RepoId& repo_id() const;
  PROTOBUF_NODISCARD ::google::devtools::source::v1::RepoId* release_repo_id();
  ::google::devtools::source::v1::RepoId* mutable_repo_id();
  void set_allocated_repo_id(::google::devtools::source::v1::RepoId* repo_id);
  private:
  const ::google::devtools::source::v1::RepoId& _internal_repo_id() const;
  ::google::devtools::source::v1::RepoId* _internal_mutable_repo_id();
  public:
  void unsafe_arena_set_allocated_repo_id(
      ::google::devtools::source::v1::RepoId* repo_id);
  ::google::devtools::source::v1::RepoId* unsafe_arena_release_repo_id();

  // string revision_id = 2;
  bool has_revision_id() const;
  private:
  bool _internal_has_revision_id() const;
  public:
  void clear_revision_id();
  const std::string& revision_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_revision_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_revision_id();
  PROTOBUF_NODISCARD std::string* release_revision_id();
  void set_allocated_revision_id(std::string* revision_id);
  private:
  const std::string& _internal_revision_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_revision_id(const std::string& value);
  std::string* _internal_mutable_revision_id();
  public:

  // string alias_name = 3 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_alias_name() const;
  private:
  bool _internal_has_alias_name() const;
  public:
  PROTOBUF_DEPRECATED void clear_alias_name();
  PROTOBUF_DEPRECATED const std::string& alias_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  PROTOBUF_DEPRECATED void set_alias_name(ArgT0&& arg0, ArgT... args);
  PROTOBUF_DEPRECATED std::string* mutable_alias_name();
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED std::string* release_alias_name();
  PROTOBUF_DEPRECATED void set_allocated_alias_name(std::string* alias_name);
  private:
  const std::string& _internal_alias_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_alias_name(const std::string& value);
  std::string* _internal_mutable_alias_name();
  public:

  // .google.devtools.source.v1.AliasContext alias_context = 4;
  bool has_alias_context() const;
  private:
  bool _internal_has_alias_context() const;
  public:
  void clear_alias_context();
  const ::google::devtools::source::v1::AliasContext& alias_context() const;
  PROTOBUF_NODISCARD ::google::devtools::source::v1::AliasContext* release_alias_context();
  ::google::devtools::source::v1::AliasContext* mutable_alias_context();
  void set_allocated_alias_context(::google::devtools::source::v1::AliasContext* alias_context);
  private:
  const ::google::devtools::source::v1::AliasContext& _internal_alias_context() const;
  ::google::devtools::source::v1::AliasContext* _internal_mutable_alias_context();
  public:
  void unsafe_arena_set_allocated_alias_context(
      ::google::devtools::source::v1::AliasContext* alias_context);
  ::google::devtools::source::v1::AliasContext* unsafe_arena_release_alias_context();

  void clear_revision();
  RevisionCase revision_case() const;
  // @@protoc_insertion_point(class_scope:google.devtools.source.v1.CloudRepoSourceContext)
 private:
  class _Internal;
  void set_has_revision_id();
  void set_has_alias_name();
  void set_has_alias_context();

  inline bool has_revision() const;
  inline void clear_has_revision();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::devtools::source::v1::RepoId* repo_id_;
    union RevisionUnion {
      constexpr RevisionUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr revision_id_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alias_name_;
      ::google::devtools::source::v1::AliasContext* alias_context_;
    } revision_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto;
};
// -------------------------------------------------------------------

class CloudWorkspaceSourceContext final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.devtools.source.v1.CloudWorkspaceSourceContext) */ {
 public:
  inline CloudWorkspaceSourceContext() : CloudWorkspaceSourceContext(nullptr) {}
  ~CloudWorkspaceSourceContext() override;
  explicit PROTOBUF_CONSTEXPR CloudWorkspaceSourceContext(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CloudWorkspaceSourceContext(const CloudWorkspaceSourceContext& from);
  CloudWorkspaceSourceContext(CloudWorkspaceSourceContext&& from) noexcept
    : CloudWorkspaceSourceContext() {
    *this = ::std::move(from);
  }

  inline CloudWorkspaceSourceContext& operator=(const CloudWorkspaceSourceContext& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloudWorkspaceSourceContext& operator=(CloudWorkspaceSourceContext&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CloudWorkspaceSourceContext& default_instance() {
    return *internal_default_instance();
  }
  static inline const CloudWorkspaceSourceContext* internal_default_instance() {
    return reinterpret_cast<const CloudWorkspaceSourceContext*>(
               &_CloudWorkspaceSourceContext_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CloudWorkspaceSourceContext& a, CloudWorkspaceSourceContext& b) {
    a.Swap(&b);
  }
  inline void Swap(CloudWorkspaceSourceContext* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CloudWorkspaceSourceContext* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CloudWorkspaceSourceContext* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CloudWorkspaceSourceContext>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CloudWorkspaceSourceContext& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CloudWorkspaceSourceContext& from) {
    CloudWorkspaceSourceContext::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloudWorkspaceSourceContext* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.devtools.source.v1.CloudWorkspaceSourceContext";
  }
  protected:
  explicit CloudWorkspaceSourceContext(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSnapshotIdFieldNumber = 2,
    kWorkspaceIdFieldNumber = 1,
  };
  // string snapshot_id = 2;
  void clear_snapshot_id();
  const std::string& snapshot_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_snapshot_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_snapshot_id();
  PROTOBUF_NODISCARD std::string* release_snapshot_id();
  void set_allocated_snapshot_id(std::string* snapshot_id);
  private:
  const std::string& _internal_snapshot_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_snapshot_id(const std::string& value);
  std::string* _internal_mutable_snapshot_id();
  public:

  // .google.devtools.source.v1.CloudWorkspaceId workspace_id = 1;
  bool has_workspace_id() const;
  private:
  bool _internal_has_workspace_id() const;
  public:
  void clear_workspace_id();
  const ::google::devtools::source::v1::CloudWorkspaceId& workspace_id() const;
  PROTOBUF_NODISCARD ::google::devtools::source::v1::CloudWorkspaceId* release_workspace_id();
  ::google::devtools::source::v1::CloudWorkspaceId* mutable_workspace_id();
  void set_allocated_workspace_id(::google::devtools::source::v1::CloudWorkspaceId* workspace_id);
  private:
  const ::google::devtools::source::v1::CloudWorkspaceId& _internal_workspace_id() const;
  ::google::devtools::source::v1::CloudWorkspaceId* _internal_mutable_workspace_id();
  public:
  void unsafe_arena_set_allocated_workspace_id(
      ::google::devtools::source::v1::CloudWorkspaceId* workspace_id);
  ::google::devtools::source::v1::CloudWorkspaceId* unsafe_arena_release_workspace_id();

  // @@protoc_insertion_point(class_scope:google.devtools.source.v1.CloudWorkspaceSourceContext)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr snapshot_id_;
    ::google::devtools::source::v1::CloudWorkspaceId* workspace_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto;
};
// -------------------------------------------------------------------

class GerritSourceContext final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.devtools.source.v1.GerritSourceContext) */ {
 public:
  inline GerritSourceContext() : GerritSourceContext(nullptr) {}
  ~GerritSourceContext() override;
  explicit PROTOBUF_CONSTEXPR GerritSourceContext(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GerritSourceContext(const GerritSourceContext& from);
  GerritSourceContext(GerritSourceContext&& from) noexcept
    : GerritSourceContext() {
    *this = ::std::move(from);
  }

  inline GerritSourceContext& operator=(const GerritSourceContext& from) {
    CopyFrom(from);
    return *this;
  }
  inline GerritSourceContext& operator=(GerritSourceContext&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GerritSourceContext& default_instance() {
    return *internal_default_instance();
  }
  enum RevisionCase {
    kRevisionId = 3,
    kAliasName = 4,
    kAliasContext = 5,
    REVISION_NOT_SET = 0,
  };

  static inline const GerritSourceContext* internal_default_instance() {
    return reinterpret_cast<const GerritSourceContext*>(
               &_GerritSourceContext_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GerritSourceContext& a, GerritSourceContext& b) {
    a.Swap(&b);
  }
  inline void Swap(GerritSourceContext* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GerritSourceContext* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GerritSourceContext* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GerritSourceContext>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GerritSourceContext& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GerritSourceContext& from) {
    GerritSourceContext::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GerritSourceContext* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.devtools.source.v1.GerritSourceContext";
  }
  protected:
  explicit GerritSourceContext(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostUriFieldNumber = 1,
    kGerritProjectFieldNumber = 2,
    kRevisionIdFieldNumber = 3,
    kAliasNameFieldNumber = 4,
    kAliasContextFieldNumber = 5,
  };
  // string host_uri = 1;
  void clear_host_uri();
  const std::string& host_uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_host_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_host_uri();
  PROTOBUF_NODISCARD std::string* release_host_uri();
  void set_allocated_host_uri(std::string* host_uri);
  private:
  const std::string& _internal_host_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_host_uri(const std::string& value);
  std::string* _internal_mutable_host_uri();
  public:

  // string gerrit_project = 2;
  void clear_gerrit_project();
  const std::string& gerrit_project() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gerrit_project(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gerrit_project();
  PROTOBUF_NODISCARD std::string* release_gerrit_project();
  void set_allocated_gerrit_project(std::string* gerrit_project);
  private:
  const std::string& _internal_gerrit_project() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gerrit_project(const std::string& value);
  std::string* _internal_mutable_gerrit_project();
  public:

  // string revision_id = 3;
  bool has_revision_id() const;
  private:
  bool _internal_has_revision_id() const;
  public:
  void clear_revision_id();
  const std::string& revision_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_revision_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_revision_id();
  PROTOBUF_NODISCARD std::string* release_revision_id();
  void set_allocated_revision_id(std::string* revision_id);
  private:
  const std::string& _internal_revision_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_revision_id(const std::string& value);
  std::string* _internal_mutable_revision_id();
  public:

  // string alias_name = 4 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_alias_name() const;
  private:
  bool _internal_has_alias_name() const;
  public:
  PROTOBUF_DEPRECATED void clear_alias_name();
  PROTOBUF_DEPRECATED const std::string& alias_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  PROTOBUF_DEPRECATED void set_alias_name(ArgT0&& arg0, ArgT... args);
  PROTOBUF_DEPRECATED std::string* mutable_alias_name();
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED std::string* release_alias_name();
  PROTOBUF_DEPRECATED void set_allocated_alias_name(std::string* alias_name);
  private:
  const std::string& _internal_alias_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_alias_name(const std::string& value);
  std::string* _internal_mutable_alias_name();
  public:

  // .google.devtools.source.v1.AliasContext alias_context = 5;
  bool has_alias_context() const;
  private:
  bool _internal_has_alias_context() const;
  public:
  void clear_alias_context();
  const ::google::devtools::source::v1::AliasContext& alias_context() const;
  PROTOBUF_NODISCARD ::google::devtools::source::v1::AliasContext* release_alias_context();
  ::google::devtools::source::v1::AliasContext* mutable_alias_context();
  void set_allocated_alias_context(::google::devtools::source::v1::AliasContext* alias_context);
  private:
  const ::google::devtools::source::v1::AliasContext& _internal_alias_context() const;
  ::google::devtools::source::v1::AliasContext* _internal_mutable_alias_context();
  public:
  void unsafe_arena_set_allocated_alias_context(
      ::google::devtools::source::v1::AliasContext* alias_context);
  ::google::devtools::source::v1::AliasContext* unsafe_arena_release_alias_context();

  void clear_revision();
  RevisionCase revision_case() const;
  // @@protoc_insertion_point(class_scope:google.devtools.source.v1.GerritSourceContext)
 private:
  class _Internal;
  void set_has_revision_id();
  void set_has_alias_name();
  void set_has_alias_context();

  inline bool has_revision() const;
  inline void clear_has_revision();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_uri_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gerrit_project_;
    union RevisionUnion {
      constexpr RevisionUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr revision_id_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alias_name_;
      ::google::devtools::source::v1::AliasContext* alias_context_;
    } revision_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto;
};
// -------------------------------------------------------------------

class GitSourceContext final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.devtools.source.v1.GitSourceContext) */ {
 public:
  inline GitSourceContext() : GitSourceContext(nullptr) {}
  ~GitSourceContext() override;
  explicit PROTOBUF_CONSTEXPR GitSourceContext(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GitSourceContext(const GitSourceContext& from);
  GitSourceContext(GitSourceContext&& from) noexcept
    : GitSourceContext() {
    *this = ::std::move(from);
  }

  inline GitSourceContext& operator=(const GitSourceContext& from) {
    CopyFrom(from);
    return *this;
  }
  inline GitSourceContext& operator=(GitSourceContext&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GitSourceContext& default_instance() {
    return *internal_default_instance();
  }
  static inline const GitSourceContext* internal_default_instance() {
    return reinterpret_cast<const GitSourceContext*>(
               &_GitSourceContext_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GitSourceContext& a, GitSourceContext& b) {
    a.Swap(&b);
  }
  inline void Swap(GitSourceContext* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GitSourceContext* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GitSourceContext* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GitSourceContext>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GitSourceContext& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GitSourceContext& from) {
    GitSourceContext::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GitSourceContext* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.devtools.source.v1.GitSourceContext";
  }
  protected:
  explicit GitSourceContext(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
    kRevisionIdFieldNumber = 2,
  };
  // string url = 1;
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // string revision_id = 2;
  void clear_revision_id();
  const std::string& revision_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_revision_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_revision_id();
  PROTOBUF_NODISCARD std::string* release_revision_id();
  void set_allocated_revision_id(std::string* revision_id);
  private:
  const std::string& _internal_revision_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_revision_id(const std::string& value);
  std::string* _internal_mutable_revision_id();
  public:

  // @@protoc_insertion_point(class_scope:google.devtools.source.v1.GitSourceContext)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr revision_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto;
};
// -------------------------------------------------------------------

class RepoId final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.devtools.source.v1.RepoId) */ {
 public:
  inline RepoId() : RepoId(nullptr) {}
  ~RepoId() override;
  explicit PROTOBUF_CONSTEXPR RepoId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RepoId(const RepoId& from);
  RepoId(RepoId&& from) noexcept
    : RepoId() {
    *this = ::std::move(from);
  }

  inline RepoId& operator=(const RepoId& from) {
    CopyFrom(from);
    return *this;
  }
  inline RepoId& operator=(RepoId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RepoId& default_instance() {
    return *internal_default_instance();
  }
  enum IdCase {
    kProjectRepoId = 1,
    kUid = 2,
    ID_NOT_SET = 0,
  };

  static inline const RepoId* internal_default_instance() {
    return reinterpret_cast<const RepoId*>(
               &_RepoId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(RepoId& a, RepoId& b) {
    a.Swap(&b);
  }
  inline void Swap(RepoId* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RepoId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RepoId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RepoId>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RepoId& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RepoId& from) {
    RepoId::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RepoId* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.devtools.source.v1.RepoId";
  }
  protected:
  explicit RepoId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjectRepoIdFieldNumber = 1,
    kUidFieldNumber = 2,
  };
  // .google.devtools.source.v1.ProjectRepoId project_repo_id = 1;
  bool has_project_repo_id() const;
  private:
  bool _internal_has_project_repo_id() const;
  public:
  void clear_project_repo_id();
  const ::google::devtools::source::v1::ProjectRepoId& project_repo_id() const;
  PROTOBUF_NODISCARD ::google::devtools::source::v1::ProjectRepoId* release_project_repo_id();
  ::google::devtools::source::v1::ProjectRepoId* mutable_project_repo_id();
  void set_allocated_project_repo_id(::google::devtools::source::v1::ProjectRepoId* project_repo_id);
  private:
  const ::google::devtools::source::v1::ProjectRepoId& _internal_project_repo_id() const;
  ::google::devtools::source::v1::ProjectRepoId* _internal_mutable_project_repo_id();
  public:
  void unsafe_arena_set_allocated_project_repo_id(
      ::google::devtools::source::v1::ProjectRepoId* project_repo_id);
  ::google::devtools::source::v1::ProjectRepoId* unsafe_arena_release_project_repo_id();

  // string uid = 2;
  bool has_uid() const;
  private:
  bool _internal_has_uid() const;
  public:
  void clear_uid();
  const std::string& uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uid();
  PROTOBUF_NODISCARD std::string* release_uid();
  void set_allocated_uid(std::string* uid);
  private:
  const std::string& _internal_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uid(const std::string& value);
  std::string* _internal_mutable_uid();
  public:

  void clear_id();
  IdCase id_case() const;
  // @@protoc_insertion_point(class_scope:google.devtools.source.v1.RepoId)
 private:
  class _Internal;
  void set_has_project_repo_id();
  void set_has_uid();

  inline bool has_id() const;
  inline void clear_has_id();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union IdUnion {
      constexpr IdUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::google::devtools::source::v1::ProjectRepoId* project_repo_id_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uid_;
    } id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto;
};
// -------------------------------------------------------------------

class ProjectRepoId final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.devtools.source.v1.ProjectRepoId) */ {
 public:
  inline ProjectRepoId() : ProjectRepoId(nullptr) {}
  ~ProjectRepoId() override;
  explicit PROTOBUF_CONSTEXPR ProjectRepoId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProjectRepoId(const ProjectRepoId& from);
  ProjectRepoId(ProjectRepoId&& from) noexcept
    : ProjectRepoId() {
    *this = ::std::move(from);
  }

  inline ProjectRepoId& operator=(const ProjectRepoId& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProjectRepoId& operator=(ProjectRepoId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProjectRepoId& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProjectRepoId* internal_default_instance() {
    return reinterpret_cast<const ProjectRepoId*>(
               &_ProjectRepoId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ProjectRepoId& a, ProjectRepoId& b) {
    a.Swap(&b);
  }
  inline void Swap(ProjectRepoId* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProjectRepoId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProjectRepoId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProjectRepoId>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProjectRepoId& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProjectRepoId& from) {
    ProjectRepoId::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProjectRepoId* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.devtools.source.v1.ProjectRepoId";
  }
  protected:
  explicit ProjectRepoId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjectIdFieldNumber = 1,
    kRepoNameFieldNumber = 2,
  };
  // string project_id = 1;
  void clear_project_id();
  const std::string& project_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_project_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_project_id();
  PROTOBUF_NODISCARD std::string* release_project_id();
  void set_allocated_project_id(std::string* project_id);
  private:
  const std::string& _internal_project_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_project_id(const std::string& value);
  std::string* _internal_mutable_project_id();
  public:

  // string repo_name = 2;
  void clear_repo_name();
  const std::string& repo_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_repo_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_repo_name();
  PROTOBUF_NODISCARD std::string* release_repo_name();
  void set_allocated_repo_name(std::string* repo_name);
  private:
  const std::string& _internal_repo_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_repo_name(const std::string& value);
  std::string* _internal_mutable_repo_name();
  public:

  // @@protoc_insertion_point(class_scope:google.devtools.source.v1.ProjectRepoId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr project_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr repo_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto;
};
// -------------------------------------------------------------------

class CloudWorkspaceId final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.devtools.source.v1.CloudWorkspaceId) */ {
 public:
  inline CloudWorkspaceId() : CloudWorkspaceId(nullptr) {}
  ~CloudWorkspaceId() override;
  explicit PROTOBUF_CONSTEXPR CloudWorkspaceId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CloudWorkspaceId(const CloudWorkspaceId& from);
  CloudWorkspaceId(CloudWorkspaceId&& from) noexcept
    : CloudWorkspaceId() {
    *this = ::std::move(from);
  }

  inline CloudWorkspaceId& operator=(const CloudWorkspaceId& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloudWorkspaceId& operator=(CloudWorkspaceId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CloudWorkspaceId& default_instance() {
    return *internal_default_instance();
  }
  static inline const CloudWorkspaceId* internal_default_instance() {
    return reinterpret_cast<const CloudWorkspaceId*>(
               &_CloudWorkspaceId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CloudWorkspaceId& a, CloudWorkspaceId& b) {
    a.Swap(&b);
  }
  inline void Swap(CloudWorkspaceId* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CloudWorkspaceId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CloudWorkspaceId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CloudWorkspaceId>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CloudWorkspaceId& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CloudWorkspaceId& from) {
    CloudWorkspaceId::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloudWorkspaceId* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.devtools.source.v1.CloudWorkspaceId";
  }
  protected:
  explicit CloudWorkspaceId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kRepoIdFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.devtools.source.v1.RepoId repo_id = 1;
  bool has_repo_id() const;
  private:
  bool _internal_has_repo_id() const;
  public:
  void clear_repo_id();
  const ::google::devtools::source::v1::RepoId& repo_id() const;
  PROTOBUF_NODISCARD ::google::devtools::source::v1::RepoId* release_repo_id();
  ::google::devtools::source::v1::RepoId* mutable_repo_id();
  void set_allocated_repo_id(::google::devtools::source::v1::RepoId* repo_id);
  private:
  const ::google::devtools::source::v1::RepoId& _internal_repo_id() const;
  ::google::devtools::source::v1::RepoId* _internal_mutable_repo_id();
  public:
  void unsafe_arena_set_allocated_repo_id(
      ::google::devtools::source::v1::RepoId* repo_id);
  ::google::devtools::source::v1::RepoId* unsafe_arena_release_repo_id();

  // @@protoc_insertion_point(class_scope:google.devtools.source.v1.CloudWorkspaceId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::google::devtools::source::v1::RepoId* repo_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SourceContext

// .google.devtools.source.v1.CloudRepoSourceContext cloud_repo = 1;
inline bool SourceContext::_internal_has_cloud_repo() const {
  return context_case() == kCloudRepo;
}
inline bool SourceContext::has_cloud_repo() const {
  return _internal_has_cloud_repo();
}
inline void SourceContext::set_has_cloud_repo() {
  _impl_._oneof_case_[0] = kCloudRepo;
}
inline void SourceContext::clear_cloud_repo() {
  if (_internal_has_cloud_repo()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.context_.cloud_repo_;
    }
    clear_has_context();
  }
}
inline ::google::devtools::source::v1::CloudRepoSourceContext* SourceContext::release_cloud_repo() {
  // @@protoc_insertion_point(field_release:google.devtools.source.v1.SourceContext.cloud_repo)
  if (_internal_has_cloud_repo()) {
    clear_has_context();
    ::google::devtools::source::v1::CloudRepoSourceContext* temp = _impl_.context_.cloud_repo_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.context_.cloud_repo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::devtools::source::v1::CloudRepoSourceContext& SourceContext::_internal_cloud_repo() const {
  return _internal_has_cloud_repo()
      ? *_impl_.context_.cloud_repo_
      : reinterpret_cast< ::google::devtools::source::v1::CloudRepoSourceContext&>(::google::devtools::source::v1::_CloudRepoSourceContext_default_instance_);
}
inline const ::google::devtools::source::v1::CloudRepoSourceContext& SourceContext::cloud_repo() const {
  // @@protoc_insertion_point(field_get:google.devtools.source.v1.SourceContext.cloud_repo)
  return _internal_cloud_repo();
}
inline ::google::devtools::source::v1::CloudRepoSourceContext* SourceContext::unsafe_arena_release_cloud_repo() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.devtools.source.v1.SourceContext.cloud_repo)
  if (_internal_has_cloud_repo()) {
    clear_has_context();
    ::google::devtools::source::v1::CloudRepoSourceContext* temp = _impl_.context_.cloud_repo_;
    _impl_.context_.cloud_repo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SourceContext::unsafe_arena_set_allocated_cloud_repo(::google::devtools::source::v1::CloudRepoSourceContext* cloud_repo) {
  clear_context();
  if (cloud_repo) {
    set_has_cloud_repo();
    _impl_.context_.cloud_repo_ = cloud_repo;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.devtools.source.v1.SourceContext.cloud_repo)
}
inline ::google::devtools::source::v1::CloudRepoSourceContext* SourceContext::_internal_mutable_cloud_repo() {
  if (!_internal_has_cloud_repo()) {
    clear_context();
    set_has_cloud_repo();
    _impl_.context_.cloud_repo_ = CreateMaybeMessage< ::google::devtools::source::v1::CloudRepoSourceContext >(GetArenaForAllocation());
  }
  return _impl_.context_.cloud_repo_;
}
inline ::google::devtools::source::v1::CloudRepoSourceContext* SourceContext::mutable_cloud_repo() {
  ::google::devtools::source::v1::CloudRepoSourceContext* _msg = _internal_mutable_cloud_repo();
  // @@protoc_insertion_point(field_mutable:google.devtools.source.v1.SourceContext.cloud_repo)
  return _msg;
}

// .google.devtools.source.v1.CloudWorkspaceSourceContext cloud_workspace = 2;
inline bool SourceContext::_internal_has_cloud_workspace() const {
  return context_case() == kCloudWorkspace;
}
inline bool SourceContext::has_cloud_workspace() const {
  return _internal_has_cloud_workspace();
}
inline void SourceContext::set_has_cloud_workspace() {
  _impl_._oneof_case_[0] = kCloudWorkspace;
}
inline void SourceContext::clear_cloud_workspace() {
  if (_internal_has_cloud_workspace()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.context_.cloud_workspace_;
    }
    clear_has_context();
  }
}
inline ::google::devtools::source::v1::CloudWorkspaceSourceContext* SourceContext::release_cloud_workspace() {
  // @@protoc_insertion_point(field_release:google.devtools.source.v1.SourceContext.cloud_workspace)
  if (_internal_has_cloud_workspace()) {
    clear_has_context();
    ::google::devtools::source::v1::CloudWorkspaceSourceContext* temp = _impl_.context_.cloud_workspace_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.context_.cloud_workspace_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::devtools::source::v1::CloudWorkspaceSourceContext& SourceContext::_internal_cloud_workspace() const {
  return _internal_has_cloud_workspace()
      ? *_impl_.context_.cloud_workspace_
      : reinterpret_cast< ::google::devtools::source::v1::CloudWorkspaceSourceContext&>(::google::devtools::source::v1::_CloudWorkspaceSourceContext_default_instance_);
}
inline const ::google::devtools::source::v1::CloudWorkspaceSourceContext& SourceContext::cloud_workspace() const {
  // @@protoc_insertion_point(field_get:google.devtools.source.v1.SourceContext.cloud_workspace)
  return _internal_cloud_workspace();
}
inline ::google::devtools::source::v1::CloudWorkspaceSourceContext* SourceContext::unsafe_arena_release_cloud_workspace() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.devtools.source.v1.SourceContext.cloud_workspace)
  if (_internal_has_cloud_workspace()) {
    clear_has_context();
    ::google::devtools::source::v1::CloudWorkspaceSourceContext* temp = _impl_.context_.cloud_workspace_;
    _impl_.context_.cloud_workspace_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SourceContext::unsafe_arena_set_allocated_cloud_workspace(::google::devtools::source::v1::CloudWorkspaceSourceContext* cloud_workspace) {
  clear_context();
  if (cloud_workspace) {
    set_has_cloud_workspace();
    _impl_.context_.cloud_workspace_ = cloud_workspace;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.devtools.source.v1.SourceContext.cloud_workspace)
}
inline ::google::devtools::source::v1::CloudWorkspaceSourceContext* SourceContext::_internal_mutable_cloud_workspace() {
  if (!_internal_has_cloud_workspace()) {
    clear_context();
    set_has_cloud_workspace();
    _impl_.context_.cloud_workspace_ = CreateMaybeMessage< ::google::devtools::source::v1::CloudWorkspaceSourceContext >(GetArenaForAllocation());
  }
  return _impl_.context_.cloud_workspace_;
}
inline ::google::devtools::source::v1::CloudWorkspaceSourceContext* SourceContext::mutable_cloud_workspace() {
  ::google::devtools::source::v1::CloudWorkspaceSourceContext* _msg = _internal_mutable_cloud_workspace();
  // @@protoc_insertion_point(field_mutable:google.devtools.source.v1.SourceContext.cloud_workspace)
  return _msg;
}

// .google.devtools.source.v1.GerritSourceContext gerrit = 3;
inline bool SourceContext::_internal_has_gerrit() const {
  return context_case() == kGerrit;
}
inline bool SourceContext::has_gerrit() const {
  return _internal_has_gerrit();
}
inline void SourceContext::set_has_gerrit() {
  _impl_._oneof_case_[0] = kGerrit;
}
inline void SourceContext::clear_gerrit() {
  if (_internal_has_gerrit()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.context_.gerrit_;
    }
    clear_has_context();
  }
}
inline ::google::devtools::source::v1::GerritSourceContext* SourceContext::release_gerrit() {
  // @@protoc_insertion_point(field_release:google.devtools.source.v1.SourceContext.gerrit)
  if (_internal_has_gerrit()) {
    clear_has_context();
    ::google::devtools::source::v1::GerritSourceContext* temp = _impl_.context_.gerrit_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.context_.gerrit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::devtools::source::v1::GerritSourceContext& SourceContext::_internal_gerrit() const {
  return _internal_has_gerrit()
      ? *_impl_.context_.gerrit_
      : reinterpret_cast< ::google::devtools::source::v1::GerritSourceContext&>(::google::devtools::source::v1::_GerritSourceContext_default_instance_);
}
inline const ::google::devtools::source::v1::GerritSourceContext& SourceContext::gerrit() const {
  // @@protoc_insertion_point(field_get:google.devtools.source.v1.SourceContext.gerrit)
  return _internal_gerrit();
}
inline ::google::devtools::source::v1::GerritSourceContext* SourceContext::unsafe_arena_release_gerrit() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.devtools.source.v1.SourceContext.gerrit)
  if (_internal_has_gerrit()) {
    clear_has_context();
    ::google::devtools::source::v1::GerritSourceContext* temp = _impl_.context_.gerrit_;
    _impl_.context_.gerrit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SourceContext::unsafe_arena_set_allocated_gerrit(::google::devtools::source::v1::GerritSourceContext* gerrit) {
  clear_context();
  if (gerrit) {
    set_has_gerrit();
    _impl_.context_.gerrit_ = gerrit;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.devtools.source.v1.SourceContext.gerrit)
}
inline ::google::devtools::source::v1::GerritSourceContext* SourceContext::_internal_mutable_gerrit() {
  if (!_internal_has_gerrit()) {
    clear_context();
    set_has_gerrit();
    _impl_.context_.gerrit_ = CreateMaybeMessage< ::google::devtools::source::v1::GerritSourceContext >(GetArenaForAllocation());
  }
  return _impl_.context_.gerrit_;
}
inline ::google::devtools::source::v1::GerritSourceContext* SourceContext::mutable_gerrit() {
  ::google::devtools::source::v1::GerritSourceContext* _msg = _internal_mutable_gerrit();
  // @@protoc_insertion_point(field_mutable:google.devtools.source.v1.SourceContext.gerrit)
  return _msg;
}

// .google.devtools.source.v1.GitSourceContext git = 6;
inline bool SourceContext::_internal_has_git() const {
  return context_case() == kGit;
}
inline bool SourceContext::has_git() const {
  return _internal_has_git();
}
inline void SourceContext::set_has_git() {
  _impl_._oneof_case_[0] = kGit;
}
inline void SourceContext::clear_git() {
  if (_internal_has_git()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.context_.git_;
    }
    clear_has_context();
  }
}
inline ::google::devtools::source::v1::GitSourceContext* SourceContext::release_git() {
  // @@protoc_insertion_point(field_release:google.devtools.source.v1.SourceContext.git)
  if (_internal_has_git()) {
    clear_has_context();
    ::google::devtools::source::v1::GitSourceContext* temp = _impl_.context_.git_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.context_.git_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::devtools::source::v1::GitSourceContext& SourceContext::_internal_git() const {
  return _internal_has_git()
      ? *_impl_.context_.git_
      : reinterpret_cast< ::google::devtools::source::v1::GitSourceContext&>(::google::devtools::source::v1::_GitSourceContext_default_instance_);
}
inline const ::google::devtools::source::v1::GitSourceContext& SourceContext::git() const {
  // @@protoc_insertion_point(field_get:google.devtools.source.v1.SourceContext.git)
  return _internal_git();
}
inline ::google::devtools::source::v1::GitSourceContext* SourceContext::unsafe_arena_release_git() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.devtools.source.v1.SourceContext.git)
  if (_internal_has_git()) {
    clear_has_context();
    ::google::devtools::source::v1::GitSourceContext* temp = _impl_.context_.git_;
    _impl_.context_.git_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SourceContext::unsafe_arena_set_allocated_git(::google::devtools::source::v1::GitSourceContext* git) {
  clear_context();
  if (git) {
    set_has_git();
    _impl_.context_.git_ = git;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.devtools.source.v1.SourceContext.git)
}
inline ::google::devtools::source::v1::GitSourceContext* SourceContext::_internal_mutable_git() {
  if (!_internal_has_git()) {
    clear_context();
    set_has_git();
    _impl_.context_.git_ = CreateMaybeMessage< ::google::devtools::source::v1::GitSourceContext >(GetArenaForAllocation());
  }
  return _impl_.context_.git_;
}
inline ::google::devtools::source::v1::GitSourceContext* SourceContext::mutable_git() {
  ::google::devtools::source::v1::GitSourceContext* _msg = _internal_mutable_git();
  // @@protoc_insertion_point(field_mutable:google.devtools.source.v1.SourceContext.git)
  return _msg;
}

inline bool SourceContext::has_context() const {
  return context_case() != CONTEXT_NOT_SET;
}
inline void SourceContext::clear_has_context() {
  _impl_._oneof_case_[0] = CONTEXT_NOT_SET;
}
inline SourceContext::ContextCase SourceContext::context_case() const {
  return SourceContext::ContextCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ExtendedSourceContext

// .google.devtools.source.v1.SourceContext context = 1;
inline bool ExtendedSourceContext::_internal_has_context() const {
  return this != internal_default_instance() && _impl_.context_ != nullptr;
}
inline bool ExtendedSourceContext::has_context() const {
  return _internal_has_context();
}
inline void ExtendedSourceContext::clear_context() {
  if (GetArenaForAllocation() == nullptr && _impl_.context_ != nullptr) {
    delete _impl_.context_;
  }
  _impl_.context_ = nullptr;
}
inline const ::google::devtools::source::v1::SourceContext& ExtendedSourceContext::_internal_context() const {
  const ::google::devtools::source::v1::SourceContext* p = _impl_.context_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::devtools::source::v1::SourceContext&>(
      ::google::devtools::source::v1::_SourceContext_default_instance_);
}
inline const ::google::devtools::source::v1::SourceContext& ExtendedSourceContext::context() const {
  // @@protoc_insertion_point(field_get:google.devtools.source.v1.ExtendedSourceContext.context)
  return _internal_context();
}
inline void ExtendedSourceContext::unsafe_arena_set_allocated_context(
    ::google::devtools::source::v1::SourceContext* context) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.context_);
  }
  _impl_.context_ = context;
  if (context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.devtools.source.v1.ExtendedSourceContext.context)
}
inline ::google::devtools::source::v1::SourceContext* ExtendedSourceContext::release_context() {
  
  ::google::devtools::source::v1::SourceContext* temp = _impl_.context_;
  _impl_.context_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::devtools::source::v1::SourceContext* ExtendedSourceContext::unsafe_arena_release_context() {
  // @@protoc_insertion_point(field_release:google.devtools.source.v1.ExtendedSourceContext.context)
  
  ::google::devtools::source::v1::SourceContext* temp = _impl_.context_;
  _impl_.context_ = nullptr;
  return temp;
}
inline ::google::devtools::source::v1::SourceContext* ExtendedSourceContext::_internal_mutable_context() {
  
  if (_impl_.context_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::devtools::source::v1::SourceContext>(GetArenaForAllocation());
    _impl_.context_ = p;
  }
  return _impl_.context_;
}
inline ::google::devtools::source::v1::SourceContext* ExtendedSourceContext::mutable_context() {
  ::google::devtools::source::v1::SourceContext* _msg = _internal_mutable_context();
  // @@protoc_insertion_point(field_mutable:google.devtools.source.v1.ExtendedSourceContext.context)
  return _msg;
}
inline void ExtendedSourceContext::set_allocated_context(::google::devtools::source::v1::SourceContext* context) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.context_;
  }
  if (context) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(context);
    if (message_arena != submessage_arena) {
      context = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, context, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.context_ = context;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.source.v1.ExtendedSourceContext.context)
}

// map<string, string> labels = 2;
inline int ExtendedSourceContext::_internal_labels_size() const {
  return _impl_.labels_.size();
}
inline int ExtendedSourceContext::labels_size() const {
  return _internal_labels_size();
}
inline void ExtendedSourceContext::clear_labels() {
  _impl_.labels_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ExtendedSourceContext::_internal_labels() const {
  return _impl_.labels_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ExtendedSourceContext::labels() const {
  // @@protoc_insertion_point(field_map:google.devtools.source.v1.ExtendedSourceContext.labels)
  return _internal_labels();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ExtendedSourceContext::_internal_mutable_labels() {
  return _impl_.labels_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ExtendedSourceContext::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:google.devtools.source.v1.ExtendedSourceContext.labels)
  return _internal_mutable_labels();
}

// -------------------------------------------------------------------

// AliasContext

// .google.devtools.source.v1.AliasContext.Kind kind = 1;
inline void AliasContext::clear_kind() {
  _impl_.kind_ = 0;
}
inline ::google::devtools::source::v1::AliasContext_Kind AliasContext::_internal_kind() const {
  return static_cast< ::google::devtools::source::v1::AliasContext_Kind >(_impl_.kind_);
}
inline ::google::devtools::source::v1::AliasContext_Kind AliasContext::kind() const {
  // @@protoc_insertion_point(field_get:google.devtools.source.v1.AliasContext.kind)
  return _internal_kind();
}
inline void AliasContext::_internal_set_kind(::google::devtools::source::v1::AliasContext_Kind value) {
  
  _impl_.kind_ = value;
}
inline void AliasContext::set_kind(::google::devtools::source::v1::AliasContext_Kind value) {
  _internal_set_kind(value);
  // @@protoc_insertion_point(field_set:google.devtools.source.v1.AliasContext.kind)
}

// string name = 2;
inline void AliasContext::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& AliasContext::name() const {
  // @@protoc_insertion_point(field_get:google.devtools.source.v1.AliasContext.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AliasContext::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.devtools.source.v1.AliasContext.name)
}
inline std::string* AliasContext::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.devtools.source.v1.AliasContext.name)
  return _s;
}
inline const std::string& AliasContext::_internal_name() const {
  return _impl_.name_.Get();
}
inline void AliasContext::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* AliasContext::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* AliasContext::release_name() {
  // @@protoc_insertion_point(field_release:google.devtools.source.v1.AliasContext.name)
  return _impl_.name_.Release();
}
inline void AliasContext::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.devtools.source.v1.AliasContext.name)
}

// -------------------------------------------------------------------

// CloudRepoSourceContext

// .google.devtools.source.v1.RepoId repo_id = 1;
inline bool CloudRepoSourceContext::_internal_has_repo_id() const {
  return this != internal_default_instance() && _impl_.repo_id_ != nullptr;
}
inline bool CloudRepoSourceContext::has_repo_id() const {
  return _internal_has_repo_id();
}
inline void CloudRepoSourceContext::clear_repo_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.repo_id_ != nullptr) {
    delete _impl_.repo_id_;
  }
  _impl_.repo_id_ = nullptr;
}
inline const ::google::devtools::source::v1::RepoId& CloudRepoSourceContext::_internal_repo_id() const {
  const ::google::devtools::source::v1::RepoId* p = _impl_.repo_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::devtools::source::v1::RepoId&>(
      ::google::devtools::source::v1::_RepoId_default_instance_);
}
inline const ::google::devtools::source::v1::RepoId& CloudRepoSourceContext::repo_id() const {
  // @@protoc_insertion_point(field_get:google.devtools.source.v1.CloudRepoSourceContext.repo_id)
  return _internal_repo_id();
}
inline void CloudRepoSourceContext::unsafe_arena_set_allocated_repo_id(
    ::google::devtools::source::v1::RepoId* repo_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.repo_id_);
  }
  _impl_.repo_id_ = repo_id;
  if (repo_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.devtools.source.v1.CloudRepoSourceContext.repo_id)
}
inline ::google::devtools::source::v1::RepoId* CloudRepoSourceContext::release_repo_id() {
  
  ::google::devtools::source::v1::RepoId* temp = _impl_.repo_id_;
  _impl_.repo_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::devtools::source::v1::RepoId* CloudRepoSourceContext::unsafe_arena_release_repo_id() {
  // @@protoc_insertion_point(field_release:google.devtools.source.v1.CloudRepoSourceContext.repo_id)
  
  ::google::devtools::source::v1::RepoId* temp = _impl_.repo_id_;
  _impl_.repo_id_ = nullptr;
  return temp;
}
inline ::google::devtools::source::v1::RepoId* CloudRepoSourceContext::_internal_mutable_repo_id() {
  
  if (_impl_.repo_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::devtools::source::v1::RepoId>(GetArenaForAllocation());
    _impl_.repo_id_ = p;
  }
  return _impl_.repo_id_;
}
inline ::google::devtools::source::v1::RepoId* CloudRepoSourceContext::mutable_repo_id() {
  ::google::devtools::source::v1::RepoId* _msg = _internal_mutable_repo_id();
  // @@protoc_insertion_point(field_mutable:google.devtools.source.v1.CloudRepoSourceContext.repo_id)
  return _msg;
}
inline void CloudRepoSourceContext::set_allocated_repo_id(::google::devtools::source::v1::RepoId* repo_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.repo_id_;
  }
  if (repo_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(repo_id);
    if (message_arena != submessage_arena) {
      repo_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, repo_id, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.repo_id_ = repo_id;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.source.v1.CloudRepoSourceContext.repo_id)
}

// string revision_id = 2;
inline bool CloudRepoSourceContext::_internal_has_revision_id() const {
  return revision_case() == kRevisionId;
}
inline bool CloudRepoSourceContext::has_revision_id() const {
  return _internal_has_revision_id();
}
inline void CloudRepoSourceContext::set_has_revision_id() {
  _impl_._oneof_case_[0] = kRevisionId;
}
inline void CloudRepoSourceContext::clear_revision_id() {
  if (_internal_has_revision_id()) {
    _impl_.revision_.revision_id_.Destroy();
    clear_has_revision();
  }
}
inline const std::string& CloudRepoSourceContext::revision_id() const {
  // @@protoc_insertion_point(field_get:google.devtools.source.v1.CloudRepoSourceContext.revision_id)
  return _internal_revision_id();
}
template <typename ArgT0, typename... ArgT>
inline void CloudRepoSourceContext::set_revision_id(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_revision_id()) {
    clear_revision();
    set_has_revision_id();
    _impl_.revision_.revision_id_.InitDefault();
  }
  _impl_.revision_.revision_id_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.devtools.source.v1.CloudRepoSourceContext.revision_id)
}
inline std::string* CloudRepoSourceContext::mutable_revision_id() {
  std::string* _s = _internal_mutable_revision_id();
  // @@protoc_insertion_point(field_mutable:google.devtools.source.v1.CloudRepoSourceContext.revision_id)
  return _s;
}
inline const std::string& CloudRepoSourceContext::_internal_revision_id() const {
  if (_internal_has_revision_id()) {
    return _impl_.revision_.revision_id_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void CloudRepoSourceContext::_internal_set_revision_id(const std::string& value) {
  if (!_internal_has_revision_id()) {
    clear_revision();
    set_has_revision_id();
    _impl_.revision_.revision_id_.InitDefault();
  }
  _impl_.revision_.revision_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CloudRepoSourceContext::_internal_mutable_revision_id() {
  if (!_internal_has_revision_id()) {
    clear_revision();
    set_has_revision_id();
    _impl_.revision_.revision_id_.InitDefault();
  }
  return _impl_.revision_.revision_id_.Mutable(      GetArenaForAllocation());
}
inline std::string* CloudRepoSourceContext::release_revision_id() {
  // @@protoc_insertion_point(field_release:google.devtools.source.v1.CloudRepoSourceContext.revision_id)
  if (_internal_has_revision_id()) {
    clear_has_revision();
    return _impl_.revision_.revision_id_.Release();
  } else {
    return nullptr;
  }
}
inline void CloudRepoSourceContext::set_allocated_revision_id(std::string* revision_id) {
  if (has_revision()) {
    clear_revision();
  }
  if (revision_id != nullptr) {
    set_has_revision_id();
    _impl_.revision_.revision_id_.InitAllocated(revision_id, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:google.devtools.source.v1.CloudRepoSourceContext.revision_id)
}

// string alias_name = 3 [deprecated = true];
inline bool CloudRepoSourceContext::_internal_has_alias_name() const {
  return revision_case() == kAliasName;
}
inline bool CloudRepoSourceContext::has_alias_name() const {
  return _internal_has_alias_name();
}
inline void CloudRepoSourceContext::set_has_alias_name() {
  _impl_._oneof_case_[0] = kAliasName;
}
inline void CloudRepoSourceContext::clear_alias_name() {
  if (_internal_has_alias_name()) {
    _impl_.revision_.alias_name_.Destroy();
    clear_has_revision();
  }
}
inline const std::string& CloudRepoSourceContext::alias_name() const {
  // @@protoc_insertion_point(field_get:google.devtools.source.v1.CloudRepoSourceContext.alias_name)
  return _internal_alias_name();
}
template <typename ArgT0, typename... ArgT>
inline void CloudRepoSourceContext::set_alias_name(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_alias_name()) {
    clear_revision();
    set_has_alias_name();
    _impl_.revision_.alias_name_.InitDefault();
  }
  _impl_.revision_.alias_name_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.devtools.source.v1.CloudRepoSourceContext.alias_name)
}
inline std::string* CloudRepoSourceContext::mutable_alias_name() {
  std::string* _s = _internal_mutable_alias_name();
  // @@protoc_insertion_point(field_mutable:google.devtools.source.v1.CloudRepoSourceContext.alias_name)
  return _s;
}
inline const std::string& CloudRepoSourceContext::_internal_alias_name() const {
  if (_internal_has_alias_name()) {
    return _impl_.revision_.alias_name_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void CloudRepoSourceContext::_internal_set_alias_name(const std::string& value) {
  if (!_internal_has_alias_name()) {
    clear_revision();
    set_has_alias_name();
    _impl_.revision_.alias_name_.InitDefault();
  }
  _impl_.revision_.alias_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CloudRepoSourceContext::_internal_mutable_alias_name() {
  if (!_internal_has_alias_name()) {
    clear_revision();
    set_has_alias_name();
    _impl_.revision_.alias_name_.InitDefault();
  }
  return _impl_.revision_.alias_name_.Mutable(      GetArenaForAllocation());
}
inline std::string* CloudRepoSourceContext::release_alias_name() {
  // @@protoc_insertion_point(field_release:google.devtools.source.v1.CloudRepoSourceContext.alias_name)
  if (_internal_has_alias_name()) {
    clear_has_revision();
    return _impl_.revision_.alias_name_.Release();
  } else {
    return nullptr;
  }
}
inline void CloudRepoSourceContext::set_allocated_alias_name(std::string* alias_name) {
  if (has_revision()) {
    clear_revision();
  }
  if (alias_name != nullptr) {
    set_has_alias_name();
    _impl_.revision_.alias_name_.InitAllocated(alias_name, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:google.devtools.source.v1.CloudRepoSourceContext.alias_name)
}

// .google.devtools.source.v1.AliasContext alias_context = 4;
inline bool CloudRepoSourceContext::_internal_has_alias_context() const {
  return revision_case() == kAliasContext;
}
inline bool CloudRepoSourceContext::has_alias_context() const {
  return _internal_has_alias_context();
}
inline void CloudRepoSourceContext::set_has_alias_context() {
  _impl_._oneof_case_[0] = kAliasContext;
}
inline void CloudRepoSourceContext::clear_alias_context() {
  if (_internal_has_alias_context()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.revision_.alias_context_;
    }
    clear_has_revision();
  }
}
inline ::google::devtools::source::v1::AliasContext* CloudRepoSourceContext::release_alias_context() {
  // @@protoc_insertion_point(field_release:google.devtools.source.v1.CloudRepoSourceContext.alias_context)
  if (_internal_has_alias_context()) {
    clear_has_revision();
    ::google::devtools::source::v1::AliasContext* temp = _impl_.revision_.alias_context_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.revision_.alias_context_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::devtools::source::v1::AliasContext& CloudRepoSourceContext::_internal_alias_context() const {
  return _internal_has_alias_context()
      ? *_impl_.revision_.alias_context_
      : reinterpret_cast< ::google::devtools::source::v1::AliasContext&>(::google::devtools::source::v1::_AliasContext_default_instance_);
}
inline const ::google::devtools::source::v1::AliasContext& CloudRepoSourceContext::alias_context() const {
  // @@protoc_insertion_point(field_get:google.devtools.source.v1.CloudRepoSourceContext.alias_context)
  return _internal_alias_context();
}
inline ::google::devtools::source::v1::AliasContext* CloudRepoSourceContext::unsafe_arena_release_alias_context() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.devtools.source.v1.CloudRepoSourceContext.alias_context)
  if (_internal_has_alias_context()) {
    clear_has_revision();
    ::google::devtools::source::v1::AliasContext* temp = _impl_.revision_.alias_context_;
    _impl_.revision_.alias_context_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CloudRepoSourceContext::unsafe_arena_set_allocated_alias_context(::google::devtools::source::v1::AliasContext* alias_context) {
  clear_revision();
  if (alias_context) {
    set_has_alias_context();
    _impl_.revision_.alias_context_ = alias_context;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.devtools.source.v1.CloudRepoSourceContext.alias_context)
}
inline ::google::devtools::source::v1::AliasContext* CloudRepoSourceContext::_internal_mutable_alias_context() {
  if (!_internal_has_alias_context()) {
    clear_revision();
    set_has_alias_context();
    _impl_.revision_.alias_context_ = CreateMaybeMessage< ::google::devtools::source::v1::AliasContext >(GetArenaForAllocation());
  }
  return _impl_.revision_.alias_context_;
}
inline ::google::devtools::source::v1::AliasContext* CloudRepoSourceContext::mutable_alias_context() {
  ::google::devtools::source::v1::AliasContext* _msg = _internal_mutable_alias_context();
  // @@protoc_insertion_point(field_mutable:google.devtools.source.v1.CloudRepoSourceContext.alias_context)
  return _msg;
}

inline bool CloudRepoSourceContext::has_revision() const {
  return revision_case() != REVISION_NOT_SET;
}
inline void CloudRepoSourceContext::clear_has_revision() {
  _impl_._oneof_case_[0] = REVISION_NOT_SET;
}
inline CloudRepoSourceContext::RevisionCase CloudRepoSourceContext::revision_case() const {
  return CloudRepoSourceContext::RevisionCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// CloudWorkspaceSourceContext

// .google.devtools.source.v1.CloudWorkspaceId workspace_id = 1;
inline bool CloudWorkspaceSourceContext::_internal_has_workspace_id() const {
  return this != internal_default_instance() && _impl_.workspace_id_ != nullptr;
}
inline bool CloudWorkspaceSourceContext::has_workspace_id() const {
  return _internal_has_workspace_id();
}
inline void CloudWorkspaceSourceContext::clear_workspace_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.workspace_id_ != nullptr) {
    delete _impl_.workspace_id_;
  }
  _impl_.workspace_id_ = nullptr;
}
inline const ::google::devtools::source::v1::CloudWorkspaceId& CloudWorkspaceSourceContext::_internal_workspace_id() const {
  const ::google::devtools::source::v1::CloudWorkspaceId* p = _impl_.workspace_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::devtools::source::v1::CloudWorkspaceId&>(
      ::google::devtools::source::v1::_CloudWorkspaceId_default_instance_);
}
inline const ::google::devtools::source::v1::CloudWorkspaceId& CloudWorkspaceSourceContext::workspace_id() const {
  // @@protoc_insertion_point(field_get:google.devtools.source.v1.CloudWorkspaceSourceContext.workspace_id)
  return _internal_workspace_id();
}
inline void CloudWorkspaceSourceContext::unsafe_arena_set_allocated_workspace_id(
    ::google::devtools::source::v1::CloudWorkspaceId* workspace_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.workspace_id_);
  }
  _impl_.workspace_id_ = workspace_id;
  if (workspace_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.devtools.source.v1.CloudWorkspaceSourceContext.workspace_id)
}
inline ::google::devtools::source::v1::CloudWorkspaceId* CloudWorkspaceSourceContext::release_workspace_id() {
  
  ::google::devtools::source::v1::CloudWorkspaceId* temp = _impl_.workspace_id_;
  _impl_.workspace_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::devtools::source::v1::CloudWorkspaceId* CloudWorkspaceSourceContext::unsafe_arena_release_workspace_id() {
  // @@protoc_insertion_point(field_release:google.devtools.source.v1.CloudWorkspaceSourceContext.workspace_id)
  
  ::google::devtools::source::v1::CloudWorkspaceId* temp = _impl_.workspace_id_;
  _impl_.workspace_id_ = nullptr;
  return temp;
}
inline ::google::devtools::source::v1::CloudWorkspaceId* CloudWorkspaceSourceContext::_internal_mutable_workspace_id() {
  
  if (_impl_.workspace_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::devtools::source::v1::CloudWorkspaceId>(GetArenaForAllocation());
    _impl_.workspace_id_ = p;
  }
  return _impl_.workspace_id_;
}
inline ::google::devtools::source::v1::CloudWorkspaceId* CloudWorkspaceSourceContext::mutable_workspace_id() {
  ::google::devtools::source::v1::CloudWorkspaceId* _msg = _internal_mutable_workspace_id();
  // @@protoc_insertion_point(field_mutable:google.devtools.source.v1.CloudWorkspaceSourceContext.workspace_id)
  return _msg;
}
inline void CloudWorkspaceSourceContext::set_allocated_workspace_id(::google::devtools::source::v1::CloudWorkspaceId* workspace_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.workspace_id_;
  }
  if (workspace_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(workspace_id);
    if (message_arena != submessage_arena) {
      workspace_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, workspace_id, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.workspace_id_ = workspace_id;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.source.v1.CloudWorkspaceSourceContext.workspace_id)
}

// string snapshot_id = 2;
inline void CloudWorkspaceSourceContext::clear_snapshot_id() {
  _impl_.snapshot_id_.ClearToEmpty();
}
inline const std::string& CloudWorkspaceSourceContext::snapshot_id() const {
  // @@protoc_insertion_point(field_get:google.devtools.source.v1.CloudWorkspaceSourceContext.snapshot_id)
  return _internal_snapshot_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CloudWorkspaceSourceContext::set_snapshot_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.snapshot_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.devtools.source.v1.CloudWorkspaceSourceContext.snapshot_id)
}
inline std::string* CloudWorkspaceSourceContext::mutable_snapshot_id() {
  std::string* _s = _internal_mutable_snapshot_id();
  // @@protoc_insertion_point(field_mutable:google.devtools.source.v1.CloudWorkspaceSourceContext.snapshot_id)
  return _s;
}
inline const std::string& CloudWorkspaceSourceContext::_internal_snapshot_id() const {
  return _impl_.snapshot_id_.Get();
}
inline void CloudWorkspaceSourceContext::_internal_set_snapshot_id(const std::string& value) {
  
  _impl_.snapshot_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CloudWorkspaceSourceContext::_internal_mutable_snapshot_id() {
  
  return _impl_.snapshot_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CloudWorkspaceSourceContext::release_snapshot_id() {
  // @@protoc_insertion_point(field_release:google.devtools.source.v1.CloudWorkspaceSourceContext.snapshot_id)
  return _impl_.snapshot_id_.Release();
}
inline void CloudWorkspaceSourceContext::set_allocated_snapshot_id(std::string* snapshot_id) {
  if (snapshot_id != nullptr) {
    
  } else {
    
  }
  _impl_.snapshot_id_.SetAllocated(snapshot_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.snapshot_id_.IsDefault()) {
    _impl_.snapshot_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.devtools.source.v1.CloudWorkspaceSourceContext.snapshot_id)
}

// -------------------------------------------------------------------

// GerritSourceContext

// string host_uri = 1;
inline void GerritSourceContext::clear_host_uri() {
  _impl_.host_uri_.ClearToEmpty();
}
inline const std::string& GerritSourceContext::host_uri() const {
  // @@protoc_insertion_point(field_get:google.devtools.source.v1.GerritSourceContext.host_uri)
  return _internal_host_uri();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GerritSourceContext::set_host_uri(ArgT0&& arg0, ArgT... args) {
 
 _impl_.host_uri_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.devtools.source.v1.GerritSourceContext.host_uri)
}
inline std::string* GerritSourceContext::mutable_host_uri() {
  std::string* _s = _internal_mutable_host_uri();
  // @@protoc_insertion_point(field_mutable:google.devtools.source.v1.GerritSourceContext.host_uri)
  return _s;
}
inline const std::string& GerritSourceContext::_internal_host_uri() const {
  return _impl_.host_uri_.Get();
}
inline void GerritSourceContext::_internal_set_host_uri(const std::string& value) {
  
  _impl_.host_uri_.Set(value, GetArenaForAllocation());
}
inline std::string* GerritSourceContext::_internal_mutable_host_uri() {
  
  return _impl_.host_uri_.Mutable(GetArenaForAllocation());
}
inline std::string* GerritSourceContext::release_host_uri() {
  // @@protoc_insertion_point(field_release:google.devtools.source.v1.GerritSourceContext.host_uri)
  return _impl_.host_uri_.Release();
}
inline void GerritSourceContext::set_allocated_host_uri(std::string* host_uri) {
  if (host_uri != nullptr) {
    
  } else {
    
  }
  _impl_.host_uri_.SetAllocated(host_uri, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.host_uri_.IsDefault()) {
    _impl_.host_uri_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.devtools.source.v1.GerritSourceContext.host_uri)
}

// string gerrit_project = 2;
inline void GerritSourceContext::clear_gerrit_project() {
  _impl_.gerrit_project_.ClearToEmpty();
}
inline const std::string& GerritSourceContext::gerrit_project() const {
  // @@protoc_insertion_point(field_get:google.devtools.source.v1.GerritSourceContext.gerrit_project)
  return _internal_gerrit_project();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GerritSourceContext::set_gerrit_project(ArgT0&& arg0, ArgT... args) {
 
 _impl_.gerrit_project_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.devtools.source.v1.GerritSourceContext.gerrit_project)
}
inline std::string* GerritSourceContext::mutable_gerrit_project() {
  std::string* _s = _internal_mutable_gerrit_project();
  // @@protoc_insertion_point(field_mutable:google.devtools.source.v1.GerritSourceContext.gerrit_project)
  return _s;
}
inline const std::string& GerritSourceContext::_internal_gerrit_project() const {
  return _impl_.gerrit_project_.Get();
}
inline void GerritSourceContext::_internal_set_gerrit_project(const std::string& value) {
  
  _impl_.gerrit_project_.Set(value, GetArenaForAllocation());
}
inline std::string* GerritSourceContext::_internal_mutable_gerrit_project() {
  
  return _impl_.gerrit_project_.Mutable(GetArenaForAllocation());
}
inline std::string* GerritSourceContext::release_gerrit_project() {
  // @@protoc_insertion_point(field_release:google.devtools.source.v1.GerritSourceContext.gerrit_project)
  return _impl_.gerrit_project_.Release();
}
inline void GerritSourceContext::set_allocated_gerrit_project(std::string* gerrit_project) {
  if (gerrit_project != nullptr) {
    
  } else {
    
  }
  _impl_.gerrit_project_.SetAllocated(gerrit_project, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.gerrit_project_.IsDefault()) {
    _impl_.gerrit_project_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.devtools.source.v1.GerritSourceContext.gerrit_project)
}

// string revision_id = 3;
inline bool GerritSourceContext::_internal_has_revision_id() const {
  return revision_case() == kRevisionId;
}
inline bool GerritSourceContext::has_revision_id() const {
  return _internal_has_revision_id();
}
inline void GerritSourceContext::set_has_revision_id() {
  _impl_._oneof_case_[0] = kRevisionId;
}
inline void GerritSourceContext::clear_revision_id() {
  if (_internal_has_revision_id()) {
    _impl_.revision_.revision_id_.Destroy();
    clear_has_revision();
  }
}
inline const std::string& GerritSourceContext::revision_id() const {
  // @@protoc_insertion_point(field_get:google.devtools.source.v1.GerritSourceContext.revision_id)
  return _internal_revision_id();
}
template <typename ArgT0, typename... ArgT>
inline void GerritSourceContext::set_revision_id(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_revision_id()) {
    clear_revision();
    set_has_revision_id();
    _impl_.revision_.revision_id_.InitDefault();
  }
  _impl_.revision_.revision_id_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.devtools.source.v1.GerritSourceContext.revision_id)
}
inline std::string* GerritSourceContext::mutable_revision_id() {
  std::string* _s = _internal_mutable_revision_id();
  // @@protoc_insertion_point(field_mutable:google.devtools.source.v1.GerritSourceContext.revision_id)
  return _s;
}
inline const std::string& GerritSourceContext::_internal_revision_id() const {
  if (_internal_has_revision_id()) {
    return _impl_.revision_.revision_id_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void GerritSourceContext::_internal_set_revision_id(const std::string& value) {
  if (!_internal_has_revision_id()) {
    clear_revision();
    set_has_revision_id();
    _impl_.revision_.revision_id_.InitDefault();
  }
  _impl_.revision_.revision_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GerritSourceContext::_internal_mutable_revision_id() {
  if (!_internal_has_revision_id()) {
    clear_revision();
    set_has_revision_id();
    _impl_.revision_.revision_id_.InitDefault();
  }
  return _impl_.revision_.revision_id_.Mutable(      GetArenaForAllocation());
}
inline std::string* GerritSourceContext::release_revision_id() {
  // @@protoc_insertion_point(field_release:google.devtools.source.v1.GerritSourceContext.revision_id)
  if (_internal_has_revision_id()) {
    clear_has_revision();
    return _impl_.revision_.revision_id_.Release();
  } else {
    return nullptr;
  }
}
inline void GerritSourceContext::set_allocated_revision_id(std::string* revision_id) {
  if (has_revision()) {
    clear_revision();
  }
  if (revision_id != nullptr) {
    set_has_revision_id();
    _impl_.revision_.revision_id_.InitAllocated(revision_id, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:google.devtools.source.v1.GerritSourceContext.revision_id)
}

// string alias_name = 4 [deprecated = true];
inline bool GerritSourceContext::_internal_has_alias_name() const {
  return revision_case() == kAliasName;
}
inline bool GerritSourceContext::has_alias_name() const {
  return _internal_has_alias_name();
}
inline void GerritSourceContext::set_has_alias_name() {
  _impl_._oneof_case_[0] = kAliasName;
}
inline void GerritSourceContext::clear_alias_name() {
  if (_internal_has_alias_name()) {
    _impl_.revision_.alias_name_.Destroy();
    clear_has_revision();
  }
}
inline const std::string& GerritSourceContext::alias_name() const {
  // @@protoc_insertion_point(field_get:google.devtools.source.v1.GerritSourceContext.alias_name)
  return _internal_alias_name();
}
template <typename ArgT0, typename... ArgT>
inline void GerritSourceContext::set_alias_name(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_alias_name()) {
    clear_revision();
    set_has_alias_name();
    _impl_.revision_.alias_name_.InitDefault();
  }
  _impl_.revision_.alias_name_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.devtools.source.v1.GerritSourceContext.alias_name)
}
inline std::string* GerritSourceContext::mutable_alias_name() {
  std::string* _s = _internal_mutable_alias_name();
  // @@protoc_insertion_point(field_mutable:google.devtools.source.v1.GerritSourceContext.alias_name)
  return _s;
}
inline const std::string& GerritSourceContext::_internal_alias_name() const {
  if (_internal_has_alias_name()) {
    return _impl_.revision_.alias_name_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void GerritSourceContext::_internal_set_alias_name(const std::string& value) {
  if (!_internal_has_alias_name()) {
    clear_revision();
    set_has_alias_name();
    _impl_.revision_.alias_name_.InitDefault();
  }
  _impl_.revision_.alias_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GerritSourceContext::_internal_mutable_alias_name() {
  if (!_internal_has_alias_name()) {
    clear_revision();
    set_has_alias_name();
    _impl_.revision_.alias_name_.InitDefault();
  }
  return _impl_.revision_.alias_name_.Mutable(      GetArenaForAllocation());
}
inline std::string* GerritSourceContext::release_alias_name() {
  // @@protoc_insertion_point(field_release:google.devtools.source.v1.GerritSourceContext.alias_name)
  if (_internal_has_alias_name()) {
    clear_has_revision();
    return _impl_.revision_.alias_name_.Release();
  } else {
    return nullptr;
  }
}
inline void GerritSourceContext::set_allocated_alias_name(std::string* alias_name) {
  if (has_revision()) {
    clear_revision();
  }
  if (alias_name != nullptr) {
    set_has_alias_name();
    _impl_.revision_.alias_name_.InitAllocated(alias_name, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:google.devtools.source.v1.GerritSourceContext.alias_name)
}

// .google.devtools.source.v1.AliasContext alias_context = 5;
inline bool GerritSourceContext::_internal_has_alias_context() const {
  return revision_case() == kAliasContext;
}
inline bool GerritSourceContext::has_alias_context() const {
  return _internal_has_alias_context();
}
inline void GerritSourceContext::set_has_alias_context() {
  _impl_._oneof_case_[0] = kAliasContext;
}
inline void GerritSourceContext::clear_alias_context() {
  if (_internal_has_alias_context()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.revision_.alias_context_;
    }
    clear_has_revision();
  }
}
inline ::google::devtools::source::v1::AliasContext* GerritSourceContext::release_alias_context() {
  // @@protoc_insertion_point(field_release:google.devtools.source.v1.GerritSourceContext.alias_context)
  if (_internal_has_alias_context()) {
    clear_has_revision();
    ::google::devtools::source::v1::AliasContext* temp = _impl_.revision_.alias_context_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.revision_.alias_context_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::devtools::source::v1::AliasContext& GerritSourceContext::_internal_alias_context() const {
  return _internal_has_alias_context()
      ? *_impl_.revision_.alias_context_
      : reinterpret_cast< ::google::devtools::source::v1::AliasContext&>(::google::devtools::source::v1::_AliasContext_default_instance_);
}
inline const ::google::devtools::source::v1::AliasContext& GerritSourceContext::alias_context() const {
  // @@protoc_insertion_point(field_get:google.devtools.source.v1.GerritSourceContext.alias_context)
  return _internal_alias_context();
}
inline ::google::devtools::source::v1::AliasContext* GerritSourceContext::unsafe_arena_release_alias_context() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.devtools.source.v1.GerritSourceContext.alias_context)
  if (_internal_has_alias_context()) {
    clear_has_revision();
    ::google::devtools::source::v1::AliasContext* temp = _impl_.revision_.alias_context_;
    _impl_.revision_.alias_context_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GerritSourceContext::unsafe_arena_set_allocated_alias_context(::google::devtools::source::v1::AliasContext* alias_context) {
  clear_revision();
  if (alias_context) {
    set_has_alias_context();
    _impl_.revision_.alias_context_ = alias_context;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.devtools.source.v1.GerritSourceContext.alias_context)
}
inline ::google::devtools::source::v1::AliasContext* GerritSourceContext::_internal_mutable_alias_context() {
  if (!_internal_has_alias_context()) {
    clear_revision();
    set_has_alias_context();
    _impl_.revision_.alias_context_ = CreateMaybeMessage< ::google::devtools::source::v1::AliasContext >(GetArenaForAllocation());
  }
  return _impl_.revision_.alias_context_;
}
inline ::google::devtools::source::v1::AliasContext* GerritSourceContext::mutable_alias_context() {
  ::google::devtools::source::v1::AliasContext* _msg = _internal_mutable_alias_context();
  // @@protoc_insertion_point(field_mutable:google.devtools.source.v1.GerritSourceContext.alias_context)
  return _msg;
}

inline bool GerritSourceContext::has_revision() const {
  return revision_case() != REVISION_NOT_SET;
}
inline void GerritSourceContext::clear_has_revision() {
  _impl_._oneof_case_[0] = REVISION_NOT_SET;
}
inline GerritSourceContext::RevisionCase GerritSourceContext::revision_case() const {
  return GerritSourceContext::RevisionCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// GitSourceContext

// string url = 1;
inline void GitSourceContext::clear_url() {
  _impl_.url_.ClearToEmpty();
}
inline const std::string& GitSourceContext::url() const {
  // @@protoc_insertion_point(field_get:google.devtools.source.v1.GitSourceContext.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GitSourceContext::set_url(ArgT0&& arg0, ArgT... args) {
 
 _impl_.url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.devtools.source.v1.GitSourceContext.url)
}
inline std::string* GitSourceContext::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:google.devtools.source.v1.GitSourceContext.url)
  return _s;
}
inline const std::string& GitSourceContext::_internal_url() const {
  return _impl_.url_.Get();
}
inline void GitSourceContext::_internal_set_url(const std::string& value) {
  
  _impl_.url_.Set(value, GetArenaForAllocation());
}
inline std::string* GitSourceContext::_internal_mutable_url() {
  
  return _impl_.url_.Mutable(GetArenaForAllocation());
}
inline std::string* GitSourceContext::release_url() {
  // @@protoc_insertion_point(field_release:google.devtools.source.v1.GitSourceContext.url)
  return _impl_.url_.Release();
}
inline void GitSourceContext::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  _impl_.url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.url_.IsDefault()) {
    _impl_.url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.devtools.source.v1.GitSourceContext.url)
}

// string revision_id = 2;
inline void GitSourceContext::clear_revision_id() {
  _impl_.revision_id_.ClearToEmpty();
}
inline const std::string& GitSourceContext::revision_id() const {
  // @@protoc_insertion_point(field_get:google.devtools.source.v1.GitSourceContext.revision_id)
  return _internal_revision_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GitSourceContext::set_revision_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.revision_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.devtools.source.v1.GitSourceContext.revision_id)
}
inline std::string* GitSourceContext::mutable_revision_id() {
  std::string* _s = _internal_mutable_revision_id();
  // @@protoc_insertion_point(field_mutable:google.devtools.source.v1.GitSourceContext.revision_id)
  return _s;
}
inline const std::string& GitSourceContext::_internal_revision_id() const {
  return _impl_.revision_id_.Get();
}
inline void GitSourceContext::_internal_set_revision_id(const std::string& value) {
  
  _impl_.revision_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GitSourceContext::_internal_mutable_revision_id() {
  
  return _impl_.revision_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GitSourceContext::release_revision_id() {
  // @@protoc_insertion_point(field_release:google.devtools.source.v1.GitSourceContext.revision_id)
  return _impl_.revision_id_.Release();
}
inline void GitSourceContext::set_allocated_revision_id(std::string* revision_id) {
  if (revision_id != nullptr) {
    
  } else {
    
  }
  _impl_.revision_id_.SetAllocated(revision_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.revision_id_.IsDefault()) {
    _impl_.revision_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.devtools.source.v1.GitSourceContext.revision_id)
}

// -------------------------------------------------------------------

// RepoId

// .google.devtools.source.v1.ProjectRepoId project_repo_id = 1;
inline bool RepoId::_internal_has_project_repo_id() const {
  return id_case() == kProjectRepoId;
}
inline bool RepoId::has_project_repo_id() const {
  return _internal_has_project_repo_id();
}
inline void RepoId::set_has_project_repo_id() {
  _impl_._oneof_case_[0] = kProjectRepoId;
}
inline void RepoId::clear_project_repo_id() {
  if (_internal_has_project_repo_id()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.id_.project_repo_id_;
    }
    clear_has_id();
  }
}
inline ::google::devtools::source::v1::ProjectRepoId* RepoId::release_project_repo_id() {
  // @@protoc_insertion_point(field_release:google.devtools.source.v1.RepoId.project_repo_id)
  if (_internal_has_project_repo_id()) {
    clear_has_id();
    ::google::devtools::source::v1::ProjectRepoId* temp = _impl_.id_.project_repo_id_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.id_.project_repo_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::devtools::source::v1::ProjectRepoId& RepoId::_internal_project_repo_id() const {
  return _internal_has_project_repo_id()
      ? *_impl_.id_.project_repo_id_
      : reinterpret_cast< ::google::devtools::source::v1::ProjectRepoId&>(::google::devtools::source::v1::_ProjectRepoId_default_instance_);
}
inline const ::google::devtools::source::v1::ProjectRepoId& RepoId::project_repo_id() const {
  // @@protoc_insertion_point(field_get:google.devtools.source.v1.RepoId.project_repo_id)
  return _internal_project_repo_id();
}
inline ::google::devtools::source::v1::ProjectRepoId* RepoId::unsafe_arena_release_project_repo_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.devtools.source.v1.RepoId.project_repo_id)
  if (_internal_has_project_repo_id()) {
    clear_has_id();
    ::google::devtools::source::v1::ProjectRepoId* temp = _impl_.id_.project_repo_id_;
    _impl_.id_.project_repo_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RepoId::unsafe_arena_set_allocated_project_repo_id(::google::devtools::source::v1::ProjectRepoId* project_repo_id) {
  clear_id();
  if (project_repo_id) {
    set_has_project_repo_id();
    _impl_.id_.project_repo_id_ = project_repo_id;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.devtools.source.v1.RepoId.project_repo_id)
}
inline ::google::devtools::source::v1::ProjectRepoId* RepoId::_internal_mutable_project_repo_id() {
  if (!_internal_has_project_repo_id()) {
    clear_id();
    set_has_project_repo_id();
    _impl_.id_.project_repo_id_ = CreateMaybeMessage< ::google::devtools::source::v1::ProjectRepoId >(GetArenaForAllocation());
  }
  return _impl_.id_.project_repo_id_;
}
inline ::google::devtools::source::v1::ProjectRepoId* RepoId::mutable_project_repo_id() {
  ::google::devtools::source::v1::ProjectRepoId* _msg = _internal_mutable_project_repo_id();
  // @@protoc_insertion_point(field_mutable:google.devtools.source.v1.RepoId.project_repo_id)
  return _msg;
}

// string uid = 2;
inline bool RepoId::_internal_has_uid() const {
  return id_case() == kUid;
}
inline bool RepoId::has_uid() const {
  return _internal_has_uid();
}
inline void RepoId::set_has_uid() {
  _impl_._oneof_case_[0] = kUid;
}
inline void RepoId::clear_uid() {
  if (_internal_has_uid()) {
    _impl_.id_.uid_.Destroy();
    clear_has_id();
  }
}
inline const std::string& RepoId::uid() const {
  // @@protoc_insertion_point(field_get:google.devtools.source.v1.RepoId.uid)
  return _internal_uid();
}
template <typename ArgT0, typename... ArgT>
inline void RepoId::set_uid(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_uid()) {
    clear_id();
    set_has_uid();
    _impl_.id_.uid_.InitDefault();
  }
  _impl_.id_.uid_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.devtools.source.v1.RepoId.uid)
}
inline std::string* RepoId::mutable_uid() {
  std::string* _s = _internal_mutable_uid();
  // @@protoc_insertion_point(field_mutable:google.devtools.source.v1.RepoId.uid)
  return _s;
}
inline const std::string& RepoId::_internal_uid() const {
  if (_internal_has_uid()) {
    return _impl_.id_.uid_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void RepoId::_internal_set_uid(const std::string& value) {
  if (!_internal_has_uid()) {
    clear_id();
    set_has_uid();
    _impl_.id_.uid_.InitDefault();
  }
  _impl_.id_.uid_.Set(value, GetArenaForAllocation());
}
inline std::string* RepoId::_internal_mutable_uid() {
  if (!_internal_has_uid()) {
    clear_id();
    set_has_uid();
    _impl_.id_.uid_.InitDefault();
  }
  return _impl_.id_.uid_.Mutable(      GetArenaForAllocation());
}
inline std::string* RepoId::release_uid() {
  // @@protoc_insertion_point(field_release:google.devtools.source.v1.RepoId.uid)
  if (_internal_has_uid()) {
    clear_has_id();
    return _impl_.id_.uid_.Release();
  } else {
    return nullptr;
  }
}
inline void RepoId::set_allocated_uid(std::string* uid) {
  if (has_id()) {
    clear_id();
  }
  if (uid != nullptr) {
    set_has_uid();
    _impl_.id_.uid_.InitAllocated(uid, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:google.devtools.source.v1.RepoId.uid)
}

inline bool RepoId::has_id() const {
  return id_case() != ID_NOT_SET;
}
inline void RepoId::clear_has_id() {
  _impl_._oneof_case_[0] = ID_NOT_SET;
}
inline RepoId::IdCase RepoId::id_case() const {
  return RepoId::IdCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ProjectRepoId

// string project_id = 1;
inline void ProjectRepoId::clear_project_id() {
  _impl_.project_id_.ClearToEmpty();
}
inline const std::string& ProjectRepoId::project_id() const {
  // @@protoc_insertion_point(field_get:google.devtools.source.v1.ProjectRepoId.project_id)
  return _internal_project_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProjectRepoId::set_project_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.project_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.devtools.source.v1.ProjectRepoId.project_id)
}
inline std::string* ProjectRepoId::mutable_project_id() {
  std::string* _s = _internal_mutable_project_id();
  // @@protoc_insertion_point(field_mutable:google.devtools.source.v1.ProjectRepoId.project_id)
  return _s;
}
inline const std::string& ProjectRepoId::_internal_project_id() const {
  return _impl_.project_id_.Get();
}
inline void ProjectRepoId::_internal_set_project_id(const std::string& value) {
  
  _impl_.project_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ProjectRepoId::_internal_mutable_project_id() {
  
  return _impl_.project_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ProjectRepoId::release_project_id() {
  // @@protoc_insertion_point(field_release:google.devtools.source.v1.ProjectRepoId.project_id)
  return _impl_.project_id_.Release();
}
inline void ProjectRepoId::set_allocated_project_id(std::string* project_id) {
  if (project_id != nullptr) {
    
  } else {
    
  }
  _impl_.project_id_.SetAllocated(project_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.project_id_.IsDefault()) {
    _impl_.project_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.devtools.source.v1.ProjectRepoId.project_id)
}

// string repo_name = 2;
inline void ProjectRepoId::clear_repo_name() {
  _impl_.repo_name_.ClearToEmpty();
}
inline const std::string& ProjectRepoId::repo_name() const {
  // @@protoc_insertion_point(field_get:google.devtools.source.v1.ProjectRepoId.repo_name)
  return _internal_repo_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProjectRepoId::set_repo_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.repo_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.devtools.source.v1.ProjectRepoId.repo_name)
}
inline std::string* ProjectRepoId::mutable_repo_name() {
  std::string* _s = _internal_mutable_repo_name();
  // @@protoc_insertion_point(field_mutable:google.devtools.source.v1.ProjectRepoId.repo_name)
  return _s;
}
inline const std::string& ProjectRepoId::_internal_repo_name() const {
  return _impl_.repo_name_.Get();
}
inline void ProjectRepoId::_internal_set_repo_name(const std::string& value) {
  
  _impl_.repo_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ProjectRepoId::_internal_mutable_repo_name() {
  
  return _impl_.repo_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ProjectRepoId::release_repo_name() {
  // @@protoc_insertion_point(field_release:google.devtools.source.v1.ProjectRepoId.repo_name)
  return _impl_.repo_name_.Release();
}
inline void ProjectRepoId::set_allocated_repo_name(std::string* repo_name) {
  if (repo_name != nullptr) {
    
  } else {
    
  }
  _impl_.repo_name_.SetAllocated(repo_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.repo_name_.IsDefault()) {
    _impl_.repo_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.devtools.source.v1.ProjectRepoId.repo_name)
}

// -------------------------------------------------------------------

// CloudWorkspaceId

// .google.devtools.source.v1.RepoId repo_id = 1;
inline bool CloudWorkspaceId::_internal_has_repo_id() const {
  return this != internal_default_instance() && _impl_.repo_id_ != nullptr;
}
inline bool CloudWorkspaceId::has_repo_id() const {
  return _internal_has_repo_id();
}
inline void CloudWorkspaceId::clear_repo_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.repo_id_ != nullptr) {
    delete _impl_.repo_id_;
  }
  _impl_.repo_id_ = nullptr;
}
inline const ::google::devtools::source::v1::RepoId& CloudWorkspaceId::_internal_repo_id() const {
  const ::google::devtools::source::v1::RepoId* p = _impl_.repo_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::devtools::source::v1::RepoId&>(
      ::google::devtools::source::v1::_RepoId_default_instance_);
}
inline const ::google::devtools::source::v1::RepoId& CloudWorkspaceId::repo_id() const {
  // @@protoc_insertion_point(field_get:google.devtools.source.v1.CloudWorkspaceId.repo_id)
  return _internal_repo_id();
}
inline void CloudWorkspaceId::unsafe_arena_set_allocated_repo_id(
    ::google::devtools::source::v1::RepoId* repo_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.repo_id_);
  }
  _impl_.repo_id_ = repo_id;
  if (repo_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.devtools.source.v1.CloudWorkspaceId.repo_id)
}
inline ::google::devtools::source::v1::RepoId* CloudWorkspaceId::release_repo_id() {
  
  ::google::devtools::source::v1::RepoId* temp = _impl_.repo_id_;
  _impl_.repo_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::devtools::source::v1::RepoId* CloudWorkspaceId::unsafe_arena_release_repo_id() {
  // @@protoc_insertion_point(field_release:google.devtools.source.v1.CloudWorkspaceId.repo_id)
  
  ::google::devtools::source::v1::RepoId* temp = _impl_.repo_id_;
  _impl_.repo_id_ = nullptr;
  return temp;
}
inline ::google::devtools::source::v1::RepoId* CloudWorkspaceId::_internal_mutable_repo_id() {
  
  if (_impl_.repo_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::devtools::source::v1::RepoId>(GetArenaForAllocation());
    _impl_.repo_id_ = p;
  }
  return _impl_.repo_id_;
}
inline ::google::devtools::source::v1::RepoId* CloudWorkspaceId::mutable_repo_id() {
  ::google::devtools::source::v1::RepoId* _msg = _internal_mutable_repo_id();
  // @@protoc_insertion_point(field_mutable:google.devtools.source.v1.CloudWorkspaceId.repo_id)
  return _msg;
}
inline void CloudWorkspaceId::set_allocated_repo_id(::google::devtools::source::v1::RepoId* repo_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.repo_id_;
  }
  if (repo_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(repo_id);
    if (message_arena != submessage_arena) {
      repo_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, repo_id, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.repo_id_ = repo_id;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.source.v1.CloudWorkspaceId.repo_id)
}

// string name = 2;
inline void CloudWorkspaceId::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& CloudWorkspaceId::name() const {
  // @@protoc_insertion_point(field_get:google.devtools.source.v1.CloudWorkspaceId.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CloudWorkspaceId::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.devtools.source.v1.CloudWorkspaceId.name)
}
inline std::string* CloudWorkspaceId::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.devtools.source.v1.CloudWorkspaceId.name)
  return _s;
}
inline const std::string& CloudWorkspaceId::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CloudWorkspaceId::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CloudWorkspaceId::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CloudWorkspaceId::release_name() {
  // @@protoc_insertion_point(field_release:google.devtools.source.v1.CloudWorkspaceId.name)
  return _impl_.name_.Release();
}
inline void CloudWorkspaceId::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.devtools.source.v1.CloudWorkspaceId.name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace source
}  // namespace devtools
}  // namespace google

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::google::devtools::source::v1::AliasContext_Kind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::devtools::source::v1::AliasContext_Kind>() {
  return ::google::devtools::source::v1::AliasContext_Kind_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto
