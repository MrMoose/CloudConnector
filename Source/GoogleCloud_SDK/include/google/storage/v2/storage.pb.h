// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/storage/v2/storage.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fstorage_2fv2_2fstorage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fstorage_2fv2_2fstorage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/client.pb.h"
#include "google/api/field_behavior.pb.h"
#include "google/api/resource.pb.h"
#include "google/api/routing.pb.h"
#include "google/iam/v1/iam_policy.pb.h"
#include "google/iam/v1/policy.pb.h"
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/field_mask.pb.h>
#include <google/protobuf/timestamp.pb.h>
#include "google/type/date.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fstorage_2fv2_2fstorage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fstorage_2fv2_2fstorage_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fstorage_2fv2_2fstorage_2eproto;
namespace google {
namespace storage {
namespace v2 {
class Bucket;
struct BucketDefaultTypeInternal;
extern BucketDefaultTypeInternal _Bucket_default_instance_;
class BucketAccessControl;
struct BucketAccessControlDefaultTypeInternal;
extern BucketAccessControlDefaultTypeInternal _BucketAccessControl_default_instance_;
class Bucket_Autoclass;
struct Bucket_AutoclassDefaultTypeInternal;
extern Bucket_AutoclassDefaultTypeInternal _Bucket_Autoclass_default_instance_;
class Bucket_Billing;
struct Bucket_BillingDefaultTypeInternal;
extern Bucket_BillingDefaultTypeInternal _Bucket_Billing_default_instance_;
class Bucket_Cors;
struct Bucket_CorsDefaultTypeInternal;
extern Bucket_CorsDefaultTypeInternal _Bucket_Cors_default_instance_;
class Bucket_CustomPlacementConfig;
struct Bucket_CustomPlacementConfigDefaultTypeInternal;
extern Bucket_CustomPlacementConfigDefaultTypeInternal _Bucket_CustomPlacementConfig_default_instance_;
class Bucket_Encryption;
struct Bucket_EncryptionDefaultTypeInternal;
extern Bucket_EncryptionDefaultTypeInternal _Bucket_Encryption_default_instance_;
class Bucket_IamConfig;
struct Bucket_IamConfigDefaultTypeInternal;
extern Bucket_IamConfigDefaultTypeInternal _Bucket_IamConfig_default_instance_;
class Bucket_IamConfig_UniformBucketLevelAccess;
struct Bucket_IamConfig_UniformBucketLevelAccessDefaultTypeInternal;
extern Bucket_IamConfig_UniformBucketLevelAccessDefaultTypeInternal _Bucket_IamConfig_UniformBucketLevelAccess_default_instance_;
class Bucket_LabelsEntry_DoNotUse;
struct Bucket_LabelsEntry_DoNotUseDefaultTypeInternal;
extern Bucket_LabelsEntry_DoNotUseDefaultTypeInternal _Bucket_LabelsEntry_DoNotUse_default_instance_;
class Bucket_Lifecycle;
struct Bucket_LifecycleDefaultTypeInternal;
extern Bucket_LifecycleDefaultTypeInternal _Bucket_Lifecycle_default_instance_;
class Bucket_Lifecycle_Rule;
struct Bucket_Lifecycle_RuleDefaultTypeInternal;
extern Bucket_Lifecycle_RuleDefaultTypeInternal _Bucket_Lifecycle_Rule_default_instance_;
class Bucket_Lifecycle_Rule_Action;
struct Bucket_Lifecycle_Rule_ActionDefaultTypeInternal;
extern Bucket_Lifecycle_Rule_ActionDefaultTypeInternal _Bucket_Lifecycle_Rule_Action_default_instance_;
class Bucket_Lifecycle_Rule_Condition;
struct Bucket_Lifecycle_Rule_ConditionDefaultTypeInternal;
extern Bucket_Lifecycle_Rule_ConditionDefaultTypeInternal _Bucket_Lifecycle_Rule_Condition_default_instance_;
class Bucket_Logging;
struct Bucket_LoggingDefaultTypeInternal;
extern Bucket_LoggingDefaultTypeInternal _Bucket_Logging_default_instance_;
class Bucket_RetentionPolicy;
struct Bucket_RetentionPolicyDefaultTypeInternal;
extern Bucket_RetentionPolicyDefaultTypeInternal _Bucket_RetentionPolicy_default_instance_;
class Bucket_Versioning;
struct Bucket_VersioningDefaultTypeInternal;
extern Bucket_VersioningDefaultTypeInternal _Bucket_Versioning_default_instance_;
class Bucket_Website;
struct Bucket_WebsiteDefaultTypeInternal;
extern Bucket_WebsiteDefaultTypeInternal _Bucket_Website_default_instance_;
class CancelResumableWriteRequest;
struct CancelResumableWriteRequestDefaultTypeInternal;
extern CancelResumableWriteRequestDefaultTypeInternal _CancelResumableWriteRequest_default_instance_;
class CancelResumableWriteResponse;
struct CancelResumableWriteResponseDefaultTypeInternal;
extern CancelResumableWriteResponseDefaultTypeInternal _CancelResumableWriteResponse_default_instance_;
class ChecksummedData;
struct ChecksummedDataDefaultTypeInternal;
extern ChecksummedDataDefaultTypeInternal _ChecksummedData_default_instance_;
class CommonObjectRequestParams;
struct CommonObjectRequestParamsDefaultTypeInternal;
extern CommonObjectRequestParamsDefaultTypeInternal _CommonObjectRequestParams_default_instance_;
class ComposeObjectRequest;
struct ComposeObjectRequestDefaultTypeInternal;
extern ComposeObjectRequestDefaultTypeInternal _ComposeObjectRequest_default_instance_;
class ComposeObjectRequest_SourceObject;
struct ComposeObjectRequest_SourceObjectDefaultTypeInternal;
extern ComposeObjectRequest_SourceObjectDefaultTypeInternal _ComposeObjectRequest_SourceObject_default_instance_;
class ComposeObjectRequest_SourceObject_ObjectPreconditions;
struct ComposeObjectRequest_SourceObject_ObjectPreconditionsDefaultTypeInternal;
extern ComposeObjectRequest_SourceObject_ObjectPreconditionsDefaultTypeInternal _ComposeObjectRequest_SourceObject_ObjectPreconditions_default_instance_;
class ContentRange;
struct ContentRangeDefaultTypeInternal;
extern ContentRangeDefaultTypeInternal _ContentRange_default_instance_;
class CreateBucketRequest;
struct CreateBucketRequestDefaultTypeInternal;
extern CreateBucketRequestDefaultTypeInternal _CreateBucketRequest_default_instance_;
class CreateHmacKeyRequest;
struct CreateHmacKeyRequestDefaultTypeInternal;
extern CreateHmacKeyRequestDefaultTypeInternal _CreateHmacKeyRequest_default_instance_;
class CreateHmacKeyResponse;
struct CreateHmacKeyResponseDefaultTypeInternal;
extern CreateHmacKeyResponseDefaultTypeInternal _CreateHmacKeyResponse_default_instance_;
class CreateNotificationRequest;
struct CreateNotificationRequestDefaultTypeInternal;
extern CreateNotificationRequestDefaultTypeInternal _CreateNotificationRequest_default_instance_;
class CustomerEncryption;
struct CustomerEncryptionDefaultTypeInternal;
extern CustomerEncryptionDefaultTypeInternal _CustomerEncryption_default_instance_;
class DeleteBucketRequest;
struct DeleteBucketRequestDefaultTypeInternal;
extern DeleteBucketRequestDefaultTypeInternal _DeleteBucketRequest_default_instance_;
class DeleteHmacKeyRequest;
struct DeleteHmacKeyRequestDefaultTypeInternal;
extern DeleteHmacKeyRequestDefaultTypeInternal _DeleteHmacKeyRequest_default_instance_;
class DeleteNotificationRequest;
struct DeleteNotificationRequestDefaultTypeInternal;
extern DeleteNotificationRequestDefaultTypeInternal _DeleteNotificationRequest_default_instance_;
class DeleteObjectRequest;
struct DeleteObjectRequestDefaultTypeInternal;
extern DeleteObjectRequestDefaultTypeInternal _DeleteObjectRequest_default_instance_;
class GetBucketRequest;
struct GetBucketRequestDefaultTypeInternal;
extern GetBucketRequestDefaultTypeInternal _GetBucketRequest_default_instance_;
class GetHmacKeyRequest;
struct GetHmacKeyRequestDefaultTypeInternal;
extern GetHmacKeyRequestDefaultTypeInternal _GetHmacKeyRequest_default_instance_;
class GetNotificationRequest;
struct GetNotificationRequestDefaultTypeInternal;
extern GetNotificationRequestDefaultTypeInternal _GetNotificationRequest_default_instance_;
class GetObjectRequest;
struct GetObjectRequestDefaultTypeInternal;
extern GetObjectRequestDefaultTypeInternal _GetObjectRequest_default_instance_;
class GetServiceAccountRequest;
struct GetServiceAccountRequestDefaultTypeInternal;
extern GetServiceAccountRequestDefaultTypeInternal _GetServiceAccountRequest_default_instance_;
class HmacKeyMetadata;
struct HmacKeyMetadataDefaultTypeInternal;
extern HmacKeyMetadataDefaultTypeInternal _HmacKeyMetadata_default_instance_;
class ListBucketsRequest;
struct ListBucketsRequestDefaultTypeInternal;
extern ListBucketsRequestDefaultTypeInternal _ListBucketsRequest_default_instance_;
class ListBucketsResponse;
struct ListBucketsResponseDefaultTypeInternal;
extern ListBucketsResponseDefaultTypeInternal _ListBucketsResponse_default_instance_;
class ListHmacKeysRequest;
struct ListHmacKeysRequestDefaultTypeInternal;
extern ListHmacKeysRequestDefaultTypeInternal _ListHmacKeysRequest_default_instance_;
class ListHmacKeysResponse;
struct ListHmacKeysResponseDefaultTypeInternal;
extern ListHmacKeysResponseDefaultTypeInternal _ListHmacKeysResponse_default_instance_;
class ListNotificationsRequest;
struct ListNotificationsRequestDefaultTypeInternal;
extern ListNotificationsRequestDefaultTypeInternal _ListNotificationsRequest_default_instance_;
class ListNotificationsResponse;
struct ListNotificationsResponseDefaultTypeInternal;
extern ListNotificationsResponseDefaultTypeInternal _ListNotificationsResponse_default_instance_;
class ListObjectsRequest;
struct ListObjectsRequestDefaultTypeInternal;
extern ListObjectsRequestDefaultTypeInternal _ListObjectsRequest_default_instance_;
class ListObjectsResponse;
struct ListObjectsResponseDefaultTypeInternal;
extern ListObjectsResponseDefaultTypeInternal _ListObjectsResponse_default_instance_;
class LockBucketRetentionPolicyRequest;
struct LockBucketRetentionPolicyRequestDefaultTypeInternal;
extern LockBucketRetentionPolicyRequestDefaultTypeInternal _LockBucketRetentionPolicyRequest_default_instance_;
class Notification;
struct NotificationDefaultTypeInternal;
extern NotificationDefaultTypeInternal _Notification_default_instance_;
class Notification_CustomAttributesEntry_DoNotUse;
struct Notification_CustomAttributesEntry_DoNotUseDefaultTypeInternal;
extern Notification_CustomAttributesEntry_DoNotUseDefaultTypeInternal _Notification_CustomAttributesEntry_DoNotUse_default_instance_;
class Object;
struct ObjectDefaultTypeInternal;
extern ObjectDefaultTypeInternal _Object_default_instance_;
class ObjectAccessControl;
struct ObjectAccessControlDefaultTypeInternal;
extern ObjectAccessControlDefaultTypeInternal _ObjectAccessControl_default_instance_;
class ObjectChecksums;
struct ObjectChecksumsDefaultTypeInternal;
extern ObjectChecksumsDefaultTypeInternal _ObjectChecksums_default_instance_;
class Object_MetadataEntry_DoNotUse;
struct Object_MetadataEntry_DoNotUseDefaultTypeInternal;
extern Object_MetadataEntry_DoNotUseDefaultTypeInternal _Object_MetadataEntry_DoNotUse_default_instance_;
class Owner;
struct OwnerDefaultTypeInternal;
extern OwnerDefaultTypeInternal _Owner_default_instance_;
class ProjectTeam;
struct ProjectTeamDefaultTypeInternal;
extern ProjectTeamDefaultTypeInternal _ProjectTeam_default_instance_;
class QueryWriteStatusRequest;
struct QueryWriteStatusRequestDefaultTypeInternal;
extern QueryWriteStatusRequestDefaultTypeInternal _QueryWriteStatusRequest_default_instance_;
class QueryWriteStatusResponse;
struct QueryWriteStatusResponseDefaultTypeInternal;
extern QueryWriteStatusResponseDefaultTypeInternal _QueryWriteStatusResponse_default_instance_;
class ReadObjectRequest;
struct ReadObjectRequestDefaultTypeInternal;
extern ReadObjectRequestDefaultTypeInternal _ReadObjectRequest_default_instance_;
class ReadObjectResponse;
struct ReadObjectResponseDefaultTypeInternal;
extern ReadObjectResponseDefaultTypeInternal _ReadObjectResponse_default_instance_;
class RewriteObjectRequest;
struct RewriteObjectRequestDefaultTypeInternal;
extern RewriteObjectRequestDefaultTypeInternal _RewriteObjectRequest_default_instance_;
class RewriteResponse;
struct RewriteResponseDefaultTypeInternal;
extern RewriteResponseDefaultTypeInternal _RewriteResponse_default_instance_;
class ServiceAccount;
struct ServiceAccountDefaultTypeInternal;
extern ServiceAccountDefaultTypeInternal _ServiceAccount_default_instance_;
class ServiceConstants;
struct ServiceConstantsDefaultTypeInternal;
extern ServiceConstantsDefaultTypeInternal _ServiceConstants_default_instance_;
class StartResumableWriteRequest;
struct StartResumableWriteRequestDefaultTypeInternal;
extern StartResumableWriteRequestDefaultTypeInternal _StartResumableWriteRequest_default_instance_;
class StartResumableWriteResponse;
struct StartResumableWriteResponseDefaultTypeInternal;
extern StartResumableWriteResponseDefaultTypeInternal _StartResumableWriteResponse_default_instance_;
class UpdateBucketRequest;
struct UpdateBucketRequestDefaultTypeInternal;
extern UpdateBucketRequestDefaultTypeInternal _UpdateBucketRequest_default_instance_;
class UpdateHmacKeyRequest;
struct UpdateHmacKeyRequestDefaultTypeInternal;
extern UpdateHmacKeyRequestDefaultTypeInternal _UpdateHmacKeyRequest_default_instance_;
class UpdateObjectRequest;
struct UpdateObjectRequestDefaultTypeInternal;
extern UpdateObjectRequestDefaultTypeInternal _UpdateObjectRequest_default_instance_;
class WriteObjectRequest;
struct WriteObjectRequestDefaultTypeInternal;
extern WriteObjectRequestDefaultTypeInternal _WriteObjectRequest_default_instance_;
class WriteObjectResponse;
struct WriteObjectResponseDefaultTypeInternal;
extern WriteObjectResponseDefaultTypeInternal _WriteObjectResponse_default_instance_;
class WriteObjectSpec;
struct WriteObjectSpecDefaultTypeInternal;
extern WriteObjectSpecDefaultTypeInternal _WriteObjectSpec_default_instance_;
}  // namespace v2
}  // namespace storage
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::storage::v2::Bucket* Arena::CreateMaybeMessage<::google::storage::v2::Bucket>(Arena*);
template<> ::google::storage::v2::BucketAccessControl* Arena::CreateMaybeMessage<::google::storage::v2::BucketAccessControl>(Arena*);
template<> ::google::storage::v2::Bucket_Autoclass* Arena::CreateMaybeMessage<::google::storage::v2::Bucket_Autoclass>(Arena*);
template<> ::google::storage::v2::Bucket_Billing* Arena::CreateMaybeMessage<::google::storage::v2::Bucket_Billing>(Arena*);
template<> ::google::storage::v2::Bucket_Cors* Arena::CreateMaybeMessage<::google::storage::v2::Bucket_Cors>(Arena*);
template<> ::google::storage::v2::Bucket_CustomPlacementConfig* Arena::CreateMaybeMessage<::google::storage::v2::Bucket_CustomPlacementConfig>(Arena*);
template<> ::google::storage::v2::Bucket_Encryption* Arena::CreateMaybeMessage<::google::storage::v2::Bucket_Encryption>(Arena*);
template<> ::google::storage::v2::Bucket_IamConfig* Arena::CreateMaybeMessage<::google::storage::v2::Bucket_IamConfig>(Arena*);
template<> ::google::storage::v2::Bucket_IamConfig_UniformBucketLevelAccess* Arena::CreateMaybeMessage<::google::storage::v2::Bucket_IamConfig_UniformBucketLevelAccess>(Arena*);
template<> ::google::storage::v2::Bucket_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage<::google::storage::v2::Bucket_LabelsEntry_DoNotUse>(Arena*);
template<> ::google::storage::v2::Bucket_Lifecycle* Arena::CreateMaybeMessage<::google::storage::v2::Bucket_Lifecycle>(Arena*);
template<> ::google::storage::v2::Bucket_Lifecycle_Rule* Arena::CreateMaybeMessage<::google::storage::v2::Bucket_Lifecycle_Rule>(Arena*);
template<> ::google::storage::v2::Bucket_Lifecycle_Rule_Action* Arena::CreateMaybeMessage<::google::storage::v2::Bucket_Lifecycle_Rule_Action>(Arena*);
template<> ::google::storage::v2::Bucket_Lifecycle_Rule_Condition* Arena::CreateMaybeMessage<::google::storage::v2::Bucket_Lifecycle_Rule_Condition>(Arena*);
template<> ::google::storage::v2::Bucket_Logging* Arena::CreateMaybeMessage<::google::storage::v2::Bucket_Logging>(Arena*);
template<> ::google::storage::v2::Bucket_RetentionPolicy* Arena::CreateMaybeMessage<::google::storage::v2::Bucket_RetentionPolicy>(Arena*);
template<> ::google::storage::v2::Bucket_Versioning* Arena::CreateMaybeMessage<::google::storage::v2::Bucket_Versioning>(Arena*);
template<> ::google::storage::v2::Bucket_Website* Arena::CreateMaybeMessage<::google::storage::v2::Bucket_Website>(Arena*);
template<> ::google::storage::v2::CancelResumableWriteRequest* Arena::CreateMaybeMessage<::google::storage::v2::CancelResumableWriteRequest>(Arena*);
template<> ::google::storage::v2::CancelResumableWriteResponse* Arena::CreateMaybeMessage<::google::storage::v2::CancelResumableWriteResponse>(Arena*);
template<> ::google::storage::v2::ChecksummedData* Arena::CreateMaybeMessage<::google::storage::v2::ChecksummedData>(Arena*);
template<> ::google::storage::v2::CommonObjectRequestParams* Arena::CreateMaybeMessage<::google::storage::v2::CommonObjectRequestParams>(Arena*);
template<> ::google::storage::v2::ComposeObjectRequest* Arena::CreateMaybeMessage<::google::storage::v2::ComposeObjectRequest>(Arena*);
template<> ::google::storage::v2::ComposeObjectRequest_SourceObject* Arena::CreateMaybeMessage<::google::storage::v2::ComposeObjectRequest_SourceObject>(Arena*);
template<> ::google::storage::v2::ComposeObjectRequest_SourceObject_ObjectPreconditions* Arena::CreateMaybeMessage<::google::storage::v2::ComposeObjectRequest_SourceObject_ObjectPreconditions>(Arena*);
template<> ::google::storage::v2::ContentRange* Arena::CreateMaybeMessage<::google::storage::v2::ContentRange>(Arena*);
template<> ::google::storage::v2::CreateBucketRequest* Arena::CreateMaybeMessage<::google::storage::v2::CreateBucketRequest>(Arena*);
template<> ::google::storage::v2::CreateHmacKeyRequest* Arena::CreateMaybeMessage<::google::storage::v2::CreateHmacKeyRequest>(Arena*);
template<> ::google::storage::v2::CreateHmacKeyResponse* Arena::CreateMaybeMessage<::google::storage::v2::CreateHmacKeyResponse>(Arena*);
template<> ::google::storage::v2::CreateNotificationRequest* Arena::CreateMaybeMessage<::google::storage::v2::CreateNotificationRequest>(Arena*);
template<> ::google::storage::v2::CustomerEncryption* Arena::CreateMaybeMessage<::google::storage::v2::CustomerEncryption>(Arena*);
template<> ::google::storage::v2::DeleteBucketRequest* Arena::CreateMaybeMessage<::google::storage::v2::DeleteBucketRequest>(Arena*);
template<> ::google::storage::v2::DeleteHmacKeyRequest* Arena::CreateMaybeMessage<::google::storage::v2::DeleteHmacKeyRequest>(Arena*);
template<> ::google::storage::v2::DeleteNotificationRequest* Arena::CreateMaybeMessage<::google::storage::v2::DeleteNotificationRequest>(Arena*);
template<> ::google::storage::v2::DeleteObjectRequest* Arena::CreateMaybeMessage<::google::storage::v2::DeleteObjectRequest>(Arena*);
template<> ::google::storage::v2::GetBucketRequest* Arena::CreateMaybeMessage<::google::storage::v2::GetBucketRequest>(Arena*);
template<> ::google::storage::v2::GetHmacKeyRequest* Arena::CreateMaybeMessage<::google::storage::v2::GetHmacKeyRequest>(Arena*);
template<> ::google::storage::v2::GetNotificationRequest* Arena::CreateMaybeMessage<::google::storage::v2::GetNotificationRequest>(Arena*);
template<> ::google::storage::v2::GetObjectRequest* Arena::CreateMaybeMessage<::google::storage::v2::GetObjectRequest>(Arena*);
template<> ::google::storage::v2::GetServiceAccountRequest* Arena::CreateMaybeMessage<::google::storage::v2::GetServiceAccountRequest>(Arena*);
template<> ::google::storage::v2::HmacKeyMetadata* Arena::CreateMaybeMessage<::google::storage::v2::HmacKeyMetadata>(Arena*);
template<> ::google::storage::v2::ListBucketsRequest* Arena::CreateMaybeMessage<::google::storage::v2::ListBucketsRequest>(Arena*);
template<> ::google::storage::v2::ListBucketsResponse* Arena::CreateMaybeMessage<::google::storage::v2::ListBucketsResponse>(Arena*);
template<> ::google::storage::v2::ListHmacKeysRequest* Arena::CreateMaybeMessage<::google::storage::v2::ListHmacKeysRequest>(Arena*);
template<> ::google::storage::v2::ListHmacKeysResponse* Arena::CreateMaybeMessage<::google::storage::v2::ListHmacKeysResponse>(Arena*);
template<> ::google::storage::v2::ListNotificationsRequest* Arena::CreateMaybeMessage<::google::storage::v2::ListNotificationsRequest>(Arena*);
template<> ::google::storage::v2::ListNotificationsResponse* Arena::CreateMaybeMessage<::google::storage::v2::ListNotificationsResponse>(Arena*);
template<> ::google::storage::v2::ListObjectsRequest* Arena::CreateMaybeMessage<::google::storage::v2::ListObjectsRequest>(Arena*);
template<> ::google::storage::v2::ListObjectsResponse* Arena::CreateMaybeMessage<::google::storage::v2::ListObjectsResponse>(Arena*);
template<> ::google::storage::v2::LockBucketRetentionPolicyRequest* Arena::CreateMaybeMessage<::google::storage::v2::LockBucketRetentionPolicyRequest>(Arena*);
template<> ::google::storage::v2::Notification* Arena::CreateMaybeMessage<::google::storage::v2::Notification>(Arena*);
template<> ::google::storage::v2::Notification_CustomAttributesEntry_DoNotUse* Arena::CreateMaybeMessage<::google::storage::v2::Notification_CustomAttributesEntry_DoNotUse>(Arena*);
template<> ::google::storage::v2::Object* Arena::CreateMaybeMessage<::google::storage::v2::Object>(Arena*);
template<> ::google::storage::v2::ObjectAccessControl* Arena::CreateMaybeMessage<::google::storage::v2::ObjectAccessControl>(Arena*);
template<> ::google::storage::v2::ObjectChecksums* Arena::CreateMaybeMessage<::google::storage::v2::ObjectChecksums>(Arena*);
template<> ::google::storage::v2::Object_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::google::storage::v2::Object_MetadataEntry_DoNotUse>(Arena*);
template<> ::google::storage::v2::Owner* Arena::CreateMaybeMessage<::google::storage::v2::Owner>(Arena*);
template<> ::google::storage::v2::ProjectTeam* Arena::CreateMaybeMessage<::google::storage::v2::ProjectTeam>(Arena*);
template<> ::google::storage::v2::QueryWriteStatusRequest* Arena::CreateMaybeMessage<::google::storage::v2::QueryWriteStatusRequest>(Arena*);
template<> ::google::storage::v2::QueryWriteStatusResponse* Arena::CreateMaybeMessage<::google::storage::v2::QueryWriteStatusResponse>(Arena*);
template<> ::google::storage::v2::ReadObjectRequest* Arena::CreateMaybeMessage<::google::storage::v2::ReadObjectRequest>(Arena*);
template<> ::google::storage::v2::ReadObjectResponse* Arena::CreateMaybeMessage<::google::storage::v2::ReadObjectResponse>(Arena*);
template<> ::google::storage::v2::RewriteObjectRequest* Arena::CreateMaybeMessage<::google::storage::v2::RewriteObjectRequest>(Arena*);
template<> ::google::storage::v2::RewriteResponse* Arena::CreateMaybeMessage<::google::storage::v2::RewriteResponse>(Arena*);
template<> ::google::storage::v2::ServiceAccount* Arena::CreateMaybeMessage<::google::storage::v2::ServiceAccount>(Arena*);
template<> ::google::storage::v2::ServiceConstants* Arena::CreateMaybeMessage<::google::storage::v2::ServiceConstants>(Arena*);
template<> ::google::storage::v2::StartResumableWriteRequest* Arena::CreateMaybeMessage<::google::storage::v2::StartResumableWriteRequest>(Arena*);
template<> ::google::storage::v2::StartResumableWriteResponse* Arena::CreateMaybeMessage<::google::storage::v2::StartResumableWriteResponse>(Arena*);
template<> ::google::storage::v2::UpdateBucketRequest* Arena::CreateMaybeMessage<::google::storage::v2::UpdateBucketRequest>(Arena*);
template<> ::google::storage::v2::UpdateHmacKeyRequest* Arena::CreateMaybeMessage<::google::storage::v2::UpdateHmacKeyRequest>(Arena*);
template<> ::google::storage::v2::UpdateObjectRequest* Arena::CreateMaybeMessage<::google::storage::v2::UpdateObjectRequest>(Arena*);
template<> ::google::storage::v2::WriteObjectRequest* Arena::CreateMaybeMessage<::google::storage::v2::WriteObjectRequest>(Arena*);
template<> ::google::storage::v2::WriteObjectResponse* Arena::CreateMaybeMessage<::google::storage::v2::WriteObjectResponse>(Arena*);
template<> ::google::storage::v2::WriteObjectSpec* Arena::CreateMaybeMessage<::google::storage::v2::WriteObjectSpec>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace storage {
namespace v2 {

enum ServiceConstants_Values : int {
  ServiceConstants_Values_VALUES_UNSPECIFIED = 0,
  ServiceConstants_Values_MAX_READ_CHUNK_BYTES = 2097152,
  ServiceConstants_Values_MAX_WRITE_CHUNK_BYTES = 2097152,
  ServiceConstants_Values_MAX_OBJECT_SIZE_MB = 5242880,
  ServiceConstants_Values_MAX_CUSTOM_METADATA_FIELD_NAME_BYTES = 1024,
  ServiceConstants_Values_MAX_CUSTOM_METADATA_FIELD_VALUE_BYTES = 4096,
  ServiceConstants_Values_MAX_CUSTOM_METADATA_TOTAL_SIZE_BYTES = 8192,
  ServiceConstants_Values_MAX_BUCKET_METADATA_TOTAL_SIZE_BYTES = 20480,
  ServiceConstants_Values_MAX_NOTIFICATION_CONFIGS_PER_BUCKET = 100,
  ServiceConstants_Values_MAX_LIFECYCLE_RULES_PER_BUCKET = 100,
  ServiceConstants_Values_MAX_NOTIFICATION_CUSTOM_ATTRIBUTES = 5,
  ServiceConstants_Values_MAX_NOTIFICATION_CUSTOM_ATTRIBUTE_KEY_LENGTH = 256,
  ServiceConstants_Values_MAX_NOTIFICATION_CUSTOM_ATTRIBUTE_VALUE_LENGTH = 1024,
  ServiceConstants_Values_MAX_LABELS_ENTRIES_COUNT = 64,
  ServiceConstants_Values_MAX_LABELS_KEY_VALUE_LENGTH = 63,
  ServiceConstants_Values_MAX_LABELS_KEY_VALUE_BYTES = 128,
  ServiceConstants_Values_MAX_OBJECT_IDS_PER_DELETE_OBJECTS_REQUEST = 1000,
  ServiceConstants_Values_SPLIT_TOKEN_MAX_VALID_DAYS = 14,
  ServiceConstants_Values_ServiceConstants_Values_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ServiceConstants_Values_ServiceConstants_Values_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ServiceConstants_Values_IsValid(int value);
constexpr ServiceConstants_Values ServiceConstants_Values_Values_MIN = ServiceConstants_Values_VALUES_UNSPECIFIED;
constexpr ServiceConstants_Values ServiceConstants_Values_Values_MAX = ServiceConstants_Values_MAX_OBJECT_SIZE_MB;
constexpr int ServiceConstants_Values_Values_ARRAYSIZE = ServiceConstants_Values_Values_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServiceConstants_Values_descriptor();
template<typename T>
inline const std::string& ServiceConstants_Values_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ServiceConstants_Values>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ServiceConstants_Values_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ServiceConstants_Values_descriptor(), enum_t_value);
}
inline bool ServiceConstants_Values_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ServiceConstants_Values* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ServiceConstants_Values>(
    ServiceConstants_Values_descriptor(), name, value);
}
// ===================================================================

class DeleteBucketRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.DeleteBucketRequest) */ {
 public:
  inline DeleteBucketRequest() : DeleteBucketRequest(nullptr) {}
  ~DeleteBucketRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteBucketRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteBucketRequest(const DeleteBucketRequest& from);
  DeleteBucketRequest(DeleteBucketRequest&& from) noexcept
    : DeleteBucketRequest() {
    *this = ::std::move(from);
  }

  inline DeleteBucketRequest& operator=(const DeleteBucketRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteBucketRequest& operator=(DeleteBucketRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteBucketRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteBucketRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteBucketRequest*>(
               &_DeleteBucketRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DeleteBucketRequest& a, DeleteBucketRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteBucketRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteBucketRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteBucketRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteBucketRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteBucketRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteBucketRequest& from) {
    DeleteBucketRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteBucketRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.DeleteBucketRequest";
  }
  protected:
  explicit DeleteBucketRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kIfMetagenerationMatchFieldNumber = 2,
    kIfMetagenerationNotMatchFieldNumber = 3,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional int64 if_metageneration_match = 2;
  bool has_if_metageneration_match() const;
  private:
  bool _internal_has_if_metageneration_match() const;
  public:
  void clear_if_metageneration_match();
  int64_t if_metageneration_match() const;
  void set_if_metageneration_match(int64_t value);
  private:
  int64_t _internal_if_metageneration_match() const;
  void _internal_set_if_metageneration_match(int64_t value);
  public:

  // optional int64 if_metageneration_not_match = 3;
  bool has_if_metageneration_not_match() const;
  private:
  bool _internal_has_if_metageneration_not_match() const;
  public:
  void clear_if_metageneration_not_match();
  int64_t if_metageneration_not_match() const;
  void set_if_metageneration_not_match(int64_t value);
  private:
  int64_t _internal_if_metageneration_not_match() const;
  void _internal_set_if_metageneration_not_match(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.storage.v2.DeleteBucketRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int64_t if_metageneration_match_;
    int64_t if_metageneration_not_match_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class GetBucketRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.GetBucketRequest) */ {
 public:
  inline GetBucketRequest() : GetBucketRequest(nullptr) {}
  ~GetBucketRequest() override;
  explicit PROTOBUF_CONSTEXPR GetBucketRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetBucketRequest(const GetBucketRequest& from);
  GetBucketRequest(GetBucketRequest&& from) noexcept
    : GetBucketRequest() {
    *this = ::std::move(from);
  }

  inline GetBucketRequest& operator=(const GetBucketRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBucketRequest& operator=(GetBucketRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBucketRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBucketRequest* internal_default_instance() {
    return reinterpret_cast<const GetBucketRequest*>(
               &_GetBucketRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetBucketRequest& a, GetBucketRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBucketRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBucketRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetBucketRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetBucketRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetBucketRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetBucketRequest& from) {
    GetBucketRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBucketRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.GetBucketRequest";
  }
  protected:
  explicit GetBucketRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kReadMaskFieldNumber = 5,
    kIfMetagenerationMatchFieldNumber = 2,
    kIfMetagenerationNotMatchFieldNumber = 3,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .google.protobuf.FieldMask read_mask = 5;
  bool has_read_mask() const;
  private:
  bool _internal_has_read_mask() const;
  public:
  void clear_read_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& read_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_read_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_read_mask();
  void set_allocated_read_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* read_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_read_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_read_mask();
  public:
  void unsafe_arena_set_allocated_read_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* read_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_read_mask();

  // optional int64 if_metageneration_match = 2;
  bool has_if_metageneration_match() const;
  private:
  bool _internal_has_if_metageneration_match() const;
  public:
  void clear_if_metageneration_match();
  int64_t if_metageneration_match() const;
  void set_if_metageneration_match(int64_t value);
  private:
  int64_t _internal_if_metageneration_match() const;
  void _internal_set_if_metageneration_match(int64_t value);
  public:

  // optional int64 if_metageneration_not_match = 3;
  bool has_if_metageneration_not_match() const;
  private:
  bool _internal_has_if_metageneration_not_match() const;
  public:
  void clear_if_metageneration_not_match();
  int64_t if_metageneration_not_match() const;
  void set_if_metageneration_not_match(int64_t value);
  private:
  int64_t _internal_if_metageneration_not_match() const;
  void _internal_set_if_metageneration_not_match(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.storage.v2.GetBucketRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::FieldMask* read_mask_;
    int64_t if_metageneration_match_;
    int64_t if_metageneration_not_match_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class CreateBucketRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.CreateBucketRequest) */ {
 public:
  inline CreateBucketRequest() : CreateBucketRequest(nullptr) {}
  ~CreateBucketRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateBucketRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateBucketRequest(const CreateBucketRequest& from);
  CreateBucketRequest(CreateBucketRequest&& from) noexcept
    : CreateBucketRequest() {
    *this = ::std::move(from);
  }

  inline CreateBucketRequest& operator=(const CreateBucketRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateBucketRequest& operator=(CreateBucketRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateBucketRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateBucketRequest* internal_default_instance() {
    return reinterpret_cast<const CreateBucketRequest*>(
               &_CreateBucketRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CreateBucketRequest& a, CreateBucketRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateBucketRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateBucketRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateBucketRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateBucketRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateBucketRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateBucketRequest& from) {
    CreateBucketRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateBucketRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.CreateBucketRequest";
  }
  protected:
  explicit CreateBucketRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kBucketIdFieldNumber = 3,
    kPredefinedAclFieldNumber = 6,
    kPredefinedDefaultObjectAclFieldNumber = 7,
    kBucketFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string bucket_id = 3 [(.google.api.field_behavior) = REQUIRED];
  void clear_bucket_id();
  const std::string& bucket_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bucket_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bucket_id();
  PROTOBUF_NODISCARD std::string* release_bucket_id();
  void set_allocated_bucket_id(std::string* bucket_id);
  private:
  const std::string& _internal_bucket_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bucket_id(const std::string& value);
  std::string* _internal_mutable_bucket_id();
  public:

  // string predefined_acl = 6;
  void clear_predefined_acl();
  const std::string& predefined_acl() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_predefined_acl(ArgT0&& arg0, ArgT... args);
  std::string* mutable_predefined_acl();
  PROTOBUF_NODISCARD std::string* release_predefined_acl();
  void set_allocated_predefined_acl(std::string* predefined_acl);
  private:
  const std::string& _internal_predefined_acl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_predefined_acl(const std::string& value);
  std::string* _internal_mutable_predefined_acl();
  public:

  // string predefined_default_object_acl = 7;
  void clear_predefined_default_object_acl();
  const std::string& predefined_default_object_acl() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_predefined_default_object_acl(ArgT0&& arg0, ArgT... args);
  std::string* mutable_predefined_default_object_acl();
  PROTOBUF_NODISCARD std::string* release_predefined_default_object_acl();
  void set_allocated_predefined_default_object_acl(std::string* predefined_default_object_acl);
  private:
  const std::string& _internal_predefined_default_object_acl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_predefined_default_object_acl(const std::string& value);
  std::string* _internal_mutable_predefined_default_object_acl();
  public:

  // .google.storage.v2.Bucket bucket = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_bucket() const;
  private:
  bool _internal_has_bucket() const;
  public:
  void clear_bucket();
  const ::google::storage::v2::Bucket& bucket() const;
  PROTOBUF_NODISCARD ::google::storage::v2::Bucket* release_bucket();
  ::google::storage::v2::Bucket* mutable_bucket();
  void set_allocated_bucket(::google::storage::v2::Bucket* bucket);
  private:
  const ::google::storage::v2::Bucket& _internal_bucket() const;
  ::google::storage::v2::Bucket* _internal_mutable_bucket();
  public:
  void unsafe_arena_set_allocated_bucket(
      ::google::storage::v2::Bucket* bucket);
  ::google::storage::v2::Bucket* unsafe_arena_release_bucket();

  // @@protoc_insertion_point(class_scope:google.storage.v2.CreateBucketRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bucket_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr predefined_acl_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr predefined_default_object_acl_;
    ::google::storage::v2::Bucket* bucket_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class ListBucketsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.ListBucketsRequest) */ {
 public:
  inline ListBucketsRequest() : ListBucketsRequest(nullptr) {}
  ~ListBucketsRequest() override;
  explicit PROTOBUF_CONSTEXPR ListBucketsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListBucketsRequest(const ListBucketsRequest& from);
  ListBucketsRequest(ListBucketsRequest&& from) noexcept
    : ListBucketsRequest() {
    *this = ::std::move(from);
  }

  inline ListBucketsRequest& operator=(const ListBucketsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListBucketsRequest& operator=(ListBucketsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListBucketsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListBucketsRequest* internal_default_instance() {
    return reinterpret_cast<const ListBucketsRequest*>(
               &_ListBucketsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ListBucketsRequest& a, ListBucketsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListBucketsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListBucketsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListBucketsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListBucketsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListBucketsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListBucketsRequest& from) {
    ListBucketsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListBucketsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.ListBucketsRequest";
  }
  protected:
  explicit ListBucketsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kPrefixFieldNumber = 4,
    kReadMaskFieldNumber = 5,
    kPageSizeFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 3;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // string prefix = 4;
  void clear_prefix();
  const std::string& prefix() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_prefix(ArgT0&& arg0, ArgT... args);
  std::string* mutable_prefix();
  PROTOBUF_NODISCARD std::string* release_prefix();
  void set_allocated_prefix(std::string* prefix);
  private:
  const std::string& _internal_prefix() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prefix(const std::string& value);
  std::string* _internal_mutable_prefix();
  public:

  // optional .google.protobuf.FieldMask read_mask = 5;
  bool has_read_mask() const;
  private:
  bool _internal_has_read_mask() const;
  public:
  void clear_read_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& read_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_read_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_read_mask();
  void set_allocated_read_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* read_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_read_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_read_mask();
  public:
  void unsafe_arena_set_allocated_read_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* read_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_read_mask();

  // int32 page_size = 2;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.storage.v2.ListBucketsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prefix_;
    ::PROTOBUF_NAMESPACE_ID::FieldMask* read_mask_;
    int32_t page_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class ListBucketsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.ListBucketsResponse) */ {
 public:
  inline ListBucketsResponse() : ListBucketsResponse(nullptr) {}
  ~ListBucketsResponse() override;
  explicit PROTOBUF_CONSTEXPR ListBucketsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListBucketsResponse(const ListBucketsResponse& from);
  ListBucketsResponse(ListBucketsResponse&& from) noexcept
    : ListBucketsResponse() {
    *this = ::std::move(from);
  }

  inline ListBucketsResponse& operator=(const ListBucketsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListBucketsResponse& operator=(ListBucketsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListBucketsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListBucketsResponse* internal_default_instance() {
    return reinterpret_cast<const ListBucketsResponse*>(
               &_ListBucketsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ListBucketsResponse& a, ListBucketsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListBucketsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListBucketsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListBucketsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListBucketsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListBucketsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListBucketsResponse& from) {
    ListBucketsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListBucketsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.ListBucketsResponse";
  }
  protected:
  explicit ListBucketsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBucketsFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .google.storage.v2.Bucket buckets = 1;
  int buckets_size() const;
  private:
  int _internal_buckets_size() const;
  public:
  void clear_buckets();
  ::google::storage::v2::Bucket* mutable_buckets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::storage::v2::Bucket >*
      mutable_buckets();
  private:
  const ::google::storage::v2::Bucket& _internal_buckets(int index) const;
  ::google::storage::v2::Bucket* _internal_add_buckets();
  public:
  const ::google::storage::v2::Bucket& buckets(int index) const;
  ::google::storage::v2::Bucket* add_buckets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::storage::v2::Bucket >&
      buckets() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:google.storage.v2.ListBucketsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::storage::v2::Bucket > buckets_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class LockBucketRetentionPolicyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.LockBucketRetentionPolicyRequest) */ {
 public:
  inline LockBucketRetentionPolicyRequest() : LockBucketRetentionPolicyRequest(nullptr) {}
  ~LockBucketRetentionPolicyRequest() override;
  explicit PROTOBUF_CONSTEXPR LockBucketRetentionPolicyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LockBucketRetentionPolicyRequest(const LockBucketRetentionPolicyRequest& from);
  LockBucketRetentionPolicyRequest(LockBucketRetentionPolicyRequest&& from) noexcept
    : LockBucketRetentionPolicyRequest() {
    *this = ::std::move(from);
  }

  inline LockBucketRetentionPolicyRequest& operator=(const LockBucketRetentionPolicyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LockBucketRetentionPolicyRequest& operator=(LockBucketRetentionPolicyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LockBucketRetentionPolicyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LockBucketRetentionPolicyRequest* internal_default_instance() {
    return reinterpret_cast<const LockBucketRetentionPolicyRequest*>(
               &_LockBucketRetentionPolicyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(LockBucketRetentionPolicyRequest& a, LockBucketRetentionPolicyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LockBucketRetentionPolicyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LockBucketRetentionPolicyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LockBucketRetentionPolicyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LockBucketRetentionPolicyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LockBucketRetentionPolicyRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LockBucketRetentionPolicyRequest& from) {
    LockBucketRetentionPolicyRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LockBucketRetentionPolicyRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.LockBucketRetentionPolicyRequest";
  }
  protected:
  explicit LockBucketRetentionPolicyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBucketFieldNumber = 1,
    kIfMetagenerationMatchFieldNumber = 2,
  };
  // string bucket = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_bucket();
  const std::string& bucket() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bucket(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bucket();
  PROTOBUF_NODISCARD std::string* release_bucket();
  void set_allocated_bucket(std::string* bucket);
  private:
  const std::string& _internal_bucket() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bucket(const std::string& value);
  std::string* _internal_mutable_bucket();
  public:

  // int64 if_metageneration_match = 2;
  void clear_if_metageneration_match();
  int64_t if_metageneration_match() const;
  void set_if_metageneration_match(int64_t value);
  private:
  int64_t _internal_if_metageneration_match() const;
  void _internal_set_if_metageneration_match(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.storage.v2.LockBucketRetentionPolicyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bucket_;
    int64_t if_metageneration_match_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class UpdateBucketRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.UpdateBucketRequest) */ {
 public:
  inline UpdateBucketRequest() : UpdateBucketRequest(nullptr) {}
  ~UpdateBucketRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateBucketRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateBucketRequest(const UpdateBucketRequest& from);
  UpdateBucketRequest(UpdateBucketRequest&& from) noexcept
    : UpdateBucketRequest() {
    *this = ::std::move(from);
  }

  inline UpdateBucketRequest& operator=(const UpdateBucketRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateBucketRequest& operator=(UpdateBucketRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateBucketRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateBucketRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateBucketRequest*>(
               &_UpdateBucketRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UpdateBucketRequest& a, UpdateBucketRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateBucketRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateBucketRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateBucketRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateBucketRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateBucketRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateBucketRequest& from) {
    UpdateBucketRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateBucketRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.UpdateBucketRequest";
  }
  protected:
  explicit UpdateBucketRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPredefinedAclFieldNumber = 8,
    kPredefinedDefaultObjectAclFieldNumber = 9,
    kBucketFieldNumber = 1,
    kUpdateMaskFieldNumber = 6,
    kIfMetagenerationMatchFieldNumber = 2,
    kIfMetagenerationNotMatchFieldNumber = 3,
  };
  // string predefined_acl = 8;
  void clear_predefined_acl();
  const std::string& predefined_acl() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_predefined_acl(ArgT0&& arg0, ArgT... args);
  std::string* mutable_predefined_acl();
  PROTOBUF_NODISCARD std::string* release_predefined_acl();
  void set_allocated_predefined_acl(std::string* predefined_acl);
  private:
  const std::string& _internal_predefined_acl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_predefined_acl(const std::string& value);
  std::string* _internal_mutable_predefined_acl();
  public:

  // string predefined_default_object_acl = 9;
  void clear_predefined_default_object_acl();
  const std::string& predefined_default_object_acl() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_predefined_default_object_acl(ArgT0&& arg0, ArgT... args);
  std::string* mutable_predefined_default_object_acl();
  PROTOBUF_NODISCARD std::string* release_predefined_default_object_acl();
  void set_allocated_predefined_default_object_acl(std::string* predefined_default_object_acl);
  private:
  const std::string& _internal_predefined_default_object_acl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_predefined_default_object_acl(const std::string& value);
  std::string* _internal_mutable_predefined_default_object_acl();
  public:

  // .google.storage.v2.Bucket bucket = 1;
  bool has_bucket() const;
  private:
  bool _internal_has_bucket() const;
  public:
  void clear_bucket();
  const ::google::storage::v2::Bucket& bucket() const;
  PROTOBUF_NODISCARD ::google::storage::v2::Bucket* release_bucket();
  ::google::storage::v2::Bucket* mutable_bucket();
  void set_allocated_bucket(::google::storage::v2::Bucket* bucket);
  private:
  const ::google::storage::v2::Bucket& _internal_bucket() const;
  ::google::storage::v2::Bucket* _internal_mutable_bucket();
  public:
  void unsafe_arena_set_allocated_bucket(
      ::google::storage::v2::Bucket* bucket);
  ::google::storage::v2::Bucket* unsafe_arena_release_bucket();

  // .google.protobuf.FieldMask update_mask = 6;
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // optional int64 if_metageneration_match = 2;
  bool has_if_metageneration_match() const;
  private:
  bool _internal_has_if_metageneration_match() const;
  public:
  void clear_if_metageneration_match();
  int64_t if_metageneration_match() const;
  void set_if_metageneration_match(int64_t value);
  private:
  int64_t _internal_if_metageneration_match() const;
  void _internal_set_if_metageneration_match(int64_t value);
  public:

  // optional int64 if_metageneration_not_match = 3;
  bool has_if_metageneration_not_match() const;
  private:
  bool _internal_has_if_metageneration_not_match() const;
  public:
  void clear_if_metageneration_not_match();
  int64_t if_metageneration_not_match() const;
  void set_if_metageneration_not_match(int64_t value);
  private:
  int64_t _internal_if_metageneration_not_match() const;
  void _internal_set_if_metageneration_not_match(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.storage.v2.UpdateBucketRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr predefined_acl_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr predefined_default_object_acl_;
    ::google::storage::v2::Bucket* bucket_;
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
    int64_t if_metageneration_match_;
    int64_t if_metageneration_not_match_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class DeleteNotificationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.DeleteNotificationRequest) */ {
 public:
  inline DeleteNotificationRequest() : DeleteNotificationRequest(nullptr) {}
  ~DeleteNotificationRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteNotificationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteNotificationRequest(const DeleteNotificationRequest& from);
  DeleteNotificationRequest(DeleteNotificationRequest&& from) noexcept
    : DeleteNotificationRequest() {
    *this = ::std::move(from);
  }

  inline DeleteNotificationRequest& operator=(const DeleteNotificationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteNotificationRequest& operator=(DeleteNotificationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteNotificationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteNotificationRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteNotificationRequest*>(
               &_DeleteNotificationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DeleteNotificationRequest& a, DeleteNotificationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteNotificationRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteNotificationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteNotificationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteNotificationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteNotificationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteNotificationRequest& from) {
    DeleteNotificationRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteNotificationRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.DeleteNotificationRequest";
  }
  protected:
  explicit DeleteNotificationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.storage.v2.DeleteNotificationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class GetNotificationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.GetNotificationRequest) */ {
 public:
  inline GetNotificationRequest() : GetNotificationRequest(nullptr) {}
  ~GetNotificationRequest() override;
  explicit PROTOBUF_CONSTEXPR GetNotificationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetNotificationRequest(const GetNotificationRequest& from);
  GetNotificationRequest(GetNotificationRequest&& from) noexcept
    : GetNotificationRequest() {
    *this = ::std::move(from);
  }

  inline GetNotificationRequest& operator=(const GetNotificationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNotificationRequest& operator=(GetNotificationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetNotificationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetNotificationRequest* internal_default_instance() {
    return reinterpret_cast<const GetNotificationRequest*>(
               &_GetNotificationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetNotificationRequest& a, GetNotificationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNotificationRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetNotificationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetNotificationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetNotificationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetNotificationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetNotificationRequest& from) {
    GetNotificationRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNotificationRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.GetNotificationRequest";
  }
  protected:
  explicit GetNotificationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.storage.v2.GetNotificationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class CreateNotificationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.CreateNotificationRequest) */ {
 public:
  inline CreateNotificationRequest() : CreateNotificationRequest(nullptr) {}
  ~CreateNotificationRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateNotificationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateNotificationRequest(const CreateNotificationRequest& from);
  CreateNotificationRequest(CreateNotificationRequest&& from) noexcept
    : CreateNotificationRequest() {
    *this = ::std::move(from);
  }

  inline CreateNotificationRequest& operator=(const CreateNotificationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateNotificationRequest& operator=(CreateNotificationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateNotificationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateNotificationRequest* internal_default_instance() {
    return reinterpret_cast<const CreateNotificationRequest*>(
               &_CreateNotificationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CreateNotificationRequest& a, CreateNotificationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateNotificationRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateNotificationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateNotificationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateNotificationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateNotificationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateNotificationRequest& from) {
    CreateNotificationRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateNotificationRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.CreateNotificationRequest";
  }
  protected:
  explicit CreateNotificationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kNotificationFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // .google.storage.v2.Notification notification = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_notification() const;
  private:
  bool _internal_has_notification() const;
  public:
  void clear_notification();
  const ::google::storage::v2::Notification& notification() const;
  PROTOBUF_NODISCARD ::google::storage::v2::Notification* release_notification();
  ::google::storage::v2::Notification* mutable_notification();
  void set_allocated_notification(::google::storage::v2::Notification* notification);
  private:
  const ::google::storage::v2::Notification& _internal_notification() const;
  ::google::storage::v2::Notification* _internal_mutable_notification();
  public:
  void unsafe_arena_set_allocated_notification(
      ::google::storage::v2::Notification* notification);
  ::google::storage::v2::Notification* unsafe_arena_release_notification();

  // @@protoc_insertion_point(class_scope:google.storage.v2.CreateNotificationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::google::storage::v2::Notification* notification_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class ListNotificationsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.ListNotificationsRequest) */ {
 public:
  inline ListNotificationsRequest() : ListNotificationsRequest(nullptr) {}
  ~ListNotificationsRequest() override;
  explicit PROTOBUF_CONSTEXPR ListNotificationsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListNotificationsRequest(const ListNotificationsRequest& from);
  ListNotificationsRequest(ListNotificationsRequest&& from) noexcept
    : ListNotificationsRequest() {
    *this = ::std::move(from);
  }

  inline ListNotificationsRequest& operator=(const ListNotificationsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListNotificationsRequest& operator=(ListNotificationsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListNotificationsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListNotificationsRequest* internal_default_instance() {
    return reinterpret_cast<const ListNotificationsRequest*>(
               &_ListNotificationsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ListNotificationsRequest& a, ListNotificationsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListNotificationsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListNotificationsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListNotificationsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListNotificationsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListNotificationsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListNotificationsRequest& from) {
    ListNotificationsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListNotificationsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.ListNotificationsRequest";
  }
  protected:
  explicit ListNotificationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kPageSizeFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 3;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 2;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.storage.v2.ListNotificationsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
    int32_t page_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class ListNotificationsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.ListNotificationsResponse) */ {
 public:
  inline ListNotificationsResponse() : ListNotificationsResponse(nullptr) {}
  ~ListNotificationsResponse() override;
  explicit PROTOBUF_CONSTEXPR ListNotificationsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListNotificationsResponse(const ListNotificationsResponse& from);
  ListNotificationsResponse(ListNotificationsResponse&& from) noexcept
    : ListNotificationsResponse() {
    *this = ::std::move(from);
  }

  inline ListNotificationsResponse& operator=(const ListNotificationsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListNotificationsResponse& operator=(ListNotificationsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListNotificationsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListNotificationsResponse* internal_default_instance() {
    return reinterpret_cast<const ListNotificationsResponse*>(
               &_ListNotificationsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ListNotificationsResponse& a, ListNotificationsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListNotificationsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListNotificationsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListNotificationsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListNotificationsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListNotificationsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListNotificationsResponse& from) {
    ListNotificationsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListNotificationsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.ListNotificationsResponse";
  }
  protected:
  explicit ListNotificationsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNotificationsFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .google.storage.v2.Notification notifications = 1;
  int notifications_size() const;
  private:
  int _internal_notifications_size() const;
  public:
  void clear_notifications();
  ::google::storage::v2::Notification* mutable_notifications(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::storage::v2::Notification >*
      mutable_notifications();
  private:
  const ::google::storage::v2::Notification& _internal_notifications(int index) const;
  ::google::storage::v2::Notification* _internal_add_notifications();
  public:
  const ::google::storage::v2::Notification& notifications(int index) const;
  ::google::storage::v2::Notification* add_notifications();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::storage::v2::Notification >&
      notifications() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:google.storage.v2.ListNotificationsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::storage::v2::Notification > notifications_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class ComposeObjectRequest_SourceObject_ObjectPreconditions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.ComposeObjectRequest.SourceObject.ObjectPreconditions) */ {
 public:
  inline ComposeObjectRequest_SourceObject_ObjectPreconditions() : ComposeObjectRequest_SourceObject_ObjectPreconditions(nullptr) {}
  ~ComposeObjectRequest_SourceObject_ObjectPreconditions() override;
  explicit PROTOBUF_CONSTEXPR ComposeObjectRequest_SourceObject_ObjectPreconditions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ComposeObjectRequest_SourceObject_ObjectPreconditions(const ComposeObjectRequest_SourceObject_ObjectPreconditions& from);
  ComposeObjectRequest_SourceObject_ObjectPreconditions(ComposeObjectRequest_SourceObject_ObjectPreconditions&& from) noexcept
    : ComposeObjectRequest_SourceObject_ObjectPreconditions() {
    *this = ::std::move(from);
  }

  inline ComposeObjectRequest_SourceObject_ObjectPreconditions& operator=(const ComposeObjectRequest_SourceObject_ObjectPreconditions& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComposeObjectRequest_SourceObject_ObjectPreconditions& operator=(ComposeObjectRequest_SourceObject_ObjectPreconditions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ComposeObjectRequest_SourceObject_ObjectPreconditions& default_instance() {
    return *internal_default_instance();
  }
  static inline const ComposeObjectRequest_SourceObject_ObjectPreconditions* internal_default_instance() {
    return reinterpret_cast<const ComposeObjectRequest_SourceObject_ObjectPreconditions*>(
               &_ComposeObjectRequest_SourceObject_ObjectPreconditions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ComposeObjectRequest_SourceObject_ObjectPreconditions& a, ComposeObjectRequest_SourceObject_ObjectPreconditions& b) {
    a.Swap(&b);
  }
  inline void Swap(ComposeObjectRequest_SourceObject_ObjectPreconditions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComposeObjectRequest_SourceObject_ObjectPreconditions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ComposeObjectRequest_SourceObject_ObjectPreconditions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ComposeObjectRequest_SourceObject_ObjectPreconditions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ComposeObjectRequest_SourceObject_ObjectPreconditions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ComposeObjectRequest_SourceObject_ObjectPreconditions& from) {
    ComposeObjectRequest_SourceObject_ObjectPreconditions::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComposeObjectRequest_SourceObject_ObjectPreconditions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.ComposeObjectRequest.SourceObject.ObjectPreconditions";
  }
  protected:
  explicit ComposeObjectRequest_SourceObject_ObjectPreconditions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIfGenerationMatchFieldNumber = 1,
  };
  // optional int64 if_generation_match = 1;
  bool has_if_generation_match() const;
  private:
  bool _internal_has_if_generation_match() const;
  public:
  void clear_if_generation_match();
  int64_t if_generation_match() const;
  void set_if_generation_match(int64_t value);
  private:
  int64_t _internal_if_generation_match() const;
  void _internal_set_if_generation_match(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.storage.v2.ComposeObjectRequest.SourceObject.ObjectPreconditions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int64_t if_generation_match_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class ComposeObjectRequest_SourceObject final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.ComposeObjectRequest.SourceObject) */ {
 public:
  inline ComposeObjectRequest_SourceObject() : ComposeObjectRequest_SourceObject(nullptr) {}
  ~ComposeObjectRequest_SourceObject() override;
  explicit PROTOBUF_CONSTEXPR ComposeObjectRequest_SourceObject(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ComposeObjectRequest_SourceObject(const ComposeObjectRequest_SourceObject& from);
  ComposeObjectRequest_SourceObject(ComposeObjectRequest_SourceObject&& from) noexcept
    : ComposeObjectRequest_SourceObject() {
    *this = ::std::move(from);
  }

  inline ComposeObjectRequest_SourceObject& operator=(const ComposeObjectRequest_SourceObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComposeObjectRequest_SourceObject& operator=(ComposeObjectRequest_SourceObject&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ComposeObjectRequest_SourceObject& default_instance() {
    return *internal_default_instance();
  }
  static inline const ComposeObjectRequest_SourceObject* internal_default_instance() {
    return reinterpret_cast<const ComposeObjectRequest_SourceObject*>(
               &_ComposeObjectRequest_SourceObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ComposeObjectRequest_SourceObject& a, ComposeObjectRequest_SourceObject& b) {
    a.Swap(&b);
  }
  inline void Swap(ComposeObjectRequest_SourceObject* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComposeObjectRequest_SourceObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ComposeObjectRequest_SourceObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ComposeObjectRequest_SourceObject>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ComposeObjectRequest_SourceObject& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ComposeObjectRequest_SourceObject& from) {
    ComposeObjectRequest_SourceObject::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComposeObjectRequest_SourceObject* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.ComposeObjectRequest.SourceObject";
  }
  protected:
  explicit ComposeObjectRequest_SourceObject(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ComposeObjectRequest_SourceObject_ObjectPreconditions ObjectPreconditions;

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kObjectPreconditionsFieldNumber = 3,
    kGenerationFieldNumber = 2,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.storage.v2.ComposeObjectRequest.SourceObject.ObjectPreconditions object_preconditions = 3;
  bool has_object_preconditions() const;
  private:
  bool _internal_has_object_preconditions() const;
  public:
  void clear_object_preconditions();
  const ::google::storage::v2::ComposeObjectRequest_SourceObject_ObjectPreconditions& object_preconditions() const;
  PROTOBUF_NODISCARD ::google::storage::v2::ComposeObjectRequest_SourceObject_ObjectPreconditions* release_object_preconditions();
  ::google::storage::v2::ComposeObjectRequest_SourceObject_ObjectPreconditions* mutable_object_preconditions();
  void set_allocated_object_preconditions(::google::storage::v2::ComposeObjectRequest_SourceObject_ObjectPreconditions* object_preconditions);
  private:
  const ::google::storage::v2::ComposeObjectRequest_SourceObject_ObjectPreconditions& _internal_object_preconditions() const;
  ::google::storage::v2::ComposeObjectRequest_SourceObject_ObjectPreconditions* _internal_mutable_object_preconditions();
  public:
  void unsafe_arena_set_allocated_object_preconditions(
      ::google::storage::v2::ComposeObjectRequest_SourceObject_ObjectPreconditions* object_preconditions);
  ::google::storage::v2::ComposeObjectRequest_SourceObject_ObjectPreconditions* unsafe_arena_release_object_preconditions();

  // int64 generation = 2;
  void clear_generation();
  int64_t generation() const;
  void set_generation(int64_t value);
  private:
  int64_t _internal_generation() const;
  void _internal_set_generation(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.storage.v2.ComposeObjectRequest.SourceObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::google::storage::v2::ComposeObjectRequest_SourceObject_ObjectPreconditions* object_preconditions_;
    int64_t generation_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class ComposeObjectRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.ComposeObjectRequest) */ {
 public:
  inline ComposeObjectRequest() : ComposeObjectRequest(nullptr) {}
  ~ComposeObjectRequest() override;
  explicit PROTOBUF_CONSTEXPR ComposeObjectRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ComposeObjectRequest(const ComposeObjectRequest& from);
  ComposeObjectRequest(ComposeObjectRequest&& from) noexcept
    : ComposeObjectRequest() {
    *this = ::std::move(from);
  }

  inline ComposeObjectRequest& operator=(const ComposeObjectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComposeObjectRequest& operator=(ComposeObjectRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ComposeObjectRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ComposeObjectRequest* internal_default_instance() {
    return reinterpret_cast<const ComposeObjectRequest*>(
               &_ComposeObjectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ComposeObjectRequest& a, ComposeObjectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ComposeObjectRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComposeObjectRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ComposeObjectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ComposeObjectRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ComposeObjectRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ComposeObjectRequest& from) {
    ComposeObjectRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComposeObjectRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.ComposeObjectRequest";
  }
  protected:
  explicit ComposeObjectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ComposeObjectRequest_SourceObject SourceObject;

  // accessors -------------------------------------------------------

  enum : int {
    kSourceObjectsFieldNumber = 2,
    kKmsKeyFieldNumber = 6,
    kDestinationPredefinedAclFieldNumber = 9,
    kDestinationFieldNumber = 1,
    kCommonObjectRequestParamsFieldNumber = 7,
    kIfGenerationMatchFieldNumber = 4,
    kIfMetagenerationMatchFieldNumber = 5,
  };
  // repeated .google.storage.v2.ComposeObjectRequest.SourceObject source_objects = 2;
  int source_objects_size() const;
  private:
  int _internal_source_objects_size() const;
  public:
  void clear_source_objects();
  ::google::storage::v2::ComposeObjectRequest_SourceObject* mutable_source_objects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::storage::v2::ComposeObjectRequest_SourceObject >*
      mutable_source_objects();
  private:
  const ::google::storage::v2::ComposeObjectRequest_SourceObject& _internal_source_objects(int index) const;
  ::google::storage::v2::ComposeObjectRequest_SourceObject* _internal_add_source_objects();
  public:
  const ::google::storage::v2::ComposeObjectRequest_SourceObject& source_objects(int index) const;
  ::google::storage::v2::ComposeObjectRequest_SourceObject* add_source_objects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::storage::v2::ComposeObjectRequest_SourceObject >&
      source_objects() const;

  // string kms_key = 6 [(.google.api.resource_reference) = {
  void clear_kms_key();
  const std::string& kms_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_kms_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_kms_key();
  PROTOBUF_NODISCARD std::string* release_kms_key();
  void set_allocated_kms_key(std::string* kms_key);
  private:
  const std::string& _internal_kms_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_kms_key(const std::string& value);
  std::string* _internal_mutable_kms_key();
  public:

  // string destination_predefined_acl = 9;
  void clear_destination_predefined_acl();
  const std::string& destination_predefined_acl() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_destination_predefined_acl(ArgT0&& arg0, ArgT... args);
  std::string* mutable_destination_predefined_acl();
  PROTOBUF_NODISCARD std::string* release_destination_predefined_acl();
  void set_allocated_destination_predefined_acl(std::string* destination_predefined_acl);
  private:
  const std::string& _internal_destination_predefined_acl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_destination_predefined_acl(const std::string& value);
  std::string* _internal_mutable_destination_predefined_acl();
  public:

  // .google.storage.v2.Object destination = 1 [(.google.api.field_behavior) = REQUIRED];
  bool has_destination() const;
  private:
  bool _internal_has_destination() const;
  public:
  void clear_destination();
  const ::google::storage::v2::Object& destination() const;
  PROTOBUF_NODISCARD ::google::storage::v2::Object* release_destination();
  ::google::storage::v2::Object* mutable_destination();
  void set_allocated_destination(::google::storage::v2::Object* destination);
  private:
  const ::google::storage::v2::Object& _internal_destination() const;
  ::google::storage::v2::Object* _internal_mutable_destination();
  public:
  void unsafe_arena_set_allocated_destination(
      ::google::storage::v2::Object* destination);
  ::google::storage::v2::Object* unsafe_arena_release_destination();

  // .google.storage.v2.CommonObjectRequestParams common_object_request_params = 7;
  bool has_common_object_request_params() const;
  private:
  bool _internal_has_common_object_request_params() const;
  public:
  void clear_common_object_request_params();
  const ::google::storage::v2::CommonObjectRequestParams& common_object_request_params() const;
  PROTOBUF_NODISCARD ::google::storage::v2::CommonObjectRequestParams* release_common_object_request_params();
  ::google::storage::v2::CommonObjectRequestParams* mutable_common_object_request_params();
  void set_allocated_common_object_request_params(::google::storage::v2::CommonObjectRequestParams* common_object_request_params);
  private:
  const ::google::storage::v2::CommonObjectRequestParams& _internal_common_object_request_params() const;
  ::google::storage::v2::CommonObjectRequestParams* _internal_mutable_common_object_request_params();
  public:
  void unsafe_arena_set_allocated_common_object_request_params(
      ::google::storage::v2::CommonObjectRequestParams* common_object_request_params);
  ::google::storage::v2::CommonObjectRequestParams* unsafe_arena_release_common_object_request_params();

  // optional int64 if_generation_match = 4;
  bool has_if_generation_match() const;
  private:
  bool _internal_has_if_generation_match() const;
  public:
  void clear_if_generation_match();
  int64_t if_generation_match() const;
  void set_if_generation_match(int64_t value);
  private:
  int64_t _internal_if_generation_match() const;
  void _internal_set_if_generation_match(int64_t value);
  public:

  // optional int64 if_metageneration_match = 5;
  bool has_if_metageneration_match() const;
  private:
  bool _internal_has_if_metageneration_match() const;
  public:
  void clear_if_metageneration_match();
  int64_t if_metageneration_match() const;
  void set_if_metageneration_match(int64_t value);
  private:
  int64_t _internal_if_metageneration_match() const;
  void _internal_set_if_metageneration_match(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.storage.v2.ComposeObjectRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::storage::v2::ComposeObjectRequest_SourceObject > source_objects_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kms_key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr destination_predefined_acl_;
    ::google::storage::v2::Object* destination_;
    ::google::storage::v2::CommonObjectRequestParams* common_object_request_params_;
    int64_t if_generation_match_;
    int64_t if_metageneration_match_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class DeleteObjectRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.DeleteObjectRequest) */ {
 public:
  inline DeleteObjectRequest() : DeleteObjectRequest(nullptr) {}
  ~DeleteObjectRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteObjectRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteObjectRequest(const DeleteObjectRequest& from);
  DeleteObjectRequest(DeleteObjectRequest&& from) noexcept
    : DeleteObjectRequest() {
    *this = ::std::move(from);
  }

  inline DeleteObjectRequest& operator=(const DeleteObjectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteObjectRequest& operator=(DeleteObjectRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteObjectRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteObjectRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteObjectRequest*>(
               &_DeleteObjectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(DeleteObjectRequest& a, DeleteObjectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteObjectRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteObjectRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteObjectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteObjectRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteObjectRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteObjectRequest& from) {
    DeleteObjectRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteObjectRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.DeleteObjectRequest";
  }
  protected:
  explicit DeleteObjectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBucketFieldNumber = 1,
    kObjectFieldNumber = 2,
    kCommonObjectRequestParamsFieldNumber = 10,
    kGenerationFieldNumber = 4,
    kIfGenerationMatchFieldNumber = 5,
    kIfGenerationNotMatchFieldNumber = 6,
    kIfMetagenerationMatchFieldNumber = 7,
    kIfMetagenerationNotMatchFieldNumber = 8,
  };
  // string bucket = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_bucket();
  const std::string& bucket() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bucket(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bucket();
  PROTOBUF_NODISCARD std::string* release_bucket();
  void set_allocated_bucket(std::string* bucket);
  private:
  const std::string& _internal_bucket() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bucket(const std::string& value);
  std::string* _internal_mutable_bucket();
  public:

  // string object = 2 [(.google.api.field_behavior) = REQUIRED];
  void clear_object();
  const std::string& object() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_object(ArgT0&& arg0, ArgT... args);
  std::string* mutable_object();
  PROTOBUF_NODISCARD std::string* release_object();
  void set_allocated_object(std::string* object);
  private:
  const std::string& _internal_object() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_object(const std::string& value);
  std::string* _internal_mutable_object();
  public:

  // .google.storage.v2.CommonObjectRequestParams common_object_request_params = 10;
  bool has_common_object_request_params() const;
  private:
  bool _internal_has_common_object_request_params() const;
  public:
  void clear_common_object_request_params();
  const ::google::storage::v2::CommonObjectRequestParams& common_object_request_params() const;
  PROTOBUF_NODISCARD ::google::storage::v2::CommonObjectRequestParams* release_common_object_request_params();
  ::google::storage::v2::CommonObjectRequestParams* mutable_common_object_request_params();
  void set_allocated_common_object_request_params(::google::storage::v2::CommonObjectRequestParams* common_object_request_params);
  private:
  const ::google::storage::v2::CommonObjectRequestParams& _internal_common_object_request_params() const;
  ::google::storage::v2::CommonObjectRequestParams* _internal_mutable_common_object_request_params();
  public:
  void unsafe_arena_set_allocated_common_object_request_params(
      ::google::storage::v2::CommonObjectRequestParams* common_object_request_params);
  ::google::storage::v2::CommonObjectRequestParams* unsafe_arena_release_common_object_request_params();

  // int64 generation = 4;
  void clear_generation();
  int64_t generation() const;
  void set_generation(int64_t value);
  private:
  int64_t _internal_generation() const;
  void _internal_set_generation(int64_t value);
  public:

  // optional int64 if_generation_match = 5;
  bool has_if_generation_match() const;
  private:
  bool _internal_has_if_generation_match() const;
  public:
  void clear_if_generation_match();
  int64_t if_generation_match() const;
  void set_if_generation_match(int64_t value);
  private:
  int64_t _internal_if_generation_match() const;
  void _internal_set_if_generation_match(int64_t value);
  public:

  // optional int64 if_generation_not_match = 6;
  bool has_if_generation_not_match() const;
  private:
  bool _internal_has_if_generation_not_match() const;
  public:
  void clear_if_generation_not_match();
  int64_t if_generation_not_match() const;
  void set_if_generation_not_match(int64_t value);
  private:
  int64_t _internal_if_generation_not_match() const;
  void _internal_set_if_generation_not_match(int64_t value);
  public:

  // optional int64 if_metageneration_match = 7;
  bool has_if_metageneration_match() const;
  private:
  bool _internal_has_if_metageneration_match() const;
  public:
  void clear_if_metageneration_match();
  int64_t if_metageneration_match() const;
  void set_if_metageneration_match(int64_t value);
  private:
  int64_t _internal_if_metageneration_match() const;
  void _internal_set_if_metageneration_match(int64_t value);
  public:

  // optional int64 if_metageneration_not_match = 8;
  bool has_if_metageneration_not_match() const;
  private:
  bool _internal_has_if_metageneration_not_match() const;
  public:
  void clear_if_metageneration_not_match();
  int64_t if_metageneration_not_match() const;
  void set_if_metageneration_not_match(int64_t value);
  private:
  int64_t _internal_if_metageneration_not_match() const;
  void _internal_set_if_metageneration_not_match(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.storage.v2.DeleteObjectRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bucket_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr object_;
    ::google::storage::v2::CommonObjectRequestParams* common_object_request_params_;
    int64_t generation_;
    int64_t if_generation_match_;
    int64_t if_generation_not_match_;
    int64_t if_metageneration_match_;
    int64_t if_metageneration_not_match_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class CancelResumableWriteRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.CancelResumableWriteRequest) */ {
 public:
  inline CancelResumableWriteRequest() : CancelResumableWriteRequest(nullptr) {}
  ~CancelResumableWriteRequest() override;
  explicit PROTOBUF_CONSTEXPR CancelResumableWriteRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CancelResumableWriteRequest(const CancelResumableWriteRequest& from);
  CancelResumableWriteRequest(CancelResumableWriteRequest&& from) noexcept
    : CancelResumableWriteRequest() {
    *this = ::std::move(from);
  }

  inline CancelResumableWriteRequest& operator=(const CancelResumableWriteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelResumableWriteRequest& operator=(CancelResumableWriteRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CancelResumableWriteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CancelResumableWriteRequest* internal_default_instance() {
    return reinterpret_cast<const CancelResumableWriteRequest*>(
               &_CancelResumableWriteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CancelResumableWriteRequest& a, CancelResumableWriteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CancelResumableWriteRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CancelResumableWriteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CancelResumableWriteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CancelResumableWriteRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CancelResumableWriteRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CancelResumableWriteRequest& from) {
    CancelResumableWriteRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CancelResumableWriteRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.CancelResumableWriteRequest";
  }
  protected:
  explicit CancelResumableWriteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUploadIdFieldNumber = 1,
  };
  // string upload_id = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_upload_id();
  const std::string& upload_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_upload_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_upload_id();
  PROTOBUF_NODISCARD std::string* release_upload_id();
  void set_allocated_upload_id(std::string* upload_id);
  private:
  const std::string& _internal_upload_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_upload_id(const std::string& value);
  std::string* _internal_mutable_upload_id();
  public:

  // @@protoc_insertion_point(class_scope:google.storage.v2.CancelResumableWriteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr upload_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class CancelResumableWriteResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:google.storage.v2.CancelResumableWriteResponse) */ {
 public:
  inline CancelResumableWriteResponse() : CancelResumableWriteResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CancelResumableWriteResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CancelResumableWriteResponse(const CancelResumableWriteResponse& from);
  CancelResumableWriteResponse(CancelResumableWriteResponse&& from) noexcept
    : CancelResumableWriteResponse() {
    *this = ::std::move(from);
  }

  inline CancelResumableWriteResponse& operator=(const CancelResumableWriteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelResumableWriteResponse& operator=(CancelResumableWriteResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CancelResumableWriteResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CancelResumableWriteResponse* internal_default_instance() {
    return reinterpret_cast<const CancelResumableWriteResponse*>(
               &_CancelResumableWriteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CancelResumableWriteResponse& a, CancelResumableWriteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CancelResumableWriteResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CancelResumableWriteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CancelResumableWriteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CancelResumableWriteResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CancelResumableWriteResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CancelResumableWriteResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.CancelResumableWriteResponse";
  }
  protected:
  explicit CancelResumableWriteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:google.storage.v2.CancelResumableWriteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class ReadObjectRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.ReadObjectRequest) */ {
 public:
  inline ReadObjectRequest() : ReadObjectRequest(nullptr) {}
  ~ReadObjectRequest() override;
  explicit PROTOBUF_CONSTEXPR ReadObjectRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadObjectRequest(const ReadObjectRequest& from);
  ReadObjectRequest(ReadObjectRequest&& from) noexcept
    : ReadObjectRequest() {
    *this = ::std::move(from);
  }

  inline ReadObjectRequest& operator=(const ReadObjectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadObjectRequest& operator=(ReadObjectRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadObjectRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadObjectRequest* internal_default_instance() {
    return reinterpret_cast<const ReadObjectRequest*>(
               &_ReadObjectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ReadObjectRequest& a, ReadObjectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadObjectRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadObjectRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReadObjectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReadObjectRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReadObjectRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReadObjectRequest& from) {
    ReadObjectRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadObjectRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.ReadObjectRequest";
  }
  protected:
  explicit ReadObjectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBucketFieldNumber = 1,
    kObjectFieldNumber = 2,
    kCommonObjectRequestParamsFieldNumber = 10,
    kReadMaskFieldNumber = 12,
    kGenerationFieldNumber = 3,
    kReadOffsetFieldNumber = 4,
    kReadLimitFieldNumber = 5,
    kIfGenerationMatchFieldNumber = 6,
    kIfGenerationNotMatchFieldNumber = 7,
    kIfMetagenerationMatchFieldNumber = 8,
    kIfMetagenerationNotMatchFieldNumber = 9,
  };
  // string bucket = 1;
  void clear_bucket();
  const std::string& bucket() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bucket(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bucket();
  PROTOBUF_NODISCARD std::string* release_bucket();
  void set_allocated_bucket(std::string* bucket);
  private:
  const std::string& _internal_bucket() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bucket(const std::string& value);
  std::string* _internal_mutable_bucket();
  public:

  // string object = 2;
  void clear_object();
  const std::string& object() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_object(ArgT0&& arg0, ArgT... args);
  std::string* mutable_object();
  PROTOBUF_NODISCARD std::string* release_object();
  void set_allocated_object(std::string* object);
  private:
  const std::string& _internal_object() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_object(const std::string& value);
  std::string* _internal_mutable_object();
  public:

  // .google.storage.v2.CommonObjectRequestParams common_object_request_params = 10;
  bool has_common_object_request_params() const;
  private:
  bool _internal_has_common_object_request_params() const;
  public:
  void clear_common_object_request_params();
  const ::google::storage::v2::CommonObjectRequestParams& common_object_request_params() const;
  PROTOBUF_NODISCARD ::google::storage::v2::CommonObjectRequestParams* release_common_object_request_params();
  ::google::storage::v2::CommonObjectRequestParams* mutable_common_object_request_params();
  void set_allocated_common_object_request_params(::google::storage::v2::CommonObjectRequestParams* common_object_request_params);
  private:
  const ::google::storage::v2::CommonObjectRequestParams& _internal_common_object_request_params() const;
  ::google::storage::v2::CommonObjectRequestParams* _internal_mutable_common_object_request_params();
  public:
  void unsafe_arena_set_allocated_common_object_request_params(
      ::google::storage::v2::CommonObjectRequestParams* common_object_request_params);
  ::google::storage::v2::CommonObjectRequestParams* unsafe_arena_release_common_object_request_params();

  // optional .google.protobuf.FieldMask read_mask = 12;
  bool has_read_mask() const;
  private:
  bool _internal_has_read_mask() const;
  public:
  void clear_read_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& read_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_read_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_read_mask();
  void set_allocated_read_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* read_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_read_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_read_mask();
  public:
  void unsafe_arena_set_allocated_read_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* read_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_read_mask();

  // int64 generation = 3;
  void clear_generation();
  int64_t generation() const;
  void set_generation(int64_t value);
  private:
  int64_t _internal_generation() const;
  void _internal_set_generation(int64_t value);
  public:

  // int64 read_offset = 4;
  void clear_read_offset();
  int64_t read_offset() const;
  void set_read_offset(int64_t value);
  private:
  int64_t _internal_read_offset() const;
  void _internal_set_read_offset(int64_t value);
  public:

  // int64 read_limit = 5;
  void clear_read_limit();
  int64_t read_limit() const;
  void set_read_limit(int64_t value);
  private:
  int64_t _internal_read_limit() const;
  void _internal_set_read_limit(int64_t value);
  public:

  // optional int64 if_generation_match = 6;
  bool has_if_generation_match() const;
  private:
  bool _internal_has_if_generation_match() const;
  public:
  void clear_if_generation_match();
  int64_t if_generation_match() const;
  void set_if_generation_match(int64_t value);
  private:
  int64_t _internal_if_generation_match() const;
  void _internal_set_if_generation_match(int64_t value);
  public:

  // optional int64 if_generation_not_match = 7;
  bool has_if_generation_not_match() const;
  private:
  bool _internal_has_if_generation_not_match() const;
  public:
  void clear_if_generation_not_match();
  int64_t if_generation_not_match() const;
  void set_if_generation_not_match(int64_t value);
  private:
  int64_t _internal_if_generation_not_match() const;
  void _internal_set_if_generation_not_match(int64_t value);
  public:

  // optional int64 if_metageneration_match = 8;
  bool has_if_metageneration_match() const;
  private:
  bool _internal_has_if_metageneration_match() const;
  public:
  void clear_if_metageneration_match();
  int64_t if_metageneration_match() const;
  void set_if_metageneration_match(int64_t value);
  private:
  int64_t _internal_if_metageneration_match() const;
  void _internal_set_if_metageneration_match(int64_t value);
  public:

  // optional int64 if_metageneration_not_match = 9;
  bool has_if_metageneration_not_match() const;
  private:
  bool _internal_has_if_metageneration_not_match() const;
  public:
  void clear_if_metageneration_not_match();
  int64_t if_metageneration_not_match() const;
  void set_if_metageneration_not_match(int64_t value);
  private:
  int64_t _internal_if_metageneration_not_match() const;
  void _internal_set_if_metageneration_not_match(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.storage.v2.ReadObjectRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bucket_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr object_;
    ::google::storage::v2::CommonObjectRequestParams* common_object_request_params_;
    ::PROTOBUF_NAMESPACE_ID::FieldMask* read_mask_;
    int64_t generation_;
    int64_t read_offset_;
    int64_t read_limit_;
    int64_t if_generation_match_;
    int64_t if_generation_not_match_;
    int64_t if_metageneration_match_;
    int64_t if_metageneration_not_match_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class GetObjectRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.GetObjectRequest) */ {
 public:
  inline GetObjectRequest() : GetObjectRequest(nullptr) {}
  ~GetObjectRequest() override;
  explicit PROTOBUF_CONSTEXPR GetObjectRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetObjectRequest(const GetObjectRequest& from);
  GetObjectRequest(GetObjectRequest&& from) noexcept
    : GetObjectRequest() {
    *this = ::std::move(from);
  }

  inline GetObjectRequest& operator=(const GetObjectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetObjectRequest& operator=(GetObjectRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetObjectRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetObjectRequest* internal_default_instance() {
    return reinterpret_cast<const GetObjectRequest*>(
               &_GetObjectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(GetObjectRequest& a, GetObjectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetObjectRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetObjectRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetObjectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetObjectRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetObjectRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetObjectRequest& from) {
    GetObjectRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetObjectRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.GetObjectRequest";
  }
  protected:
  explicit GetObjectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBucketFieldNumber = 1,
    kObjectFieldNumber = 2,
    kCommonObjectRequestParamsFieldNumber = 8,
    kReadMaskFieldNumber = 10,
    kGenerationFieldNumber = 3,
    kIfGenerationMatchFieldNumber = 4,
    kIfGenerationNotMatchFieldNumber = 5,
    kIfMetagenerationMatchFieldNumber = 6,
    kIfMetagenerationNotMatchFieldNumber = 7,
  };
  // string bucket = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_bucket();
  const std::string& bucket() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bucket(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bucket();
  PROTOBUF_NODISCARD std::string* release_bucket();
  void set_allocated_bucket(std::string* bucket);
  private:
  const std::string& _internal_bucket() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bucket(const std::string& value);
  std::string* _internal_mutable_bucket();
  public:

  // string object = 2 [(.google.api.field_behavior) = REQUIRED];
  void clear_object();
  const std::string& object() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_object(ArgT0&& arg0, ArgT... args);
  std::string* mutable_object();
  PROTOBUF_NODISCARD std::string* release_object();
  void set_allocated_object(std::string* object);
  private:
  const std::string& _internal_object() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_object(const std::string& value);
  std::string* _internal_mutable_object();
  public:

  // .google.storage.v2.CommonObjectRequestParams common_object_request_params = 8;
  bool has_common_object_request_params() const;
  private:
  bool _internal_has_common_object_request_params() const;
  public:
  void clear_common_object_request_params();
  const ::google::storage::v2::CommonObjectRequestParams& common_object_request_params() const;
  PROTOBUF_NODISCARD ::google::storage::v2::CommonObjectRequestParams* release_common_object_request_params();
  ::google::storage::v2::CommonObjectRequestParams* mutable_common_object_request_params();
  void set_allocated_common_object_request_params(::google::storage::v2::CommonObjectRequestParams* common_object_request_params);
  private:
  const ::google::storage::v2::CommonObjectRequestParams& _internal_common_object_request_params() const;
  ::google::storage::v2::CommonObjectRequestParams* _internal_mutable_common_object_request_params();
  public:
  void unsafe_arena_set_allocated_common_object_request_params(
      ::google::storage::v2::CommonObjectRequestParams* common_object_request_params);
  ::google::storage::v2::CommonObjectRequestParams* unsafe_arena_release_common_object_request_params();

  // optional .google.protobuf.FieldMask read_mask = 10;
  bool has_read_mask() const;
  private:
  bool _internal_has_read_mask() const;
  public:
  void clear_read_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& read_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_read_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_read_mask();
  void set_allocated_read_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* read_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_read_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_read_mask();
  public:
  void unsafe_arena_set_allocated_read_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* read_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_read_mask();

  // int64 generation = 3;
  void clear_generation();
  int64_t generation() const;
  void set_generation(int64_t value);
  private:
  int64_t _internal_generation() const;
  void _internal_set_generation(int64_t value);
  public:

  // optional int64 if_generation_match = 4;
  bool has_if_generation_match() const;
  private:
  bool _internal_has_if_generation_match() const;
  public:
  void clear_if_generation_match();
  int64_t if_generation_match() const;
  void set_if_generation_match(int64_t value);
  private:
  int64_t _internal_if_generation_match() const;
  void _internal_set_if_generation_match(int64_t value);
  public:

  // optional int64 if_generation_not_match = 5;
  bool has_if_generation_not_match() const;
  private:
  bool _internal_has_if_generation_not_match() const;
  public:
  void clear_if_generation_not_match();
  int64_t if_generation_not_match() const;
  void set_if_generation_not_match(int64_t value);
  private:
  int64_t _internal_if_generation_not_match() const;
  void _internal_set_if_generation_not_match(int64_t value);
  public:

  // optional int64 if_metageneration_match = 6;
  bool has_if_metageneration_match() const;
  private:
  bool _internal_has_if_metageneration_match() const;
  public:
  void clear_if_metageneration_match();
  int64_t if_metageneration_match() const;
  void set_if_metageneration_match(int64_t value);
  private:
  int64_t _internal_if_metageneration_match() const;
  void _internal_set_if_metageneration_match(int64_t value);
  public:

  // optional int64 if_metageneration_not_match = 7;
  bool has_if_metageneration_not_match() const;
  private:
  bool _internal_has_if_metageneration_not_match() const;
  public:
  void clear_if_metageneration_not_match();
  int64_t if_metageneration_not_match() const;
  void set_if_metageneration_not_match(int64_t value);
  private:
  int64_t _internal_if_metageneration_not_match() const;
  void _internal_set_if_metageneration_not_match(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.storage.v2.GetObjectRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bucket_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr object_;
    ::google::storage::v2::CommonObjectRequestParams* common_object_request_params_;
    ::PROTOBUF_NAMESPACE_ID::FieldMask* read_mask_;
    int64_t generation_;
    int64_t if_generation_match_;
    int64_t if_generation_not_match_;
    int64_t if_metageneration_match_;
    int64_t if_metageneration_not_match_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class ReadObjectResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.ReadObjectResponse) */ {
 public:
  inline ReadObjectResponse() : ReadObjectResponse(nullptr) {}
  ~ReadObjectResponse() override;
  explicit PROTOBUF_CONSTEXPR ReadObjectResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadObjectResponse(const ReadObjectResponse& from);
  ReadObjectResponse(ReadObjectResponse&& from) noexcept
    : ReadObjectResponse() {
    *this = ::std::move(from);
  }

  inline ReadObjectResponse& operator=(const ReadObjectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadObjectResponse& operator=(ReadObjectResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadObjectResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadObjectResponse* internal_default_instance() {
    return reinterpret_cast<const ReadObjectResponse*>(
               &_ReadObjectResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(ReadObjectResponse& a, ReadObjectResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadObjectResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadObjectResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReadObjectResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReadObjectResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReadObjectResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReadObjectResponse& from) {
    ReadObjectResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadObjectResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.ReadObjectResponse";
  }
  protected:
  explicit ReadObjectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChecksummedDataFieldNumber = 1,
    kObjectChecksumsFieldNumber = 2,
    kContentRangeFieldNumber = 3,
    kMetadataFieldNumber = 4,
  };
  // .google.storage.v2.ChecksummedData checksummed_data = 1;
  bool has_checksummed_data() const;
  private:
  bool _internal_has_checksummed_data() const;
  public:
  void clear_checksummed_data();
  const ::google::storage::v2::ChecksummedData& checksummed_data() const;
  PROTOBUF_NODISCARD ::google::storage::v2::ChecksummedData* release_checksummed_data();
  ::google::storage::v2::ChecksummedData* mutable_checksummed_data();
  void set_allocated_checksummed_data(::google::storage::v2::ChecksummedData* checksummed_data);
  private:
  const ::google::storage::v2::ChecksummedData& _internal_checksummed_data() const;
  ::google::storage::v2::ChecksummedData* _internal_mutable_checksummed_data();
  public:
  void unsafe_arena_set_allocated_checksummed_data(
      ::google::storage::v2::ChecksummedData* checksummed_data);
  ::google::storage::v2::ChecksummedData* unsafe_arena_release_checksummed_data();

  // .google.storage.v2.ObjectChecksums object_checksums = 2;
  bool has_object_checksums() const;
  private:
  bool _internal_has_object_checksums() const;
  public:
  void clear_object_checksums();
  const ::google::storage::v2::ObjectChecksums& object_checksums() const;
  PROTOBUF_NODISCARD ::google::storage::v2::ObjectChecksums* release_object_checksums();
  ::google::storage::v2::ObjectChecksums* mutable_object_checksums();
  void set_allocated_object_checksums(::google::storage::v2::ObjectChecksums* object_checksums);
  private:
  const ::google::storage::v2::ObjectChecksums& _internal_object_checksums() const;
  ::google::storage::v2::ObjectChecksums* _internal_mutable_object_checksums();
  public:
  void unsafe_arena_set_allocated_object_checksums(
      ::google::storage::v2::ObjectChecksums* object_checksums);
  ::google::storage::v2::ObjectChecksums* unsafe_arena_release_object_checksums();

  // .google.storage.v2.ContentRange content_range = 3;
  bool has_content_range() const;
  private:
  bool _internal_has_content_range() const;
  public:
  void clear_content_range();
  const ::google::storage::v2::ContentRange& content_range() const;
  PROTOBUF_NODISCARD ::google::storage::v2::ContentRange* release_content_range();
  ::google::storage::v2::ContentRange* mutable_content_range();
  void set_allocated_content_range(::google::storage::v2::ContentRange* content_range);
  private:
  const ::google::storage::v2::ContentRange& _internal_content_range() const;
  ::google::storage::v2::ContentRange* _internal_mutable_content_range();
  public:
  void unsafe_arena_set_allocated_content_range(
      ::google::storage::v2::ContentRange* content_range);
  ::google::storage::v2::ContentRange* unsafe_arena_release_content_range();

  // .google.storage.v2.Object metadata = 4;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::google::storage::v2::Object& metadata() const;
  PROTOBUF_NODISCARD ::google::storage::v2::Object* release_metadata();
  ::google::storage::v2::Object* mutable_metadata();
  void set_allocated_metadata(::google::storage::v2::Object* metadata);
  private:
  const ::google::storage::v2::Object& _internal_metadata() const;
  ::google::storage::v2::Object* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::google::storage::v2::Object* metadata);
  ::google::storage::v2::Object* unsafe_arena_release_metadata();

  // @@protoc_insertion_point(class_scope:google.storage.v2.ReadObjectResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::storage::v2::ChecksummedData* checksummed_data_;
    ::google::storage::v2::ObjectChecksums* object_checksums_;
    ::google::storage::v2::ContentRange* content_range_;
    ::google::storage::v2::Object* metadata_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class WriteObjectSpec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.WriteObjectSpec) */ {
 public:
  inline WriteObjectSpec() : WriteObjectSpec(nullptr) {}
  ~WriteObjectSpec() override;
  explicit PROTOBUF_CONSTEXPR WriteObjectSpec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WriteObjectSpec(const WriteObjectSpec& from);
  WriteObjectSpec(WriteObjectSpec&& from) noexcept
    : WriteObjectSpec() {
    *this = ::std::move(from);
  }

  inline WriteObjectSpec& operator=(const WriteObjectSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteObjectSpec& operator=(WriteObjectSpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WriteObjectSpec& default_instance() {
    return *internal_default_instance();
  }
  static inline const WriteObjectSpec* internal_default_instance() {
    return reinterpret_cast<const WriteObjectSpec*>(
               &_WriteObjectSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(WriteObjectSpec& a, WriteObjectSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteObjectSpec* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriteObjectSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WriteObjectSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WriteObjectSpec>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WriteObjectSpec& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WriteObjectSpec& from) {
    WriteObjectSpec::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteObjectSpec* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.WriteObjectSpec";
  }
  protected:
  explicit WriteObjectSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPredefinedAclFieldNumber = 7,
    kResourceFieldNumber = 1,
    kIfGenerationMatchFieldNumber = 3,
    kIfGenerationNotMatchFieldNumber = 4,
    kIfMetagenerationMatchFieldNumber = 5,
    kIfMetagenerationNotMatchFieldNumber = 6,
    kObjectSizeFieldNumber = 8,
  };
  // string predefined_acl = 7;
  void clear_predefined_acl();
  const std::string& predefined_acl() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_predefined_acl(ArgT0&& arg0, ArgT... args);
  std::string* mutable_predefined_acl();
  PROTOBUF_NODISCARD std::string* release_predefined_acl();
  void set_allocated_predefined_acl(std::string* predefined_acl);
  private:
  const std::string& _internal_predefined_acl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_predefined_acl(const std::string& value);
  std::string* _internal_mutable_predefined_acl();
  public:

  // .google.storage.v2.Object resource = 1;
  bool has_resource() const;
  private:
  bool _internal_has_resource() const;
  public:
  void clear_resource();
  const ::google::storage::v2::Object& resource() const;
  PROTOBUF_NODISCARD ::google::storage::v2::Object* release_resource();
  ::google::storage::v2::Object* mutable_resource();
  void set_allocated_resource(::google::storage::v2::Object* resource);
  private:
  const ::google::storage::v2::Object& _internal_resource() const;
  ::google::storage::v2::Object* _internal_mutable_resource();
  public:
  void unsafe_arena_set_allocated_resource(
      ::google::storage::v2::Object* resource);
  ::google::storage::v2::Object* unsafe_arena_release_resource();

  // optional int64 if_generation_match = 3;
  bool has_if_generation_match() const;
  private:
  bool _internal_has_if_generation_match() const;
  public:
  void clear_if_generation_match();
  int64_t if_generation_match() const;
  void set_if_generation_match(int64_t value);
  private:
  int64_t _internal_if_generation_match() const;
  void _internal_set_if_generation_match(int64_t value);
  public:

  // optional int64 if_generation_not_match = 4;
  bool has_if_generation_not_match() const;
  private:
  bool _internal_has_if_generation_not_match() const;
  public:
  void clear_if_generation_not_match();
  int64_t if_generation_not_match() const;
  void set_if_generation_not_match(int64_t value);
  private:
  int64_t _internal_if_generation_not_match() const;
  void _internal_set_if_generation_not_match(int64_t value);
  public:

  // optional int64 if_metageneration_match = 5;
  bool has_if_metageneration_match() const;
  private:
  bool _internal_has_if_metageneration_match() const;
  public:
  void clear_if_metageneration_match();
  int64_t if_metageneration_match() const;
  void set_if_metageneration_match(int64_t value);
  private:
  int64_t _internal_if_metageneration_match() const;
  void _internal_set_if_metageneration_match(int64_t value);
  public:

  // optional int64 if_metageneration_not_match = 6;
  bool has_if_metageneration_not_match() const;
  private:
  bool _internal_has_if_metageneration_not_match() const;
  public:
  void clear_if_metageneration_not_match();
  int64_t if_metageneration_not_match() const;
  void set_if_metageneration_not_match(int64_t value);
  private:
  int64_t _internal_if_metageneration_not_match() const;
  void _internal_set_if_metageneration_not_match(int64_t value);
  public:

  // optional int64 object_size = 8;
  bool has_object_size() const;
  private:
  bool _internal_has_object_size() const;
  public:
  void clear_object_size();
  int64_t object_size() const;
  void set_object_size(int64_t value);
  private:
  int64_t _internal_object_size() const;
  void _internal_set_object_size(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.storage.v2.WriteObjectSpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr predefined_acl_;
    ::google::storage::v2::Object* resource_;
    int64_t if_generation_match_;
    int64_t if_generation_not_match_;
    int64_t if_metageneration_match_;
    int64_t if_metageneration_not_match_;
    int64_t object_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class WriteObjectRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.WriteObjectRequest) */ {
 public:
  inline WriteObjectRequest() : WriteObjectRequest(nullptr) {}
  ~WriteObjectRequest() override;
  explicit PROTOBUF_CONSTEXPR WriteObjectRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WriteObjectRequest(const WriteObjectRequest& from);
  WriteObjectRequest(WriteObjectRequest&& from) noexcept
    : WriteObjectRequest() {
    *this = ::std::move(from);
  }

  inline WriteObjectRequest& operator=(const WriteObjectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteObjectRequest& operator=(WriteObjectRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WriteObjectRequest& default_instance() {
    return *internal_default_instance();
  }
  enum FirstMessageCase {
    kUploadId = 1,
    kWriteObjectSpec = 2,
    FIRST_MESSAGE_NOT_SET = 0,
  };

  enum DataCase {
    kChecksummedData = 4,
    DATA_NOT_SET = 0,
  };

  static inline const WriteObjectRequest* internal_default_instance() {
    return reinterpret_cast<const WriteObjectRequest*>(
               &_WriteObjectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(WriteObjectRequest& a, WriteObjectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteObjectRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriteObjectRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WriteObjectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WriteObjectRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WriteObjectRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WriteObjectRequest& from) {
    WriteObjectRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteObjectRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.WriteObjectRequest";
  }
  protected:
  explicit WriteObjectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectChecksumsFieldNumber = 6,
    kCommonObjectRequestParamsFieldNumber = 8,
    kWriteOffsetFieldNumber = 3,
    kFinishWriteFieldNumber = 7,
    kUploadIdFieldNumber = 1,
    kWriteObjectSpecFieldNumber = 2,
    kChecksummedDataFieldNumber = 4,
  };
  // .google.storage.v2.ObjectChecksums object_checksums = 6;
  bool has_object_checksums() const;
  private:
  bool _internal_has_object_checksums() const;
  public:
  void clear_object_checksums();
  const ::google::storage::v2::ObjectChecksums& object_checksums() const;
  PROTOBUF_NODISCARD ::google::storage::v2::ObjectChecksums* release_object_checksums();
  ::google::storage::v2::ObjectChecksums* mutable_object_checksums();
  void set_allocated_object_checksums(::google::storage::v2::ObjectChecksums* object_checksums);
  private:
  const ::google::storage::v2::ObjectChecksums& _internal_object_checksums() const;
  ::google::storage::v2::ObjectChecksums* _internal_mutable_object_checksums();
  public:
  void unsafe_arena_set_allocated_object_checksums(
      ::google::storage::v2::ObjectChecksums* object_checksums);
  ::google::storage::v2::ObjectChecksums* unsafe_arena_release_object_checksums();

  // .google.storage.v2.CommonObjectRequestParams common_object_request_params = 8;
  bool has_common_object_request_params() const;
  private:
  bool _internal_has_common_object_request_params() const;
  public:
  void clear_common_object_request_params();
  const ::google::storage::v2::CommonObjectRequestParams& common_object_request_params() const;
  PROTOBUF_NODISCARD ::google::storage::v2::CommonObjectRequestParams* release_common_object_request_params();
  ::google::storage::v2::CommonObjectRequestParams* mutable_common_object_request_params();
  void set_allocated_common_object_request_params(::google::storage::v2::CommonObjectRequestParams* common_object_request_params);
  private:
  const ::google::storage::v2::CommonObjectRequestParams& _internal_common_object_request_params() const;
  ::google::storage::v2::CommonObjectRequestParams* _internal_mutable_common_object_request_params();
  public:
  void unsafe_arena_set_allocated_common_object_request_params(
      ::google::storage::v2::CommonObjectRequestParams* common_object_request_params);
  ::google::storage::v2::CommonObjectRequestParams* unsafe_arena_release_common_object_request_params();

  // int64 write_offset = 3 [(.google.api.field_behavior) = REQUIRED];
  void clear_write_offset();
  int64_t write_offset() const;
  void set_write_offset(int64_t value);
  private:
  int64_t _internal_write_offset() const;
  void _internal_set_write_offset(int64_t value);
  public:

  // bool finish_write = 7;
  void clear_finish_write();
  bool finish_write() const;
  void set_finish_write(bool value);
  private:
  bool _internal_finish_write() const;
  void _internal_set_finish_write(bool value);
  public:

  // string upload_id = 1;
  bool has_upload_id() const;
  private:
  bool _internal_has_upload_id() const;
  public:
  void clear_upload_id();
  const std::string& upload_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_upload_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_upload_id();
  PROTOBUF_NODISCARD std::string* release_upload_id();
  void set_allocated_upload_id(std::string* upload_id);
  private:
  const std::string& _internal_upload_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_upload_id(const std::string& value);
  std::string* _internal_mutable_upload_id();
  public:

  // .google.storage.v2.WriteObjectSpec write_object_spec = 2;
  bool has_write_object_spec() const;
  private:
  bool _internal_has_write_object_spec() const;
  public:
  void clear_write_object_spec();
  const ::google::storage::v2::WriteObjectSpec& write_object_spec() const;
  PROTOBUF_NODISCARD ::google::storage::v2::WriteObjectSpec* release_write_object_spec();
  ::google::storage::v2::WriteObjectSpec* mutable_write_object_spec();
  void set_allocated_write_object_spec(::google::storage::v2::WriteObjectSpec* write_object_spec);
  private:
  const ::google::storage::v2::WriteObjectSpec& _internal_write_object_spec() const;
  ::google::storage::v2::WriteObjectSpec* _internal_mutable_write_object_spec();
  public:
  void unsafe_arena_set_allocated_write_object_spec(
      ::google::storage::v2::WriteObjectSpec* write_object_spec);
  ::google::storage::v2::WriteObjectSpec* unsafe_arena_release_write_object_spec();

  // .google.storage.v2.ChecksummedData checksummed_data = 4;
  bool has_checksummed_data() const;
  private:
  bool _internal_has_checksummed_data() const;
  public:
  void clear_checksummed_data();
  const ::google::storage::v2::ChecksummedData& checksummed_data() const;
  PROTOBUF_NODISCARD ::google::storage::v2::ChecksummedData* release_checksummed_data();
  ::google::storage::v2::ChecksummedData* mutable_checksummed_data();
  void set_allocated_checksummed_data(::google::storage::v2::ChecksummedData* checksummed_data);
  private:
  const ::google::storage::v2::ChecksummedData& _internal_checksummed_data() const;
  ::google::storage::v2::ChecksummedData* _internal_mutable_checksummed_data();
  public:
  void unsafe_arena_set_allocated_checksummed_data(
      ::google::storage::v2::ChecksummedData* checksummed_data);
  ::google::storage::v2::ChecksummedData* unsafe_arena_release_checksummed_data();

  void clear_first_message();
  FirstMessageCase first_message_case() const;
  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:google.storage.v2.WriteObjectRequest)
 private:
  class _Internal;
  void set_has_upload_id();
  void set_has_write_object_spec();
  void set_has_checksummed_data();

  inline bool has_first_message() const;
  inline void clear_has_first_message();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::storage::v2::ObjectChecksums* object_checksums_;
    ::google::storage::v2::CommonObjectRequestParams* common_object_request_params_;
    int64_t write_offset_;
    bool finish_write_;
    union FirstMessageUnion {
      constexpr FirstMessageUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr upload_id_;
      ::google::storage::v2::WriteObjectSpec* write_object_spec_;
    } first_message_;
    union DataUnion {
      constexpr DataUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::google::storage::v2::ChecksummedData* checksummed_data_;
    } data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[2];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class WriteObjectResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.WriteObjectResponse) */ {
 public:
  inline WriteObjectResponse() : WriteObjectResponse(nullptr) {}
  ~WriteObjectResponse() override;
  explicit PROTOBUF_CONSTEXPR WriteObjectResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WriteObjectResponse(const WriteObjectResponse& from);
  WriteObjectResponse(WriteObjectResponse&& from) noexcept
    : WriteObjectResponse() {
    *this = ::std::move(from);
  }

  inline WriteObjectResponse& operator=(const WriteObjectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteObjectResponse& operator=(WriteObjectResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WriteObjectResponse& default_instance() {
    return *internal_default_instance();
  }
  enum WriteStatusCase {
    kPersistedSize = 1,
    kResource = 2,
    WRITE_STATUS_NOT_SET = 0,
  };

  static inline const WriteObjectResponse* internal_default_instance() {
    return reinterpret_cast<const WriteObjectResponse*>(
               &_WriteObjectResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(WriteObjectResponse& a, WriteObjectResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteObjectResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriteObjectResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WriteObjectResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WriteObjectResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WriteObjectResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WriteObjectResponse& from) {
    WriteObjectResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteObjectResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.WriteObjectResponse";
  }
  protected:
  explicit WriteObjectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPersistedSizeFieldNumber = 1,
    kResourceFieldNumber = 2,
  };
  // int64 persisted_size = 1;
  bool has_persisted_size() const;
  private:
  bool _internal_has_persisted_size() const;
  public:
  void clear_persisted_size();
  int64_t persisted_size() const;
  void set_persisted_size(int64_t value);
  private:
  int64_t _internal_persisted_size() const;
  void _internal_set_persisted_size(int64_t value);
  public:

  // .google.storage.v2.Object resource = 2;
  bool has_resource() const;
  private:
  bool _internal_has_resource() const;
  public:
  void clear_resource();
  const ::google::storage::v2::Object& resource() const;
  PROTOBUF_NODISCARD ::google::storage::v2::Object* release_resource();
  ::google::storage::v2::Object* mutable_resource();
  void set_allocated_resource(::google::storage::v2::Object* resource);
  private:
  const ::google::storage::v2::Object& _internal_resource() const;
  ::google::storage::v2::Object* _internal_mutable_resource();
  public:
  void unsafe_arena_set_allocated_resource(
      ::google::storage::v2::Object* resource);
  ::google::storage::v2::Object* unsafe_arena_release_resource();

  void clear_write_status();
  WriteStatusCase write_status_case() const;
  // @@protoc_insertion_point(class_scope:google.storage.v2.WriteObjectResponse)
 private:
  class _Internal;
  void set_has_persisted_size();
  void set_has_resource();

  inline bool has_write_status() const;
  inline void clear_has_write_status();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union WriteStatusUnion {
      constexpr WriteStatusUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      int64_t persisted_size_;
      ::google::storage::v2::Object* resource_;
    } write_status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class ListObjectsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.ListObjectsRequest) */ {
 public:
  inline ListObjectsRequest() : ListObjectsRequest(nullptr) {}
  ~ListObjectsRequest() override;
  explicit PROTOBUF_CONSTEXPR ListObjectsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListObjectsRequest(const ListObjectsRequest& from);
  ListObjectsRequest(ListObjectsRequest&& from) noexcept
    : ListObjectsRequest() {
    *this = ::std::move(from);
  }

  inline ListObjectsRequest& operator=(const ListObjectsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListObjectsRequest& operator=(ListObjectsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListObjectsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListObjectsRequest* internal_default_instance() {
    return reinterpret_cast<const ListObjectsRequest*>(
               &_ListObjectsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(ListObjectsRequest& a, ListObjectsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListObjectsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListObjectsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListObjectsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListObjectsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListObjectsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListObjectsRequest& from) {
    ListObjectsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListObjectsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.ListObjectsRequest";
  }
  protected:
  explicit ListObjectsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kDelimiterFieldNumber = 4,
    kPrefixFieldNumber = 6,
    kLexicographicStartFieldNumber = 10,
    kLexicographicEndFieldNumber = 11,
    kReadMaskFieldNumber = 8,
    kPageSizeFieldNumber = 2,
    kIncludeTrailingDelimiterFieldNumber = 5,
    kVersionsFieldNumber = 7,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 3;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // string delimiter = 4;
  void clear_delimiter();
  const std::string& delimiter() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_delimiter(ArgT0&& arg0, ArgT... args);
  std::string* mutable_delimiter();
  PROTOBUF_NODISCARD std::string* release_delimiter();
  void set_allocated_delimiter(std::string* delimiter);
  private:
  const std::string& _internal_delimiter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_delimiter(const std::string& value);
  std::string* _internal_mutable_delimiter();
  public:

  // string prefix = 6;
  void clear_prefix();
  const std::string& prefix() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_prefix(ArgT0&& arg0, ArgT... args);
  std::string* mutable_prefix();
  PROTOBUF_NODISCARD std::string* release_prefix();
  void set_allocated_prefix(std::string* prefix);
  private:
  const std::string& _internal_prefix() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prefix(const std::string& value);
  std::string* _internal_mutable_prefix();
  public:

  // string lexicographic_start = 10;
  void clear_lexicographic_start();
  const std::string& lexicographic_start() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lexicographic_start(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lexicographic_start();
  PROTOBUF_NODISCARD std::string* release_lexicographic_start();
  void set_allocated_lexicographic_start(std::string* lexicographic_start);
  private:
  const std::string& _internal_lexicographic_start() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lexicographic_start(const std::string& value);
  std::string* _internal_mutable_lexicographic_start();
  public:

  // string lexicographic_end = 11;
  void clear_lexicographic_end();
  const std::string& lexicographic_end() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lexicographic_end(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lexicographic_end();
  PROTOBUF_NODISCARD std::string* release_lexicographic_end();
  void set_allocated_lexicographic_end(std::string* lexicographic_end);
  private:
  const std::string& _internal_lexicographic_end() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lexicographic_end(const std::string& value);
  std::string* _internal_mutable_lexicographic_end();
  public:

  // optional .google.protobuf.FieldMask read_mask = 8;
  bool has_read_mask() const;
  private:
  bool _internal_has_read_mask() const;
  public:
  void clear_read_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& read_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_read_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_read_mask();
  void set_allocated_read_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* read_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_read_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_read_mask();
  public:
  void unsafe_arena_set_allocated_read_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* read_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_read_mask();

  // int32 page_size = 2;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // bool include_trailing_delimiter = 5;
  void clear_include_trailing_delimiter();
  bool include_trailing_delimiter() const;
  void set_include_trailing_delimiter(bool value);
  private:
  bool _internal_include_trailing_delimiter() const;
  void _internal_set_include_trailing_delimiter(bool value);
  public:

  // bool versions = 7;
  void clear_versions();
  bool versions() const;
  void set_versions(bool value);
  private:
  bool _internal_versions() const;
  void _internal_set_versions(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.storage.v2.ListObjectsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr delimiter_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prefix_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lexicographic_start_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lexicographic_end_;
    ::PROTOBUF_NAMESPACE_ID::FieldMask* read_mask_;
    int32_t page_size_;
    bool include_trailing_delimiter_;
    bool versions_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class QueryWriteStatusRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.QueryWriteStatusRequest) */ {
 public:
  inline QueryWriteStatusRequest() : QueryWriteStatusRequest(nullptr) {}
  ~QueryWriteStatusRequest() override;
  explicit PROTOBUF_CONSTEXPR QueryWriteStatusRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryWriteStatusRequest(const QueryWriteStatusRequest& from);
  QueryWriteStatusRequest(QueryWriteStatusRequest&& from) noexcept
    : QueryWriteStatusRequest() {
    *this = ::std::move(from);
  }

  inline QueryWriteStatusRequest& operator=(const QueryWriteStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryWriteStatusRequest& operator=(QueryWriteStatusRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryWriteStatusRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryWriteStatusRequest* internal_default_instance() {
    return reinterpret_cast<const QueryWriteStatusRequest*>(
               &_QueryWriteStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(QueryWriteStatusRequest& a, QueryWriteStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryWriteStatusRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryWriteStatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryWriteStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryWriteStatusRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryWriteStatusRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryWriteStatusRequest& from) {
    QueryWriteStatusRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryWriteStatusRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.QueryWriteStatusRequest";
  }
  protected:
  explicit QueryWriteStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUploadIdFieldNumber = 1,
    kCommonObjectRequestParamsFieldNumber = 2,
  };
  // string upload_id = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_upload_id();
  const std::string& upload_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_upload_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_upload_id();
  PROTOBUF_NODISCARD std::string* release_upload_id();
  void set_allocated_upload_id(std::string* upload_id);
  private:
  const std::string& _internal_upload_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_upload_id(const std::string& value);
  std::string* _internal_mutable_upload_id();
  public:

  // .google.storage.v2.CommonObjectRequestParams common_object_request_params = 2;
  bool has_common_object_request_params() const;
  private:
  bool _internal_has_common_object_request_params() const;
  public:
  void clear_common_object_request_params();
  const ::google::storage::v2::CommonObjectRequestParams& common_object_request_params() const;
  PROTOBUF_NODISCARD ::google::storage::v2::CommonObjectRequestParams* release_common_object_request_params();
  ::google::storage::v2::CommonObjectRequestParams* mutable_common_object_request_params();
  void set_allocated_common_object_request_params(::google::storage::v2::CommonObjectRequestParams* common_object_request_params);
  private:
  const ::google::storage::v2::CommonObjectRequestParams& _internal_common_object_request_params() const;
  ::google::storage::v2::CommonObjectRequestParams* _internal_mutable_common_object_request_params();
  public:
  void unsafe_arena_set_allocated_common_object_request_params(
      ::google::storage::v2::CommonObjectRequestParams* common_object_request_params);
  ::google::storage::v2::CommonObjectRequestParams* unsafe_arena_release_common_object_request_params();

  // @@protoc_insertion_point(class_scope:google.storage.v2.QueryWriteStatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr upload_id_;
    ::google::storage::v2::CommonObjectRequestParams* common_object_request_params_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class QueryWriteStatusResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.QueryWriteStatusResponse) */ {
 public:
  inline QueryWriteStatusResponse() : QueryWriteStatusResponse(nullptr) {}
  ~QueryWriteStatusResponse() override;
  explicit PROTOBUF_CONSTEXPR QueryWriteStatusResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryWriteStatusResponse(const QueryWriteStatusResponse& from);
  QueryWriteStatusResponse(QueryWriteStatusResponse&& from) noexcept
    : QueryWriteStatusResponse() {
    *this = ::std::move(from);
  }

  inline QueryWriteStatusResponse& operator=(const QueryWriteStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryWriteStatusResponse& operator=(QueryWriteStatusResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryWriteStatusResponse& default_instance() {
    return *internal_default_instance();
  }
  enum WriteStatusCase {
    kPersistedSize = 1,
    kResource = 2,
    WRITE_STATUS_NOT_SET = 0,
  };

  static inline const QueryWriteStatusResponse* internal_default_instance() {
    return reinterpret_cast<const QueryWriteStatusResponse*>(
               &_QueryWriteStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(QueryWriteStatusResponse& a, QueryWriteStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryWriteStatusResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryWriteStatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryWriteStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryWriteStatusResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryWriteStatusResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryWriteStatusResponse& from) {
    QueryWriteStatusResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryWriteStatusResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.QueryWriteStatusResponse";
  }
  protected:
  explicit QueryWriteStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPersistedSizeFieldNumber = 1,
    kResourceFieldNumber = 2,
  };
  // int64 persisted_size = 1;
  bool has_persisted_size() const;
  private:
  bool _internal_has_persisted_size() const;
  public:
  void clear_persisted_size();
  int64_t persisted_size() const;
  void set_persisted_size(int64_t value);
  private:
  int64_t _internal_persisted_size() const;
  void _internal_set_persisted_size(int64_t value);
  public:

  // .google.storage.v2.Object resource = 2;
  bool has_resource() const;
  private:
  bool _internal_has_resource() const;
  public:
  void clear_resource();
  const ::google::storage::v2::Object& resource() const;
  PROTOBUF_NODISCARD ::google::storage::v2::Object* release_resource();
  ::google::storage::v2::Object* mutable_resource();
  void set_allocated_resource(::google::storage::v2::Object* resource);
  private:
  const ::google::storage::v2::Object& _internal_resource() const;
  ::google::storage::v2::Object* _internal_mutable_resource();
  public:
  void unsafe_arena_set_allocated_resource(
      ::google::storage::v2::Object* resource);
  ::google::storage::v2::Object* unsafe_arena_release_resource();

  void clear_write_status();
  WriteStatusCase write_status_case() const;
  // @@protoc_insertion_point(class_scope:google.storage.v2.QueryWriteStatusResponse)
 private:
  class _Internal;
  void set_has_persisted_size();
  void set_has_resource();

  inline bool has_write_status() const;
  inline void clear_has_write_status();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union WriteStatusUnion {
      constexpr WriteStatusUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      int64_t persisted_size_;
      ::google::storage::v2::Object* resource_;
    } write_status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class RewriteObjectRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.RewriteObjectRequest) */ {
 public:
  inline RewriteObjectRequest() : RewriteObjectRequest(nullptr) {}
  ~RewriteObjectRequest() override;
  explicit PROTOBUF_CONSTEXPR RewriteObjectRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RewriteObjectRequest(const RewriteObjectRequest& from);
  RewriteObjectRequest(RewriteObjectRequest&& from) noexcept
    : RewriteObjectRequest() {
    *this = ::std::move(from);
  }

  inline RewriteObjectRequest& operator=(const RewriteObjectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RewriteObjectRequest& operator=(RewriteObjectRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RewriteObjectRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RewriteObjectRequest* internal_default_instance() {
    return reinterpret_cast<const RewriteObjectRequest*>(
               &_RewriteObjectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(RewriteObjectRequest& a, RewriteObjectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RewriteObjectRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RewriteObjectRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RewriteObjectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RewriteObjectRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RewriteObjectRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RewriteObjectRequest& from) {
    RewriteObjectRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RewriteObjectRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.RewriteObjectRequest";
  }
  protected:
  explicit RewriteObjectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceBucketFieldNumber = 2,
    kSourceObjectFieldNumber = 3,
    kRewriteTokenFieldNumber = 5,
    kCopySourceEncryptionAlgorithmFieldNumber = 16,
    kCopySourceEncryptionKeyBytesFieldNumber = 21,
    kCopySourceEncryptionKeySha256BytesFieldNumber = 22,
    kDestinationNameFieldNumber = 24,
    kDestinationBucketFieldNumber = 25,
    kDestinationKmsKeyFieldNumber = 27,
    kDestinationPredefinedAclFieldNumber = 28,
    kDestinationFieldNumber = 1,
    kCommonObjectRequestParamsFieldNumber = 19,
    kSourceGenerationFieldNumber = 4,
    kIfGenerationMatchFieldNumber = 7,
    kIfGenerationNotMatchFieldNumber = 8,
    kIfMetagenerationMatchFieldNumber = 9,
    kIfMetagenerationNotMatchFieldNumber = 10,
    kIfSourceGenerationMatchFieldNumber = 11,
    kIfSourceGenerationNotMatchFieldNumber = 12,
    kIfSourceMetagenerationMatchFieldNumber = 13,
    kIfSourceMetagenerationNotMatchFieldNumber = 14,
    kMaxBytesRewrittenPerCallFieldNumber = 15,
  };
  // string source_bucket = 2 [(.google.api.field_behavior) = REQUIRED];
  void clear_source_bucket();
  const std::string& source_bucket() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_source_bucket(ArgT0&& arg0, ArgT... args);
  std::string* mutable_source_bucket();
  PROTOBUF_NODISCARD std::string* release_source_bucket();
  void set_allocated_source_bucket(std::string* source_bucket);
  private:
  const std::string& _internal_source_bucket() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source_bucket(const std::string& value);
  std::string* _internal_mutable_source_bucket();
  public:

  // string source_object = 3 [(.google.api.field_behavior) = REQUIRED];
  void clear_source_object();
  const std::string& source_object() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_source_object(ArgT0&& arg0, ArgT... args);
  std::string* mutable_source_object();
  PROTOBUF_NODISCARD std::string* release_source_object();
  void set_allocated_source_object(std::string* source_object);
  private:
  const std::string& _internal_source_object() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source_object(const std::string& value);
  std::string* _internal_mutable_source_object();
  public:

  // string rewrite_token = 5;
  void clear_rewrite_token();
  const std::string& rewrite_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rewrite_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rewrite_token();
  PROTOBUF_NODISCARD std::string* release_rewrite_token();
  void set_allocated_rewrite_token(std::string* rewrite_token);
  private:
  const std::string& _internal_rewrite_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rewrite_token(const std::string& value);
  std::string* _internal_mutable_rewrite_token();
  public:

  // string copy_source_encryption_algorithm = 16;
  void clear_copy_source_encryption_algorithm();
  const std::string& copy_source_encryption_algorithm() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_copy_source_encryption_algorithm(ArgT0&& arg0, ArgT... args);
  std::string* mutable_copy_source_encryption_algorithm();
  PROTOBUF_NODISCARD std::string* release_copy_source_encryption_algorithm();
  void set_allocated_copy_source_encryption_algorithm(std::string* copy_source_encryption_algorithm);
  private:
  const std::string& _internal_copy_source_encryption_algorithm() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_copy_source_encryption_algorithm(const std::string& value);
  std::string* _internal_mutable_copy_source_encryption_algorithm();
  public:

  // bytes copy_source_encryption_key_bytes = 21;
  void clear_copy_source_encryption_key_bytes();
  const std::string& copy_source_encryption_key_bytes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_copy_source_encryption_key_bytes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_copy_source_encryption_key_bytes();
  PROTOBUF_NODISCARD std::string* release_copy_source_encryption_key_bytes();
  void set_allocated_copy_source_encryption_key_bytes(std::string* copy_source_encryption_key_bytes);
  private:
  const std::string& _internal_copy_source_encryption_key_bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_copy_source_encryption_key_bytes(const std::string& value);
  std::string* _internal_mutable_copy_source_encryption_key_bytes();
  public:

  // bytes copy_source_encryption_key_sha256_bytes = 22;
  void clear_copy_source_encryption_key_sha256_bytes();
  const std::string& copy_source_encryption_key_sha256_bytes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_copy_source_encryption_key_sha256_bytes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_copy_source_encryption_key_sha256_bytes();
  PROTOBUF_NODISCARD std::string* release_copy_source_encryption_key_sha256_bytes();
  void set_allocated_copy_source_encryption_key_sha256_bytes(std::string* copy_source_encryption_key_sha256_bytes);
  private:
  const std::string& _internal_copy_source_encryption_key_sha256_bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_copy_source_encryption_key_sha256_bytes(const std::string& value);
  std::string* _internal_mutable_copy_source_encryption_key_sha256_bytes();
  public:

  // string destination_name = 24 [(.google.api.field_behavior) = IMMUTABLE];
  void clear_destination_name();
  const std::string& destination_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_destination_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_destination_name();
  PROTOBUF_NODISCARD std::string* release_destination_name();
  void set_allocated_destination_name(std::string* destination_name);
  private:
  const std::string& _internal_destination_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_destination_name(const std::string& value);
  std::string* _internal_mutable_destination_name();
  public:

  // string destination_bucket = 25 [(.google.api.field_behavior) = IMMUTABLE, (.google.api.resource_reference) = {
  void clear_destination_bucket();
  const std::string& destination_bucket() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_destination_bucket(ArgT0&& arg0, ArgT... args);
  std::string* mutable_destination_bucket();
  PROTOBUF_NODISCARD std::string* release_destination_bucket();
  void set_allocated_destination_bucket(std::string* destination_bucket);
  private:
  const std::string& _internal_destination_bucket() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_destination_bucket(const std::string& value);
  std::string* _internal_mutable_destination_bucket();
  public:

  // string destination_kms_key = 27 [(.google.api.resource_reference) = {
  void clear_destination_kms_key();
  const std::string& destination_kms_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_destination_kms_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_destination_kms_key();
  PROTOBUF_NODISCARD std::string* release_destination_kms_key();
  void set_allocated_destination_kms_key(std::string* destination_kms_key);
  private:
  const std::string& _internal_destination_kms_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_destination_kms_key(const std::string& value);
  std::string* _internal_mutable_destination_kms_key();
  public:

  // string destination_predefined_acl = 28;
  void clear_destination_predefined_acl();
  const std::string& destination_predefined_acl() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_destination_predefined_acl(ArgT0&& arg0, ArgT... args);
  std::string* mutable_destination_predefined_acl();
  PROTOBUF_NODISCARD std::string* release_destination_predefined_acl();
  void set_allocated_destination_predefined_acl(std::string* destination_predefined_acl);
  private:
  const std::string& _internal_destination_predefined_acl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_destination_predefined_acl(const std::string& value);
  std::string* _internal_mutable_destination_predefined_acl();
  public:

  // .google.storage.v2.Object destination = 1;
  bool has_destination() const;
  private:
  bool _internal_has_destination() const;
  public:
  void clear_destination();
  const ::google::storage::v2::Object& destination() const;
  PROTOBUF_NODISCARD ::google::storage::v2::Object* release_destination();
  ::google::storage::v2::Object* mutable_destination();
  void set_allocated_destination(::google::storage::v2::Object* destination);
  private:
  const ::google::storage::v2::Object& _internal_destination() const;
  ::google::storage::v2::Object* _internal_mutable_destination();
  public:
  void unsafe_arena_set_allocated_destination(
      ::google::storage::v2::Object* destination);
  ::google::storage::v2::Object* unsafe_arena_release_destination();

  // .google.storage.v2.CommonObjectRequestParams common_object_request_params = 19;
  bool has_common_object_request_params() const;
  private:
  bool _internal_has_common_object_request_params() const;
  public:
  void clear_common_object_request_params();
  const ::google::storage::v2::CommonObjectRequestParams& common_object_request_params() const;
  PROTOBUF_NODISCARD ::google::storage::v2::CommonObjectRequestParams* release_common_object_request_params();
  ::google::storage::v2::CommonObjectRequestParams* mutable_common_object_request_params();
  void set_allocated_common_object_request_params(::google::storage::v2::CommonObjectRequestParams* common_object_request_params);
  private:
  const ::google::storage::v2::CommonObjectRequestParams& _internal_common_object_request_params() const;
  ::google::storage::v2::CommonObjectRequestParams* _internal_mutable_common_object_request_params();
  public:
  void unsafe_arena_set_allocated_common_object_request_params(
      ::google::storage::v2::CommonObjectRequestParams* common_object_request_params);
  ::google::storage::v2::CommonObjectRequestParams* unsafe_arena_release_common_object_request_params();

  // int64 source_generation = 4;
  void clear_source_generation();
  int64_t source_generation() const;
  void set_source_generation(int64_t value);
  private:
  int64_t _internal_source_generation() const;
  void _internal_set_source_generation(int64_t value);
  public:

  // optional int64 if_generation_match = 7;
  bool has_if_generation_match() const;
  private:
  bool _internal_has_if_generation_match() const;
  public:
  void clear_if_generation_match();
  int64_t if_generation_match() const;
  void set_if_generation_match(int64_t value);
  private:
  int64_t _internal_if_generation_match() const;
  void _internal_set_if_generation_match(int64_t value);
  public:

  // optional int64 if_generation_not_match = 8;
  bool has_if_generation_not_match() const;
  private:
  bool _internal_has_if_generation_not_match() const;
  public:
  void clear_if_generation_not_match();
  int64_t if_generation_not_match() const;
  void set_if_generation_not_match(int64_t value);
  private:
  int64_t _internal_if_generation_not_match() const;
  void _internal_set_if_generation_not_match(int64_t value);
  public:

  // optional int64 if_metageneration_match = 9;
  bool has_if_metageneration_match() const;
  private:
  bool _internal_has_if_metageneration_match() const;
  public:
  void clear_if_metageneration_match();
  int64_t if_metageneration_match() const;
  void set_if_metageneration_match(int64_t value);
  private:
  int64_t _internal_if_metageneration_match() const;
  void _internal_set_if_metageneration_match(int64_t value);
  public:

  // optional int64 if_metageneration_not_match = 10;
  bool has_if_metageneration_not_match() const;
  private:
  bool _internal_has_if_metageneration_not_match() const;
  public:
  void clear_if_metageneration_not_match();
  int64_t if_metageneration_not_match() const;
  void set_if_metageneration_not_match(int64_t value);
  private:
  int64_t _internal_if_metageneration_not_match() const;
  void _internal_set_if_metageneration_not_match(int64_t value);
  public:

  // optional int64 if_source_generation_match = 11;
  bool has_if_source_generation_match() const;
  private:
  bool _internal_has_if_source_generation_match() const;
  public:
  void clear_if_source_generation_match();
  int64_t if_source_generation_match() const;
  void set_if_source_generation_match(int64_t value);
  private:
  int64_t _internal_if_source_generation_match() const;
  void _internal_set_if_source_generation_match(int64_t value);
  public:

  // optional int64 if_source_generation_not_match = 12;
  bool has_if_source_generation_not_match() const;
  private:
  bool _internal_has_if_source_generation_not_match() const;
  public:
  void clear_if_source_generation_not_match();
  int64_t if_source_generation_not_match() const;
  void set_if_source_generation_not_match(int64_t value);
  private:
  int64_t _internal_if_source_generation_not_match() const;
  void _internal_set_if_source_generation_not_match(int64_t value);
  public:

  // optional int64 if_source_metageneration_match = 13;
  bool has_if_source_metageneration_match() const;
  private:
  bool _internal_has_if_source_metageneration_match() const;
  public:
  void clear_if_source_metageneration_match();
  int64_t if_source_metageneration_match() const;
  void set_if_source_metageneration_match(int64_t value);
  private:
  int64_t _internal_if_source_metageneration_match() const;
  void _internal_set_if_source_metageneration_match(int64_t value);
  public:

  // optional int64 if_source_metageneration_not_match = 14;
  bool has_if_source_metageneration_not_match() const;
  private:
  bool _internal_has_if_source_metageneration_not_match() const;
  public:
  void clear_if_source_metageneration_not_match();
  int64_t if_source_metageneration_not_match() const;
  void set_if_source_metageneration_not_match(int64_t value);
  private:
  int64_t _internal_if_source_metageneration_not_match() const;
  void _internal_set_if_source_metageneration_not_match(int64_t value);
  public:

  // int64 max_bytes_rewritten_per_call = 15;
  void clear_max_bytes_rewritten_per_call();
  int64_t max_bytes_rewritten_per_call() const;
  void set_max_bytes_rewritten_per_call(int64_t value);
  private:
  int64_t _internal_max_bytes_rewritten_per_call() const;
  void _internal_set_max_bytes_rewritten_per_call(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.storage.v2.RewriteObjectRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_bucket_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_object_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rewrite_token_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr copy_source_encryption_algorithm_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr copy_source_encryption_key_bytes_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr copy_source_encryption_key_sha256_bytes_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr destination_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr destination_bucket_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr destination_kms_key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr destination_predefined_acl_;
    ::google::storage::v2::Object* destination_;
    ::google::storage::v2::CommonObjectRequestParams* common_object_request_params_;
    int64_t source_generation_;
    int64_t if_generation_match_;
    int64_t if_generation_not_match_;
    int64_t if_metageneration_match_;
    int64_t if_metageneration_not_match_;
    int64_t if_source_generation_match_;
    int64_t if_source_generation_not_match_;
    int64_t if_source_metageneration_match_;
    int64_t if_source_metageneration_not_match_;
    int64_t max_bytes_rewritten_per_call_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class RewriteResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.RewriteResponse) */ {
 public:
  inline RewriteResponse() : RewriteResponse(nullptr) {}
  ~RewriteResponse() override;
  explicit PROTOBUF_CONSTEXPR RewriteResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RewriteResponse(const RewriteResponse& from);
  RewriteResponse(RewriteResponse&& from) noexcept
    : RewriteResponse() {
    *this = ::std::move(from);
  }

  inline RewriteResponse& operator=(const RewriteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RewriteResponse& operator=(RewriteResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RewriteResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RewriteResponse* internal_default_instance() {
    return reinterpret_cast<const RewriteResponse*>(
               &_RewriteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(RewriteResponse& a, RewriteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RewriteResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RewriteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RewriteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RewriteResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RewriteResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RewriteResponse& from) {
    RewriteResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RewriteResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.RewriteResponse";
  }
  protected:
  explicit RewriteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRewriteTokenFieldNumber = 4,
    kResourceFieldNumber = 5,
    kTotalBytesRewrittenFieldNumber = 1,
    kObjectSizeFieldNumber = 2,
    kDoneFieldNumber = 3,
  };
  // string rewrite_token = 4;
  void clear_rewrite_token();
  const std::string& rewrite_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rewrite_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rewrite_token();
  PROTOBUF_NODISCARD std::string* release_rewrite_token();
  void set_allocated_rewrite_token(std::string* rewrite_token);
  private:
  const std::string& _internal_rewrite_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rewrite_token(const std::string& value);
  std::string* _internal_mutable_rewrite_token();
  public:

  // .google.storage.v2.Object resource = 5;
  bool has_resource() const;
  private:
  bool _internal_has_resource() const;
  public:
  void clear_resource();
  const ::google::storage::v2::Object& resource() const;
  PROTOBUF_NODISCARD ::google::storage::v2::Object* release_resource();
  ::google::storage::v2::Object* mutable_resource();
  void set_allocated_resource(::google::storage::v2::Object* resource);
  private:
  const ::google::storage::v2::Object& _internal_resource() const;
  ::google::storage::v2::Object* _internal_mutable_resource();
  public:
  void unsafe_arena_set_allocated_resource(
      ::google::storage::v2::Object* resource);
  ::google::storage::v2::Object* unsafe_arena_release_resource();

  // int64 total_bytes_rewritten = 1;
  void clear_total_bytes_rewritten();
  int64_t total_bytes_rewritten() const;
  void set_total_bytes_rewritten(int64_t value);
  private:
  int64_t _internal_total_bytes_rewritten() const;
  void _internal_set_total_bytes_rewritten(int64_t value);
  public:

  // int64 object_size = 2;
  void clear_object_size();
  int64_t object_size() const;
  void set_object_size(int64_t value);
  private:
  int64_t _internal_object_size() const;
  void _internal_set_object_size(int64_t value);
  public:

  // bool done = 3;
  void clear_done();
  bool done() const;
  void set_done(bool value);
  private:
  bool _internal_done() const;
  void _internal_set_done(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.storage.v2.RewriteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rewrite_token_;
    ::google::storage::v2::Object* resource_;
    int64_t total_bytes_rewritten_;
    int64_t object_size_;
    bool done_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class StartResumableWriteRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.StartResumableWriteRequest) */ {
 public:
  inline StartResumableWriteRequest() : StartResumableWriteRequest(nullptr) {}
  ~StartResumableWriteRequest() override;
  explicit PROTOBUF_CONSTEXPR StartResumableWriteRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartResumableWriteRequest(const StartResumableWriteRequest& from);
  StartResumableWriteRequest(StartResumableWriteRequest&& from) noexcept
    : StartResumableWriteRequest() {
    *this = ::std::move(from);
  }

  inline StartResumableWriteRequest& operator=(const StartResumableWriteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartResumableWriteRequest& operator=(StartResumableWriteRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StartResumableWriteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartResumableWriteRequest* internal_default_instance() {
    return reinterpret_cast<const StartResumableWriteRequest*>(
               &_StartResumableWriteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(StartResumableWriteRequest& a, StartResumableWriteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StartResumableWriteRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartResumableWriteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StartResumableWriteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StartResumableWriteRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StartResumableWriteRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StartResumableWriteRequest& from) {
    StartResumableWriteRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartResumableWriteRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.StartResumableWriteRequest";
  }
  protected:
  explicit StartResumableWriteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWriteObjectSpecFieldNumber = 1,
    kCommonObjectRequestParamsFieldNumber = 3,
  };
  // .google.storage.v2.WriteObjectSpec write_object_spec = 1;
  bool has_write_object_spec() const;
  private:
  bool _internal_has_write_object_spec() const;
  public:
  void clear_write_object_spec();
  const ::google::storage::v2::WriteObjectSpec& write_object_spec() const;
  PROTOBUF_NODISCARD ::google::storage::v2::WriteObjectSpec* release_write_object_spec();
  ::google::storage::v2::WriteObjectSpec* mutable_write_object_spec();
  void set_allocated_write_object_spec(::google::storage::v2::WriteObjectSpec* write_object_spec);
  private:
  const ::google::storage::v2::WriteObjectSpec& _internal_write_object_spec() const;
  ::google::storage::v2::WriteObjectSpec* _internal_mutable_write_object_spec();
  public:
  void unsafe_arena_set_allocated_write_object_spec(
      ::google::storage::v2::WriteObjectSpec* write_object_spec);
  ::google::storage::v2::WriteObjectSpec* unsafe_arena_release_write_object_spec();

  // .google.storage.v2.CommonObjectRequestParams common_object_request_params = 3;
  bool has_common_object_request_params() const;
  private:
  bool _internal_has_common_object_request_params() const;
  public:
  void clear_common_object_request_params();
  const ::google::storage::v2::CommonObjectRequestParams& common_object_request_params() const;
  PROTOBUF_NODISCARD ::google::storage::v2::CommonObjectRequestParams* release_common_object_request_params();
  ::google::storage::v2::CommonObjectRequestParams* mutable_common_object_request_params();
  void set_allocated_common_object_request_params(::google::storage::v2::CommonObjectRequestParams* common_object_request_params);
  private:
  const ::google::storage::v2::CommonObjectRequestParams& _internal_common_object_request_params() const;
  ::google::storage::v2::CommonObjectRequestParams* _internal_mutable_common_object_request_params();
  public:
  void unsafe_arena_set_allocated_common_object_request_params(
      ::google::storage::v2::CommonObjectRequestParams* common_object_request_params);
  ::google::storage::v2::CommonObjectRequestParams* unsafe_arena_release_common_object_request_params();

  // @@protoc_insertion_point(class_scope:google.storage.v2.StartResumableWriteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::storage::v2::WriteObjectSpec* write_object_spec_;
    ::google::storage::v2::CommonObjectRequestParams* common_object_request_params_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class StartResumableWriteResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.StartResumableWriteResponse) */ {
 public:
  inline StartResumableWriteResponse() : StartResumableWriteResponse(nullptr) {}
  ~StartResumableWriteResponse() override;
  explicit PROTOBUF_CONSTEXPR StartResumableWriteResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartResumableWriteResponse(const StartResumableWriteResponse& from);
  StartResumableWriteResponse(StartResumableWriteResponse&& from) noexcept
    : StartResumableWriteResponse() {
    *this = ::std::move(from);
  }

  inline StartResumableWriteResponse& operator=(const StartResumableWriteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartResumableWriteResponse& operator=(StartResumableWriteResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StartResumableWriteResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartResumableWriteResponse* internal_default_instance() {
    return reinterpret_cast<const StartResumableWriteResponse*>(
               &_StartResumableWriteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(StartResumableWriteResponse& a, StartResumableWriteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StartResumableWriteResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartResumableWriteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StartResumableWriteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StartResumableWriteResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StartResumableWriteResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StartResumableWriteResponse& from) {
    StartResumableWriteResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartResumableWriteResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.StartResumableWriteResponse";
  }
  protected:
  explicit StartResumableWriteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUploadIdFieldNumber = 1,
  };
  // string upload_id = 1;
  void clear_upload_id();
  const std::string& upload_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_upload_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_upload_id();
  PROTOBUF_NODISCARD std::string* release_upload_id();
  void set_allocated_upload_id(std::string* upload_id);
  private:
  const std::string& _internal_upload_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_upload_id(const std::string& value);
  std::string* _internal_mutable_upload_id();
  public:

  // @@protoc_insertion_point(class_scope:google.storage.v2.StartResumableWriteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr upload_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class UpdateObjectRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.UpdateObjectRequest) */ {
 public:
  inline UpdateObjectRequest() : UpdateObjectRequest(nullptr) {}
  ~UpdateObjectRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateObjectRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateObjectRequest(const UpdateObjectRequest& from);
  UpdateObjectRequest(UpdateObjectRequest&& from) noexcept
    : UpdateObjectRequest() {
    *this = ::std::move(from);
  }

  inline UpdateObjectRequest& operator=(const UpdateObjectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateObjectRequest& operator=(UpdateObjectRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateObjectRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateObjectRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateObjectRequest*>(
               &_UpdateObjectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(UpdateObjectRequest& a, UpdateObjectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateObjectRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateObjectRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateObjectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateObjectRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateObjectRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateObjectRequest& from) {
    UpdateObjectRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateObjectRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.UpdateObjectRequest";
  }
  protected:
  explicit UpdateObjectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPredefinedAclFieldNumber = 10,
    kObjectFieldNumber = 1,
    kUpdateMaskFieldNumber = 7,
    kCommonObjectRequestParamsFieldNumber = 8,
    kIfGenerationMatchFieldNumber = 2,
    kIfGenerationNotMatchFieldNumber = 3,
    kIfMetagenerationMatchFieldNumber = 4,
    kIfMetagenerationNotMatchFieldNumber = 5,
  };
  // string predefined_acl = 10;
  void clear_predefined_acl();
  const std::string& predefined_acl() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_predefined_acl(ArgT0&& arg0, ArgT... args);
  std::string* mutable_predefined_acl();
  PROTOBUF_NODISCARD std::string* release_predefined_acl();
  void set_allocated_predefined_acl(std::string* predefined_acl);
  private:
  const std::string& _internal_predefined_acl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_predefined_acl(const std::string& value);
  std::string* _internal_mutable_predefined_acl();
  public:

  // .google.storage.v2.Object object = 1;
  bool has_object() const;
  private:
  bool _internal_has_object() const;
  public:
  void clear_object();
  const ::google::storage::v2::Object& object() const;
  PROTOBUF_NODISCARD ::google::storage::v2::Object* release_object();
  ::google::storage::v2::Object* mutable_object();
  void set_allocated_object(::google::storage::v2::Object* object);
  private:
  const ::google::storage::v2::Object& _internal_object() const;
  ::google::storage::v2::Object* _internal_mutable_object();
  public:
  void unsafe_arena_set_allocated_object(
      ::google::storage::v2::Object* object);
  ::google::storage::v2::Object* unsafe_arena_release_object();

  // .google.protobuf.FieldMask update_mask = 7;
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // .google.storage.v2.CommonObjectRequestParams common_object_request_params = 8;
  bool has_common_object_request_params() const;
  private:
  bool _internal_has_common_object_request_params() const;
  public:
  void clear_common_object_request_params();
  const ::google::storage::v2::CommonObjectRequestParams& common_object_request_params() const;
  PROTOBUF_NODISCARD ::google::storage::v2::CommonObjectRequestParams* release_common_object_request_params();
  ::google::storage::v2::CommonObjectRequestParams* mutable_common_object_request_params();
  void set_allocated_common_object_request_params(::google::storage::v2::CommonObjectRequestParams* common_object_request_params);
  private:
  const ::google::storage::v2::CommonObjectRequestParams& _internal_common_object_request_params() const;
  ::google::storage::v2::CommonObjectRequestParams* _internal_mutable_common_object_request_params();
  public:
  void unsafe_arena_set_allocated_common_object_request_params(
      ::google::storage::v2::CommonObjectRequestParams* common_object_request_params);
  ::google::storage::v2::CommonObjectRequestParams* unsafe_arena_release_common_object_request_params();

  // optional int64 if_generation_match = 2;
  bool has_if_generation_match() const;
  private:
  bool _internal_has_if_generation_match() const;
  public:
  void clear_if_generation_match();
  int64_t if_generation_match() const;
  void set_if_generation_match(int64_t value);
  private:
  int64_t _internal_if_generation_match() const;
  void _internal_set_if_generation_match(int64_t value);
  public:

  // optional int64 if_generation_not_match = 3;
  bool has_if_generation_not_match() const;
  private:
  bool _internal_has_if_generation_not_match() const;
  public:
  void clear_if_generation_not_match();
  int64_t if_generation_not_match() const;
  void set_if_generation_not_match(int64_t value);
  private:
  int64_t _internal_if_generation_not_match() const;
  void _internal_set_if_generation_not_match(int64_t value);
  public:

  // optional int64 if_metageneration_match = 4;
  bool has_if_metageneration_match() const;
  private:
  bool _internal_has_if_metageneration_match() const;
  public:
  void clear_if_metageneration_match();
  int64_t if_metageneration_match() const;
  void set_if_metageneration_match(int64_t value);
  private:
  int64_t _internal_if_metageneration_match() const;
  void _internal_set_if_metageneration_match(int64_t value);
  public:

  // optional int64 if_metageneration_not_match = 5;
  bool has_if_metageneration_not_match() const;
  private:
  bool _internal_has_if_metageneration_not_match() const;
  public:
  void clear_if_metageneration_not_match();
  int64_t if_metageneration_not_match() const;
  void set_if_metageneration_not_match(int64_t value);
  private:
  int64_t _internal_if_metageneration_not_match() const;
  void _internal_set_if_metageneration_not_match(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.storage.v2.UpdateObjectRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr predefined_acl_;
    ::google::storage::v2::Object* object_;
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
    ::google::storage::v2::CommonObjectRequestParams* common_object_request_params_;
    int64_t if_generation_match_;
    int64_t if_generation_not_match_;
    int64_t if_metageneration_match_;
    int64_t if_metageneration_not_match_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class GetServiceAccountRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.GetServiceAccountRequest) */ {
 public:
  inline GetServiceAccountRequest() : GetServiceAccountRequest(nullptr) {}
  ~GetServiceAccountRequest() override;
  explicit PROTOBUF_CONSTEXPR GetServiceAccountRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetServiceAccountRequest(const GetServiceAccountRequest& from);
  GetServiceAccountRequest(GetServiceAccountRequest&& from) noexcept
    : GetServiceAccountRequest() {
    *this = ::std::move(from);
  }

  inline GetServiceAccountRequest& operator=(const GetServiceAccountRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServiceAccountRequest& operator=(GetServiceAccountRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetServiceAccountRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetServiceAccountRequest* internal_default_instance() {
    return reinterpret_cast<const GetServiceAccountRequest*>(
               &_GetServiceAccountRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(GetServiceAccountRequest& a, GetServiceAccountRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServiceAccountRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetServiceAccountRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetServiceAccountRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetServiceAccountRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetServiceAccountRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetServiceAccountRequest& from) {
    GetServiceAccountRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServiceAccountRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.GetServiceAccountRequest";
  }
  protected:
  explicit GetServiceAccountRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjectFieldNumber = 1,
  };
  // string project = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_project();
  const std::string& project() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_project(ArgT0&& arg0, ArgT... args);
  std::string* mutable_project();
  PROTOBUF_NODISCARD std::string* release_project();
  void set_allocated_project(std::string* project);
  private:
  const std::string& _internal_project() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_project(const std::string& value);
  std::string* _internal_mutable_project();
  public:

  // @@protoc_insertion_point(class_scope:google.storage.v2.GetServiceAccountRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr project_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class CreateHmacKeyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.CreateHmacKeyRequest) */ {
 public:
  inline CreateHmacKeyRequest() : CreateHmacKeyRequest(nullptr) {}
  ~CreateHmacKeyRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateHmacKeyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateHmacKeyRequest(const CreateHmacKeyRequest& from);
  CreateHmacKeyRequest(CreateHmacKeyRequest&& from) noexcept
    : CreateHmacKeyRequest() {
    *this = ::std::move(from);
  }

  inline CreateHmacKeyRequest& operator=(const CreateHmacKeyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateHmacKeyRequest& operator=(CreateHmacKeyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateHmacKeyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateHmacKeyRequest* internal_default_instance() {
    return reinterpret_cast<const CreateHmacKeyRequest*>(
               &_CreateHmacKeyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(CreateHmacKeyRequest& a, CreateHmacKeyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateHmacKeyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateHmacKeyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateHmacKeyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateHmacKeyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateHmacKeyRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateHmacKeyRequest& from) {
    CreateHmacKeyRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateHmacKeyRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.CreateHmacKeyRequest";
  }
  protected:
  explicit CreateHmacKeyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjectFieldNumber = 1,
    kServiceAccountEmailFieldNumber = 2,
  };
  // string project = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_project();
  const std::string& project() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_project(ArgT0&& arg0, ArgT... args);
  std::string* mutable_project();
  PROTOBUF_NODISCARD std::string* release_project();
  void set_allocated_project(std::string* project);
  private:
  const std::string& _internal_project() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_project(const std::string& value);
  std::string* _internal_mutable_project();
  public:

  // string service_account_email = 2 [(.google.api.field_behavior) = REQUIRED];
  void clear_service_account_email();
  const std::string& service_account_email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_service_account_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_service_account_email();
  PROTOBUF_NODISCARD std::string* release_service_account_email();
  void set_allocated_service_account_email(std::string* service_account_email);
  private:
  const std::string& _internal_service_account_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service_account_email(const std::string& value);
  std::string* _internal_mutable_service_account_email();
  public:

  // @@protoc_insertion_point(class_scope:google.storage.v2.CreateHmacKeyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr project_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_account_email_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class CreateHmacKeyResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.CreateHmacKeyResponse) */ {
 public:
  inline CreateHmacKeyResponse() : CreateHmacKeyResponse(nullptr) {}
  ~CreateHmacKeyResponse() override;
  explicit PROTOBUF_CONSTEXPR CreateHmacKeyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateHmacKeyResponse(const CreateHmacKeyResponse& from);
  CreateHmacKeyResponse(CreateHmacKeyResponse&& from) noexcept
    : CreateHmacKeyResponse() {
    *this = ::std::move(from);
  }

  inline CreateHmacKeyResponse& operator=(const CreateHmacKeyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateHmacKeyResponse& operator=(CreateHmacKeyResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateHmacKeyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateHmacKeyResponse* internal_default_instance() {
    return reinterpret_cast<const CreateHmacKeyResponse*>(
               &_CreateHmacKeyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(CreateHmacKeyResponse& a, CreateHmacKeyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateHmacKeyResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateHmacKeyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateHmacKeyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateHmacKeyResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateHmacKeyResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateHmacKeyResponse& from) {
    CreateHmacKeyResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateHmacKeyResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.CreateHmacKeyResponse";
  }
  protected:
  explicit CreateHmacKeyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecretKeyBytesFieldNumber = 3,
    kMetadataFieldNumber = 1,
  };
  // bytes secret_key_bytes = 3;
  void clear_secret_key_bytes();
  const std::string& secret_key_bytes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_secret_key_bytes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_secret_key_bytes();
  PROTOBUF_NODISCARD std::string* release_secret_key_bytes();
  void set_allocated_secret_key_bytes(std::string* secret_key_bytes);
  private:
  const std::string& _internal_secret_key_bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secret_key_bytes(const std::string& value);
  std::string* _internal_mutable_secret_key_bytes();
  public:

  // .google.storage.v2.HmacKeyMetadata metadata = 1;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::google::storage::v2::HmacKeyMetadata& metadata() const;
  PROTOBUF_NODISCARD ::google::storage::v2::HmacKeyMetadata* release_metadata();
  ::google::storage::v2::HmacKeyMetadata* mutable_metadata();
  void set_allocated_metadata(::google::storage::v2::HmacKeyMetadata* metadata);
  private:
  const ::google::storage::v2::HmacKeyMetadata& _internal_metadata() const;
  ::google::storage::v2::HmacKeyMetadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::google::storage::v2::HmacKeyMetadata* metadata);
  ::google::storage::v2::HmacKeyMetadata* unsafe_arena_release_metadata();

  // @@protoc_insertion_point(class_scope:google.storage.v2.CreateHmacKeyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secret_key_bytes_;
    ::google::storage::v2::HmacKeyMetadata* metadata_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class DeleteHmacKeyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.DeleteHmacKeyRequest) */ {
 public:
  inline DeleteHmacKeyRequest() : DeleteHmacKeyRequest(nullptr) {}
  ~DeleteHmacKeyRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteHmacKeyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteHmacKeyRequest(const DeleteHmacKeyRequest& from);
  DeleteHmacKeyRequest(DeleteHmacKeyRequest&& from) noexcept
    : DeleteHmacKeyRequest() {
    *this = ::std::move(from);
  }

  inline DeleteHmacKeyRequest& operator=(const DeleteHmacKeyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteHmacKeyRequest& operator=(DeleteHmacKeyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteHmacKeyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteHmacKeyRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteHmacKeyRequest*>(
               &_DeleteHmacKeyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(DeleteHmacKeyRequest& a, DeleteHmacKeyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteHmacKeyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteHmacKeyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteHmacKeyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteHmacKeyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteHmacKeyRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteHmacKeyRequest& from) {
    DeleteHmacKeyRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteHmacKeyRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.DeleteHmacKeyRequest";
  }
  protected:
  explicit DeleteHmacKeyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccessIdFieldNumber = 1,
    kProjectFieldNumber = 2,
  };
  // string access_id = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_access_id();
  const std::string& access_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_access_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_access_id();
  PROTOBUF_NODISCARD std::string* release_access_id();
  void set_allocated_access_id(std::string* access_id);
  private:
  const std::string& _internal_access_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_access_id(const std::string& value);
  std::string* _internal_mutable_access_id();
  public:

  // string project = 2 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_project();
  const std::string& project() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_project(ArgT0&& arg0, ArgT... args);
  std::string* mutable_project();
  PROTOBUF_NODISCARD std::string* release_project();
  void set_allocated_project(std::string* project);
  private:
  const std::string& _internal_project() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_project(const std::string& value);
  std::string* _internal_mutable_project();
  public:

  // @@protoc_insertion_point(class_scope:google.storage.v2.DeleteHmacKeyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr access_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr project_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class GetHmacKeyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.GetHmacKeyRequest) */ {
 public:
  inline GetHmacKeyRequest() : GetHmacKeyRequest(nullptr) {}
  ~GetHmacKeyRequest() override;
  explicit PROTOBUF_CONSTEXPR GetHmacKeyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetHmacKeyRequest(const GetHmacKeyRequest& from);
  GetHmacKeyRequest(GetHmacKeyRequest&& from) noexcept
    : GetHmacKeyRequest() {
    *this = ::std::move(from);
  }

  inline GetHmacKeyRequest& operator=(const GetHmacKeyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetHmacKeyRequest& operator=(GetHmacKeyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetHmacKeyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetHmacKeyRequest* internal_default_instance() {
    return reinterpret_cast<const GetHmacKeyRequest*>(
               &_GetHmacKeyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(GetHmacKeyRequest& a, GetHmacKeyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetHmacKeyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetHmacKeyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetHmacKeyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetHmacKeyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetHmacKeyRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetHmacKeyRequest& from) {
    GetHmacKeyRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetHmacKeyRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.GetHmacKeyRequest";
  }
  protected:
  explicit GetHmacKeyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccessIdFieldNumber = 1,
    kProjectFieldNumber = 2,
  };
  // string access_id = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_access_id();
  const std::string& access_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_access_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_access_id();
  PROTOBUF_NODISCARD std::string* release_access_id();
  void set_allocated_access_id(std::string* access_id);
  private:
  const std::string& _internal_access_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_access_id(const std::string& value);
  std::string* _internal_mutable_access_id();
  public:

  // string project = 2 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_project();
  const std::string& project() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_project(ArgT0&& arg0, ArgT... args);
  std::string* mutable_project();
  PROTOBUF_NODISCARD std::string* release_project();
  void set_allocated_project(std::string* project);
  private:
  const std::string& _internal_project() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_project(const std::string& value);
  std::string* _internal_mutable_project();
  public:

  // @@protoc_insertion_point(class_scope:google.storage.v2.GetHmacKeyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr access_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr project_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class ListHmacKeysRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.ListHmacKeysRequest) */ {
 public:
  inline ListHmacKeysRequest() : ListHmacKeysRequest(nullptr) {}
  ~ListHmacKeysRequest() override;
  explicit PROTOBUF_CONSTEXPR ListHmacKeysRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListHmacKeysRequest(const ListHmacKeysRequest& from);
  ListHmacKeysRequest(ListHmacKeysRequest&& from) noexcept
    : ListHmacKeysRequest() {
    *this = ::std::move(from);
  }

  inline ListHmacKeysRequest& operator=(const ListHmacKeysRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListHmacKeysRequest& operator=(ListHmacKeysRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListHmacKeysRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListHmacKeysRequest* internal_default_instance() {
    return reinterpret_cast<const ListHmacKeysRequest*>(
               &_ListHmacKeysRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(ListHmacKeysRequest& a, ListHmacKeysRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListHmacKeysRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListHmacKeysRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListHmacKeysRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListHmacKeysRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListHmacKeysRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListHmacKeysRequest& from) {
    ListHmacKeysRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListHmacKeysRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.ListHmacKeysRequest";
  }
  protected:
  explicit ListHmacKeysRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjectFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kServiceAccountEmailFieldNumber = 4,
    kPageSizeFieldNumber = 2,
    kShowDeletedKeysFieldNumber = 5,
  };
  // string project = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_project();
  const std::string& project() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_project(ArgT0&& arg0, ArgT... args);
  std::string* mutable_project();
  PROTOBUF_NODISCARD std::string* release_project();
  void set_allocated_project(std::string* project);
  private:
  const std::string& _internal_project() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_project(const std::string& value);
  std::string* _internal_mutable_project();
  public:

  // string page_token = 3 [(.google.api.field_behavior) = OPTIONAL];
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // string service_account_email = 4 [(.google.api.field_behavior) = OPTIONAL];
  void clear_service_account_email();
  const std::string& service_account_email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_service_account_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_service_account_email();
  PROTOBUF_NODISCARD std::string* release_service_account_email();
  void set_allocated_service_account_email(std::string* service_account_email);
  private:
  const std::string& _internal_service_account_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service_account_email(const std::string& value);
  std::string* _internal_mutable_service_account_email();
  public:

  // int32 page_size = 2 [(.google.api.field_behavior) = OPTIONAL];
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // bool show_deleted_keys = 5 [(.google.api.field_behavior) = OPTIONAL];
  void clear_show_deleted_keys();
  bool show_deleted_keys() const;
  void set_show_deleted_keys(bool value);
  private:
  bool _internal_show_deleted_keys() const;
  void _internal_set_show_deleted_keys(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.storage.v2.ListHmacKeysRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr project_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_account_email_;
    int32_t page_size_;
    bool show_deleted_keys_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class ListHmacKeysResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.ListHmacKeysResponse) */ {
 public:
  inline ListHmacKeysResponse() : ListHmacKeysResponse(nullptr) {}
  ~ListHmacKeysResponse() override;
  explicit PROTOBUF_CONSTEXPR ListHmacKeysResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListHmacKeysResponse(const ListHmacKeysResponse& from);
  ListHmacKeysResponse(ListHmacKeysResponse&& from) noexcept
    : ListHmacKeysResponse() {
    *this = ::std::move(from);
  }

  inline ListHmacKeysResponse& operator=(const ListHmacKeysResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListHmacKeysResponse& operator=(ListHmacKeysResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListHmacKeysResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListHmacKeysResponse* internal_default_instance() {
    return reinterpret_cast<const ListHmacKeysResponse*>(
               &_ListHmacKeysResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(ListHmacKeysResponse& a, ListHmacKeysResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListHmacKeysResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListHmacKeysResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListHmacKeysResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListHmacKeysResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListHmacKeysResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListHmacKeysResponse& from) {
    ListHmacKeysResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListHmacKeysResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.ListHmacKeysResponse";
  }
  protected:
  explicit ListHmacKeysResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHmacKeysFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .google.storage.v2.HmacKeyMetadata hmac_keys = 1;
  int hmac_keys_size() const;
  private:
  int _internal_hmac_keys_size() const;
  public:
  void clear_hmac_keys();
  ::google::storage::v2::HmacKeyMetadata* mutable_hmac_keys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::storage::v2::HmacKeyMetadata >*
      mutable_hmac_keys();
  private:
  const ::google::storage::v2::HmacKeyMetadata& _internal_hmac_keys(int index) const;
  ::google::storage::v2::HmacKeyMetadata* _internal_add_hmac_keys();
  public:
  const ::google::storage::v2::HmacKeyMetadata& hmac_keys(int index) const;
  ::google::storage::v2::HmacKeyMetadata* add_hmac_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::storage::v2::HmacKeyMetadata >&
      hmac_keys() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:google.storage.v2.ListHmacKeysResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::storage::v2::HmacKeyMetadata > hmac_keys_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class UpdateHmacKeyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.UpdateHmacKeyRequest) */ {
 public:
  inline UpdateHmacKeyRequest() : UpdateHmacKeyRequest(nullptr) {}
  ~UpdateHmacKeyRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateHmacKeyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateHmacKeyRequest(const UpdateHmacKeyRequest& from);
  UpdateHmacKeyRequest(UpdateHmacKeyRequest&& from) noexcept
    : UpdateHmacKeyRequest() {
    *this = ::std::move(from);
  }

  inline UpdateHmacKeyRequest& operator=(const UpdateHmacKeyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateHmacKeyRequest& operator=(UpdateHmacKeyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateHmacKeyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateHmacKeyRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateHmacKeyRequest*>(
               &_UpdateHmacKeyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(UpdateHmacKeyRequest& a, UpdateHmacKeyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateHmacKeyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateHmacKeyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateHmacKeyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateHmacKeyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateHmacKeyRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateHmacKeyRequest& from) {
    UpdateHmacKeyRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateHmacKeyRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.UpdateHmacKeyRequest";
  }
  protected:
  explicit UpdateHmacKeyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHmacKeyFieldNumber = 1,
    kUpdateMaskFieldNumber = 3,
  };
  // .google.storage.v2.HmacKeyMetadata hmac_key = 1 [(.google.api.field_behavior) = REQUIRED];
  bool has_hmac_key() const;
  private:
  bool _internal_has_hmac_key() const;
  public:
  void clear_hmac_key();
  const ::google::storage::v2::HmacKeyMetadata& hmac_key() const;
  PROTOBUF_NODISCARD ::google::storage::v2::HmacKeyMetadata* release_hmac_key();
  ::google::storage::v2::HmacKeyMetadata* mutable_hmac_key();
  void set_allocated_hmac_key(::google::storage::v2::HmacKeyMetadata* hmac_key);
  private:
  const ::google::storage::v2::HmacKeyMetadata& _internal_hmac_key() const;
  ::google::storage::v2::HmacKeyMetadata* _internal_mutable_hmac_key();
  public:
  void unsafe_arena_set_allocated_hmac_key(
      ::google::storage::v2::HmacKeyMetadata* hmac_key);
  ::google::storage::v2::HmacKeyMetadata* unsafe_arena_release_hmac_key();

  // .google.protobuf.FieldMask update_mask = 3;
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // @@protoc_insertion_point(class_scope:google.storage.v2.UpdateHmacKeyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::storage::v2::HmacKeyMetadata* hmac_key_;
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class CommonObjectRequestParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.CommonObjectRequestParams) */ {
 public:
  inline CommonObjectRequestParams() : CommonObjectRequestParams(nullptr) {}
  ~CommonObjectRequestParams() override;
  explicit PROTOBUF_CONSTEXPR CommonObjectRequestParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommonObjectRequestParams(const CommonObjectRequestParams& from);
  CommonObjectRequestParams(CommonObjectRequestParams&& from) noexcept
    : CommonObjectRequestParams() {
    *this = ::std::move(from);
  }

  inline CommonObjectRequestParams& operator=(const CommonObjectRequestParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommonObjectRequestParams& operator=(CommonObjectRequestParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommonObjectRequestParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommonObjectRequestParams* internal_default_instance() {
    return reinterpret_cast<const CommonObjectRequestParams*>(
               &_CommonObjectRequestParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(CommonObjectRequestParams& a, CommonObjectRequestParams& b) {
    a.Swap(&b);
  }
  inline void Swap(CommonObjectRequestParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommonObjectRequestParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommonObjectRequestParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommonObjectRequestParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommonObjectRequestParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommonObjectRequestParams& from) {
    CommonObjectRequestParams::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonObjectRequestParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.CommonObjectRequestParams";
  }
  protected:
  explicit CommonObjectRequestParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncryptionAlgorithmFieldNumber = 1,
    kEncryptionKeyBytesFieldNumber = 4,
    kEncryptionKeySha256BytesFieldNumber = 5,
  };
  // string encryption_algorithm = 1;
  void clear_encryption_algorithm();
  const std::string& encryption_algorithm() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_encryption_algorithm(ArgT0&& arg0, ArgT... args);
  std::string* mutable_encryption_algorithm();
  PROTOBUF_NODISCARD std::string* release_encryption_algorithm();
  void set_allocated_encryption_algorithm(std::string* encryption_algorithm);
  private:
  const std::string& _internal_encryption_algorithm() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encryption_algorithm(const std::string& value);
  std::string* _internal_mutable_encryption_algorithm();
  public:

  // bytes encryption_key_bytes = 4;
  void clear_encryption_key_bytes();
  const std::string& encryption_key_bytes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_encryption_key_bytes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_encryption_key_bytes();
  PROTOBUF_NODISCARD std::string* release_encryption_key_bytes();
  void set_allocated_encryption_key_bytes(std::string* encryption_key_bytes);
  private:
  const std::string& _internal_encryption_key_bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encryption_key_bytes(const std::string& value);
  std::string* _internal_mutable_encryption_key_bytes();
  public:

  // bytes encryption_key_sha256_bytes = 5;
  void clear_encryption_key_sha256_bytes();
  const std::string& encryption_key_sha256_bytes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_encryption_key_sha256_bytes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_encryption_key_sha256_bytes();
  PROTOBUF_NODISCARD std::string* release_encryption_key_sha256_bytes();
  void set_allocated_encryption_key_sha256_bytes(std::string* encryption_key_sha256_bytes);
  private:
  const std::string& _internal_encryption_key_sha256_bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encryption_key_sha256_bytes(const std::string& value);
  std::string* _internal_mutable_encryption_key_sha256_bytes();
  public:

  // @@protoc_insertion_point(class_scope:google.storage.v2.CommonObjectRequestParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encryption_algorithm_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encryption_key_bytes_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encryption_key_sha256_bytes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class ServiceConstants final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:google.storage.v2.ServiceConstants) */ {
 public:
  inline ServiceConstants() : ServiceConstants(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ServiceConstants(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServiceConstants(const ServiceConstants& from);
  ServiceConstants(ServiceConstants&& from) noexcept
    : ServiceConstants() {
    *this = ::std::move(from);
  }

  inline ServiceConstants& operator=(const ServiceConstants& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceConstants& operator=(ServiceConstants&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServiceConstants& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServiceConstants* internal_default_instance() {
    return reinterpret_cast<const ServiceConstants*>(
               &_ServiceConstants_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(ServiceConstants& a, ServiceConstants& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceConstants* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServiceConstants* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServiceConstants* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServiceConstants>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ServiceConstants& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ServiceConstants& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.ServiceConstants";
  }
  protected:
  explicit ServiceConstants(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ServiceConstants_Values Values;
  static constexpr Values VALUES_UNSPECIFIED =
    ServiceConstants_Values_VALUES_UNSPECIFIED;
  static constexpr Values MAX_READ_CHUNK_BYTES =
    ServiceConstants_Values_MAX_READ_CHUNK_BYTES;
  static constexpr Values MAX_WRITE_CHUNK_BYTES =
    ServiceConstants_Values_MAX_WRITE_CHUNK_BYTES;
  static constexpr Values MAX_OBJECT_SIZE_MB =
    ServiceConstants_Values_MAX_OBJECT_SIZE_MB;
  static constexpr Values MAX_CUSTOM_METADATA_FIELD_NAME_BYTES =
    ServiceConstants_Values_MAX_CUSTOM_METADATA_FIELD_NAME_BYTES;
  static constexpr Values MAX_CUSTOM_METADATA_FIELD_VALUE_BYTES =
    ServiceConstants_Values_MAX_CUSTOM_METADATA_FIELD_VALUE_BYTES;
  static constexpr Values MAX_CUSTOM_METADATA_TOTAL_SIZE_BYTES =
    ServiceConstants_Values_MAX_CUSTOM_METADATA_TOTAL_SIZE_BYTES;
  static constexpr Values MAX_BUCKET_METADATA_TOTAL_SIZE_BYTES =
    ServiceConstants_Values_MAX_BUCKET_METADATA_TOTAL_SIZE_BYTES;
  static constexpr Values MAX_NOTIFICATION_CONFIGS_PER_BUCKET =
    ServiceConstants_Values_MAX_NOTIFICATION_CONFIGS_PER_BUCKET;
  static constexpr Values MAX_LIFECYCLE_RULES_PER_BUCKET =
    ServiceConstants_Values_MAX_LIFECYCLE_RULES_PER_BUCKET;
  static constexpr Values MAX_NOTIFICATION_CUSTOM_ATTRIBUTES =
    ServiceConstants_Values_MAX_NOTIFICATION_CUSTOM_ATTRIBUTES;
  static constexpr Values MAX_NOTIFICATION_CUSTOM_ATTRIBUTE_KEY_LENGTH =
    ServiceConstants_Values_MAX_NOTIFICATION_CUSTOM_ATTRIBUTE_KEY_LENGTH;
  static constexpr Values MAX_NOTIFICATION_CUSTOM_ATTRIBUTE_VALUE_LENGTH =
    ServiceConstants_Values_MAX_NOTIFICATION_CUSTOM_ATTRIBUTE_VALUE_LENGTH;
  static constexpr Values MAX_LABELS_ENTRIES_COUNT =
    ServiceConstants_Values_MAX_LABELS_ENTRIES_COUNT;
  static constexpr Values MAX_LABELS_KEY_VALUE_LENGTH =
    ServiceConstants_Values_MAX_LABELS_KEY_VALUE_LENGTH;
  static constexpr Values MAX_LABELS_KEY_VALUE_BYTES =
    ServiceConstants_Values_MAX_LABELS_KEY_VALUE_BYTES;
  static constexpr Values MAX_OBJECT_IDS_PER_DELETE_OBJECTS_REQUEST =
    ServiceConstants_Values_MAX_OBJECT_IDS_PER_DELETE_OBJECTS_REQUEST;
  static constexpr Values SPLIT_TOKEN_MAX_VALID_DAYS =
    ServiceConstants_Values_SPLIT_TOKEN_MAX_VALID_DAYS;
  static inline bool Values_IsValid(int value) {
    return ServiceConstants_Values_IsValid(value);
  }
  static constexpr Values Values_MIN =
    ServiceConstants_Values_Values_MIN;
  static constexpr Values Values_MAX =
    ServiceConstants_Values_Values_MAX;
  static constexpr int Values_ARRAYSIZE =
    ServiceConstants_Values_Values_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Values_descriptor() {
    return ServiceConstants_Values_descriptor();
  }
  template<typename T>
  static inline const std::string& Values_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Values>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Values_Name.");
    return ServiceConstants_Values_Name(enum_t_value);
  }
  static inline bool Values_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Values* value) {
    return ServiceConstants_Values_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:google.storage.v2.ServiceConstants)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class Bucket_Billing final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.Bucket.Billing) */ {
 public:
  inline Bucket_Billing() : Bucket_Billing(nullptr) {}
  ~Bucket_Billing() override;
  explicit PROTOBUF_CONSTEXPR Bucket_Billing(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Bucket_Billing(const Bucket_Billing& from);
  Bucket_Billing(Bucket_Billing&& from) noexcept
    : Bucket_Billing() {
    *this = ::std::move(from);
  }

  inline Bucket_Billing& operator=(const Bucket_Billing& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bucket_Billing& operator=(Bucket_Billing&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Bucket_Billing& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bucket_Billing* internal_default_instance() {
    return reinterpret_cast<const Bucket_Billing*>(
               &_Bucket_Billing_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(Bucket_Billing& a, Bucket_Billing& b) {
    a.Swap(&b);
  }
  inline void Swap(Bucket_Billing* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bucket_Billing* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Bucket_Billing* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Bucket_Billing>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Bucket_Billing& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Bucket_Billing& from) {
    Bucket_Billing::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bucket_Billing* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.Bucket.Billing";
  }
  protected:
  explicit Bucket_Billing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequesterPaysFieldNumber = 1,
  };
  // bool requester_pays = 1;
  void clear_requester_pays();
  bool requester_pays() const;
  void set_requester_pays(bool value);
  private:
  bool _internal_requester_pays() const;
  void _internal_set_requester_pays(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.storage.v2.Bucket.Billing)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool requester_pays_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class Bucket_Cors final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.Bucket.Cors) */ {
 public:
  inline Bucket_Cors() : Bucket_Cors(nullptr) {}
  ~Bucket_Cors() override;
  explicit PROTOBUF_CONSTEXPR Bucket_Cors(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Bucket_Cors(const Bucket_Cors& from);
  Bucket_Cors(Bucket_Cors&& from) noexcept
    : Bucket_Cors() {
    *this = ::std::move(from);
  }

  inline Bucket_Cors& operator=(const Bucket_Cors& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bucket_Cors& operator=(Bucket_Cors&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Bucket_Cors& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bucket_Cors* internal_default_instance() {
    return reinterpret_cast<const Bucket_Cors*>(
               &_Bucket_Cors_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(Bucket_Cors& a, Bucket_Cors& b) {
    a.Swap(&b);
  }
  inline void Swap(Bucket_Cors* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bucket_Cors* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Bucket_Cors* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Bucket_Cors>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Bucket_Cors& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Bucket_Cors& from) {
    Bucket_Cors::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bucket_Cors* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.Bucket.Cors";
  }
  protected:
  explicit Bucket_Cors(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOriginFieldNumber = 1,
    kMethodFieldNumber = 2,
    kResponseHeaderFieldNumber = 3,
    kMaxAgeSecondsFieldNumber = 4,
  };
  // repeated string origin = 1;
  int origin_size() const;
  private:
  int _internal_origin_size() const;
  public:
  void clear_origin();
  const std::string& origin(int index) const;
  std::string* mutable_origin(int index);
  void set_origin(int index, const std::string& value);
  void set_origin(int index, std::string&& value);
  void set_origin(int index, const char* value);
  void set_origin(int index, const char* value, size_t size);
  std::string* add_origin();
  void add_origin(const std::string& value);
  void add_origin(std::string&& value);
  void add_origin(const char* value);
  void add_origin(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& origin() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_origin();
  private:
  const std::string& _internal_origin(int index) const;
  std::string* _internal_add_origin();
  public:

  // repeated string method = 2;
  int method_size() const;
  private:
  int _internal_method_size() const;
  public:
  void clear_method();
  const std::string& method(int index) const;
  std::string* mutable_method(int index);
  void set_method(int index, const std::string& value);
  void set_method(int index, std::string&& value);
  void set_method(int index, const char* value);
  void set_method(int index, const char* value, size_t size);
  std::string* add_method();
  void add_method(const std::string& value);
  void add_method(std::string&& value);
  void add_method(const char* value);
  void add_method(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& method() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_method();
  private:
  const std::string& _internal_method(int index) const;
  std::string* _internal_add_method();
  public:

  // repeated string response_header = 3;
  int response_header_size() const;
  private:
  int _internal_response_header_size() const;
  public:
  void clear_response_header();
  const std::string& response_header(int index) const;
  std::string* mutable_response_header(int index);
  void set_response_header(int index, const std::string& value);
  void set_response_header(int index, std::string&& value);
  void set_response_header(int index, const char* value);
  void set_response_header(int index, const char* value, size_t size);
  std::string* add_response_header();
  void add_response_header(const std::string& value);
  void add_response_header(std::string&& value);
  void add_response_header(const char* value);
  void add_response_header(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& response_header() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_response_header();
  private:
  const std::string& _internal_response_header(int index) const;
  std::string* _internal_add_response_header();
  public:

  // int32 max_age_seconds = 4;
  void clear_max_age_seconds();
  int32_t max_age_seconds() const;
  void set_max_age_seconds(int32_t value);
  private:
  int32_t _internal_max_age_seconds() const;
  void _internal_set_max_age_seconds(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.storage.v2.Bucket.Cors)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> origin_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> method_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> response_header_;
    int32_t max_age_seconds_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class Bucket_Encryption final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.Bucket.Encryption) */ {
 public:
  inline Bucket_Encryption() : Bucket_Encryption(nullptr) {}
  ~Bucket_Encryption() override;
  explicit PROTOBUF_CONSTEXPR Bucket_Encryption(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Bucket_Encryption(const Bucket_Encryption& from);
  Bucket_Encryption(Bucket_Encryption&& from) noexcept
    : Bucket_Encryption() {
    *this = ::std::move(from);
  }

  inline Bucket_Encryption& operator=(const Bucket_Encryption& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bucket_Encryption& operator=(Bucket_Encryption&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Bucket_Encryption& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bucket_Encryption* internal_default_instance() {
    return reinterpret_cast<const Bucket_Encryption*>(
               &_Bucket_Encryption_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(Bucket_Encryption& a, Bucket_Encryption& b) {
    a.Swap(&b);
  }
  inline void Swap(Bucket_Encryption* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bucket_Encryption* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Bucket_Encryption* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Bucket_Encryption>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Bucket_Encryption& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Bucket_Encryption& from) {
    Bucket_Encryption::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bucket_Encryption* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.Bucket.Encryption";
  }
  protected:
  explicit Bucket_Encryption(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDefaultKmsKeyFieldNumber = 1,
  };
  // string default_kms_key = 1 [(.google.api.resource_reference) = {
  void clear_default_kms_key();
  const std::string& default_kms_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_default_kms_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_default_kms_key();
  PROTOBUF_NODISCARD std::string* release_default_kms_key();
  void set_allocated_default_kms_key(std::string* default_kms_key);
  private:
  const std::string& _internal_default_kms_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_default_kms_key(const std::string& value);
  std::string* _internal_mutable_default_kms_key();
  public:

  // @@protoc_insertion_point(class_scope:google.storage.v2.Bucket.Encryption)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr default_kms_key_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class Bucket_IamConfig_UniformBucketLevelAccess final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.Bucket.IamConfig.UniformBucketLevelAccess) */ {
 public:
  inline Bucket_IamConfig_UniformBucketLevelAccess() : Bucket_IamConfig_UniformBucketLevelAccess(nullptr) {}
  ~Bucket_IamConfig_UniformBucketLevelAccess() override;
  explicit PROTOBUF_CONSTEXPR Bucket_IamConfig_UniformBucketLevelAccess(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Bucket_IamConfig_UniformBucketLevelAccess(const Bucket_IamConfig_UniformBucketLevelAccess& from);
  Bucket_IamConfig_UniformBucketLevelAccess(Bucket_IamConfig_UniformBucketLevelAccess&& from) noexcept
    : Bucket_IamConfig_UniformBucketLevelAccess() {
    *this = ::std::move(from);
  }

  inline Bucket_IamConfig_UniformBucketLevelAccess& operator=(const Bucket_IamConfig_UniformBucketLevelAccess& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bucket_IamConfig_UniformBucketLevelAccess& operator=(Bucket_IamConfig_UniformBucketLevelAccess&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Bucket_IamConfig_UniformBucketLevelAccess& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bucket_IamConfig_UniformBucketLevelAccess* internal_default_instance() {
    return reinterpret_cast<const Bucket_IamConfig_UniformBucketLevelAccess*>(
               &_Bucket_IamConfig_UniformBucketLevelAccess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(Bucket_IamConfig_UniformBucketLevelAccess& a, Bucket_IamConfig_UniformBucketLevelAccess& b) {
    a.Swap(&b);
  }
  inline void Swap(Bucket_IamConfig_UniformBucketLevelAccess* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bucket_IamConfig_UniformBucketLevelAccess* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Bucket_IamConfig_UniformBucketLevelAccess* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Bucket_IamConfig_UniformBucketLevelAccess>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Bucket_IamConfig_UniformBucketLevelAccess& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Bucket_IamConfig_UniformBucketLevelAccess& from) {
    Bucket_IamConfig_UniformBucketLevelAccess::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bucket_IamConfig_UniformBucketLevelAccess* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.Bucket.IamConfig.UniformBucketLevelAccess";
  }
  protected:
  explicit Bucket_IamConfig_UniformBucketLevelAccess(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLockTimeFieldNumber = 2,
    kEnabledFieldNumber = 1,
  };
  // .google.protobuf.Timestamp lock_time = 2;
  bool has_lock_time() const;
  private:
  bool _internal_has_lock_time() const;
  public:
  void clear_lock_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& lock_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_lock_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_lock_time();
  void set_allocated_lock_time(::PROTOBUF_NAMESPACE_ID::Timestamp* lock_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_lock_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_lock_time();
  public:
  void unsafe_arena_set_allocated_lock_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* lock_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_lock_time();

  // bool enabled = 1;
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.storage.v2.Bucket.IamConfig.UniformBucketLevelAccess)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::Timestamp* lock_time_;
    bool enabled_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class Bucket_IamConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.Bucket.IamConfig) */ {
 public:
  inline Bucket_IamConfig() : Bucket_IamConfig(nullptr) {}
  ~Bucket_IamConfig() override;
  explicit PROTOBUF_CONSTEXPR Bucket_IamConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Bucket_IamConfig(const Bucket_IamConfig& from);
  Bucket_IamConfig(Bucket_IamConfig&& from) noexcept
    : Bucket_IamConfig() {
    *this = ::std::move(from);
  }

  inline Bucket_IamConfig& operator=(const Bucket_IamConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bucket_IamConfig& operator=(Bucket_IamConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Bucket_IamConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bucket_IamConfig* internal_default_instance() {
    return reinterpret_cast<const Bucket_IamConfig*>(
               &_Bucket_IamConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(Bucket_IamConfig& a, Bucket_IamConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(Bucket_IamConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bucket_IamConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Bucket_IamConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Bucket_IamConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Bucket_IamConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Bucket_IamConfig& from) {
    Bucket_IamConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bucket_IamConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.Bucket.IamConfig";
  }
  protected:
  explicit Bucket_IamConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Bucket_IamConfig_UniformBucketLevelAccess UniformBucketLevelAccess;

  // accessors -------------------------------------------------------

  enum : int {
    kPublicAccessPreventionFieldNumber = 3,
    kUniformBucketLevelAccessFieldNumber = 1,
  };
  // string public_access_prevention = 3;
  void clear_public_access_prevention();
  const std::string& public_access_prevention() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_public_access_prevention(ArgT0&& arg0, ArgT... args);
  std::string* mutable_public_access_prevention();
  PROTOBUF_NODISCARD std::string* release_public_access_prevention();
  void set_allocated_public_access_prevention(std::string* public_access_prevention);
  private:
  const std::string& _internal_public_access_prevention() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_public_access_prevention(const std::string& value);
  std::string* _internal_mutable_public_access_prevention();
  public:

  // .google.storage.v2.Bucket.IamConfig.UniformBucketLevelAccess uniform_bucket_level_access = 1;
  bool has_uniform_bucket_level_access() const;
  private:
  bool _internal_has_uniform_bucket_level_access() const;
  public:
  void clear_uniform_bucket_level_access();
  const ::google::storage::v2::Bucket_IamConfig_UniformBucketLevelAccess& uniform_bucket_level_access() const;
  PROTOBUF_NODISCARD ::google::storage::v2::Bucket_IamConfig_UniformBucketLevelAccess* release_uniform_bucket_level_access();
  ::google::storage::v2::Bucket_IamConfig_UniformBucketLevelAccess* mutable_uniform_bucket_level_access();
  void set_allocated_uniform_bucket_level_access(::google::storage::v2::Bucket_IamConfig_UniformBucketLevelAccess* uniform_bucket_level_access);
  private:
  const ::google::storage::v2::Bucket_IamConfig_UniformBucketLevelAccess& _internal_uniform_bucket_level_access() const;
  ::google::storage::v2::Bucket_IamConfig_UniformBucketLevelAccess* _internal_mutable_uniform_bucket_level_access();
  public:
  void unsafe_arena_set_allocated_uniform_bucket_level_access(
      ::google::storage::v2::Bucket_IamConfig_UniformBucketLevelAccess* uniform_bucket_level_access);
  ::google::storage::v2::Bucket_IamConfig_UniformBucketLevelAccess* unsafe_arena_release_uniform_bucket_level_access();

  // @@protoc_insertion_point(class_scope:google.storage.v2.Bucket.IamConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_access_prevention_;
    ::google::storage::v2::Bucket_IamConfig_UniformBucketLevelAccess* uniform_bucket_level_access_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class Bucket_Lifecycle_Rule_Action final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.Bucket.Lifecycle.Rule.Action) */ {
 public:
  inline Bucket_Lifecycle_Rule_Action() : Bucket_Lifecycle_Rule_Action(nullptr) {}
  ~Bucket_Lifecycle_Rule_Action() override;
  explicit PROTOBUF_CONSTEXPR Bucket_Lifecycle_Rule_Action(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Bucket_Lifecycle_Rule_Action(const Bucket_Lifecycle_Rule_Action& from);
  Bucket_Lifecycle_Rule_Action(Bucket_Lifecycle_Rule_Action&& from) noexcept
    : Bucket_Lifecycle_Rule_Action() {
    *this = ::std::move(from);
  }

  inline Bucket_Lifecycle_Rule_Action& operator=(const Bucket_Lifecycle_Rule_Action& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bucket_Lifecycle_Rule_Action& operator=(Bucket_Lifecycle_Rule_Action&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Bucket_Lifecycle_Rule_Action& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bucket_Lifecycle_Rule_Action* internal_default_instance() {
    return reinterpret_cast<const Bucket_Lifecycle_Rule_Action*>(
               &_Bucket_Lifecycle_Rule_Action_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(Bucket_Lifecycle_Rule_Action& a, Bucket_Lifecycle_Rule_Action& b) {
    a.Swap(&b);
  }
  inline void Swap(Bucket_Lifecycle_Rule_Action* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bucket_Lifecycle_Rule_Action* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Bucket_Lifecycle_Rule_Action* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Bucket_Lifecycle_Rule_Action>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Bucket_Lifecycle_Rule_Action& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Bucket_Lifecycle_Rule_Action& from) {
    Bucket_Lifecycle_Rule_Action::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bucket_Lifecycle_Rule_Action* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.Bucket.Lifecycle.Rule.Action";
  }
  protected:
  explicit Bucket_Lifecycle_Rule_Action(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kStorageClassFieldNumber = 2,
  };
  // string type = 1;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string storage_class = 2;
  void clear_storage_class();
  const std::string& storage_class() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_storage_class(ArgT0&& arg0, ArgT... args);
  std::string* mutable_storage_class();
  PROTOBUF_NODISCARD std::string* release_storage_class();
  void set_allocated_storage_class(std::string* storage_class);
  private:
  const std::string& _internal_storage_class() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_storage_class(const std::string& value);
  std::string* _internal_mutable_storage_class();
  public:

  // @@protoc_insertion_point(class_scope:google.storage.v2.Bucket.Lifecycle.Rule.Action)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr storage_class_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class Bucket_Lifecycle_Rule_Condition final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.Bucket.Lifecycle.Rule.Condition) */ {
 public:
  inline Bucket_Lifecycle_Rule_Condition() : Bucket_Lifecycle_Rule_Condition(nullptr) {}
  ~Bucket_Lifecycle_Rule_Condition() override;
  explicit PROTOBUF_CONSTEXPR Bucket_Lifecycle_Rule_Condition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Bucket_Lifecycle_Rule_Condition(const Bucket_Lifecycle_Rule_Condition& from);
  Bucket_Lifecycle_Rule_Condition(Bucket_Lifecycle_Rule_Condition&& from) noexcept
    : Bucket_Lifecycle_Rule_Condition() {
    *this = ::std::move(from);
  }

  inline Bucket_Lifecycle_Rule_Condition& operator=(const Bucket_Lifecycle_Rule_Condition& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bucket_Lifecycle_Rule_Condition& operator=(Bucket_Lifecycle_Rule_Condition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Bucket_Lifecycle_Rule_Condition& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bucket_Lifecycle_Rule_Condition* internal_default_instance() {
    return reinterpret_cast<const Bucket_Lifecycle_Rule_Condition*>(
               &_Bucket_Lifecycle_Rule_Condition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(Bucket_Lifecycle_Rule_Condition& a, Bucket_Lifecycle_Rule_Condition& b) {
    a.Swap(&b);
  }
  inline void Swap(Bucket_Lifecycle_Rule_Condition* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bucket_Lifecycle_Rule_Condition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Bucket_Lifecycle_Rule_Condition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Bucket_Lifecycle_Rule_Condition>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Bucket_Lifecycle_Rule_Condition& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Bucket_Lifecycle_Rule_Condition& from) {
    Bucket_Lifecycle_Rule_Condition::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bucket_Lifecycle_Rule_Condition* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.Bucket.Lifecycle.Rule.Condition";
  }
  protected:
  explicit Bucket_Lifecycle_Rule_Condition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchesStorageClassFieldNumber = 5,
    kMatchesPrefixFieldNumber = 11,
    kMatchesSuffixFieldNumber = 12,
    kCreatedBeforeFieldNumber = 2,
    kCustomTimeBeforeFieldNumber = 8,
    kNoncurrentTimeBeforeFieldNumber = 10,
    kAgeDaysFieldNumber = 1,
    kIsLiveFieldNumber = 3,
    kNumNewerVersionsFieldNumber = 4,
    kDaysSinceCustomTimeFieldNumber = 7,
    kDaysSinceNoncurrentTimeFieldNumber = 9,
  };
  // repeated string matches_storage_class = 5;
  int matches_storage_class_size() const;
  private:
  int _internal_matches_storage_class_size() const;
  public:
  void clear_matches_storage_class();
  const std::string& matches_storage_class(int index) const;
  std::string* mutable_matches_storage_class(int index);
  void set_matches_storage_class(int index, const std::string& value);
  void set_matches_storage_class(int index, std::string&& value);
  void set_matches_storage_class(int index, const char* value);
  void set_matches_storage_class(int index, const char* value, size_t size);
  std::string* add_matches_storage_class();
  void add_matches_storage_class(const std::string& value);
  void add_matches_storage_class(std::string&& value);
  void add_matches_storage_class(const char* value);
  void add_matches_storage_class(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& matches_storage_class() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_matches_storage_class();
  private:
  const std::string& _internal_matches_storage_class(int index) const;
  std::string* _internal_add_matches_storage_class();
  public:

  // repeated string matches_prefix = 11;
  int matches_prefix_size() const;
  private:
  int _internal_matches_prefix_size() const;
  public:
  void clear_matches_prefix();
  const std::string& matches_prefix(int index) const;
  std::string* mutable_matches_prefix(int index);
  void set_matches_prefix(int index, const std::string& value);
  void set_matches_prefix(int index, std::string&& value);
  void set_matches_prefix(int index, const char* value);
  void set_matches_prefix(int index, const char* value, size_t size);
  std::string* add_matches_prefix();
  void add_matches_prefix(const std::string& value);
  void add_matches_prefix(std::string&& value);
  void add_matches_prefix(const char* value);
  void add_matches_prefix(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& matches_prefix() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_matches_prefix();
  private:
  const std::string& _internal_matches_prefix(int index) const;
  std::string* _internal_add_matches_prefix();
  public:

  // repeated string matches_suffix = 12;
  int matches_suffix_size() const;
  private:
  int _internal_matches_suffix_size() const;
  public:
  void clear_matches_suffix();
  const std::string& matches_suffix(int index) const;
  std::string* mutable_matches_suffix(int index);
  void set_matches_suffix(int index, const std::string& value);
  void set_matches_suffix(int index, std::string&& value);
  void set_matches_suffix(int index, const char* value);
  void set_matches_suffix(int index, const char* value, size_t size);
  std::string* add_matches_suffix();
  void add_matches_suffix(const std::string& value);
  void add_matches_suffix(std::string&& value);
  void add_matches_suffix(const char* value);
  void add_matches_suffix(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& matches_suffix() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_matches_suffix();
  private:
  const std::string& _internal_matches_suffix(int index) const;
  std::string* _internal_add_matches_suffix();
  public:

  // .google.type.Date created_before = 2;
  bool has_created_before() const;
  private:
  bool _internal_has_created_before() const;
  public:
  void clear_created_before();
  const ::google::type::Date& created_before() const;
  PROTOBUF_NODISCARD ::google::type::Date* release_created_before();
  ::google::type::Date* mutable_created_before();
  void set_allocated_created_before(::google::type::Date* created_before);
  private:
  const ::google::type::Date& _internal_created_before() const;
  ::google::type::Date* _internal_mutable_created_before();
  public:
  void unsafe_arena_set_allocated_created_before(
      ::google::type::Date* created_before);
  ::google::type::Date* unsafe_arena_release_created_before();

  // .google.type.Date custom_time_before = 8;
  bool has_custom_time_before() const;
  private:
  bool _internal_has_custom_time_before() const;
  public:
  void clear_custom_time_before();
  const ::google::type::Date& custom_time_before() const;
  PROTOBUF_NODISCARD ::google::type::Date* release_custom_time_before();
  ::google::type::Date* mutable_custom_time_before();
  void set_allocated_custom_time_before(::google::type::Date* custom_time_before);
  private:
  const ::google::type::Date& _internal_custom_time_before() const;
  ::google::type::Date* _internal_mutable_custom_time_before();
  public:
  void unsafe_arena_set_allocated_custom_time_before(
      ::google::type::Date* custom_time_before);
  ::google::type::Date* unsafe_arena_release_custom_time_before();

  // .google.type.Date noncurrent_time_before = 10;
  bool has_noncurrent_time_before() const;
  private:
  bool _internal_has_noncurrent_time_before() const;
  public:
  void clear_noncurrent_time_before();
  const ::google::type::Date& noncurrent_time_before() const;
  PROTOBUF_NODISCARD ::google::type::Date* release_noncurrent_time_before();
  ::google::type::Date* mutable_noncurrent_time_before();
  void set_allocated_noncurrent_time_before(::google::type::Date* noncurrent_time_before);
  private:
  const ::google::type::Date& _internal_noncurrent_time_before() const;
  ::google::type::Date* _internal_mutable_noncurrent_time_before();
  public:
  void unsafe_arena_set_allocated_noncurrent_time_before(
      ::google::type::Date* noncurrent_time_before);
  ::google::type::Date* unsafe_arena_release_noncurrent_time_before();

  // optional int32 age_days = 1;
  bool has_age_days() const;
  private:
  bool _internal_has_age_days() const;
  public:
  void clear_age_days();
  int32_t age_days() const;
  void set_age_days(int32_t value);
  private:
  int32_t _internal_age_days() const;
  void _internal_set_age_days(int32_t value);
  public:

  // optional bool is_live = 3;
  bool has_is_live() const;
  private:
  bool _internal_has_is_live() const;
  public:
  void clear_is_live();
  bool is_live() const;
  void set_is_live(bool value);
  private:
  bool _internal_is_live() const;
  void _internal_set_is_live(bool value);
  public:

  // optional int32 num_newer_versions = 4;
  bool has_num_newer_versions() const;
  private:
  bool _internal_has_num_newer_versions() const;
  public:
  void clear_num_newer_versions();
  int32_t num_newer_versions() const;
  void set_num_newer_versions(int32_t value);
  private:
  int32_t _internal_num_newer_versions() const;
  void _internal_set_num_newer_versions(int32_t value);
  public:

  // optional int32 days_since_custom_time = 7;
  bool has_days_since_custom_time() const;
  private:
  bool _internal_has_days_since_custom_time() const;
  public:
  void clear_days_since_custom_time();
  int32_t days_since_custom_time() const;
  void set_days_since_custom_time(int32_t value);
  private:
  int32_t _internal_days_since_custom_time() const;
  void _internal_set_days_since_custom_time(int32_t value);
  public:

  // optional int32 days_since_noncurrent_time = 9;
  bool has_days_since_noncurrent_time() const;
  private:
  bool _internal_has_days_since_noncurrent_time() const;
  public:
  void clear_days_since_noncurrent_time();
  int32_t days_since_noncurrent_time() const;
  void set_days_since_noncurrent_time(int32_t value);
  private:
  int32_t _internal_days_since_noncurrent_time() const;
  void _internal_set_days_since_noncurrent_time(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.storage.v2.Bucket.Lifecycle.Rule.Condition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> matches_storage_class_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> matches_prefix_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> matches_suffix_;
    ::google::type::Date* created_before_;
    ::google::type::Date* custom_time_before_;
    ::google::type::Date* noncurrent_time_before_;
    int32_t age_days_;
    bool is_live_;
    int32_t num_newer_versions_;
    int32_t days_since_custom_time_;
    int32_t days_since_noncurrent_time_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class Bucket_Lifecycle_Rule final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.Bucket.Lifecycle.Rule) */ {
 public:
  inline Bucket_Lifecycle_Rule() : Bucket_Lifecycle_Rule(nullptr) {}
  ~Bucket_Lifecycle_Rule() override;
  explicit PROTOBUF_CONSTEXPR Bucket_Lifecycle_Rule(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Bucket_Lifecycle_Rule(const Bucket_Lifecycle_Rule& from);
  Bucket_Lifecycle_Rule(Bucket_Lifecycle_Rule&& from) noexcept
    : Bucket_Lifecycle_Rule() {
    *this = ::std::move(from);
  }

  inline Bucket_Lifecycle_Rule& operator=(const Bucket_Lifecycle_Rule& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bucket_Lifecycle_Rule& operator=(Bucket_Lifecycle_Rule&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Bucket_Lifecycle_Rule& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bucket_Lifecycle_Rule* internal_default_instance() {
    return reinterpret_cast<const Bucket_Lifecycle_Rule*>(
               &_Bucket_Lifecycle_Rule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(Bucket_Lifecycle_Rule& a, Bucket_Lifecycle_Rule& b) {
    a.Swap(&b);
  }
  inline void Swap(Bucket_Lifecycle_Rule* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bucket_Lifecycle_Rule* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Bucket_Lifecycle_Rule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Bucket_Lifecycle_Rule>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Bucket_Lifecycle_Rule& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Bucket_Lifecycle_Rule& from) {
    Bucket_Lifecycle_Rule::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bucket_Lifecycle_Rule* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.Bucket.Lifecycle.Rule";
  }
  protected:
  explicit Bucket_Lifecycle_Rule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Bucket_Lifecycle_Rule_Action Action;
  typedef Bucket_Lifecycle_Rule_Condition Condition;

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kConditionFieldNumber = 2,
  };
  // .google.storage.v2.Bucket.Lifecycle.Rule.Action action = 1;
  bool has_action() const;
  private:
  bool _internal_has_action() const;
  public:
  void clear_action();
  const ::google::storage::v2::Bucket_Lifecycle_Rule_Action& action() const;
  PROTOBUF_NODISCARD ::google::storage::v2::Bucket_Lifecycle_Rule_Action* release_action();
  ::google::storage::v2::Bucket_Lifecycle_Rule_Action* mutable_action();
  void set_allocated_action(::google::storage::v2::Bucket_Lifecycle_Rule_Action* action);
  private:
  const ::google::storage::v2::Bucket_Lifecycle_Rule_Action& _internal_action() const;
  ::google::storage::v2::Bucket_Lifecycle_Rule_Action* _internal_mutable_action();
  public:
  void unsafe_arena_set_allocated_action(
      ::google::storage::v2::Bucket_Lifecycle_Rule_Action* action);
  ::google::storage::v2::Bucket_Lifecycle_Rule_Action* unsafe_arena_release_action();

  // .google.storage.v2.Bucket.Lifecycle.Rule.Condition condition = 2;
  bool has_condition() const;
  private:
  bool _internal_has_condition() const;
  public:
  void clear_condition();
  const ::google::storage::v2::Bucket_Lifecycle_Rule_Condition& condition() const;
  PROTOBUF_NODISCARD ::google::storage::v2::Bucket_Lifecycle_Rule_Condition* release_condition();
  ::google::storage::v2::Bucket_Lifecycle_Rule_Condition* mutable_condition();
  void set_allocated_condition(::google::storage::v2::Bucket_Lifecycle_Rule_Condition* condition);
  private:
  const ::google::storage::v2::Bucket_Lifecycle_Rule_Condition& _internal_condition() const;
  ::google::storage::v2::Bucket_Lifecycle_Rule_Condition* _internal_mutable_condition();
  public:
  void unsafe_arena_set_allocated_condition(
      ::google::storage::v2::Bucket_Lifecycle_Rule_Condition* condition);
  ::google::storage::v2::Bucket_Lifecycle_Rule_Condition* unsafe_arena_release_condition();

  // @@protoc_insertion_point(class_scope:google.storage.v2.Bucket.Lifecycle.Rule)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::storage::v2::Bucket_Lifecycle_Rule_Action* action_;
    ::google::storage::v2::Bucket_Lifecycle_Rule_Condition* condition_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class Bucket_Lifecycle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.Bucket.Lifecycle) */ {
 public:
  inline Bucket_Lifecycle() : Bucket_Lifecycle(nullptr) {}
  ~Bucket_Lifecycle() override;
  explicit PROTOBUF_CONSTEXPR Bucket_Lifecycle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Bucket_Lifecycle(const Bucket_Lifecycle& from);
  Bucket_Lifecycle(Bucket_Lifecycle&& from) noexcept
    : Bucket_Lifecycle() {
    *this = ::std::move(from);
  }

  inline Bucket_Lifecycle& operator=(const Bucket_Lifecycle& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bucket_Lifecycle& operator=(Bucket_Lifecycle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Bucket_Lifecycle& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bucket_Lifecycle* internal_default_instance() {
    return reinterpret_cast<const Bucket_Lifecycle*>(
               &_Bucket_Lifecycle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(Bucket_Lifecycle& a, Bucket_Lifecycle& b) {
    a.Swap(&b);
  }
  inline void Swap(Bucket_Lifecycle* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bucket_Lifecycle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Bucket_Lifecycle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Bucket_Lifecycle>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Bucket_Lifecycle& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Bucket_Lifecycle& from) {
    Bucket_Lifecycle::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bucket_Lifecycle* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.Bucket.Lifecycle";
  }
  protected:
  explicit Bucket_Lifecycle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Bucket_Lifecycle_Rule Rule;

  // accessors -------------------------------------------------------

  enum : int {
    kRuleFieldNumber = 1,
  };
  // repeated .google.storage.v2.Bucket.Lifecycle.Rule rule = 1;
  int rule_size() const;
  private:
  int _internal_rule_size() const;
  public:
  void clear_rule();
  ::google::storage::v2::Bucket_Lifecycle_Rule* mutable_rule(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::storage::v2::Bucket_Lifecycle_Rule >*
      mutable_rule();
  private:
  const ::google::storage::v2::Bucket_Lifecycle_Rule& _internal_rule(int index) const;
  ::google::storage::v2::Bucket_Lifecycle_Rule* _internal_add_rule();
  public:
  const ::google::storage::v2::Bucket_Lifecycle_Rule& rule(int index) const;
  ::google::storage::v2::Bucket_Lifecycle_Rule* add_rule();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::storage::v2::Bucket_Lifecycle_Rule >&
      rule() const;

  // @@protoc_insertion_point(class_scope:google.storage.v2.Bucket.Lifecycle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::storage::v2::Bucket_Lifecycle_Rule > rule_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class Bucket_Logging final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.Bucket.Logging) */ {
 public:
  inline Bucket_Logging() : Bucket_Logging(nullptr) {}
  ~Bucket_Logging() override;
  explicit PROTOBUF_CONSTEXPR Bucket_Logging(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Bucket_Logging(const Bucket_Logging& from);
  Bucket_Logging(Bucket_Logging&& from) noexcept
    : Bucket_Logging() {
    *this = ::std::move(from);
  }

  inline Bucket_Logging& operator=(const Bucket_Logging& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bucket_Logging& operator=(Bucket_Logging&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Bucket_Logging& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bucket_Logging* internal_default_instance() {
    return reinterpret_cast<const Bucket_Logging*>(
               &_Bucket_Logging_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(Bucket_Logging& a, Bucket_Logging& b) {
    a.Swap(&b);
  }
  inline void Swap(Bucket_Logging* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bucket_Logging* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Bucket_Logging* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Bucket_Logging>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Bucket_Logging& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Bucket_Logging& from) {
    Bucket_Logging::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bucket_Logging* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.Bucket.Logging";
  }
  protected:
  explicit Bucket_Logging(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogBucketFieldNumber = 1,
    kLogObjectPrefixFieldNumber = 2,
  };
  // string log_bucket = 1;
  void clear_log_bucket();
  const std::string& log_bucket() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_log_bucket(ArgT0&& arg0, ArgT... args);
  std::string* mutable_log_bucket();
  PROTOBUF_NODISCARD std::string* release_log_bucket();
  void set_allocated_log_bucket(std::string* log_bucket);
  private:
  const std::string& _internal_log_bucket() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_log_bucket(const std::string& value);
  std::string* _internal_mutable_log_bucket();
  public:

  // string log_object_prefix = 2;
  void clear_log_object_prefix();
  const std::string& log_object_prefix() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_log_object_prefix(ArgT0&& arg0, ArgT... args);
  std::string* mutable_log_object_prefix();
  PROTOBUF_NODISCARD std::string* release_log_object_prefix();
  void set_allocated_log_object_prefix(std::string* log_object_prefix);
  private:
  const std::string& _internal_log_object_prefix() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_log_object_prefix(const std::string& value);
  std::string* _internal_mutable_log_object_prefix();
  public:

  // @@protoc_insertion_point(class_scope:google.storage.v2.Bucket.Logging)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr log_bucket_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr log_object_prefix_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class Bucket_RetentionPolicy final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.Bucket.RetentionPolicy) */ {
 public:
  inline Bucket_RetentionPolicy() : Bucket_RetentionPolicy(nullptr) {}
  ~Bucket_RetentionPolicy() override;
  explicit PROTOBUF_CONSTEXPR Bucket_RetentionPolicy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Bucket_RetentionPolicy(const Bucket_RetentionPolicy& from);
  Bucket_RetentionPolicy(Bucket_RetentionPolicy&& from) noexcept
    : Bucket_RetentionPolicy() {
    *this = ::std::move(from);
  }

  inline Bucket_RetentionPolicy& operator=(const Bucket_RetentionPolicy& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bucket_RetentionPolicy& operator=(Bucket_RetentionPolicy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Bucket_RetentionPolicy& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bucket_RetentionPolicy* internal_default_instance() {
    return reinterpret_cast<const Bucket_RetentionPolicy*>(
               &_Bucket_RetentionPolicy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(Bucket_RetentionPolicy& a, Bucket_RetentionPolicy& b) {
    a.Swap(&b);
  }
  inline void Swap(Bucket_RetentionPolicy* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bucket_RetentionPolicy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Bucket_RetentionPolicy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Bucket_RetentionPolicy>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Bucket_RetentionPolicy& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Bucket_RetentionPolicy& from) {
    Bucket_RetentionPolicy::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bucket_RetentionPolicy* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.Bucket.RetentionPolicy";
  }
  protected:
  explicit Bucket_RetentionPolicy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEffectiveTimeFieldNumber = 1,
    kRetentionPeriodFieldNumber = 3,
    kIsLockedFieldNumber = 2,
  };
  // .google.protobuf.Timestamp effective_time = 1;
  bool has_effective_time() const;
  private:
  bool _internal_has_effective_time() const;
  public:
  void clear_effective_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& effective_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_effective_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_effective_time();
  void set_allocated_effective_time(::PROTOBUF_NAMESPACE_ID::Timestamp* effective_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_effective_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_effective_time();
  public:
  void unsafe_arena_set_allocated_effective_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* effective_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_effective_time();

  // int64 retention_period = 3;
  void clear_retention_period();
  int64_t retention_period() const;
  void set_retention_period(int64_t value);
  private:
  int64_t _internal_retention_period() const;
  void _internal_set_retention_period(int64_t value);
  public:

  // bool is_locked = 2;
  void clear_is_locked();
  bool is_locked() const;
  void set_is_locked(bool value);
  private:
  bool _internal_is_locked() const;
  void _internal_set_is_locked(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.storage.v2.Bucket.RetentionPolicy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::Timestamp* effective_time_;
    int64_t retention_period_;
    bool is_locked_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class Bucket_Versioning final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.Bucket.Versioning) */ {
 public:
  inline Bucket_Versioning() : Bucket_Versioning(nullptr) {}
  ~Bucket_Versioning() override;
  explicit PROTOBUF_CONSTEXPR Bucket_Versioning(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Bucket_Versioning(const Bucket_Versioning& from);
  Bucket_Versioning(Bucket_Versioning&& from) noexcept
    : Bucket_Versioning() {
    *this = ::std::move(from);
  }

  inline Bucket_Versioning& operator=(const Bucket_Versioning& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bucket_Versioning& operator=(Bucket_Versioning&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Bucket_Versioning& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bucket_Versioning* internal_default_instance() {
    return reinterpret_cast<const Bucket_Versioning*>(
               &_Bucket_Versioning_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(Bucket_Versioning& a, Bucket_Versioning& b) {
    a.Swap(&b);
  }
  inline void Swap(Bucket_Versioning* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bucket_Versioning* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Bucket_Versioning* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Bucket_Versioning>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Bucket_Versioning& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Bucket_Versioning& from) {
    Bucket_Versioning::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bucket_Versioning* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.Bucket.Versioning";
  }
  protected:
  explicit Bucket_Versioning(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnabledFieldNumber = 1,
  };
  // bool enabled = 1;
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.storage.v2.Bucket.Versioning)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool enabled_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class Bucket_Website final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.Bucket.Website) */ {
 public:
  inline Bucket_Website() : Bucket_Website(nullptr) {}
  ~Bucket_Website() override;
  explicit PROTOBUF_CONSTEXPR Bucket_Website(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Bucket_Website(const Bucket_Website& from);
  Bucket_Website(Bucket_Website&& from) noexcept
    : Bucket_Website() {
    *this = ::std::move(from);
  }

  inline Bucket_Website& operator=(const Bucket_Website& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bucket_Website& operator=(Bucket_Website&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Bucket_Website& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bucket_Website* internal_default_instance() {
    return reinterpret_cast<const Bucket_Website*>(
               &_Bucket_Website_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(Bucket_Website& a, Bucket_Website& b) {
    a.Swap(&b);
  }
  inline void Swap(Bucket_Website* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bucket_Website* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Bucket_Website* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Bucket_Website>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Bucket_Website& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Bucket_Website& from) {
    Bucket_Website::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bucket_Website* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.Bucket.Website";
  }
  protected:
  explicit Bucket_Website(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMainPageSuffixFieldNumber = 1,
    kNotFoundPageFieldNumber = 2,
  };
  // string main_page_suffix = 1;
  void clear_main_page_suffix();
  const std::string& main_page_suffix() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_main_page_suffix(ArgT0&& arg0, ArgT... args);
  std::string* mutable_main_page_suffix();
  PROTOBUF_NODISCARD std::string* release_main_page_suffix();
  void set_allocated_main_page_suffix(std::string* main_page_suffix);
  private:
  const std::string& _internal_main_page_suffix() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_main_page_suffix(const std::string& value);
  std::string* _internal_mutable_main_page_suffix();
  public:

  // string not_found_page = 2;
  void clear_not_found_page();
  const std::string& not_found_page() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_not_found_page(ArgT0&& arg0, ArgT... args);
  std::string* mutable_not_found_page();
  PROTOBUF_NODISCARD std::string* release_not_found_page();
  void set_allocated_not_found_page(std::string* not_found_page);
  private:
  const std::string& _internal_not_found_page() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_not_found_page(const std::string& value);
  std::string* _internal_mutable_not_found_page();
  public:

  // @@protoc_insertion_point(class_scope:google.storage.v2.Bucket.Website)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr main_page_suffix_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr not_found_page_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class Bucket_CustomPlacementConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.Bucket.CustomPlacementConfig) */ {
 public:
  inline Bucket_CustomPlacementConfig() : Bucket_CustomPlacementConfig(nullptr) {}
  ~Bucket_CustomPlacementConfig() override;
  explicit PROTOBUF_CONSTEXPR Bucket_CustomPlacementConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Bucket_CustomPlacementConfig(const Bucket_CustomPlacementConfig& from);
  Bucket_CustomPlacementConfig(Bucket_CustomPlacementConfig&& from) noexcept
    : Bucket_CustomPlacementConfig() {
    *this = ::std::move(from);
  }

  inline Bucket_CustomPlacementConfig& operator=(const Bucket_CustomPlacementConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bucket_CustomPlacementConfig& operator=(Bucket_CustomPlacementConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Bucket_CustomPlacementConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bucket_CustomPlacementConfig* internal_default_instance() {
    return reinterpret_cast<const Bucket_CustomPlacementConfig*>(
               &_Bucket_CustomPlacementConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(Bucket_CustomPlacementConfig& a, Bucket_CustomPlacementConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(Bucket_CustomPlacementConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bucket_CustomPlacementConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Bucket_CustomPlacementConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Bucket_CustomPlacementConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Bucket_CustomPlacementConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Bucket_CustomPlacementConfig& from) {
    Bucket_CustomPlacementConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bucket_CustomPlacementConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.Bucket.CustomPlacementConfig";
  }
  protected:
  explicit Bucket_CustomPlacementConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataLocationsFieldNumber = 1,
  };
  // repeated string data_locations = 1;
  int data_locations_size() const;
  private:
  int _internal_data_locations_size() const;
  public:
  void clear_data_locations();
  const std::string& data_locations(int index) const;
  std::string* mutable_data_locations(int index);
  void set_data_locations(int index, const std::string& value);
  void set_data_locations(int index, std::string&& value);
  void set_data_locations(int index, const char* value);
  void set_data_locations(int index, const char* value, size_t size);
  std::string* add_data_locations();
  void add_data_locations(const std::string& value);
  void add_data_locations(std::string&& value);
  void add_data_locations(const char* value);
  void add_data_locations(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& data_locations() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_data_locations();
  private:
  const std::string& _internal_data_locations(int index) const;
  std::string* _internal_add_data_locations();
  public:

  // @@protoc_insertion_point(class_scope:google.storage.v2.Bucket.CustomPlacementConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> data_locations_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class Bucket_Autoclass final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.Bucket.Autoclass) */ {
 public:
  inline Bucket_Autoclass() : Bucket_Autoclass(nullptr) {}
  ~Bucket_Autoclass() override;
  explicit PROTOBUF_CONSTEXPR Bucket_Autoclass(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Bucket_Autoclass(const Bucket_Autoclass& from);
  Bucket_Autoclass(Bucket_Autoclass&& from) noexcept
    : Bucket_Autoclass() {
    *this = ::std::move(from);
  }

  inline Bucket_Autoclass& operator=(const Bucket_Autoclass& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bucket_Autoclass& operator=(Bucket_Autoclass&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Bucket_Autoclass& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bucket_Autoclass* internal_default_instance() {
    return reinterpret_cast<const Bucket_Autoclass*>(
               &_Bucket_Autoclass_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(Bucket_Autoclass& a, Bucket_Autoclass& b) {
    a.Swap(&b);
  }
  inline void Swap(Bucket_Autoclass* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bucket_Autoclass* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Bucket_Autoclass* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Bucket_Autoclass>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Bucket_Autoclass& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Bucket_Autoclass& from) {
    Bucket_Autoclass::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bucket_Autoclass* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.Bucket.Autoclass";
  }
  protected:
  explicit Bucket_Autoclass(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kToggleTimeFieldNumber = 2,
    kEnabledFieldNumber = 1,
  };
  // .google.protobuf.Timestamp toggle_time = 2 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_toggle_time() const;
  private:
  bool _internal_has_toggle_time() const;
  public:
  void clear_toggle_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& toggle_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_toggle_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_toggle_time();
  void set_allocated_toggle_time(::PROTOBUF_NAMESPACE_ID::Timestamp* toggle_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_toggle_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_toggle_time();
  public:
  void unsafe_arena_set_allocated_toggle_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* toggle_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_toggle_time();

  // bool enabled = 1;
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.storage.v2.Bucket.Autoclass)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::Timestamp* toggle_time_;
    bool enabled_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class Bucket_LabelsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Bucket_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Bucket_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  Bucket_LabelsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR Bucket_LabelsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Bucket_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Bucket_LabelsEntry_DoNotUse& other);
  static const Bucket_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Bucket_LabelsEntry_DoNotUse*>(&_Bucket_LabelsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.storage.v2.Bucket.LabelsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.storage.v2.Bucket.LabelsEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};

// -------------------------------------------------------------------

class Bucket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.Bucket) */ {
 public:
  inline Bucket() : Bucket(nullptr) {}
  ~Bucket() override;
  explicit PROTOBUF_CONSTEXPR Bucket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Bucket(const Bucket& from);
  Bucket(Bucket&& from) noexcept
    : Bucket() {
    *this = ::std::move(from);
  }

  inline Bucket& operator=(const Bucket& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bucket& operator=(Bucket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Bucket& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bucket* internal_default_instance() {
    return reinterpret_cast<const Bucket*>(
               &_Bucket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(Bucket& a, Bucket& b) {
    a.Swap(&b);
  }
  inline void Swap(Bucket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bucket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Bucket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Bucket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Bucket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Bucket& from) {
    Bucket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bucket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.Bucket";
  }
  protected:
  explicit Bucket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Bucket_Billing Billing;
  typedef Bucket_Cors Cors;
  typedef Bucket_Encryption Encryption;
  typedef Bucket_IamConfig IamConfig;
  typedef Bucket_Lifecycle Lifecycle;
  typedef Bucket_Logging Logging;
  typedef Bucket_RetentionPolicy RetentionPolicy;
  typedef Bucket_Versioning Versioning;
  typedef Bucket_Website Website;
  typedef Bucket_CustomPlacementConfig CustomPlacementConfig;
  typedef Bucket_Autoclass Autoclass;

  // accessors -------------------------------------------------------

  enum : int {
    kAclFieldNumber = 8,
    kDefaultObjectAclFieldNumber = 9,
    kCorsFieldNumber = 12,
    kLabelsFieldNumber = 15,
    kNameFieldNumber = 1,
    kBucketIdFieldNumber = 2,
    kProjectFieldNumber = 3,
    kLocationFieldNumber = 5,
    kLocationTypeFieldNumber = 6,
    kStorageClassFieldNumber = 7,
    kRpoFieldNumber = 27,
    kEtagFieldNumber = 29,
    kLifecycleFieldNumber = 10,
    kCreateTimeFieldNumber = 11,
    kUpdateTimeFieldNumber = 13,
    kWebsiteFieldNumber = 16,
    kVersioningFieldNumber = 17,
    kLoggingFieldNumber = 18,
    kOwnerFieldNumber = 19,
    kEncryptionFieldNumber = 20,
    kBillingFieldNumber = 21,
    kRetentionPolicyFieldNumber = 22,
    kIamConfigFieldNumber = 23,
    kCustomPlacementConfigFieldNumber = 26,
    kAutoclassFieldNumber = 28,
    kMetagenerationFieldNumber = 4,
    kDefaultEventBasedHoldFieldNumber = 14,
    kSatisfiesPzsFieldNumber = 25,
  };
  // repeated .google.storage.v2.BucketAccessControl acl = 8;
  int acl_size() const;
  private:
  int _internal_acl_size() const;
  public:
  void clear_acl();
  ::google::storage::v2::BucketAccessControl* mutable_acl(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::storage::v2::BucketAccessControl >*
      mutable_acl();
  private:
  const ::google::storage::v2::BucketAccessControl& _internal_acl(int index) const;
  ::google::storage::v2::BucketAccessControl* _internal_add_acl();
  public:
  const ::google::storage::v2::BucketAccessControl& acl(int index) const;
  ::google::storage::v2::BucketAccessControl* add_acl();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::storage::v2::BucketAccessControl >&
      acl() const;

  // repeated .google.storage.v2.ObjectAccessControl default_object_acl = 9;
  int default_object_acl_size() const;
  private:
  int _internal_default_object_acl_size() const;
  public:
  void clear_default_object_acl();
  ::google::storage::v2::ObjectAccessControl* mutable_default_object_acl(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::storage::v2::ObjectAccessControl >*
      mutable_default_object_acl();
  private:
  const ::google::storage::v2::ObjectAccessControl& _internal_default_object_acl(int index) const;
  ::google::storage::v2::ObjectAccessControl* _internal_add_default_object_acl();
  public:
  const ::google::storage::v2::ObjectAccessControl& default_object_acl(int index) const;
  ::google::storage::v2::ObjectAccessControl* add_default_object_acl();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::storage::v2::ObjectAccessControl >&
      default_object_acl() const;

  // repeated .google.storage.v2.Bucket.Cors cors = 12;
  int cors_size() const;
  private:
  int _internal_cors_size() const;
  public:
  void clear_cors();
  ::google::storage::v2::Bucket_Cors* mutable_cors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::storage::v2::Bucket_Cors >*
      mutable_cors();
  private:
  const ::google::storage::v2::Bucket_Cors& _internal_cors(int index) const;
  ::google::storage::v2::Bucket_Cors* _internal_add_cors();
  public:
  const ::google::storage::v2::Bucket_Cors& cors(int index) const;
  ::google::storage::v2::Bucket_Cors* add_cors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::storage::v2::Bucket_Cors >&
      cors() const;

  // map<string, string> labels = 15;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_labels();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_labels();

  // string name = 1 [(.google.api.field_behavior) = IMMUTABLE];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string bucket_id = 2 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_bucket_id();
  const std::string& bucket_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bucket_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bucket_id();
  PROTOBUF_NODISCARD std::string* release_bucket_id();
  void set_allocated_bucket_id(std::string* bucket_id);
  private:
  const std::string& _internal_bucket_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bucket_id(const std::string& value);
  std::string* _internal_mutable_bucket_id();
  public:

  // string project = 3 [(.google.api.field_behavior) = IMMUTABLE, (.google.api.resource_reference) = {
  void clear_project();
  const std::string& project() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_project(ArgT0&& arg0, ArgT... args);
  std::string* mutable_project();
  PROTOBUF_NODISCARD std::string* release_project();
  void set_allocated_project(std::string* project);
  private:
  const std::string& _internal_project() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_project(const std::string& value);
  std::string* _internal_mutable_project();
  public:

  // string location = 5 [(.google.api.field_behavior) = IMMUTABLE];
  void clear_location();
  const std::string& location() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_location(ArgT0&& arg0, ArgT... args);
  std::string* mutable_location();
  PROTOBUF_NODISCARD std::string* release_location();
  void set_allocated_location(std::string* location);
  private:
  const std::string& _internal_location() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_location(const std::string& value);
  std::string* _internal_mutable_location();
  public:

  // string location_type = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_location_type();
  const std::string& location_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_location_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_location_type();
  PROTOBUF_NODISCARD std::string* release_location_type();
  void set_allocated_location_type(std::string* location_type);
  private:
  const std::string& _internal_location_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_location_type(const std::string& value);
  std::string* _internal_mutable_location_type();
  public:

  // string storage_class = 7;
  void clear_storage_class();
  const std::string& storage_class() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_storage_class(ArgT0&& arg0, ArgT... args);
  std::string* mutable_storage_class();
  PROTOBUF_NODISCARD std::string* release_storage_class();
  void set_allocated_storage_class(std::string* storage_class);
  private:
  const std::string& _internal_storage_class() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_storage_class(const std::string& value);
  std::string* _internal_mutable_storage_class();
  public:

  // string rpo = 27;
  void clear_rpo();
  const std::string& rpo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rpo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rpo();
  PROTOBUF_NODISCARD std::string* release_rpo();
  void set_allocated_rpo(std::string* rpo);
  private:
  const std::string& _internal_rpo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rpo(const std::string& value);
  std::string* _internal_mutable_rpo();
  public:

  // string etag = 29;
  void clear_etag();
  const std::string& etag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_etag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_etag();
  PROTOBUF_NODISCARD std::string* release_etag();
  void set_allocated_etag(std::string* etag);
  private:
  const std::string& _internal_etag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_etag(const std::string& value);
  std::string* _internal_mutable_etag();
  public:

  // .google.storage.v2.Bucket.Lifecycle lifecycle = 10;
  bool has_lifecycle() const;
  private:
  bool _internal_has_lifecycle() const;
  public:
  void clear_lifecycle();
  const ::google::storage::v2::Bucket_Lifecycle& lifecycle() const;
  PROTOBUF_NODISCARD ::google::storage::v2::Bucket_Lifecycle* release_lifecycle();
  ::google::storage::v2::Bucket_Lifecycle* mutable_lifecycle();
  void set_allocated_lifecycle(::google::storage::v2::Bucket_Lifecycle* lifecycle);
  private:
  const ::google::storage::v2::Bucket_Lifecycle& _internal_lifecycle() const;
  ::google::storage::v2::Bucket_Lifecycle* _internal_mutable_lifecycle();
  public:
  void unsafe_arena_set_allocated_lifecycle(
      ::google::storage::v2::Bucket_Lifecycle* lifecycle);
  ::google::storage::v2::Bucket_Lifecycle* unsafe_arena_release_lifecycle();

  // .google.protobuf.Timestamp create_time = 11 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_create_time() const;
  private:
  bool _internal_has_create_time() const;
  public:
  void clear_create_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& create_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_create_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_create_time();
  void set_allocated_create_time(::PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_create_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_create_time();
  public:
  void unsafe_arena_set_allocated_create_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_create_time();

  // .google.protobuf.Timestamp update_time = 13 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_update_time() const;
  private:
  bool _internal_has_update_time() const;
  public:
  void clear_update_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& update_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_update_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_update_time();
  void set_allocated_update_time(::PROTOBUF_NAMESPACE_ID::Timestamp* update_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_update_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_update_time();
  public:
  void unsafe_arena_set_allocated_update_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* update_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_update_time();

  // .google.storage.v2.Bucket.Website website = 16;
  bool has_website() const;
  private:
  bool _internal_has_website() const;
  public:
  void clear_website();
  const ::google::storage::v2::Bucket_Website& website() const;
  PROTOBUF_NODISCARD ::google::storage::v2::Bucket_Website* release_website();
  ::google::storage::v2::Bucket_Website* mutable_website();
  void set_allocated_website(::google::storage::v2::Bucket_Website* website);
  private:
  const ::google::storage::v2::Bucket_Website& _internal_website() const;
  ::google::storage::v2::Bucket_Website* _internal_mutable_website();
  public:
  void unsafe_arena_set_allocated_website(
      ::google::storage::v2::Bucket_Website* website);
  ::google::storage::v2::Bucket_Website* unsafe_arena_release_website();

  // .google.storage.v2.Bucket.Versioning versioning = 17;
  bool has_versioning() const;
  private:
  bool _internal_has_versioning() const;
  public:
  void clear_versioning();
  const ::google::storage::v2::Bucket_Versioning& versioning() const;
  PROTOBUF_NODISCARD ::google::storage::v2::Bucket_Versioning* release_versioning();
  ::google::storage::v2::Bucket_Versioning* mutable_versioning();
  void set_allocated_versioning(::google::storage::v2::Bucket_Versioning* versioning);
  private:
  const ::google::storage::v2::Bucket_Versioning& _internal_versioning() const;
  ::google::storage::v2::Bucket_Versioning* _internal_mutable_versioning();
  public:
  void unsafe_arena_set_allocated_versioning(
      ::google::storage::v2::Bucket_Versioning* versioning);
  ::google::storage::v2::Bucket_Versioning* unsafe_arena_release_versioning();

  // .google.storage.v2.Bucket.Logging logging = 18;
  bool has_logging() const;
  private:
  bool _internal_has_logging() const;
  public:
  void clear_logging();
  const ::google::storage::v2::Bucket_Logging& logging() const;
  PROTOBUF_NODISCARD ::google::storage::v2::Bucket_Logging* release_logging();
  ::google::storage::v2::Bucket_Logging* mutable_logging();
  void set_allocated_logging(::google::storage::v2::Bucket_Logging* logging);
  private:
  const ::google::storage::v2::Bucket_Logging& _internal_logging() const;
  ::google::storage::v2::Bucket_Logging* _internal_mutable_logging();
  public:
  void unsafe_arena_set_allocated_logging(
      ::google::storage::v2::Bucket_Logging* logging);
  ::google::storage::v2::Bucket_Logging* unsafe_arena_release_logging();

  // .google.storage.v2.Owner owner = 19 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_owner() const;
  private:
  bool _internal_has_owner() const;
  public:
  void clear_owner();
  const ::google::storage::v2::Owner& owner() const;
  PROTOBUF_NODISCARD ::google::storage::v2::Owner* release_owner();
  ::google::storage::v2::Owner* mutable_owner();
  void set_allocated_owner(::google::storage::v2::Owner* owner);
  private:
  const ::google::storage::v2::Owner& _internal_owner() const;
  ::google::storage::v2::Owner* _internal_mutable_owner();
  public:
  void unsafe_arena_set_allocated_owner(
      ::google::storage::v2::Owner* owner);
  ::google::storage::v2::Owner* unsafe_arena_release_owner();

  // .google.storage.v2.Bucket.Encryption encryption = 20;
  bool has_encryption() const;
  private:
  bool _internal_has_encryption() const;
  public:
  void clear_encryption();
  const ::google::storage::v2::Bucket_Encryption& encryption() const;
  PROTOBUF_NODISCARD ::google::storage::v2::Bucket_Encryption* release_encryption();
  ::google::storage::v2::Bucket_Encryption* mutable_encryption();
  void set_allocated_encryption(::google::storage::v2::Bucket_Encryption* encryption);
  private:
  const ::google::storage::v2::Bucket_Encryption& _internal_encryption() const;
  ::google::storage::v2::Bucket_Encryption* _internal_mutable_encryption();
  public:
  void unsafe_arena_set_allocated_encryption(
      ::google::storage::v2::Bucket_Encryption* encryption);
  ::google::storage::v2::Bucket_Encryption* unsafe_arena_release_encryption();

  // .google.storage.v2.Bucket.Billing billing = 21;
  bool has_billing() const;
  private:
  bool _internal_has_billing() const;
  public:
  void clear_billing();
  const ::google::storage::v2::Bucket_Billing& billing() const;
  PROTOBUF_NODISCARD ::google::storage::v2::Bucket_Billing* release_billing();
  ::google::storage::v2::Bucket_Billing* mutable_billing();
  void set_allocated_billing(::google::storage::v2::Bucket_Billing* billing);
  private:
  const ::google::storage::v2::Bucket_Billing& _internal_billing() const;
  ::google::storage::v2::Bucket_Billing* _internal_mutable_billing();
  public:
  void unsafe_arena_set_allocated_billing(
      ::google::storage::v2::Bucket_Billing* billing);
  ::google::storage::v2::Bucket_Billing* unsafe_arena_release_billing();

  // .google.storage.v2.Bucket.RetentionPolicy retention_policy = 22;
  bool has_retention_policy() const;
  private:
  bool _internal_has_retention_policy() const;
  public:
  void clear_retention_policy();
  const ::google::storage::v2::Bucket_RetentionPolicy& retention_policy() const;
  PROTOBUF_NODISCARD ::google::storage::v2::Bucket_RetentionPolicy* release_retention_policy();
  ::google::storage::v2::Bucket_RetentionPolicy* mutable_retention_policy();
  void set_allocated_retention_policy(::google::storage::v2::Bucket_RetentionPolicy* retention_policy);
  private:
  const ::google::storage::v2::Bucket_RetentionPolicy& _internal_retention_policy() const;
  ::google::storage::v2::Bucket_RetentionPolicy* _internal_mutable_retention_policy();
  public:
  void unsafe_arena_set_allocated_retention_policy(
      ::google::storage::v2::Bucket_RetentionPolicy* retention_policy);
  ::google::storage::v2::Bucket_RetentionPolicy* unsafe_arena_release_retention_policy();

  // .google.storage.v2.Bucket.IamConfig iam_config = 23;
  bool has_iam_config() const;
  private:
  bool _internal_has_iam_config() const;
  public:
  void clear_iam_config();
  const ::google::storage::v2::Bucket_IamConfig& iam_config() const;
  PROTOBUF_NODISCARD ::google::storage::v2::Bucket_IamConfig* release_iam_config();
  ::google::storage::v2::Bucket_IamConfig* mutable_iam_config();
  void set_allocated_iam_config(::google::storage::v2::Bucket_IamConfig* iam_config);
  private:
  const ::google::storage::v2::Bucket_IamConfig& _internal_iam_config() const;
  ::google::storage::v2::Bucket_IamConfig* _internal_mutable_iam_config();
  public:
  void unsafe_arena_set_allocated_iam_config(
      ::google::storage::v2::Bucket_IamConfig* iam_config);
  ::google::storage::v2::Bucket_IamConfig* unsafe_arena_release_iam_config();

  // .google.storage.v2.Bucket.CustomPlacementConfig custom_placement_config = 26;
  bool has_custom_placement_config() const;
  private:
  bool _internal_has_custom_placement_config() const;
  public:
  void clear_custom_placement_config();
  const ::google::storage::v2::Bucket_CustomPlacementConfig& custom_placement_config() const;
  PROTOBUF_NODISCARD ::google::storage::v2::Bucket_CustomPlacementConfig* release_custom_placement_config();
  ::google::storage::v2::Bucket_CustomPlacementConfig* mutable_custom_placement_config();
  void set_allocated_custom_placement_config(::google::storage::v2::Bucket_CustomPlacementConfig* custom_placement_config);
  private:
  const ::google::storage::v2::Bucket_CustomPlacementConfig& _internal_custom_placement_config() const;
  ::google::storage::v2::Bucket_CustomPlacementConfig* _internal_mutable_custom_placement_config();
  public:
  void unsafe_arena_set_allocated_custom_placement_config(
      ::google::storage::v2::Bucket_CustomPlacementConfig* custom_placement_config);
  ::google::storage::v2::Bucket_CustomPlacementConfig* unsafe_arena_release_custom_placement_config();

  // .google.storage.v2.Bucket.Autoclass autoclass = 28;
  bool has_autoclass() const;
  private:
  bool _internal_has_autoclass() const;
  public:
  void clear_autoclass();
  const ::google::storage::v2::Bucket_Autoclass& autoclass() const;
  PROTOBUF_NODISCARD ::google::storage::v2::Bucket_Autoclass* release_autoclass();
  ::google::storage::v2::Bucket_Autoclass* mutable_autoclass();
  void set_allocated_autoclass(::google::storage::v2::Bucket_Autoclass* autoclass);
  private:
  const ::google::storage::v2::Bucket_Autoclass& _internal_autoclass() const;
  ::google::storage::v2::Bucket_Autoclass* _internal_mutable_autoclass();
  public:
  void unsafe_arena_set_allocated_autoclass(
      ::google::storage::v2::Bucket_Autoclass* autoclass);
  ::google::storage::v2::Bucket_Autoclass* unsafe_arena_release_autoclass();

  // int64 metageneration = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_metageneration();
  int64_t metageneration() const;
  void set_metageneration(int64_t value);
  private:
  int64_t _internal_metageneration() const;
  void _internal_set_metageneration(int64_t value);
  public:

  // bool default_event_based_hold = 14;
  void clear_default_event_based_hold();
  bool default_event_based_hold() const;
  void set_default_event_based_hold(bool value);
  private:
  bool _internal_default_event_based_hold() const;
  void _internal_set_default_event_based_hold(bool value);
  public:

  // bool satisfies_pzs = 25;
  void clear_satisfies_pzs();
  bool satisfies_pzs() const;
  void set_satisfies_pzs(bool value);
  private:
  bool _internal_satisfies_pzs() const;
  void _internal_set_satisfies_pzs(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.storage.v2.Bucket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::storage::v2::BucketAccessControl > acl_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::storage::v2::ObjectAccessControl > default_object_acl_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::storage::v2::Bucket_Cors > cors_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        Bucket_LabelsEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> labels_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bucket_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr project_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr location_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr location_type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr storage_class_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rpo_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr etag_;
    ::google::storage::v2::Bucket_Lifecycle* lifecycle_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* create_time_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* update_time_;
    ::google::storage::v2::Bucket_Website* website_;
    ::google::storage::v2::Bucket_Versioning* versioning_;
    ::google::storage::v2::Bucket_Logging* logging_;
    ::google::storage::v2::Owner* owner_;
    ::google::storage::v2::Bucket_Encryption* encryption_;
    ::google::storage::v2::Bucket_Billing* billing_;
    ::google::storage::v2::Bucket_RetentionPolicy* retention_policy_;
    ::google::storage::v2::Bucket_IamConfig* iam_config_;
    ::google::storage::v2::Bucket_CustomPlacementConfig* custom_placement_config_;
    ::google::storage::v2::Bucket_Autoclass* autoclass_;
    int64_t metageneration_;
    bool default_event_based_hold_;
    bool satisfies_pzs_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class BucketAccessControl final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.BucketAccessControl) */ {
 public:
  inline BucketAccessControl() : BucketAccessControl(nullptr) {}
  ~BucketAccessControl() override;
  explicit PROTOBUF_CONSTEXPR BucketAccessControl(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BucketAccessControl(const BucketAccessControl& from);
  BucketAccessControl(BucketAccessControl&& from) noexcept
    : BucketAccessControl() {
    *this = ::std::move(from);
  }

  inline BucketAccessControl& operator=(const BucketAccessControl& from) {
    CopyFrom(from);
    return *this;
  }
  inline BucketAccessControl& operator=(BucketAccessControl&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BucketAccessControl& default_instance() {
    return *internal_default_instance();
  }
  static inline const BucketAccessControl* internal_default_instance() {
    return reinterpret_cast<const BucketAccessControl*>(
               &_BucketAccessControl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(BucketAccessControl& a, BucketAccessControl& b) {
    a.Swap(&b);
  }
  inline void Swap(BucketAccessControl* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BucketAccessControl* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BucketAccessControl* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BucketAccessControl>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BucketAccessControl& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BucketAccessControl& from) {
    BucketAccessControl::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BucketAccessControl* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.BucketAccessControl";
  }
  protected:
  explicit BucketAccessControl(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleFieldNumber = 1,
    kIdFieldNumber = 2,
    kEntityFieldNumber = 3,
    kEntityIdFieldNumber = 4,
    kEmailFieldNumber = 5,
    kDomainFieldNumber = 6,
    kEtagFieldNumber = 8,
    kProjectTeamFieldNumber = 7,
  };
  // string role = 1;
  void clear_role();
  const std::string& role() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_role(ArgT0&& arg0, ArgT... args);
  std::string* mutable_role();
  PROTOBUF_NODISCARD std::string* release_role();
  void set_allocated_role(std::string* role);
  private:
  const std::string& _internal_role() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_role(const std::string& value);
  std::string* _internal_mutable_role();
  public:

  // string id = 2;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string entity = 3;
  void clear_entity();
  const std::string& entity() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_entity(ArgT0&& arg0, ArgT... args);
  std::string* mutable_entity();
  PROTOBUF_NODISCARD std::string* release_entity();
  void set_allocated_entity(std::string* entity);
  private:
  const std::string& _internal_entity() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_entity(const std::string& value);
  std::string* _internal_mutable_entity();
  public:

  // string entity_id = 4;
  void clear_entity_id();
  const std::string& entity_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_entity_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_entity_id();
  PROTOBUF_NODISCARD std::string* release_entity_id();
  void set_allocated_entity_id(std::string* entity_id);
  private:
  const std::string& _internal_entity_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_entity_id(const std::string& value);
  std::string* _internal_mutable_entity_id();
  public:

  // string email = 5;
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string domain = 6;
  void clear_domain();
  const std::string& domain() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_domain(ArgT0&& arg0, ArgT... args);
  std::string* mutable_domain();
  PROTOBUF_NODISCARD std::string* release_domain();
  void set_allocated_domain(std::string* domain);
  private:
  const std::string& _internal_domain() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_domain(const std::string& value);
  std::string* _internal_mutable_domain();
  public:

  // string etag = 8;
  void clear_etag();
  const std::string& etag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_etag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_etag();
  PROTOBUF_NODISCARD std::string* release_etag();
  void set_allocated_etag(std::string* etag);
  private:
  const std::string& _internal_etag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_etag(const std::string& value);
  std::string* _internal_mutable_etag();
  public:

  // .google.storage.v2.ProjectTeam project_team = 7;
  bool has_project_team() const;
  private:
  bool _internal_has_project_team() const;
  public:
  void clear_project_team();
  const ::google::storage::v2::ProjectTeam& project_team() const;
  PROTOBUF_NODISCARD ::google::storage::v2::ProjectTeam* release_project_team();
  ::google::storage::v2::ProjectTeam* mutable_project_team();
  void set_allocated_project_team(::google::storage::v2::ProjectTeam* project_team);
  private:
  const ::google::storage::v2::ProjectTeam& _internal_project_team() const;
  ::google::storage::v2::ProjectTeam* _internal_mutable_project_team();
  public:
  void unsafe_arena_set_allocated_project_team(
      ::google::storage::v2::ProjectTeam* project_team);
  ::google::storage::v2::ProjectTeam* unsafe_arena_release_project_team();

  // @@protoc_insertion_point(class_scope:google.storage.v2.BucketAccessControl)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr role_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entity_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entity_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr domain_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr etag_;
    ::google::storage::v2::ProjectTeam* project_team_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class ChecksummedData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.ChecksummedData) */ {
 public:
  inline ChecksummedData() : ChecksummedData(nullptr) {}
  ~ChecksummedData() override;
  explicit PROTOBUF_CONSTEXPR ChecksummedData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChecksummedData(const ChecksummedData& from);
  ChecksummedData(ChecksummedData&& from) noexcept
    : ChecksummedData() {
    *this = ::std::move(from);
  }

  inline ChecksummedData& operator=(const ChecksummedData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChecksummedData& operator=(ChecksummedData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChecksummedData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChecksummedData* internal_default_instance() {
    return reinterpret_cast<const ChecksummedData*>(
               &_ChecksummedData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(ChecksummedData& a, ChecksummedData& b) {
    a.Swap(&b);
  }
  inline void Swap(ChecksummedData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChecksummedData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChecksummedData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChecksummedData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChecksummedData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChecksummedData& from) {
    ChecksummedData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChecksummedData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.ChecksummedData";
  }
  protected:
  explicit ChecksummedData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 1,
    kCrc32CFieldNumber = 2,
  };
  // bytes content = 1;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // optional fixed32 crc32c = 2;
  bool has_crc32c() const;
  private:
  bool _internal_has_crc32c() const;
  public:
  void clear_crc32c();
  uint32_t crc32c() const;
  void set_crc32c(uint32_t value);
  private:
  uint32_t _internal_crc32c() const;
  void _internal_set_crc32c(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.storage.v2.ChecksummedData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    uint32_t crc32c_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class ObjectChecksums final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.ObjectChecksums) */ {
 public:
  inline ObjectChecksums() : ObjectChecksums(nullptr) {}
  ~ObjectChecksums() override;
  explicit PROTOBUF_CONSTEXPR ObjectChecksums(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectChecksums(const ObjectChecksums& from);
  ObjectChecksums(ObjectChecksums&& from) noexcept
    : ObjectChecksums() {
    *this = ::std::move(from);
  }

  inline ObjectChecksums& operator=(const ObjectChecksums& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectChecksums& operator=(ObjectChecksums&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectChecksums& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectChecksums* internal_default_instance() {
    return reinterpret_cast<const ObjectChecksums*>(
               &_ObjectChecksums_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(ObjectChecksums& a, ObjectChecksums& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectChecksums* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectChecksums* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObjectChecksums* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObjectChecksums>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ObjectChecksums& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ObjectChecksums& from) {
    ObjectChecksums::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectChecksums* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.ObjectChecksums";
  }
  protected:
  explicit ObjectChecksums(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMd5HashFieldNumber = 2,
    kCrc32CFieldNumber = 1,
  };
  // bytes md5_hash = 2;
  void clear_md5_hash();
  const std::string& md5_hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_md5_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_md5_hash();
  PROTOBUF_NODISCARD std::string* release_md5_hash();
  void set_allocated_md5_hash(std::string* md5_hash);
  private:
  const std::string& _internal_md5_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_md5_hash(const std::string& value);
  std::string* _internal_mutable_md5_hash();
  public:

  // optional fixed32 crc32c = 1;
  bool has_crc32c() const;
  private:
  bool _internal_has_crc32c() const;
  public:
  void clear_crc32c();
  uint32_t crc32c() const;
  void set_crc32c(uint32_t value);
  private:
  uint32_t _internal_crc32c() const;
  void _internal_set_crc32c(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.storage.v2.ObjectChecksums)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr md5_hash_;
    uint32_t crc32c_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class HmacKeyMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.HmacKeyMetadata) */ {
 public:
  inline HmacKeyMetadata() : HmacKeyMetadata(nullptr) {}
  ~HmacKeyMetadata() override;
  explicit PROTOBUF_CONSTEXPR HmacKeyMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HmacKeyMetadata(const HmacKeyMetadata& from);
  HmacKeyMetadata(HmacKeyMetadata&& from) noexcept
    : HmacKeyMetadata() {
    *this = ::std::move(from);
  }

  inline HmacKeyMetadata& operator=(const HmacKeyMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline HmacKeyMetadata& operator=(HmacKeyMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HmacKeyMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const HmacKeyMetadata* internal_default_instance() {
    return reinterpret_cast<const HmacKeyMetadata*>(
               &_HmacKeyMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(HmacKeyMetadata& a, HmacKeyMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(HmacKeyMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HmacKeyMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HmacKeyMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HmacKeyMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HmacKeyMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HmacKeyMetadata& from) {
    HmacKeyMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HmacKeyMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.HmacKeyMetadata";
  }
  protected:
  explicit HmacKeyMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kAccessIdFieldNumber = 2,
    kProjectFieldNumber = 3,
    kServiceAccountEmailFieldNumber = 4,
    kStateFieldNumber = 5,
    kEtagFieldNumber = 8,
    kCreateTimeFieldNumber = 6,
    kUpdateTimeFieldNumber = 7,
  };
  // string id = 1 [(.google.api.field_behavior) = IMMUTABLE];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string access_id = 2 [(.google.api.field_behavior) = IMMUTABLE];
  void clear_access_id();
  const std::string& access_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_access_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_access_id();
  PROTOBUF_NODISCARD std::string* release_access_id();
  void set_allocated_access_id(std::string* access_id);
  private:
  const std::string& _internal_access_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_access_id(const std::string& value);
  std::string* _internal_mutable_access_id();
  public:

  // string project = 3 [(.google.api.field_behavior) = IMMUTABLE, (.google.api.resource_reference) = {
  void clear_project();
  const std::string& project() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_project(ArgT0&& arg0, ArgT... args);
  std::string* mutable_project();
  PROTOBUF_NODISCARD std::string* release_project();
  void set_allocated_project(std::string* project);
  private:
  const std::string& _internal_project() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_project(const std::string& value);
  std::string* _internal_mutable_project();
  public:

  // string service_account_email = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_service_account_email();
  const std::string& service_account_email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_service_account_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_service_account_email();
  PROTOBUF_NODISCARD std::string* release_service_account_email();
  void set_allocated_service_account_email(std::string* service_account_email);
  private:
  const std::string& _internal_service_account_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service_account_email(const std::string& value);
  std::string* _internal_mutable_service_account_email();
  public:

  // string state = 5;
  void clear_state();
  const std::string& state() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_state(ArgT0&& arg0, ArgT... args);
  std::string* mutable_state();
  PROTOBUF_NODISCARD std::string* release_state();
  void set_allocated_state(std::string* state);
  private:
  const std::string& _internal_state() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_state(const std::string& value);
  std::string* _internal_mutable_state();
  public:

  // string etag = 8;
  void clear_etag();
  const std::string& etag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_etag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_etag();
  PROTOBUF_NODISCARD std::string* release_etag();
  void set_allocated_etag(std::string* etag);
  private:
  const std::string& _internal_etag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_etag(const std::string& value);
  std::string* _internal_mutable_etag();
  public:

  // .google.protobuf.Timestamp create_time = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_create_time() const;
  private:
  bool _internal_has_create_time() const;
  public:
  void clear_create_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& create_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_create_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_create_time();
  void set_allocated_create_time(::PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_create_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_create_time();
  public:
  void unsafe_arena_set_allocated_create_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_create_time();

  // .google.protobuf.Timestamp update_time = 7 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_update_time() const;
  private:
  bool _internal_has_update_time() const;
  public:
  void clear_update_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& update_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_update_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_update_time();
  void set_allocated_update_time(::PROTOBUF_NAMESPACE_ID::Timestamp* update_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_update_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_update_time();
  public:
  void unsafe_arena_set_allocated_update_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* update_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_update_time();

  // @@protoc_insertion_point(class_scope:google.storage.v2.HmacKeyMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr access_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr project_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_account_email_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr etag_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* create_time_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* update_time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class Notification_CustomAttributesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Notification_CustomAttributesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Notification_CustomAttributesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  Notification_CustomAttributesEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR Notification_CustomAttributesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Notification_CustomAttributesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Notification_CustomAttributesEntry_DoNotUse& other);
  static const Notification_CustomAttributesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Notification_CustomAttributesEntry_DoNotUse*>(&_Notification_CustomAttributesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.storage.v2.Notification.CustomAttributesEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.storage.v2.Notification.CustomAttributesEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};

// -------------------------------------------------------------------

class Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.Notification) */ {
 public:
  inline Notification() : Notification(nullptr) {}
  ~Notification() override;
  explicit PROTOBUF_CONSTEXPR Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Notification(const Notification& from);
  Notification(Notification&& from) noexcept
    : Notification() {
    *this = ::std::move(from);
  }

  inline Notification& operator=(const Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline Notification& operator=(Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const Notification* internal_default_instance() {
    return reinterpret_cast<const Notification*>(
               &_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(Notification& a, Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Notification& from) {
    Notification::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.Notification";
  }
  protected:
  explicit Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kEventTypesFieldNumber = 3,
    kCustomAttributesFieldNumber = 4,
    kNameFieldNumber = 1,
    kTopicFieldNumber = 2,
    kObjectNamePrefixFieldNumber = 5,
    kPayloadFormatFieldNumber = 6,
    kEtagFieldNumber = 7,
  };
  // repeated string event_types = 3 [(.google.api.field_behavior) = OPTIONAL];
  int event_types_size() const;
  private:
  int _internal_event_types_size() const;
  public:
  void clear_event_types();
  const std::string& event_types(int index) const;
  std::string* mutable_event_types(int index);
  void set_event_types(int index, const std::string& value);
  void set_event_types(int index, std::string&& value);
  void set_event_types(int index, const char* value);
  void set_event_types(int index, const char* value, size_t size);
  std::string* add_event_types();
  void add_event_types(const std::string& value);
  void add_event_types(std::string&& value);
  void add_event_types(const char* value);
  void add_event_types(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& event_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_event_types();
  private:
  const std::string& _internal_event_types(int index) const;
  std::string* _internal_add_event_types();
  public:

  // map<string, string> custom_attributes = 4 [(.google.api.field_behavior) = OPTIONAL];
  int custom_attributes_size() const;
  private:
  int _internal_custom_attributes_size() const;
  public:
  void clear_custom_attributes();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_custom_attributes() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_custom_attributes();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      custom_attributes() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_custom_attributes();

  // string name = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string topic = 2 [(.google.api.field_behavior) = REQUIRED];
  void clear_topic();
  const std::string& topic() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_topic(ArgT0&& arg0, ArgT... args);
  std::string* mutable_topic();
  PROTOBUF_NODISCARD std::string* release_topic();
  void set_allocated_topic(std::string* topic);
  private:
  const std::string& _internal_topic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_topic(const std::string& value);
  std::string* _internal_mutable_topic();
  public:

  // string object_name_prefix = 5 [(.google.api.field_behavior) = OPTIONAL];
  void clear_object_name_prefix();
  const std::string& object_name_prefix() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_object_name_prefix(ArgT0&& arg0, ArgT... args);
  std::string* mutable_object_name_prefix();
  PROTOBUF_NODISCARD std::string* release_object_name_prefix();
  void set_allocated_object_name_prefix(std::string* object_name_prefix);
  private:
  const std::string& _internal_object_name_prefix() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_object_name_prefix(const std::string& value);
  std::string* _internal_mutable_object_name_prefix();
  public:

  // string payload_format = 6 [(.google.api.field_behavior) = REQUIRED];
  void clear_payload_format();
  const std::string& payload_format() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_payload_format(ArgT0&& arg0, ArgT... args);
  std::string* mutable_payload_format();
  PROTOBUF_NODISCARD std::string* release_payload_format();
  void set_allocated_payload_format(std::string* payload_format);
  private:
  const std::string& _internal_payload_format() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload_format(const std::string& value);
  std::string* _internal_mutable_payload_format();
  public:

  // string etag = 7;
  void clear_etag();
  const std::string& etag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_etag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_etag();
  PROTOBUF_NODISCARD std::string* release_etag();
  void set_allocated_etag(std::string* etag);
  private:
  const std::string& _internal_etag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_etag(const std::string& value);
  std::string* _internal_mutable_etag();
  public:

  // @@protoc_insertion_point(class_scope:google.storage.v2.Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> event_types_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        Notification_CustomAttributesEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> custom_attributes_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr topic_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr object_name_prefix_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_format_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr etag_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class CustomerEncryption final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.CustomerEncryption) */ {
 public:
  inline CustomerEncryption() : CustomerEncryption(nullptr) {}
  ~CustomerEncryption() override;
  explicit PROTOBUF_CONSTEXPR CustomerEncryption(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CustomerEncryption(const CustomerEncryption& from);
  CustomerEncryption(CustomerEncryption&& from) noexcept
    : CustomerEncryption() {
    *this = ::std::move(from);
  }

  inline CustomerEncryption& operator=(const CustomerEncryption& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomerEncryption& operator=(CustomerEncryption&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CustomerEncryption& default_instance() {
    return *internal_default_instance();
  }
  static inline const CustomerEncryption* internal_default_instance() {
    return reinterpret_cast<const CustomerEncryption*>(
               &_CustomerEncryption_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(CustomerEncryption& a, CustomerEncryption& b) {
    a.Swap(&b);
  }
  inline void Swap(CustomerEncryption* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CustomerEncryption* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CustomerEncryption* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CustomerEncryption>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CustomerEncryption& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CustomerEncryption& from) {
    CustomerEncryption::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomerEncryption* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.CustomerEncryption";
  }
  protected:
  explicit CustomerEncryption(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncryptionAlgorithmFieldNumber = 1,
    kKeySha256BytesFieldNumber = 3,
  };
  // string encryption_algorithm = 1;
  void clear_encryption_algorithm();
  const std::string& encryption_algorithm() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_encryption_algorithm(ArgT0&& arg0, ArgT... args);
  std::string* mutable_encryption_algorithm();
  PROTOBUF_NODISCARD std::string* release_encryption_algorithm();
  void set_allocated_encryption_algorithm(std::string* encryption_algorithm);
  private:
  const std::string& _internal_encryption_algorithm() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encryption_algorithm(const std::string& value);
  std::string* _internal_mutable_encryption_algorithm();
  public:

  // bytes key_sha256_bytes = 3;
  void clear_key_sha256_bytes();
  const std::string& key_sha256_bytes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key_sha256_bytes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key_sha256_bytes();
  PROTOBUF_NODISCARD std::string* release_key_sha256_bytes();
  void set_allocated_key_sha256_bytes(std::string* key_sha256_bytes);
  private:
  const std::string& _internal_key_sha256_bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key_sha256_bytes(const std::string& value);
  std::string* _internal_mutable_key_sha256_bytes();
  public:

  // @@protoc_insertion_point(class_scope:google.storage.v2.CustomerEncryption)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encryption_algorithm_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_sha256_bytes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class Object_MetadataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Object_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Object_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  Object_MetadataEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR Object_MetadataEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Object_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Object_MetadataEntry_DoNotUse& other);
  static const Object_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Object_MetadataEntry_DoNotUse*>(&_Object_MetadataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.storage.v2.Object.MetadataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.storage.v2.Object.MetadataEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};

// -------------------------------------------------------------------

class Object final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.Object) */ {
 public:
  inline Object() : Object(nullptr) {}
  ~Object() override;
  explicit PROTOBUF_CONSTEXPR Object(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Object(const Object& from);
  Object(Object&& from) noexcept
    : Object() {
    *this = ::std::move(from);
  }

  inline Object& operator=(const Object& from) {
    CopyFrom(from);
    return *this;
  }
  inline Object& operator=(Object&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Object& default_instance() {
    return *internal_default_instance();
  }
  static inline const Object* internal_default_instance() {
    return reinterpret_cast<const Object*>(
               &_Object_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(Object& a, Object& b) {
    a.Swap(&b);
  }
  inline void Swap(Object* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Object* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Object* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Object>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Object& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Object& from) {
    Object::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Object* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.Object";
  }
  protected:
  explicit Object(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kAclFieldNumber = 10,
    kMetadataFieldNumber = 22,
    kNameFieldNumber = 1,
    kBucketFieldNumber = 2,
    kStorageClassFieldNumber = 5,
    kContentEncodingFieldNumber = 7,
    kContentDispositionFieldNumber = 8,
    kCacheControlFieldNumber = 9,
    kContentLanguageFieldNumber = 11,
    kContentTypeFieldNumber = 13,
    kKmsKeyFieldNumber = 18,
    kEtagFieldNumber = 27,
    kDeleteTimeFieldNumber = 12,
    kCreateTimeFieldNumber = 14,
    kChecksumsFieldNumber = 16,
    kUpdateTimeFieldNumber = 17,
    kUpdateStorageClassTimeFieldNumber = 19,
    kRetentionExpireTimeFieldNumber = 21,
    kOwnerFieldNumber = 24,
    kCustomerEncryptionFieldNumber = 25,
    kCustomTimeFieldNumber = 26,
    kGenerationFieldNumber = 3,
    kMetagenerationFieldNumber = 4,
    kSizeFieldNumber = 6,
    kComponentCountFieldNumber = 15,
    kTemporaryHoldFieldNumber = 20,
    kEventBasedHoldFieldNumber = 23,
  };
  // repeated .google.storage.v2.ObjectAccessControl acl = 10;
  int acl_size() const;
  private:
  int _internal_acl_size() const;
  public:
  void clear_acl();
  ::google::storage::v2::ObjectAccessControl* mutable_acl(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::storage::v2::ObjectAccessControl >*
      mutable_acl();
  private:
  const ::google::storage::v2::ObjectAccessControl& _internal_acl(int index) const;
  ::google::storage::v2::ObjectAccessControl* _internal_add_acl();
  public:
  const ::google::storage::v2::ObjectAccessControl& acl(int index) const;
  ::google::storage::v2::ObjectAccessControl* add_acl();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::storage::v2::ObjectAccessControl >&
      acl() const;

  // map<string, string> metadata = 22;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;
  public:
  void clear_metadata();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_metadata();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_metadata();

  // string name = 1 [(.google.api.field_behavior) = IMMUTABLE];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string bucket = 2 [(.google.api.field_behavior) = IMMUTABLE, (.google.api.resource_reference) = {
  void clear_bucket();
  const std::string& bucket() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bucket(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bucket();
  PROTOBUF_NODISCARD std::string* release_bucket();
  void set_allocated_bucket(std::string* bucket);
  private:
  const std::string& _internal_bucket() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bucket(const std::string& value);
  std::string* _internal_mutable_bucket();
  public:

  // string storage_class = 5;
  void clear_storage_class();
  const std::string& storage_class() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_storage_class(ArgT0&& arg0, ArgT... args);
  std::string* mutable_storage_class();
  PROTOBUF_NODISCARD std::string* release_storage_class();
  void set_allocated_storage_class(std::string* storage_class);
  private:
  const std::string& _internal_storage_class() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_storage_class(const std::string& value);
  std::string* _internal_mutable_storage_class();
  public:

  // string content_encoding = 7;
  void clear_content_encoding();
  const std::string& content_encoding() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content_encoding(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content_encoding();
  PROTOBUF_NODISCARD std::string* release_content_encoding();
  void set_allocated_content_encoding(std::string* content_encoding);
  private:
  const std::string& _internal_content_encoding() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content_encoding(const std::string& value);
  std::string* _internal_mutable_content_encoding();
  public:

  // string content_disposition = 8;
  void clear_content_disposition();
  const std::string& content_disposition() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content_disposition(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content_disposition();
  PROTOBUF_NODISCARD std::string* release_content_disposition();
  void set_allocated_content_disposition(std::string* content_disposition);
  private:
  const std::string& _internal_content_disposition() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content_disposition(const std::string& value);
  std::string* _internal_mutable_content_disposition();
  public:

  // string cache_control = 9;
  void clear_cache_control();
  const std::string& cache_control() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cache_control(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cache_control();
  PROTOBUF_NODISCARD std::string* release_cache_control();
  void set_allocated_cache_control(std::string* cache_control);
  private:
  const std::string& _internal_cache_control() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cache_control(const std::string& value);
  std::string* _internal_mutable_cache_control();
  public:

  // string content_language = 11;
  void clear_content_language();
  const std::string& content_language() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content_language(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content_language();
  PROTOBUF_NODISCARD std::string* release_content_language();
  void set_allocated_content_language(std::string* content_language);
  private:
  const std::string& _internal_content_language() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content_language(const std::string& value);
  std::string* _internal_mutable_content_language();
  public:

  // string content_type = 13;
  void clear_content_type();
  const std::string& content_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content_type();
  PROTOBUF_NODISCARD std::string* release_content_type();
  void set_allocated_content_type(std::string* content_type);
  private:
  const std::string& _internal_content_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content_type(const std::string& value);
  std::string* _internal_mutable_content_type();
  public:

  // string kms_key = 18 [(.google.api.resource_reference) = {
  void clear_kms_key();
  const std::string& kms_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_kms_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_kms_key();
  PROTOBUF_NODISCARD std::string* release_kms_key();
  void set_allocated_kms_key(std::string* kms_key);
  private:
  const std::string& _internal_kms_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_kms_key(const std::string& value);
  std::string* _internal_mutable_kms_key();
  public:

  // string etag = 27;
  void clear_etag();
  const std::string& etag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_etag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_etag();
  PROTOBUF_NODISCARD std::string* release_etag();
  void set_allocated_etag(std::string* etag);
  private:
  const std::string& _internal_etag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_etag(const std::string& value);
  std::string* _internal_mutable_etag();
  public:

  // .google.protobuf.Timestamp delete_time = 12 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_delete_time() const;
  private:
  bool _internal_has_delete_time() const;
  public:
  void clear_delete_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& delete_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_delete_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_delete_time();
  void set_allocated_delete_time(::PROTOBUF_NAMESPACE_ID::Timestamp* delete_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_delete_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_delete_time();
  public:
  void unsafe_arena_set_allocated_delete_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* delete_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_delete_time();

  // .google.protobuf.Timestamp create_time = 14 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_create_time() const;
  private:
  bool _internal_has_create_time() const;
  public:
  void clear_create_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& create_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_create_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_create_time();
  void set_allocated_create_time(::PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_create_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_create_time();
  public:
  void unsafe_arena_set_allocated_create_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_create_time();

  // .google.storage.v2.ObjectChecksums checksums = 16 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_checksums() const;
  private:
  bool _internal_has_checksums() const;
  public:
  void clear_checksums();
  const ::google::storage::v2::ObjectChecksums& checksums() const;
  PROTOBUF_NODISCARD ::google::storage::v2::ObjectChecksums* release_checksums();
  ::google::storage::v2::ObjectChecksums* mutable_checksums();
  void set_allocated_checksums(::google::storage::v2::ObjectChecksums* checksums);
  private:
  const ::google::storage::v2::ObjectChecksums& _internal_checksums() const;
  ::google::storage::v2::ObjectChecksums* _internal_mutable_checksums();
  public:
  void unsafe_arena_set_allocated_checksums(
      ::google::storage::v2::ObjectChecksums* checksums);
  ::google::storage::v2::ObjectChecksums* unsafe_arena_release_checksums();

  // .google.protobuf.Timestamp update_time = 17 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_update_time() const;
  private:
  bool _internal_has_update_time() const;
  public:
  void clear_update_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& update_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_update_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_update_time();
  void set_allocated_update_time(::PROTOBUF_NAMESPACE_ID::Timestamp* update_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_update_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_update_time();
  public:
  void unsafe_arena_set_allocated_update_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* update_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_update_time();

  // .google.protobuf.Timestamp update_storage_class_time = 19 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_update_storage_class_time() const;
  private:
  bool _internal_has_update_storage_class_time() const;
  public:
  void clear_update_storage_class_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& update_storage_class_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_update_storage_class_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_update_storage_class_time();
  void set_allocated_update_storage_class_time(::PROTOBUF_NAMESPACE_ID::Timestamp* update_storage_class_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_update_storage_class_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_update_storage_class_time();
  public:
  void unsafe_arena_set_allocated_update_storage_class_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* update_storage_class_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_update_storage_class_time();

  // .google.protobuf.Timestamp retention_expire_time = 21;
  bool has_retention_expire_time() const;
  private:
  bool _internal_has_retention_expire_time() const;
  public:
  void clear_retention_expire_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& retention_expire_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_retention_expire_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_retention_expire_time();
  void set_allocated_retention_expire_time(::PROTOBUF_NAMESPACE_ID::Timestamp* retention_expire_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_retention_expire_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_retention_expire_time();
  public:
  void unsafe_arena_set_allocated_retention_expire_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* retention_expire_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_retention_expire_time();

  // .google.storage.v2.Owner owner = 24 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_owner() const;
  private:
  bool _internal_has_owner() const;
  public:
  void clear_owner();
  const ::google::storage::v2::Owner& owner() const;
  PROTOBUF_NODISCARD ::google::storage::v2::Owner* release_owner();
  ::google::storage::v2::Owner* mutable_owner();
  void set_allocated_owner(::google::storage::v2::Owner* owner);
  private:
  const ::google::storage::v2::Owner& _internal_owner() const;
  ::google::storage::v2::Owner* _internal_mutable_owner();
  public:
  void unsafe_arena_set_allocated_owner(
      ::google::storage::v2::Owner* owner);
  ::google::storage::v2::Owner* unsafe_arena_release_owner();

  // .google.storage.v2.CustomerEncryption customer_encryption = 25;
  bool has_customer_encryption() const;
  private:
  bool _internal_has_customer_encryption() const;
  public:
  void clear_customer_encryption();
  const ::google::storage::v2::CustomerEncryption& customer_encryption() const;
  PROTOBUF_NODISCARD ::google::storage::v2::CustomerEncryption* release_customer_encryption();
  ::google::storage::v2::CustomerEncryption* mutable_customer_encryption();
  void set_allocated_customer_encryption(::google::storage::v2::CustomerEncryption* customer_encryption);
  private:
  const ::google::storage::v2::CustomerEncryption& _internal_customer_encryption() const;
  ::google::storage::v2::CustomerEncryption* _internal_mutable_customer_encryption();
  public:
  void unsafe_arena_set_allocated_customer_encryption(
      ::google::storage::v2::CustomerEncryption* customer_encryption);
  ::google::storage::v2::CustomerEncryption* unsafe_arena_release_customer_encryption();

  // .google.protobuf.Timestamp custom_time = 26;
  bool has_custom_time() const;
  private:
  bool _internal_has_custom_time() const;
  public:
  void clear_custom_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& custom_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_custom_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_custom_time();
  void set_allocated_custom_time(::PROTOBUF_NAMESPACE_ID::Timestamp* custom_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_custom_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_custom_time();
  public:
  void unsafe_arena_set_allocated_custom_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* custom_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_custom_time();

  // int64 generation = 3 [(.google.api.field_behavior) = IMMUTABLE];
  void clear_generation();
  int64_t generation() const;
  void set_generation(int64_t value);
  private:
  int64_t _internal_generation() const;
  void _internal_set_generation(int64_t value);
  public:

  // int64 metageneration = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_metageneration();
  int64_t metageneration() const;
  void set_metageneration(int64_t value);
  private:
  int64_t _internal_metageneration() const;
  void _internal_set_metageneration(int64_t value);
  public:

  // int64 size = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_size();
  int64_t size() const;
  void set_size(int64_t value);
  private:
  int64_t _internal_size() const;
  void _internal_set_size(int64_t value);
  public:

  // int32 component_count = 15 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_component_count();
  int32_t component_count() const;
  void set_component_count(int32_t value);
  private:
  int32_t _internal_component_count() const;
  void _internal_set_component_count(int32_t value);
  public:

  // bool temporary_hold = 20;
  void clear_temporary_hold();
  bool temporary_hold() const;
  void set_temporary_hold(bool value);
  private:
  bool _internal_temporary_hold() const;
  void _internal_set_temporary_hold(bool value);
  public:

  // optional bool event_based_hold = 23;
  bool has_event_based_hold() const;
  private:
  bool _internal_has_event_based_hold() const;
  public:
  void clear_event_based_hold();
  bool event_based_hold() const;
  void set_event_based_hold(bool value);
  private:
  bool _internal_event_based_hold() const;
  void _internal_set_event_based_hold(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.storage.v2.Object)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::storage::v2::ObjectAccessControl > acl_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        Object_MetadataEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> metadata_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bucket_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr storage_class_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_encoding_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_disposition_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cache_control_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_language_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kms_key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr etag_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* delete_time_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* create_time_;
    ::google::storage::v2::ObjectChecksums* checksums_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* update_time_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* update_storage_class_time_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* retention_expire_time_;
    ::google::storage::v2::Owner* owner_;
    ::google::storage::v2::CustomerEncryption* customer_encryption_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* custom_time_;
    int64_t generation_;
    int64_t metageneration_;
    int64_t size_;
    int32_t component_count_;
    bool temporary_hold_;
    bool event_based_hold_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class ObjectAccessControl final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.ObjectAccessControl) */ {
 public:
  inline ObjectAccessControl() : ObjectAccessControl(nullptr) {}
  ~ObjectAccessControl() override;
  explicit PROTOBUF_CONSTEXPR ObjectAccessControl(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectAccessControl(const ObjectAccessControl& from);
  ObjectAccessControl(ObjectAccessControl&& from) noexcept
    : ObjectAccessControl() {
    *this = ::std::move(from);
  }

  inline ObjectAccessControl& operator=(const ObjectAccessControl& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectAccessControl& operator=(ObjectAccessControl&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectAccessControl& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectAccessControl* internal_default_instance() {
    return reinterpret_cast<const ObjectAccessControl*>(
               &_ObjectAccessControl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(ObjectAccessControl& a, ObjectAccessControl& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectAccessControl* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectAccessControl* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObjectAccessControl* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObjectAccessControl>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ObjectAccessControl& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ObjectAccessControl& from) {
    ObjectAccessControl::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectAccessControl* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.ObjectAccessControl";
  }
  protected:
  explicit ObjectAccessControl(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleFieldNumber = 1,
    kIdFieldNumber = 2,
    kEntityFieldNumber = 3,
    kEntityIdFieldNumber = 4,
    kEmailFieldNumber = 5,
    kDomainFieldNumber = 6,
    kEtagFieldNumber = 8,
    kProjectTeamFieldNumber = 7,
  };
  // string role = 1;
  void clear_role();
  const std::string& role() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_role(ArgT0&& arg0, ArgT... args);
  std::string* mutable_role();
  PROTOBUF_NODISCARD std::string* release_role();
  void set_allocated_role(std::string* role);
  private:
  const std::string& _internal_role() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_role(const std::string& value);
  std::string* _internal_mutable_role();
  public:

  // string id = 2;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string entity = 3;
  void clear_entity();
  const std::string& entity() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_entity(ArgT0&& arg0, ArgT... args);
  std::string* mutable_entity();
  PROTOBUF_NODISCARD std::string* release_entity();
  void set_allocated_entity(std::string* entity);
  private:
  const std::string& _internal_entity() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_entity(const std::string& value);
  std::string* _internal_mutable_entity();
  public:

  // string entity_id = 4;
  void clear_entity_id();
  const std::string& entity_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_entity_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_entity_id();
  PROTOBUF_NODISCARD std::string* release_entity_id();
  void set_allocated_entity_id(std::string* entity_id);
  private:
  const std::string& _internal_entity_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_entity_id(const std::string& value);
  std::string* _internal_mutable_entity_id();
  public:

  // string email = 5;
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string domain = 6;
  void clear_domain();
  const std::string& domain() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_domain(ArgT0&& arg0, ArgT... args);
  std::string* mutable_domain();
  PROTOBUF_NODISCARD std::string* release_domain();
  void set_allocated_domain(std::string* domain);
  private:
  const std::string& _internal_domain() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_domain(const std::string& value);
  std::string* _internal_mutable_domain();
  public:

  // string etag = 8;
  void clear_etag();
  const std::string& etag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_etag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_etag();
  PROTOBUF_NODISCARD std::string* release_etag();
  void set_allocated_etag(std::string* etag);
  private:
  const std::string& _internal_etag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_etag(const std::string& value);
  std::string* _internal_mutable_etag();
  public:

  // .google.storage.v2.ProjectTeam project_team = 7;
  bool has_project_team() const;
  private:
  bool _internal_has_project_team() const;
  public:
  void clear_project_team();
  const ::google::storage::v2::ProjectTeam& project_team() const;
  PROTOBUF_NODISCARD ::google::storage::v2::ProjectTeam* release_project_team();
  ::google::storage::v2::ProjectTeam* mutable_project_team();
  void set_allocated_project_team(::google::storage::v2::ProjectTeam* project_team);
  private:
  const ::google::storage::v2::ProjectTeam& _internal_project_team() const;
  ::google::storage::v2::ProjectTeam* _internal_mutable_project_team();
  public:
  void unsafe_arena_set_allocated_project_team(
      ::google::storage::v2::ProjectTeam* project_team);
  ::google::storage::v2::ProjectTeam* unsafe_arena_release_project_team();

  // @@protoc_insertion_point(class_scope:google.storage.v2.ObjectAccessControl)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr role_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entity_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entity_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr domain_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr etag_;
    ::google::storage::v2::ProjectTeam* project_team_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class ListObjectsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.ListObjectsResponse) */ {
 public:
  inline ListObjectsResponse() : ListObjectsResponse(nullptr) {}
  ~ListObjectsResponse() override;
  explicit PROTOBUF_CONSTEXPR ListObjectsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListObjectsResponse(const ListObjectsResponse& from);
  ListObjectsResponse(ListObjectsResponse&& from) noexcept
    : ListObjectsResponse() {
    *this = ::std::move(from);
  }

  inline ListObjectsResponse& operator=(const ListObjectsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListObjectsResponse& operator=(ListObjectsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListObjectsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListObjectsResponse* internal_default_instance() {
    return reinterpret_cast<const ListObjectsResponse*>(
               &_ListObjectsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(ListObjectsResponse& a, ListObjectsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListObjectsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListObjectsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListObjectsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListObjectsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListObjectsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListObjectsResponse& from) {
    ListObjectsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListObjectsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.ListObjectsResponse";
  }
  protected:
  explicit ListObjectsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectsFieldNumber = 1,
    kPrefixesFieldNumber = 2,
    kNextPageTokenFieldNumber = 3,
  };
  // repeated .google.storage.v2.Object objects = 1;
  int objects_size() const;
  private:
  int _internal_objects_size() const;
  public:
  void clear_objects();
  ::google::storage::v2::Object* mutable_objects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::storage::v2::Object >*
      mutable_objects();
  private:
  const ::google::storage::v2::Object& _internal_objects(int index) const;
  ::google::storage::v2::Object* _internal_add_objects();
  public:
  const ::google::storage::v2::Object& objects(int index) const;
  ::google::storage::v2::Object* add_objects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::storage::v2::Object >&
      objects() const;

  // repeated string prefixes = 2;
  int prefixes_size() const;
  private:
  int _internal_prefixes_size() const;
  public:
  void clear_prefixes();
  const std::string& prefixes(int index) const;
  std::string* mutable_prefixes(int index);
  void set_prefixes(int index, const std::string& value);
  void set_prefixes(int index, std::string&& value);
  void set_prefixes(int index, const char* value);
  void set_prefixes(int index, const char* value, size_t size);
  std::string* add_prefixes();
  void add_prefixes(const std::string& value);
  void add_prefixes(std::string&& value);
  void add_prefixes(const char* value);
  void add_prefixes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& prefixes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_prefixes();
  private:
  const std::string& _internal_prefixes(int index) const;
  std::string* _internal_add_prefixes();
  public:

  // string next_page_token = 3;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:google.storage.v2.ListObjectsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::storage::v2::Object > objects_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> prefixes_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class ProjectTeam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.ProjectTeam) */ {
 public:
  inline ProjectTeam() : ProjectTeam(nullptr) {}
  ~ProjectTeam() override;
  explicit PROTOBUF_CONSTEXPR ProjectTeam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProjectTeam(const ProjectTeam& from);
  ProjectTeam(ProjectTeam&& from) noexcept
    : ProjectTeam() {
    *this = ::std::move(from);
  }

  inline ProjectTeam& operator=(const ProjectTeam& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProjectTeam& operator=(ProjectTeam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProjectTeam& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProjectTeam* internal_default_instance() {
    return reinterpret_cast<const ProjectTeam*>(
               &_ProjectTeam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(ProjectTeam& a, ProjectTeam& b) {
    a.Swap(&b);
  }
  inline void Swap(ProjectTeam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProjectTeam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProjectTeam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProjectTeam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProjectTeam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProjectTeam& from) {
    ProjectTeam::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProjectTeam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.ProjectTeam";
  }
  protected:
  explicit ProjectTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjectNumberFieldNumber = 1,
    kTeamFieldNumber = 2,
  };
  // string project_number = 1;
  void clear_project_number();
  const std::string& project_number() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_project_number(ArgT0&& arg0, ArgT... args);
  std::string* mutable_project_number();
  PROTOBUF_NODISCARD std::string* release_project_number();
  void set_allocated_project_number(std::string* project_number);
  private:
  const std::string& _internal_project_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_project_number(const std::string& value);
  std::string* _internal_mutable_project_number();
  public:

  // string team = 2;
  void clear_team();
  const std::string& team() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_team(ArgT0&& arg0, ArgT... args);
  std::string* mutable_team();
  PROTOBUF_NODISCARD std::string* release_team();
  void set_allocated_team(std::string* team);
  private:
  const std::string& _internal_team() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_team(const std::string& value);
  std::string* _internal_mutable_team();
  public:

  // @@protoc_insertion_point(class_scope:google.storage.v2.ProjectTeam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr project_number_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr team_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class ServiceAccount final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.ServiceAccount) */ {
 public:
  inline ServiceAccount() : ServiceAccount(nullptr) {}
  ~ServiceAccount() override;
  explicit PROTOBUF_CONSTEXPR ServiceAccount(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServiceAccount(const ServiceAccount& from);
  ServiceAccount(ServiceAccount&& from) noexcept
    : ServiceAccount() {
    *this = ::std::move(from);
  }

  inline ServiceAccount& operator=(const ServiceAccount& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceAccount& operator=(ServiceAccount&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServiceAccount& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServiceAccount* internal_default_instance() {
    return reinterpret_cast<const ServiceAccount*>(
               &_ServiceAccount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(ServiceAccount& a, ServiceAccount& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceAccount* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServiceAccount* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServiceAccount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServiceAccount>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServiceAccount& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ServiceAccount& from) {
    ServiceAccount::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceAccount* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.ServiceAccount";
  }
  protected:
  explicit ServiceAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailAddressFieldNumber = 1,
  };
  // string email_address = 1;
  void clear_email_address();
  const std::string& email_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email_address();
  PROTOBUF_NODISCARD std::string* release_email_address();
  void set_allocated_email_address(std::string* email_address);
  private:
  const std::string& _internal_email_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email_address(const std::string& value);
  std::string* _internal_mutable_email_address();
  public:

  // @@protoc_insertion_point(class_scope:google.storage.v2.ServiceAccount)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_address_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class Owner final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.Owner) */ {
 public:
  inline Owner() : Owner(nullptr) {}
  ~Owner() override;
  explicit PROTOBUF_CONSTEXPR Owner(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Owner(const Owner& from);
  Owner(Owner&& from) noexcept
    : Owner() {
    *this = ::std::move(from);
  }

  inline Owner& operator=(const Owner& from) {
    CopyFrom(from);
    return *this;
  }
  inline Owner& operator=(Owner&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Owner& default_instance() {
    return *internal_default_instance();
  }
  static inline const Owner* internal_default_instance() {
    return reinterpret_cast<const Owner*>(
               &_Owner_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(Owner& a, Owner& b) {
    a.Swap(&b);
  }
  inline void Swap(Owner* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Owner* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Owner* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Owner>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Owner& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Owner& from) {
    Owner::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Owner* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.Owner";
  }
  protected:
  explicit Owner(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityFieldNumber = 1,
    kEntityIdFieldNumber = 2,
  };
  // string entity = 1;
  void clear_entity();
  const std::string& entity() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_entity(ArgT0&& arg0, ArgT... args);
  std::string* mutable_entity();
  PROTOBUF_NODISCARD std::string* release_entity();
  void set_allocated_entity(std::string* entity);
  private:
  const std::string& _internal_entity() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_entity(const std::string& value);
  std::string* _internal_mutable_entity();
  public:

  // string entity_id = 2;
  void clear_entity_id();
  const std::string& entity_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_entity_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_entity_id();
  PROTOBUF_NODISCARD std::string* release_entity_id();
  void set_allocated_entity_id(std::string* entity_id);
  private:
  const std::string& _internal_entity_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_entity_id(const std::string& value);
  std::string* _internal_mutable_entity_id();
  public:

  // @@protoc_insertion_point(class_scope:google.storage.v2.Owner)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entity_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entity_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class ContentRange final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.ContentRange) */ {
 public:
  inline ContentRange() : ContentRange(nullptr) {}
  ~ContentRange() override;
  explicit PROTOBUF_CONSTEXPR ContentRange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ContentRange(const ContentRange& from);
  ContentRange(ContentRange&& from) noexcept
    : ContentRange() {
    *this = ::std::move(from);
  }

  inline ContentRange& operator=(const ContentRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContentRange& operator=(ContentRange&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ContentRange& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContentRange* internal_default_instance() {
    return reinterpret_cast<const ContentRange*>(
               &_ContentRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(ContentRange& a, ContentRange& b) {
    a.Swap(&b);
  }
  inline void Swap(ContentRange* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContentRange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ContentRange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ContentRange>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ContentRange& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ContentRange& from) {
    ContentRange::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContentRange* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.ContentRange";
  }
  protected:
  explicit ContentRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartFieldNumber = 1,
    kEndFieldNumber = 2,
    kCompleteLengthFieldNumber = 3,
  };
  // int64 start = 1;
  void clear_start();
  int64_t start() const;
  void set_start(int64_t value);
  private:
  int64_t _internal_start() const;
  void _internal_set_start(int64_t value);
  public:

  // int64 end = 2;
  void clear_end();
  int64_t end() const;
  void set_end(int64_t value);
  private:
  int64_t _internal_end() const;
  void _internal_set_end(int64_t value);
  public:

  // int64 complete_length = 3;
  void clear_complete_length();
  int64_t complete_length() const;
  void set_complete_length(int64_t value);
  private:
  int64_t _internal_complete_length() const;
  void _internal_set_complete_length(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.storage.v2.ContentRange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t start_;
    int64_t end_;
    int64_t complete_length_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DeleteBucketRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteBucketRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DeleteBucketRequest::name() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.DeleteBucketRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteBucketRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.DeleteBucketRequest.name)
}
inline std::string* DeleteBucketRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.DeleteBucketRequest.name)
  return _s;
}
inline const std::string& DeleteBucketRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DeleteBucketRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteBucketRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteBucketRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.storage.v2.DeleteBucketRequest.name)
  return _impl_.name_.Release();
}
inline void DeleteBucketRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.DeleteBucketRequest.name)
}

// optional int64 if_metageneration_match = 2;
inline bool DeleteBucketRequest::_internal_has_if_metageneration_match() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DeleteBucketRequest::has_if_metageneration_match() const {
  return _internal_has_if_metageneration_match();
}
inline void DeleteBucketRequest::clear_if_metageneration_match() {
  _impl_.if_metageneration_match_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int64_t DeleteBucketRequest::_internal_if_metageneration_match() const {
  return _impl_.if_metageneration_match_;
}
inline int64_t DeleteBucketRequest::if_metageneration_match() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.DeleteBucketRequest.if_metageneration_match)
  return _internal_if_metageneration_match();
}
inline void DeleteBucketRequest::_internal_set_if_metageneration_match(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.if_metageneration_match_ = value;
}
inline void DeleteBucketRequest::set_if_metageneration_match(int64_t value) {
  _internal_set_if_metageneration_match(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.DeleteBucketRequest.if_metageneration_match)
}

// optional int64 if_metageneration_not_match = 3;
inline bool DeleteBucketRequest::_internal_has_if_metageneration_not_match() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DeleteBucketRequest::has_if_metageneration_not_match() const {
  return _internal_has_if_metageneration_not_match();
}
inline void DeleteBucketRequest::clear_if_metageneration_not_match() {
  _impl_.if_metageneration_not_match_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int64_t DeleteBucketRequest::_internal_if_metageneration_not_match() const {
  return _impl_.if_metageneration_not_match_;
}
inline int64_t DeleteBucketRequest::if_metageneration_not_match() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.DeleteBucketRequest.if_metageneration_not_match)
  return _internal_if_metageneration_not_match();
}
inline void DeleteBucketRequest::_internal_set_if_metageneration_not_match(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.if_metageneration_not_match_ = value;
}
inline void DeleteBucketRequest::set_if_metageneration_not_match(int64_t value) {
  _internal_set_if_metageneration_not_match(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.DeleteBucketRequest.if_metageneration_not_match)
}

// -------------------------------------------------------------------

// GetBucketRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetBucketRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GetBucketRequest::name() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.GetBucketRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetBucketRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.GetBucketRequest.name)
}
inline std::string* GetBucketRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.GetBucketRequest.name)
  return _s;
}
inline const std::string& GetBucketRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GetBucketRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetBucketRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetBucketRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.storage.v2.GetBucketRequest.name)
  return _impl_.name_.Release();
}
inline void GetBucketRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.GetBucketRequest.name)
}

// optional int64 if_metageneration_match = 2;
inline bool GetBucketRequest::_internal_has_if_metageneration_match() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GetBucketRequest::has_if_metageneration_match() const {
  return _internal_has_if_metageneration_match();
}
inline void GetBucketRequest::clear_if_metageneration_match() {
  _impl_.if_metageneration_match_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int64_t GetBucketRequest::_internal_if_metageneration_match() const {
  return _impl_.if_metageneration_match_;
}
inline int64_t GetBucketRequest::if_metageneration_match() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.GetBucketRequest.if_metageneration_match)
  return _internal_if_metageneration_match();
}
inline void GetBucketRequest::_internal_set_if_metageneration_match(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.if_metageneration_match_ = value;
}
inline void GetBucketRequest::set_if_metageneration_match(int64_t value) {
  _internal_set_if_metageneration_match(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.GetBucketRequest.if_metageneration_match)
}

// optional int64 if_metageneration_not_match = 3;
inline bool GetBucketRequest::_internal_has_if_metageneration_not_match() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GetBucketRequest::has_if_metageneration_not_match() const {
  return _internal_has_if_metageneration_not_match();
}
inline void GetBucketRequest::clear_if_metageneration_not_match() {
  _impl_.if_metageneration_not_match_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int64_t GetBucketRequest::_internal_if_metageneration_not_match() const {
  return _impl_.if_metageneration_not_match_;
}
inline int64_t GetBucketRequest::if_metageneration_not_match() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.GetBucketRequest.if_metageneration_not_match)
  return _internal_if_metageneration_not_match();
}
inline void GetBucketRequest::_internal_set_if_metageneration_not_match(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.if_metageneration_not_match_ = value;
}
inline void GetBucketRequest::set_if_metageneration_not_match(int64_t value) {
  _internal_set_if_metageneration_not_match(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.GetBucketRequest.if_metageneration_not_match)
}

// optional .google.protobuf.FieldMask read_mask = 5;
inline bool GetBucketRequest::_internal_has_read_mask() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.read_mask_ != nullptr);
  return value;
}
inline bool GetBucketRequest::has_read_mask() const {
  return _internal_has_read_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& GetBucketRequest::_internal_read_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = _impl_.read_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& GetBucketRequest::read_mask() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.GetBucketRequest.read_mask)
  return _internal_read_mask();
}
inline void GetBucketRequest::unsafe_arena_set_allocated_read_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* read_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.read_mask_);
  }
  _impl_.read_mask_ = read_mask;
  if (read_mask) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.GetBucketRequest.read_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* GetBucketRequest::release_read_mask() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.read_mask_;
  _impl_.read_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* GetBucketRequest::unsafe_arena_release_read_mask() {
  // @@protoc_insertion_point(field_release:google.storage.v2.GetBucketRequest.read_mask)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.read_mask_;
  _impl_.read_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* GetBucketRequest::_internal_mutable_read_mask() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.read_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    _impl_.read_mask_ = p;
  }
  return _impl_.read_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* GetBucketRequest::mutable_read_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_read_mask();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.GetBucketRequest.read_mask)
  return _msg;
}
inline void GetBucketRequest::set_allocated_read_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* read_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.read_mask_);
  }
  if (read_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(read_mask));
    if (message_arena != submessage_arena) {
      read_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, read_mask, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.read_mask_ = read_mask;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.GetBucketRequest.read_mask)
}

// -------------------------------------------------------------------

// CreateBucketRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreateBucketRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& CreateBucketRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.CreateBucketRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateBucketRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.CreateBucketRequest.parent)
}
inline std::string* CreateBucketRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.CreateBucketRequest.parent)
  return _s;
}
inline const std::string& CreateBucketRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void CreateBucketRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateBucketRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateBucketRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.storage.v2.CreateBucketRequest.parent)
  return _impl_.parent_.Release();
}
inline void CreateBucketRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.CreateBucketRequest.parent)
}

// .google.storage.v2.Bucket bucket = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateBucketRequest::_internal_has_bucket() const {
  return this != internal_default_instance() && _impl_.bucket_ != nullptr;
}
inline bool CreateBucketRequest::has_bucket() const {
  return _internal_has_bucket();
}
inline void CreateBucketRequest::clear_bucket() {
  if (GetArenaForAllocation() == nullptr && _impl_.bucket_ != nullptr) {
    delete _impl_.bucket_;
  }
  _impl_.bucket_ = nullptr;
}
inline const ::google::storage::v2::Bucket& CreateBucketRequest::_internal_bucket() const {
  const ::google::storage::v2::Bucket* p = _impl_.bucket_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::storage::v2::Bucket&>(
      ::google::storage::v2::_Bucket_default_instance_);
}
inline const ::google::storage::v2::Bucket& CreateBucketRequest::bucket() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.CreateBucketRequest.bucket)
  return _internal_bucket();
}
inline void CreateBucketRequest::unsafe_arena_set_allocated_bucket(
    ::google::storage::v2::Bucket* bucket) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bucket_);
  }
  _impl_.bucket_ = bucket;
  if (bucket) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.CreateBucketRequest.bucket)
}
inline ::google::storage::v2::Bucket* CreateBucketRequest::release_bucket() {
  
  ::google::storage::v2::Bucket* temp = _impl_.bucket_;
  _impl_.bucket_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::storage::v2::Bucket* CreateBucketRequest::unsafe_arena_release_bucket() {
  // @@protoc_insertion_point(field_release:google.storage.v2.CreateBucketRequest.bucket)
  
  ::google::storage::v2::Bucket* temp = _impl_.bucket_;
  _impl_.bucket_ = nullptr;
  return temp;
}
inline ::google::storage::v2::Bucket* CreateBucketRequest::_internal_mutable_bucket() {
  
  if (_impl_.bucket_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::storage::v2::Bucket>(GetArenaForAllocation());
    _impl_.bucket_ = p;
  }
  return _impl_.bucket_;
}
inline ::google::storage::v2::Bucket* CreateBucketRequest::mutable_bucket() {
  ::google::storage::v2::Bucket* _msg = _internal_mutable_bucket();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.CreateBucketRequest.bucket)
  return _msg;
}
inline void CreateBucketRequest::set_allocated_bucket(::google::storage::v2::Bucket* bucket) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.bucket_;
  }
  if (bucket) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bucket);
    if (message_arena != submessage_arena) {
      bucket = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bucket, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.bucket_ = bucket;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.CreateBucketRequest.bucket)
}

// string bucket_id = 3 [(.google.api.field_behavior) = REQUIRED];
inline void CreateBucketRequest::clear_bucket_id() {
  _impl_.bucket_id_.ClearToEmpty();
}
inline const std::string& CreateBucketRequest::bucket_id() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.CreateBucketRequest.bucket_id)
  return _internal_bucket_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateBucketRequest::set_bucket_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.bucket_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.CreateBucketRequest.bucket_id)
}
inline std::string* CreateBucketRequest::mutable_bucket_id() {
  std::string* _s = _internal_mutable_bucket_id();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.CreateBucketRequest.bucket_id)
  return _s;
}
inline const std::string& CreateBucketRequest::_internal_bucket_id() const {
  return _impl_.bucket_id_.Get();
}
inline void CreateBucketRequest::_internal_set_bucket_id(const std::string& value) {
  
  _impl_.bucket_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateBucketRequest::_internal_mutable_bucket_id() {
  
  return _impl_.bucket_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateBucketRequest::release_bucket_id() {
  // @@protoc_insertion_point(field_release:google.storage.v2.CreateBucketRequest.bucket_id)
  return _impl_.bucket_id_.Release();
}
inline void CreateBucketRequest::set_allocated_bucket_id(std::string* bucket_id) {
  if (bucket_id != nullptr) {
    
  } else {
    
  }
  _impl_.bucket_id_.SetAllocated(bucket_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bucket_id_.IsDefault()) {
    _impl_.bucket_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.CreateBucketRequest.bucket_id)
}

// string predefined_acl = 6;
inline void CreateBucketRequest::clear_predefined_acl() {
  _impl_.predefined_acl_.ClearToEmpty();
}
inline const std::string& CreateBucketRequest::predefined_acl() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.CreateBucketRequest.predefined_acl)
  return _internal_predefined_acl();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateBucketRequest::set_predefined_acl(ArgT0&& arg0, ArgT... args) {
 
 _impl_.predefined_acl_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.CreateBucketRequest.predefined_acl)
}
inline std::string* CreateBucketRequest::mutable_predefined_acl() {
  std::string* _s = _internal_mutable_predefined_acl();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.CreateBucketRequest.predefined_acl)
  return _s;
}
inline const std::string& CreateBucketRequest::_internal_predefined_acl() const {
  return _impl_.predefined_acl_.Get();
}
inline void CreateBucketRequest::_internal_set_predefined_acl(const std::string& value) {
  
  _impl_.predefined_acl_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateBucketRequest::_internal_mutable_predefined_acl() {
  
  return _impl_.predefined_acl_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateBucketRequest::release_predefined_acl() {
  // @@protoc_insertion_point(field_release:google.storage.v2.CreateBucketRequest.predefined_acl)
  return _impl_.predefined_acl_.Release();
}
inline void CreateBucketRequest::set_allocated_predefined_acl(std::string* predefined_acl) {
  if (predefined_acl != nullptr) {
    
  } else {
    
  }
  _impl_.predefined_acl_.SetAllocated(predefined_acl, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.predefined_acl_.IsDefault()) {
    _impl_.predefined_acl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.CreateBucketRequest.predefined_acl)
}

// string predefined_default_object_acl = 7;
inline void CreateBucketRequest::clear_predefined_default_object_acl() {
  _impl_.predefined_default_object_acl_.ClearToEmpty();
}
inline const std::string& CreateBucketRequest::predefined_default_object_acl() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.CreateBucketRequest.predefined_default_object_acl)
  return _internal_predefined_default_object_acl();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateBucketRequest::set_predefined_default_object_acl(ArgT0&& arg0, ArgT... args) {
 
 _impl_.predefined_default_object_acl_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.CreateBucketRequest.predefined_default_object_acl)
}
inline std::string* CreateBucketRequest::mutable_predefined_default_object_acl() {
  std::string* _s = _internal_mutable_predefined_default_object_acl();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.CreateBucketRequest.predefined_default_object_acl)
  return _s;
}
inline const std::string& CreateBucketRequest::_internal_predefined_default_object_acl() const {
  return _impl_.predefined_default_object_acl_.Get();
}
inline void CreateBucketRequest::_internal_set_predefined_default_object_acl(const std::string& value) {
  
  _impl_.predefined_default_object_acl_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateBucketRequest::_internal_mutable_predefined_default_object_acl() {
  
  return _impl_.predefined_default_object_acl_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateBucketRequest::release_predefined_default_object_acl() {
  // @@protoc_insertion_point(field_release:google.storage.v2.CreateBucketRequest.predefined_default_object_acl)
  return _impl_.predefined_default_object_acl_.Release();
}
inline void CreateBucketRequest::set_allocated_predefined_default_object_acl(std::string* predefined_default_object_acl) {
  if (predefined_default_object_acl != nullptr) {
    
  } else {
    
  }
  _impl_.predefined_default_object_acl_.SetAllocated(predefined_default_object_acl, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.predefined_default_object_acl_.IsDefault()) {
    _impl_.predefined_default_object_acl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.CreateBucketRequest.predefined_default_object_acl)
}

// -------------------------------------------------------------------

// ListBucketsRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListBucketsRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& ListBucketsRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ListBucketsRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListBucketsRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.ListBucketsRequest.parent)
}
inline std::string* ListBucketsRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.ListBucketsRequest.parent)
  return _s;
}
inline const std::string& ListBucketsRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void ListBucketsRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* ListBucketsRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* ListBucketsRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.storage.v2.ListBucketsRequest.parent)
  return _impl_.parent_.Release();
}
inline void ListBucketsRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.ListBucketsRequest.parent)
}

// int32 page_size = 2;
inline void ListBucketsRequest::clear_page_size() {
  _impl_.page_size_ = 0;
}
inline int32_t ListBucketsRequest::_internal_page_size() const {
  return _impl_.page_size_;
}
inline int32_t ListBucketsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ListBucketsRequest.page_size)
  return _internal_page_size();
}
inline void ListBucketsRequest::_internal_set_page_size(int32_t value) {
  
  _impl_.page_size_ = value;
}
inline void ListBucketsRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.ListBucketsRequest.page_size)
}

// string page_token = 3;
inline void ListBucketsRequest::clear_page_token() {
  _impl_.page_token_.ClearToEmpty();
}
inline const std::string& ListBucketsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ListBucketsRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListBucketsRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.ListBucketsRequest.page_token)
}
inline std::string* ListBucketsRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.ListBucketsRequest.page_token)
  return _s;
}
inline const std::string& ListBucketsRequest::_internal_page_token() const {
  return _impl_.page_token_.Get();
}
inline void ListBucketsRequest::_internal_set_page_token(const std::string& value) {
  
  _impl_.page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListBucketsRequest::_internal_mutable_page_token() {
  
  return _impl_.page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListBucketsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.storage.v2.ListBucketsRequest.page_token)
  return _impl_.page_token_.Release();
}
inline void ListBucketsRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  _impl_.page_token_.SetAllocated(page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.page_token_.IsDefault()) {
    _impl_.page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.ListBucketsRequest.page_token)
}

// string prefix = 4;
inline void ListBucketsRequest::clear_prefix() {
  _impl_.prefix_.ClearToEmpty();
}
inline const std::string& ListBucketsRequest::prefix() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ListBucketsRequest.prefix)
  return _internal_prefix();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListBucketsRequest::set_prefix(ArgT0&& arg0, ArgT... args) {
 
 _impl_.prefix_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.ListBucketsRequest.prefix)
}
inline std::string* ListBucketsRequest::mutable_prefix() {
  std::string* _s = _internal_mutable_prefix();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.ListBucketsRequest.prefix)
  return _s;
}
inline const std::string& ListBucketsRequest::_internal_prefix() const {
  return _impl_.prefix_.Get();
}
inline void ListBucketsRequest::_internal_set_prefix(const std::string& value) {
  
  _impl_.prefix_.Set(value, GetArenaForAllocation());
}
inline std::string* ListBucketsRequest::_internal_mutable_prefix() {
  
  return _impl_.prefix_.Mutable(GetArenaForAllocation());
}
inline std::string* ListBucketsRequest::release_prefix() {
  // @@protoc_insertion_point(field_release:google.storage.v2.ListBucketsRequest.prefix)
  return _impl_.prefix_.Release();
}
inline void ListBucketsRequest::set_allocated_prefix(std::string* prefix) {
  if (prefix != nullptr) {
    
  } else {
    
  }
  _impl_.prefix_.SetAllocated(prefix, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.prefix_.IsDefault()) {
    _impl_.prefix_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.ListBucketsRequest.prefix)
}

// optional .google.protobuf.FieldMask read_mask = 5;
inline bool ListBucketsRequest::_internal_has_read_mask() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.read_mask_ != nullptr);
  return value;
}
inline bool ListBucketsRequest::has_read_mask() const {
  return _internal_has_read_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& ListBucketsRequest::_internal_read_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = _impl_.read_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& ListBucketsRequest::read_mask() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ListBucketsRequest.read_mask)
  return _internal_read_mask();
}
inline void ListBucketsRequest::unsafe_arena_set_allocated_read_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* read_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.read_mask_);
  }
  _impl_.read_mask_ = read_mask;
  if (read_mask) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.ListBucketsRequest.read_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* ListBucketsRequest::release_read_mask() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.read_mask_;
  _impl_.read_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* ListBucketsRequest::unsafe_arena_release_read_mask() {
  // @@protoc_insertion_point(field_release:google.storage.v2.ListBucketsRequest.read_mask)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.read_mask_;
  _impl_.read_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* ListBucketsRequest::_internal_mutable_read_mask() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.read_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    _impl_.read_mask_ = p;
  }
  return _impl_.read_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* ListBucketsRequest::mutable_read_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_read_mask();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.ListBucketsRequest.read_mask)
  return _msg;
}
inline void ListBucketsRequest::set_allocated_read_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* read_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.read_mask_);
  }
  if (read_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(read_mask));
    if (message_arena != submessage_arena) {
      read_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, read_mask, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.read_mask_ = read_mask;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.ListBucketsRequest.read_mask)
}

// -------------------------------------------------------------------

// ListBucketsResponse

// repeated .google.storage.v2.Bucket buckets = 1;
inline int ListBucketsResponse::_internal_buckets_size() const {
  return _impl_.buckets_.size();
}
inline int ListBucketsResponse::buckets_size() const {
  return _internal_buckets_size();
}
inline void ListBucketsResponse::clear_buckets() {
  _impl_.buckets_.Clear();
}
inline ::google::storage::v2::Bucket* ListBucketsResponse::mutable_buckets(int index) {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.ListBucketsResponse.buckets)
  return _impl_.buckets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::storage::v2::Bucket >*
ListBucketsResponse::mutable_buckets() {
  // @@protoc_insertion_point(field_mutable_list:google.storage.v2.ListBucketsResponse.buckets)
  return &_impl_.buckets_;
}
inline const ::google::storage::v2::Bucket& ListBucketsResponse::_internal_buckets(int index) const {
  return _impl_.buckets_.Get(index);
}
inline const ::google::storage::v2::Bucket& ListBucketsResponse::buckets(int index) const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ListBucketsResponse.buckets)
  return _internal_buckets(index);
}
inline ::google::storage::v2::Bucket* ListBucketsResponse::_internal_add_buckets() {
  return _impl_.buckets_.Add();
}
inline ::google::storage::v2::Bucket* ListBucketsResponse::add_buckets() {
  ::google::storage::v2::Bucket* _add = _internal_add_buckets();
  // @@protoc_insertion_point(field_add:google.storage.v2.ListBucketsResponse.buckets)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::storage::v2::Bucket >&
ListBucketsResponse::buckets() const {
  // @@protoc_insertion_point(field_list:google.storage.v2.ListBucketsResponse.buckets)
  return _impl_.buckets_;
}

// string next_page_token = 2;
inline void ListBucketsResponse::clear_next_page_token() {
  _impl_.next_page_token_.ClearToEmpty();
}
inline const std::string& ListBucketsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ListBucketsResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListBucketsResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.next_page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.ListBucketsResponse.next_page_token)
}
inline std::string* ListBucketsResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.ListBucketsResponse.next_page_token)
  return _s;
}
inline const std::string& ListBucketsResponse::_internal_next_page_token() const {
  return _impl_.next_page_token_.Get();
}
inline void ListBucketsResponse::_internal_set_next_page_token(const std::string& value) {
  
  _impl_.next_page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListBucketsResponse::_internal_mutable_next_page_token() {
  
  return _impl_.next_page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListBucketsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.storage.v2.ListBucketsResponse.next_page_token)
  return _impl_.next_page_token_.Release();
}
inline void ListBucketsResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  _impl_.next_page_token_.SetAllocated(next_page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.next_page_token_.IsDefault()) {
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.ListBucketsResponse.next_page_token)
}

// -------------------------------------------------------------------

// LockBucketRetentionPolicyRequest

// string bucket = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void LockBucketRetentionPolicyRequest::clear_bucket() {
  _impl_.bucket_.ClearToEmpty();
}
inline const std::string& LockBucketRetentionPolicyRequest::bucket() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.LockBucketRetentionPolicyRequest.bucket)
  return _internal_bucket();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LockBucketRetentionPolicyRequest::set_bucket(ArgT0&& arg0, ArgT... args) {
 
 _impl_.bucket_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.LockBucketRetentionPolicyRequest.bucket)
}
inline std::string* LockBucketRetentionPolicyRequest::mutable_bucket() {
  std::string* _s = _internal_mutable_bucket();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.LockBucketRetentionPolicyRequest.bucket)
  return _s;
}
inline const std::string& LockBucketRetentionPolicyRequest::_internal_bucket() const {
  return _impl_.bucket_.Get();
}
inline void LockBucketRetentionPolicyRequest::_internal_set_bucket(const std::string& value) {
  
  _impl_.bucket_.Set(value, GetArenaForAllocation());
}
inline std::string* LockBucketRetentionPolicyRequest::_internal_mutable_bucket() {
  
  return _impl_.bucket_.Mutable(GetArenaForAllocation());
}
inline std::string* LockBucketRetentionPolicyRequest::release_bucket() {
  // @@protoc_insertion_point(field_release:google.storage.v2.LockBucketRetentionPolicyRequest.bucket)
  return _impl_.bucket_.Release();
}
inline void LockBucketRetentionPolicyRequest::set_allocated_bucket(std::string* bucket) {
  if (bucket != nullptr) {
    
  } else {
    
  }
  _impl_.bucket_.SetAllocated(bucket, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bucket_.IsDefault()) {
    _impl_.bucket_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.LockBucketRetentionPolicyRequest.bucket)
}

// int64 if_metageneration_match = 2;
inline void LockBucketRetentionPolicyRequest::clear_if_metageneration_match() {
  _impl_.if_metageneration_match_ = int64_t{0};
}
inline int64_t LockBucketRetentionPolicyRequest::_internal_if_metageneration_match() const {
  return _impl_.if_metageneration_match_;
}
inline int64_t LockBucketRetentionPolicyRequest::if_metageneration_match() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.LockBucketRetentionPolicyRequest.if_metageneration_match)
  return _internal_if_metageneration_match();
}
inline void LockBucketRetentionPolicyRequest::_internal_set_if_metageneration_match(int64_t value) {
  
  _impl_.if_metageneration_match_ = value;
}
inline void LockBucketRetentionPolicyRequest::set_if_metageneration_match(int64_t value) {
  _internal_set_if_metageneration_match(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.LockBucketRetentionPolicyRequest.if_metageneration_match)
}

// -------------------------------------------------------------------

// UpdateBucketRequest

// .google.storage.v2.Bucket bucket = 1;
inline bool UpdateBucketRequest::_internal_has_bucket() const {
  return this != internal_default_instance() && _impl_.bucket_ != nullptr;
}
inline bool UpdateBucketRequest::has_bucket() const {
  return _internal_has_bucket();
}
inline void UpdateBucketRequest::clear_bucket() {
  if (GetArenaForAllocation() == nullptr && _impl_.bucket_ != nullptr) {
    delete _impl_.bucket_;
  }
  _impl_.bucket_ = nullptr;
}
inline const ::google::storage::v2::Bucket& UpdateBucketRequest::_internal_bucket() const {
  const ::google::storage::v2::Bucket* p = _impl_.bucket_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::storage::v2::Bucket&>(
      ::google::storage::v2::_Bucket_default_instance_);
}
inline const ::google::storage::v2::Bucket& UpdateBucketRequest::bucket() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.UpdateBucketRequest.bucket)
  return _internal_bucket();
}
inline void UpdateBucketRequest::unsafe_arena_set_allocated_bucket(
    ::google::storage::v2::Bucket* bucket) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bucket_);
  }
  _impl_.bucket_ = bucket;
  if (bucket) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.UpdateBucketRequest.bucket)
}
inline ::google::storage::v2::Bucket* UpdateBucketRequest::release_bucket() {
  
  ::google::storage::v2::Bucket* temp = _impl_.bucket_;
  _impl_.bucket_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::storage::v2::Bucket* UpdateBucketRequest::unsafe_arena_release_bucket() {
  // @@protoc_insertion_point(field_release:google.storage.v2.UpdateBucketRequest.bucket)
  
  ::google::storage::v2::Bucket* temp = _impl_.bucket_;
  _impl_.bucket_ = nullptr;
  return temp;
}
inline ::google::storage::v2::Bucket* UpdateBucketRequest::_internal_mutable_bucket() {
  
  if (_impl_.bucket_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::storage::v2::Bucket>(GetArenaForAllocation());
    _impl_.bucket_ = p;
  }
  return _impl_.bucket_;
}
inline ::google::storage::v2::Bucket* UpdateBucketRequest::mutable_bucket() {
  ::google::storage::v2::Bucket* _msg = _internal_mutable_bucket();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.UpdateBucketRequest.bucket)
  return _msg;
}
inline void UpdateBucketRequest::set_allocated_bucket(::google::storage::v2::Bucket* bucket) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.bucket_;
  }
  if (bucket) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bucket);
    if (message_arena != submessage_arena) {
      bucket = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bucket, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.bucket_ = bucket;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.UpdateBucketRequest.bucket)
}

// optional int64 if_metageneration_match = 2;
inline bool UpdateBucketRequest::_internal_has_if_metageneration_match() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UpdateBucketRequest::has_if_metageneration_match() const {
  return _internal_has_if_metageneration_match();
}
inline void UpdateBucketRequest::clear_if_metageneration_match() {
  _impl_.if_metageneration_match_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int64_t UpdateBucketRequest::_internal_if_metageneration_match() const {
  return _impl_.if_metageneration_match_;
}
inline int64_t UpdateBucketRequest::if_metageneration_match() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.UpdateBucketRequest.if_metageneration_match)
  return _internal_if_metageneration_match();
}
inline void UpdateBucketRequest::_internal_set_if_metageneration_match(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.if_metageneration_match_ = value;
}
inline void UpdateBucketRequest::set_if_metageneration_match(int64_t value) {
  _internal_set_if_metageneration_match(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.UpdateBucketRequest.if_metageneration_match)
}

// optional int64 if_metageneration_not_match = 3;
inline bool UpdateBucketRequest::_internal_has_if_metageneration_not_match() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UpdateBucketRequest::has_if_metageneration_not_match() const {
  return _internal_has_if_metageneration_not_match();
}
inline void UpdateBucketRequest::clear_if_metageneration_not_match() {
  _impl_.if_metageneration_not_match_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int64_t UpdateBucketRequest::_internal_if_metageneration_not_match() const {
  return _impl_.if_metageneration_not_match_;
}
inline int64_t UpdateBucketRequest::if_metageneration_not_match() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.UpdateBucketRequest.if_metageneration_not_match)
  return _internal_if_metageneration_not_match();
}
inline void UpdateBucketRequest::_internal_set_if_metageneration_not_match(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.if_metageneration_not_match_ = value;
}
inline void UpdateBucketRequest::set_if_metageneration_not_match(int64_t value) {
  _internal_set_if_metageneration_not_match(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.UpdateBucketRequest.if_metageneration_not_match)
}

// string predefined_acl = 8;
inline void UpdateBucketRequest::clear_predefined_acl() {
  _impl_.predefined_acl_.ClearToEmpty();
}
inline const std::string& UpdateBucketRequest::predefined_acl() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.UpdateBucketRequest.predefined_acl)
  return _internal_predefined_acl();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateBucketRequest::set_predefined_acl(ArgT0&& arg0, ArgT... args) {
 
 _impl_.predefined_acl_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.UpdateBucketRequest.predefined_acl)
}
inline std::string* UpdateBucketRequest::mutable_predefined_acl() {
  std::string* _s = _internal_mutable_predefined_acl();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.UpdateBucketRequest.predefined_acl)
  return _s;
}
inline const std::string& UpdateBucketRequest::_internal_predefined_acl() const {
  return _impl_.predefined_acl_.Get();
}
inline void UpdateBucketRequest::_internal_set_predefined_acl(const std::string& value) {
  
  _impl_.predefined_acl_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdateBucketRequest::_internal_mutable_predefined_acl() {
  
  return _impl_.predefined_acl_.Mutable(GetArenaForAllocation());
}
inline std::string* UpdateBucketRequest::release_predefined_acl() {
  // @@protoc_insertion_point(field_release:google.storage.v2.UpdateBucketRequest.predefined_acl)
  return _impl_.predefined_acl_.Release();
}
inline void UpdateBucketRequest::set_allocated_predefined_acl(std::string* predefined_acl) {
  if (predefined_acl != nullptr) {
    
  } else {
    
  }
  _impl_.predefined_acl_.SetAllocated(predefined_acl, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.predefined_acl_.IsDefault()) {
    _impl_.predefined_acl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.UpdateBucketRequest.predefined_acl)
}

// string predefined_default_object_acl = 9;
inline void UpdateBucketRequest::clear_predefined_default_object_acl() {
  _impl_.predefined_default_object_acl_.ClearToEmpty();
}
inline const std::string& UpdateBucketRequest::predefined_default_object_acl() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.UpdateBucketRequest.predefined_default_object_acl)
  return _internal_predefined_default_object_acl();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateBucketRequest::set_predefined_default_object_acl(ArgT0&& arg0, ArgT... args) {
 
 _impl_.predefined_default_object_acl_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.UpdateBucketRequest.predefined_default_object_acl)
}
inline std::string* UpdateBucketRequest::mutable_predefined_default_object_acl() {
  std::string* _s = _internal_mutable_predefined_default_object_acl();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.UpdateBucketRequest.predefined_default_object_acl)
  return _s;
}
inline const std::string& UpdateBucketRequest::_internal_predefined_default_object_acl() const {
  return _impl_.predefined_default_object_acl_.Get();
}
inline void UpdateBucketRequest::_internal_set_predefined_default_object_acl(const std::string& value) {
  
  _impl_.predefined_default_object_acl_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdateBucketRequest::_internal_mutable_predefined_default_object_acl() {
  
  return _impl_.predefined_default_object_acl_.Mutable(GetArenaForAllocation());
}
inline std::string* UpdateBucketRequest::release_predefined_default_object_acl() {
  // @@protoc_insertion_point(field_release:google.storage.v2.UpdateBucketRequest.predefined_default_object_acl)
  return _impl_.predefined_default_object_acl_.Release();
}
inline void UpdateBucketRequest::set_allocated_predefined_default_object_acl(std::string* predefined_default_object_acl) {
  if (predefined_default_object_acl != nullptr) {
    
  } else {
    
  }
  _impl_.predefined_default_object_acl_.SetAllocated(predefined_default_object_acl, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.predefined_default_object_acl_.IsDefault()) {
    _impl_.predefined_default_object_acl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.UpdateBucketRequest.predefined_default_object_acl)
}

// .google.protobuf.FieldMask update_mask = 6;
inline bool UpdateBucketRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && _impl_.update_mask_ != nullptr;
}
inline bool UpdateBucketRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateBucketRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = _impl_.update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateBucketRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.UpdateBucketRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateBucketRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  _impl_.update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.UpdateBucketRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateBucketRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateBucketRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:google.storage.v2.UpdateBucketRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateBucketRequest::_internal_mutable_update_mask() {
  
  if (_impl_.update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    _impl_.update_mask_ = p;
  }
  return _impl_.update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateBucketRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.UpdateBucketRequest.update_mask)
  return _msg;
}
inline void UpdateBucketRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.UpdateBucketRequest.update_mask)
}

// -------------------------------------------------------------------

// DeleteNotificationRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteNotificationRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DeleteNotificationRequest::name() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.DeleteNotificationRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteNotificationRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.DeleteNotificationRequest.name)
}
inline std::string* DeleteNotificationRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.DeleteNotificationRequest.name)
  return _s;
}
inline const std::string& DeleteNotificationRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DeleteNotificationRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteNotificationRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteNotificationRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.storage.v2.DeleteNotificationRequest.name)
  return _impl_.name_.Release();
}
inline void DeleteNotificationRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.DeleteNotificationRequest.name)
}

// -------------------------------------------------------------------

// GetNotificationRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetNotificationRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GetNotificationRequest::name() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.GetNotificationRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetNotificationRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.GetNotificationRequest.name)
}
inline std::string* GetNotificationRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.GetNotificationRequest.name)
  return _s;
}
inline const std::string& GetNotificationRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GetNotificationRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetNotificationRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetNotificationRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.storage.v2.GetNotificationRequest.name)
  return _impl_.name_.Release();
}
inline void GetNotificationRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.GetNotificationRequest.name)
}

// -------------------------------------------------------------------

// CreateNotificationRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreateNotificationRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& CreateNotificationRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.CreateNotificationRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateNotificationRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.CreateNotificationRequest.parent)
}
inline std::string* CreateNotificationRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.CreateNotificationRequest.parent)
  return _s;
}
inline const std::string& CreateNotificationRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void CreateNotificationRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateNotificationRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateNotificationRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.storage.v2.CreateNotificationRequest.parent)
  return _impl_.parent_.Release();
}
inline void CreateNotificationRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.CreateNotificationRequest.parent)
}

// .google.storage.v2.Notification notification = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateNotificationRequest::_internal_has_notification() const {
  return this != internal_default_instance() && _impl_.notification_ != nullptr;
}
inline bool CreateNotificationRequest::has_notification() const {
  return _internal_has_notification();
}
inline void CreateNotificationRequest::clear_notification() {
  if (GetArenaForAllocation() == nullptr && _impl_.notification_ != nullptr) {
    delete _impl_.notification_;
  }
  _impl_.notification_ = nullptr;
}
inline const ::google::storage::v2::Notification& CreateNotificationRequest::_internal_notification() const {
  const ::google::storage::v2::Notification* p = _impl_.notification_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::storage::v2::Notification&>(
      ::google::storage::v2::_Notification_default_instance_);
}
inline const ::google::storage::v2::Notification& CreateNotificationRequest::notification() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.CreateNotificationRequest.notification)
  return _internal_notification();
}
inline void CreateNotificationRequest::unsafe_arena_set_allocated_notification(
    ::google::storage::v2::Notification* notification) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.notification_);
  }
  _impl_.notification_ = notification;
  if (notification) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.CreateNotificationRequest.notification)
}
inline ::google::storage::v2::Notification* CreateNotificationRequest::release_notification() {
  
  ::google::storage::v2::Notification* temp = _impl_.notification_;
  _impl_.notification_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::storage::v2::Notification* CreateNotificationRequest::unsafe_arena_release_notification() {
  // @@protoc_insertion_point(field_release:google.storage.v2.CreateNotificationRequest.notification)
  
  ::google::storage::v2::Notification* temp = _impl_.notification_;
  _impl_.notification_ = nullptr;
  return temp;
}
inline ::google::storage::v2::Notification* CreateNotificationRequest::_internal_mutable_notification() {
  
  if (_impl_.notification_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::storage::v2::Notification>(GetArenaForAllocation());
    _impl_.notification_ = p;
  }
  return _impl_.notification_;
}
inline ::google::storage::v2::Notification* CreateNotificationRequest::mutable_notification() {
  ::google::storage::v2::Notification* _msg = _internal_mutable_notification();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.CreateNotificationRequest.notification)
  return _msg;
}
inline void CreateNotificationRequest::set_allocated_notification(::google::storage::v2::Notification* notification) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.notification_;
  }
  if (notification) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(notification);
    if (message_arena != submessage_arena) {
      notification = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, notification, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.notification_ = notification;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.CreateNotificationRequest.notification)
}

// -------------------------------------------------------------------

// ListNotificationsRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListNotificationsRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& ListNotificationsRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ListNotificationsRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListNotificationsRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.ListNotificationsRequest.parent)
}
inline std::string* ListNotificationsRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.ListNotificationsRequest.parent)
  return _s;
}
inline const std::string& ListNotificationsRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void ListNotificationsRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* ListNotificationsRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* ListNotificationsRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.storage.v2.ListNotificationsRequest.parent)
  return _impl_.parent_.Release();
}
inline void ListNotificationsRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.ListNotificationsRequest.parent)
}

// int32 page_size = 2;
inline void ListNotificationsRequest::clear_page_size() {
  _impl_.page_size_ = 0;
}
inline int32_t ListNotificationsRequest::_internal_page_size() const {
  return _impl_.page_size_;
}
inline int32_t ListNotificationsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ListNotificationsRequest.page_size)
  return _internal_page_size();
}
inline void ListNotificationsRequest::_internal_set_page_size(int32_t value) {
  
  _impl_.page_size_ = value;
}
inline void ListNotificationsRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.ListNotificationsRequest.page_size)
}

// string page_token = 3;
inline void ListNotificationsRequest::clear_page_token() {
  _impl_.page_token_.ClearToEmpty();
}
inline const std::string& ListNotificationsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ListNotificationsRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListNotificationsRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.ListNotificationsRequest.page_token)
}
inline std::string* ListNotificationsRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.ListNotificationsRequest.page_token)
  return _s;
}
inline const std::string& ListNotificationsRequest::_internal_page_token() const {
  return _impl_.page_token_.Get();
}
inline void ListNotificationsRequest::_internal_set_page_token(const std::string& value) {
  
  _impl_.page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListNotificationsRequest::_internal_mutable_page_token() {
  
  return _impl_.page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListNotificationsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.storage.v2.ListNotificationsRequest.page_token)
  return _impl_.page_token_.Release();
}
inline void ListNotificationsRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  _impl_.page_token_.SetAllocated(page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.page_token_.IsDefault()) {
    _impl_.page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.ListNotificationsRequest.page_token)
}

// -------------------------------------------------------------------

// ListNotificationsResponse

// repeated .google.storage.v2.Notification notifications = 1;
inline int ListNotificationsResponse::_internal_notifications_size() const {
  return _impl_.notifications_.size();
}
inline int ListNotificationsResponse::notifications_size() const {
  return _internal_notifications_size();
}
inline void ListNotificationsResponse::clear_notifications() {
  _impl_.notifications_.Clear();
}
inline ::google::storage::v2::Notification* ListNotificationsResponse::mutable_notifications(int index) {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.ListNotificationsResponse.notifications)
  return _impl_.notifications_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::storage::v2::Notification >*
ListNotificationsResponse::mutable_notifications() {
  // @@protoc_insertion_point(field_mutable_list:google.storage.v2.ListNotificationsResponse.notifications)
  return &_impl_.notifications_;
}
inline const ::google::storage::v2::Notification& ListNotificationsResponse::_internal_notifications(int index) const {
  return _impl_.notifications_.Get(index);
}
inline const ::google::storage::v2::Notification& ListNotificationsResponse::notifications(int index) const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ListNotificationsResponse.notifications)
  return _internal_notifications(index);
}
inline ::google::storage::v2::Notification* ListNotificationsResponse::_internal_add_notifications() {
  return _impl_.notifications_.Add();
}
inline ::google::storage::v2::Notification* ListNotificationsResponse::add_notifications() {
  ::google::storage::v2::Notification* _add = _internal_add_notifications();
  // @@protoc_insertion_point(field_add:google.storage.v2.ListNotificationsResponse.notifications)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::storage::v2::Notification >&
ListNotificationsResponse::notifications() const {
  // @@protoc_insertion_point(field_list:google.storage.v2.ListNotificationsResponse.notifications)
  return _impl_.notifications_;
}

// string next_page_token = 2;
inline void ListNotificationsResponse::clear_next_page_token() {
  _impl_.next_page_token_.ClearToEmpty();
}
inline const std::string& ListNotificationsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ListNotificationsResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListNotificationsResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.next_page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.ListNotificationsResponse.next_page_token)
}
inline std::string* ListNotificationsResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.ListNotificationsResponse.next_page_token)
  return _s;
}
inline const std::string& ListNotificationsResponse::_internal_next_page_token() const {
  return _impl_.next_page_token_.Get();
}
inline void ListNotificationsResponse::_internal_set_next_page_token(const std::string& value) {
  
  _impl_.next_page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListNotificationsResponse::_internal_mutable_next_page_token() {
  
  return _impl_.next_page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListNotificationsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.storage.v2.ListNotificationsResponse.next_page_token)
  return _impl_.next_page_token_.Release();
}
inline void ListNotificationsResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  _impl_.next_page_token_.SetAllocated(next_page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.next_page_token_.IsDefault()) {
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.ListNotificationsResponse.next_page_token)
}

// -------------------------------------------------------------------

// ComposeObjectRequest_SourceObject_ObjectPreconditions

// optional int64 if_generation_match = 1;
inline bool ComposeObjectRequest_SourceObject_ObjectPreconditions::_internal_has_if_generation_match() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ComposeObjectRequest_SourceObject_ObjectPreconditions::has_if_generation_match() const {
  return _internal_has_if_generation_match();
}
inline void ComposeObjectRequest_SourceObject_ObjectPreconditions::clear_if_generation_match() {
  _impl_.if_generation_match_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int64_t ComposeObjectRequest_SourceObject_ObjectPreconditions::_internal_if_generation_match() const {
  return _impl_.if_generation_match_;
}
inline int64_t ComposeObjectRequest_SourceObject_ObjectPreconditions::if_generation_match() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ComposeObjectRequest.SourceObject.ObjectPreconditions.if_generation_match)
  return _internal_if_generation_match();
}
inline void ComposeObjectRequest_SourceObject_ObjectPreconditions::_internal_set_if_generation_match(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.if_generation_match_ = value;
}
inline void ComposeObjectRequest_SourceObject_ObjectPreconditions::set_if_generation_match(int64_t value) {
  _internal_set_if_generation_match(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.ComposeObjectRequest.SourceObject.ObjectPreconditions.if_generation_match)
}

// -------------------------------------------------------------------

// ComposeObjectRequest_SourceObject

// string name = 1 [(.google.api.field_behavior) = REQUIRED];
inline void ComposeObjectRequest_SourceObject::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ComposeObjectRequest_SourceObject::name() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ComposeObjectRequest.SourceObject.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ComposeObjectRequest_SourceObject::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.ComposeObjectRequest.SourceObject.name)
}
inline std::string* ComposeObjectRequest_SourceObject::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.ComposeObjectRequest.SourceObject.name)
  return _s;
}
inline const std::string& ComposeObjectRequest_SourceObject::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ComposeObjectRequest_SourceObject::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ComposeObjectRequest_SourceObject::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ComposeObjectRequest_SourceObject::release_name() {
  // @@protoc_insertion_point(field_release:google.storage.v2.ComposeObjectRequest.SourceObject.name)
  return _impl_.name_.Release();
}
inline void ComposeObjectRequest_SourceObject::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.ComposeObjectRequest.SourceObject.name)
}

// int64 generation = 2;
inline void ComposeObjectRequest_SourceObject::clear_generation() {
  _impl_.generation_ = int64_t{0};
}
inline int64_t ComposeObjectRequest_SourceObject::_internal_generation() const {
  return _impl_.generation_;
}
inline int64_t ComposeObjectRequest_SourceObject::generation() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ComposeObjectRequest.SourceObject.generation)
  return _internal_generation();
}
inline void ComposeObjectRequest_SourceObject::_internal_set_generation(int64_t value) {
  
  _impl_.generation_ = value;
}
inline void ComposeObjectRequest_SourceObject::set_generation(int64_t value) {
  _internal_set_generation(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.ComposeObjectRequest.SourceObject.generation)
}

// .google.storage.v2.ComposeObjectRequest.SourceObject.ObjectPreconditions object_preconditions = 3;
inline bool ComposeObjectRequest_SourceObject::_internal_has_object_preconditions() const {
  return this != internal_default_instance() && _impl_.object_preconditions_ != nullptr;
}
inline bool ComposeObjectRequest_SourceObject::has_object_preconditions() const {
  return _internal_has_object_preconditions();
}
inline void ComposeObjectRequest_SourceObject::clear_object_preconditions() {
  if (GetArenaForAllocation() == nullptr && _impl_.object_preconditions_ != nullptr) {
    delete _impl_.object_preconditions_;
  }
  _impl_.object_preconditions_ = nullptr;
}
inline const ::google::storage::v2::ComposeObjectRequest_SourceObject_ObjectPreconditions& ComposeObjectRequest_SourceObject::_internal_object_preconditions() const {
  const ::google::storage::v2::ComposeObjectRequest_SourceObject_ObjectPreconditions* p = _impl_.object_preconditions_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::storage::v2::ComposeObjectRequest_SourceObject_ObjectPreconditions&>(
      ::google::storage::v2::_ComposeObjectRequest_SourceObject_ObjectPreconditions_default_instance_);
}
inline const ::google::storage::v2::ComposeObjectRequest_SourceObject_ObjectPreconditions& ComposeObjectRequest_SourceObject::object_preconditions() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ComposeObjectRequest.SourceObject.object_preconditions)
  return _internal_object_preconditions();
}
inline void ComposeObjectRequest_SourceObject::unsafe_arena_set_allocated_object_preconditions(
    ::google::storage::v2::ComposeObjectRequest_SourceObject_ObjectPreconditions* object_preconditions) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.object_preconditions_);
  }
  _impl_.object_preconditions_ = object_preconditions;
  if (object_preconditions) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.ComposeObjectRequest.SourceObject.object_preconditions)
}
inline ::google::storage::v2::ComposeObjectRequest_SourceObject_ObjectPreconditions* ComposeObjectRequest_SourceObject::release_object_preconditions() {
  
  ::google::storage::v2::ComposeObjectRequest_SourceObject_ObjectPreconditions* temp = _impl_.object_preconditions_;
  _impl_.object_preconditions_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::storage::v2::ComposeObjectRequest_SourceObject_ObjectPreconditions* ComposeObjectRequest_SourceObject::unsafe_arena_release_object_preconditions() {
  // @@protoc_insertion_point(field_release:google.storage.v2.ComposeObjectRequest.SourceObject.object_preconditions)
  
  ::google::storage::v2::ComposeObjectRequest_SourceObject_ObjectPreconditions* temp = _impl_.object_preconditions_;
  _impl_.object_preconditions_ = nullptr;
  return temp;
}
inline ::google::storage::v2::ComposeObjectRequest_SourceObject_ObjectPreconditions* ComposeObjectRequest_SourceObject::_internal_mutable_object_preconditions() {
  
  if (_impl_.object_preconditions_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::storage::v2::ComposeObjectRequest_SourceObject_ObjectPreconditions>(GetArenaForAllocation());
    _impl_.object_preconditions_ = p;
  }
  return _impl_.object_preconditions_;
}
inline ::google::storage::v2::ComposeObjectRequest_SourceObject_ObjectPreconditions* ComposeObjectRequest_SourceObject::mutable_object_preconditions() {
  ::google::storage::v2::ComposeObjectRequest_SourceObject_ObjectPreconditions* _msg = _internal_mutable_object_preconditions();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.ComposeObjectRequest.SourceObject.object_preconditions)
  return _msg;
}
inline void ComposeObjectRequest_SourceObject::set_allocated_object_preconditions(::google::storage::v2::ComposeObjectRequest_SourceObject_ObjectPreconditions* object_preconditions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.object_preconditions_;
  }
  if (object_preconditions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(object_preconditions);
    if (message_arena != submessage_arena) {
      object_preconditions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, object_preconditions, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.object_preconditions_ = object_preconditions;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.ComposeObjectRequest.SourceObject.object_preconditions)
}

// -------------------------------------------------------------------

// ComposeObjectRequest

// .google.storage.v2.Object destination = 1 [(.google.api.field_behavior) = REQUIRED];
inline bool ComposeObjectRequest::_internal_has_destination() const {
  return this != internal_default_instance() && _impl_.destination_ != nullptr;
}
inline bool ComposeObjectRequest::has_destination() const {
  return _internal_has_destination();
}
inline void ComposeObjectRequest::clear_destination() {
  if (GetArenaForAllocation() == nullptr && _impl_.destination_ != nullptr) {
    delete _impl_.destination_;
  }
  _impl_.destination_ = nullptr;
}
inline const ::google::storage::v2::Object& ComposeObjectRequest::_internal_destination() const {
  const ::google::storage::v2::Object* p = _impl_.destination_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::storage::v2::Object&>(
      ::google::storage::v2::_Object_default_instance_);
}
inline const ::google::storage::v2::Object& ComposeObjectRequest::destination() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ComposeObjectRequest.destination)
  return _internal_destination();
}
inline void ComposeObjectRequest::unsafe_arena_set_allocated_destination(
    ::google::storage::v2::Object* destination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.destination_);
  }
  _impl_.destination_ = destination;
  if (destination) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.ComposeObjectRequest.destination)
}
inline ::google::storage::v2::Object* ComposeObjectRequest::release_destination() {
  
  ::google::storage::v2::Object* temp = _impl_.destination_;
  _impl_.destination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::storage::v2::Object* ComposeObjectRequest::unsafe_arena_release_destination() {
  // @@protoc_insertion_point(field_release:google.storage.v2.ComposeObjectRequest.destination)
  
  ::google::storage::v2::Object* temp = _impl_.destination_;
  _impl_.destination_ = nullptr;
  return temp;
}
inline ::google::storage::v2::Object* ComposeObjectRequest::_internal_mutable_destination() {
  
  if (_impl_.destination_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::storage::v2::Object>(GetArenaForAllocation());
    _impl_.destination_ = p;
  }
  return _impl_.destination_;
}
inline ::google::storage::v2::Object* ComposeObjectRequest::mutable_destination() {
  ::google::storage::v2::Object* _msg = _internal_mutable_destination();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.ComposeObjectRequest.destination)
  return _msg;
}
inline void ComposeObjectRequest::set_allocated_destination(::google::storage::v2::Object* destination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.destination_;
  }
  if (destination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(destination);
    if (message_arena != submessage_arena) {
      destination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, destination, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.destination_ = destination;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.ComposeObjectRequest.destination)
}

// repeated .google.storage.v2.ComposeObjectRequest.SourceObject source_objects = 2;
inline int ComposeObjectRequest::_internal_source_objects_size() const {
  return _impl_.source_objects_.size();
}
inline int ComposeObjectRequest::source_objects_size() const {
  return _internal_source_objects_size();
}
inline void ComposeObjectRequest::clear_source_objects() {
  _impl_.source_objects_.Clear();
}
inline ::google::storage::v2::ComposeObjectRequest_SourceObject* ComposeObjectRequest::mutable_source_objects(int index) {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.ComposeObjectRequest.source_objects)
  return _impl_.source_objects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::storage::v2::ComposeObjectRequest_SourceObject >*
ComposeObjectRequest::mutable_source_objects() {
  // @@protoc_insertion_point(field_mutable_list:google.storage.v2.ComposeObjectRequest.source_objects)
  return &_impl_.source_objects_;
}
inline const ::google::storage::v2::ComposeObjectRequest_SourceObject& ComposeObjectRequest::_internal_source_objects(int index) const {
  return _impl_.source_objects_.Get(index);
}
inline const ::google::storage::v2::ComposeObjectRequest_SourceObject& ComposeObjectRequest::source_objects(int index) const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ComposeObjectRequest.source_objects)
  return _internal_source_objects(index);
}
inline ::google::storage::v2::ComposeObjectRequest_SourceObject* ComposeObjectRequest::_internal_add_source_objects() {
  return _impl_.source_objects_.Add();
}
inline ::google::storage::v2::ComposeObjectRequest_SourceObject* ComposeObjectRequest::add_source_objects() {
  ::google::storage::v2::ComposeObjectRequest_SourceObject* _add = _internal_add_source_objects();
  // @@protoc_insertion_point(field_add:google.storage.v2.ComposeObjectRequest.source_objects)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::storage::v2::ComposeObjectRequest_SourceObject >&
ComposeObjectRequest::source_objects() const {
  // @@protoc_insertion_point(field_list:google.storage.v2.ComposeObjectRequest.source_objects)
  return _impl_.source_objects_;
}

// string destination_predefined_acl = 9;
inline void ComposeObjectRequest::clear_destination_predefined_acl() {
  _impl_.destination_predefined_acl_.ClearToEmpty();
}
inline const std::string& ComposeObjectRequest::destination_predefined_acl() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ComposeObjectRequest.destination_predefined_acl)
  return _internal_destination_predefined_acl();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ComposeObjectRequest::set_destination_predefined_acl(ArgT0&& arg0, ArgT... args) {
 
 _impl_.destination_predefined_acl_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.ComposeObjectRequest.destination_predefined_acl)
}
inline std::string* ComposeObjectRequest::mutable_destination_predefined_acl() {
  std::string* _s = _internal_mutable_destination_predefined_acl();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.ComposeObjectRequest.destination_predefined_acl)
  return _s;
}
inline const std::string& ComposeObjectRequest::_internal_destination_predefined_acl() const {
  return _impl_.destination_predefined_acl_.Get();
}
inline void ComposeObjectRequest::_internal_set_destination_predefined_acl(const std::string& value) {
  
  _impl_.destination_predefined_acl_.Set(value, GetArenaForAllocation());
}
inline std::string* ComposeObjectRequest::_internal_mutable_destination_predefined_acl() {
  
  return _impl_.destination_predefined_acl_.Mutable(GetArenaForAllocation());
}
inline std::string* ComposeObjectRequest::release_destination_predefined_acl() {
  // @@protoc_insertion_point(field_release:google.storage.v2.ComposeObjectRequest.destination_predefined_acl)
  return _impl_.destination_predefined_acl_.Release();
}
inline void ComposeObjectRequest::set_allocated_destination_predefined_acl(std::string* destination_predefined_acl) {
  if (destination_predefined_acl != nullptr) {
    
  } else {
    
  }
  _impl_.destination_predefined_acl_.SetAllocated(destination_predefined_acl, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.destination_predefined_acl_.IsDefault()) {
    _impl_.destination_predefined_acl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.ComposeObjectRequest.destination_predefined_acl)
}

// optional int64 if_generation_match = 4;
inline bool ComposeObjectRequest::_internal_has_if_generation_match() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ComposeObjectRequest::has_if_generation_match() const {
  return _internal_has_if_generation_match();
}
inline void ComposeObjectRequest::clear_if_generation_match() {
  _impl_.if_generation_match_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int64_t ComposeObjectRequest::_internal_if_generation_match() const {
  return _impl_.if_generation_match_;
}
inline int64_t ComposeObjectRequest::if_generation_match() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ComposeObjectRequest.if_generation_match)
  return _internal_if_generation_match();
}
inline void ComposeObjectRequest::_internal_set_if_generation_match(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.if_generation_match_ = value;
}
inline void ComposeObjectRequest::set_if_generation_match(int64_t value) {
  _internal_set_if_generation_match(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.ComposeObjectRequest.if_generation_match)
}

// optional int64 if_metageneration_match = 5;
inline bool ComposeObjectRequest::_internal_has_if_metageneration_match() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ComposeObjectRequest::has_if_metageneration_match() const {
  return _internal_has_if_metageneration_match();
}
inline void ComposeObjectRequest::clear_if_metageneration_match() {
  _impl_.if_metageneration_match_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int64_t ComposeObjectRequest::_internal_if_metageneration_match() const {
  return _impl_.if_metageneration_match_;
}
inline int64_t ComposeObjectRequest::if_metageneration_match() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ComposeObjectRequest.if_metageneration_match)
  return _internal_if_metageneration_match();
}
inline void ComposeObjectRequest::_internal_set_if_metageneration_match(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.if_metageneration_match_ = value;
}
inline void ComposeObjectRequest::set_if_metageneration_match(int64_t value) {
  _internal_set_if_metageneration_match(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.ComposeObjectRequest.if_metageneration_match)
}

// string kms_key = 6 [(.google.api.resource_reference) = {
inline void ComposeObjectRequest::clear_kms_key() {
  _impl_.kms_key_.ClearToEmpty();
}
inline const std::string& ComposeObjectRequest::kms_key() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ComposeObjectRequest.kms_key)
  return _internal_kms_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ComposeObjectRequest::set_kms_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.kms_key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.ComposeObjectRequest.kms_key)
}
inline std::string* ComposeObjectRequest::mutable_kms_key() {
  std::string* _s = _internal_mutable_kms_key();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.ComposeObjectRequest.kms_key)
  return _s;
}
inline const std::string& ComposeObjectRequest::_internal_kms_key() const {
  return _impl_.kms_key_.Get();
}
inline void ComposeObjectRequest::_internal_set_kms_key(const std::string& value) {
  
  _impl_.kms_key_.Set(value, GetArenaForAllocation());
}
inline std::string* ComposeObjectRequest::_internal_mutable_kms_key() {
  
  return _impl_.kms_key_.Mutable(GetArenaForAllocation());
}
inline std::string* ComposeObjectRequest::release_kms_key() {
  // @@protoc_insertion_point(field_release:google.storage.v2.ComposeObjectRequest.kms_key)
  return _impl_.kms_key_.Release();
}
inline void ComposeObjectRequest::set_allocated_kms_key(std::string* kms_key) {
  if (kms_key != nullptr) {
    
  } else {
    
  }
  _impl_.kms_key_.SetAllocated(kms_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.kms_key_.IsDefault()) {
    _impl_.kms_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.ComposeObjectRequest.kms_key)
}

// .google.storage.v2.CommonObjectRequestParams common_object_request_params = 7;
inline bool ComposeObjectRequest::_internal_has_common_object_request_params() const {
  return this != internal_default_instance() && _impl_.common_object_request_params_ != nullptr;
}
inline bool ComposeObjectRequest::has_common_object_request_params() const {
  return _internal_has_common_object_request_params();
}
inline void ComposeObjectRequest::clear_common_object_request_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.common_object_request_params_ != nullptr) {
    delete _impl_.common_object_request_params_;
  }
  _impl_.common_object_request_params_ = nullptr;
}
inline const ::google::storage::v2::CommonObjectRequestParams& ComposeObjectRequest::_internal_common_object_request_params() const {
  const ::google::storage::v2::CommonObjectRequestParams* p = _impl_.common_object_request_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::storage::v2::CommonObjectRequestParams&>(
      ::google::storage::v2::_CommonObjectRequestParams_default_instance_);
}
inline const ::google::storage::v2::CommonObjectRequestParams& ComposeObjectRequest::common_object_request_params() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ComposeObjectRequest.common_object_request_params)
  return _internal_common_object_request_params();
}
inline void ComposeObjectRequest::unsafe_arena_set_allocated_common_object_request_params(
    ::google::storage::v2::CommonObjectRequestParams* common_object_request_params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.common_object_request_params_);
  }
  _impl_.common_object_request_params_ = common_object_request_params;
  if (common_object_request_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.ComposeObjectRequest.common_object_request_params)
}
inline ::google::storage::v2::CommonObjectRequestParams* ComposeObjectRequest::release_common_object_request_params() {
  
  ::google::storage::v2::CommonObjectRequestParams* temp = _impl_.common_object_request_params_;
  _impl_.common_object_request_params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::storage::v2::CommonObjectRequestParams* ComposeObjectRequest::unsafe_arena_release_common_object_request_params() {
  // @@protoc_insertion_point(field_release:google.storage.v2.ComposeObjectRequest.common_object_request_params)
  
  ::google::storage::v2::CommonObjectRequestParams* temp = _impl_.common_object_request_params_;
  _impl_.common_object_request_params_ = nullptr;
  return temp;
}
inline ::google::storage::v2::CommonObjectRequestParams* ComposeObjectRequest::_internal_mutable_common_object_request_params() {
  
  if (_impl_.common_object_request_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::storage::v2::CommonObjectRequestParams>(GetArenaForAllocation());
    _impl_.common_object_request_params_ = p;
  }
  return _impl_.common_object_request_params_;
}
inline ::google::storage::v2::CommonObjectRequestParams* ComposeObjectRequest::mutable_common_object_request_params() {
  ::google::storage::v2::CommonObjectRequestParams* _msg = _internal_mutable_common_object_request_params();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.ComposeObjectRequest.common_object_request_params)
  return _msg;
}
inline void ComposeObjectRequest::set_allocated_common_object_request_params(::google::storage::v2::CommonObjectRequestParams* common_object_request_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.common_object_request_params_;
  }
  if (common_object_request_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(common_object_request_params);
    if (message_arena != submessage_arena) {
      common_object_request_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common_object_request_params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.common_object_request_params_ = common_object_request_params;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.ComposeObjectRequest.common_object_request_params)
}

// -------------------------------------------------------------------

// DeleteObjectRequest

// string bucket = 1 [(.google.api.field_behavior) = REQUIRED];
inline void DeleteObjectRequest::clear_bucket() {
  _impl_.bucket_.ClearToEmpty();
}
inline const std::string& DeleteObjectRequest::bucket() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.DeleteObjectRequest.bucket)
  return _internal_bucket();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteObjectRequest::set_bucket(ArgT0&& arg0, ArgT... args) {
 
 _impl_.bucket_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.DeleteObjectRequest.bucket)
}
inline std::string* DeleteObjectRequest::mutable_bucket() {
  std::string* _s = _internal_mutable_bucket();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.DeleteObjectRequest.bucket)
  return _s;
}
inline const std::string& DeleteObjectRequest::_internal_bucket() const {
  return _impl_.bucket_.Get();
}
inline void DeleteObjectRequest::_internal_set_bucket(const std::string& value) {
  
  _impl_.bucket_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteObjectRequest::_internal_mutable_bucket() {
  
  return _impl_.bucket_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteObjectRequest::release_bucket() {
  // @@protoc_insertion_point(field_release:google.storage.v2.DeleteObjectRequest.bucket)
  return _impl_.bucket_.Release();
}
inline void DeleteObjectRequest::set_allocated_bucket(std::string* bucket) {
  if (bucket != nullptr) {
    
  } else {
    
  }
  _impl_.bucket_.SetAllocated(bucket, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bucket_.IsDefault()) {
    _impl_.bucket_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.DeleteObjectRequest.bucket)
}

// string object = 2 [(.google.api.field_behavior) = REQUIRED];
inline void DeleteObjectRequest::clear_object() {
  _impl_.object_.ClearToEmpty();
}
inline const std::string& DeleteObjectRequest::object() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.DeleteObjectRequest.object)
  return _internal_object();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteObjectRequest::set_object(ArgT0&& arg0, ArgT... args) {
 
 _impl_.object_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.DeleteObjectRequest.object)
}
inline std::string* DeleteObjectRequest::mutable_object() {
  std::string* _s = _internal_mutable_object();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.DeleteObjectRequest.object)
  return _s;
}
inline const std::string& DeleteObjectRequest::_internal_object() const {
  return _impl_.object_.Get();
}
inline void DeleteObjectRequest::_internal_set_object(const std::string& value) {
  
  _impl_.object_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteObjectRequest::_internal_mutable_object() {
  
  return _impl_.object_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteObjectRequest::release_object() {
  // @@protoc_insertion_point(field_release:google.storage.v2.DeleteObjectRequest.object)
  return _impl_.object_.Release();
}
inline void DeleteObjectRequest::set_allocated_object(std::string* object) {
  if (object != nullptr) {
    
  } else {
    
  }
  _impl_.object_.SetAllocated(object, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.object_.IsDefault()) {
    _impl_.object_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.DeleteObjectRequest.object)
}

// int64 generation = 4;
inline void DeleteObjectRequest::clear_generation() {
  _impl_.generation_ = int64_t{0};
}
inline int64_t DeleteObjectRequest::_internal_generation() const {
  return _impl_.generation_;
}
inline int64_t DeleteObjectRequest::generation() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.DeleteObjectRequest.generation)
  return _internal_generation();
}
inline void DeleteObjectRequest::_internal_set_generation(int64_t value) {
  
  _impl_.generation_ = value;
}
inline void DeleteObjectRequest::set_generation(int64_t value) {
  _internal_set_generation(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.DeleteObjectRequest.generation)
}

// optional int64 if_generation_match = 5;
inline bool DeleteObjectRequest::_internal_has_if_generation_match() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DeleteObjectRequest::has_if_generation_match() const {
  return _internal_has_if_generation_match();
}
inline void DeleteObjectRequest::clear_if_generation_match() {
  _impl_.if_generation_match_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int64_t DeleteObjectRequest::_internal_if_generation_match() const {
  return _impl_.if_generation_match_;
}
inline int64_t DeleteObjectRequest::if_generation_match() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.DeleteObjectRequest.if_generation_match)
  return _internal_if_generation_match();
}
inline void DeleteObjectRequest::_internal_set_if_generation_match(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.if_generation_match_ = value;
}
inline void DeleteObjectRequest::set_if_generation_match(int64_t value) {
  _internal_set_if_generation_match(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.DeleteObjectRequest.if_generation_match)
}

// optional int64 if_generation_not_match = 6;
inline bool DeleteObjectRequest::_internal_has_if_generation_not_match() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DeleteObjectRequest::has_if_generation_not_match() const {
  return _internal_has_if_generation_not_match();
}
inline void DeleteObjectRequest::clear_if_generation_not_match() {
  _impl_.if_generation_not_match_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int64_t DeleteObjectRequest::_internal_if_generation_not_match() const {
  return _impl_.if_generation_not_match_;
}
inline int64_t DeleteObjectRequest::if_generation_not_match() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.DeleteObjectRequest.if_generation_not_match)
  return _internal_if_generation_not_match();
}
inline void DeleteObjectRequest::_internal_set_if_generation_not_match(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.if_generation_not_match_ = value;
}
inline void DeleteObjectRequest::set_if_generation_not_match(int64_t value) {
  _internal_set_if_generation_not_match(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.DeleteObjectRequest.if_generation_not_match)
}

// optional int64 if_metageneration_match = 7;
inline bool DeleteObjectRequest::_internal_has_if_metageneration_match() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DeleteObjectRequest::has_if_metageneration_match() const {
  return _internal_has_if_metageneration_match();
}
inline void DeleteObjectRequest::clear_if_metageneration_match() {
  _impl_.if_metageneration_match_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int64_t DeleteObjectRequest::_internal_if_metageneration_match() const {
  return _impl_.if_metageneration_match_;
}
inline int64_t DeleteObjectRequest::if_metageneration_match() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.DeleteObjectRequest.if_metageneration_match)
  return _internal_if_metageneration_match();
}
inline void DeleteObjectRequest::_internal_set_if_metageneration_match(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.if_metageneration_match_ = value;
}
inline void DeleteObjectRequest::set_if_metageneration_match(int64_t value) {
  _internal_set_if_metageneration_match(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.DeleteObjectRequest.if_metageneration_match)
}

// optional int64 if_metageneration_not_match = 8;
inline bool DeleteObjectRequest::_internal_has_if_metageneration_not_match() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DeleteObjectRequest::has_if_metageneration_not_match() const {
  return _internal_has_if_metageneration_not_match();
}
inline void DeleteObjectRequest::clear_if_metageneration_not_match() {
  _impl_.if_metageneration_not_match_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int64_t DeleteObjectRequest::_internal_if_metageneration_not_match() const {
  return _impl_.if_metageneration_not_match_;
}
inline int64_t DeleteObjectRequest::if_metageneration_not_match() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.DeleteObjectRequest.if_metageneration_not_match)
  return _internal_if_metageneration_not_match();
}
inline void DeleteObjectRequest::_internal_set_if_metageneration_not_match(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.if_metageneration_not_match_ = value;
}
inline void DeleteObjectRequest::set_if_metageneration_not_match(int64_t value) {
  _internal_set_if_metageneration_not_match(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.DeleteObjectRequest.if_metageneration_not_match)
}

// .google.storage.v2.CommonObjectRequestParams common_object_request_params = 10;
inline bool DeleteObjectRequest::_internal_has_common_object_request_params() const {
  return this != internal_default_instance() && _impl_.common_object_request_params_ != nullptr;
}
inline bool DeleteObjectRequest::has_common_object_request_params() const {
  return _internal_has_common_object_request_params();
}
inline void DeleteObjectRequest::clear_common_object_request_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.common_object_request_params_ != nullptr) {
    delete _impl_.common_object_request_params_;
  }
  _impl_.common_object_request_params_ = nullptr;
}
inline const ::google::storage::v2::CommonObjectRequestParams& DeleteObjectRequest::_internal_common_object_request_params() const {
  const ::google::storage::v2::CommonObjectRequestParams* p = _impl_.common_object_request_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::storage::v2::CommonObjectRequestParams&>(
      ::google::storage::v2::_CommonObjectRequestParams_default_instance_);
}
inline const ::google::storage::v2::CommonObjectRequestParams& DeleteObjectRequest::common_object_request_params() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.DeleteObjectRequest.common_object_request_params)
  return _internal_common_object_request_params();
}
inline void DeleteObjectRequest::unsafe_arena_set_allocated_common_object_request_params(
    ::google::storage::v2::CommonObjectRequestParams* common_object_request_params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.common_object_request_params_);
  }
  _impl_.common_object_request_params_ = common_object_request_params;
  if (common_object_request_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.DeleteObjectRequest.common_object_request_params)
}
inline ::google::storage::v2::CommonObjectRequestParams* DeleteObjectRequest::release_common_object_request_params() {
  
  ::google::storage::v2::CommonObjectRequestParams* temp = _impl_.common_object_request_params_;
  _impl_.common_object_request_params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::storage::v2::CommonObjectRequestParams* DeleteObjectRequest::unsafe_arena_release_common_object_request_params() {
  // @@protoc_insertion_point(field_release:google.storage.v2.DeleteObjectRequest.common_object_request_params)
  
  ::google::storage::v2::CommonObjectRequestParams* temp = _impl_.common_object_request_params_;
  _impl_.common_object_request_params_ = nullptr;
  return temp;
}
inline ::google::storage::v2::CommonObjectRequestParams* DeleteObjectRequest::_internal_mutable_common_object_request_params() {
  
  if (_impl_.common_object_request_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::storage::v2::CommonObjectRequestParams>(GetArenaForAllocation());
    _impl_.common_object_request_params_ = p;
  }
  return _impl_.common_object_request_params_;
}
inline ::google::storage::v2::CommonObjectRequestParams* DeleteObjectRequest::mutable_common_object_request_params() {
  ::google::storage::v2::CommonObjectRequestParams* _msg = _internal_mutable_common_object_request_params();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.DeleteObjectRequest.common_object_request_params)
  return _msg;
}
inline void DeleteObjectRequest::set_allocated_common_object_request_params(::google::storage::v2::CommonObjectRequestParams* common_object_request_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.common_object_request_params_;
  }
  if (common_object_request_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(common_object_request_params);
    if (message_arena != submessage_arena) {
      common_object_request_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common_object_request_params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.common_object_request_params_ = common_object_request_params;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.DeleteObjectRequest.common_object_request_params)
}

// -------------------------------------------------------------------

// CancelResumableWriteRequest

// string upload_id = 1 [(.google.api.field_behavior) = REQUIRED];
inline void CancelResumableWriteRequest::clear_upload_id() {
  _impl_.upload_id_.ClearToEmpty();
}
inline const std::string& CancelResumableWriteRequest::upload_id() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.CancelResumableWriteRequest.upload_id)
  return _internal_upload_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CancelResumableWriteRequest::set_upload_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.upload_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.CancelResumableWriteRequest.upload_id)
}
inline std::string* CancelResumableWriteRequest::mutable_upload_id() {
  std::string* _s = _internal_mutable_upload_id();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.CancelResumableWriteRequest.upload_id)
  return _s;
}
inline const std::string& CancelResumableWriteRequest::_internal_upload_id() const {
  return _impl_.upload_id_.Get();
}
inline void CancelResumableWriteRequest::_internal_set_upload_id(const std::string& value) {
  
  _impl_.upload_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CancelResumableWriteRequest::_internal_mutable_upload_id() {
  
  return _impl_.upload_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CancelResumableWriteRequest::release_upload_id() {
  // @@protoc_insertion_point(field_release:google.storage.v2.CancelResumableWriteRequest.upload_id)
  return _impl_.upload_id_.Release();
}
inline void CancelResumableWriteRequest::set_allocated_upload_id(std::string* upload_id) {
  if (upload_id != nullptr) {
    
  } else {
    
  }
  _impl_.upload_id_.SetAllocated(upload_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.upload_id_.IsDefault()) {
    _impl_.upload_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.CancelResumableWriteRequest.upload_id)
}

// -------------------------------------------------------------------

// CancelResumableWriteResponse

// -------------------------------------------------------------------

// ReadObjectRequest

// string bucket = 1;
inline void ReadObjectRequest::clear_bucket() {
  _impl_.bucket_.ClearToEmpty();
}
inline const std::string& ReadObjectRequest::bucket() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ReadObjectRequest.bucket)
  return _internal_bucket();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReadObjectRequest::set_bucket(ArgT0&& arg0, ArgT... args) {
 
 _impl_.bucket_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.ReadObjectRequest.bucket)
}
inline std::string* ReadObjectRequest::mutable_bucket() {
  std::string* _s = _internal_mutable_bucket();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.ReadObjectRequest.bucket)
  return _s;
}
inline const std::string& ReadObjectRequest::_internal_bucket() const {
  return _impl_.bucket_.Get();
}
inline void ReadObjectRequest::_internal_set_bucket(const std::string& value) {
  
  _impl_.bucket_.Set(value, GetArenaForAllocation());
}
inline std::string* ReadObjectRequest::_internal_mutable_bucket() {
  
  return _impl_.bucket_.Mutable(GetArenaForAllocation());
}
inline std::string* ReadObjectRequest::release_bucket() {
  // @@protoc_insertion_point(field_release:google.storage.v2.ReadObjectRequest.bucket)
  return _impl_.bucket_.Release();
}
inline void ReadObjectRequest::set_allocated_bucket(std::string* bucket) {
  if (bucket != nullptr) {
    
  } else {
    
  }
  _impl_.bucket_.SetAllocated(bucket, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bucket_.IsDefault()) {
    _impl_.bucket_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.ReadObjectRequest.bucket)
}

// string object = 2;
inline void ReadObjectRequest::clear_object() {
  _impl_.object_.ClearToEmpty();
}
inline const std::string& ReadObjectRequest::object() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ReadObjectRequest.object)
  return _internal_object();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReadObjectRequest::set_object(ArgT0&& arg0, ArgT... args) {
 
 _impl_.object_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.ReadObjectRequest.object)
}
inline std::string* ReadObjectRequest::mutable_object() {
  std::string* _s = _internal_mutable_object();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.ReadObjectRequest.object)
  return _s;
}
inline const std::string& ReadObjectRequest::_internal_object() const {
  return _impl_.object_.Get();
}
inline void ReadObjectRequest::_internal_set_object(const std::string& value) {
  
  _impl_.object_.Set(value, GetArenaForAllocation());
}
inline std::string* ReadObjectRequest::_internal_mutable_object() {
  
  return _impl_.object_.Mutable(GetArenaForAllocation());
}
inline std::string* ReadObjectRequest::release_object() {
  // @@protoc_insertion_point(field_release:google.storage.v2.ReadObjectRequest.object)
  return _impl_.object_.Release();
}
inline void ReadObjectRequest::set_allocated_object(std::string* object) {
  if (object != nullptr) {
    
  } else {
    
  }
  _impl_.object_.SetAllocated(object, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.object_.IsDefault()) {
    _impl_.object_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.ReadObjectRequest.object)
}

// int64 generation = 3;
inline void ReadObjectRequest::clear_generation() {
  _impl_.generation_ = int64_t{0};
}
inline int64_t ReadObjectRequest::_internal_generation() const {
  return _impl_.generation_;
}
inline int64_t ReadObjectRequest::generation() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ReadObjectRequest.generation)
  return _internal_generation();
}
inline void ReadObjectRequest::_internal_set_generation(int64_t value) {
  
  _impl_.generation_ = value;
}
inline void ReadObjectRequest::set_generation(int64_t value) {
  _internal_set_generation(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.ReadObjectRequest.generation)
}

// int64 read_offset = 4;
inline void ReadObjectRequest::clear_read_offset() {
  _impl_.read_offset_ = int64_t{0};
}
inline int64_t ReadObjectRequest::_internal_read_offset() const {
  return _impl_.read_offset_;
}
inline int64_t ReadObjectRequest::read_offset() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ReadObjectRequest.read_offset)
  return _internal_read_offset();
}
inline void ReadObjectRequest::_internal_set_read_offset(int64_t value) {
  
  _impl_.read_offset_ = value;
}
inline void ReadObjectRequest::set_read_offset(int64_t value) {
  _internal_set_read_offset(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.ReadObjectRequest.read_offset)
}

// int64 read_limit = 5;
inline void ReadObjectRequest::clear_read_limit() {
  _impl_.read_limit_ = int64_t{0};
}
inline int64_t ReadObjectRequest::_internal_read_limit() const {
  return _impl_.read_limit_;
}
inline int64_t ReadObjectRequest::read_limit() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ReadObjectRequest.read_limit)
  return _internal_read_limit();
}
inline void ReadObjectRequest::_internal_set_read_limit(int64_t value) {
  
  _impl_.read_limit_ = value;
}
inline void ReadObjectRequest::set_read_limit(int64_t value) {
  _internal_set_read_limit(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.ReadObjectRequest.read_limit)
}

// optional int64 if_generation_match = 6;
inline bool ReadObjectRequest::_internal_has_if_generation_match() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ReadObjectRequest::has_if_generation_match() const {
  return _internal_has_if_generation_match();
}
inline void ReadObjectRequest::clear_if_generation_match() {
  _impl_.if_generation_match_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int64_t ReadObjectRequest::_internal_if_generation_match() const {
  return _impl_.if_generation_match_;
}
inline int64_t ReadObjectRequest::if_generation_match() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ReadObjectRequest.if_generation_match)
  return _internal_if_generation_match();
}
inline void ReadObjectRequest::_internal_set_if_generation_match(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.if_generation_match_ = value;
}
inline void ReadObjectRequest::set_if_generation_match(int64_t value) {
  _internal_set_if_generation_match(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.ReadObjectRequest.if_generation_match)
}

// optional int64 if_generation_not_match = 7;
inline bool ReadObjectRequest::_internal_has_if_generation_not_match() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ReadObjectRequest::has_if_generation_not_match() const {
  return _internal_has_if_generation_not_match();
}
inline void ReadObjectRequest::clear_if_generation_not_match() {
  _impl_.if_generation_not_match_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int64_t ReadObjectRequest::_internal_if_generation_not_match() const {
  return _impl_.if_generation_not_match_;
}
inline int64_t ReadObjectRequest::if_generation_not_match() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ReadObjectRequest.if_generation_not_match)
  return _internal_if_generation_not_match();
}
inline void ReadObjectRequest::_internal_set_if_generation_not_match(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.if_generation_not_match_ = value;
}
inline void ReadObjectRequest::set_if_generation_not_match(int64_t value) {
  _internal_set_if_generation_not_match(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.ReadObjectRequest.if_generation_not_match)
}

// optional int64 if_metageneration_match = 8;
inline bool ReadObjectRequest::_internal_has_if_metageneration_match() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ReadObjectRequest::has_if_metageneration_match() const {
  return _internal_has_if_metageneration_match();
}
inline void ReadObjectRequest::clear_if_metageneration_match() {
  _impl_.if_metageneration_match_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int64_t ReadObjectRequest::_internal_if_metageneration_match() const {
  return _impl_.if_metageneration_match_;
}
inline int64_t ReadObjectRequest::if_metageneration_match() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ReadObjectRequest.if_metageneration_match)
  return _internal_if_metageneration_match();
}
inline void ReadObjectRequest::_internal_set_if_metageneration_match(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.if_metageneration_match_ = value;
}
inline void ReadObjectRequest::set_if_metageneration_match(int64_t value) {
  _internal_set_if_metageneration_match(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.ReadObjectRequest.if_metageneration_match)
}

// optional int64 if_metageneration_not_match = 9;
inline bool ReadObjectRequest::_internal_has_if_metageneration_not_match() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ReadObjectRequest::has_if_metageneration_not_match() const {
  return _internal_has_if_metageneration_not_match();
}
inline void ReadObjectRequest::clear_if_metageneration_not_match() {
  _impl_.if_metageneration_not_match_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int64_t ReadObjectRequest::_internal_if_metageneration_not_match() const {
  return _impl_.if_metageneration_not_match_;
}
inline int64_t ReadObjectRequest::if_metageneration_not_match() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ReadObjectRequest.if_metageneration_not_match)
  return _internal_if_metageneration_not_match();
}
inline void ReadObjectRequest::_internal_set_if_metageneration_not_match(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.if_metageneration_not_match_ = value;
}
inline void ReadObjectRequest::set_if_metageneration_not_match(int64_t value) {
  _internal_set_if_metageneration_not_match(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.ReadObjectRequest.if_metageneration_not_match)
}

// .google.storage.v2.CommonObjectRequestParams common_object_request_params = 10;
inline bool ReadObjectRequest::_internal_has_common_object_request_params() const {
  return this != internal_default_instance() && _impl_.common_object_request_params_ != nullptr;
}
inline bool ReadObjectRequest::has_common_object_request_params() const {
  return _internal_has_common_object_request_params();
}
inline void ReadObjectRequest::clear_common_object_request_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.common_object_request_params_ != nullptr) {
    delete _impl_.common_object_request_params_;
  }
  _impl_.common_object_request_params_ = nullptr;
}
inline const ::google::storage::v2::CommonObjectRequestParams& ReadObjectRequest::_internal_common_object_request_params() const {
  const ::google::storage::v2::CommonObjectRequestParams* p = _impl_.common_object_request_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::storage::v2::CommonObjectRequestParams&>(
      ::google::storage::v2::_CommonObjectRequestParams_default_instance_);
}
inline const ::google::storage::v2::CommonObjectRequestParams& ReadObjectRequest::common_object_request_params() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ReadObjectRequest.common_object_request_params)
  return _internal_common_object_request_params();
}
inline void ReadObjectRequest::unsafe_arena_set_allocated_common_object_request_params(
    ::google::storage::v2::CommonObjectRequestParams* common_object_request_params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.common_object_request_params_);
  }
  _impl_.common_object_request_params_ = common_object_request_params;
  if (common_object_request_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.ReadObjectRequest.common_object_request_params)
}
inline ::google::storage::v2::CommonObjectRequestParams* ReadObjectRequest::release_common_object_request_params() {
  
  ::google::storage::v2::CommonObjectRequestParams* temp = _impl_.common_object_request_params_;
  _impl_.common_object_request_params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::storage::v2::CommonObjectRequestParams* ReadObjectRequest::unsafe_arena_release_common_object_request_params() {
  // @@protoc_insertion_point(field_release:google.storage.v2.ReadObjectRequest.common_object_request_params)
  
  ::google::storage::v2::CommonObjectRequestParams* temp = _impl_.common_object_request_params_;
  _impl_.common_object_request_params_ = nullptr;
  return temp;
}
inline ::google::storage::v2::CommonObjectRequestParams* ReadObjectRequest::_internal_mutable_common_object_request_params() {
  
  if (_impl_.common_object_request_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::storage::v2::CommonObjectRequestParams>(GetArenaForAllocation());
    _impl_.common_object_request_params_ = p;
  }
  return _impl_.common_object_request_params_;
}
inline ::google::storage::v2::CommonObjectRequestParams* ReadObjectRequest::mutable_common_object_request_params() {
  ::google::storage::v2::CommonObjectRequestParams* _msg = _internal_mutable_common_object_request_params();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.ReadObjectRequest.common_object_request_params)
  return _msg;
}
inline void ReadObjectRequest::set_allocated_common_object_request_params(::google::storage::v2::CommonObjectRequestParams* common_object_request_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.common_object_request_params_;
  }
  if (common_object_request_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(common_object_request_params);
    if (message_arena != submessage_arena) {
      common_object_request_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common_object_request_params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.common_object_request_params_ = common_object_request_params;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.ReadObjectRequest.common_object_request_params)
}

// optional .google.protobuf.FieldMask read_mask = 12;
inline bool ReadObjectRequest::_internal_has_read_mask() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.read_mask_ != nullptr);
  return value;
}
inline bool ReadObjectRequest::has_read_mask() const {
  return _internal_has_read_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& ReadObjectRequest::_internal_read_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = _impl_.read_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& ReadObjectRequest::read_mask() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ReadObjectRequest.read_mask)
  return _internal_read_mask();
}
inline void ReadObjectRequest::unsafe_arena_set_allocated_read_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* read_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.read_mask_);
  }
  _impl_.read_mask_ = read_mask;
  if (read_mask) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.ReadObjectRequest.read_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* ReadObjectRequest::release_read_mask() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.read_mask_;
  _impl_.read_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* ReadObjectRequest::unsafe_arena_release_read_mask() {
  // @@protoc_insertion_point(field_release:google.storage.v2.ReadObjectRequest.read_mask)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.read_mask_;
  _impl_.read_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* ReadObjectRequest::_internal_mutable_read_mask() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.read_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    _impl_.read_mask_ = p;
  }
  return _impl_.read_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* ReadObjectRequest::mutable_read_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_read_mask();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.ReadObjectRequest.read_mask)
  return _msg;
}
inline void ReadObjectRequest::set_allocated_read_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* read_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.read_mask_);
  }
  if (read_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(read_mask));
    if (message_arena != submessage_arena) {
      read_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, read_mask, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.read_mask_ = read_mask;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.ReadObjectRequest.read_mask)
}

// -------------------------------------------------------------------

// GetObjectRequest

// string bucket = 1 [(.google.api.field_behavior) = REQUIRED];
inline void GetObjectRequest::clear_bucket() {
  _impl_.bucket_.ClearToEmpty();
}
inline const std::string& GetObjectRequest::bucket() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.GetObjectRequest.bucket)
  return _internal_bucket();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetObjectRequest::set_bucket(ArgT0&& arg0, ArgT... args) {
 
 _impl_.bucket_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.GetObjectRequest.bucket)
}
inline std::string* GetObjectRequest::mutable_bucket() {
  std::string* _s = _internal_mutable_bucket();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.GetObjectRequest.bucket)
  return _s;
}
inline const std::string& GetObjectRequest::_internal_bucket() const {
  return _impl_.bucket_.Get();
}
inline void GetObjectRequest::_internal_set_bucket(const std::string& value) {
  
  _impl_.bucket_.Set(value, GetArenaForAllocation());
}
inline std::string* GetObjectRequest::_internal_mutable_bucket() {
  
  return _impl_.bucket_.Mutable(GetArenaForAllocation());
}
inline std::string* GetObjectRequest::release_bucket() {
  // @@protoc_insertion_point(field_release:google.storage.v2.GetObjectRequest.bucket)
  return _impl_.bucket_.Release();
}
inline void GetObjectRequest::set_allocated_bucket(std::string* bucket) {
  if (bucket != nullptr) {
    
  } else {
    
  }
  _impl_.bucket_.SetAllocated(bucket, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bucket_.IsDefault()) {
    _impl_.bucket_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.GetObjectRequest.bucket)
}

// string object = 2 [(.google.api.field_behavior) = REQUIRED];
inline void GetObjectRequest::clear_object() {
  _impl_.object_.ClearToEmpty();
}
inline const std::string& GetObjectRequest::object() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.GetObjectRequest.object)
  return _internal_object();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetObjectRequest::set_object(ArgT0&& arg0, ArgT... args) {
 
 _impl_.object_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.GetObjectRequest.object)
}
inline std::string* GetObjectRequest::mutable_object() {
  std::string* _s = _internal_mutable_object();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.GetObjectRequest.object)
  return _s;
}
inline const std::string& GetObjectRequest::_internal_object() const {
  return _impl_.object_.Get();
}
inline void GetObjectRequest::_internal_set_object(const std::string& value) {
  
  _impl_.object_.Set(value, GetArenaForAllocation());
}
inline std::string* GetObjectRequest::_internal_mutable_object() {
  
  return _impl_.object_.Mutable(GetArenaForAllocation());
}
inline std::string* GetObjectRequest::release_object() {
  // @@protoc_insertion_point(field_release:google.storage.v2.GetObjectRequest.object)
  return _impl_.object_.Release();
}
inline void GetObjectRequest::set_allocated_object(std::string* object) {
  if (object != nullptr) {
    
  } else {
    
  }
  _impl_.object_.SetAllocated(object, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.object_.IsDefault()) {
    _impl_.object_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.GetObjectRequest.object)
}

// int64 generation = 3;
inline void GetObjectRequest::clear_generation() {
  _impl_.generation_ = int64_t{0};
}
inline int64_t GetObjectRequest::_internal_generation() const {
  return _impl_.generation_;
}
inline int64_t GetObjectRequest::generation() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.GetObjectRequest.generation)
  return _internal_generation();
}
inline void GetObjectRequest::_internal_set_generation(int64_t value) {
  
  _impl_.generation_ = value;
}
inline void GetObjectRequest::set_generation(int64_t value) {
  _internal_set_generation(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.GetObjectRequest.generation)
}

// optional int64 if_generation_match = 4;
inline bool GetObjectRequest::_internal_has_if_generation_match() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GetObjectRequest::has_if_generation_match() const {
  return _internal_has_if_generation_match();
}
inline void GetObjectRequest::clear_if_generation_match() {
  _impl_.if_generation_match_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int64_t GetObjectRequest::_internal_if_generation_match() const {
  return _impl_.if_generation_match_;
}
inline int64_t GetObjectRequest::if_generation_match() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.GetObjectRequest.if_generation_match)
  return _internal_if_generation_match();
}
inline void GetObjectRequest::_internal_set_if_generation_match(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.if_generation_match_ = value;
}
inline void GetObjectRequest::set_if_generation_match(int64_t value) {
  _internal_set_if_generation_match(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.GetObjectRequest.if_generation_match)
}

// optional int64 if_generation_not_match = 5;
inline bool GetObjectRequest::_internal_has_if_generation_not_match() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GetObjectRequest::has_if_generation_not_match() const {
  return _internal_has_if_generation_not_match();
}
inline void GetObjectRequest::clear_if_generation_not_match() {
  _impl_.if_generation_not_match_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int64_t GetObjectRequest::_internal_if_generation_not_match() const {
  return _impl_.if_generation_not_match_;
}
inline int64_t GetObjectRequest::if_generation_not_match() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.GetObjectRequest.if_generation_not_match)
  return _internal_if_generation_not_match();
}
inline void GetObjectRequest::_internal_set_if_generation_not_match(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.if_generation_not_match_ = value;
}
inline void GetObjectRequest::set_if_generation_not_match(int64_t value) {
  _internal_set_if_generation_not_match(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.GetObjectRequest.if_generation_not_match)
}

// optional int64 if_metageneration_match = 6;
inline bool GetObjectRequest::_internal_has_if_metageneration_match() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GetObjectRequest::has_if_metageneration_match() const {
  return _internal_has_if_metageneration_match();
}
inline void GetObjectRequest::clear_if_metageneration_match() {
  _impl_.if_metageneration_match_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int64_t GetObjectRequest::_internal_if_metageneration_match() const {
  return _impl_.if_metageneration_match_;
}
inline int64_t GetObjectRequest::if_metageneration_match() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.GetObjectRequest.if_metageneration_match)
  return _internal_if_metageneration_match();
}
inline void GetObjectRequest::_internal_set_if_metageneration_match(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.if_metageneration_match_ = value;
}
inline void GetObjectRequest::set_if_metageneration_match(int64_t value) {
  _internal_set_if_metageneration_match(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.GetObjectRequest.if_metageneration_match)
}

// optional int64 if_metageneration_not_match = 7;
inline bool GetObjectRequest::_internal_has_if_metageneration_not_match() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool GetObjectRequest::has_if_metageneration_not_match() const {
  return _internal_has_if_metageneration_not_match();
}
inline void GetObjectRequest::clear_if_metageneration_not_match() {
  _impl_.if_metageneration_not_match_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int64_t GetObjectRequest::_internal_if_metageneration_not_match() const {
  return _impl_.if_metageneration_not_match_;
}
inline int64_t GetObjectRequest::if_metageneration_not_match() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.GetObjectRequest.if_metageneration_not_match)
  return _internal_if_metageneration_not_match();
}
inline void GetObjectRequest::_internal_set_if_metageneration_not_match(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.if_metageneration_not_match_ = value;
}
inline void GetObjectRequest::set_if_metageneration_not_match(int64_t value) {
  _internal_set_if_metageneration_not_match(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.GetObjectRequest.if_metageneration_not_match)
}

// .google.storage.v2.CommonObjectRequestParams common_object_request_params = 8;
inline bool GetObjectRequest::_internal_has_common_object_request_params() const {
  return this != internal_default_instance() && _impl_.common_object_request_params_ != nullptr;
}
inline bool GetObjectRequest::has_common_object_request_params() const {
  return _internal_has_common_object_request_params();
}
inline void GetObjectRequest::clear_common_object_request_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.common_object_request_params_ != nullptr) {
    delete _impl_.common_object_request_params_;
  }
  _impl_.common_object_request_params_ = nullptr;
}
inline const ::google::storage::v2::CommonObjectRequestParams& GetObjectRequest::_internal_common_object_request_params() const {
  const ::google::storage::v2::CommonObjectRequestParams* p = _impl_.common_object_request_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::storage::v2::CommonObjectRequestParams&>(
      ::google::storage::v2::_CommonObjectRequestParams_default_instance_);
}
inline const ::google::storage::v2::CommonObjectRequestParams& GetObjectRequest::common_object_request_params() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.GetObjectRequest.common_object_request_params)
  return _internal_common_object_request_params();
}
inline void GetObjectRequest::unsafe_arena_set_allocated_common_object_request_params(
    ::google::storage::v2::CommonObjectRequestParams* common_object_request_params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.common_object_request_params_);
  }
  _impl_.common_object_request_params_ = common_object_request_params;
  if (common_object_request_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.GetObjectRequest.common_object_request_params)
}
inline ::google::storage::v2::CommonObjectRequestParams* GetObjectRequest::release_common_object_request_params() {
  
  ::google::storage::v2::CommonObjectRequestParams* temp = _impl_.common_object_request_params_;
  _impl_.common_object_request_params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::storage::v2::CommonObjectRequestParams* GetObjectRequest::unsafe_arena_release_common_object_request_params() {
  // @@protoc_insertion_point(field_release:google.storage.v2.GetObjectRequest.common_object_request_params)
  
  ::google::storage::v2::CommonObjectRequestParams* temp = _impl_.common_object_request_params_;
  _impl_.common_object_request_params_ = nullptr;
  return temp;
}
inline ::google::storage::v2::CommonObjectRequestParams* GetObjectRequest::_internal_mutable_common_object_request_params() {
  
  if (_impl_.common_object_request_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::storage::v2::CommonObjectRequestParams>(GetArenaForAllocation());
    _impl_.common_object_request_params_ = p;
  }
  return _impl_.common_object_request_params_;
}
inline ::google::storage::v2::CommonObjectRequestParams* GetObjectRequest::mutable_common_object_request_params() {
  ::google::storage::v2::CommonObjectRequestParams* _msg = _internal_mutable_common_object_request_params();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.GetObjectRequest.common_object_request_params)
  return _msg;
}
inline void GetObjectRequest::set_allocated_common_object_request_params(::google::storage::v2::CommonObjectRequestParams* common_object_request_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.common_object_request_params_;
  }
  if (common_object_request_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(common_object_request_params);
    if (message_arena != submessage_arena) {
      common_object_request_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common_object_request_params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.common_object_request_params_ = common_object_request_params;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.GetObjectRequest.common_object_request_params)
}

// optional .google.protobuf.FieldMask read_mask = 10;
inline bool GetObjectRequest::_internal_has_read_mask() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.read_mask_ != nullptr);
  return value;
}
inline bool GetObjectRequest::has_read_mask() const {
  return _internal_has_read_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& GetObjectRequest::_internal_read_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = _impl_.read_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& GetObjectRequest::read_mask() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.GetObjectRequest.read_mask)
  return _internal_read_mask();
}
inline void GetObjectRequest::unsafe_arena_set_allocated_read_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* read_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.read_mask_);
  }
  _impl_.read_mask_ = read_mask;
  if (read_mask) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.GetObjectRequest.read_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* GetObjectRequest::release_read_mask() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.read_mask_;
  _impl_.read_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* GetObjectRequest::unsafe_arena_release_read_mask() {
  // @@protoc_insertion_point(field_release:google.storage.v2.GetObjectRequest.read_mask)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.read_mask_;
  _impl_.read_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* GetObjectRequest::_internal_mutable_read_mask() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.read_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    _impl_.read_mask_ = p;
  }
  return _impl_.read_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* GetObjectRequest::mutable_read_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_read_mask();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.GetObjectRequest.read_mask)
  return _msg;
}
inline void GetObjectRequest::set_allocated_read_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* read_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.read_mask_);
  }
  if (read_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(read_mask));
    if (message_arena != submessage_arena) {
      read_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, read_mask, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.read_mask_ = read_mask;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.GetObjectRequest.read_mask)
}

// -------------------------------------------------------------------

// ReadObjectResponse

// .google.storage.v2.ChecksummedData checksummed_data = 1;
inline bool ReadObjectResponse::_internal_has_checksummed_data() const {
  return this != internal_default_instance() && _impl_.checksummed_data_ != nullptr;
}
inline bool ReadObjectResponse::has_checksummed_data() const {
  return _internal_has_checksummed_data();
}
inline void ReadObjectResponse::clear_checksummed_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.checksummed_data_ != nullptr) {
    delete _impl_.checksummed_data_;
  }
  _impl_.checksummed_data_ = nullptr;
}
inline const ::google::storage::v2::ChecksummedData& ReadObjectResponse::_internal_checksummed_data() const {
  const ::google::storage::v2::ChecksummedData* p = _impl_.checksummed_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::storage::v2::ChecksummedData&>(
      ::google::storage::v2::_ChecksummedData_default_instance_);
}
inline const ::google::storage::v2::ChecksummedData& ReadObjectResponse::checksummed_data() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ReadObjectResponse.checksummed_data)
  return _internal_checksummed_data();
}
inline void ReadObjectResponse::unsafe_arena_set_allocated_checksummed_data(
    ::google::storage::v2::ChecksummedData* checksummed_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.checksummed_data_);
  }
  _impl_.checksummed_data_ = checksummed_data;
  if (checksummed_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.ReadObjectResponse.checksummed_data)
}
inline ::google::storage::v2::ChecksummedData* ReadObjectResponse::release_checksummed_data() {
  
  ::google::storage::v2::ChecksummedData* temp = _impl_.checksummed_data_;
  _impl_.checksummed_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::storage::v2::ChecksummedData* ReadObjectResponse::unsafe_arena_release_checksummed_data() {
  // @@protoc_insertion_point(field_release:google.storage.v2.ReadObjectResponse.checksummed_data)
  
  ::google::storage::v2::ChecksummedData* temp = _impl_.checksummed_data_;
  _impl_.checksummed_data_ = nullptr;
  return temp;
}
inline ::google::storage::v2::ChecksummedData* ReadObjectResponse::_internal_mutable_checksummed_data() {
  
  if (_impl_.checksummed_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::storage::v2::ChecksummedData>(GetArenaForAllocation());
    _impl_.checksummed_data_ = p;
  }
  return _impl_.checksummed_data_;
}
inline ::google::storage::v2::ChecksummedData* ReadObjectResponse::mutable_checksummed_data() {
  ::google::storage::v2::ChecksummedData* _msg = _internal_mutable_checksummed_data();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.ReadObjectResponse.checksummed_data)
  return _msg;
}
inline void ReadObjectResponse::set_allocated_checksummed_data(::google::storage::v2::ChecksummedData* checksummed_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.checksummed_data_;
  }
  if (checksummed_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(checksummed_data);
    if (message_arena != submessage_arena) {
      checksummed_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, checksummed_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.checksummed_data_ = checksummed_data;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.ReadObjectResponse.checksummed_data)
}

// .google.storage.v2.ObjectChecksums object_checksums = 2;
inline bool ReadObjectResponse::_internal_has_object_checksums() const {
  return this != internal_default_instance() && _impl_.object_checksums_ != nullptr;
}
inline bool ReadObjectResponse::has_object_checksums() const {
  return _internal_has_object_checksums();
}
inline void ReadObjectResponse::clear_object_checksums() {
  if (GetArenaForAllocation() == nullptr && _impl_.object_checksums_ != nullptr) {
    delete _impl_.object_checksums_;
  }
  _impl_.object_checksums_ = nullptr;
}
inline const ::google::storage::v2::ObjectChecksums& ReadObjectResponse::_internal_object_checksums() const {
  const ::google::storage::v2::ObjectChecksums* p = _impl_.object_checksums_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::storage::v2::ObjectChecksums&>(
      ::google::storage::v2::_ObjectChecksums_default_instance_);
}
inline const ::google::storage::v2::ObjectChecksums& ReadObjectResponse::object_checksums() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ReadObjectResponse.object_checksums)
  return _internal_object_checksums();
}
inline void ReadObjectResponse::unsafe_arena_set_allocated_object_checksums(
    ::google::storage::v2::ObjectChecksums* object_checksums) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.object_checksums_);
  }
  _impl_.object_checksums_ = object_checksums;
  if (object_checksums) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.ReadObjectResponse.object_checksums)
}
inline ::google::storage::v2::ObjectChecksums* ReadObjectResponse::release_object_checksums() {
  
  ::google::storage::v2::ObjectChecksums* temp = _impl_.object_checksums_;
  _impl_.object_checksums_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::storage::v2::ObjectChecksums* ReadObjectResponse::unsafe_arena_release_object_checksums() {
  // @@protoc_insertion_point(field_release:google.storage.v2.ReadObjectResponse.object_checksums)
  
  ::google::storage::v2::ObjectChecksums* temp = _impl_.object_checksums_;
  _impl_.object_checksums_ = nullptr;
  return temp;
}
inline ::google::storage::v2::ObjectChecksums* ReadObjectResponse::_internal_mutable_object_checksums() {
  
  if (_impl_.object_checksums_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::storage::v2::ObjectChecksums>(GetArenaForAllocation());
    _impl_.object_checksums_ = p;
  }
  return _impl_.object_checksums_;
}
inline ::google::storage::v2::ObjectChecksums* ReadObjectResponse::mutable_object_checksums() {
  ::google::storage::v2::ObjectChecksums* _msg = _internal_mutable_object_checksums();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.ReadObjectResponse.object_checksums)
  return _msg;
}
inline void ReadObjectResponse::set_allocated_object_checksums(::google::storage::v2::ObjectChecksums* object_checksums) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.object_checksums_;
  }
  if (object_checksums) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(object_checksums);
    if (message_arena != submessage_arena) {
      object_checksums = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, object_checksums, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.object_checksums_ = object_checksums;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.ReadObjectResponse.object_checksums)
}

// .google.storage.v2.ContentRange content_range = 3;
inline bool ReadObjectResponse::_internal_has_content_range() const {
  return this != internal_default_instance() && _impl_.content_range_ != nullptr;
}
inline bool ReadObjectResponse::has_content_range() const {
  return _internal_has_content_range();
}
inline void ReadObjectResponse::clear_content_range() {
  if (GetArenaForAllocation() == nullptr && _impl_.content_range_ != nullptr) {
    delete _impl_.content_range_;
  }
  _impl_.content_range_ = nullptr;
}
inline const ::google::storage::v2::ContentRange& ReadObjectResponse::_internal_content_range() const {
  const ::google::storage::v2::ContentRange* p = _impl_.content_range_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::storage::v2::ContentRange&>(
      ::google::storage::v2::_ContentRange_default_instance_);
}
inline const ::google::storage::v2::ContentRange& ReadObjectResponse::content_range() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ReadObjectResponse.content_range)
  return _internal_content_range();
}
inline void ReadObjectResponse::unsafe_arena_set_allocated_content_range(
    ::google::storage::v2::ContentRange* content_range) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.content_range_);
  }
  _impl_.content_range_ = content_range;
  if (content_range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.ReadObjectResponse.content_range)
}
inline ::google::storage::v2::ContentRange* ReadObjectResponse::release_content_range() {
  
  ::google::storage::v2::ContentRange* temp = _impl_.content_range_;
  _impl_.content_range_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::storage::v2::ContentRange* ReadObjectResponse::unsafe_arena_release_content_range() {
  // @@protoc_insertion_point(field_release:google.storage.v2.ReadObjectResponse.content_range)
  
  ::google::storage::v2::ContentRange* temp = _impl_.content_range_;
  _impl_.content_range_ = nullptr;
  return temp;
}
inline ::google::storage::v2::ContentRange* ReadObjectResponse::_internal_mutable_content_range() {
  
  if (_impl_.content_range_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::storage::v2::ContentRange>(GetArenaForAllocation());
    _impl_.content_range_ = p;
  }
  return _impl_.content_range_;
}
inline ::google::storage::v2::ContentRange* ReadObjectResponse::mutable_content_range() {
  ::google::storage::v2::ContentRange* _msg = _internal_mutable_content_range();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.ReadObjectResponse.content_range)
  return _msg;
}
inline void ReadObjectResponse::set_allocated_content_range(::google::storage::v2::ContentRange* content_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.content_range_;
  }
  if (content_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(content_range);
    if (message_arena != submessage_arena) {
      content_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, content_range, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.content_range_ = content_range;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.ReadObjectResponse.content_range)
}

// .google.storage.v2.Object metadata = 4;
inline bool ReadObjectResponse::_internal_has_metadata() const {
  return this != internal_default_instance() && _impl_.metadata_ != nullptr;
}
inline bool ReadObjectResponse::has_metadata() const {
  return _internal_has_metadata();
}
inline void ReadObjectResponse::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
}
inline const ::google::storage::v2::Object& ReadObjectResponse::_internal_metadata() const {
  const ::google::storage::v2::Object* p = _impl_.metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::storage::v2::Object&>(
      ::google::storage::v2::_Object_default_instance_);
}
inline const ::google::storage::v2::Object& ReadObjectResponse::metadata() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ReadObjectResponse.metadata)
  return _internal_metadata();
}
inline void ReadObjectResponse::unsafe_arena_set_allocated_metadata(
    ::google::storage::v2::Object* metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metadata_);
  }
  _impl_.metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.ReadObjectResponse.metadata)
}
inline ::google::storage::v2::Object* ReadObjectResponse::release_metadata() {
  
  ::google::storage::v2::Object* temp = _impl_.metadata_;
  _impl_.metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::storage::v2::Object* ReadObjectResponse::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:google.storage.v2.ReadObjectResponse.metadata)
  
  ::google::storage::v2::Object* temp = _impl_.metadata_;
  _impl_.metadata_ = nullptr;
  return temp;
}
inline ::google::storage::v2::Object* ReadObjectResponse::_internal_mutable_metadata() {
  
  if (_impl_.metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::storage::v2::Object>(GetArenaForAllocation());
    _impl_.metadata_ = p;
  }
  return _impl_.metadata_;
}
inline ::google::storage::v2::Object* ReadObjectResponse::mutable_metadata() {
  ::google::storage::v2::Object* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.ReadObjectResponse.metadata)
  return _msg;
}
inline void ReadObjectResponse::set_allocated_metadata(::google::storage::v2::Object* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(metadata);
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.ReadObjectResponse.metadata)
}

// -------------------------------------------------------------------

// WriteObjectSpec

// .google.storage.v2.Object resource = 1;
inline bool WriteObjectSpec::_internal_has_resource() const {
  return this != internal_default_instance() && _impl_.resource_ != nullptr;
}
inline bool WriteObjectSpec::has_resource() const {
  return _internal_has_resource();
}
inline void WriteObjectSpec::clear_resource() {
  if (GetArenaForAllocation() == nullptr && _impl_.resource_ != nullptr) {
    delete _impl_.resource_;
  }
  _impl_.resource_ = nullptr;
}
inline const ::google::storage::v2::Object& WriteObjectSpec::_internal_resource() const {
  const ::google::storage::v2::Object* p = _impl_.resource_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::storage::v2::Object&>(
      ::google::storage::v2::_Object_default_instance_);
}
inline const ::google::storage::v2::Object& WriteObjectSpec::resource() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.WriteObjectSpec.resource)
  return _internal_resource();
}
inline void WriteObjectSpec::unsafe_arena_set_allocated_resource(
    ::google::storage::v2::Object* resource) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.resource_);
  }
  _impl_.resource_ = resource;
  if (resource) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.WriteObjectSpec.resource)
}
inline ::google::storage::v2::Object* WriteObjectSpec::release_resource() {
  
  ::google::storage::v2::Object* temp = _impl_.resource_;
  _impl_.resource_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::storage::v2::Object* WriteObjectSpec::unsafe_arena_release_resource() {
  // @@protoc_insertion_point(field_release:google.storage.v2.WriteObjectSpec.resource)
  
  ::google::storage::v2::Object* temp = _impl_.resource_;
  _impl_.resource_ = nullptr;
  return temp;
}
inline ::google::storage::v2::Object* WriteObjectSpec::_internal_mutable_resource() {
  
  if (_impl_.resource_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::storage::v2::Object>(GetArenaForAllocation());
    _impl_.resource_ = p;
  }
  return _impl_.resource_;
}
inline ::google::storage::v2::Object* WriteObjectSpec::mutable_resource() {
  ::google::storage::v2::Object* _msg = _internal_mutable_resource();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.WriteObjectSpec.resource)
  return _msg;
}
inline void WriteObjectSpec::set_allocated_resource(::google::storage::v2::Object* resource) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.resource_;
  }
  if (resource) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resource);
    if (message_arena != submessage_arena) {
      resource = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resource, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.resource_ = resource;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.WriteObjectSpec.resource)
}

// string predefined_acl = 7;
inline void WriteObjectSpec::clear_predefined_acl() {
  _impl_.predefined_acl_.ClearToEmpty();
}
inline const std::string& WriteObjectSpec::predefined_acl() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.WriteObjectSpec.predefined_acl)
  return _internal_predefined_acl();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WriteObjectSpec::set_predefined_acl(ArgT0&& arg0, ArgT... args) {
 
 _impl_.predefined_acl_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.WriteObjectSpec.predefined_acl)
}
inline std::string* WriteObjectSpec::mutable_predefined_acl() {
  std::string* _s = _internal_mutable_predefined_acl();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.WriteObjectSpec.predefined_acl)
  return _s;
}
inline const std::string& WriteObjectSpec::_internal_predefined_acl() const {
  return _impl_.predefined_acl_.Get();
}
inline void WriteObjectSpec::_internal_set_predefined_acl(const std::string& value) {
  
  _impl_.predefined_acl_.Set(value, GetArenaForAllocation());
}
inline std::string* WriteObjectSpec::_internal_mutable_predefined_acl() {
  
  return _impl_.predefined_acl_.Mutable(GetArenaForAllocation());
}
inline std::string* WriteObjectSpec::release_predefined_acl() {
  // @@protoc_insertion_point(field_release:google.storage.v2.WriteObjectSpec.predefined_acl)
  return _impl_.predefined_acl_.Release();
}
inline void WriteObjectSpec::set_allocated_predefined_acl(std::string* predefined_acl) {
  if (predefined_acl != nullptr) {
    
  } else {
    
  }
  _impl_.predefined_acl_.SetAllocated(predefined_acl, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.predefined_acl_.IsDefault()) {
    _impl_.predefined_acl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.WriteObjectSpec.predefined_acl)
}

// optional int64 if_generation_match = 3;
inline bool WriteObjectSpec::_internal_has_if_generation_match() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool WriteObjectSpec::has_if_generation_match() const {
  return _internal_has_if_generation_match();
}
inline void WriteObjectSpec::clear_if_generation_match() {
  _impl_.if_generation_match_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int64_t WriteObjectSpec::_internal_if_generation_match() const {
  return _impl_.if_generation_match_;
}
inline int64_t WriteObjectSpec::if_generation_match() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.WriteObjectSpec.if_generation_match)
  return _internal_if_generation_match();
}
inline void WriteObjectSpec::_internal_set_if_generation_match(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.if_generation_match_ = value;
}
inline void WriteObjectSpec::set_if_generation_match(int64_t value) {
  _internal_set_if_generation_match(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.WriteObjectSpec.if_generation_match)
}

// optional int64 if_generation_not_match = 4;
inline bool WriteObjectSpec::_internal_has_if_generation_not_match() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool WriteObjectSpec::has_if_generation_not_match() const {
  return _internal_has_if_generation_not_match();
}
inline void WriteObjectSpec::clear_if_generation_not_match() {
  _impl_.if_generation_not_match_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int64_t WriteObjectSpec::_internal_if_generation_not_match() const {
  return _impl_.if_generation_not_match_;
}
inline int64_t WriteObjectSpec::if_generation_not_match() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.WriteObjectSpec.if_generation_not_match)
  return _internal_if_generation_not_match();
}
inline void WriteObjectSpec::_internal_set_if_generation_not_match(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.if_generation_not_match_ = value;
}
inline void WriteObjectSpec::set_if_generation_not_match(int64_t value) {
  _internal_set_if_generation_not_match(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.WriteObjectSpec.if_generation_not_match)
}

// optional int64 if_metageneration_match = 5;
inline bool WriteObjectSpec::_internal_has_if_metageneration_match() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool WriteObjectSpec::has_if_metageneration_match() const {
  return _internal_has_if_metageneration_match();
}
inline void WriteObjectSpec::clear_if_metageneration_match() {
  _impl_.if_metageneration_match_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int64_t WriteObjectSpec::_internal_if_metageneration_match() const {
  return _impl_.if_metageneration_match_;
}
inline int64_t WriteObjectSpec::if_metageneration_match() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.WriteObjectSpec.if_metageneration_match)
  return _internal_if_metageneration_match();
}
inline void WriteObjectSpec::_internal_set_if_metageneration_match(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.if_metageneration_match_ = value;
}
inline void WriteObjectSpec::set_if_metageneration_match(int64_t value) {
  _internal_set_if_metageneration_match(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.WriteObjectSpec.if_metageneration_match)
}

// optional int64 if_metageneration_not_match = 6;
inline bool WriteObjectSpec::_internal_has_if_metageneration_not_match() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool WriteObjectSpec::has_if_metageneration_not_match() const {
  return _internal_has_if_metageneration_not_match();
}
inline void WriteObjectSpec::clear_if_metageneration_not_match() {
  _impl_.if_metageneration_not_match_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int64_t WriteObjectSpec::_internal_if_metageneration_not_match() const {
  return _impl_.if_metageneration_not_match_;
}
inline int64_t WriteObjectSpec::if_metageneration_not_match() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.WriteObjectSpec.if_metageneration_not_match)
  return _internal_if_metageneration_not_match();
}
inline void WriteObjectSpec::_internal_set_if_metageneration_not_match(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.if_metageneration_not_match_ = value;
}
inline void WriteObjectSpec::set_if_metageneration_not_match(int64_t value) {
  _internal_set_if_metageneration_not_match(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.WriteObjectSpec.if_metageneration_not_match)
}

// optional int64 object_size = 8;
inline bool WriteObjectSpec::_internal_has_object_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool WriteObjectSpec::has_object_size() const {
  return _internal_has_object_size();
}
inline void WriteObjectSpec::clear_object_size() {
  _impl_.object_size_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int64_t WriteObjectSpec::_internal_object_size() const {
  return _impl_.object_size_;
}
inline int64_t WriteObjectSpec::object_size() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.WriteObjectSpec.object_size)
  return _internal_object_size();
}
inline void WriteObjectSpec::_internal_set_object_size(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.object_size_ = value;
}
inline void WriteObjectSpec::set_object_size(int64_t value) {
  _internal_set_object_size(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.WriteObjectSpec.object_size)
}

// -------------------------------------------------------------------

// WriteObjectRequest

// string upload_id = 1;
inline bool WriteObjectRequest::_internal_has_upload_id() const {
  return first_message_case() == kUploadId;
}
inline bool WriteObjectRequest::has_upload_id() const {
  return _internal_has_upload_id();
}
inline void WriteObjectRequest::set_has_upload_id() {
  _impl_._oneof_case_[0] = kUploadId;
}
inline void WriteObjectRequest::clear_upload_id() {
  if (_internal_has_upload_id()) {
    _impl_.first_message_.upload_id_.Destroy();
    clear_has_first_message();
  }
}
inline const std::string& WriteObjectRequest::upload_id() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.WriteObjectRequest.upload_id)
  return _internal_upload_id();
}
template <typename ArgT0, typename... ArgT>
inline void WriteObjectRequest::set_upload_id(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_upload_id()) {
    clear_first_message();
    set_has_upload_id();
    _impl_.first_message_.upload_id_.InitDefault();
  }
  _impl_.first_message_.upload_id_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.WriteObjectRequest.upload_id)
}
inline std::string* WriteObjectRequest::mutable_upload_id() {
  std::string* _s = _internal_mutable_upload_id();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.WriteObjectRequest.upload_id)
  return _s;
}
inline const std::string& WriteObjectRequest::_internal_upload_id() const {
  if (_internal_has_upload_id()) {
    return _impl_.first_message_.upload_id_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void WriteObjectRequest::_internal_set_upload_id(const std::string& value) {
  if (!_internal_has_upload_id()) {
    clear_first_message();
    set_has_upload_id();
    _impl_.first_message_.upload_id_.InitDefault();
  }
  _impl_.first_message_.upload_id_.Set(value, GetArenaForAllocation());
}
inline std::string* WriteObjectRequest::_internal_mutable_upload_id() {
  if (!_internal_has_upload_id()) {
    clear_first_message();
    set_has_upload_id();
    _impl_.first_message_.upload_id_.InitDefault();
  }
  return _impl_.first_message_.upload_id_.Mutable(      GetArenaForAllocation());
}
inline std::string* WriteObjectRequest::release_upload_id() {
  // @@protoc_insertion_point(field_release:google.storage.v2.WriteObjectRequest.upload_id)
  if (_internal_has_upload_id()) {
    clear_has_first_message();
    return _impl_.first_message_.upload_id_.Release();
  } else {
    return nullptr;
  }
}
inline void WriteObjectRequest::set_allocated_upload_id(std::string* upload_id) {
  if (has_first_message()) {
    clear_first_message();
  }
  if (upload_id != nullptr) {
    set_has_upload_id();
    _impl_.first_message_.upload_id_.InitAllocated(upload_id, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.WriteObjectRequest.upload_id)
}

// .google.storage.v2.WriteObjectSpec write_object_spec = 2;
inline bool WriteObjectRequest::_internal_has_write_object_spec() const {
  return first_message_case() == kWriteObjectSpec;
}
inline bool WriteObjectRequest::has_write_object_spec() const {
  return _internal_has_write_object_spec();
}
inline void WriteObjectRequest::set_has_write_object_spec() {
  _impl_._oneof_case_[0] = kWriteObjectSpec;
}
inline void WriteObjectRequest::clear_write_object_spec() {
  if (_internal_has_write_object_spec()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.first_message_.write_object_spec_;
    }
    clear_has_first_message();
  }
}
inline ::google::storage::v2::WriteObjectSpec* WriteObjectRequest::release_write_object_spec() {
  // @@protoc_insertion_point(field_release:google.storage.v2.WriteObjectRequest.write_object_spec)
  if (_internal_has_write_object_spec()) {
    clear_has_first_message();
    ::google::storage::v2::WriteObjectSpec* temp = _impl_.first_message_.write_object_spec_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.first_message_.write_object_spec_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::storage::v2::WriteObjectSpec& WriteObjectRequest::_internal_write_object_spec() const {
  return _internal_has_write_object_spec()
      ? *_impl_.first_message_.write_object_spec_
      : reinterpret_cast< ::google::storage::v2::WriteObjectSpec&>(::google::storage::v2::_WriteObjectSpec_default_instance_);
}
inline const ::google::storage::v2::WriteObjectSpec& WriteObjectRequest::write_object_spec() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.WriteObjectRequest.write_object_spec)
  return _internal_write_object_spec();
}
inline ::google::storage::v2::WriteObjectSpec* WriteObjectRequest::unsafe_arena_release_write_object_spec() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.storage.v2.WriteObjectRequest.write_object_spec)
  if (_internal_has_write_object_spec()) {
    clear_has_first_message();
    ::google::storage::v2::WriteObjectSpec* temp = _impl_.first_message_.write_object_spec_;
    _impl_.first_message_.write_object_spec_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void WriteObjectRequest::unsafe_arena_set_allocated_write_object_spec(::google::storage::v2::WriteObjectSpec* write_object_spec) {
  clear_first_message();
  if (write_object_spec) {
    set_has_write_object_spec();
    _impl_.first_message_.write_object_spec_ = write_object_spec;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.WriteObjectRequest.write_object_spec)
}
inline ::google::storage::v2::WriteObjectSpec* WriteObjectRequest::_internal_mutable_write_object_spec() {
  if (!_internal_has_write_object_spec()) {
    clear_first_message();
    set_has_write_object_spec();
    _impl_.first_message_.write_object_spec_ = CreateMaybeMessage< ::google::storage::v2::WriteObjectSpec >(GetArenaForAllocation());
  }
  return _impl_.first_message_.write_object_spec_;
}
inline ::google::storage::v2::WriteObjectSpec* WriteObjectRequest::mutable_write_object_spec() {
  ::google::storage::v2::WriteObjectSpec* _msg = _internal_mutable_write_object_spec();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.WriteObjectRequest.write_object_spec)
  return _msg;
}

// int64 write_offset = 3 [(.google.api.field_behavior) = REQUIRED];
inline void WriteObjectRequest::clear_write_offset() {
  _impl_.write_offset_ = int64_t{0};
}
inline int64_t WriteObjectRequest::_internal_write_offset() const {
  return _impl_.write_offset_;
}
inline int64_t WriteObjectRequest::write_offset() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.WriteObjectRequest.write_offset)
  return _internal_write_offset();
}
inline void WriteObjectRequest::_internal_set_write_offset(int64_t value) {
  
  _impl_.write_offset_ = value;
}
inline void WriteObjectRequest::set_write_offset(int64_t value) {
  _internal_set_write_offset(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.WriteObjectRequest.write_offset)
}

// .google.storage.v2.ChecksummedData checksummed_data = 4;
inline bool WriteObjectRequest::_internal_has_checksummed_data() const {
  return data_case() == kChecksummedData;
}
inline bool WriteObjectRequest::has_checksummed_data() const {
  return _internal_has_checksummed_data();
}
inline void WriteObjectRequest::set_has_checksummed_data() {
  _impl_._oneof_case_[1] = kChecksummedData;
}
inline void WriteObjectRequest::clear_checksummed_data() {
  if (_internal_has_checksummed_data()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.checksummed_data_;
    }
    clear_has_data();
  }
}
inline ::google::storage::v2::ChecksummedData* WriteObjectRequest::release_checksummed_data() {
  // @@protoc_insertion_point(field_release:google.storage.v2.WriteObjectRequest.checksummed_data)
  if (_internal_has_checksummed_data()) {
    clear_has_data();
    ::google::storage::v2::ChecksummedData* temp = _impl_.data_.checksummed_data_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.checksummed_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::storage::v2::ChecksummedData& WriteObjectRequest::_internal_checksummed_data() const {
  return _internal_has_checksummed_data()
      ? *_impl_.data_.checksummed_data_
      : reinterpret_cast< ::google::storage::v2::ChecksummedData&>(::google::storage::v2::_ChecksummedData_default_instance_);
}
inline const ::google::storage::v2::ChecksummedData& WriteObjectRequest::checksummed_data() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.WriteObjectRequest.checksummed_data)
  return _internal_checksummed_data();
}
inline ::google::storage::v2::ChecksummedData* WriteObjectRequest::unsafe_arena_release_checksummed_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.storage.v2.WriteObjectRequest.checksummed_data)
  if (_internal_has_checksummed_data()) {
    clear_has_data();
    ::google::storage::v2::ChecksummedData* temp = _impl_.data_.checksummed_data_;
    _impl_.data_.checksummed_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void WriteObjectRequest::unsafe_arena_set_allocated_checksummed_data(::google::storage::v2::ChecksummedData* checksummed_data) {
  clear_data();
  if (checksummed_data) {
    set_has_checksummed_data();
    _impl_.data_.checksummed_data_ = checksummed_data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.WriteObjectRequest.checksummed_data)
}
inline ::google::storage::v2::ChecksummedData* WriteObjectRequest::_internal_mutable_checksummed_data() {
  if (!_internal_has_checksummed_data()) {
    clear_data();
    set_has_checksummed_data();
    _impl_.data_.checksummed_data_ = CreateMaybeMessage< ::google::storage::v2::ChecksummedData >(GetArenaForAllocation());
  }
  return _impl_.data_.checksummed_data_;
}
inline ::google::storage::v2::ChecksummedData* WriteObjectRequest::mutable_checksummed_data() {
  ::google::storage::v2::ChecksummedData* _msg = _internal_mutable_checksummed_data();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.WriteObjectRequest.checksummed_data)
  return _msg;
}

// .google.storage.v2.ObjectChecksums object_checksums = 6;
inline bool WriteObjectRequest::_internal_has_object_checksums() const {
  return this != internal_default_instance() && _impl_.object_checksums_ != nullptr;
}
inline bool WriteObjectRequest::has_object_checksums() const {
  return _internal_has_object_checksums();
}
inline void WriteObjectRequest::clear_object_checksums() {
  if (GetArenaForAllocation() == nullptr && _impl_.object_checksums_ != nullptr) {
    delete _impl_.object_checksums_;
  }
  _impl_.object_checksums_ = nullptr;
}
inline const ::google::storage::v2::ObjectChecksums& WriteObjectRequest::_internal_object_checksums() const {
  const ::google::storage::v2::ObjectChecksums* p = _impl_.object_checksums_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::storage::v2::ObjectChecksums&>(
      ::google::storage::v2::_ObjectChecksums_default_instance_);
}
inline const ::google::storage::v2::ObjectChecksums& WriteObjectRequest::object_checksums() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.WriteObjectRequest.object_checksums)
  return _internal_object_checksums();
}
inline void WriteObjectRequest::unsafe_arena_set_allocated_object_checksums(
    ::google::storage::v2::ObjectChecksums* object_checksums) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.object_checksums_);
  }
  _impl_.object_checksums_ = object_checksums;
  if (object_checksums) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.WriteObjectRequest.object_checksums)
}
inline ::google::storage::v2::ObjectChecksums* WriteObjectRequest::release_object_checksums() {
  
  ::google::storage::v2::ObjectChecksums* temp = _impl_.object_checksums_;
  _impl_.object_checksums_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::storage::v2::ObjectChecksums* WriteObjectRequest::unsafe_arena_release_object_checksums() {
  // @@protoc_insertion_point(field_release:google.storage.v2.WriteObjectRequest.object_checksums)
  
  ::google::storage::v2::ObjectChecksums* temp = _impl_.object_checksums_;
  _impl_.object_checksums_ = nullptr;
  return temp;
}
inline ::google::storage::v2::ObjectChecksums* WriteObjectRequest::_internal_mutable_object_checksums() {
  
  if (_impl_.object_checksums_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::storage::v2::ObjectChecksums>(GetArenaForAllocation());
    _impl_.object_checksums_ = p;
  }
  return _impl_.object_checksums_;
}
inline ::google::storage::v2::ObjectChecksums* WriteObjectRequest::mutable_object_checksums() {
  ::google::storage::v2::ObjectChecksums* _msg = _internal_mutable_object_checksums();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.WriteObjectRequest.object_checksums)
  return _msg;
}
inline void WriteObjectRequest::set_allocated_object_checksums(::google::storage::v2::ObjectChecksums* object_checksums) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.object_checksums_;
  }
  if (object_checksums) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(object_checksums);
    if (message_arena != submessage_arena) {
      object_checksums = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, object_checksums, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.object_checksums_ = object_checksums;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.WriteObjectRequest.object_checksums)
}

// bool finish_write = 7;
inline void WriteObjectRequest::clear_finish_write() {
  _impl_.finish_write_ = false;
}
inline bool WriteObjectRequest::_internal_finish_write() const {
  return _impl_.finish_write_;
}
inline bool WriteObjectRequest::finish_write() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.WriteObjectRequest.finish_write)
  return _internal_finish_write();
}
inline void WriteObjectRequest::_internal_set_finish_write(bool value) {
  
  _impl_.finish_write_ = value;
}
inline void WriteObjectRequest::set_finish_write(bool value) {
  _internal_set_finish_write(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.WriteObjectRequest.finish_write)
}

// .google.storage.v2.CommonObjectRequestParams common_object_request_params = 8;
inline bool WriteObjectRequest::_internal_has_common_object_request_params() const {
  return this != internal_default_instance() && _impl_.common_object_request_params_ != nullptr;
}
inline bool WriteObjectRequest::has_common_object_request_params() const {
  return _internal_has_common_object_request_params();
}
inline void WriteObjectRequest::clear_common_object_request_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.common_object_request_params_ != nullptr) {
    delete _impl_.common_object_request_params_;
  }
  _impl_.common_object_request_params_ = nullptr;
}
inline const ::google::storage::v2::CommonObjectRequestParams& WriteObjectRequest::_internal_common_object_request_params() const {
  const ::google::storage::v2::CommonObjectRequestParams* p = _impl_.common_object_request_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::storage::v2::CommonObjectRequestParams&>(
      ::google::storage::v2::_CommonObjectRequestParams_default_instance_);
}
inline const ::google::storage::v2::CommonObjectRequestParams& WriteObjectRequest::common_object_request_params() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.WriteObjectRequest.common_object_request_params)
  return _internal_common_object_request_params();
}
inline void WriteObjectRequest::unsafe_arena_set_allocated_common_object_request_params(
    ::google::storage::v2::CommonObjectRequestParams* common_object_request_params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.common_object_request_params_);
  }
  _impl_.common_object_request_params_ = common_object_request_params;
  if (common_object_request_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.WriteObjectRequest.common_object_request_params)
}
inline ::google::storage::v2::CommonObjectRequestParams* WriteObjectRequest::release_common_object_request_params() {
  
  ::google::storage::v2::CommonObjectRequestParams* temp = _impl_.common_object_request_params_;
  _impl_.common_object_request_params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::storage::v2::CommonObjectRequestParams* WriteObjectRequest::unsafe_arena_release_common_object_request_params() {
  // @@protoc_insertion_point(field_release:google.storage.v2.WriteObjectRequest.common_object_request_params)
  
  ::google::storage::v2::CommonObjectRequestParams* temp = _impl_.common_object_request_params_;
  _impl_.common_object_request_params_ = nullptr;
  return temp;
}
inline ::google::storage::v2::CommonObjectRequestParams* WriteObjectRequest::_internal_mutable_common_object_request_params() {
  
  if (_impl_.common_object_request_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::storage::v2::CommonObjectRequestParams>(GetArenaForAllocation());
    _impl_.common_object_request_params_ = p;
  }
  return _impl_.common_object_request_params_;
}
inline ::google::storage::v2::CommonObjectRequestParams* WriteObjectRequest::mutable_common_object_request_params() {
  ::google::storage::v2::CommonObjectRequestParams* _msg = _internal_mutable_common_object_request_params();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.WriteObjectRequest.common_object_request_params)
  return _msg;
}
inline void WriteObjectRequest::set_allocated_common_object_request_params(::google::storage::v2::CommonObjectRequestParams* common_object_request_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.common_object_request_params_;
  }
  if (common_object_request_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(common_object_request_params);
    if (message_arena != submessage_arena) {
      common_object_request_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common_object_request_params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.common_object_request_params_ = common_object_request_params;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.WriteObjectRequest.common_object_request_params)
}

inline bool WriteObjectRequest::has_first_message() const {
  return first_message_case() != FIRST_MESSAGE_NOT_SET;
}
inline void WriteObjectRequest::clear_has_first_message() {
  _impl_._oneof_case_[0] = FIRST_MESSAGE_NOT_SET;
}
inline bool WriteObjectRequest::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void WriteObjectRequest::clear_has_data() {
  _impl_._oneof_case_[1] = DATA_NOT_SET;
}
inline WriteObjectRequest::FirstMessageCase WriteObjectRequest::first_message_case() const {
  return WriteObjectRequest::FirstMessageCase(_impl_._oneof_case_[0]);
}
inline WriteObjectRequest::DataCase WriteObjectRequest::data_case() const {
  return WriteObjectRequest::DataCase(_impl_._oneof_case_[1]);
}
// -------------------------------------------------------------------

// WriteObjectResponse

// int64 persisted_size = 1;
inline bool WriteObjectResponse::_internal_has_persisted_size() const {
  return write_status_case() == kPersistedSize;
}
inline bool WriteObjectResponse::has_persisted_size() const {
  return _internal_has_persisted_size();
}
inline void WriteObjectResponse::set_has_persisted_size() {
  _impl_._oneof_case_[0] = kPersistedSize;
}
inline void WriteObjectResponse::clear_persisted_size() {
  if (_internal_has_persisted_size()) {
    _impl_.write_status_.persisted_size_ = int64_t{0};
    clear_has_write_status();
  }
}
inline int64_t WriteObjectResponse::_internal_persisted_size() const {
  if (_internal_has_persisted_size()) {
    return _impl_.write_status_.persisted_size_;
  }
  return int64_t{0};
}
inline void WriteObjectResponse::_internal_set_persisted_size(int64_t value) {
  if (!_internal_has_persisted_size()) {
    clear_write_status();
    set_has_persisted_size();
  }
  _impl_.write_status_.persisted_size_ = value;
}
inline int64_t WriteObjectResponse::persisted_size() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.WriteObjectResponse.persisted_size)
  return _internal_persisted_size();
}
inline void WriteObjectResponse::set_persisted_size(int64_t value) {
  _internal_set_persisted_size(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.WriteObjectResponse.persisted_size)
}

// .google.storage.v2.Object resource = 2;
inline bool WriteObjectResponse::_internal_has_resource() const {
  return write_status_case() == kResource;
}
inline bool WriteObjectResponse::has_resource() const {
  return _internal_has_resource();
}
inline void WriteObjectResponse::set_has_resource() {
  _impl_._oneof_case_[0] = kResource;
}
inline void WriteObjectResponse::clear_resource() {
  if (_internal_has_resource()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.write_status_.resource_;
    }
    clear_has_write_status();
  }
}
inline ::google::storage::v2::Object* WriteObjectResponse::release_resource() {
  // @@protoc_insertion_point(field_release:google.storage.v2.WriteObjectResponse.resource)
  if (_internal_has_resource()) {
    clear_has_write_status();
    ::google::storage::v2::Object* temp = _impl_.write_status_.resource_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.write_status_.resource_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::storage::v2::Object& WriteObjectResponse::_internal_resource() const {
  return _internal_has_resource()
      ? *_impl_.write_status_.resource_
      : reinterpret_cast< ::google::storage::v2::Object&>(::google::storage::v2::_Object_default_instance_);
}
inline const ::google::storage::v2::Object& WriteObjectResponse::resource() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.WriteObjectResponse.resource)
  return _internal_resource();
}
inline ::google::storage::v2::Object* WriteObjectResponse::unsafe_arena_release_resource() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.storage.v2.WriteObjectResponse.resource)
  if (_internal_has_resource()) {
    clear_has_write_status();
    ::google::storage::v2::Object* temp = _impl_.write_status_.resource_;
    _impl_.write_status_.resource_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void WriteObjectResponse::unsafe_arena_set_allocated_resource(::google::storage::v2::Object* resource) {
  clear_write_status();
  if (resource) {
    set_has_resource();
    _impl_.write_status_.resource_ = resource;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.WriteObjectResponse.resource)
}
inline ::google::storage::v2::Object* WriteObjectResponse::_internal_mutable_resource() {
  if (!_internal_has_resource()) {
    clear_write_status();
    set_has_resource();
    _impl_.write_status_.resource_ = CreateMaybeMessage< ::google::storage::v2::Object >(GetArenaForAllocation());
  }
  return _impl_.write_status_.resource_;
}
inline ::google::storage::v2::Object* WriteObjectResponse::mutable_resource() {
  ::google::storage::v2::Object* _msg = _internal_mutable_resource();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.WriteObjectResponse.resource)
  return _msg;
}

inline bool WriteObjectResponse::has_write_status() const {
  return write_status_case() != WRITE_STATUS_NOT_SET;
}
inline void WriteObjectResponse::clear_has_write_status() {
  _impl_._oneof_case_[0] = WRITE_STATUS_NOT_SET;
}
inline WriteObjectResponse::WriteStatusCase WriteObjectResponse::write_status_case() const {
  return WriteObjectResponse::WriteStatusCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ListObjectsRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListObjectsRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& ListObjectsRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ListObjectsRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListObjectsRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.ListObjectsRequest.parent)
}
inline std::string* ListObjectsRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.ListObjectsRequest.parent)
  return _s;
}
inline const std::string& ListObjectsRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void ListObjectsRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* ListObjectsRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* ListObjectsRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.storage.v2.ListObjectsRequest.parent)
  return _impl_.parent_.Release();
}
inline void ListObjectsRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.ListObjectsRequest.parent)
}

// int32 page_size = 2;
inline void ListObjectsRequest::clear_page_size() {
  _impl_.page_size_ = 0;
}
inline int32_t ListObjectsRequest::_internal_page_size() const {
  return _impl_.page_size_;
}
inline int32_t ListObjectsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ListObjectsRequest.page_size)
  return _internal_page_size();
}
inline void ListObjectsRequest::_internal_set_page_size(int32_t value) {
  
  _impl_.page_size_ = value;
}
inline void ListObjectsRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.ListObjectsRequest.page_size)
}

// string page_token = 3;
inline void ListObjectsRequest::clear_page_token() {
  _impl_.page_token_.ClearToEmpty();
}
inline const std::string& ListObjectsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ListObjectsRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListObjectsRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.ListObjectsRequest.page_token)
}
inline std::string* ListObjectsRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.ListObjectsRequest.page_token)
  return _s;
}
inline const std::string& ListObjectsRequest::_internal_page_token() const {
  return _impl_.page_token_.Get();
}
inline void ListObjectsRequest::_internal_set_page_token(const std::string& value) {
  
  _impl_.page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListObjectsRequest::_internal_mutable_page_token() {
  
  return _impl_.page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListObjectsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.storage.v2.ListObjectsRequest.page_token)
  return _impl_.page_token_.Release();
}
inline void ListObjectsRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  _impl_.page_token_.SetAllocated(page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.page_token_.IsDefault()) {
    _impl_.page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.ListObjectsRequest.page_token)
}

// string delimiter = 4;
inline void ListObjectsRequest::clear_delimiter() {
  _impl_.delimiter_.ClearToEmpty();
}
inline const std::string& ListObjectsRequest::delimiter() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ListObjectsRequest.delimiter)
  return _internal_delimiter();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListObjectsRequest::set_delimiter(ArgT0&& arg0, ArgT... args) {
 
 _impl_.delimiter_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.ListObjectsRequest.delimiter)
}
inline std::string* ListObjectsRequest::mutable_delimiter() {
  std::string* _s = _internal_mutable_delimiter();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.ListObjectsRequest.delimiter)
  return _s;
}
inline const std::string& ListObjectsRequest::_internal_delimiter() const {
  return _impl_.delimiter_.Get();
}
inline void ListObjectsRequest::_internal_set_delimiter(const std::string& value) {
  
  _impl_.delimiter_.Set(value, GetArenaForAllocation());
}
inline std::string* ListObjectsRequest::_internal_mutable_delimiter() {
  
  return _impl_.delimiter_.Mutable(GetArenaForAllocation());
}
inline std::string* ListObjectsRequest::release_delimiter() {
  // @@protoc_insertion_point(field_release:google.storage.v2.ListObjectsRequest.delimiter)
  return _impl_.delimiter_.Release();
}
inline void ListObjectsRequest::set_allocated_delimiter(std::string* delimiter) {
  if (delimiter != nullptr) {
    
  } else {
    
  }
  _impl_.delimiter_.SetAllocated(delimiter, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.delimiter_.IsDefault()) {
    _impl_.delimiter_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.ListObjectsRequest.delimiter)
}

// bool include_trailing_delimiter = 5;
inline void ListObjectsRequest::clear_include_trailing_delimiter() {
  _impl_.include_trailing_delimiter_ = false;
}
inline bool ListObjectsRequest::_internal_include_trailing_delimiter() const {
  return _impl_.include_trailing_delimiter_;
}
inline bool ListObjectsRequest::include_trailing_delimiter() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ListObjectsRequest.include_trailing_delimiter)
  return _internal_include_trailing_delimiter();
}
inline void ListObjectsRequest::_internal_set_include_trailing_delimiter(bool value) {
  
  _impl_.include_trailing_delimiter_ = value;
}
inline void ListObjectsRequest::set_include_trailing_delimiter(bool value) {
  _internal_set_include_trailing_delimiter(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.ListObjectsRequest.include_trailing_delimiter)
}

// string prefix = 6;
inline void ListObjectsRequest::clear_prefix() {
  _impl_.prefix_.ClearToEmpty();
}
inline const std::string& ListObjectsRequest::prefix() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ListObjectsRequest.prefix)
  return _internal_prefix();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListObjectsRequest::set_prefix(ArgT0&& arg0, ArgT... args) {
 
 _impl_.prefix_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.ListObjectsRequest.prefix)
}
inline std::string* ListObjectsRequest::mutable_prefix() {
  std::string* _s = _internal_mutable_prefix();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.ListObjectsRequest.prefix)
  return _s;
}
inline const std::string& ListObjectsRequest::_internal_prefix() const {
  return _impl_.prefix_.Get();
}
inline void ListObjectsRequest::_internal_set_prefix(const std::string& value) {
  
  _impl_.prefix_.Set(value, GetArenaForAllocation());
}
inline std::string* ListObjectsRequest::_internal_mutable_prefix() {
  
  return _impl_.prefix_.Mutable(GetArenaForAllocation());
}
inline std::string* ListObjectsRequest::release_prefix() {
  // @@protoc_insertion_point(field_release:google.storage.v2.ListObjectsRequest.prefix)
  return _impl_.prefix_.Release();
}
inline void ListObjectsRequest::set_allocated_prefix(std::string* prefix) {
  if (prefix != nullptr) {
    
  } else {
    
  }
  _impl_.prefix_.SetAllocated(prefix, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.prefix_.IsDefault()) {
    _impl_.prefix_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.ListObjectsRequest.prefix)
}

// bool versions = 7;
inline void ListObjectsRequest::clear_versions() {
  _impl_.versions_ = false;
}
inline bool ListObjectsRequest::_internal_versions() const {
  return _impl_.versions_;
}
inline bool ListObjectsRequest::versions() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ListObjectsRequest.versions)
  return _internal_versions();
}
inline void ListObjectsRequest::_internal_set_versions(bool value) {
  
  _impl_.versions_ = value;
}
inline void ListObjectsRequest::set_versions(bool value) {
  _internal_set_versions(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.ListObjectsRequest.versions)
}

// optional .google.protobuf.FieldMask read_mask = 8;
inline bool ListObjectsRequest::_internal_has_read_mask() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.read_mask_ != nullptr);
  return value;
}
inline bool ListObjectsRequest::has_read_mask() const {
  return _internal_has_read_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& ListObjectsRequest::_internal_read_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = _impl_.read_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& ListObjectsRequest::read_mask() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ListObjectsRequest.read_mask)
  return _internal_read_mask();
}
inline void ListObjectsRequest::unsafe_arena_set_allocated_read_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* read_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.read_mask_);
  }
  _impl_.read_mask_ = read_mask;
  if (read_mask) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.ListObjectsRequest.read_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* ListObjectsRequest::release_read_mask() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.read_mask_;
  _impl_.read_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* ListObjectsRequest::unsafe_arena_release_read_mask() {
  // @@protoc_insertion_point(field_release:google.storage.v2.ListObjectsRequest.read_mask)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.read_mask_;
  _impl_.read_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* ListObjectsRequest::_internal_mutable_read_mask() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.read_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    _impl_.read_mask_ = p;
  }
  return _impl_.read_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* ListObjectsRequest::mutable_read_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_read_mask();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.ListObjectsRequest.read_mask)
  return _msg;
}
inline void ListObjectsRequest::set_allocated_read_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* read_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.read_mask_);
  }
  if (read_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(read_mask));
    if (message_arena != submessage_arena) {
      read_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, read_mask, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.read_mask_ = read_mask;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.ListObjectsRequest.read_mask)
}

// string lexicographic_start = 10;
inline void ListObjectsRequest::clear_lexicographic_start() {
  _impl_.lexicographic_start_.ClearToEmpty();
}
inline const std::string& ListObjectsRequest::lexicographic_start() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ListObjectsRequest.lexicographic_start)
  return _internal_lexicographic_start();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListObjectsRequest::set_lexicographic_start(ArgT0&& arg0, ArgT... args) {
 
 _impl_.lexicographic_start_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.ListObjectsRequest.lexicographic_start)
}
inline std::string* ListObjectsRequest::mutable_lexicographic_start() {
  std::string* _s = _internal_mutable_lexicographic_start();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.ListObjectsRequest.lexicographic_start)
  return _s;
}
inline const std::string& ListObjectsRequest::_internal_lexicographic_start() const {
  return _impl_.lexicographic_start_.Get();
}
inline void ListObjectsRequest::_internal_set_lexicographic_start(const std::string& value) {
  
  _impl_.lexicographic_start_.Set(value, GetArenaForAllocation());
}
inline std::string* ListObjectsRequest::_internal_mutable_lexicographic_start() {
  
  return _impl_.lexicographic_start_.Mutable(GetArenaForAllocation());
}
inline std::string* ListObjectsRequest::release_lexicographic_start() {
  // @@protoc_insertion_point(field_release:google.storage.v2.ListObjectsRequest.lexicographic_start)
  return _impl_.lexicographic_start_.Release();
}
inline void ListObjectsRequest::set_allocated_lexicographic_start(std::string* lexicographic_start) {
  if (lexicographic_start != nullptr) {
    
  } else {
    
  }
  _impl_.lexicographic_start_.SetAllocated(lexicographic_start, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.lexicographic_start_.IsDefault()) {
    _impl_.lexicographic_start_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.ListObjectsRequest.lexicographic_start)
}

// string lexicographic_end = 11;
inline void ListObjectsRequest::clear_lexicographic_end() {
  _impl_.lexicographic_end_.ClearToEmpty();
}
inline const std::string& ListObjectsRequest::lexicographic_end() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ListObjectsRequest.lexicographic_end)
  return _internal_lexicographic_end();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListObjectsRequest::set_lexicographic_end(ArgT0&& arg0, ArgT... args) {
 
 _impl_.lexicographic_end_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.ListObjectsRequest.lexicographic_end)
}
inline std::string* ListObjectsRequest::mutable_lexicographic_end() {
  std::string* _s = _internal_mutable_lexicographic_end();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.ListObjectsRequest.lexicographic_end)
  return _s;
}
inline const std::string& ListObjectsRequest::_internal_lexicographic_end() const {
  return _impl_.lexicographic_end_.Get();
}
inline void ListObjectsRequest::_internal_set_lexicographic_end(const std::string& value) {
  
  _impl_.lexicographic_end_.Set(value, GetArenaForAllocation());
}
inline std::string* ListObjectsRequest::_internal_mutable_lexicographic_end() {
  
  return _impl_.lexicographic_end_.Mutable(GetArenaForAllocation());
}
inline std::string* ListObjectsRequest::release_lexicographic_end() {
  // @@protoc_insertion_point(field_release:google.storage.v2.ListObjectsRequest.lexicographic_end)
  return _impl_.lexicographic_end_.Release();
}
inline void ListObjectsRequest::set_allocated_lexicographic_end(std::string* lexicographic_end) {
  if (lexicographic_end != nullptr) {
    
  } else {
    
  }
  _impl_.lexicographic_end_.SetAllocated(lexicographic_end, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.lexicographic_end_.IsDefault()) {
    _impl_.lexicographic_end_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.ListObjectsRequest.lexicographic_end)
}

// -------------------------------------------------------------------

// QueryWriteStatusRequest

// string upload_id = 1 [(.google.api.field_behavior) = REQUIRED];
inline void QueryWriteStatusRequest::clear_upload_id() {
  _impl_.upload_id_.ClearToEmpty();
}
inline const std::string& QueryWriteStatusRequest::upload_id() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.QueryWriteStatusRequest.upload_id)
  return _internal_upload_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QueryWriteStatusRequest::set_upload_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.upload_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.QueryWriteStatusRequest.upload_id)
}
inline std::string* QueryWriteStatusRequest::mutable_upload_id() {
  std::string* _s = _internal_mutable_upload_id();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.QueryWriteStatusRequest.upload_id)
  return _s;
}
inline const std::string& QueryWriteStatusRequest::_internal_upload_id() const {
  return _impl_.upload_id_.Get();
}
inline void QueryWriteStatusRequest::_internal_set_upload_id(const std::string& value) {
  
  _impl_.upload_id_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryWriteStatusRequest::_internal_mutable_upload_id() {
  
  return _impl_.upload_id_.Mutable(GetArenaForAllocation());
}
inline std::string* QueryWriteStatusRequest::release_upload_id() {
  // @@protoc_insertion_point(field_release:google.storage.v2.QueryWriteStatusRequest.upload_id)
  return _impl_.upload_id_.Release();
}
inline void QueryWriteStatusRequest::set_allocated_upload_id(std::string* upload_id) {
  if (upload_id != nullptr) {
    
  } else {
    
  }
  _impl_.upload_id_.SetAllocated(upload_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.upload_id_.IsDefault()) {
    _impl_.upload_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.QueryWriteStatusRequest.upload_id)
}

// .google.storage.v2.CommonObjectRequestParams common_object_request_params = 2;
inline bool QueryWriteStatusRequest::_internal_has_common_object_request_params() const {
  return this != internal_default_instance() && _impl_.common_object_request_params_ != nullptr;
}
inline bool QueryWriteStatusRequest::has_common_object_request_params() const {
  return _internal_has_common_object_request_params();
}
inline void QueryWriteStatusRequest::clear_common_object_request_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.common_object_request_params_ != nullptr) {
    delete _impl_.common_object_request_params_;
  }
  _impl_.common_object_request_params_ = nullptr;
}
inline const ::google::storage::v2::CommonObjectRequestParams& QueryWriteStatusRequest::_internal_common_object_request_params() const {
  const ::google::storage::v2::CommonObjectRequestParams* p = _impl_.common_object_request_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::storage::v2::CommonObjectRequestParams&>(
      ::google::storage::v2::_CommonObjectRequestParams_default_instance_);
}
inline const ::google::storage::v2::CommonObjectRequestParams& QueryWriteStatusRequest::common_object_request_params() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.QueryWriteStatusRequest.common_object_request_params)
  return _internal_common_object_request_params();
}
inline void QueryWriteStatusRequest::unsafe_arena_set_allocated_common_object_request_params(
    ::google::storage::v2::CommonObjectRequestParams* common_object_request_params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.common_object_request_params_);
  }
  _impl_.common_object_request_params_ = common_object_request_params;
  if (common_object_request_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.QueryWriteStatusRequest.common_object_request_params)
}
inline ::google::storage::v2::CommonObjectRequestParams* QueryWriteStatusRequest::release_common_object_request_params() {
  
  ::google::storage::v2::CommonObjectRequestParams* temp = _impl_.common_object_request_params_;
  _impl_.common_object_request_params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::storage::v2::CommonObjectRequestParams* QueryWriteStatusRequest::unsafe_arena_release_common_object_request_params() {
  // @@protoc_insertion_point(field_release:google.storage.v2.QueryWriteStatusRequest.common_object_request_params)
  
  ::google::storage::v2::CommonObjectRequestParams* temp = _impl_.common_object_request_params_;
  _impl_.common_object_request_params_ = nullptr;
  return temp;
}
inline ::google::storage::v2::CommonObjectRequestParams* QueryWriteStatusRequest::_internal_mutable_common_object_request_params() {
  
  if (_impl_.common_object_request_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::storage::v2::CommonObjectRequestParams>(GetArenaForAllocation());
    _impl_.common_object_request_params_ = p;
  }
  return _impl_.common_object_request_params_;
}
inline ::google::storage::v2::CommonObjectRequestParams* QueryWriteStatusRequest::mutable_common_object_request_params() {
  ::google::storage::v2::CommonObjectRequestParams* _msg = _internal_mutable_common_object_request_params();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.QueryWriteStatusRequest.common_object_request_params)
  return _msg;
}
inline void QueryWriteStatusRequest::set_allocated_common_object_request_params(::google::storage::v2::CommonObjectRequestParams* common_object_request_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.common_object_request_params_;
  }
  if (common_object_request_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(common_object_request_params);
    if (message_arena != submessage_arena) {
      common_object_request_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common_object_request_params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.common_object_request_params_ = common_object_request_params;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.QueryWriteStatusRequest.common_object_request_params)
}

// -------------------------------------------------------------------

// QueryWriteStatusResponse

// int64 persisted_size = 1;
inline bool QueryWriteStatusResponse::_internal_has_persisted_size() const {
  return write_status_case() == kPersistedSize;
}
inline bool QueryWriteStatusResponse::has_persisted_size() const {
  return _internal_has_persisted_size();
}
inline void QueryWriteStatusResponse::set_has_persisted_size() {
  _impl_._oneof_case_[0] = kPersistedSize;
}
inline void QueryWriteStatusResponse::clear_persisted_size() {
  if (_internal_has_persisted_size()) {
    _impl_.write_status_.persisted_size_ = int64_t{0};
    clear_has_write_status();
  }
}
inline int64_t QueryWriteStatusResponse::_internal_persisted_size() const {
  if (_internal_has_persisted_size()) {
    return _impl_.write_status_.persisted_size_;
  }
  return int64_t{0};
}
inline void QueryWriteStatusResponse::_internal_set_persisted_size(int64_t value) {
  if (!_internal_has_persisted_size()) {
    clear_write_status();
    set_has_persisted_size();
  }
  _impl_.write_status_.persisted_size_ = value;
}
inline int64_t QueryWriteStatusResponse::persisted_size() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.QueryWriteStatusResponse.persisted_size)
  return _internal_persisted_size();
}
inline void QueryWriteStatusResponse::set_persisted_size(int64_t value) {
  _internal_set_persisted_size(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.QueryWriteStatusResponse.persisted_size)
}

// .google.storage.v2.Object resource = 2;
inline bool QueryWriteStatusResponse::_internal_has_resource() const {
  return write_status_case() == kResource;
}
inline bool QueryWriteStatusResponse::has_resource() const {
  return _internal_has_resource();
}
inline void QueryWriteStatusResponse::set_has_resource() {
  _impl_._oneof_case_[0] = kResource;
}
inline void QueryWriteStatusResponse::clear_resource() {
  if (_internal_has_resource()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.write_status_.resource_;
    }
    clear_has_write_status();
  }
}
inline ::google::storage::v2::Object* QueryWriteStatusResponse::release_resource() {
  // @@protoc_insertion_point(field_release:google.storage.v2.QueryWriteStatusResponse.resource)
  if (_internal_has_resource()) {
    clear_has_write_status();
    ::google::storage::v2::Object* temp = _impl_.write_status_.resource_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.write_status_.resource_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::storage::v2::Object& QueryWriteStatusResponse::_internal_resource() const {
  return _internal_has_resource()
      ? *_impl_.write_status_.resource_
      : reinterpret_cast< ::google::storage::v2::Object&>(::google::storage::v2::_Object_default_instance_);
}
inline const ::google::storage::v2::Object& QueryWriteStatusResponse::resource() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.QueryWriteStatusResponse.resource)
  return _internal_resource();
}
inline ::google::storage::v2::Object* QueryWriteStatusResponse::unsafe_arena_release_resource() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.storage.v2.QueryWriteStatusResponse.resource)
  if (_internal_has_resource()) {
    clear_has_write_status();
    ::google::storage::v2::Object* temp = _impl_.write_status_.resource_;
    _impl_.write_status_.resource_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void QueryWriteStatusResponse::unsafe_arena_set_allocated_resource(::google::storage::v2::Object* resource) {
  clear_write_status();
  if (resource) {
    set_has_resource();
    _impl_.write_status_.resource_ = resource;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.QueryWriteStatusResponse.resource)
}
inline ::google::storage::v2::Object* QueryWriteStatusResponse::_internal_mutable_resource() {
  if (!_internal_has_resource()) {
    clear_write_status();
    set_has_resource();
    _impl_.write_status_.resource_ = CreateMaybeMessage< ::google::storage::v2::Object >(GetArenaForAllocation());
  }
  return _impl_.write_status_.resource_;
}
inline ::google::storage::v2::Object* QueryWriteStatusResponse::mutable_resource() {
  ::google::storage::v2::Object* _msg = _internal_mutable_resource();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.QueryWriteStatusResponse.resource)
  return _msg;
}

inline bool QueryWriteStatusResponse::has_write_status() const {
  return write_status_case() != WRITE_STATUS_NOT_SET;
}
inline void QueryWriteStatusResponse::clear_has_write_status() {
  _impl_._oneof_case_[0] = WRITE_STATUS_NOT_SET;
}
inline QueryWriteStatusResponse::WriteStatusCase QueryWriteStatusResponse::write_status_case() const {
  return QueryWriteStatusResponse::WriteStatusCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// RewriteObjectRequest

// string destination_name = 24 [(.google.api.field_behavior) = IMMUTABLE];
inline void RewriteObjectRequest::clear_destination_name() {
  _impl_.destination_name_.ClearToEmpty();
}
inline const std::string& RewriteObjectRequest::destination_name() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.RewriteObjectRequest.destination_name)
  return _internal_destination_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RewriteObjectRequest::set_destination_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.destination_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.RewriteObjectRequest.destination_name)
}
inline std::string* RewriteObjectRequest::mutable_destination_name() {
  std::string* _s = _internal_mutable_destination_name();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.RewriteObjectRequest.destination_name)
  return _s;
}
inline const std::string& RewriteObjectRequest::_internal_destination_name() const {
  return _impl_.destination_name_.Get();
}
inline void RewriteObjectRequest::_internal_set_destination_name(const std::string& value) {
  
  _impl_.destination_name_.Set(value, GetArenaForAllocation());
}
inline std::string* RewriteObjectRequest::_internal_mutable_destination_name() {
  
  return _impl_.destination_name_.Mutable(GetArenaForAllocation());
}
inline std::string* RewriteObjectRequest::release_destination_name() {
  // @@protoc_insertion_point(field_release:google.storage.v2.RewriteObjectRequest.destination_name)
  return _impl_.destination_name_.Release();
}
inline void RewriteObjectRequest::set_allocated_destination_name(std::string* destination_name) {
  if (destination_name != nullptr) {
    
  } else {
    
  }
  _impl_.destination_name_.SetAllocated(destination_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.destination_name_.IsDefault()) {
    _impl_.destination_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.RewriteObjectRequest.destination_name)
}

// string destination_bucket = 25 [(.google.api.field_behavior) = IMMUTABLE, (.google.api.resource_reference) = {
inline void RewriteObjectRequest::clear_destination_bucket() {
  _impl_.destination_bucket_.ClearToEmpty();
}
inline const std::string& RewriteObjectRequest::destination_bucket() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.RewriteObjectRequest.destination_bucket)
  return _internal_destination_bucket();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RewriteObjectRequest::set_destination_bucket(ArgT0&& arg0, ArgT... args) {
 
 _impl_.destination_bucket_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.RewriteObjectRequest.destination_bucket)
}
inline std::string* RewriteObjectRequest::mutable_destination_bucket() {
  std::string* _s = _internal_mutable_destination_bucket();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.RewriteObjectRequest.destination_bucket)
  return _s;
}
inline const std::string& RewriteObjectRequest::_internal_destination_bucket() const {
  return _impl_.destination_bucket_.Get();
}
inline void RewriteObjectRequest::_internal_set_destination_bucket(const std::string& value) {
  
  _impl_.destination_bucket_.Set(value, GetArenaForAllocation());
}
inline std::string* RewriteObjectRequest::_internal_mutable_destination_bucket() {
  
  return _impl_.destination_bucket_.Mutable(GetArenaForAllocation());
}
inline std::string* RewriteObjectRequest::release_destination_bucket() {
  // @@protoc_insertion_point(field_release:google.storage.v2.RewriteObjectRequest.destination_bucket)
  return _impl_.destination_bucket_.Release();
}
inline void RewriteObjectRequest::set_allocated_destination_bucket(std::string* destination_bucket) {
  if (destination_bucket != nullptr) {
    
  } else {
    
  }
  _impl_.destination_bucket_.SetAllocated(destination_bucket, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.destination_bucket_.IsDefault()) {
    _impl_.destination_bucket_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.RewriteObjectRequest.destination_bucket)
}

// string destination_kms_key = 27 [(.google.api.resource_reference) = {
inline void RewriteObjectRequest::clear_destination_kms_key() {
  _impl_.destination_kms_key_.ClearToEmpty();
}
inline const std::string& RewriteObjectRequest::destination_kms_key() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.RewriteObjectRequest.destination_kms_key)
  return _internal_destination_kms_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RewriteObjectRequest::set_destination_kms_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.destination_kms_key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.RewriteObjectRequest.destination_kms_key)
}
inline std::string* RewriteObjectRequest::mutable_destination_kms_key() {
  std::string* _s = _internal_mutable_destination_kms_key();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.RewriteObjectRequest.destination_kms_key)
  return _s;
}
inline const std::string& RewriteObjectRequest::_internal_destination_kms_key() const {
  return _impl_.destination_kms_key_.Get();
}
inline void RewriteObjectRequest::_internal_set_destination_kms_key(const std::string& value) {
  
  _impl_.destination_kms_key_.Set(value, GetArenaForAllocation());
}
inline std::string* RewriteObjectRequest::_internal_mutable_destination_kms_key() {
  
  return _impl_.destination_kms_key_.Mutable(GetArenaForAllocation());
}
inline std::string* RewriteObjectRequest::release_destination_kms_key() {
  // @@protoc_insertion_point(field_release:google.storage.v2.RewriteObjectRequest.destination_kms_key)
  return _impl_.destination_kms_key_.Release();
}
inline void RewriteObjectRequest::set_allocated_destination_kms_key(std::string* destination_kms_key) {
  if (destination_kms_key != nullptr) {
    
  } else {
    
  }
  _impl_.destination_kms_key_.SetAllocated(destination_kms_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.destination_kms_key_.IsDefault()) {
    _impl_.destination_kms_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.RewriteObjectRequest.destination_kms_key)
}

// .google.storage.v2.Object destination = 1;
inline bool RewriteObjectRequest::_internal_has_destination() const {
  return this != internal_default_instance() && _impl_.destination_ != nullptr;
}
inline bool RewriteObjectRequest::has_destination() const {
  return _internal_has_destination();
}
inline void RewriteObjectRequest::clear_destination() {
  if (GetArenaForAllocation() == nullptr && _impl_.destination_ != nullptr) {
    delete _impl_.destination_;
  }
  _impl_.destination_ = nullptr;
}
inline const ::google::storage::v2::Object& RewriteObjectRequest::_internal_destination() const {
  const ::google::storage::v2::Object* p = _impl_.destination_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::storage::v2::Object&>(
      ::google::storage::v2::_Object_default_instance_);
}
inline const ::google::storage::v2::Object& RewriteObjectRequest::destination() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.RewriteObjectRequest.destination)
  return _internal_destination();
}
inline void RewriteObjectRequest::unsafe_arena_set_allocated_destination(
    ::google::storage::v2::Object* destination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.destination_);
  }
  _impl_.destination_ = destination;
  if (destination) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.RewriteObjectRequest.destination)
}
inline ::google::storage::v2::Object* RewriteObjectRequest::release_destination() {
  
  ::google::storage::v2::Object* temp = _impl_.destination_;
  _impl_.destination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::storage::v2::Object* RewriteObjectRequest::unsafe_arena_release_destination() {
  // @@protoc_insertion_point(field_release:google.storage.v2.RewriteObjectRequest.destination)
  
  ::google::storage::v2::Object* temp = _impl_.destination_;
  _impl_.destination_ = nullptr;
  return temp;
}
inline ::google::storage::v2::Object* RewriteObjectRequest::_internal_mutable_destination() {
  
  if (_impl_.destination_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::storage::v2::Object>(GetArenaForAllocation());
    _impl_.destination_ = p;
  }
  return _impl_.destination_;
}
inline ::google::storage::v2::Object* RewriteObjectRequest::mutable_destination() {
  ::google::storage::v2::Object* _msg = _internal_mutable_destination();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.RewriteObjectRequest.destination)
  return _msg;
}
inline void RewriteObjectRequest::set_allocated_destination(::google::storage::v2::Object* destination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.destination_;
  }
  if (destination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(destination);
    if (message_arena != submessage_arena) {
      destination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, destination, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.destination_ = destination;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.RewriteObjectRequest.destination)
}

// string source_bucket = 2 [(.google.api.field_behavior) = REQUIRED];
inline void RewriteObjectRequest::clear_source_bucket() {
  _impl_.source_bucket_.ClearToEmpty();
}
inline const std::string& RewriteObjectRequest::source_bucket() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.RewriteObjectRequest.source_bucket)
  return _internal_source_bucket();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RewriteObjectRequest::set_source_bucket(ArgT0&& arg0, ArgT... args) {
 
 _impl_.source_bucket_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.RewriteObjectRequest.source_bucket)
}
inline std::string* RewriteObjectRequest::mutable_source_bucket() {
  std::string* _s = _internal_mutable_source_bucket();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.RewriteObjectRequest.source_bucket)
  return _s;
}
inline const std::string& RewriteObjectRequest::_internal_source_bucket() const {
  return _impl_.source_bucket_.Get();
}
inline void RewriteObjectRequest::_internal_set_source_bucket(const std::string& value) {
  
  _impl_.source_bucket_.Set(value, GetArenaForAllocation());
}
inline std::string* RewriteObjectRequest::_internal_mutable_source_bucket() {
  
  return _impl_.source_bucket_.Mutable(GetArenaForAllocation());
}
inline std::string* RewriteObjectRequest::release_source_bucket() {
  // @@protoc_insertion_point(field_release:google.storage.v2.RewriteObjectRequest.source_bucket)
  return _impl_.source_bucket_.Release();
}
inline void RewriteObjectRequest::set_allocated_source_bucket(std::string* source_bucket) {
  if (source_bucket != nullptr) {
    
  } else {
    
  }
  _impl_.source_bucket_.SetAllocated(source_bucket, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.source_bucket_.IsDefault()) {
    _impl_.source_bucket_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.RewriteObjectRequest.source_bucket)
}

// string source_object = 3 [(.google.api.field_behavior) = REQUIRED];
inline void RewriteObjectRequest::clear_source_object() {
  _impl_.source_object_.ClearToEmpty();
}
inline const std::string& RewriteObjectRequest::source_object() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.RewriteObjectRequest.source_object)
  return _internal_source_object();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RewriteObjectRequest::set_source_object(ArgT0&& arg0, ArgT... args) {
 
 _impl_.source_object_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.RewriteObjectRequest.source_object)
}
inline std::string* RewriteObjectRequest::mutable_source_object() {
  std::string* _s = _internal_mutable_source_object();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.RewriteObjectRequest.source_object)
  return _s;
}
inline const std::string& RewriteObjectRequest::_internal_source_object() const {
  return _impl_.source_object_.Get();
}
inline void RewriteObjectRequest::_internal_set_source_object(const std::string& value) {
  
  _impl_.source_object_.Set(value, GetArenaForAllocation());
}
inline std::string* RewriteObjectRequest::_internal_mutable_source_object() {
  
  return _impl_.source_object_.Mutable(GetArenaForAllocation());
}
inline std::string* RewriteObjectRequest::release_source_object() {
  // @@protoc_insertion_point(field_release:google.storage.v2.RewriteObjectRequest.source_object)
  return _impl_.source_object_.Release();
}
inline void RewriteObjectRequest::set_allocated_source_object(std::string* source_object) {
  if (source_object != nullptr) {
    
  } else {
    
  }
  _impl_.source_object_.SetAllocated(source_object, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.source_object_.IsDefault()) {
    _impl_.source_object_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.RewriteObjectRequest.source_object)
}

// int64 source_generation = 4;
inline void RewriteObjectRequest::clear_source_generation() {
  _impl_.source_generation_ = int64_t{0};
}
inline int64_t RewriteObjectRequest::_internal_source_generation() const {
  return _impl_.source_generation_;
}
inline int64_t RewriteObjectRequest::source_generation() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.RewriteObjectRequest.source_generation)
  return _internal_source_generation();
}
inline void RewriteObjectRequest::_internal_set_source_generation(int64_t value) {
  
  _impl_.source_generation_ = value;
}
inline void RewriteObjectRequest::set_source_generation(int64_t value) {
  _internal_set_source_generation(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.RewriteObjectRequest.source_generation)
}

// string rewrite_token = 5;
inline void RewriteObjectRequest::clear_rewrite_token() {
  _impl_.rewrite_token_.ClearToEmpty();
}
inline const std::string& RewriteObjectRequest::rewrite_token() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.RewriteObjectRequest.rewrite_token)
  return _internal_rewrite_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RewriteObjectRequest::set_rewrite_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.rewrite_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.RewriteObjectRequest.rewrite_token)
}
inline std::string* RewriteObjectRequest::mutable_rewrite_token() {
  std::string* _s = _internal_mutable_rewrite_token();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.RewriteObjectRequest.rewrite_token)
  return _s;
}
inline const std::string& RewriteObjectRequest::_internal_rewrite_token() const {
  return _impl_.rewrite_token_.Get();
}
inline void RewriteObjectRequest::_internal_set_rewrite_token(const std::string& value) {
  
  _impl_.rewrite_token_.Set(value, GetArenaForAllocation());
}
inline std::string* RewriteObjectRequest::_internal_mutable_rewrite_token() {
  
  return _impl_.rewrite_token_.Mutable(GetArenaForAllocation());
}
inline std::string* RewriteObjectRequest::release_rewrite_token() {
  // @@protoc_insertion_point(field_release:google.storage.v2.RewriteObjectRequest.rewrite_token)
  return _impl_.rewrite_token_.Release();
}
inline void RewriteObjectRequest::set_allocated_rewrite_token(std::string* rewrite_token) {
  if (rewrite_token != nullptr) {
    
  } else {
    
  }
  _impl_.rewrite_token_.SetAllocated(rewrite_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.rewrite_token_.IsDefault()) {
    _impl_.rewrite_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.RewriteObjectRequest.rewrite_token)
}

// string destination_predefined_acl = 28;
inline void RewriteObjectRequest::clear_destination_predefined_acl() {
  _impl_.destination_predefined_acl_.ClearToEmpty();
}
inline const std::string& RewriteObjectRequest::destination_predefined_acl() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.RewriteObjectRequest.destination_predefined_acl)
  return _internal_destination_predefined_acl();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RewriteObjectRequest::set_destination_predefined_acl(ArgT0&& arg0, ArgT... args) {
 
 _impl_.destination_predefined_acl_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.RewriteObjectRequest.destination_predefined_acl)
}
inline std::string* RewriteObjectRequest::mutable_destination_predefined_acl() {
  std::string* _s = _internal_mutable_destination_predefined_acl();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.RewriteObjectRequest.destination_predefined_acl)
  return _s;
}
inline const std::string& RewriteObjectRequest::_internal_destination_predefined_acl() const {
  return _impl_.destination_predefined_acl_.Get();
}
inline void RewriteObjectRequest::_internal_set_destination_predefined_acl(const std::string& value) {
  
  _impl_.destination_predefined_acl_.Set(value, GetArenaForAllocation());
}
inline std::string* RewriteObjectRequest::_internal_mutable_destination_predefined_acl() {
  
  return _impl_.destination_predefined_acl_.Mutable(GetArenaForAllocation());
}
inline std::string* RewriteObjectRequest::release_destination_predefined_acl() {
  // @@protoc_insertion_point(field_release:google.storage.v2.RewriteObjectRequest.destination_predefined_acl)
  return _impl_.destination_predefined_acl_.Release();
}
inline void RewriteObjectRequest::set_allocated_destination_predefined_acl(std::string* destination_predefined_acl) {
  if (destination_predefined_acl != nullptr) {
    
  } else {
    
  }
  _impl_.destination_predefined_acl_.SetAllocated(destination_predefined_acl, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.destination_predefined_acl_.IsDefault()) {
    _impl_.destination_predefined_acl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.RewriteObjectRequest.destination_predefined_acl)
}

// optional int64 if_generation_match = 7;
inline bool RewriteObjectRequest::_internal_has_if_generation_match() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RewriteObjectRequest::has_if_generation_match() const {
  return _internal_has_if_generation_match();
}
inline void RewriteObjectRequest::clear_if_generation_match() {
  _impl_.if_generation_match_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int64_t RewriteObjectRequest::_internal_if_generation_match() const {
  return _impl_.if_generation_match_;
}
inline int64_t RewriteObjectRequest::if_generation_match() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.RewriteObjectRequest.if_generation_match)
  return _internal_if_generation_match();
}
inline void RewriteObjectRequest::_internal_set_if_generation_match(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.if_generation_match_ = value;
}
inline void RewriteObjectRequest::set_if_generation_match(int64_t value) {
  _internal_set_if_generation_match(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.RewriteObjectRequest.if_generation_match)
}

// optional int64 if_generation_not_match = 8;
inline bool RewriteObjectRequest::_internal_has_if_generation_not_match() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RewriteObjectRequest::has_if_generation_not_match() const {
  return _internal_has_if_generation_not_match();
}
inline void RewriteObjectRequest::clear_if_generation_not_match() {
  _impl_.if_generation_not_match_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int64_t RewriteObjectRequest::_internal_if_generation_not_match() const {
  return _impl_.if_generation_not_match_;
}
inline int64_t RewriteObjectRequest::if_generation_not_match() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.RewriteObjectRequest.if_generation_not_match)
  return _internal_if_generation_not_match();
}
inline void RewriteObjectRequest::_internal_set_if_generation_not_match(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.if_generation_not_match_ = value;
}
inline void RewriteObjectRequest::set_if_generation_not_match(int64_t value) {
  _internal_set_if_generation_not_match(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.RewriteObjectRequest.if_generation_not_match)
}

// optional int64 if_metageneration_match = 9;
inline bool RewriteObjectRequest::_internal_has_if_metageneration_match() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RewriteObjectRequest::has_if_metageneration_match() const {
  return _internal_has_if_metageneration_match();
}
inline void RewriteObjectRequest::clear_if_metageneration_match() {
  _impl_.if_metageneration_match_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int64_t RewriteObjectRequest::_internal_if_metageneration_match() const {
  return _impl_.if_metageneration_match_;
}
inline int64_t RewriteObjectRequest::if_metageneration_match() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.RewriteObjectRequest.if_metageneration_match)
  return _internal_if_metageneration_match();
}
inline void RewriteObjectRequest::_internal_set_if_metageneration_match(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.if_metageneration_match_ = value;
}
inline void RewriteObjectRequest::set_if_metageneration_match(int64_t value) {
  _internal_set_if_metageneration_match(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.RewriteObjectRequest.if_metageneration_match)
}

// optional int64 if_metageneration_not_match = 10;
inline bool RewriteObjectRequest::_internal_has_if_metageneration_not_match() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RewriteObjectRequest::has_if_metageneration_not_match() const {
  return _internal_has_if_metageneration_not_match();
}
inline void RewriteObjectRequest::clear_if_metageneration_not_match() {
  _impl_.if_metageneration_not_match_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int64_t RewriteObjectRequest::_internal_if_metageneration_not_match() const {
  return _impl_.if_metageneration_not_match_;
}
inline int64_t RewriteObjectRequest::if_metageneration_not_match() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.RewriteObjectRequest.if_metageneration_not_match)
  return _internal_if_metageneration_not_match();
}
inline void RewriteObjectRequest::_internal_set_if_metageneration_not_match(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.if_metageneration_not_match_ = value;
}
inline void RewriteObjectRequest::set_if_metageneration_not_match(int64_t value) {
  _internal_set_if_metageneration_not_match(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.RewriteObjectRequest.if_metageneration_not_match)
}

// optional int64 if_source_generation_match = 11;
inline bool RewriteObjectRequest::_internal_has_if_source_generation_match() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RewriteObjectRequest::has_if_source_generation_match() const {
  return _internal_has_if_source_generation_match();
}
inline void RewriteObjectRequest::clear_if_source_generation_match() {
  _impl_.if_source_generation_match_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int64_t RewriteObjectRequest::_internal_if_source_generation_match() const {
  return _impl_.if_source_generation_match_;
}
inline int64_t RewriteObjectRequest::if_source_generation_match() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.RewriteObjectRequest.if_source_generation_match)
  return _internal_if_source_generation_match();
}
inline void RewriteObjectRequest::_internal_set_if_source_generation_match(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.if_source_generation_match_ = value;
}
inline void RewriteObjectRequest::set_if_source_generation_match(int64_t value) {
  _internal_set_if_source_generation_match(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.RewriteObjectRequest.if_source_generation_match)
}

// optional int64 if_source_generation_not_match = 12;
inline bool RewriteObjectRequest::_internal_has_if_source_generation_not_match() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool RewriteObjectRequest::has_if_source_generation_not_match() const {
  return _internal_has_if_source_generation_not_match();
}
inline void RewriteObjectRequest::clear_if_source_generation_not_match() {
  _impl_.if_source_generation_not_match_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int64_t RewriteObjectRequest::_internal_if_source_generation_not_match() const {
  return _impl_.if_source_generation_not_match_;
}
inline int64_t RewriteObjectRequest::if_source_generation_not_match() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.RewriteObjectRequest.if_source_generation_not_match)
  return _internal_if_source_generation_not_match();
}
inline void RewriteObjectRequest::_internal_set_if_source_generation_not_match(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.if_source_generation_not_match_ = value;
}
inline void RewriteObjectRequest::set_if_source_generation_not_match(int64_t value) {
  _internal_set_if_source_generation_not_match(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.RewriteObjectRequest.if_source_generation_not_match)
}

// optional int64 if_source_metageneration_match = 13;
inline bool RewriteObjectRequest::_internal_has_if_source_metageneration_match() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool RewriteObjectRequest::has_if_source_metageneration_match() const {
  return _internal_has_if_source_metageneration_match();
}
inline void RewriteObjectRequest::clear_if_source_metageneration_match() {
  _impl_.if_source_metageneration_match_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int64_t RewriteObjectRequest::_internal_if_source_metageneration_match() const {
  return _impl_.if_source_metageneration_match_;
}
inline int64_t RewriteObjectRequest::if_source_metageneration_match() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.RewriteObjectRequest.if_source_metageneration_match)
  return _internal_if_source_metageneration_match();
}
inline void RewriteObjectRequest::_internal_set_if_source_metageneration_match(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.if_source_metageneration_match_ = value;
}
inline void RewriteObjectRequest::set_if_source_metageneration_match(int64_t value) {
  _internal_set_if_source_metageneration_match(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.RewriteObjectRequest.if_source_metageneration_match)
}

// optional int64 if_source_metageneration_not_match = 14;
inline bool RewriteObjectRequest::_internal_has_if_source_metageneration_not_match() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool RewriteObjectRequest::has_if_source_metageneration_not_match() const {
  return _internal_has_if_source_metageneration_not_match();
}
inline void RewriteObjectRequest::clear_if_source_metageneration_not_match() {
  _impl_.if_source_metageneration_not_match_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline int64_t RewriteObjectRequest::_internal_if_source_metageneration_not_match() const {
  return _impl_.if_source_metageneration_not_match_;
}
inline int64_t RewriteObjectRequest::if_source_metageneration_not_match() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.RewriteObjectRequest.if_source_metageneration_not_match)
  return _internal_if_source_metageneration_not_match();
}
inline void RewriteObjectRequest::_internal_set_if_source_metageneration_not_match(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.if_source_metageneration_not_match_ = value;
}
inline void RewriteObjectRequest::set_if_source_metageneration_not_match(int64_t value) {
  _internal_set_if_source_metageneration_not_match(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.RewriteObjectRequest.if_source_metageneration_not_match)
}

// int64 max_bytes_rewritten_per_call = 15;
inline void RewriteObjectRequest::clear_max_bytes_rewritten_per_call() {
  _impl_.max_bytes_rewritten_per_call_ = int64_t{0};
}
inline int64_t RewriteObjectRequest::_internal_max_bytes_rewritten_per_call() const {
  return _impl_.max_bytes_rewritten_per_call_;
}
inline int64_t RewriteObjectRequest::max_bytes_rewritten_per_call() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.RewriteObjectRequest.max_bytes_rewritten_per_call)
  return _internal_max_bytes_rewritten_per_call();
}
inline void RewriteObjectRequest::_internal_set_max_bytes_rewritten_per_call(int64_t value) {
  
  _impl_.max_bytes_rewritten_per_call_ = value;
}
inline void RewriteObjectRequest::set_max_bytes_rewritten_per_call(int64_t value) {
  _internal_set_max_bytes_rewritten_per_call(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.RewriteObjectRequest.max_bytes_rewritten_per_call)
}

// string copy_source_encryption_algorithm = 16;
inline void RewriteObjectRequest::clear_copy_source_encryption_algorithm() {
  _impl_.copy_source_encryption_algorithm_.ClearToEmpty();
}
inline const std::string& RewriteObjectRequest::copy_source_encryption_algorithm() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.RewriteObjectRequest.copy_source_encryption_algorithm)
  return _internal_copy_source_encryption_algorithm();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RewriteObjectRequest::set_copy_source_encryption_algorithm(ArgT0&& arg0, ArgT... args) {
 
 _impl_.copy_source_encryption_algorithm_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.RewriteObjectRequest.copy_source_encryption_algorithm)
}
inline std::string* RewriteObjectRequest::mutable_copy_source_encryption_algorithm() {
  std::string* _s = _internal_mutable_copy_source_encryption_algorithm();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.RewriteObjectRequest.copy_source_encryption_algorithm)
  return _s;
}
inline const std::string& RewriteObjectRequest::_internal_copy_source_encryption_algorithm() const {
  return _impl_.copy_source_encryption_algorithm_.Get();
}
inline void RewriteObjectRequest::_internal_set_copy_source_encryption_algorithm(const std::string& value) {
  
  _impl_.copy_source_encryption_algorithm_.Set(value, GetArenaForAllocation());
}
inline std::string* RewriteObjectRequest::_internal_mutable_copy_source_encryption_algorithm() {
  
  return _impl_.copy_source_encryption_algorithm_.Mutable(GetArenaForAllocation());
}
inline std::string* RewriteObjectRequest::release_copy_source_encryption_algorithm() {
  // @@protoc_insertion_point(field_release:google.storage.v2.RewriteObjectRequest.copy_source_encryption_algorithm)
  return _impl_.copy_source_encryption_algorithm_.Release();
}
inline void RewriteObjectRequest::set_allocated_copy_source_encryption_algorithm(std::string* copy_source_encryption_algorithm) {
  if (copy_source_encryption_algorithm != nullptr) {
    
  } else {
    
  }
  _impl_.copy_source_encryption_algorithm_.SetAllocated(copy_source_encryption_algorithm, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.copy_source_encryption_algorithm_.IsDefault()) {
    _impl_.copy_source_encryption_algorithm_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.RewriteObjectRequest.copy_source_encryption_algorithm)
}

// bytes copy_source_encryption_key_bytes = 21;
inline void RewriteObjectRequest::clear_copy_source_encryption_key_bytes() {
  _impl_.copy_source_encryption_key_bytes_.ClearToEmpty();
}
inline const std::string& RewriteObjectRequest::copy_source_encryption_key_bytes() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.RewriteObjectRequest.copy_source_encryption_key_bytes)
  return _internal_copy_source_encryption_key_bytes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RewriteObjectRequest::set_copy_source_encryption_key_bytes(ArgT0&& arg0, ArgT... args) {
 
 _impl_.copy_source_encryption_key_bytes_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.RewriteObjectRequest.copy_source_encryption_key_bytes)
}
inline std::string* RewriteObjectRequest::mutable_copy_source_encryption_key_bytes() {
  std::string* _s = _internal_mutable_copy_source_encryption_key_bytes();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.RewriteObjectRequest.copy_source_encryption_key_bytes)
  return _s;
}
inline const std::string& RewriteObjectRequest::_internal_copy_source_encryption_key_bytes() const {
  return _impl_.copy_source_encryption_key_bytes_.Get();
}
inline void RewriteObjectRequest::_internal_set_copy_source_encryption_key_bytes(const std::string& value) {
  
  _impl_.copy_source_encryption_key_bytes_.Set(value, GetArenaForAllocation());
}
inline std::string* RewriteObjectRequest::_internal_mutable_copy_source_encryption_key_bytes() {
  
  return _impl_.copy_source_encryption_key_bytes_.Mutable(GetArenaForAllocation());
}
inline std::string* RewriteObjectRequest::release_copy_source_encryption_key_bytes() {
  // @@protoc_insertion_point(field_release:google.storage.v2.RewriteObjectRequest.copy_source_encryption_key_bytes)
  return _impl_.copy_source_encryption_key_bytes_.Release();
}
inline void RewriteObjectRequest::set_allocated_copy_source_encryption_key_bytes(std::string* copy_source_encryption_key_bytes) {
  if (copy_source_encryption_key_bytes != nullptr) {
    
  } else {
    
  }
  _impl_.copy_source_encryption_key_bytes_.SetAllocated(copy_source_encryption_key_bytes, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.copy_source_encryption_key_bytes_.IsDefault()) {
    _impl_.copy_source_encryption_key_bytes_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.RewriteObjectRequest.copy_source_encryption_key_bytes)
}

// bytes copy_source_encryption_key_sha256_bytes = 22;
inline void RewriteObjectRequest::clear_copy_source_encryption_key_sha256_bytes() {
  _impl_.copy_source_encryption_key_sha256_bytes_.ClearToEmpty();
}
inline const std::string& RewriteObjectRequest::copy_source_encryption_key_sha256_bytes() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.RewriteObjectRequest.copy_source_encryption_key_sha256_bytes)
  return _internal_copy_source_encryption_key_sha256_bytes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RewriteObjectRequest::set_copy_source_encryption_key_sha256_bytes(ArgT0&& arg0, ArgT... args) {
 
 _impl_.copy_source_encryption_key_sha256_bytes_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.RewriteObjectRequest.copy_source_encryption_key_sha256_bytes)
}
inline std::string* RewriteObjectRequest::mutable_copy_source_encryption_key_sha256_bytes() {
  std::string* _s = _internal_mutable_copy_source_encryption_key_sha256_bytes();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.RewriteObjectRequest.copy_source_encryption_key_sha256_bytes)
  return _s;
}
inline const std::string& RewriteObjectRequest::_internal_copy_source_encryption_key_sha256_bytes() const {
  return _impl_.copy_source_encryption_key_sha256_bytes_.Get();
}
inline void RewriteObjectRequest::_internal_set_copy_source_encryption_key_sha256_bytes(const std::string& value) {
  
  _impl_.copy_source_encryption_key_sha256_bytes_.Set(value, GetArenaForAllocation());
}
inline std::string* RewriteObjectRequest::_internal_mutable_copy_source_encryption_key_sha256_bytes() {
  
  return _impl_.copy_source_encryption_key_sha256_bytes_.Mutable(GetArenaForAllocation());
}
inline std::string* RewriteObjectRequest::release_copy_source_encryption_key_sha256_bytes() {
  // @@protoc_insertion_point(field_release:google.storage.v2.RewriteObjectRequest.copy_source_encryption_key_sha256_bytes)
  return _impl_.copy_source_encryption_key_sha256_bytes_.Release();
}
inline void RewriteObjectRequest::set_allocated_copy_source_encryption_key_sha256_bytes(std::string* copy_source_encryption_key_sha256_bytes) {
  if (copy_source_encryption_key_sha256_bytes != nullptr) {
    
  } else {
    
  }
  _impl_.copy_source_encryption_key_sha256_bytes_.SetAllocated(copy_source_encryption_key_sha256_bytes, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.copy_source_encryption_key_sha256_bytes_.IsDefault()) {
    _impl_.copy_source_encryption_key_sha256_bytes_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.RewriteObjectRequest.copy_source_encryption_key_sha256_bytes)
}

// .google.storage.v2.CommonObjectRequestParams common_object_request_params = 19;
inline bool RewriteObjectRequest::_internal_has_common_object_request_params() const {
  return this != internal_default_instance() && _impl_.common_object_request_params_ != nullptr;
}
inline bool RewriteObjectRequest::has_common_object_request_params() const {
  return _internal_has_common_object_request_params();
}
inline void RewriteObjectRequest::clear_common_object_request_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.common_object_request_params_ != nullptr) {
    delete _impl_.common_object_request_params_;
  }
  _impl_.common_object_request_params_ = nullptr;
}
inline const ::google::storage::v2::CommonObjectRequestParams& RewriteObjectRequest::_internal_common_object_request_params() const {
  const ::google::storage::v2::CommonObjectRequestParams* p = _impl_.common_object_request_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::storage::v2::CommonObjectRequestParams&>(
      ::google::storage::v2::_CommonObjectRequestParams_default_instance_);
}
inline const ::google::storage::v2::CommonObjectRequestParams& RewriteObjectRequest::common_object_request_params() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.RewriteObjectRequest.common_object_request_params)
  return _internal_common_object_request_params();
}
inline void RewriteObjectRequest::unsafe_arena_set_allocated_common_object_request_params(
    ::google::storage::v2::CommonObjectRequestParams* common_object_request_params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.common_object_request_params_);
  }
  _impl_.common_object_request_params_ = common_object_request_params;
  if (common_object_request_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.RewriteObjectRequest.common_object_request_params)
}
inline ::google::storage::v2::CommonObjectRequestParams* RewriteObjectRequest::release_common_object_request_params() {
  
  ::google::storage::v2::CommonObjectRequestParams* temp = _impl_.common_object_request_params_;
  _impl_.common_object_request_params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::storage::v2::CommonObjectRequestParams* RewriteObjectRequest::unsafe_arena_release_common_object_request_params() {
  // @@protoc_insertion_point(field_release:google.storage.v2.RewriteObjectRequest.common_object_request_params)
  
  ::google::storage::v2::CommonObjectRequestParams* temp = _impl_.common_object_request_params_;
  _impl_.common_object_request_params_ = nullptr;
  return temp;
}
inline ::google::storage::v2::CommonObjectRequestParams* RewriteObjectRequest::_internal_mutable_common_object_request_params() {
  
  if (_impl_.common_object_request_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::storage::v2::CommonObjectRequestParams>(GetArenaForAllocation());
    _impl_.common_object_request_params_ = p;
  }
  return _impl_.common_object_request_params_;
}
inline ::google::storage::v2::CommonObjectRequestParams* RewriteObjectRequest::mutable_common_object_request_params() {
  ::google::storage::v2::CommonObjectRequestParams* _msg = _internal_mutable_common_object_request_params();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.RewriteObjectRequest.common_object_request_params)
  return _msg;
}
inline void RewriteObjectRequest::set_allocated_common_object_request_params(::google::storage::v2::CommonObjectRequestParams* common_object_request_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.common_object_request_params_;
  }
  if (common_object_request_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(common_object_request_params);
    if (message_arena != submessage_arena) {
      common_object_request_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common_object_request_params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.common_object_request_params_ = common_object_request_params;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.RewriteObjectRequest.common_object_request_params)
}

// -------------------------------------------------------------------

// RewriteResponse

// int64 total_bytes_rewritten = 1;
inline void RewriteResponse::clear_total_bytes_rewritten() {
  _impl_.total_bytes_rewritten_ = int64_t{0};
}
inline int64_t RewriteResponse::_internal_total_bytes_rewritten() const {
  return _impl_.total_bytes_rewritten_;
}
inline int64_t RewriteResponse::total_bytes_rewritten() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.RewriteResponse.total_bytes_rewritten)
  return _internal_total_bytes_rewritten();
}
inline void RewriteResponse::_internal_set_total_bytes_rewritten(int64_t value) {
  
  _impl_.total_bytes_rewritten_ = value;
}
inline void RewriteResponse::set_total_bytes_rewritten(int64_t value) {
  _internal_set_total_bytes_rewritten(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.RewriteResponse.total_bytes_rewritten)
}

// int64 object_size = 2;
inline void RewriteResponse::clear_object_size() {
  _impl_.object_size_ = int64_t{0};
}
inline int64_t RewriteResponse::_internal_object_size() const {
  return _impl_.object_size_;
}
inline int64_t RewriteResponse::object_size() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.RewriteResponse.object_size)
  return _internal_object_size();
}
inline void RewriteResponse::_internal_set_object_size(int64_t value) {
  
  _impl_.object_size_ = value;
}
inline void RewriteResponse::set_object_size(int64_t value) {
  _internal_set_object_size(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.RewriteResponse.object_size)
}

// bool done = 3;
inline void RewriteResponse::clear_done() {
  _impl_.done_ = false;
}
inline bool RewriteResponse::_internal_done() const {
  return _impl_.done_;
}
inline bool RewriteResponse::done() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.RewriteResponse.done)
  return _internal_done();
}
inline void RewriteResponse::_internal_set_done(bool value) {
  
  _impl_.done_ = value;
}
inline void RewriteResponse::set_done(bool value) {
  _internal_set_done(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.RewriteResponse.done)
}

// string rewrite_token = 4;
inline void RewriteResponse::clear_rewrite_token() {
  _impl_.rewrite_token_.ClearToEmpty();
}
inline const std::string& RewriteResponse::rewrite_token() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.RewriteResponse.rewrite_token)
  return _internal_rewrite_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RewriteResponse::set_rewrite_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.rewrite_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.RewriteResponse.rewrite_token)
}
inline std::string* RewriteResponse::mutable_rewrite_token() {
  std::string* _s = _internal_mutable_rewrite_token();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.RewriteResponse.rewrite_token)
  return _s;
}
inline const std::string& RewriteResponse::_internal_rewrite_token() const {
  return _impl_.rewrite_token_.Get();
}
inline void RewriteResponse::_internal_set_rewrite_token(const std::string& value) {
  
  _impl_.rewrite_token_.Set(value, GetArenaForAllocation());
}
inline std::string* RewriteResponse::_internal_mutable_rewrite_token() {
  
  return _impl_.rewrite_token_.Mutable(GetArenaForAllocation());
}
inline std::string* RewriteResponse::release_rewrite_token() {
  // @@protoc_insertion_point(field_release:google.storage.v2.RewriteResponse.rewrite_token)
  return _impl_.rewrite_token_.Release();
}
inline void RewriteResponse::set_allocated_rewrite_token(std::string* rewrite_token) {
  if (rewrite_token != nullptr) {
    
  } else {
    
  }
  _impl_.rewrite_token_.SetAllocated(rewrite_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.rewrite_token_.IsDefault()) {
    _impl_.rewrite_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.RewriteResponse.rewrite_token)
}

// .google.storage.v2.Object resource = 5;
inline bool RewriteResponse::_internal_has_resource() const {
  return this != internal_default_instance() && _impl_.resource_ != nullptr;
}
inline bool RewriteResponse::has_resource() const {
  return _internal_has_resource();
}
inline void RewriteResponse::clear_resource() {
  if (GetArenaForAllocation() == nullptr && _impl_.resource_ != nullptr) {
    delete _impl_.resource_;
  }
  _impl_.resource_ = nullptr;
}
inline const ::google::storage::v2::Object& RewriteResponse::_internal_resource() const {
  const ::google::storage::v2::Object* p = _impl_.resource_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::storage::v2::Object&>(
      ::google::storage::v2::_Object_default_instance_);
}
inline const ::google::storage::v2::Object& RewriteResponse::resource() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.RewriteResponse.resource)
  return _internal_resource();
}
inline void RewriteResponse::unsafe_arena_set_allocated_resource(
    ::google::storage::v2::Object* resource) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.resource_);
  }
  _impl_.resource_ = resource;
  if (resource) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.RewriteResponse.resource)
}
inline ::google::storage::v2::Object* RewriteResponse::release_resource() {
  
  ::google::storage::v2::Object* temp = _impl_.resource_;
  _impl_.resource_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::storage::v2::Object* RewriteResponse::unsafe_arena_release_resource() {
  // @@protoc_insertion_point(field_release:google.storage.v2.RewriteResponse.resource)
  
  ::google::storage::v2::Object* temp = _impl_.resource_;
  _impl_.resource_ = nullptr;
  return temp;
}
inline ::google::storage::v2::Object* RewriteResponse::_internal_mutable_resource() {
  
  if (_impl_.resource_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::storage::v2::Object>(GetArenaForAllocation());
    _impl_.resource_ = p;
  }
  return _impl_.resource_;
}
inline ::google::storage::v2::Object* RewriteResponse::mutable_resource() {
  ::google::storage::v2::Object* _msg = _internal_mutable_resource();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.RewriteResponse.resource)
  return _msg;
}
inline void RewriteResponse::set_allocated_resource(::google::storage::v2::Object* resource) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.resource_;
  }
  if (resource) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resource);
    if (message_arena != submessage_arena) {
      resource = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resource, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.resource_ = resource;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.RewriteResponse.resource)
}

// -------------------------------------------------------------------

// StartResumableWriteRequest

// .google.storage.v2.WriteObjectSpec write_object_spec = 1;
inline bool StartResumableWriteRequest::_internal_has_write_object_spec() const {
  return this != internal_default_instance() && _impl_.write_object_spec_ != nullptr;
}
inline bool StartResumableWriteRequest::has_write_object_spec() const {
  return _internal_has_write_object_spec();
}
inline void StartResumableWriteRequest::clear_write_object_spec() {
  if (GetArenaForAllocation() == nullptr && _impl_.write_object_spec_ != nullptr) {
    delete _impl_.write_object_spec_;
  }
  _impl_.write_object_spec_ = nullptr;
}
inline const ::google::storage::v2::WriteObjectSpec& StartResumableWriteRequest::_internal_write_object_spec() const {
  const ::google::storage::v2::WriteObjectSpec* p = _impl_.write_object_spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::storage::v2::WriteObjectSpec&>(
      ::google::storage::v2::_WriteObjectSpec_default_instance_);
}
inline const ::google::storage::v2::WriteObjectSpec& StartResumableWriteRequest::write_object_spec() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.StartResumableWriteRequest.write_object_spec)
  return _internal_write_object_spec();
}
inline void StartResumableWriteRequest::unsafe_arena_set_allocated_write_object_spec(
    ::google::storage::v2::WriteObjectSpec* write_object_spec) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.write_object_spec_);
  }
  _impl_.write_object_spec_ = write_object_spec;
  if (write_object_spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.StartResumableWriteRequest.write_object_spec)
}
inline ::google::storage::v2::WriteObjectSpec* StartResumableWriteRequest::release_write_object_spec() {
  
  ::google::storage::v2::WriteObjectSpec* temp = _impl_.write_object_spec_;
  _impl_.write_object_spec_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::storage::v2::WriteObjectSpec* StartResumableWriteRequest::unsafe_arena_release_write_object_spec() {
  // @@protoc_insertion_point(field_release:google.storage.v2.StartResumableWriteRequest.write_object_spec)
  
  ::google::storage::v2::WriteObjectSpec* temp = _impl_.write_object_spec_;
  _impl_.write_object_spec_ = nullptr;
  return temp;
}
inline ::google::storage::v2::WriteObjectSpec* StartResumableWriteRequest::_internal_mutable_write_object_spec() {
  
  if (_impl_.write_object_spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::storage::v2::WriteObjectSpec>(GetArenaForAllocation());
    _impl_.write_object_spec_ = p;
  }
  return _impl_.write_object_spec_;
}
inline ::google::storage::v2::WriteObjectSpec* StartResumableWriteRequest::mutable_write_object_spec() {
  ::google::storage::v2::WriteObjectSpec* _msg = _internal_mutable_write_object_spec();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.StartResumableWriteRequest.write_object_spec)
  return _msg;
}
inline void StartResumableWriteRequest::set_allocated_write_object_spec(::google::storage::v2::WriteObjectSpec* write_object_spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.write_object_spec_;
  }
  if (write_object_spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(write_object_spec);
    if (message_arena != submessage_arena) {
      write_object_spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, write_object_spec, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.write_object_spec_ = write_object_spec;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.StartResumableWriteRequest.write_object_spec)
}

// .google.storage.v2.CommonObjectRequestParams common_object_request_params = 3;
inline bool StartResumableWriteRequest::_internal_has_common_object_request_params() const {
  return this != internal_default_instance() && _impl_.common_object_request_params_ != nullptr;
}
inline bool StartResumableWriteRequest::has_common_object_request_params() const {
  return _internal_has_common_object_request_params();
}
inline void StartResumableWriteRequest::clear_common_object_request_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.common_object_request_params_ != nullptr) {
    delete _impl_.common_object_request_params_;
  }
  _impl_.common_object_request_params_ = nullptr;
}
inline const ::google::storage::v2::CommonObjectRequestParams& StartResumableWriteRequest::_internal_common_object_request_params() const {
  const ::google::storage::v2::CommonObjectRequestParams* p = _impl_.common_object_request_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::storage::v2::CommonObjectRequestParams&>(
      ::google::storage::v2::_CommonObjectRequestParams_default_instance_);
}
inline const ::google::storage::v2::CommonObjectRequestParams& StartResumableWriteRequest::common_object_request_params() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.StartResumableWriteRequest.common_object_request_params)
  return _internal_common_object_request_params();
}
inline void StartResumableWriteRequest::unsafe_arena_set_allocated_common_object_request_params(
    ::google::storage::v2::CommonObjectRequestParams* common_object_request_params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.common_object_request_params_);
  }
  _impl_.common_object_request_params_ = common_object_request_params;
  if (common_object_request_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.StartResumableWriteRequest.common_object_request_params)
}
inline ::google::storage::v2::CommonObjectRequestParams* StartResumableWriteRequest::release_common_object_request_params() {
  
  ::google::storage::v2::CommonObjectRequestParams* temp = _impl_.common_object_request_params_;
  _impl_.common_object_request_params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::storage::v2::CommonObjectRequestParams* StartResumableWriteRequest::unsafe_arena_release_common_object_request_params() {
  // @@protoc_insertion_point(field_release:google.storage.v2.StartResumableWriteRequest.common_object_request_params)
  
  ::google::storage::v2::CommonObjectRequestParams* temp = _impl_.common_object_request_params_;
  _impl_.common_object_request_params_ = nullptr;
  return temp;
}
inline ::google::storage::v2::CommonObjectRequestParams* StartResumableWriteRequest::_internal_mutable_common_object_request_params() {
  
  if (_impl_.common_object_request_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::storage::v2::CommonObjectRequestParams>(GetArenaForAllocation());
    _impl_.common_object_request_params_ = p;
  }
  return _impl_.common_object_request_params_;
}
inline ::google::storage::v2::CommonObjectRequestParams* StartResumableWriteRequest::mutable_common_object_request_params() {
  ::google::storage::v2::CommonObjectRequestParams* _msg = _internal_mutable_common_object_request_params();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.StartResumableWriteRequest.common_object_request_params)
  return _msg;
}
inline void StartResumableWriteRequest::set_allocated_common_object_request_params(::google::storage::v2::CommonObjectRequestParams* common_object_request_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.common_object_request_params_;
  }
  if (common_object_request_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(common_object_request_params);
    if (message_arena != submessage_arena) {
      common_object_request_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common_object_request_params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.common_object_request_params_ = common_object_request_params;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.StartResumableWriteRequest.common_object_request_params)
}

// -------------------------------------------------------------------

// StartResumableWriteResponse

// string upload_id = 1;
inline void StartResumableWriteResponse::clear_upload_id() {
  _impl_.upload_id_.ClearToEmpty();
}
inline const std::string& StartResumableWriteResponse::upload_id() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.StartResumableWriteResponse.upload_id)
  return _internal_upload_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StartResumableWriteResponse::set_upload_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.upload_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.StartResumableWriteResponse.upload_id)
}
inline std::string* StartResumableWriteResponse::mutable_upload_id() {
  std::string* _s = _internal_mutable_upload_id();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.StartResumableWriteResponse.upload_id)
  return _s;
}
inline const std::string& StartResumableWriteResponse::_internal_upload_id() const {
  return _impl_.upload_id_.Get();
}
inline void StartResumableWriteResponse::_internal_set_upload_id(const std::string& value) {
  
  _impl_.upload_id_.Set(value, GetArenaForAllocation());
}
inline std::string* StartResumableWriteResponse::_internal_mutable_upload_id() {
  
  return _impl_.upload_id_.Mutable(GetArenaForAllocation());
}
inline std::string* StartResumableWriteResponse::release_upload_id() {
  // @@protoc_insertion_point(field_release:google.storage.v2.StartResumableWriteResponse.upload_id)
  return _impl_.upload_id_.Release();
}
inline void StartResumableWriteResponse::set_allocated_upload_id(std::string* upload_id) {
  if (upload_id != nullptr) {
    
  } else {
    
  }
  _impl_.upload_id_.SetAllocated(upload_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.upload_id_.IsDefault()) {
    _impl_.upload_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.StartResumableWriteResponse.upload_id)
}

// -------------------------------------------------------------------

// UpdateObjectRequest

// .google.storage.v2.Object object = 1;
inline bool UpdateObjectRequest::_internal_has_object() const {
  return this != internal_default_instance() && _impl_.object_ != nullptr;
}
inline bool UpdateObjectRequest::has_object() const {
  return _internal_has_object();
}
inline void UpdateObjectRequest::clear_object() {
  if (GetArenaForAllocation() == nullptr && _impl_.object_ != nullptr) {
    delete _impl_.object_;
  }
  _impl_.object_ = nullptr;
}
inline const ::google::storage::v2::Object& UpdateObjectRequest::_internal_object() const {
  const ::google::storage::v2::Object* p = _impl_.object_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::storage::v2::Object&>(
      ::google::storage::v2::_Object_default_instance_);
}
inline const ::google::storage::v2::Object& UpdateObjectRequest::object() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.UpdateObjectRequest.object)
  return _internal_object();
}
inline void UpdateObjectRequest::unsafe_arena_set_allocated_object(
    ::google::storage::v2::Object* object) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.object_);
  }
  _impl_.object_ = object;
  if (object) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.UpdateObjectRequest.object)
}
inline ::google::storage::v2::Object* UpdateObjectRequest::release_object() {
  
  ::google::storage::v2::Object* temp = _impl_.object_;
  _impl_.object_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::storage::v2::Object* UpdateObjectRequest::unsafe_arena_release_object() {
  // @@protoc_insertion_point(field_release:google.storage.v2.UpdateObjectRequest.object)
  
  ::google::storage::v2::Object* temp = _impl_.object_;
  _impl_.object_ = nullptr;
  return temp;
}
inline ::google::storage::v2::Object* UpdateObjectRequest::_internal_mutable_object() {
  
  if (_impl_.object_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::storage::v2::Object>(GetArenaForAllocation());
    _impl_.object_ = p;
  }
  return _impl_.object_;
}
inline ::google::storage::v2::Object* UpdateObjectRequest::mutable_object() {
  ::google::storage::v2::Object* _msg = _internal_mutable_object();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.UpdateObjectRequest.object)
  return _msg;
}
inline void UpdateObjectRequest::set_allocated_object(::google::storage::v2::Object* object) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.object_;
  }
  if (object) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(object);
    if (message_arena != submessage_arena) {
      object = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, object, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.object_ = object;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.UpdateObjectRequest.object)
}

// optional int64 if_generation_match = 2;
inline bool UpdateObjectRequest::_internal_has_if_generation_match() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UpdateObjectRequest::has_if_generation_match() const {
  return _internal_has_if_generation_match();
}
inline void UpdateObjectRequest::clear_if_generation_match() {
  _impl_.if_generation_match_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int64_t UpdateObjectRequest::_internal_if_generation_match() const {
  return _impl_.if_generation_match_;
}
inline int64_t UpdateObjectRequest::if_generation_match() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.UpdateObjectRequest.if_generation_match)
  return _internal_if_generation_match();
}
inline void UpdateObjectRequest::_internal_set_if_generation_match(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.if_generation_match_ = value;
}
inline void UpdateObjectRequest::set_if_generation_match(int64_t value) {
  _internal_set_if_generation_match(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.UpdateObjectRequest.if_generation_match)
}

// optional int64 if_generation_not_match = 3;
inline bool UpdateObjectRequest::_internal_has_if_generation_not_match() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UpdateObjectRequest::has_if_generation_not_match() const {
  return _internal_has_if_generation_not_match();
}
inline void UpdateObjectRequest::clear_if_generation_not_match() {
  _impl_.if_generation_not_match_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int64_t UpdateObjectRequest::_internal_if_generation_not_match() const {
  return _impl_.if_generation_not_match_;
}
inline int64_t UpdateObjectRequest::if_generation_not_match() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.UpdateObjectRequest.if_generation_not_match)
  return _internal_if_generation_not_match();
}
inline void UpdateObjectRequest::_internal_set_if_generation_not_match(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.if_generation_not_match_ = value;
}
inline void UpdateObjectRequest::set_if_generation_not_match(int64_t value) {
  _internal_set_if_generation_not_match(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.UpdateObjectRequest.if_generation_not_match)
}

// optional int64 if_metageneration_match = 4;
inline bool UpdateObjectRequest::_internal_has_if_metageneration_match() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UpdateObjectRequest::has_if_metageneration_match() const {
  return _internal_has_if_metageneration_match();
}
inline void UpdateObjectRequest::clear_if_metageneration_match() {
  _impl_.if_metageneration_match_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int64_t UpdateObjectRequest::_internal_if_metageneration_match() const {
  return _impl_.if_metageneration_match_;
}
inline int64_t UpdateObjectRequest::if_metageneration_match() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.UpdateObjectRequest.if_metageneration_match)
  return _internal_if_metageneration_match();
}
inline void UpdateObjectRequest::_internal_set_if_metageneration_match(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.if_metageneration_match_ = value;
}
inline void UpdateObjectRequest::set_if_metageneration_match(int64_t value) {
  _internal_set_if_metageneration_match(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.UpdateObjectRequest.if_metageneration_match)
}

// optional int64 if_metageneration_not_match = 5;
inline bool UpdateObjectRequest::_internal_has_if_metageneration_not_match() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool UpdateObjectRequest::has_if_metageneration_not_match() const {
  return _internal_has_if_metageneration_not_match();
}
inline void UpdateObjectRequest::clear_if_metageneration_not_match() {
  _impl_.if_metageneration_not_match_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int64_t UpdateObjectRequest::_internal_if_metageneration_not_match() const {
  return _impl_.if_metageneration_not_match_;
}
inline int64_t UpdateObjectRequest::if_metageneration_not_match() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.UpdateObjectRequest.if_metageneration_not_match)
  return _internal_if_metageneration_not_match();
}
inline void UpdateObjectRequest::_internal_set_if_metageneration_not_match(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.if_metageneration_not_match_ = value;
}
inline void UpdateObjectRequest::set_if_metageneration_not_match(int64_t value) {
  _internal_set_if_metageneration_not_match(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.UpdateObjectRequest.if_metageneration_not_match)
}

// string predefined_acl = 10;
inline void UpdateObjectRequest::clear_predefined_acl() {
  _impl_.predefined_acl_.ClearToEmpty();
}
inline const std::string& UpdateObjectRequest::predefined_acl() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.UpdateObjectRequest.predefined_acl)
  return _internal_predefined_acl();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateObjectRequest::set_predefined_acl(ArgT0&& arg0, ArgT... args) {
 
 _impl_.predefined_acl_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.UpdateObjectRequest.predefined_acl)
}
inline std::string* UpdateObjectRequest::mutable_predefined_acl() {
  std::string* _s = _internal_mutable_predefined_acl();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.UpdateObjectRequest.predefined_acl)
  return _s;
}
inline const std::string& UpdateObjectRequest::_internal_predefined_acl() const {
  return _impl_.predefined_acl_.Get();
}
inline void UpdateObjectRequest::_internal_set_predefined_acl(const std::string& value) {
  
  _impl_.predefined_acl_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdateObjectRequest::_internal_mutable_predefined_acl() {
  
  return _impl_.predefined_acl_.Mutable(GetArenaForAllocation());
}
inline std::string* UpdateObjectRequest::release_predefined_acl() {
  // @@protoc_insertion_point(field_release:google.storage.v2.UpdateObjectRequest.predefined_acl)
  return _impl_.predefined_acl_.Release();
}
inline void UpdateObjectRequest::set_allocated_predefined_acl(std::string* predefined_acl) {
  if (predefined_acl != nullptr) {
    
  } else {
    
  }
  _impl_.predefined_acl_.SetAllocated(predefined_acl, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.predefined_acl_.IsDefault()) {
    _impl_.predefined_acl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.UpdateObjectRequest.predefined_acl)
}

// .google.protobuf.FieldMask update_mask = 7;
inline bool UpdateObjectRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && _impl_.update_mask_ != nullptr;
}
inline bool UpdateObjectRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateObjectRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = _impl_.update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateObjectRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.UpdateObjectRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateObjectRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  _impl_.update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.UpdateObjectRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateObjectRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateObjectRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:google.storage.v2.UpdateObjectRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateObjectRequest::_internal_mutable_update_mask() {
  
  if (_impl_.update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    _impl_.update_mask_ = p;
  }
  return _impl_.update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateObjectRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.UpdateObjectRequest.update_mask)
  return _msg;
}
inline void UpdateObjectRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.UpdateObjectRequest.update_mask)
}

// .google.storage.v2.CommonObjectRequestParams common_object_request_params = 8;
inline bool UpdateObjectRequest::_internal_has_common_object_request_params() const {
  return this != internal_default_instance() && _impl_.common_object_request_params_ != nullptr;
}
inline bool UpdateObjectRequest::has_common_object_request_params() const {
  return _internal_has_common_object_request_params();
}
inline void UpdateObjectRequest::clear_common_object_request_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.common_object_request_params_ != nullptr) {
    delete _impl_.common_object_request_params_;
  }
  _impl_.common_object_request_params_ = nullptr;
}
inline const ::google::storage::v2::CommonObjectRequestParams& UpdateObjectRequest::_internal_common_object_request_params() const {
  const ::google::storage::v2::CommonObjectRequestParams* p = _impl_.common_object_request_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::storage::v2::CommonObjectRequestParams&>(
      ::google::storage::v2::_CommonObjectRequestParams_default_instance_);
}
inline const ::google::storage::v2::CommonObjectRequestParams& UpdateObjectRequest::common_object_request_params() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.UpdateObjectRequest.common_object_request_params)
  return _internal_common_object_request_params();
}
inline void UpdateObjectRequest::unsafe_arena_set_allocated_common_object_request_params(
    ::google::storage::v2::CommonObjectRequestParams* common_object_request_params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.common_object_request_params_);
  }
  _impl_.common_object_request_params_ = common_object_request_params;
  if (common_object_request_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.UpdateObjectRequest.common_object_request_params)
}
inline ::google::storage::v2::CommonObjectRequestParams* UpdateObjectRequest::release_common_object_request_params() {
  
  ::google::storage::v2::CommonObjectRequestParams* temp = _impl_.common_object_request_params_;
  _impl_.common_object_request_params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::storage::v2::CommonObjectRequestParams* UpdateObjectRequest::unsafe_arena_release_common_object_request_params() {
  // @@protoc_insertion_point(field_release:google.storage.v2.UpdateObjectRequest.common_object_request_params)
  
  ::google::storage::v2::CommonObjectRequestParams* temp = _impl_.common_object_request_params_;
  _impl_.common_object_request_params_ = nullptr;
  return temp;
}
inline ::google::storage::v2::CommonObjectRequestParams* UpdateObjectRequest::_internal_mutable_common_object_request_params() {
  
  if (_impl_.common_object_request_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::storage::v2::CommonObjectRequestParams>(GetArenaForAllocation());
    _impl_.common_object_request_params_ = p;
  }
  return _impl_.common_object_request_params_;
}
inline ::google::storage::v2::CommonObjectRequestParams* UpdateObjectRequest::mutable_common_object_request_params() {
  ::google::storage::v2::CommonObjectRequestParams* _msg = _internal_mutable_common_object_request_params();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.UpdateObjectRequest.common_object_request_params)
  return _msg;
}
inline void UpdateObjectRequest::set_allocated_common_object_request_params(::google::storage::v2::CommonObjectRequestParams* common_object_request_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.common_object_request_params_;
  }
  if (common_object_request_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(common_object_request_params);
    if (message_arena != submessage_arena) {
      common_object_request_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common_object_request_params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.common_object_request_params_ = common_object_request_params;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.UpdateObjectRequest.common_object_request_params)
}

// -------------------------------------------------------------------

// GetServiceAccountRequest

// string project = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetServiceAccountRequest::clear_project() {
  _impl_.project_.ClearToEmpty();
}
inline const std::string& GetServiceAccountRequest::project() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.GetServiceAccountRequest.project)
  return _internal_project();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetServiceAccountRequest::set_project(ArgT0&& arg0, ArgT... args) {
 
 _impl_.project_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.GetServiceAccountRequest.project)
}
inline std::string* GetServiceAccountRequest::mutable_project() {
  std::string* _s = _internal_mutable_project();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.GetServiceAccountRequest.project)
  return _s;
}
inline const std::string& GetServiceAccountRequest::_internal_project() const {
  return _impl_.project_.Get();
}
inline void GetServiceAccountRequest::_internal_set_project(const std::string& value) {
  
  _impl_.project_.Set(value, GetArenaForAllocation());
}
inline std::string* GetServiceAccountRequest::_internal_mutable_project() {
  
  return _impl_.project_.Mutable(GetArenaForAllocation());
}
inline std::string* GetServiceAccountRequest::release_project() {
  // @@protoc_insertion_point(field_release:google.storage.v2.GetServiceAccountRequest.project)
  return _impl_.project_.Release();
}
inline void GetServiceAccountRequest::set_allocated_project(std::string* project) {
  if (project != nullptr) {
    
  } else {
    
  }
  _impl_.project_.SetAllocated(project, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.project_.IsDefault()) {
    _impl_.project_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.GetServiceAccountRequest.project)
}

// -------------------------------------------------------------------

// CreateHmacKeyRequest

// string project = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreateHmacKeyRequest::clear_project() {
  _impl_.project_.ClearToEmpty();
}
inline const std::string& CreateHmacKeyRequest::project() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.CreateHmacKeyRequest.project)
  return _internal_project();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateHmacKeyRequest::set_project(ArgT0&& arg0, ArgT... args) {
 
 _impl_.project_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.CreateHmacKeyRequest.project)
}
inline std::string* CreateHmacKeyRequest::mutable_project() {
  std::string* _s = _internal_mutable_project();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.CreateHmacKeyRequest.project)
  return _s;
}
inline const std::string& CreateHmacKeyRequest::_internal_project() const {
  return _impl_.project_.Get();
}
inline void CreateHmacKeyRequest::_internal_set_project(const std::string& value) {
  
  _impl_.project_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateHmacKeyRequest::_internal_mutable_project() {
  
  return _impl_.project_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateHmacKeyRequest::release_project() {
  // @@protoc_insertion_point(field_release:google.storage.v2.CreateHmacKeyRequest.project)
  return _impl_.project_.Release();
}
inline void CreateHmacKeyRequest::set_allocated_project(std::string* project) {
  if (project != nullptr) {
    
  } else {
    
  }
  _impl_.project_.SetAllocated(project, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.project_.IsDefault()) {
    _impl_.project_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.CreateHmacKeyRequest.project)
}

// string service_account_email = 2 [(.google.api.field_behavior) = REQUIRED];
inline void CreateHmacKeyRequest::clear_service_account_email() {
  _impl_.service_account_email_.ClearToEmpty();
}
inline const std::string& CreateHmacKeyRequest::service_account_email() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.CreateHmacKeyRequest.service_account_email)
  return _internal_service_account_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateHmacKeyRequest::set_service_account_email(ArgT0&& arg0, ArgT... args) {
 
 _impl_.service_account_email_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.CreateHmacKeyRequest.service_account_email)
}
inline std::string* CreateHmacKeyRequest::mutable_service_account_email() {
  std::string* _s = _internal_mutable_service_account_email();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.CreateHmacKeyRequest.service_account_email)
  return _s;
}
inline const std::string& CreateHmacKeyRequest::_internal_service_account_email() const {
  return _impl_.service_account_email_.Get();
}
inline void CreateHmacKeyRequest::_internal_set_service_account_email(const std::string& value) {
  
  _impl_.service_account_email_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateHmacKeyRequest::_internal_mutable_service_account_email() {
  
  return _impl_.service_account_email_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateHmacKeyRequest::release_service_account_email() {
  // @@protoc_insertion_point(field_release:google.storage.v2.CreateHmacKeyRequest.service_account_email)
  return _impl_.service_account_email_.Release();
}
inline void CreateHmacKeyRequest::set_allocated_service_account_email(std::string* service_account_email) {
  if (service_account_email != nullptr) {
    
  } else {
    
  }
  _impl_.service_account_email_.SetAllocated(service_account_email, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.service_account_email_.IsDefault()) {
    _impl_.service_account_email_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.CreateHmacKeyRequest.service_account_email)
}

// -------------------------------------------------------------------

// CreateHmacKeyResponse

// .google.storage.v2.HmacKeyMetadata metadata = 1;
inline bool CreateHmacKeyResponse::_internal_has_metadata() const {
  return this != internal_default_instance() && _impl_.metadata_ != nullptr;
}
inline bool CreateHmacKeyResponse::has_metadata() const {
  return _internal_has_metadata();
}
inline void CreateHmacKeyResponse::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
}
inline const ::google::storage::v2::HmacKeyMetadata& CreateHmacKeyResponse::_internal_metadata() const {
  const ::google::storage::v2::HmacKeyMetadata* p = _impl_.metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::storage::v2::HmacKeyMetadata&>(
      ::google::storage::v2::_HmacKeyMetadata_default_instance_);
}
inline const ::google::storage::v2::HmacKeyMetadata& CreateHmacKeyResponse::metadata() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.CreateHmacKeyResponse.metadata)
  return _internal_metadata();
}
inline void CreateHmacKeyResponse::unsafe_arena_set_allocated_metadata(
    ::google::storage::v2::HmacKeyMetadata* metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metadata_);
  }
  _impl_.metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.CreateHmacKeyResponse.metadata)
}
inline ::google::storage::v2::HmacKeyMetadata* CreateHmacKeyResponse::release_metadata() {
  
  ::google::storage::v2::HmacKeyMetadata* temp = _impl_.metadata_;
  _impl_.metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::storage::v2::HmacKeyMetadata* CreateHmacKeyResponse::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:google.storage.v2.CreateHmacKeyResponse.metadata)
  
  ::google::storage::v2::HmacKeyMetadata* temp = _impl_.metadata_;
  _impl_.metadata_ = nullptr;
  return temp;
}
inline ::google::storage::v2::HmacKeyMetadata* CreateHmacKeyResponse::_internal_mutable_metadata() {
  
  if (_impl_.metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::storage::v2::HmacKeyMetadata>(GetArenaForAllocation());
    _impl_.metadata_ = p;
  }
  return _impl_.metadata_;
}
inline ::google::storage::v2::HmacKeyMetadata* CreateHmacKeyResponse::mutable_metadata() {
  ::google::storage::v2::HmacKeyMetadata* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.CreateHmacKeyResponse.metadata)
  return _msg;
}
inline void CreateHmacKeyResponse::set_allocated_metadata(::google::storage::v2::HmacKeyMetadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(metadata);
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.CreateHmacKeyResponse.metadata)
}

// bytes secret_key_bytes = 3;
inline void CreateHmacKeyResponse::clear_secret_key_bytes() {
  _impl_.secret_key_bytes_.ClearToEmpty();
}
inline const std::string& CreateHmacKeyResponse::secret_key_bytes() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.CreateHmacKeyResponse.secret_key_bytes)
  return _internal_secret_key_bytes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateHmacKeyResponse::set_secret_key_bytes(ArgT0&& arg0, ArgT... args) {
 
 _impl_.secret_key_bytes_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.CreateHmacKeyResponse.secret_key_bytes)
}
inline std::string* CreateHmacKeyResponse::mutable_secret_key_bytes() {
  std::string* _s = _internal_mutable_secret_key_bytes();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.CreateHmacKeyResponse.secret_key_bytes)
  return _s;
}
inline const std::string& CreateHmacKeyResponse::_internal_secret_key_bytes() const {
  return _impl_.secret_key_bytes_.Get();
}
inline void CreateHmacKeyResponse::_internal_set_secret_key_bytes(const std::string& value) {
  
  _impl_.secret_key_bytes_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateHmacKeyResponse::_internal_mutable_secret_key_bytes() {
  
  return _impl_.secret_key_bytes_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateHmacKeyResponse::release_secret_key_bytes() {
  // @@protoc_insertion_point(field_release:google.storage.v2.CreateHmacKeyResponse.secret_key_bytes)
  return _impl_.secret_key_bytes_.Release();
}
inline void CreateHmacKeyResponse::set_allocated_secret_key_bytes(std::string* secret_key_bytes) {
  if (secret_key_bytes != nullptr) {
    
  } else {
    
  }
  _impl_.secret_key_bytes_.SetAllocated(secret_key_bytes, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.secret_key_bytes_.IsDefault()) {
    _impl_.secret_key_bytes_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.CreateHmacKeyResponse.secret_key_bytes)
}

// -------------------------------------------------------------------

// DeleteHmacKeyRequest

// string access_id = 1 [(.google.api.field_behavior) = REQUIRED];
inline void DeleteHmacKeyRequest::clear_access_id() {
  _impl_.access_id_.ClearToEmpty();
}
inline const std::string& DeleteHmacKeyRequest::access_id() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.DeleteHmacKeyRequest.access_id)
  return _internal_access_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteHmacKeyRequest::set_access_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.access_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.DeleteHmacKeyRequest.access_id)
}
inline std::string* DeleteHmacKeyRequest::mutable_access_id() {
  std::string* _s = _internal_mutable_access_id();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.DeleteHmacKeyRequest.access_id)
  return _s;
}
inline const std::string& DeleteHmacKeyRequest::_internal_access_id() const {
  return _impl_.access_id_.Get();
}
inline void DeleteHmacKeyRequest::_internal_set_access_id(const std::string& value) {
  
  _impl_.access_id_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteHmacKeyRequest::_internal_mutable_access_id() {
  
  return _impl_.access_id_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteHmacKeyRequest::release_access_id() {
  // @@protoc_insertion_point(field_release:google.storage.v2.DeleteHmacKeyRequest.access_id)
  return _impl_.access_id_.Release();
}
inline void DeleteHmacKeyRequest::set_allocated_access_id(std::string* access_id) {
  if (access_id != nullptr) {
    
  } else {
    
  }
  _impl_.access_id_.SetAllocated(access_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.access_id_.IsDefault()) {
    _impl_.access_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.DeleteHmacKeyRequest.access_id)
}

// string project = 2 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteHmacKeyRequest::clear_project() {
  _impl_.project_.ClearToEmpty();
}
inline const std::string& DeleteHmacKeyRequest::project() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.DeleteHmacKeyRequest.project)
  return _internal_project();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteHmacKeyRequest::set_project(ArgT0&& arg0, ArgT... args) {
 
 _impl_.project_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.DeleteHmacKeyRequest.project)
}
inline std::string* DeleteHmacKeyRequest::mutable_project() {
  std::string* _s = _internal_mutable_project();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.DeleteHmacKeyRequest.project)
  return _s;
}
inline const std::string& DeleteHmacKeyRequest::_internal_project() const {
  return _impl_.project_.Get();
}
inline void DeleteHmacKeyRequest::_internal_set_project(const std::string& value) {
  
  _impl_.project_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteHmacKeyRequest::_internal_mutable_project() {
  
  return _impl_.project_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteHmacKeyRequest::release_project() {
  // @@protoc_insertion_point(field_release:google.storage.v2.DeleteHmacKeyRequest.project)
  return _impl_.project_.Release();
}
inline void DeleteHmacKeyRequest::set_allocated_project(std::string* project) {
  if (project != nullptr) {
    
  } else {
    
  }
  _impl_.project_.SetAllocated(project, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.project_.IsDefault()) {
    _impl_.project_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.DeleteHmacKeyRequest.project)
}

// -------------------------------------------------------------------

// GetHmacKeyRequest

// string access_id = 1 [(.google.api.field_behavior) = REQUIRED];
inline void GetHmacKeyRequest::clear_access_id() {
  _impl_.access_id_.ClearToEmpty();
}
inline const std::string& GetHmacKeyRequest::access_id() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.GetHmacKeyRequest.access_id)
  return _internal_access_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetHmacKeyRequest::set_access_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.access_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.GetHmacKeyRequest.access_id)
}
inline std::string* GetHmacKeyRequest::mutable_access_id() {
  std::string* _s = _internal_mutable_access_id();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.GetHmacKeyRequest.access_id)
  return _s;
}
inline const std::string& GetHmacKeyRequest::_internal_access_id() const {
  return _impl_.access_id_.Get();
}
inline void GetHmacKeyRequest::_internal_set_access_id(const std::string& value) {
  
  _impl_.access_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetHmacKeyRequest::_internal_mutable_access_id() {
  
  return _impl_.access_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetHmacKeyRequest::release_access_id() {
  // @@protoc_insertion_point(field_release:google.storage.v2.GetHmacKeyRequest.access_id)
  return _impl_.access_id_.Release();
}
inline void GetHmacKeyRequest::set_allocated_access_id(std::string* access_id) {
  if (access_id != nullptr) {
    
  } else {
    
  }
  _impl_.access_id_.SetAllocated(access_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.access_id_.IsDefault()) {
    _impl_.access_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.GetHmacKeyRequest.access_id)
}

// string project = 2 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetHmacKeyRequest::clear_project() {
  _impl_.project_.ClearToEmpty();
}
inline const std::string& GetHmacKeyRequest::project() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.GetHmacKeyRequest.project)
  return _internal_project();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetHmacKeyRequest::set_project(ArgT0&& arg0, ArgT... args) {
 
 _impl_.project_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.GetHmacKeyRequest.project)
}
inline std::string* GetHmacKeyRequest::mutable_project() {
  std::string* _s = _internal_mutable_project();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.GetHmacKeyRequest.project)
  return _s;
}
inline const std::string& GetHmacKeyRequest::_internal_project() const {
  return _impl_.project_.Get();
}
inline void GetHmacKeyRequest::_internal_set_project(const std::string& value) {
  
  _impl_.project_.Set(value, GetArenaForAllocation());
}
inline std::string* GetHmacKeyRequest::_internal_mutable_project() {
  
  return _impl_.project_.Mutable(GetArenaForAllocation());
}
inline std::string* GetHmacKeyRequest::release_project() {
  // @@protoc_insertion_point(field_release:google.storage.v2.GetHmacKeyRequest.project)
  return _impl_.project_.Release();
}
inline void GetHmacKeyRequest::set_allocated_project(std::string* project) {
  if (project != nullptr) {
    
  } else {
    
  }
  _impl_.project_.SetAllocated(project, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.project_.IsDefault()) {
    _impl_.project_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.GetHmacKeyRequest.project)
}

// -------------------------------------------------------------------

// ListHmacKeysRequest

// string project = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListHmacKeysRequest::clear_project() {
  _impl_.project_.ClearToEmpty();
}
inline const std::string& ListHmacKeysRequest::project() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ListHmacKeysRequest.project)
  return _internal_project();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListHmacKeysRequest::set_project(ArgT0&& arg0, ArgT... args) {
 
 _impl_.project_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.ListHmacKeysRequest.project)
}
inline std::string* ListHmacKeysRequest::mutable_project() {
  std::string* _s = _internal_mutable_project();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.ListHmacKeysRequest.project)
  return _s;
}
inline const std::string& ListHmacKeysRequest::_internal_project() const {
  return _impl_.project_.Get();
}
inline void ListHmacKeysRequest::_internal_set_project(const std::string& value) {
  
  _impl_.project_.Set(value, GetArenaForAllocation());
}
inline std::string* ListHmacKeysRequest::_internal_mutable_project() {
  
  return _impl_.project_.Mutable(GetArenaForAllocation());
}
inline std::string* ListHmacKeysRequest::release_project() {
  // @@protoc_insertion_point(field_release:google.storage.v2.ListHmacKeysRequest.project)
  return _impl_.project_.Release();
}
inline void ListHmacKeysRequest::set_allocated_project(std::string* project) {
  if (project != nullptr) {
    
  } else {
    
  }
  _impl_.project_.SetAllocated(project, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.project_.IsDefault()) {
    _impl_.project_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.ListHmacKeysRequest.project)
}

// int32 page_size = 2 [(.google.api.field_behavior) = OPTIONAL];
inline void ListHmacKeysRequest::clear_page_size() {
  _impl_.page_size_ = 0;
}
inline int32_t ListHmacKeysRequest::_internal_page_size() const {
  return _impl_.page_size_;
}
inline int32_t ListHmacKeysRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ListHmacKeysRequest.page_size)
  return _internal_page_size();
}
inline void ListHmacKeysRequest::_internal_set_page_size(int32_t value) {
  
  _impl_.page_size_ = value;
}
inline void ListHmacKeysRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.ListHmacKeysRequest.page_size)
}

// string page_token = 3 [(.google.api.field_behavior) = OPTIONAL];
inline void ListHmacKeysRequest::clear_page_token() {
  _impl_.page_token_.ClearToEmpty();
}
inline const std::string& ListHmacKeysRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ListHmacKeysRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListHmacKeysRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.ListHmacKeysRequest.page_token)
}
inline std::string* ListHmacKeysRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.ListHmacKeysRequest.page_token)
  return _s;
}
inline const std::string& ListHmacKeysRequest::_internal_page_token() const {
  return _impl_.page_token_.Get();
}
inline void ListHmacKeysRequest::_internal_set_page_token(const std::string& value) {
  
  _impl_.page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListHmacKeysRequest::_internal_mutable_page_token() {
  
  return _impl_.page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListHmacKeysRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.storage.v2.ListHmacKeysRequest.page_token)
  return _impl_.page_token_.Release();
}
inline void ListHmacKeysRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  _impl_.page_token_.SetAllocated(page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.page_token_.IsDefault()) {
    _impl_.page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.ListHmacKeysRequest.page_token)
}

// string service_account_email = 4 [(.google.api.field_behavior) = OPTIONAL];
inline void ListHmacKeysRequest::clear_service_account_email() {
  _impl_.service_account_email_.ClearToEmpty();
}
inline const std::string& ListHmacKeysRequest::service_account_email() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ListHmacKeysRequest.service_account_email)
  return _internal_service_account_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListHmacKeysRequest::set_service_account_email(ArgT0&& arg0, ArgT... args) {
 
 _impl_.service_account_email_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.ListHmacKeysRequest.service_account_email)
}
inline std::string* ListHmacKeysRequest::mutable_service_account_email() {
  std::string* _s = _internal_mutable_service_account_email();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.ListHmacKeysRequest.service_account_email)
  return _s;
}
inline const std::string& ListHmacKeysRequest::_internal_service_account_email() const {
  return _impl_.service_account_email_.Get();
}
inline void ListHmacKeysRequest::_internal_set_service_account_email(const std::string& value) {
  
  _impl_.service_account_email_.Set(value, GetArenaForAllocation());
}
inline std::string* ListHmacKeysRequest::_internal_mutable_service_account_email() {
  
  return _impl_.service_account_email_.Mutable(GetArenaForAllocation());
}
inline std::string* ListHmacKeysRequest::release_service_account_email() {
  // @@protoc_insertion_point(field_release:google.storage.v2.ListHmacKeysRequest.service_account_email)
  return _impl_.service_account_email_.Release();
}
inline void ListHmacKeysRequest::set_allocated_service_account_email(std::string* service_account_email) {
  if (service_account_email != nullptr) {
    
  } else {
    
  }
  _impl_.service_account_email_.SetAllocated(service_account_email, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.service_account_email_.IsDefault()) {
    _impl_.service_account_email_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.ListHmacKeysRequest.service_account_email)
}

// bool show_deleted_keys = 5 [(.google.api.field_behavior) = OPTIONAL];
inline void ListHmacKeysRequest::clear_show_deleted_keys() {
  _impl_.show_deleted_keys_ = false;
}
inline bool ListHmacKeysRequest::_internal_show_deleted_keys() const {
  return _impl_.show_deleted_keys_;
}
inline bool ListHmacKeysRequest::show_deleted_keys() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ListHmacKeysRequest.show_deleted_keys)
  return _internal_show_deleted_keys();
}
inline void ListHmacKeysRequest::_internal_set_show_deleted_keys(bool value) {
  
  _impl_.show_deleted_keys_ = value;
}
inline void ListHmacKeysRequest::set_show_deleted_keys(bool value) {
  _internal_set_show_deleted_keys(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.ListHmacKeysRequest.show_deleted_keys)
}

// -------------------------------------------------------------------

// ListHmacKeysResponse

// repeated .google.storage.v2.HmacKeyMetadata hmac_keys = 1;
inline int ListHmacKeysResponse::_internal_hmac_keys_size() const {
  return _impl_.hmac_keys_.size();
}
inline int ListHmacKeysResponse::hmac_keys_size() const {
  return _internal_hmac_keys_size();
}
inline void ListHmacKeysResponse::clear_hmac_keys() {
  _impl_.hmac_keys_.Clear();
}
inline ::google::storage::v2::HmacKeyMetadata* ListHmacKeysResponse::mutable_hmac_keys(int index) {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.ListHmacKeysResponse.hmac_keys)
  return _impl_.hmac_keys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::storage::v2::HmacKeyMetadata >*
ListHmacKeysResponse::mutable_hmac_keys() {
  // @@protoc_insertion_point(field_mutable_list:google.storage.v2.ListHmacKeysResponse.hmac_keys)
  return &_impl_.hmac_keys_;
}
inline const ::google::storage::v2::HmacKeyMetadata& ListHmacKeysResponse::_internal_hmac_keys(int index) const {
  return _impl_.hmac_keys_.Get(index);
}
inline const ::google::storage::v2::HmacKeyMetadata& ListHmacKeysResponse::hmac_keys(int index) const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ListHmacKeysResponse.hmac_keys)
  return _internal_hmac_keys(index);
}
inline ::google::storage::v2::HmacKeyMetadata* ListHmacKeysResponse::_internal_add_hmac_keys() {
  return _impl_.hmac_keys_.Add();
}
inline ::google::storage::v2::HmacKeyMetadata* ListHmacKeysResponse::add_hmac_keys() {
  ::google::storage::v2::HmacKeyMetadata* _add = _internal_add_hmac_keys();
  // @@protoc_insertion_point(field_add:google.storage.v2.ListHmacKeysResponse.hmac_keys)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::storage::v2::HmacKeyMetadata >&
ListHmacKeysResponse::hmac_keys() const {
  // @@protoc_insertion_point(field_list:google.storage.v2.ListHmacKeysResponse.hmac_keys)
  return _impl_.hmac_keys_;
}

// string next_page_token = 2;
inline void ListHmacKeysResponse::clear_next_page_token() {
  _impl_.next_page_token_.ClearToEmpty();
}
inline const std::string& ListHmacKeysResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ListHmacKeysResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListHmacKeysResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.next_page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.ListHmacKeysResponse.next_page_token)
}
inline std::string* ListHmacKeysResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.ListHmacKeysResponse.next_page_token)
  return _s;
}
inline const std::string& ListHmacKeysResponse::_internal_next_page_token() const {
  return _impl_.next_page_token_.Get();
}
inline void ListHmacKeysResponse::_internal_set_next_page_token(const std::string& value) {
  
  _impl_.next_page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListHmacKeysResponse::_internal_mutable_next_page_token() {
  
  return _impl_.next_page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListHmacKeysResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.storage.v2.ListHmacKeysResponse.next_page_token)
  return _impl_.next_page_token_.Release();
}
inline void ListHmacKeysResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  _impl_.next_page_token_.SetAllocated(next_page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.next_page_token_.IsDefault()) {
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.ListHmacKeysResponse.next_page_token)
}

// -------------------------------------------------------------------

// UpdateHmacKeyRequest

// .google.storage.v2.HmacKeyMetadata hmac_key = 1 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateHmacKeyRequest::_internal_has_hmac_key() const {
  return this != internal_default_instance() && _impl_.hmac_key_ != nullptr;
}
inline bool UpdateHmacKeyRequest::has_hmac_key() const {
  return _internal_has_hmac_key();
}
inline void UpdateHmacKeyRequest::clear_hmac_key() {
  if (GetArenaForAllocation() == nullptr && _impl_.hmac_key_ != nullptr) {
    delete _impl_.hmac_key_;
  }
  _impl_.hmac_key_ = nullptr;
}
inline const ::google::storage::v2::HmacKeyMetadata& UpdateHmacKeyRequest::_internal_hmac_key() const {
  const ::google::storage::v2::HmacKeyMetadata* p = _impl_.hmac_key_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::storage::v2::HmacKeyMetadata&>(
      ::google::storage::v2::_HmacKeyMetadata_default_instance_);
}
inline const ::google::storage::v2::HmacKeyMetadata& UpdateHmacKeyRequest::hmac_key() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.UpdateHmacKeyRequest.hmac_key)
  return _internal_hmac_key();
}
inline void UpdateHmacKeyRequest::unsafe_arena_set_allocated_hmac_key(
    ::google::storage::v2::HmacKeyMetadata* hmac_key) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.hmac_key_);
  }
  _impl_.hmac_key_ = hmac_key;
  if (hmac_key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.UpdateHmacKeyRequest.hmac_key)
}
inline ::google::storage::v2::HmacKeyMetadata* UpdateHmacKeyRequest::release_hmac_key() {
  
  ::google::storage::v2::HmacKeyMetadata* temp = _impl_.hmac_key_;
  _impl_.hmac_key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::storage::v2::HmacKeyMetadata* UpdateHmacKeyRequest::unsafe_arena_release_hmac_key() {
  // @@protoc_insertion_point(field_release:google.storage.v2.UpdateHmacKeyRequest.hmac_key)
  
  ::google::storage::v2::HmacKeyMetadata* temp = _impl_.hmac_key_;
  _impl_.hmac_key_ = nullptr;
  return temp;
}
inline ::google::storage::v2::HmacKeyMetadata* UpdateHmacKeyRequest::_internal_mutable_hmac_key() {
  
  if (_impl_.hmac_key_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::storage::v2::HmacKeyMetadata>(GetArenaForAllocation());
    _impl_.hmac_key_ = p;
  }
  return _impl_.hmac_key_;
}
inline ::google::storage::v2::HmacKeyMetadata* UpdateHmacKeyRequest::mutable_hmac_key() {
  ::google::storage::v2::HmacKeyMetadata* _msg = _internal_mutable_hmac_key();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.UpdateHmacKeyRequest.hmac_key)
  return _msg;
}
inline void UpdateHmacKeyRequest::set_allocated_hmac_key(::google::storage::v2::HmacKeyMetadata* hmac_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.hmac_key_;
  }
  if (hmac_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(hmac_key);
    if (message_arena != submessage_arena) {
      hmac_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hmac_key, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.hmac_key_ = hmac_key;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.UpdateHmacKeyRequest.hmac_key)
}

// .google.protobuf.FieldMask update_mask = 3;
inline bool UpdateHmacKeyRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && _impl_.update_mask_ != nullptr;
}
inline bool UpdateHmacKeyRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateHmacKeyRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = _impl_.update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateHmacKeyRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.UpdateHmacKeyRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateHmacKeyRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  _impl_.update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.UpdateHmacKeyRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateHmacKeyRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateHmacKeyRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:google.storage.v2.UpdateHmacKeyRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateHmacKeyRequest::_internal_mutable_update_mask() {
  
  if (_impl_.update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    _impl_.update_mask_ = p;
  }
  return _impl_.update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateHmacKeyRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.UpdateHmacKeyRequest.update_mask)
  return _msg;
}
inline void UpdateHmacKeyRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.UpdateHmacKeyRequest.update_mask)
}

// -------------------------------------------------------------------

// CommonObjectRequestParams

// string encryption_algorithm = 1;
inline void CommonObjectRequestParams::clear_encryption_algorithm() {
  _impl_.encryption_algorithm_.ClearToEmpty();
}
inline const std::string& CommonObjectRequestParams::encryption_algorithm() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.CommonObjectRequestParams.encryption_algorithm)
  return _internal_encryption_algorithm();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommonObjectRequestParams::set_encryption_algorithm(ArgT0&& arg0, ArgT... args) {
 
 _impl_.encryption_algorithm_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.CommonObjectRequestParams.encryption_algorithm)
}
inline std::string* CommonObjectRequestParams::mutable_encryption_algorithm() {
  std::string* _s = _internal_mutable_encryption_algorithm();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.CommonObjectRequestParams.encryption_algorithm)
  return _s;
}
inline const std::string& CommonObjectRequestParams::_internal_encryption_algorithm() const {
  return _impl_.encryption_algorithm_.Get();
}
inline void CommonObjectRequestParams::_internal_set_encryption_algorithm(const std::string& value) {
  
  _impl_.encryption_algorithm_.Set(value, GetArenaForAllocation());
}
inline std::string* CommonObjectRequestParams::_internal_mutable_encryption_algorithm() {
  
  return _impl_.encryption_algorithm_.Mutable(GetArenaForAllocation());
}
inline std::string* CommonObjectRequestParams::release_encryption_algorithm() {
  // @@protoc_insertion_point(field_release:google.storage.v2.CommonObjectRequestParams.encryption_algorithm)
  return _impl_.encryption_algorithm_.Release();
}
inline void CommonObjectRequestParams::set_allocated_encryption_algorithm(std::string* encryption_algorithm) {
  if (encryption_algorithm != nullptr) {
    
  } else {
    
  }
  _impl_.encryption_algorithm_.SetAllocated(encryption_algorithm, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.encryption_algorithm_.IsDefault()) {
    _impl_.encryption_algorithm_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.CommonObjectRequestParams.encryption_algorithm)
}

// bytes encryption_key_bytes = 4;
inline void CommonObjectRequestParams::clear_encryption_key_bytes() {
  _impl_.encryption_key_bytes_.ClearToEmpty();
}
inline const std::string& CommonObjectRequestParams::encryption_key_bytes() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.CommonObjectRequestParams.encryption_key_bytes)
  return _internal_encryption_key_bytes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommonObjectRequestParams::set_encryption_key_bytes(ArgT0&& arg0, ArgT... args) {
 
 _impl_.encryption_key_bytes_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.CommonObjectRequestParams.encryption_key_bytes)
}
inline std::string* CommonObjectRequestParams::mutable_encryption_key_bytes() {
  std::string* _s = _internal_mutable_encryption_key_bytes();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.CommonObjectRequestParams.encryption_key_bytes)
  return _s;
}
inline const std::string& CommonObjectRequestParams::_internal_encryption_key_bytes() const {
  return _impl_.encryption_key_bytes_.Get();
}
inline void CommonObjectRequestParams::_internal_set_encryption_key_bytes(const std::string& value) {
  
  _impl_.encryption_key_bytes_.Set(value, GetArenaForAllocation());
}
inline std::string* CommonObjectRequestParams::_internal_mutable_encryption_key_bytes() {
  
  return _impl_.encryption_key_bytes_.Mutable(GetArenaForAllocation());
}
inline std::string* CommonObjectRequestParams::release_encryption_key_bytes() {
  // @@protoc_insertion_point(field_release:google.storage.v2.CommonObjectRequestParams.encryption_key_bytes)
  return _impl_.encryption_key_bytes_.Release();
}
inline void CommonObjectRequestParams::set_allocated_encryption_key_bytes(std::string* encryption_key_bytes) {
  if (encryption_key_bytes != nullptr) {
    
  } else {
    
  }
  _impl_.encryption_key_bytes_.SetAllocated(encryption_key_bytes, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.encryption_key_bytes_.IsDefault()) {
    _impl_.encryption_key_bytes_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.CommonObjectRequestParams.encryption_key_bytes)
}

// bytes encryption_key_sha256_bytes = 5;
inline void CommonObjectRequestParams::clear_encryption_key_sha256_bytes() {
  _impl_.encryption_key_sha256_bytes_.ClearToEmpty();
}
inline const std::string& CommonObjectRequestParams::encryption_key_sha256_bytes() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.CommonObjectRequestParams.encryption_key_sha256_bytes)
  return _internal_encryption_key_sha256_bytes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommonObjectRequestParams::set_encryption_key_sha256_bytes(ArgT0&& arg0, ArgT... args) {
 
 _impl_.encryption_key_sha256_bytes_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.CommonObjectRequestParams.encryption_key_sha256_bytes)
}
inline std::string* CommonObjectRequestParams::mutable_encryption_key_sha256_bytes() {
  std::string* _s = _internal_mutable_encryption_key_sha256_bytes();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.CommonObjectRequestParams.encryption_key_sha256_bytes)
  return _s;
}
inline const std::string& CommonObjectRequestParams::_internal_encryption_key_sha256_bytes() const {
  return _impl_.encryption_key_sha256_bytes_.Get();
}
inline void CommonObjectRequestParams::_internal_set_encryption_key_sha256_bytes(const std::string& value) {
  
  _impl_.encryption_key_sha256_bytes_.Set(value, GetArenaForAllocation());
}
inline std::string* CommonObjectRequestParams::_internal_mutable_encryption_key_sha256_bytes() {
  
  return _impl_.encryption_key_sha256_bytes_.Mutable(GetArenaForAllocation());
}
inline std::string* CommonObjectRequestParams::release_encryption_key_sha256_bytes() {
  // @@protoc_insertion_point(field_release:google.storage.v2.CommonObjectRequestParams.encryption_key_sha256_bytes)
  return _impl_.encryption_key_sha256_bytes_.Release();
}
inline void CommonObjectRequestParams::set_allocated_encryption_key_sha256_bytes(std::string* encryption_key_sha256_bytes) {
  if (encryption_key_sha256_bytes != nullptr) {
    
  } else {
    
  }
  _impl_.encryption_key_sha256_bytes_.SetAllocated(encryption_key_sha256_bytes, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.encryption_key_sha256_bytes_.IsDefault()) {
    _impl_.encryption_key_sha256_bytes_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.CommonObjectRequestParams.encryption_key_sha256_bytes)
}

// -------------------------------------------------------------------

// ServiceConstants

// -------------------------------------------------------------------

// Bucket_Billing

// bool requester_pays = 1;
inline void Bucket_Billing::clear_requester_pays() {
  _impl_.requester_pays_ = false;
}
inline bool Bucket_Billing::_internal_requester_pays() const {
  return _impl_.requester_pays_;
}
inline bool Bucket_Billing::requester_pays() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.Billing.requester_pays)
  return _internal_requester_pays();
}
inline void Bucket_Billing::_internal_set_requester_pays(bool value) {
  
  _impl_.requester_pays_ = value;
}
inline void Bucket_Billing::set_requester_pays(bool value) {
  _internal_set_requester_pays(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.Billing.requester_pays)
}

// -------------------------------------------------------------------

// Bucket_Cors

// repeated string origin = 1;
inline int Bucket_Cors::_internal_origin_size() const {
  return _impl_.origin_.size();
}
inline int Bucket_Cors::origin_size() const {
  return _internal_origin_size();
}
inline void Bucket_Cors::clear_origin() {
  _impl_.origin_.Clear();
}
inline std::string* Bucket_Cors::add_origin() {
  std::string* _s = _internal_add_origin();
  // @@protoc_insertion_point(field_add_mutable:google.storage.v2.Bucket.Cors.origin)
  return _s;
}
inline const std::string& Bucket_Cors::_internal_origin(int index) const {
  return _impl_.origin_.Get(index);
}
inline const std::string& Bucket_Cors::origin(int index) const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.Cors.origin)
  return _internal_origin(index);
}
inline std::string* Bucket_Cors::mutable_origin(int index) {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.Cors.origin)
  return _impl_.origin_.Mutable(index);
}
inline void Bucket_Cors::set_origin(int index, const std::string& value) {
  _impl_.origin_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.Cors.origin)
}
inline void Bucket_Cors::set_origin(int index, std::string&& value) {
  _impl_.origin_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.Cors.origin)
}
inline void Bucket_Cors::set_origin(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.origin_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.storage.v2.Bucket.Cors.origin)
}
inline void Bucket_Cors::set_origin(int index, const char* value, size_t size) {
  _impl_.origin_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.storage.v2.Bucket.Cors.origin)
}
inline std::string* Bucket_Cors::_internal_add_origin() {
  return _impl_.origin_.Add();
}
inline void Bucket_Cors::add_origin(const std::string& value) {
  _impl_.origin_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.storage.v2.Bucket.Cors.origin)
}
inline void Bucket_Cors::add_origin(std::string&& value) {
  _impl_.origin_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.storage.v2.Bucket.Cors.origin)
}
inline void Bucket_Cors::add_origin(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.origin_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.storage.v2.Bucket.Cors.origin)
}
inline void Bucket_Cors::add_origin(const char* value, size_t size) {
  _impl_.origin_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.storage.v2.Bucket.Cors.origin)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Bucket_Cors::origin() const {
  // @@protoc_insertion_point(field_list:google.storage.v2.Bucket.Cors.origin)
  return _impl_.origin_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Bucket_Cors::mutable_origin() {
  // @@protoc_insertion_point(field_mutable_list:google.storage.v2.Bucket.Cors.origin)
  return &_impl_.origin_;
}

// repeated string method = 2;
inline int Bucket_Cors::_internal_method_size() const {
  return _impl_.method_.size();
}
inline int Bucket_Cors::method_size() const {
  return _internal_method_size();
}
inline void Bucket_Cors::clear_method() {
  _impl_.method_.Clear();
}
inline std::string* Bucket_Cors::add_method() {
  std::string* _s = _internal_add_method();
  // @@protoc_insertion_point(field_add_mutable:google.storage.v2.Bucket.Cors.method)
  return _s;
}
inline const std::string& Bucket_Cors::_internal_method(int index) const {
  return _impl_.method_.Get(index);
}
inline const std::string& Bucket_Cors::method(int index) const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.Cors.method)
  return _internal_method(index);
}
inline std::string* Bucket_Cors::mutable_method(int index) {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.Cors.method)
  return _impl_.method_.Mutable(index);
}
inline void Bucket_Cors::set_method(int index, const std::string& value) {
  _impl_.method_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.Cors.method)
}
inline void Bucket_Cors::set_method(int index, std::string&& value) {
  _impl_.method_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.Cors.method)
}
inline void Bucket_Cors::set_method(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.method_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.storage.v2.Bucket.Cors.method)
}
inline void Bucket_Cors::set_method(int index, const char* value, size_t size) {
  _impl_.method_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.storage.v2.Bucket.Cors.method)
}
inline std::string* Bucket_Cors::_internal_add_method() {
  return _impl_.method_.Add();
}
inline void Bucket_Cors::add_method(const std::string& value) {
  _impl_.method_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.storage.v2.Bucket.Cors.method)
}
inline void Bucket_Cors::add_method(std::string&& value) {
  _impl_.method_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.storage.v2.Bucket.Cors.method)
}
inline void Bucket_Cors::add_method(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.method_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.storage.v2.Bucket.Cors.method)
}
inline void Bucket_Cors::add_method(const char* value, size_t size) {
  _impl_.method_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.storage.v2.Bucket.Cors.method)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Bucket_Cors::method() const {
  // @@protoc_insertion_point(field_list:google.storage.v2.Bucket.Cors.method)
  return _impl_.method_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Bucket_Cors::mutable_method() {
  // @@protoc_insertion_point(field_mutable_list:google.storage.v2.Bucket.Cors.method)
  return &_impl_.method_;
}

// repeated string response_header = 3;
inline int Bucket_Cors::_internal_response_header_size() const {
  return _impl_.response_header_.size();
}
inline int Bucket_Cors::response_header_size() const {
  return _internal_response_header_size();
}
inline void Bucket_Cors::clear_response_header() {
  _impl_.response_header_.Clear();
}
inline std::string* Bucket_Cors::add_response_header() {
  std::string* _s = _internal_add_response_header();
  // @@protoc_insertion_point(field_add_mutable:google.storage.v2.Bucket.Cors.response_header)
  return _s;
}
inline const std::string& Bucket_Cors::_internal_response_header(int index) const {
  return _impl_.response_header_.Get(index);
}
inline const std::string& Bucket_Cors::response_header(int index) const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.Cors.response_header)
  return _internal_response_header(index);
}
inline std::string* Bucket_Cors::mutable_response_header(int index) {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.Cors.response_header)
  return _impl_.response_header_.Mutable(index);
}
inline void Bucket_Cors::set_response_header(int index, const std::string& value) {
  _impl_.response_header_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.Cors.response_header)
}
inline void Bucket_Cors::set_response_header(int index, std::string&& value) {
  _impl_.response_header_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.Cors.response_header)
}
inline void Bucket_Cors::set_response_header(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.response_header_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.storage.v2.Bucket.Cors.response_header)
}
inline void Bucket_Cors::set_response_header(int index, const char* value, size_t size) {
  _impl_.response_header_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.storage.v2.Bucket.Cors.response_header)
}
inline std::string* Bucket_Cors::_internal_add_response_header() {
  return _impl_.response_header_.Add();
}
inline void Bucket_Cors::add_response_header(const std::string& value) {
  _impl_.response_header_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.storage.v2.Bucket.Cors.response_header)
}
inline void Bucket_Cors::add_response_header(std::string&& value) {
  _impl_.response_header_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.storage.v2.Bucket.Cors.response_header)
}
inline void Bucket_Cors::add_response_header(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.response_header_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.storage.v2.Bucket.Cors.response_header)
}
inline void Bucket_Cors::add_response_header(const char* value, size_t size) {
  _impl_.response_header_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.storage.v2.Bucket.Cors.response_header)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Bucket_Cors::response_header() const {
  // @@protoc_insertion_point(field_list:google.storage.v2.Bucket.Cors.response_header)
  return _impl_.response_header_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Bucket_Cors::mutable_response_header() {
  // @@protoc_insertion_point(field_mutable_list:google.storage.v2.Bucket.Cors.response_header)
  return &_impl_.response_header_;
}

// int32 max_age_seconds = 4;
inline void Bucket_Cors::clear_max_age_seconds() {
  _impl_.max_age_seconds_ = 0;
}
inline int32_t Bucket_Cors::_internal_max_age_seconds() const {
  return _impl_.max_age_seconds_;
}
inline int32_t Bucket_Cors::max_age_seconds() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.Cors.max_age_seconds)
  return _internal_max_age_seconds();
}
inline void Bucket_Cors::_internal_set_max_age_seconds(int32_t value) {
  
  _impl_.max_age_seconds_ = value;
}
inline void Bucket_Cors::set_max_age_seconds(int32_t value) {
  _internal_set_max_age_seconds(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.Cors.max_age_seconds)
}

// -------------------------------------------------------------------

// Bucket_Encryption

// string default_kms_key = 1 [(.google.api.resource_reference) = {
inline void Bucket_Encryption::clear_default_kms_key() {
  _impl_.default_kms_key_.ClearToEmpty();
}
inline const std::string& Bucket_Encryption::default_kms_key() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.Encryption.default_kms_key)
  return _internal_default_kms_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Bucket_Encryption::set_default_kms_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.default_kms_key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.Encryption.default_kms_key)
}
inline std::string* Bucket_Encryption::mutable_default_kms_key() {
  std::string* _s = _internal_mutable_default_kms_key();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.Encryption.default_kms_key)
  return _s;
}
inline const std::string& Bucket_Encryption::_internal_default_kms_key() const {
  return _impl_.default_kms_key_.Get();
}
inline void Bucket_Encryption::_internal_set_default_kms_key(const std::string& value) {
  
  _impl_.default_kms_key_.Set(value, GetArenaForAllocation());
}
inline std::string* Bucket_Encryption::_internal_mutable_default_kms_key() {
  
  return _impl_.default_kms_key_.Mutable(GetArenaForAllocation());
}
inline std::string* Bucket_Encryption::release_default_kms_key() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Bucket.Encryption.default_kms_key)
  return _impl_.default_kms_key_.Release();
}
inline void Bucket_Encryption::set_allocated_default_kms_key(std::string* default_kms_key) {
  if (default_kms_key != nullptr) {
    
  } else {
    
  }
  _impl_.default_kms_key_.SetAllocated(default_kms_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.default_kms_key_.IsDefault()) {
    _impl_.default_kms_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Bucket.Encryption.default_kms_key)
}

// -------------------------------------------------------------------

// Bucket_IamConfig_UniformBucketLevelAccess

// bool enabled = 1;
inline void Bucket_IamConfig_UniformBucketLevelAccess::clear_enabled() {
  _impl_.enabled_ = false;
}
inline bool Bucket_IamConfig_UniformBucketLevelAccess::_internal_enabled() const {
  return _impl_.enabled_;
}
inline bool Bucket_IamConfig_UniformBucketLevelAccess::enabled() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.IamConfig.UniformBucketLevelAccess.enabled)
  return _internal_enabled();
}
inline void Bucket_IamConfig_UniformBucketLevelAccess::_internal_set_enabled(bool value) {
  
  _impl_.enabled_ = value;
}
inline void Bucket_IamConfig_UniformBucketLevelAccess::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.IamConfig.UniformBucketLevelAccess.enabled)
}

// .google.protobuf.Timestamp lock_time = 2;
inline bool Bucket_IamConfig_UniformBucketLevelAccess::_internal_has_lock_time() const {
  return this != internal_default_instance() && _impl_.lock_time_ != nullptr;
}
inline bool Bucket_IamConfig_UniformBucketLevelAccess::has_lock_time() const {
  return _internal_has_lock_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Bucket_IamConfig_UniformBucketLevelAccess::_internal_lock_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.lock_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Bucket_IamConfig_UniformBucketLevelAccess::lock_time() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.IamConfig.UniformBucketLevelAccess.lock_time)
  return _internal_lock_time();
}
inline void Bucket_IamConfig_UniformBucketLevelAccess::unsafe_arena_set_allocated_lock_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* lock_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lock_time_);
  }
  _impl_.lock_time_ = lock_time;
  if (lock_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.Bucket.IamConfig.UniformBucketLevelAccess.lock_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Bucket_IamConfig_UniformBucketLevelAccess::release_lock_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.lock_time_;
  _impl_.lock_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Bucket_IamConfig_UniformBucketLevelAccess::unsafe_arena_release_lock_time() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Bucket.IamConfig.UniformBucketLevelAccess.lock_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.lock_time_;
  _impl_.lock_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Bucket_IamConfig_UniformBucketLevelAccess::_internal_mutable_lock_time() {
  
  if (_impl_.lock_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.lock_time_ = p;
  }
  return _impl_.lock_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Bucket_IamConfig_UniformBucketLevelAccess::mutable_lock_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_lock_time();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.IamConfig.UniformBucketLevelAccess.lock_time)
  return _msg;
}
inline void Bucket_IamConfig_UniformBucketLevelAccess::set_allocated_lock_time(::PROTOBUF_NAMESPACE_ID::Timestamp* lock_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lock_time_);
  }
  if (lock_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lock_time));
    if (message_arena != submessage_arena) {
      lock_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lock_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.lock_time_ = lock_time;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Bucket.IamConfig.UniformBucketLevelAccess.lock_time)
}

// -------------------------------------------------------------------

// Bucket_IamConfig

// .google.storage.v2.Bucket.IamConfig.UniformBucketLevelAccess uniform_bucket_level_access = 1;
inline bool Bucket_IamConfig::_internal_has_uniform_bucket_level_access() const {
  return this != internal_default_instance() && _impl_.uniform_bucket_level_access_ != nullptr;
}
inline bool Bucket_IamConfig::has_uniform_bucket_level_access() const {
  return _internal_has_uniform_bucket_level_access();
}
inline void Bucket_IamConfig::clear_uniform_bucket_level_access() {
  if (GetArenaForAllocation() == nullptr && _impl_.uniform_bucket_level_access_ != nullptr) {
    delete _impl_.uniform_bucket_level_access_;
  }
  _impl_.uniform_bucket_level_access_ = nullptr;
}
inline const ::google::storage::v2::Bucket_IamConfig_UniformBucketLevelAccess& Bucket_IamConfig::_internal_uniform_bucket_level_access() const {
  const ::google::storage::v2::Bucket_IamConfig_UniformBucketLevelAccess* p = _impl_.uniform_bucket_level_access_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::storage::v2::Bucket_IamConfig_UniformBucketLevelAccess&>(
      ::google::storage::v2::_Bucket_IamConfig_UniformBucketLevelAccess_default_instance_);
}
inline const ::google::storage::v2::Bucket_IamConfig_UniformBucketLevelAccess& Bucket_IamConfig::uniform_bucket_level_access() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.IamConfig.uniform_bucket_level_access)
  return _internal_uniform_bucket_level_access();
}
inline void Bucket_IamConfig::unsafe_arena_set_allocated_uniform_bucket_level_access(
    ::google::storage::v2::Bucket_IamConfig_UniformBucketLevelAccess* uniform_bucket_level_access) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.uniform_bucket_level_access_);
  }
  _impl_.uniform_bucket_level_access_ = uniform_bucket_level_access;
  if (uniform_bucket_level_access) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.Bucket.IamConfig.uniform_bucket_level_access)
}
inline ::google::storage::v2::Bucket_IamConfig_UniformBucketLevelAccess* Bucket_IamConfig::release_uniform_bucket_level_access() {
  
  ::google::storage::v2::Bucket_IamConfig_UniformBucketLevelAccess* temp = _impl_.uniform_bucket_level_access_;
  _impl_.uniform_bucket_level_access_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::storage::v2::Bucket_IamConfig_UniformBucketLevelAccess* Bucket_IamConfig::unsafe_arena_release_uniform_bucket_level_access() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Bucket.IamConfig.uniform_bucket_level_access)
  
  ::google::storage::v2::Bucket_IamConfig_UniformBucketLevelAccess* temp = _impl_.uniform_bucket_level_access_;
  _impl_.uniform_bucket_level_access_ = nullptr;
  return temp;
}
inline ::google::storage::v2::Bucket_IamConfig_UniformBucketLevelAccess* Bucket_IamConfig::_internal_mutable_uniform_bucket_level_access() {
  
  if (_impl_.uniform_bucket_level_access_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::storage::v2::Bucket_IamConfig_UniformBucketLevelAccess>(GetArenaForAllocation());
    _impl_.uniform_bucket_level_access_ = p;
  }
  return _impl_.uniform_bucket_level_access_;
}
inline ::google::storage::v2::Bucket_IamConfig_UniformBucketLevelAccess* Bucket_IamConfig::mutable_uniform_bucket_level_access() {
  ::google::storage::v2::Bucket_IamConfig_UniformBucketLevelAccess* _msg = _internal_mutable_uniform_bucket_level_access();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.IamConfig.uniform_bucket_level_access)
  return _msg;
}
inline void Bucket_IamConfig::set_allocated_uniform_bucket_level_access(::google::storage::v2::Bucket_IamConfig_UniformBucketLevelAccess* uniform_bucket_level_access) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.uniform_bucket_level_access_;
  }
  if (uniform_bucket_level_access) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(uniform_bucket_level_access);
    if (message_arena != submessage_arena) {
      uniform_bucket_level_access = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uniform_bucket_level_access, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.uniform_bucket_level_access_ = uniform_bucket_level_access;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Bucket.IamConfig.uniform_bucket_level_access)
}

// string public_access_prevention = 3;
inline void Bucket_IamConfig::clear_public_access_prevention() {
  _impl_.public_access_prevention_.ClearToEmpty();
}
inline const std::string& Bucket_IamConfig::public_access_prevention() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.IamConfig.public_access_prevention)
  return _internal_public_access_prevention();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Bucket_IamConfig::set_public_access_prevention(ArgT0&& arg0, ArgT... args) {
 
 _impl_.public_access_prevention_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.IamConfig.public_access_prevention)
}
inline std::string* Bucket_IamConfig::mutable_public_access_prevention() {
  std::string* _s = _internal_mutable_public_access_prevention();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.IamConfig.public_access_prevention)
  return _s;
}
inline const std::string& Bucket_IamConfig::_internal_public_access_prevention() const {
  return _impl_.public_access_prevention_.Get();
}
inline void Bucket_IamConfig::_internal_set_public_access_prevention(const std::string& value) {
  
  _impl_.public_access_prevention_.Set(value, GetArenaForAllocation());
}
inline std::string* Bucket_IamConfig::_internal_mutable_public_access_prevention() {
  
  return _impl_.public_access_prevention_.Mutable(GetArenaForAllocation());
}
inline std::string* Bucket_IamConfig::release_public_access_prevention() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Bucket.IamConfig.public_access_prevention)
  return _impl_.public_access_prevention_.Release();
}
inline void Bucket_IamConfig::set_allocated_public_access_prevention(std::string* public_access_prevention) {
  if (public_access_prevention != nullptr) {
    
  } else {
    
  }
  _impl_.public_access_prevention_.SetAllocated(public_access_prevention, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.public_access_prevention_.IsDefault()) {
    _impl_.public_access_prevention_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Bucket.IamConfig.public_access_prevention)
}

// -------------------------------------------------------------------

// Bucket_Lifecycle_Rule_Action

// string type = 1;
inline void Bucket_Lifecycle_Rule_Action::clear_type() {
  _impl_.type_.ClearToEmpty();
}
inline const std::string& Bucket_Lifecycle_Rule_Action::type() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.Lifecycle.Rule.Action.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Bucket_Lifecycle_Rule_Action::set_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.Lifecycle.Rule.Action.type)
}
inline std::string* Bucket_Lifecycle_Rule_Action::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.Lifecycle.Rule.Action.type)
  return _s;
}
inline const std::string& Bucket_Lifecycle_Rule_Action::_internal_type() const {
  return _impl_.type_.Get();
}
inline void Bucket_Lifecycle_Rule_Action::_internal_set_type(const std::string& value) {
  
  _impl_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* Bucket_Lifecycle_Rule_Action::_internal_mutable_type() {
  
  return _impl_.type_.Mutable(GetArenaForAllocation());
}
inline std::string* Bucket_Lifecycle_Rule_Action::release_type() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Bucket.Lifecycle.Rule.Action.type)
  return _impl_.type_.Release();
}
inline void Bucket_Lifecycle_Rule_Action::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  _impl_.type_.SetAllocated(type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Bucket.Lifecycle.Rule.Action.type)
}

// string storage_class = 2;
inline void Bucket_Lifecycle_Rule_Action::clear_storage_class() {
  _impl_.storage_class_.ClearToEmpty();
}
inline const std::string& Bucket_Lifecycle_Rule_Action::storage_class() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.Lifecycle.Rule.Action.storage_class)
  return _internal_storage_class();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Bucket_Lifecycle_Rule_Action::set_storage_class(ArgT0&& arg0, ArgT... args) {
 
 _impl_.storage_class_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.Lifecycle.Rule.Action.storage_class)
}
inline std::string* Bucket_Lifecycle_Rule_Action::mutable_storage_class() {
  std::string* _s = _internal_mutable_storage_class();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.Lifecycle.Rule.Action.storage_class)
  return _s;
}
inline const std::string& Bucket_Lifecycle_Rule_Action::_internal_storage_class() const {
  return _impl_.storage_class_.Get();
}
inline void Bucket_Lifecycle_Rule_Action::_internal_set_storage_class(const std::string& value) {
  
  _impl_.storage_class_.Set(value, GetArenaForAllocation());
}
inline std::string* Bucket_Lifecycle_Rule_Action::_internal_mutable_storage_class() {
  
  return _impl_.storage_class_.Mutable(GetArenaForAllocation());
}
inline std::string* Bucket_Lifecycle_Rule_Action::release_storage_class() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Bucket.Lifecycle.Rule.Action.storage_class)
  return _impl_.storage_class_.Release();
}
inline void Bucket_Lifecycle_Rule_Action::set_allocated_storage_class(std::string* storage_class) {
  if (storage_class != nullptr) {
    
  } else {
    
  }
  _impl_.storage_class_.SetAllocated(storage_class, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.storage_class_.IsDefault()) {
    _impl_.storage_class_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Bucket.Lifecycle.Rule.Action.storage_class)
}

// -------------------------------------------------------------------

// Bucket_Lifecycle_Rule_Condition

// optional int32 age_days = 1;
inline bool Bucket_Lifecycle_Rule_Condition::_internal_has_age_days() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Bucket_Lifecycle_Rule_Condition::has_age_days() const {
  return _internal_has_age_days();
}
inline void Bucket_Lifecycle_Rule_Condition::clear_age_days() {
  _impl_.age_days_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t Bucket_Lifecycle_Rule_Condition::_internal_age_days() const {
  return _impl_.age_days_;
}
inline int32_t Bucket_Lifecycle_Rule_Condition::age_days() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.Lifecycle.Rule.Condition.age_days)
  return _internal_age_days();
}
inline void Bucket_Lifecycle_Rule_Condition::_internal_set_age_days(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.age_days_ = value;
}
inline void Bucket_Lifecycle_Rule_Condition::set_age_days(int32_t value) {
  _internal_set_age_days(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.Lifecycle.Rule.Condition.age_days)
}

// .google.type.Date created_before = 2;
inline bool Bucket_Lifecycle_Rule_Condition::_internal_has_created_before() const {
  return this != internal_default_instance() && _impl_.created_before_ != nullptr;
}
inline bool Bucket_Lifecycle_Rule_Condition::has_created_before() const {
  return _internal_has_created_before();
}
inline const ::google::type::Date& Bucket_Lifecycle_Rule_Condition::_internal_created_before() const {
  const ::google::type::Date* p = _impl_.created_before_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::type::Date&>(
      ::google::type::_Date_default_instance_);
}
inline const ::google::type::Date& Bucket_Lifecycle_Rule_Condition::created_before() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.Lifecycle.Rule.Condition.created_before)
  return _internal_created_before();
}
inline void Bucket_Lifecycle_Rule_Condition::unsafe_arena_set_allocated_created_before(
    ::google::type::Date* created_before) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.created_before_);
  }
  _impl_.created_before_ = created_before;
  if (created_before) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.Bucket.Lifecycle.Rule.Condition.created_before)
}
inline ::google::type::Date* Bucket_Lifecycle_Rule_Condition::release_created_before() {
  
  ::google::type::Date* temp = _impl_.created_before_;
  _impl_.created_before_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::type::Date* Bucket_Lifecycle_Rule_Condition::unsafe_arena_release_created_before() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Bucket.Lifecycle.Rule.Condition.created_before)
  
  ::google::type::Date* temp = _impl_.created_before_;
  _impl_.created_before_ = nullptr;
  return temp;
}
inline ::google::type::Date* Bucket_Lifecycle_Rule_Condition::_internal_mutable_created_before() {
  
  if (_impl_.created_before_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::type::Date>(GetArenaForAllocation());
    _impl_.created_before_ = p;
  }
  return _impl_.created_before_;
}
inline ::google::type::Date* Bucket_Lifecycle_Rule_Condition::mutable_created_before() {
  ::google::type::Date* _msg = _internal_mutable_created_before();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.Lifecycle.Rule.Condition.created_before)
  return _msg;
}
inline void Bucket_Lifecycle_Rule_Condition::set_allocated_created_before(::google::type::Date* created_before) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.created_before_);
  }
  if (created_before) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_before));
    if (message_arena != submessage_arena) {
      created_before = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_before, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.created_before_ = created_before;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Bucket.Lifecycle.Rule.Condition.created_before)
}

// optional bool is_live = 3;
inline bool Bucket_Lifecycle_Rule_Condition::_internal_has_is_live() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Bucket_Lifecycle_Rule_Condition::has_is_live() const {
  return _internal_has_is_live();
}
inline void Bucket_Lifecycle_Rule_Condition::clear_is_live() {
  _impl_.is_live_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool Bucket_Lifecycle_Rule_Condition::_internal_is_live() const {
  return _impl_.is_live_;
}
inline bool Bucket_Lifecycle_Rule_Condition::is_live() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.Lifecycle.Rule.Condition.is_live)
  return _internal_is_live();
}
inline void Bucket_Lifecycle_Rule_Condition::_internal_set_is_live(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.is_live_ = value;
}
inline void Bucket_Lifecycle_Rule_Condition::set_is_live(bool value) {
  _internal_set_is_live(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.Lifecycle.Rule.Condition.is_live)
}

// optional int32 num_newer_versions = 4;
inline bool Bucket_Lifecycle_Rule_Condition::_internal_has_num_newer_versions() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Bucket_Lifecycle_Rule_Condition::has_num_newer_versions() const {
  return _internal_has_num_newer_versions();
}
inline void Bucket_Lifecycle_Rule_Condition::clear_num_newer_versions() {
  _impl_.num_newer_versions_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t Bucket_Lifecycle_Rule_Condition::_internal_num_newer_versions() const {
  return _impl_.num_newer_versions_;
}
inline int32_t Bucket_Lifecycle_Rule_Condition::num_newer_versions() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.Lifecycle.Rule.Condition.num_newer_versions)
  return _internal_num_newer_versions();
}
inline void Bucket_Lifecycle_Rule_Condition::_internal_set_num_newer_versions(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.num_newer_versions_ = value;
}
inline void Bucket_Lifecycle_Rule_Condition::set_num_newer_versions(int32_t value) {
  _internal_set_num_newer_versions(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.Lifecycle.Rule.Condition.num_newer_versions)
}

// repeated string matches_storage_class = 5;
inline int Bucket_Lifecycle_Rule_Condition::_internal_matches_storage_class_size() const {
  return _impl_.matches_storage_class_.size();
}
inline int Bucket_Lifecycle_Rule_Condition::matches_storage_class_size() const {
  return _internal_matches_storage_class_size();
}
inline void Bucket_Lifecycle_Rule_Condition::clear_matches_storage_class() {
  _impl_.matches_storage_class_.Clear();
}
inline std::string* Bucket_Lifecycle_Rule_Condition::add_matches_storage_class() {
  std::string* _s = _internal_add_matches_storage_class();
  // @@protoc_insertion_point(field_add_mutable:google.storage.v2.Bucket.Lifecycle.Rule.Condition.matches_storage_class)
  return _s;
}
inline const std::string& Bucket_Lifecycle_Rule_Condition::_internal_matches_storage_class(int index) const {
  return _impl_.matches_storage_class_.Get(index);
}
inline const std::string& Bucket_Lifecycle_Rule_Condition::matches_storage_class(int index) const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.Lifecycle.Rule.Condition.matches_storage_class)
  return _internal_matches_storage_class(index);
}
inline std::string* Bucket_Lifecycle_Rule_Condition::mutable_matches_storage_class(int index) {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.Lifecycle.Rule.Condition.matches_storage_class)
  return _impl_.matches_storage_class_.Mutable(index);
}
inline void Bucket_Lifecycle_Rule_Condition::set_matches_storage_class(int index, const std::string& value) {
  _impl_.matches_storage_class_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.Lifecycle.Rule.Condition.matches_storage_class)
}
inline void Bucket_Lifecycle_Rule_Condition::set_matches_storage_class(int index, std::string&& value) {
  _impl_.matches_storage_class_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.Lifecycle.Rule.Condition.matches_storage_class)
}
inline void Bucket_Lifecycle_Rule_Condition::set_matches_storage_class(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.matches_storage_class_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.storage.v2.Bucket.Lifecycle.Rule.Condition.matches_storage_class)
}
inline void Bucket_Lifecycle_Rule_Condition::set_matches_storage_class(int index, const char* value, size_t size) {
  _impl_.matches_storage_class_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.storage.v2.Bucket.Lifecycle.Rule.Condition.matches_storage_class)
}
inline std::string* Bucket_Lifecycle_Rule_Condition::_internal_add_matches_storage_class() {
  return _impl_.matches_storage_class_.Add();
}
inline void Bucket_Lifecycle_Rule_Condition::add_matches_storage_class(const std::string& value) {
  _impl_.matches_storage_class_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.storage.v2.Bucket.Lifecycle.Rule.Condition.matches_storage_class)
}
inline void Bucket_Lifecycle_Rule_Condition::add_matches_storage_class(std::string&& value) {
  _impl_.matches_storage_class_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.storage.v2.Bucket.Lifecycle.Rule.Condition.matches_storage_class)
}
inline void Bucket_Lifecycle_Rule_Condition::add_matches_storage_class(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.matches_storage_class_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.storage.v2.Bucket.Lifecycle.Rule.Condition.matches_storage_class)
}
inline void Bucket_Lifecycle_Rule_Condition::add_matches_storage_class(const char* value, size_t size) {
  _impl_.matches_storage_class_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.storage.v2.Bucket.Lifecycle.Rule.Condition.matches_storage_class)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Bucket_Lifecycle_Rule_Condition::matches_storage_class() const {
  // @@protoc_insertion_point(field_list:google.storage.v2.Bucket.Lifecycle.Rule.Condition.matches_storage_class)
  return _impl_.matches_storage_class_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Bucket_Lifecycle_Rule_Condition::mutable_matches_storage_class() {
  // @@protoc_insertion_point(field_mutable_list:google.storage.v2.Bucket.Lifecycle.Rule.Condition.matches_storage_class)
  return &_impl_.matches_storage_class_;
}

// optional int32 days_since_custom_time = 7;
inline bool Bucket_Lifecycle_Rule_Condition::_internal_has_days_since_custom_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Bucket_Lifecycle_Rule_Condition::has_days_since_custom_time() const {
  return _internal_has_days_since_custom_time();
}
inline void Bucket_Lifecycle_Rule_Condition::clear_days_since_custom_time() {
  _impl_.days_since_custom_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t Bucket_Lifecycle_Rule_Condition::_internal_days_since_custom_time() const {
  return _impl_.days_since_custom_time_;
}
inline int32_t Bucket_Lifecycle_Rule_Condition::days_since_custom_time() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.Lifecycle.Rule.Condition.days_since_custom_time)
  return _internal_days_since_custom_time();
}
inline void Bucket_Lifecycle_Rule_Condition::_internal_set_days_since_custom_time(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.days_since_custom_time_ = value;
}
inline void Bucket_Lifecycle_Rule_Condition::set_days_since_custom_time(int32_t value) {
  _internal_set_days_since_custom_time(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.Lifecycle.Rule.Condition.days_since_custom_time)
}

// .google.type.Date custom_time_before = 8;
inline bool Bucket_Lifecycle_Rule_Condition::_internal_has_custom_time_before() const {
  return this != internal_default_instance() && _impl_.custom_time_before_ != nullptr;
}
inline bool Bucket_Lifecycle_Rule_Condition::has_custom_time_before() const {
  return _internal_has_custom_time_before();
}
inline const ::google::type::Date& Bucket_Lifecycle_Rule_Condition::_internal_custom_time_before() const {
  const ::google::type::Date* p = _impl_.custom_time_before_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::type::Date&>(
      ::google::type::_Date_default_instance_);
}
inline const ::google::type::Date& Bucket_Lifecycle_Rule_Condition::custom_time_before() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.Lifecycle.Rule.Condition.custom_time_before)
  return _internal_custom_time_before();
}
inline void Bucket_Lifecycle_Rule_Condition::unsafe_arena_set_allocated_custom_time_before(
    ::google::type::Date* custom_time_before) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.custom_time_before_);
  }
  _impl_.custom_time_before_ = custom_time_before;
  if (custom_time_before) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.Bucket.Lifecycle.Rule.Condition.custom_time_before)
}
inline ::google::type::Date* Bucket_Lifecycle_Rule_Condition::release_custom_time_before() {
  
  ::google::type::Date* temp = _impl_.custom_time_before_;
  _impl_.custom_time_before_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::type::Date* Bucket_Lifecycle_Rule_Condition::unsafe_arena_release_custom_time_before() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Bucket.Lifecycle.Rule.Condition.custom_time_before)
  
  ::google::type::Date* temp = _impl_.custom_time_before_;
  _impl_.custom_time_before_ = nullptr;
  return temp;
}
inline ::google::type::Date* Bucket_Lifecycle_Rule_Condition::_internal_mutable_custom_time_before() {
  
  if (_impl_.custom_time_before_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::type::Date>(GetArenaForAllocation());
    _impl_.custom_time_before_ = p;
  }
  return _impl_.custom_time_before_;
}
inline ::google::type::Date* Bucket_Lifecycle_Rule_Condition::mutable_custom_time_before() {
  ::google::type::Date* _msg = _internal_mutable_custom_time_before();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.Lifecycle.Rule.Condition.custom_time_before)
  return _msg;
}
inline void Bucket_Lifecycle_Rule_Condition::set_allocated_custom_time_before(::google::type::Date* custom_time_before) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.custom_time_before_);
  }
  if (custom_time_before) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(custom_time_before));
    if (message_arena != submessage_arena) {
      custom_time_before = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custom_time_before, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.custom_time_before_ = custom_time_before;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Bucket.Lifecycle.Rule.Condition.custom_time_before)
}

// optional int32 days_since_noncurrent_time = 9;
inline bool Bucket_Lifecycle_Rule_Condition::_internal_has_days_since_noncurrent_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Bucket_Lifecycle_Rule_Condition::has_days_since_noncurrent_time() const {
  return _internal_has_days_since_noncurrent_time();
}
inline void Bucket_Lifecycle_Rule_Condition::clear_days_since_noncurrent_time() {
  _impl_.days_since_noncurrent_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t Bucket_Lifecycle_Rule_Condition::_internal_days_since_noncurrent_time() const {
  return _impl_.days_since_noncurrent_time_;
}
inline int32_t Bucket_Lifecycle_Rule_Condition::days_since_noncurrent_time() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.Lifecycle.Rule.Condition.days_since_noncurrent_time)
  return _internal_days_since_noncurrent_time();
}
inline void Bucket_Lifecycle_Rule_Condition::_internal_set_days_since_noncurrent_time(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.days_since_noncurrent_time_ = value;
}
inline void Bucket_Lifecycle_Rule_Condition::set_days_since_noncurrent_time(int32_t value) {
  _internal_set_days_since_noncurrent_time(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.Lifecycle.Rule.Condition.days_since_noncurrent_time)
}

// .google.type.Date noncurrent_time_before = 10;
inline bool Bucket_Lifecycle_Rule_Condition::_internal_has_noncurrent_time_before() const {
  return this != internal_default_instance() && _impl_.noncurrent_time_before_ != nullptr;
}
inline bool Bucket_Lifecycle_Rule_Condition::has_noncurrent_time_before() const {
  return _internal_has_noncurrent_time_before();
}
inline const ::google::type::Date& Bucket_Lifecycle_Rule_Condition::_internal_noncurrent_time_before() const {
  const ::google::type::Date* p = _impl_.noncurrent_time_before_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::type::Date&>(
      ::google::type::_Date_default_instance_);
}
inline const ::google::type::Date& Bucket_Lifecycle_Rule_Condition::noncurrent_time_before() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.Lifecycle.Rule.Condition.noncurrent_time_before)
  return _internal_noncurrent_time_before();
}
inline void Bucket_Lifecycle_Rule_Condition::unsafe_arena_set_allocated_noncurrent_time_before(
    ::google::type::Date* noncurrent_time_before) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.noncurrent_time_before_);
  }
  _impl_.noncurrent_time_before_ = noncurrent_time_before;
  if (noncurrent_time_before) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.Bucket.Lifecycle.Rule.Condition.noncurrent_time_before)
}
inline ::google::type::Date* Bucket_Lifecycle_Rule_Condition::release_noncurrent_time_before() {
  
  ::google::type::Date* temp = _impl_.noncurrent_time_before_;
  _impl_.noncurrent_time_before_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::type::Date* Bucket_Lifecycle_Rule_Condition::unsafe_arena_release_noncurrent_time_before() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Bucket.Lifecycle.Rule.Condition.noncurrent_time_before)
  
  ::google::type::Date* temp = _impl_.noncurrent_time_before_;
  _impl_.noncurrent_time_before_ = nullptr;
  return temp;
}
inline ::google::type::Date* Bucket_Lifecycle_Rule_Condition::_internal_mutable_noncurrent_time_before() {
  
  if (_impl_.noncurrent_time_before_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::type::Date>(GetArenaForAllocation());
    _impl_.noncurrent_time_before_ = p;
  }
  return _impl_.noncurrent_time_before_;
}
inline ::google::type::Date* Bucket_Lifecycle_Rule_Condition::mutable_noncurrent_time_before() {
  ::google::type::Date* _msg = _internal_mutable_noncurrent_time_before();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.Lifecycle.Rule.Condition.noncurrent_time_before)
  return _msg;
}
inline void Bucket_Lifecycle_Rule_Condition::set_allocated_noncurrent_time_before(::google::type::Date* noncurrent_time_before) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.noncurrent_time_before_);
  }
  if (noncurrent_time_before) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(noncurrent_time_before));
    if (message_arena != submessage_arena) {
      noncurrent_time_before = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, noncurrent_time_before, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.noncurrent_time_before_ = noncurrent_time_before;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Bucket.Lifecycle.Rule.Condition.noncurrent_time_before)
}

// repeated string matches_prefix = 11;
inline int Bucket_Lifecycle_Rule_Condition::_internal_matches_prefix_size() const {
  return _impl_.matches_prefix_.size();
}
inline int Bucket_Lifecycle_Rule_Condition::matches_prefix_size() const {
  return _internal_matches_prefix_size();
}
inline void Bucket_Lifecycle_Rule_Condition::clear_matches_prefix() {
  _impl_.matches_prefix_.Clear();
}
inline std::string* Bucket_Lifecycle_Rule_Condition::add_matches_prefix() {
  std::string* _s = _internal_add_matches_prefix();
  // @@protoc_insertion_point(field_add_mutable:google.storage.v2.Bucket.Lifecycle.Rule.Condition.matches_prefix)
  return _s;
}
inline const std::string& Bucket_Lifecycle_Rule_Condition::_internal_matches_prefix(int index) const {
  return _impl_.matches_prefix_.Get(index);
}
inline const std::string& Bucket_Lifecycle_Rule_Condition::matches_prefix(int index) const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.Lifecycle.Rule.Condition.matches_prefix)
  return _internal_matches_prefix(index);
}
inline std::string* Bucket_Lifecycle_Rule_Condition::mutable_matches_prefix(int index) {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.Lifecycle.Rule.Condition.matches_prefix)
  return _impl_.matches_prefix_.Mutable(index);
}
inline void Bucket_Lifecycle_Rule_Condition::set_matches_prefix(int index, const std::string& value) {
  _impl_.matches_prefix_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.Lifecycle.Rule.Condition.matches_prefix)
}
inline void Bucket_Lifecycle_Rule_Condition::set_matches_prefix(int index, std::string&& value) {
  _impl_.matches_prefix_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.Lifecycle.Rule.Condition.matches_prefix)
}
inline void Bucket_Lifecycle_Rule_Condition::set_matches_prefix(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.matches_prefix_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.storage.v2.Bucket.Lifecycle.Rule.Condition.matches_prefix)
}
inline void Bucket_Lifecycle_Rule_Condition::set_matches_prefix(int index, const char* value, size_t size) {
  _impl_.matches_prefix_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.storage.v2.Bucket.Lifecycle.Rule.Condition.matches_prefix)
}
inline std::string* Bucket_Lifecycle_Rule_Condition::_internal_add_matches_prefix() {
  return _impl_.matches_prefix_.Add();
}
inline void Bucket_Lifecycle_Rule_Condition::add_matches_prefix(const std::string& value) {
  _impl_.matches_prefix_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.storage.v2.Bucket.Lifecycle.Rule.Condition.matches_prefix)
}
inline void Bucket_Lifecycle_Rule_Condition::add_matches_prefix(std::string&& value) {
  _impl_.matches_prefix_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.storage.v2.Bucket.Lifecycle.Rule.Condition.matches_prefix)
}
inline void Bucket_Lifecycle_Rule_Condition::add_matches_prefix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.matches_prefix_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.storage.v2.Bucket.Lifecycle.Rule.Condition.matches_prefix)
}
inline void Bucket_Lifecycle_Rule_Condition::add_matches_prefix(const char* value, size_t size) {
  _impl_.matches_prefix_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.storage.v2.Bucket.Lifecycle.Rule.Condition.matches_prefix)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Bucket_Lifecycle_Rule_Condition::matches_prefix() const {
  // @@protoc_insertion_point(field_list:google.storage.v2.Bucket.Lifecycle.Rule.Condition.matches_prefix)
  return _impl_.matches_prefix_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Bucket_Lifecycle_Rule_Condition::mutable_matches_prefix() {
  // @@protoc_insertion_point(field_mutable_list:google.storage.v2.Bucket.Lifecycle.Rule.Condition.matches_prefix)
  return &_impl_.matches_prefix_;
}

// repeated string matches_suffix = 12;
inline int Bucket_Lifecycle_Rule_Condition::_internal_matches_suffix_size() const {
  return _impl_.matches_suffix_.size();
}
inline int Bucket_Lifecycle_Rule_Condition::matches_suffix_size() const {
  return _internal_matches_suffix_size();
}
inline void Bucket_Lifecycle_Rule_Condition::clear_matches_suffix() {
  _impl_.matches_suffix_.Clear();
}
inline std::string* Bucket_Lifecycle_Rule_Condition::add_matches_suffix() {
  std::string* _s = _internal_add_matches_suffix();
  // @@protoc_insertion_point(field_add_mutable:google.storage.v2.Bucket.Lifecycle.Rule.Condition.matches_suffix)
  return _s;
}
inline const std::string& Bucket_Lifecycle_Rule_Condition::_internal_matches_suffix(int index) const {
  return _impl_.matches_suffix_.Get(index);
}
inline const std::string& Bucket_Lifecycle_Rule_Condition::matches_suffix(int index) const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.Lifecycle.Rule.Condition.matches_suffix)
  return _internal_matches_suffix(index);
}
inline std::string* Bucket_Lifecycle_Rule_Condition::mutable_matches_suffix(int index) {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.Lifecycle.Rule.Condition.matches_suffix)
  return _impl_.matches_suffix_.Mutable(index);
}
inline void Bucket_Lifecycle_Rule_Condition::set_matches_suffix(int index, const std::string& value) {
  _impl_.matches_suffix_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.Lifecycle.Rule.Condition.matches_suffix)
}
inline void Bucket_Lifecycle_Rule_Condition::set_matches_suffix(int index, std::string&& value) {
  _impl_.matches_suffix_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.Lifecycle.Rule.Condition.matches_suffix)
}
inline void Bucket_Lifecycle_Rule_Condition::set_matches_suffix(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.matches_suffix_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.storage.v2.Bucket.Lifecycle.Rule.Condition.matches_suffix)
}
inline void Bucket_Lifecycle_Rule_Condition::set_matches_suffix(int index, const char* value, size_t size) {
  _impl_.matches_suffix_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.storage.v2.Bucket.Lifecycle.Rule.Condition.matches_suffix)
}
inline std::string* Bucket_Lifecycle_Rule_Condition::_internal_add_matches_suffix() {
  return _impl_.matches_suffix_.Add();
}
inline void Bucket_Lifecycle_Rule_Condition::add_matches_suffix(const std::string& value) {
  _impl_.matches_suffix_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.storage.v2.Bucket.Lifecycle.Rule.Condition.matches_suffix)
}
inline void Bucket_Lifecycle_Rule_Condition::add_matches_suffix(std::string&& value) {
  _impl_.matches_suffix_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.storage.v2.Bucket.Lifecycle.Rule.Condition.matches_suffix)
}
inline void Bucket_Lifecycle_Rule_Condition::add_matches_suffix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.matches_suffix_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.storage.v2.Bucket.Lifecycle.Rule.Condition.matches_suffix)
}
inline void Bucket_Lifecycle_Rule_Condition::add_matches_suffix(const char* value, size_t size) {
  _impl_.matches_suffix_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.storage.v2.Bucket.Lifecycle.Rule.Condition.matches_suffix)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Bucket_Lifecycle_Rule_Condition::matches_suffix() const {
  // @@protoc_insertion_point(field_list:google.storage.v2.Bucket.Lifecycle.Rule.Condition.matches_suffix)
  return _impl_.matches_suffix_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Bucket_Lifecycle_Rule_Condition::mutable_matches_suffix() {
  // @@protoc_insertion_point(field_mutable_list:google.storage.v2.Bucket.Lifecycle.Rule.Condition.matches_suffix)
  return &_impl_.matches_suffix_;
}

// -------------------------------------------------------------------

// Bucket_Lifecycle_Rule

// .google.storage.v2.Bucket.Lifecycle.Rule.Action action = 1;
inline bool Bucket_Lifecycle_Rule::_internal_has_action() const {
  return this != internal_default_instance() && _impl_.action_ != nullptr;
}
inline bool Bucket_Lifecycle_Rule::has_action() const {
  return _internal_has_action();
}
inline void Bucket_Lifecycle_Rule::clear_action() {
  if (GetArenaForAllocation() == nullptr && _impl_.action_ != nullptr) {
    delete _impl_.action_;
  }
  _impl_.action_ = nullptr;
}
inline const ::google::storage::v2::Bucket_Lifecycle_Rule_Action& Bucket_Lifecycle_Rule::_internal_action() const {
  const ::google::storage::v2::Bucket_Lifecycle_Rule_Action* p = _impl_.action_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::storage::v2::Bucket_Lifecycle_Rule_Action&>(
      ::google::storage::v2::_Bucket_Lifecycle_Rule_Action_default_instance_);
}
inline const ::google::storage::v2::Bucket_Lifecycle_Rule_Action& Bucket_Lifecycle_Rule::action() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.Lifecycle.Rule.action)
  return _internal_action();
}
inline void Bucket_Lifecycle_Rule::unsafe_arena_set_allocated_action(
    ::google::storage::v2::Bucket_Lifecycle_Rule_Action* action) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.action_);
  }
  _impl_.action_ = action;
  if (action) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.Bucket.Lifecycle.Rule.action)
}
inline ::google::storage::v2::Bucket_Lifecycle_Rule_Action* Bucket_Lifecycle_Rule::release_action() {
  
  ::google::storage::v2::Bucket_Lifecycle_Rule_Action* temp = _impl_.action_;
  _impl_.action_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::storage::v2::Bucket_Lifecycle_Rule_Action* Bucket_Lifecycle_Rule::unsafe_arena_release_action() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Bucket.Lifecycle.Rule.action)
  
  ::google::storage::v2::Bucket_Lifecycle_Rule_Action* temp = _impl_.action_;
  _impl_.action_ = nullptr;
  return temp;
}
inline ::google::storage::v2::Bucket_Lifecycle_Rule_Action* Bucket_Lifecycle_Rule::_internal_mutable_action() {
  
  if (_impl_.action_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::storage::v2::Bucket_Lifecycle_Rule_Action>(GetArenaForAllocation());
    _impl_.action_ = p;
  }
  return _impl_.action_;
}
inline ::google::storage::v2::Bucket_Lifecycle_Rule_Action* Bucket_Lifecycle_Rule::mutable_action() {
  ::google::storage::v2::Bucket_Lifecycle_Rule_Action* _msg = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.Lifecycle.Rule.action)
  return _msg;
}
inline void Bucket_Lifecycle_Rule::set_allocated_action(::google::storage::v2::Bucket_Lifecycle_Rule_Action* action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.action_;
  }
  if (action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(action);
    if (message_arena != submessage_arena) {
      action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.action_ = action;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Bucket.Lifecycle.Rule.action)
}

// .google.storage.v2.Bucket.Lifecycle.Rule.Condition condition = 2;
inline bool Bucket_Lifecycle_Rule::_internal_has_condition() const {
  return this != internal_default_instance() && _impl_.condition_ != nullptr;
}
inline bool Bucket_Lifecycle_Rule::has_condition() const {
  return _internal_has_condition();
}
inline void Bucket_Lifecycle_Rule::clear_condition() {
  if (GetArenaForAllocation() == nullptr && _impl_.condition_ != nullptr) {
    delete _impl_.condition_;
  }
  _impl_.condition_ = nullptr;
}
inline const ::google::storage::v2::Bucket_Lifecycle_Rule_Condition& Bucket_Lifecycle_Rule::_internal_condition() const {
  const ::google::storage::v2::Bucket_Lifecycle_Rule_Condition* p = _impl_.condition_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::storage::v2::Bucket_Lifecycle_Rule_Condition&>(
      ::google::storage::v2::_Bucket_Lifecycle_Rule_Condition_default_instance_);
}
inline const ::google::storage::v2::Bucket_Lifecycle_Rule_Condition& Bucket_Lifecycle_Rule::condition() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.Lifecycle.Rule.condition)
  return _internal_condition();
}
inline void Bucket_Lifecycle_Rule::unsafe_arena_set_allocated_condition(
    ::google::storage::v2::Bucket_Lifecycle_Rule_Condition* condition) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.condition_);
  }
  _impl_.condition_ = condition;
  if (condition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.Bucket.Lifecycle.Rule.condition)
}
inline ::google::storage::v2::Bucket_Lifecycle_Rule_Condition* Bucket_Lifecycle_Rule::release_condition() {
  
  ::google::storage::v2::Bucket_Lifecycle_Rule_Condition* temp = _impl_.condition_;
  _impl_.condition_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::storage::v2::Bucket_Lifecycle_Rule_Condition* Bucket_Lifecycle_Rule::unsafe_arena_release_condition() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Bucket.Lifecycle.Rule.condition)
  
  ::google::storage::v2::Bucket_Lifecycle_Rule_Condition* temp = _impl_.condition_;
  _impl_.condition_ = nullptr;
  return temp;
}
inline ::google::storage::v2::Bucket_Lifecycle_Rule_Condition* Bucket_Lifecycle_Rule::_internal_mutable_condition() {
  
  if (_impl_.condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::storage::v2::Bucket_Lifecycle_Rule_Condition>(GetArenaForAllocation());
    _impl_.condition_ = p;
  }
  return _impl_.condition_;
}
inline ::google::storage::v2::Bucket_Lifecycle_Rule_Condition* Bucket_Lifecycle_Rule::mutable_condition() {
  ::google::storage::v2::Bucket_Lifecycle_Rule_Condition* _msg = _internal_mutable_condition();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.Lifecycle.Rule.condition)
  return _msg;
}
inline void Bucket_Lifecycle_Rule::set_allocated_condition(::google::storage::v2::Bucket_Lifecycle_Rule_Condition* condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.condition_;
  }
  if (condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(condition);
    if (message_arena != submessage_arena) {
      condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, condition, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.condition_ = condition;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Bucket.Lifecycle.Rule.condition)
}

// -------------------------------------------------------------------

// Bucket_Lifecycle

// repeated .google.storage.v2.Bucket.Lifecycle.Rule rule = 1;
inline int Bucket_Lifecycle::_internal_rule_size() const {
  return _impl_.rule_.size();
}
inline int Bucket_Lifecycle::rule_size() const {
  return _internal_rule_size();
}
inline void Bucket_Lifecycle::clear_rule() {
  _impl_.rule_.Clear();
}
inline ::google::storage::v2::Bucket_Lifecycle_Rule* Bucket_Lifecycle::mutable_rule(int index) {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.Lifecycle.rule)
  return _impl_.rule_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::storage::v2::Bucket_Lifecycle_Rule >*
Bucket_Lifecycle::mutable_rule() {
  // @@protoc_insertion_point(field_mutable_list:google.storage.v2.Bucket.Lifecycle.rule)
  return &_impl_.rule_;
}
inline const ::google::storage::v2::Bucket_Lifecycle_Rule& Bucket_Lifecycle::_internal_rule(int index) const {
  return _impl_.rule_.Get(index);
}
inline const ::google::storage::v2::Bucket_Lifecycle_Rule& Bucket_Lifecycle::rule(int index) const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.Lifecycle.rule)
  return _internal_rule(index);
}
inline ::google::storage::v2::Bucket_Lifecycle_Rule* Bucket_Lifecycle::_internal_add_rule() {
  return _impl_.rule_.Add();
}
inline ::google::storage::v2::Bucket_Lifecycle_Rule* Bucket_Lifecycle::add_rule() {
  ::google::storage::v2::Bucket_Lifecycle_Rule* _add = _internal_add_rule();
  // @@protoc_insertion_point(field_add:google.storage.v2.Bucket.Lifecycle.rule)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::storage::v2::Bucket_Lifecycle_Rule >&
Bucket_Lifecycle::rule() const {
  // @@protoc_insertion_point(field_list:google.storage.v2.Bucket.Lifecycle.rule)
  return _impl_.rule_;
}

// -------------------------------------------------------------------

// Bucket_Logging

// string log_bucket = 1;
inline void Bucket_Logging::clear_log_bucket() {
  _impl_.log_bucket_.ClearToEmpty();
}
inline const std::string& Bucket_Logging::log_bucket() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.Logging.log_bucket)
  return _internal_log_bucket();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Bucket_Logging::set_log_bucket(ArgT0&& arg0, ArgT... args) {
 
 _impl_.log_bucket_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.Logging.log_bucket)
}
inline std::string* Bucket_Logging::mutable_log_bucket() {
  std::string* _s = _internal_mutable_log_bucket();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.Logging.log_bucket)
  return _s;
}
inline const std::string& Bucket_Logging::_internal_log_bucket() const {
  return _impl_.log_bucket_.Get();
}
inline void Bucket_Logging::_internal_set_log_bucket(const std::string& value) {
  
  _impl_.log_bucket_.Set(value, GetArenaForAllocation());
}
inline std::string* Bucket_Logging::_internal_mutable_log_bucket() {
  
  return _impl_.log_bucket_.Mutable(GetArenaForAllocation());
}
inline std::string* Bucket_Logging::release_log_bucket() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Bucket.Logging.log_bucket)
  return _impl_.log_bucket_.Release();
}
inline void Bucket_Logging::set_allocated_log_bucket(std::string* log_bucket) {
  if (log_bucket != nullptr) {
    
  } else {
    
  }
  _impl_.log_bucket_.SetAllocated(log_bucket, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.log_bucket_.IsDefault()) {
    _impl_.log_bucket_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Bucket.Logging.log_bucket)
}

// string log_object_prefix = 2;
inline void Bucket_Logging::clear_log_object_prefix() {
  _impl_.log_object_prefix_.ClearToEmpty();
}
inline const std::string& Bucket_Logging::log_object_prefix() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.Logging.log_object_prefix)
  return _internal_log_object_prefix();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Bucket_Logging::set_log_object_prefix(ArgT0&& arg0, ArgT... args) {
 
 _impl_.log_object_prefix_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.Logging.log_object_prefix)
}
inline std::string* Bucket_Logging::mutable_log_object_prefix() {
  std::string* _s = _internal_mutable_log_object_prefix();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.Logging.log_object_prefix)
  return _s;
}
inline const std::string& Bucket_Logging::_internal_log_object_prefix() const {
  return _impl_.log_object_prefix_.Get();
}
inline void Bucket_Logging::_internal_set_log_object_prefix(const std::string& value) {
  
  _impl_.log_object_prefix_.Set(value, GetArenaForAllocation());
}
inline std::string* Bucket_Logging::_internal_mutable_log_object_prefix() {
  
  return _impl_.log_object_prefix_.Mutable(GetArenaForAllocation());
}
inline std::string* Bucket_Logging::release_log_object_prefix() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Bucket.Logging.log_object_prefix)
  return _impl_.log_object_prefix_.Release();
}
inline void Bucket_Logging::set_allocated_log_object_prefix(std::string* log_object_prefix) {
  if (log_object_prefix != nullptr) {
    
  } else {
    
  }
  _impl_.log_object_prefix_.SetAllocated(log_object_prefix, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.log_object_prefix_.IsDefault()) {
    _impl_.log_object_prefix_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Bucket.Logging.log_object_prefix)
}

// -------------------------------------------------------------------

// Bucket_RetentionPolicy

// .google.protobuf.Timestamp effective_time = 1;
inline bool Bucket_RetentionPolicy::_internal_has_effective_time() const {
  return this != internal_default_instance() && _impl_.effective_time_ != nullptr;
}
inline bool Bucket_RetentionPolicy::has_effective_time() const {
  return _internal_has_effective_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Bucket_RetentionPolicy::_internal_effective_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.effective_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Bucket_RetentionPolicy::effective_time() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.RetentionPolicy.effective_time)
  return _internal_effective_time();
}
inline void Bucket_RetentionPolicy::unsafe_arena_set_allocated_effective_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* effective_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.effective_time_);
  }
  _impl_.effective_time_ = effective_time;
  if (effective_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.Bucket.RetentionPolicy.effective_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Bucket_RetentionPolicy::release_effective_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.effective_time_;
  _impl_.effective_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Bucket_RetentionPolicy::unsafe_arena_release_effective_time() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Bucket.RetentionPolicy.effective_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.effective_time_;
  _impl_.effective_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Bucket_RetentionPolicy::_internal_mutable_effective_time() {
  
  if (_impl_.effective_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.effective_time_ = p;
  }
  return _impl_.effective_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Bucket_RetentionPolicy::mutable_effective_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_effective_time();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.RetentionPolicy.effective_time)
  return _msg;
}
inline void Bucket_RetentionPolicy::set_allocated_effective_time(::PROTOBUF_NAMESPACE_ID::Timestamp* effective_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.effective_time_);
  }
  if (effective_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(effective_time));
    if (message_arena != submessage_arena) {
      effective_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, effective_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.effective_time_ = effective_time;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Bucket.RetentionPolicy.effective_time)
}

// bool is_locked = 2;
inline void Bucket_RetentionPolicy::clear_is_locked() {
  _impl_.is_locked_ = false;
}
inline bool Bucket_RetentionPolicy::_internal_is_locked() const {
  return _impl_.is_locked_;
}
inline bool Bucket_RetentionPolicy::is_locked() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.RetentionPolicy.is_locked)
  return _internal_is_locked();
}
inline void Bucket_RetentionPolicy::_internal_set_is_locked(bool value) {
  
  _impl_.is_locked_ = value;
}
inline void Bucket_RetentionPolicy::set_is_locked(bool value) {
  _internal_set_is_locked(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.RetentionPolicy.is_locked)
}

// int64 retention_period = 3;
inline void Bucket_RetentionPolicy::clear_retention_period() {
  _impl_.retention_period_ = int64_t{0};
}
inline int64_t Bucket_RetentionPolicy::_internal_retention_period() const {
  return _impl_.retention_period_;
}
inline int64_t Bucket_RetentionPolicy::retention_period() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.RetentionPolicy.retention_period)
  return _internal_retention_period();
}
inline void Bucket_RetentionPolicy::_internal_set_retention_period(int64_t value) {
  
  _impl_.retention_period_ = value;
}
inline void Bucket_RetentionPolicy::set_retention_period(int64_t value) {
  _internal_set_retention_period(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.RetentionPolicy.retention_period)
}

// -------------------------------------------------------------------

// Bucket_Versioning

// bool enabled = 1;
inline void Bucket_Versioning::clear_enabled() {
  _impl_.enabled_ = false;
}
inline bool Bucket_Versioning::_internal_enabled() const {
  return _impl_.enabled_;
}
inline bool Bucket_Versioning::enabled() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.Versioning.enabled)
  return _internal_enabled();
}
inline void Bucket_Versioning::_internal_set_enabled(bool value) {
  
  _impl_.enabled_ = value;
}
inline void Bucket_Versioning::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.Versioning.enabled)
}

// -------------------------------------------------------------------

// Bucket_Website

// string main_page_suffix = 1;
inline void Bucket_Website::clear_main_page_suffix() {
  _impl_.main_page_suffix_.ClearToEmpty();
}
inline const std::string& Bucket_Website::main_page_suffix() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.Website.main_page_suffix)
  return _internal_main_page_suffix();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Bucket_Website::set_main_page_suffix(ArgT0&& arg0, ArgT... args) {
 
 _impl_.main_page_suffix_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.Website.main_page_suffix)
}
inline std::string* Bucket_Website::mutable_main_page_suffix() {
  std::string* _s = _internal_mutable_main_page_suffix();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.Website.main_page_suffix)
  return _s;
}
inline const std::string& Bucket_Website::_internal_main_page_suffix() const {
  return _impl_.main_page_suffix_.Get();
}
inline void Bucket_Website::_internal_set_main_page_suffix(const std::string& value) {
  
  _impl_.main_page_suffix_.Set(value, GetArenaForAllocation());
}
inline std::string* Bucket_Website::_internal_mutable_main_page_suffix() {
  
  return _impl_.main_page_suffix_.Mutable(GetArenaForAllocation());
}
inline std::string* Bucket_Website::release_main_page_suffix() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Bucket.Website.main_page_suffix)
  return _impl_.main_page_suffix_.Release();
}
inline void Bucket_Website::set_allocated_main_page_suffix(std::string* main_page_suffix) {
  if (main_page_suffix != nullptr) {
    
  } else {
    
  }
  _impl_.main_page_suffix_.SetAllocated(main_page_suffix, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.main_page_suffix_.IsDefault()) {
    _impl_.main_page_suffix_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Bucket.Website.main_page_suffix)
}

// string not_found_page = 2;
inline void Bucket_Website::clear_not_found_page() {
  _impl_.not_found_page_.ClearToEmpty();
}
inline const std::string& Bucket_Website::not_found_page() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.Website.not_found_page)
  return _internal_not_found_page();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Bucket_Website::set_not_found_page(ArgT0&& arg0, ArgT... args) {
 
 _impl_.not_found_page_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.Website.not_found_page)
}
inline std::string* Bucket_Website::mutable_not_found_page() {
  std::string* _s = _internal_mutable_not_found_page();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.Website.not_found_page)
  return _s;
}
inline const std::string& Bucket_Website::_internal_not_found_page() const {
  return _impl_.not_found_page_.Get();
}
inline void Bucket_Website::_internal_set_not_found_page(const std::string& value) {
  
  _impl_.not_found_page_.Set(value, GetArenaForAllocation());
}
inline std::string* Bucket_Website::_internal_mutable_not_found_page() {
  
  return _impl_.not_found_page_.Mutable(GetArenaForAllocation());
}
inline std::string* Bucket_Website::release_not_found_page() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Bucket.Website.not_found_page)
  return _impl_.not_found_page_.Release();
}
inline void Bucket_Website::set_allocated_not_found_page(std::string* not_found_page) {
  if (not_found_page != nullptr) {
    
  } else {
    
  }
  _impl_.not_found_page_.SetAllocated(not_found_page, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.not_found_page_.IsDefault()) {
    _impl_.not_found_page_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Bucket.Website.not_found_page)
}

// -------------------------------------------------------------------

// Bucket_CustomPlacementConfig

// repeated string data_locations = 1;
inline int Bucket_CustomPlacementConfig::_internal_data_locations_size() const {
  return _impl_.data_locations_.size();
}
inline int Bucket_CustomPlacementConfig::data_locations_size() const {
  return _internal_data_locations_size();
}
inline void Bucket_CustomPlacementConfig::clear_data_locations() {
  _impl_.data_locations_.Clear();
}
inline std::string* Bucket_CustomPlacementConfig::add_data_locations() {
  std::string* _s = _internal_add_data_locations();
  // @@protoc_insertion_point(field_add_mutable:google.storage.v2.Bucket.CustomPlacementConfig.data_locations)
  return _s;
}
inline const std::string& Bucket_CustomPlacementConfig::_internal_data_locations(int index) const {
  return _impl_.data_locations_.Get(index);
}
inline const std::string& Bucket_CustomPlacementConfig::data_locations(int index) const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.CustomPlacementConfig.data_locations)
  return _internal_data_locations(index);
}
inline std::string* Bucket_CustomPlacementConfig::mutable_data_locations(int index) {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.CustomPlacementConfig.data_locations)
  return _impl_.data_locations_.Mutable(index);
}
inline void Bucket_CustomPlacementConfig::set_data_locations(int index, const std::string& value) {
  _impl_.data_locations_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.CustomPlacementConfig.data_locations)
}
inline void Bucket_CustomPlacementConfig::set_data_locations(int index, std::string&& value) {
  _impl_.data_locations_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.CustomPlacementConfig.data_locations)
}
inline void Bucket_CustomPlacementConfig::set_data_locations(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.data_locations_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.storage.v2.Bucket.CustomPlacementConfig.data_locations)
}
inline void Bucket_CustomPlacementConfig::set_data_locations(int index, const char* value, size_t size) {
  _impl_.data_locations_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.storage.v2.Bucket.CustomPlacementConfig.data_locations)
}
inline std::string* Bucket_CustomPlacementConfig::_internal_add_data_locations() {
  return _impl_.data_locations_.Add();
}
inline void Bucket_CustomPlacementConfig::add_data_locations(const std::string& value) {
  _impl_.data_locations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.storage.v2.Bucket.CustomPlacementConfig.data_locations)
}
inline void Bucket_CustomPlacementConfig::add_data_locations(std::string&& value) {
  _impl_.data_locations_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.storage.v2.Bucket.CustomPlacementConfig.data_locations)
}
inline void Bucket_CustomPlacementConfig::add_data_locations(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.data_locations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.storage.v2.Bucket.CustomPlacementConfig.data_locations)
}
inline void Bucket_CustomPlacementConfig::add_data_locations(const char* value, size_t size) {
  _impl_.data_locations_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.storage.v2.Bucket.CustomPlacementConfig.data_locations)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Bucket_CustomPlacementConfig::data_locations() const {
  // @@protoc_insertion_point(field_list:google.storage.v2.Bucket.CustomPlacementConfig.data_locations)
  return _impl_.data_locations_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Bucket_CustomPlacementConfig::mutable_data_locations() {
  // @@protoc_insertion_point(field_mutable_list:google.storage.v2.Bucket.CustomPlacementConfig.data_locations)
  return &_impl_.data_locations_;
}

// -------------------------------------------------------------------

// Bucket_Autoclass

// bool enabled = 1;
inline void Bucket_Autoclass::clear_enabled() {
  _impl_.enabled_ = false;
}
inline bool Bucket_Autoclass::_internal_enabled() const {
  return _impl_.enabled_;
}
inline bool Bucket_Autoclass::enabled() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.Autoclass.enabled)
  return _internal_enabled();
}
inline void Bucket_Autoclass::_internal_set_enabled(bool value) {
  
  _impl_.enabled_ = value;
}
inline void Bucket_Autoclass::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.Autoclass.enabled)
}

// .google.protobuf.Timestamp toggle_time = 2 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool Bucket_Autoclass::_internal_has_toggle_time() const {
  return this != internal_default_instance() && _impl_.toggle_time_ != nullptr;
}
inline bool Bucket_Autoclass::has_toggle_time() const {
  return _internal_has_toggle_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Bucket_Autoclass::_internal_toggle_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.toggle_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Bucket_Autoclass::toggle_time() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.Autoclass.toggle_time)
  return _internal_toggle_time();
}
inline void Bucket_Autoclass::unsafe_arena_set_allocated_toggle_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* toggle_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.toggle_time_);
  }
  _impl_.toggle_time_ = toggle_time;
  if (toggle_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.Bucket.Autoclass.toggle_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Bucket_Autoclass::release_toggle_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.toggle_time_;
  _impl_.toggle_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Bucket_Autoclass::unsafe_arena_release_toggle_time() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Bucket.Autoclass.toggle_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.toggle_time_;
  _impl_.toggle_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Bucket_Autoclass::_internal_mutable_toggle_time() {
  
  if (_impl_.toggle_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.toggle_time_ = p;
  }
  return _impl_.toggle_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Bucket_Autoclass::mutable_toggle_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_toggle_time();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.Autoclass.toggle_time)
  return _msg;
}
inline void Bucket_Autoclass::set_allocated_toggle_time(::PROTOBUF_NAMESPACE_ID::Timestamp* toggle_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.toggle_time_);
  }
  if (toggle_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(toggle_time));
    if (message_arena != submessage_arena) {
      toggle_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, toggle_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.toggle_time_ = toggle_time;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Bucket.Autoclass.toggle_time)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Bucket

// string name = 1 [(.google.api.field_behavior) = IMMUTABLE];
inline void Bucket::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Bucket::name() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Bucket::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.name)
}
inline std::string* Bucket::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.name)
  return _s;
}
inline const std::string& Bucket::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Bucket::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Bucket::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Bucket::release_name() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Bucket.name)
  return _impl_.name_.Release();
}
inline void Bucket::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Bucket.name)
}

// string bucket_id = 2 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void Bucket::clear_bucket_id() {
  _impl_.bucket_id_.ClearToEmpty();
}
inline const std::string& Bucket::bucket_id() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.bucket_id)
  return _internal_bucket_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Bucket::set_bucket_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.bucket_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.bucket_id)
}
inline std::string* Bucket::mutable_bucket_id() {
  std::string* _s = _internal_mutable_bucket_id();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.bucket_id)
  return _s;
}
inline const std::string& Bucket::_internal_bucket_id() const {
  return _impl_.bucket_id_.Get();
}
inline void Bucket::_internal_set_bucket_id(const std::string& value) {
  
  _impl_.bucket_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Bucket::_internal_mutable_bucket_id() {
  
  return _impl_.bucket_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Bucket::release_bucket_id() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Bucket.bucket_id)
  return _impl_.bucket_id_.Release();
}
inline void Bucket::set_allocated_bucket_id(std::string* bucket_id) {
  if (bucket_id != nullptr) {
    
  } else {
    
  }
  _impl_.bucket_id_.SetAllocated(bucket_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bucket_id_.IsDefault()) {
    _impl_.bucket_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Bucket.bucket_id)
}

// string etag = 29;
inline void Bucket::clear_etag() {
  _impl_.etag_.ClearToEmpty();
}
inline const std::string& Bucket::etag() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.etag)
  return _internal_etag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Bucket::set_etag(ArgT0&& arg0, ArgT... args) {
 
 _impl_.etag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.etag)
}
inline std::string* Bucket::mutable_etag() {
  std::string* _s = _internal_mutable_etag();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.etag)
  return _s;
}
inline const std::string& Bucket::_internal_etag() const {
  return _impl_.etag_.Get();
}
inline void Bucket::_internal_set_etag(const std::string& value) {
  
  _impl_.etag_.Set(value, GetArenaForAllocation());
}
inline std::string* Bucket::_internal_mutable_etag() {
  
  return _impl_.etag_.Mutable(GetArenaForAllocation());
}
inline std::string* Bucket::release_etag() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Bucket.etag)
  return _impl_.etag_.Release();
}
inline void Bucket::set_allocated_etag(std::string* etag) {
  if (etag != nullptr) {
    
  } else {
    
  }
  _impl_.etag_.SetAllocated(etag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.etag_.IsDefault()) {
    _impl_.etag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Bucket.etag)
}

// string project = 3 [(.google.api.field_behavior) = IMMUTABLE, (.google.api.resource_reference) = {
inline void Bucket::clear_project() {
  _impl_.project_.ClearToEmpty();
}
inline const std::string& Bucket::project() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.project)
  return _internal_project();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Bucket::set_project(ArgT0&& arg0, ArgT... args) {
 
 _impl_.project_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.project)
}
inline std::string* Bucket::mutable_project() {
  std::string* _s = _internal_mutable_project();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.project)
  return _s;
}
inline const std::string& Bucket::_internal_project() const {
  return _impl_.project_.Get();
}
inline void Bucket::_internal_set_project(const std::string& value) {
  
  _impl_.project_.Set(value, GetArenaForAllocation());
}
inline std::string* Bucket::_internal_mutable_project() {
  
  return _impl_.project_.Mutable(GetArenaForAllocation());
}
inline std::string* Bucket::release_project() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Bucket.project)
  return _impl_.project_.Release();
}
inline void Bucket::set_allocated_project(std::string* project) {
  if (project != nullptr) {
    
  } else {
    
  }
  _impl_.project_.SetAllocated(project, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.project_.IsDefault()) {
    _impl_.project_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Bucket.project)
}

// int64 metageneration = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void Bucket::clear_metageneration() {
  _impl_.metageneration_ = int64_t{0};
}
inline int64_t Bucket::_internal_metageneration() const {
  return _impl_.metageneration_;
}
inline int64_t Bucket::metageneration() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.metageneration)
  return _internal_metageneration();
}
inline void Bucket::_internal_set_metageneration(int64_t value) {
  
  _impl_.metageneration_ = value;
}
inline void Bucket::set_metageneration(int64_t value) {
  _internal_set_metageneration(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.metageneration)
}

// string location = 5 [(.google.api.field_behavior) = IMMUTABLE];
inline void Bucket::clear_location() {
  _impl_.location_.ClearToEmpty();
}
inline const std::string& Bucket::location() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.location)
  return _internal_location();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Bucket::set_location(ArgT0&& arg0, ArgT... args) {
 
 _impl_.location_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.location)
}
inline std::string* Bucket::mutable_location() {
  std::string* _s = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.location)
  return _s;
}
inline const std::string& Bucket::_internal_location() const {
  return _impl_.location_.Get();
}
inline void Bucket::_internal_set_location(const std::string& value) {
  
  _impl_.location_.Set(value, GetArenaForAllocation());
}
inline std::string* Bucket::_internal_mutable_location() {
  
  return _impl_.location_.Mutable(GetArenaForAllocation());
}
inline std::string* Bucket::release_location() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Bucket.location)
  return _impl_.location_.Release();
}
inline void Bucket::set_allocated_location(std::string* location) {
  if (location != nullptr) {
    
  } else {
    
  }
  _impl_.location_.SetAllocated(location, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.location_.IsDefault()) {
    _impl_.location_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Bucket.location)
}

// string location_type = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void Bucket::clear_location_type() {
  _impl_.location_type_.ClearToEmpty();
}
inline const std::string& Bucket::location_type() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.location_type)
  return _internal_location_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Bucket::set_location_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.location_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.location_type)
}
inline std::string* Bucket::mutable_location_type() {
  std::string* _s = _internal_mutable_location_type();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.location_type)
  return _s;
}
inline const std::string& Bucket::_internal_location_type() const {
  return _impl_.location_type_.Get();
}
inline void Bucket::_internal_set_location_type(const std::string& value) {
  
  _impl_.location_type_.Set(value, GetArenaForAllocation());
}
inline std::string* Bucket::_internal_mutable_location_type() {
  
  return _impl_.location_type_.Mutable(GetArenaForAllocation());
}
inline std::string* Bucket::release_location_type() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Bucket.location_type)
  return _impl_.location_type_.Release();
}
inline void Bucket::set_allocated_location_type(std::string* location_type) {
  if (location_type != nullptr) {
    
  } else {
    
  }
  _impl_.location_type_.SetAllocated(location_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.location_type_.IsDefault()) {
    _impl_.location_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Bucket.location_type)
}

// string storage_class = 7;
inline void Bucket::clear_storage_class() {
  _impl_.storage_class_.ClearToEmpty();
}
inline const std::string& Bucket::storage_class() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.storage_class)
  return _internal_storage_class();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Bucket::set_storage_class(ArgT0&& arg0, ArgT... args) {
 
 _impl_.storage_class_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.storage_class)
}
inline std::string* Bucket::mutable_storage_class() {
  std::string* _s = _internal_mutable_storage_class();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.storage_class)
  return _s;
}
inline const std::string& Bucket::_internal_storage_class() const {
  return _impl_.storage_class_.Get();
}
inline void Bucket::_internal_set_storage_class(const std::string& value) {
  
  _impl_.storage_class_.Set(value, GetArenaForAllocation());
}
inline std::string* Bucket::_internal_mutable_storage_class() {
  
  return _impl_.storage_class_.Mutable(GetArenaForAllocation());
}
inline std::string* Bucket::release_storage_class() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Bucket.storage_class)
  return _impl_.storage_class_.Release();
}
inline void Bucket::set_allocated_storage_class(std::string* storage_class) {
  if (storage_class != nullptr) {
    
  } else {
    
  }
  _impl_.storage_class_.SetAllocated(storage_class, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.storage_class_.IsDefault()) {
    _impl_.storage_class_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Bucket.storage_class)
}

// string rpo = 27;
inline void Bucket::clear_rpo() {
  _impl_.rpo_.ClearToEmpty();
}
inline const std::string& Bucket::rpo() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.rpo)
  return _internal_rpo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Bucket::set_rpo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.rpo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.rpo)
}
inline std::string* Bucket::mutable_rpo() {
  std::string* _s = _internal_mutable_rpo();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.rpo)
  return _s;
}
inline const std::string& Bucket::_internal_rpo() const {
  return _impl_.rpo_.Get();
}
inline void Bucket::_internal_set_rpo(const std::string& value) {
  
  _impl_.rpo_.Set(value, GetArenaForAllocation());
}
inline std::string* Bucket::_internal_mutable_rpo() {
  
  return _impl_.rpo_.Mutable(GetArenaForAllocation());
}
inline std::string* Bucket::release_rpo() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Bucket.rpo)
  return _impl_.rpo_.Release();
}
inline void Bucket::set_allocated_rpo(std::string* rpo) {
  if (rpo != nullptr) {
    
  } else {
    
  }
  _impl_.rpo_.SetAllocated(rpo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.rpo_.IsDefault()) {
    _impl_.rpo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Bucket.rpo)
}

// repeated .google.storage.v2.BucketAccessControl acl = 8;
inline int Bucket::_internal_acl_size() const {
  return _impl_.acl_.size();
}
inline int Bucket::acl_size() const {
  return _internal_acl_size();
}
inline void Bucket::clear_acl() {
  _impl_.acl_.Clear();
}
inline ::google::storage::v2::BucketAccessControl* Bucket::mutable_acl(int index) {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.acl)
  return _impl_.acl_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::storage::v2::BucketAccessControl >*
Bucket::mutable_acl() {
  // @@protoc_insertion_point(field_mutable_list:google.storage.v2.Bucket.acl)
  return &_impl_.acl_;
}
inline const ::google::storage::v2::BucketAccessControl& Bucket::_internal_acl(int index) const {
  return _impl_.acl_.Get(index);
}
inline const ::google::storage::v2::BucketAccessControl& Bucket::acl(int index) const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.acl)
  return _internal_acl(index);
}
inline ::google::storage::v2::BucketAccessControl* Bucket::_internal_add_acl() {
  return _impl_.acl_.Add();
}
inline ::google::storage::v2::BucketAccessControl* Bucket::add_acl() {
  ::google::storage::v2::BucketAccessControl* _add = _internal_add_acl();
  // @@protoc_insertion_point(field_add:google.storage.v2.Bucket.acl)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::storage::v2::BucketAccessControl >&
Bucket::acl() const {
  // @@protoc_insertion_point(field_list:google.storage.v2.Bucket.acl)
  return _impl_.acl_;
}

// repeated .google.storage.v2.ObjectAccessControl default_object_acl = 9;
inline int Bucket::_internal_default_object_acl_size() const {
  return _impl_.default_object_acl_.size();
}
inline int Bucket::default_object_acl_size() const {
  return _internal_default_object_acl_size();
}
inline void Bucket::clear_default_object_acl() {
  _impl_.default_object_acl_.Clear();
}
inline ::google::storage::v2::ObjectAccessControl* Bucket::mutable_default_object_acl(int index) {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.default_object_acl)
  return _impl_.default_object_acl_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::storage::v2::ObjectAccessControl >*
Bucket::mutable_default_object_acl() {
  // @@protoc_insertion_point(field_mutable_list:google.storage.v2.Bucket.default_object_acl)
  return &_impl_.default_object_acl_;
}
inline const ::google::storage::v2::ObjectAccessControl& Bucket::_internal_default_object_acl(int index) const {
  return _impl_.default_object_acl_.Get(index);
}
inline const ::google::storage::v2::ObjectAccessControl& Bucket::default_object_acl(int index) const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.default_object_acl)
  return _internal_default_object_acl(index);
}
inline ::google::storage::v2::ObjectAccessControl* Bucket::_internal_add_default_object_acl() {
  return _impl_.default_object_acl_.Add();
}
inline ::google::storage::v2::ObjectAccessControl* Bucket::add_default_object_acl() {
  ::google::storage::v2::ObjectAccessControl* _add = _internal_add_default_object_acl();
  // @@protoc_insertion_point(field_add:google.storage.v2.Bucket.default_object_acl)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::storage::v2::ObjectAccessControl >&
Bucket::default_object_acl() const {
  // @@protoc_insertion_point(field_list:google.storage.v2.Bucket.default_object_acl)
  return _impl_.default_object_acl_;
}

// .google.storage.v2.Bucket.Lifecycle lifecycle = 10;
inline bool Bucket::_internal_has_lifecycle() const {
  return this != internal_default_instance() && _impl_.lifecycle_ != nullptr;
}
inline bool Bucket::has_lifecycle() const {
  return _internal_has_lifecycle();
}
inline void Bucket::clear_lifecycle() {
  if (GetArenaForAllocation() == nullptr && _impl_.lifecycle_ != nullptr) {
    delete _impl_.lifecycle_;
  }
  _impl_.lifecycle_ = nullptr;
}
inline const ::google::storage::v2::Bucket_Lifecycle& Bucket::_internal_lifecycle() const {
  const ::google::storage::v2::Bucket_Lifecycle* p = _impl_.lifecycle_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::storage::v2::Bucket_Lifecycle&>(
      ::google::storage::v2::_Bucket_Lifecycle_default_instance_);
}
inline const ::google::storage::v2::Bucket_Lifecycle& Bucket::lifecycle() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.lifecycle)
  return _internal_lifecycle();
}
inline void Bucket::unsafe_arena_set_allocated_lifecycle(
    ::google::storage::v2::Bucket_Lifecycle* lifecycle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lifecycle_);
  }
  _impl_.lifecycle_ = lifecycle;
  if (lifecycle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.Bucket.lifecycle)
}
inline ::google::storage::v2::Bucket_Lifecycle* Bucket::release_lifecycle() {
  
  ::google::storage::v2::Bucket_Lifecycle* temp = _impl_.lifecycle_;
  _impl_.lifecycle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::storage::v2::Bucket_Lifecycle* Bucket::unsafe_arena_release_lifecycle() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Bucket.lifecycle)
  
  ::google::storage::v2::Bucket_Lifecycle* temp = _impl_.lifecycle_;
  _impl_.lifecycle_ = nullptr;
  return temp;
}
inline ::google::storage::v2::Bucket_Lifecycle* Bucket::_internal_mutable_lifecycle() {
  
  if (_impl_.lifecycle_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::storage::v2::Bucket_Lifecycle>(GetArenaForAllocation());
    _impl_.lifecycle_ = p;
  }
  return _impl_.lifecycle_;
}
inline ::google::storage::v2::Bucket_Lifecycle* Bucket::mutable_lifecycle() {
  ::google::storage::v2::Bucket_Lifecycle* _msg = _internal_mutable_lifecycle();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.lifecycle)
  return _msg;
}
inline void Bucket::set_allocated_lifecycle(::google::storage::v2::Bucket_Lifecycle* lifecycle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.lifecycle_;
  }
  if (lifecycle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(lifecycle);
    if (message_arena != submessage_arena) {
      lifecycle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lifecycle, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.lifecycle_ = lifecycle;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Bucket.lifecycle)
}

// .google.protobuf.Timestamp create_time = 11 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool Bucket::_internal_has_create_time() const {
  return this != internal_default_instance() && _impl_.create_time_ != nullptr;
}
inline bool Bucket::has_create_time() const {
  return _internal_has_create_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Bucket::_internal_create_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.create_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Bucket::create_time() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.create_time)
  return _internal_create_time();
}
inline void Bucket::unsafe_arena_set_allocated_create_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.create_time_);
  }
  _impl_.create_time_ = create_time;
  if (create_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.Bucket.create_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Bucket::release_create_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.create_time_;
  _impl_.create_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Bucket::unsafe_arena_release_create_time() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Bucket.create_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.create_time_;
  _impl_.create_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Bucket::_internal_mutable_create_time() {
  
  if (_impl_.create_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.create_time_ = p;
  }
  return _impl_.create_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Bucket::mutable_create_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_create_time();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.create_time)
  return _msg;
}
inline void Bucket::set_allocated_create_time(::PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.create_time_);
  }
  if (create_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time));
    if (message_arena != submessage_arena) {
      create_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Bucket.create_time)
}

// repeated .google.storage.v2.Bucket.Cors cors = 12;
inline int Bucket::_internal_cors_size() const {
  return _impl_.cors_.size();
}
inline int Bucket::cors_size() const {
  return _internal_cors_size();
}
inline void Bucket::clear_cors() {
  _impl_.cors_.Clear();
}
inline ::google::storage::v2::Bucket_Cors* Bucket::mutable_cors(int index) {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.cors)
  return _impl_.cors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::storage::v2::Bucket_Cors >*
Bucket::mutable_cors() {
  // @@protoc_insertion_point(field_mutable_list:google.storage.v2.Bucket.cors)
  return &_impl_.cors_;
}
inline const ::google::storage::v2::Bucket_Cors& Bucket::_internal_cors(int index) const {
  return _impl_.cors_.Get(index);
}
inline const ::google::storage::v2::Bucket_Cors& Bucket::cors(int index) const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.cors)
  return _internal_cors(index);
}
inline ::google::storage::v2::Bucket_Cors* Bucket::_internal_add_cors() {
  return _impl_.cors_.Add();
}
inline ::google::storage::v2::Bucket_Cors* Bucket::add_cors() {
  ::google::storage::v2::Bucket_Cors* _add = _internal_add_cors();
  // @@protoc_insertion_point(field_add:google.storage.v2.Bucket.cors)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::storage::v2::Bucket_Cors >&
Bucket::cors() const {
  // @@protoc_insertion_point(field_list:google.storage.v2.Bucket.cors)
  return _impl_.cors_;
}

// .google.protobuf.Timestamp update_time = 13 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool Bucket::_internal_has_update_time() const {
  return this != internal_default_instance() && _impl_.update_time_ != nullptr;
}
inline bool Bucket::has_update_time() const {
  return _internal_has_update_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Bucket::_internal_update_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.update_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Bucket::update_time() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.update_time)
  return _internal_update_time();
}
inline void Bucket::unsafe_arena_set_allocated_update_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* update_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_time_);
  }
  _impl_.update_time_ = update_time;
  if (update_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.Bucket.update_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Bucket::release_update_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.update_time_;
  _impl_.update_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Bucket::unsafe_arena_release_update_time() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Bucket.update_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.update_time_;
  _impl_.update_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Bucket::_internal_mutable_update_time() {
  
  if (_impl_.update_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.update_time_ = p;
  }
  return _impl_.update_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Bucket::mutable_update_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_update_time();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.update_time)
  return _msg;
}
inline void Bucket::set_allocated_update_time(::PROTOBUF_NAMESPACE_ID::Timestamp* update_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_time_);
  }
  if (update_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_time));
    if (message_arena != submessage_arena) {
      update_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.update_time_ = update_time;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Bucket.update_time)
}

// bool default_event_based_hold = 14;
inline void Bucket::clear_default_event_based_hold() {
  _impl_.default_event_based_hold_ = false;
}
inline bool Bucket::_internal_default_event_based_hold() const {
  return _impl_.default_event_based_hold_;
}
inline bool Bucket::default_event_based_hold() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.default_event_based_hold)
  return _internal_default_event_based_hold();
}
inline void Bucket::_internal_set_default_event_based_hold(bool value) {
  
  _impl_.default_event_based_hold_ = value;
}
inline void Bucket::set_default_event_based_hold(bool value) {
  _internal_set_default_event_based_hold(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.default_event_based_hold)
}

// map<string, string> labels = 15;
inline int Bucket::_internal_labels_size() const {
  return _impl_.labels_.size();
}
inline int Bucket::labels_size() const {
  return _internal_labels_size();
}
inline void Bucket::clear_labels() {
  _impl_.labels_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Bucket::_internal_labels() const {
  return _impl_.labels_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Bucket::labels() const {
  // @@protoc_insertion_point(field_map:google.storage.v2.Bucket.labels)
  return _internal_labels();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Bucket::_internal_mutable_labels() {
  return _impl_.labels_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Bucket::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:google.storage.v2.Bucket.labels)
  return _internal_mutable_labels();
}

// .google.storage.v2.Bucket.Website website = 16;
inline bool Bucket::_internal_has_website() const {
  return this != internal_default_instance() && _impl_.website_ != nullptr;
}
inline bool Bucket::has_website() const {
  return _internal_has_website();
}
inline void Bucket::clear_website() {
  if (GetArenaForAllocation() == nullptr && _impl_.website_ != nullptr) {
    delete _impl_.website_;
  }
  _impl_.website_ = nullptr;
}
inline const ::google::storage::v2::Bucket_Website& Bucket::_internal_website() const {
  const ::google::storage::v2::Bucket_Website* p = _impl_.website_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::storage::v2::Bucket_Website&>(
      ::google::storage::v2::_Bucket_Website_default_instance_);
}
inline const ::google::storage::v2::Bucket_Website& Bucket::website() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.website)
  return _internal_website();
}
inline void Bucket::unsafe_arena_set_allocated_website(
    ::google::storage::v2::Bucket_Website* website) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.website_);
  }
  _impl_.website_ = website;
  if (website) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.Bucket.website)
}
inline ::google::storage::v2::Bucket_Website* Bucket::release_website() {
  
  ::google::storage::v2::Bucket_Website* temp = _impl_.website_;
  _impl_.website_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::storage::v2::Bucket_Website* Bucket::unsafe_arena_release_website() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Bucket.website)
  
  ::google::storage::v2::Bucket_Website* temp = _impl_.website_;
  _impl_.website_ = nullptr;
  return temp;
}
inline ::google::storage::v2::Bucket_Website* Bucket::_internal_mutable_website() {
  
  if (_impl_.website_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::storage::v2::Bucket_Website>(GetArenaForAllocation());
    _impl_.website_ = p;
  }
  return _impl_.website_;
}
inline ::google::storage::v2::Bucket_Website* Bucket::mutable_website() {
  ::google::storage::v2::Bucket_Website* _msg = _internal_mutable_website();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.website)
  return _msg;
}
inline void Bucket::set_allocated_website(::google::storage::v2::Bucket_Website* website) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.website_;
  }
  if (website) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(website);
    if (message_arena != submessage_arena) {
      website = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, website, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.website_ = website;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Bucket.website)
}

// .google.storage.v2.Bucket.Versioning versioning = 17;
inline bool Bucket::_internal_has_versioning() const {
  return this != internal_default_instance() && _impl_.versioning_ != nullptr;
}
inline bool Bucket::has_versioning() const {
  return _internal_has_versioning();
}
inline void Bucket::clear_versioning() {
  if (GetArenaForAllocation() == nullptr && _impl_.versioning_ != nullptr) {
    delete _impl_.versioning_;
  }
  _impl_.versioning_ = nullptr;
}
inline const ::google::storage::v2::Bucket_Versioning& Bucket::_internal_versioning() const {
  const ::google::storage::v2::Bucket_Versioning* p = _impl_.versioning_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::storage::v2::Bucket_Versioning&>(
      ::google::storage::v2::_Bucket_Versioning_default_instance_);
}
inline const ::google::storage::v2::Bucket_Versioning& Bucket::versioning() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.versioning)
  return _internal_versioning();
}
inline void Bucket::unsafe_arena_set_allocated_versioning(
    ::google::storage::v2::Bucket_Versioning* versioning) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.versioning_);
  }
  _impl_.versioning_ = versioning;
  if (versioning) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.Bucket.versioning)
}
inline ::google::storage::v2::Bucket_Versioning* Bucket::release_versioning() {
  
  ::google::storage::v2::Bucket_Versioning* temp = _impl_.versioning_;
  _impl_.versioning_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::storage::v2::Bucket_Versioning* Bucket::unsafe_arena_release_versioning() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Bucket.versioning)
  
  ::google::storage::v2::Bucket_Versioning* temp = _impl_.versioning_;
  _impl_.versioning_ = nullptr;
  return temp;
}
inline ::google::storage::v2::Bucket_Versioning* Bucket::_internal_mutable_versioning() {
  
  if (_impl_.versioning_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::storage::v2::Bucket_Versioning>(GetArenaForAllocation());
    _impl_.versioning_ = p;
  }
  return _impl_.versioning_;
}
inline ::google::storage::v2::Bucket_Versioning* Bucket::mutable_versioning() {
  ::google::storage::v2::Bucket_Versioning* _msg = _internal_mutable_versioning();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.versioning)
  return _msg;
}
inline void Bucket::set_allocated_versioning(::google::storage::v2::Bucket_Versioning* versioning) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.versioning_;
  }
  if (versioning) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(versioning);
    if (message_arena != submessage_arena) {
      versioning = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, versioning, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.versioning_ = versioning;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Bucket.versioning)
}

// .google.storage.v2.Bucket.Logging logging = 18;
inline bool Bucket::_internal_has_logging() const {
  return this != internal_default_instance() && _impl_.logging_ != nullptr;
}
inline bool Bucket::has_logging() const {
  return _internal_has_logging();
}
inline void Bucket::clear_logging() {
  if (GetArenaForAllocation() == nullptr && _impl_.logging_ != nullptr) {
    delete _impl_.logging_;
  }
  _impl_.logging_ = nullptr;
}
inline const ::google::storage::v2::Bucket_Logging& Bucket::_internal_logging() const {
  const ::google::storage::v2::Bucket_Logging* p = _impl_.logging_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::storage::v2::Bucket_Logging&>(
      ::google::storage::v2::_Bucket_Logging_default_instance_);
}
inline const ::google::storage::v2::Bucket_Logging& Bucket::logging() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.logging)
  return _internal_logging();
}
inline void Bucket::unsafe_arena_set_allocated_logging(
    ::google::storage::v2::Bucket_Logging* logging) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.logging_);
  }
  _impl_.logging_ = logging;
  if (logging) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.Bucket.logging)
}
inline ::google::storage::v2::Bucket_Logging* Bucket::release_logging() {
  
  ::google::storage::v2::Bucket_Logging* temp = _impl_.logging_;
  _impl_.logging_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::storage::v2::Bucket_Logging* Bucket::unsafe_arena_release_logging() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Bucket.logging)
  
  ::google::storage::v2::Bucket_Logging* temp = _impl_.logging_;
  _impl_.logging_ = nullptr;
  return temp;
}
inline ::google::storage::v2::Bucket_Logging* Bucket::_internal_mutable_logging() {
  
  if (_impl_.logging_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::storage::v2::Bucket_Logging>(GetArenaForAllocation());
    _impl_.logging_ = p;
  }
  return _impl_.logging_;
}
inline ::google::storage::v2::Bucket_Logging* Bucket::mutable_logging() {
  ::google::storage::v2::Bucket_Logging* _msg = _internal_mutable_logging();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.logging)
  return _msg;
}
inline void Bucket::set_allocated_logging(::google::storage::v2::Bucket_Logging* logging) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.logging_;
  }
  if (logging) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(logging);
    if (message_arena != submessage_arena) {
      logging = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, logging, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.logging_ = logging;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Bucket.logging)
}

// .google.storage.v2.Owner owner = 19 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool Bucket::_internal_has_owner() const {
  return this != internal_default_instance() && _impl_.owner_ != nullptr;
}
inline bool Bucket::has_owner() const {
  return _internal_has_owner();
}
inline void Bucket::clear_owner() {
  if (GetArenaForAllocation() == nullptr && _impl_.owner_ != nullptr) {
    delete _impl_.owner_;
  }
  _impl_.owner_ = nullptr;
}
inline const ::google::storage::v2::Owner& Bucket::_internal_owner() const {
  const ::google::storage::v2::Owner* p = _impl_.owner_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::storage::v2::Owner&>(
      ::google::storage::v2::_Owner_default_instance_);
}
inline const ::google::storage::v2::Owner& Bucket::owner() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.owner)
  return _internal_owner();
}
inline void Bucket::unsafe_arena_set_allocated_owner(
    ::google::storage::v2::Owner* owner) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.owner_);
  }
  _impl_.owner_ = owner;
  if (owner) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.Bucket.owner)
}
inline ::google::storage::v2::Owner* Bucket::release_owner() {
  
  ::google::storage::v2::Owner* temp = _impl_.owner_;
  _impl_.owner_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::storage::v2::Owner* Bucket::unsafe_arena_release_owner() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Bucket.owner)
  
  ::google::storage::v2::Owner* temp = _impl_.owner_;
  _impl_.owner_ = nullptr;
  return temp;
}
inline ::google::storage::v2::Owner* Bucket::_internal_mutable_owner() {
  
  if (_impl_.owner_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::storage::v2::Owner>(GetArenaForAllocation());
    _impl_.owner_ = p;
  }
  return _impl_.owner_;
}
inline ::google::storage::v2::Owner* Bucket::mutable_owner() {
  ::google::storage::v2::Owner* _msg = _internal_mutable_owner();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.owner)
  return _msg;
}
inline void Bucket::set_allocated_owner(::google::storage::v2::Owner* owner) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.owner_;
  }
  if (owner) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(owner);
    if (message_arena != submessage_arena) {
      owner = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, owner, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.owner_ = owner;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Bucket.owner)
}

// .google.storage.v2.Bucket.Encryption encryption = 20;
inline bool Bucket::_internal_has_encryption() const {
  return this != internal_default_instance() && _impl_.encryption_ != nullptr;
}
inline bool Bucket::has_encryption() const {
  return _internal_has_encryption();
}
inline void Bucket::clear_encryption() {
  if (GetArenaForAllocation() == nullptr && _impl_.encryption_ != nullptr) {
    delete _impl_.encryption_;
  }
  _impl_.encryption_ = nullptr;
}
inline const ::google::storage::v2::Bucket_Encryption& Bucket::_internal_encryption() const {
  const ::google::storage::v2::Bucket_Encryption* p = _impl_.encryption_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::storage::v2::Bucket_Encryption&>(
      ::google::storage::v2::_Bucket_Encryption_default_instance_);
}
inline const ::google::storage::v2::Bucket_Encryption& Bucket::encryption() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.encryption)
  return _internal_encryption();
}
inline void Bucket::unsafe_arena_set_allocated_encryption(
    ::google::storage::v2::Bucket_Encryption* encryption) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.encryption_);
  }
  _impl_.encryption_ = encryption;
  if (encryption) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.Bucket.encryption)
}
inline ::google::storage::v2::Bucket_Encryption* Bucket::release_encryption() {
  
  ::google::storage::v2::Bucket_Encryption* temp = _impl_.encryption_;
  _impl_.encryption_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::storage::v2::Bucket_Encryption* Bucket::unsafe_arena_release_encryption() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Bucket.encryption)
  
  ::google::storage::v2::Bucket_Encryption* temp = _impl_.encryption_;
  _impl_.encryption_ = nullptr;
  return temp;
}
inline ::google::storage::v2::Bucket_Encryption* Bucket::_internal_mutable_encryption() {
  
  if (_impl_.encryption_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::storage::v2::Bucket_Encryption>(GetArenaForAllocation());
    _impl_.encryption_ = p;
  }
  return _impl_.encryption_;
}
inline ::google::storage::v2::Bucket_Encryption* Bucket::mutable_encryption() {
  ::google::storage::v2::Bucket_Encryption* _msg = _internal_mutable_encryption();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.encryption)
  return _msg;
}
inline void Bucket::set_allocated_encryption(::google::storage::v2::Bucket_Encryption* encryption) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.encryption_;
  }
  if (encryption) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(encryption);
    if (message_arena != submessage_arena) {
      encryption = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, encryption, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.encryption_ = encryption;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Bucket.encryption)
}

// .google.storage.v2.Bucket.Billing billing = 21;
inline bool Bucket::_internal_has_billing() const {
  return this != internal_default_instance() && _impl_.billing_ != nullptr;
}
inline bool Bucket::has_billing() const {
  return _internal_has_billing();
}
inline void Bucket::clear_billing() {
  if (GetArenaForAllocation() == nullptr && _impl_.billing_ != nullptr) {
    delete _impl_.billing_;
  }
  _impl_.billing_ = nullptr;
}
inline const ::google::storage::v2::Bucket_Billing& Bucket::_internal_billing() const {
  const ::google::storage::v2::Bucket_Billing* p = _impl_.billing_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::storage::v2::Bucket_Billing&>(
      ::google::storage::v2::_Bucket_Billing_default_instance_);
}
inline const ::google::storage::v2::Bucket_Billing& Bucket::billing() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.billing)
  return _internal_billing();
}
inline void Bucket::unsafe_arena_set_allocated_billing(
    ::google::storage::v2::Bucket_Billing* billing) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.billing_);
  }
  _impl_.billing_ = billing;
  if (billing) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.Bucket.billing)
}
inline ::google::storage::v2::Bucket_Billing* Bucket::release_billing() {
  
  ::google::storage::v2::Bucket_Billing* temp = _impl_.billing_;
  _impl_.billing_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::storage::v2::Bucket_Billing* Bucket::unsafe_arena_release_billing() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Bucket.billing)
  
  ::google::storage::v2::Bucket_Billing* temp = _impl_.billing_;
  _impl_.billing_ = nullptr;
  return temp;
}
inline ::google::storage::v2::Bucket_Billing* Bucket::_internal_mutable_billing() {
  
  if (_impl_.billing_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::storage::v2::Bucket_Billing>(GetArenaForAllocation());
    _impl_.billing_ = p;
  }
  return _impl_.billing_;
}
inline ::google::storage::v2::Bucket_Billing* Bucket::mutable_billing() {
  ::google::storage::v2::Bucket_Billing* _msg = _internal_mutable_billing();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.billing)
  return _msg;
}
inline void Bucket::set_allocated_billing(::google::storage::v2::Bucket_Billing* billing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.billing_;
  }
  if (billing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(billing);
    if (message_arena != submessage_arena) {
      billing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, billing, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.billing_ = billing;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Bucket.billing)
}

// .google.storage.v2.Bucket.RetentionPolicy retention_policy = 22;
inline bool Bucket::_internal_has_retention_policy() const {
  return this != internal_default_instance() && _impl_.retention_policy_ != nullptr;
}
inline bool Bucket::has_retention_policy() const {
  return _internal_has_retention_policy();
}
inline void Bucket::clear_retention_policy() {
  if (GetArenaForAllocation() == nullptr && _impl_.retention_policy_ != nullptr) {
    delete _impl_.retention_policy_;
  }
  _impl_.retention_policy_ = nullptr;
}
inline const ::google::storage::v2::Bucket_RetentionPolicy& Bucket::_internal_retention_policy() const {
  const ::google::storage::v2::Bucket_RetentionPolicy* p = _impl_.retention_policy_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::storage::v2::Bucket_RetentionPolicy&>(
      ::google::storage::v2::_Bucket_RetentionPolicy_default_instance_);
}
inline const ::google::storage::v2::Bucket_RetentionPolicy& Bucket::retention_policy() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.retention_policy)
  return _internal_retention_policy();
}
inline void Bucket::unsafe_arena_set_allocated_retention_policy(
    ::google::storage::v2::Bucket_RetentionPolicy* retention_policy) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.retention_policy_);
  }
  _impl_.retention_policy_ = retention_policy;
  if (retention_policy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.Bucket.retention_policy)
}
inline ::google::storage::v2::Bucket_RetentionPolicy* Bucket::release_retention_policy() {
  
  ::google::storage::v2::Bucket_RetentionPolicy* temp = _impl_.retention_policy_;
  _impl_.retention_policy_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::storage::v2::Bucket_RetentionPolicy* Bucket::unsafe_arena_release_retention_policy() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Bucket.retention_policy)
  
  ::google::storage::v2::Bucket_RetentionPolicy* temp = _impl_.retention_policy_;
  _impl_.retention_policy_ = nullptr;
  return temp;
}
inline ::google::storage::v2::Bucket_RetentionPolicy* Bucket::_internal_mutable_retention_policy() {
  
  if (_impl_.retention_policy_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::storage::v2::Bucket_RetentionPolicy>(GetArenaForAllocation());
    _impl_.retention_policy_ = p;
  }
  return _impl_.retention_policy_;
}
inline ::google::storage::v2::Bucket_RetentionPolicy* Bucket::mutable_retention_policy() {
  ::google::storage::v2::Bucket_RetentionPolicy* _msg = _internal_mutable_retention_policy();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.retention_policy)
  return _msg;
}
inline void Bucket::set_allocated_retention_policy(::google::storage::v2::Bucket_RetentionPolicy* retention_policy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.retention_policy_;
  }
  if (retention_policy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(retention_policy);
    if (message_arena != submessage_arena) {
      retention_policy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, retention_policy, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.retention_policy_ = retention_policy;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Bucket.retention_policy)
}

// .google.storage.v2.Bucket.IamConfig iam_config = 23;
inline bool Bucket::_internal_has_iam_config() const {
  return this != internal_default_instance() && _impl_.iam_config_ != nullptr;
}
inline bool Bucket::has_iam_config() const {
  return _internal_has_iam_config();
}
inline void Bucket::clear_iam_config() {
  if (GetArenaForAllocation() == nullptr && _impl_.iam_config_ != nullptr) {
    delete _impl_.iam_config_;
  }
  _impl_.iam_config_ = nullptr;
}
inline const ::google::storage::v2::Bucket_IamConfig& Bucket::_internal_iam_config() const {
  const ::google::storage::v2::Bucket_IamConfig* p = _impl_.iam_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::storage::v2::Bucket_IamConfig&>(
      ::google::storage::v2::_Bucket_IamConfig_default_instance_);
}
inline const ::google::storage::v2::Bucket_IamConfig& Bucket::iam_config() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.iam_config)
  return _internal_iam_config();
}
inline void Bucket::unsafe_arena_set_allocated_iam_config(
    ::google::storage::v2::Bucket_IamConfig* iam_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.iam_config_);
  }
  _impl_.iam_config_ = iam_config;
  if (iam_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.Bucket.iam_config)
}
inline ::google::storage::v2::Bucket_IamConfig* Bucket::release_iam_config() {
  
  ::google::storage::v2::Bucket_IamConfig* temp = _impl_.iam_config_;
  _impl_.iam_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::storage::v2::Bucket_IamConfig* Bucket::unsafe_arena_release_iam_config() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Bucket.iam_config)
  
  ::google::storage::v2::Bucket_IamConfig* temp = _impl_.iam_config_;
  _impl_.iam_config_ = nullptr;
  return temp;
}
inline ::google::storage::v2::Bucket_IamConfig* Bucket::_internal_mutable_iam_config() {
  
  if (_impl_.iam_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::storage::v2::Bucket_IamConfig>(GetArenaForAllocation());
    _impl_.iam_config_ = p;
  }
  return _impl_.iam_config_;
}
inline ::google::storage::v2::Bucket_IamConfig* Bucket::mutable_iam_config() {
  ::google::storage::v2::Bucket_IamConfig* _msg = _internal_mutable_iam_config();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.iam_config)
  return _msg;
}
inline void Bucket::set_allocated_iam_config(::google::storage::v2::Bucket_IamConfig* iam_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.iam_config_;
  }
  if (iam_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(iam_config);
    if (message_arena != submessage_arena) {
      iam_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, iam_config, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.iam_config_ = iam_config;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Bucket.iam_config)
}

// bool satisfies_pzs = 25;
inline void Bucket::clear_satisfies_pzs() {
  _impl_.satisfies_pzs_ = false;
}
inline bool Bucket::_internal_satisfies_pzs() const {
  return _impl_.satisfies_pzs_;
}
inline bool Bucket::satisfies_pzs() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.satisfies_pzs)
  return _internal_satisfies_pzs();
}
inline void Bucket::_internal_set_satisfies_pzs(bool value) {
  
  _impl_.satisfies_pzs_ = value;
}
inline void Bucket::set_satisfies_pzs(bool value) {
  _internal_set_satisfies_pzs(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.satisfies_pzs)
}

// .google.storage.v2.Bucket.CustomPlacementConfig custom_placement_config = 26;
inline bool Bucket::_internal_has_custom_placement_config() const {
  return this != internal_default_instance() && _impl_.custom_placement_config_ != nullptr;
}
inline bool Bucket::has_custom_placement_config() const {
  return _internal_has_custom_placement_config();
}
inline void Bucket::clear_custom_placement_config() {
  if (GetArenaForAllocation() == nullptr && _impl_.custom_placement_config_ != nullptr) {
    delete _impl_.custom_placement_config_;
  }
  _impl_.custom_placement_config_ = nullptr;
}
inline const ::google::storage::v2::Bucket_CustomPlacementConfig& Bucket::_internal_custom_placement_config() const {
  const ::google::storage::v2::Bucket_CustomPlacementConfig* p = _impl_.custom_placement_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::storage::v2::Bucket_CustomPlacementConfig&>(
      ::google::storage::v2::_Bucket_CustomPlacementConfig_default_instance_);
}
inline const ::google::storage::v2::Bucket_CustomPlacementConfig& Bucket::custom_placement_config() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.custom_placement_config)
  return _internal_custom_placement_config();
}
inline void Bucket::unsafe_arena_set_allocated_custom_placement_config(
    ::google::storage::v2::Bucket_CustomPlacementConfig* custom_placement_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.custom_placement_config_);
  }
  _impl_.custom_placement_config_ = custom_placement_config;
  if (custom_placement_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.Bucket.custom_placement_config)
}
inline ::google::storage::v2::Bucket_CustomPlacementConfig* Bucket::release_custom_placement_config() {
  
  ::google::storage::v2::Bucket_CustomPlacementConfig* temp = _impl_.custom_placement_config_;
  _impl_.custom_placement_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::storage::v2::Bucket_CustomPlacementConfig* Bucket::unsafe_arena_release_custom_placement_config() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Bucket.custom_placement_config)
  
  ::google::storage::v2::Bucket_CustomPlacementConfig* temp = _impl_.custom_placement_config_;
  _impl_.custom_placement_config_ = nullptr;
  return temp;
}
inline ::google::storage::v2::Bucket_CustomPlacementConfig* Bucket::_internal_mutable_custom_placement_config() {
  
  if (_impl_.custom_placement_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::storage::v2::Bucket_CustomPlacementConfig>(GetArenaForAllocation());
    _impl_.custom_placement_config_ = p;
  }
  return _impl_.custom_placement_config_;
}
inline ::google::storage::v2::Bucket_CustomPlacementConfig* Bucket::mutable_custom_placement_config() {
  ::google::storage::v2::Bucket_CustomPlacementConfig* _msg = _internal_mutable_custom_placement_config();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.custom_placement_config)
  return _msg;
}
inline void Bucket::set_allocated_custom_placement_config(::google::storage::v2::Bucket_CustomPlacementConfig* custom_placement_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.custom_placement_config_;
  }
  if (custom_placement_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(custom_placement_config);
    if (message_arena != submessage_arena) {
      custom_placement_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custom_placement_config, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.custom_placement_config_ = custom_placement_config;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Bucket.custom_placement_config)
}

// .google.storage.v2.Bucket.Autoclass autoclass = 28;
inline bool Bucket::_internal_has_autoclass() const {
  return this != internal_default_instance() && _impl_.autoclass_ != nullptr;
}
inline bool Bucket::has_autoclass() const {
  return _internal_has_autoclass();
}
inline void Bucket::clear_autoclass() {
  if (GetArenaForAllocation() == nullptr && _impl_.autoclass_ != nullptr) {
    delete _impl_.autoclass_;
  }
  _impl_.autoclass_ = nullptr;
}
inline const ::google::storage::v2::Bucket_Autoclass& Bucket::_internal_autoclass() const {
  const ::google::storage::v2::Bucket_Autoclass* p = _impl_.autoclass_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::storage::v2::Bucket_Autoclass&>(
      ::google::storage::v2::_Bucket_Autoclass_default_instance_);
}
inline const ::google::storage::v2::Bucket_Autoclass& Bucket::autoclass() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.autoclass)
  return _internal_autoclass();
}
inline void Bucket::unsafe_arena_set_allocated_autoclass(
    ::google::storage::v2::Bucket_Autoclass* autoclass) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.autoclass_);
  }
  _impl_.autoclass_ = autoclass;
  if (autoclass) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.Bucket.autoclass)
}
inline ::google::storage::v2::Bucket_Autoclass* Bucket::release_autoclass() {
  
  ::google::storage::v2::Bucket_Autoclass* temp = _impl_.autoclass_;
  _impl_.autoclass_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::storage::v2::Bucket_Autoclass* Bucket::unsafe_arena_release_autoclass() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Bucket.autoclass)
  
  ::google::storage::v2::Bucket_Autoclass* temp = _impl_.autoclass_;
  _impl_.autoclass_ = nullptr;
  return temp;
}
inline ::google::storage::v2::Bucket_Autoclass* Bucket::_internal_mutable_autoclass() {
  
  if (_impl_.autoclass_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::storage::v2::Bucket_Autoclass>(GetArenaForAllocation());
    _impl_.autoclass_ = p;
  }
  return _impl_.autoclass_;
}
inline ::google::storage::v2::Bucket_Autoclass* Bucket::mutable_autoclass() {
  ::google::storage::v2::Bucket_Autoclass* _msg = _internal_mutable_autoclass();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.autoclass)
  return _msg;
}
inline void Bucket::set_allocated_autoclass(::google::storage::v2::Bucket_Autoclass* autoclass) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.autoclass_;
  }
  if (autoclass) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(autoclass);
    if (message_arena != submessage_arena) {
      autoclass = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, autoclass, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.autoclass_ = autoclass;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Bucket.autoclass)
}

// -------------------------------------------------------------------

// BucketAccessControl

// string role = 1;
inline void BucketAccessControl::clear_role() {
  _impl_.role_.ClearToEmpty();
}
inline const std::string& BucketAccessControl::role() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.BucketAccessControl.role)
  return _internal_role();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BucketAccessControl::set_role(ArgT0&& arg0, ArgT... args) {
 
 _impl_.role_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.BucketAccessControl.role)
}
inline std::string* BucketAccessControl::mutable_role() {
  std::string* _s = _internal_mutable_role();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.BucketAccessControl.role)
  return _s;
}
inline const std::string& BucketAccessControl::_internal_role() const {
  return _impl_.role_.Get();
}
inline void BucketAccessControl::_internal_set_role(const std::string& value) {
  
  _impl_.role_.Set(value, GetArenaForAllocation());
}
inline std::string* BucketAccessControl::_internal_mutable_role() {
  
  return _impl_.role_.Mutable(GetArenaForAllocation());
}
inline std::string* BucketAccessControl::release_role() {
  // @@protoc_insertion_point(field_release:google.storage.v2.BucketAccessControl.role)
  return _impl_.role_.Release();
}
inline void BucketAccessControl::set_allocated_role(std::string* role) {
  if (role != nullptr) {
    
  } else {
    
  }
  _impl_.role_.SetAllocated(role, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.role_.IsDefault()) {
    _impl_.role_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.BucketAccessControl.role)
}

// string id = 2;
inline void BucketAccessControl::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& BucketAccessControl::id() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.BucketAccessControl.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BucketAccessControl::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.BucketAccessControl.id)
}
inline std::string* BucketAccessControl::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.BucketAccessControl.id)
  return _s;
}
inline const std::string& BucketAccessControl::_internal_id() const {
  return _impl_.id_.Get();
}
inline void BucketAccessControl::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* BucketAccessControl::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* BucketAccessControl::release_id() {
  // @@protoc_insertion_point(field_release:google.storage.v2.BucketAccessControl.id)
  return _impl_.id_.Release();
}
inline void BucketAccessControl::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.BucketAccessControl.id)
}

// string entity = 3;
inline void BucketAccessControl::clear_entity() {
  _impl_.entity_.ClearToEmpty();
}
inline const std::string& BucketAccessControl::entity() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.BucketAccessControl.entity)
  return _internal_entity();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BucketAccessControl::set_entity(ArgT0&& arg0, ArgT... args) {
 
 _impl_.entity_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.BucketAccessControl.entity)
}
inline std::string* BucketAccessControl::mutable_entity() {
  std::string* _s = _internal_mutable_entity();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.BucketAccessControl.entity)
  return _s;
}
inline const std::string& BucketAccessControl::_internal_entity() const {
  return _impl_.entity_.Get();
}
inline void BucketAccessControl::_internal_set_entity(const std::string& value) {
  
  _impl_.entity_.Set(value, GetArenaForAllocation());
}
inline std::string* BucketAccessControl::_internal_mutable_entity() {
  
  return _impl_.entity_.Mutable(GetArenaForAllocation());
}
inline std::string* BucketAccessControl::release_entity() {
  // @@protoc_insertion_point(field_release:google.storage.v2.BucketAccessControl.entity)
  return _impl_.entity_.Release();
}
inline void BucketAccessControl::set_allocated_entity(std::string* entity) {
  if (entity != nullptr) {
    
  } else {
    
  }
  _impl_.entity_.SetAllocated(entity, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.entity_.IsDefault()) {
    _impl_.entity_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.BucketAccessControl.entity)
}

// string entity_id = 4;
inline void BucketAccessControl::clear_entity_id() {
  _impl_.entity_id_.ClearToEmpty();
}
inline const std::string& BucketAccessControl::entity_id() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.BucketAccessControl.entity_id)
  return _internal_entity_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BucketAccessControl::set_entity_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.entity_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.BucketAccessControl.entity_id)
}
inline std::string* BucketAccessControl::mutable_entity_id() {
  std::string* _s = _internal_mutable_entity_id();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.BucketAccessControl.entity_id)
  return _s;
}
inline const std::string& BucketAccessControl::_internal_entity_id() const {
  return _impl_.entity_id_.Get();
}
inline void BucketAccessControl::_internal_set_entity_id(const std::string& value) {
  
  _impl_.entity_id_.Set(value, GetArenaForAllocation());
}
inline std::string* BucketAccessControl::_internal_mutable_entity_id() {
  
  return _impl_.entity_id_.Mutable(GetArenaForAllocation());
}
inline std::string* BucketAccessControl::release_entity_id() {
  // @@protoc_insertion_point(field_release:google.storage.v2.BucketAccessControl.entity_id)
  return _impl_.entity_id_.Release();
}
inline void BucketAccessControl::set_allocated_entity_id(std::string* entity_id) {
  if (entity_id != nullptr) {
    
  } else {
    
  }
  _impl_.entity_id_.SetAllocated(entity_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.entity_id_.IsDefault()) {
    _impl_.entity_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.BucketAccessControl.entity_id)
}

// string etag = 8;
inline void BucketAccessControl::clear_etag() {
  _impl_.etag_.ClearToEmpty();
}
inline const std::string& BucketAccessControl::etag() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.BucketAccessControl.etag)
  return _internal_etag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BucketAccessControl::set_etag(ArgT0&& arg0, ArgT... args) {
 
 _impl_.etag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.BucketAccessControl.etag)
}
inline std::string* BucketAccessControl::mutable_etag() {
  std::string* _s = _internal_mutable_etag();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.BucketAccessControl.etag)
  return _s;
}
inline const std::string& BucketAccessControl::_internal_etag() const {
  return _impl_.etag_.Get();
}
inline void BucketAccessControl::_internal_set_etag(const std::string& value) {
  
  _impl_.etag_.Set(value, GetArenaForAllocation());
}
inline std::string* BucketAccessControl::_internal_mutable_etag() {
  
  return _impl_.etag_.Mutable(GetArenaForAllocation());
}
inline std::string* BucketAccessControl::release_etag() {
  // @@protoc_insertion_point(field_release:google.storage.v2.BucketAccessControl.etag)
  return _impl_.etag_.Release();
}
inline void BucketAccessControl::set_allocated_etag(std::string* etag) {
  if (etag != nullptr) {
    
  } else {
    
  }
  _impl_.etag_.SetAllocated(etag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.etag_.IsDefault()) {
    _impl_.etag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.BucketAccessControl.etag)
}

// string email = 5;
inline void BucketAccessControl::clear_email() {
  _impl_.email_.ClearToEmpty();
}
inline const std::string& BucketAccessControl::email() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.BucketAccessControl.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BucketAccessControl::set_email(ArgT0&& arg0, ArgT... args) {
 
 _impl_.email_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.BucketAccessControl.email)
}
inline std::string* BucketAccessControl::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.BucketAccessControl.email)
  return _s;
}
inline const std::string& BucketAccessControl::_internal_email() const {
  return _impl_.email_.Get();
}
inline void BucketAccessControl::_internal_set_email(const std::string& value) {
  
  _impl_.email_.Set(value, GetArenaForAllocation());
}
inline std::string* BucketAccessControl::_internal_mutable_email() {
  
  return _impl_.email_.Mutable(GetArenaForAllocation());
}
inline std::string* BucketAccessControl::release_email() {
  // @@protoc_insertion_point(field_release:google.storage.v2.BucketAccessControl.email)
  return _impl_.email_.Release();
}
inline void BucketAccessControl::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  _impl_.email_.SetAllocated(email, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.email_.IsDefault()) {
    _impl_.email_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.BucketAccessControl.email)
}

// string domain = 6;
inline void BucketAccessControl::clear_domain() {
  _impl_.domain_.ClearToEmpty();
}
inline const std::string& BucketAccessControl::domain() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.BucketAccessControl.domain)
  return _internal_domain();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BucketAccessControl::set_domain(ArgT0&& arg0, ArgT... args) {
 
 _impl_.domain_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.BucketAccessControl.domain)
}
inline std::string* BucketAccessControl::mutable_domain() {
  std::string* _s = _internal_mutable_domain();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.BucketAccessControl.domain)
  return _s;
}
inline const std::string& BucketAccessControl::_internal_domain() const {
  return _impl_.domain_.Get();
}
inline void BucketAccessControl::_internal_set_domain(const std::string& value) {
  
  _impl_.domain_.Set(value, GetArenaForAllocation());
}
inline std::string* BucketAccessControl::_internal_mutable_domain() {
  
  return _impl_.domain_.Mutable(GetArenaForAllocation());
}
inline std::string* BucketAccessControl::release_domain() {
  // @@protoc_insertion_point(field_release:google.storage.v2.BucketAccessControl.domain)
  return _impl_.domain_.Release();
}
inline void BucketAccessControl::set_allocated_domain(std::string* domain) {
  if (domain != nullptr) {
    
  } else {
    
  }
  _impl_.domain_.SetAllocated(domain, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.domain_.IsDefault()) {
    _impl_.domain_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.BucketAccessControl.domain)
}

// .google.storage.v2.ProjectTeam project_team = 7;
inline bool BucketAccessControl::_internal_has_project_team() const {
  return this != internal_default_instance() && _impl_.project_team_ != nullptr;
}
inline bool BucketAccessControl::has_project_team() const {
  return _internal_has_project_team();
}
inline void BucketAccessControl::clear_project_team() {
  if (GetArenaForAllocation() == nullptr && _impl_.project_team_ != nullptr) {
    delete _impl_.project_team_;
  }
  _impl_.project_team_ = nullptr;
}
inline const ::google::storage::v2::ProjectTeam& BucketAccessControl::_internal_project_team() const {
  const ::google::storage::v2::ProjectTeam* p = _impl_.project_team_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::storage::v2::ProjectTeam&>(
      ::google::storage::v2::_ProjectTeam_default_instance_);
}
inline const ::google::storage::v2::ProjectTeam& BucketAccessControl::project_team() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.BucketAccessControl.project_team)
  return _internal_project_team();
}
inline void BucketAccessControl::unsafe_arena_set_allocated_project_team(
    ::google::storage::v2::ProjectTeam* project_team) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.project_team_);
  }
  _impl_.project_team_ = project_team;
  if (project_team) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.BucketAccessControl.project_team)
}
inline ::google::storage::v2::ProjectTeam* BucketAccessControl::release_project_team() {
  
  ::google::storage::v2::ProjectTeam* temp = _impl_.project_team_;
  _impl_.project_team_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::storage::v2::ProjectTeam* BucketAccessControl::unsafe_arena_release_project_team() {
  // @@protoc_insertion_point(field_release:google.storage.v2.BucketAccessControl.project_team)
  
  ::google::storage::v2::ProjectTeam* temp = _impl_.project_team_;
  _impl_.project_team_ = nullptr;
  return temp;
}
inline ::google::storage::v2::ProjectTeam* BucketAccessControl::_internal_mutable_project_team() {
  
  if (_impl_.project_team_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::storage::v2::ProjectTeam>(GetArenaForAllocation());
    _impl_.project_team_ = p;
  }
  return _impl_.project_team_;
}
inline ::google::storage::v2::ProjectTeam* BucketAccessControl::mutable_project_team() {
  ::google::storage::v2::ProjectTeam* _msg = _internal_mutable_project_team();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.BucketAccessControl.project_team)
  return _msg;
}
inline void BucketAccessControl::set_allocated_project_team(::google::storage::v2::ProjectTeam* project_team) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.project_team_;
  }
  if (project_team) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(project_team);
    if (message_arena != submessage_arena) {
      project_team = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, project_team, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.project_team_ = project_team;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.BucketAccessControl.project_team)
}

// -------------------------------------------------------------------

// ChecksummedData

// bytes content = 1;
inline void ChecksummedData::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& ChecksummedData::content() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ChecksummedData.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChecksummedData::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.ChecksummedData.content)
}
inline std::string* ChecksummedData::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.ChecksummedData.content)
  return _s;
}
inline const std::string& ChecksummedData::_internal_content() const {
  return _impl_.content_.Get();
}
inline void ChecksummedData::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* ChecksummedData::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* ChecksummedData::release_content() {
  // @@protoc_insertion_point(field_release:google.storage.v2.ChecksummedData.content)
  return _impl_.content_.Release();
}
inline void ChecksummedData::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.ChecksummedData.content)
}

// optional fixed32 crc32c = 2;
inline bool ChecksummedData::_internal_has_crc32c() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChecksummedData::has_crc32c() const {
  return _internal_has_crc32c();
}
inline void ChecksummedData::clear_crc32c() {
  _impl_.crc32c_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t ChecksummedData::_internal_crc32c() const {
  return _impl_.crc32c_;
}
inline uint32_t ChecksummedData::crc32c() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ChecksummedData.crc32c)
  return _internal_crc32c();
}
inline void ChecksummedData::_internal_set_crc32c(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.crc32c_ = value;
}
inline void ChecksummedData::set_crc32c(uint32_t value) {
  _internal_set_crc32c(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.ChecksummedData.crc32c)
}

// -------------------------------------------------------------------

// ObjectChecksums

// optional fixed32 crc32c = 1;
inline bool ObjectChecksums::_internal_has_crc32c() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ObjectChecksums::has_crc32c() const {
  return _internal_has_crc32c();
}
inline void ObjectChecksums::clear_crc32c() {
  _impl_.crc32c_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t ObjectChecksums::_internal_crc32c() const {
  return _impl_.crc32c_;
}
inline uint32_t ObjectChecksums::crc32c() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ObjectChecksums.crc32c)
  return _internal_crc32c();
}
inline void ObjectChecksums::_internal_set_crc32c(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.crc32c_ = value;
}
inline void ObjectChecksums::set_crc32c(uint32_t value) {
  _internal_set_crc32c(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.ObjectChecksums.crc32c)
}

// bytes md5_hash = 2;
inline void ObjectChecksums::clear_md5_hash() {
  _impl_.md5_hash_.ClearToEmpty();
}
inline const std::string& ObjectChecksums::md5_hash() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ObjectChecksums.md5_hash)
  return _internal_md5_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObjectChecksums::set_md5_hash(ArgT0&& arg0, ArgT... args) {
 
 _impl_.md5_hash_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.ObjectChecksums.md5_hash)
}
inline std::string* ObjectChecksums::mutable_md5_hash() {
  std::string* _s = _internal_mutable_md5_hash();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.ObjectChecksums.md5_hash)
  return _s;
}
inline const std::string& ObjectChecksums::_internal_md5_hash() const {
  return _impl_.md5_hash_.Get();
}
inline void ObjectChecksums::_internal_set_md5_hash(const std::string& value) {
  
  _impl_.md5_hash_.Set(value, GetArenaForAllocation());
}
inline std::string* ObjectChecksums::_internal_mutable_md5_hash() {
  
  return _impl_.md5_hash_.Mutable(GetArenaForAllocation());
}
inline std::string* ObjectChecksums::release_md5_hash() {
  // @@protoc_insertion_point(field_release:google.storage.v2.ObjectChecksums.md5_hash)
  return _impl_.md5_hash_.Release();
}
inline void ObjectChecksums::set_allocated_md5_hash(std::string* md5_hash) {
  if (md5_hash != nullptr) {
    
  } else {
    
  }
  _impl_.md5_hash_.SetAllocated(md5_hash, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.md5_hash_.IsDefault()) {
    _impl_.md5_hash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.ObjectChecksums.md5_hash)
}

// -------------------------------------------------------------------

// HmacKeyMetadata

// string id = 1 [(.google.api.field_behavior) = IMMUTABLE];
inline void HmacKeyMetadata::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& HmacKeyMetadata::id() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.HmacKeyMetadata.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HmacKeyMetadata::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.HmacKeyMetadata.id)
}
inline std::string* HmacKeyMetadata::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.HmacKeyMetadata.id)
  return _s;
}
inline const std::string& HmacKeyMetadata::_internal_id() const {
  return _impl_.id_.Get();
}
inline void HmacKeyMetadata::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* HmacKeyMetadata::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* HmacKeyMetadata::release_id() {
  // @@protoc_insertion_point(field_release:google.storage.v2.HmacKeyMetadata.id)
  return _impl_.id_.Release();
}
inline void HmacKeyMetadata::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.HmacKeyMetadata.id)
}

// string access_id = 2 [(.google.api.field_behavior) = IMMUTABLE];
inline void HmacKeyMetadata::clear_access_id() {
  _impl_.access_id_.ClearToEmpty();
}
inline const std::string& HmacKeyMetadata::access_id() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.HmacKeyMetadata.access_id)
  return _internal_access_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HmacKeyMetadata::set_access_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.access_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.HmacKeyMetadata.access_id)
}
inline std::string* HmacKeyMetadata::mutable_access_id() {
  std::string* _s = _internal_mutable_access_id();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.HmacKeyMetadata.access_id)
  return _s;
}
inline const std::string& HmacKeyMetadata::_internal_access_id() const {
  return _impl_.access_id_.Get();
}
inline void HmacKeyMetadata::_internal_set_access_id(const std::string& value) {
  
  _impl_.access_id_.Set(value, GetArenaForAllocation());
}
inline std::string* HmacKeyMetadata::_internal_mutable_access_id() {
  
  return _impl_.access_id_.Mutable(GetArenaForAllocation());
}
inline std::string* HmacKeyMetadata::release_access_id() {
  // @@protoc_insertion_point(field_release:google.storage.v2.HmacKeyMetadata.access_id)
  return _impl_.access_id_.Release();
}
inline void HmacKeyMetadata::set_allocated_access_id(std::string* access_id) {
  if (access_id != nullptr) {
    
  } else {
    
  }
  _impl_.access_id_.SetAllocated(access_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.access_id_.IsDefault()) {
    _impl_.access_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.HmacKeyMetadata.access_id)
}

// string project = 3 [(.google.api.field_behavior) = IMMUTABLE, (.google.api.resource_reference) = {
inline void HmacKeyMetadata::clear_project() {
  _impl_.project_.ClearToEmpty();
}
inline const std::string& HmacKeyMetadata::project() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.HmacKeyMetadata.project)
  return _internal_project();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HmacKeyMetadata::set_project(ArgT0&& arg0, ArgT... args) {
 
 _impl_.project_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.HmacKeyMetadata.project)
}
inline std::string* HmacKeyMetadata::mutable_project() {
  std::string* _s = _internal_mutable_project();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.HmacKeyMetadata.project)
  return _s;
}
inline const std::string& HmacKeyMetadata::_internal_project() const {
  return _impl_.project_.Get();
}
inline void HmacKeyMetadata::_internal_set_project(const std::string& value) {
  
  _impl_.project_.Set(value, GetArenaForAllocation());
}
inline std::string* HmacKeyMetadata::_internal_mutable_project() {
  
  return _impl_.project_.Mutable(GetArenaForAllocation());
}
inline std::string* HmacKeyMetadata::release_project() {
  // @@protoc_insertion_point(field_release:google.storage.v2.HmacKeyMetadata.project)
  return _impl_.project_.Release();
}
inline void HmacKeyMetadata::set_allocated_project(std::string* project) {
  if (project != nullptr) {
    
  } else {
    
  }
  _impl_.project_.SetAllocated(project, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.project_.IsDefault()) {
    _impl_.project_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.HmacKeyMetadata.project)
}

// string service_account_email = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void HmacKeyMetadata::clear_service_account_email() {
  _impl_.service_account_email_.ClearToEmpty();
}
inline const std::string& HmacKeyMetadata::service_account_email() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.HmacKeyMetadata.service_account_email)
  return _internal_service_account_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HmacKeyMetadata::set_service_account_email(ArgT0&& arg0, ArgT... args) {
 
 _impl_.service_account_email_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.HmacKeyMetadata.service_account_email)
}
inline std::string* HmacKeyMetadata::mutable_service_account_email() {
  std::string* _s = _internal_mutable_service_account_email();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.HmacKeyMetadata.service_account_email)
  return _s;
}
inline const std::string& HmacKeyMetadata::_internal_service_account_email() const {
  return _impl_.service_account_email_.Get();
}
inline void HmacKeyMetadata::_internal_set_service_account_email(const std::string& value) {
  
  _impl_.service_account_email_.Set(value, GetArenaForAllocation());
}
inline std::string* HmacKeyMetadata::_internal_mutable_service_account_email() {
  
  return _impl_.service_account_email_.Mutable(GetArenaForAllocation());
}
inline std::string* HmacKeyMetadata::release_service_account_email() {
  // @@protoc_insertion_point(field_release:google.storage.v2.HmacKeyMetadata.service_account_email)
  return _impl_.service_account_email_.Release();
}
inline void HmacKeyMetadata::set_allocated_service_account_email(std::string* service_account_email) {
  if (service_account_email != nullptr) {
    
  } else {
    
  }
  _impl_.service_account_email_.SetAllocated(service_account_email, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.service_account_email_.IsDefault()) {
    _impl_.service_account_email_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.HmacKeyMetadata.service_account_email)
}

// string state = 5;
inline void HmacKeyMetadata::clear_state() {
  _impl_.state_.ClearToEmpty();
}
inline const std::string& HmacKeyMetadata::state() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.HmacKeyMetadata.state)
  return _internal_state();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HmacKeyMetadata::set_state(ArgT0&& arg0, ArgT... args) {
 
 _impl_.state_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.HmacKeyMetadata.state)
}
inline std::string* HmacKeyMetadata::mutable_state() {
  std::string* _s = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.HmacKeyMetadata.state)
  return _s;
}
inline const std::string& HmacKeyMetadata::_internal_state() const {
  return _impl_.state_.Get();
}
inline void HmacKeyMetadata::_internal_set_state(const std::string& value) {
  
  _impl_.state_.Set(value, GetArenaForAllocation());
}
inline std::string* HmacKeyMetadata::_internal_mutable_state() {
  
  return _impl_.state_.Mutable(GetArenaForAllocation());
}
inline std::string* HmacKeyMetadata::release_state() {
  // @@protoc_insertion_point(field_release:google.storage.v2.HmacKeyMetadata.state)
  return _impl_.state_.Release();
}
inline void HmacKeyMetadata::set_allocated_state(std::string* state) {
  if (state != nullptr) {
    
  } else {
    
  }
  _impl_.state_.SetAllocated(state, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.state_.IsDefault()) {
    _impl_.state_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.HmacKeyMetadata.state)
}

// .google.protobuf.Timestamp create_time = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool HmacKeyMetadata::_internal_has_create_time() const {
  return this != internal_default_instance() && _impl_.create_time_ != nullptr;
}
inline bool HmacKeyMetadata::has_create_time() const {
  return _internal_has_create_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& HmacKeyMetadata::_internal_create_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.create_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& HmacKeyMetadata::create_time() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.HmacKeyMetadata.create_time)
  return _internal_create_time();
}
inline void HmacKeyMetadata::unsafe_arena_set_allocated_create_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.create_time_);
  }
  _impl_.create_time_ = create_time;
  if (create_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.HmacKeyMetadata.create_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* HmacKeyMetadata::release_create_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.create_time_;
  _impl_.create_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* HmacKeyMetadata::unsafe_arena_release_create_time() {
  // @@protoc_insertion_point(field_release:google.storage.v2.HmacKeyMetadata.create_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.create_time_;
  _impl_.create_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* HmacKeyMetadata::_internal_mutable_create_time() {
  
  if (_impl_.create_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.create_time_ = p;
  }
  return _impl_.create_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* HmacKeyMetadata::mutable_create_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_create_time();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.HmacKeyMetadata.create_time)
  return _msg;
}
inline void HmacKeyMetadata::set_allocated_create_time(::PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.create_time_);
  }
  if (create_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time));
    if (message_arena != submessage_arena) {
      create_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.HmacKeyMetadata.create_time)
}

// .google.protobuf.Timestamp update_time = 7 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool HmacKeyMetadata::_internal_has_update_time() const {
  return this != internal_default_instance() && _impl_.update_time_ != nullptr;
}
inline bool HmacKeyMetadata::has_update_time() const {
  return _internal_has_update_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& HmacKeyMetadata::_internal_update_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.update_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& HmacKeyMetadata::update_time() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.HmacKeyMetadata.update_time)
  return _internal_update_time();
}
inline void HmacKeyMetadata::unsafe_arena_set_allocated_update_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* update_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_time_);
  }
  _impl_.update_time_ = update_time;
  if (update_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.HmacKeyMetadata.update_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* HmacKeyMetadata::release_update_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.update_time_;
  _impl_.update_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* HmacKeyMetadata::unsafe_arena_release_update_time() {
  // @@protoc_insertion_point(field_release:google.storage.v2.HmacKeyMetadata.update_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.update_time_;
  _impl_.update_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* HmacKeyMetadata::_internal_mutable_update_time() {
  
  if (_impl_.update_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.update_time_ = p;
  }
  return _impl_.update_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* HmacKeyMetadata::mutable_update_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_update_time();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.HmacKeyMetadata.update_time)
  return _msg;
}
inline void HmacKeyMetadata::set_allocated_update_time(::PROTOBUF_NAMESPACE_ID::Timestamp* update_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_time_);
  }
  if (update_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_time));
    if (message_arena != submessage_arena) {
      update_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.update_time_ = update_time;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.HmacKeyMetadata.update_time)
}

// string etag = 8;
inline void HmacKeyMetadata::clear_etag() {
  _impl_.etag_.ClearToEmpty();
}
inline const std::string& HmacKeyMetadata::etag() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.HmacKeyMetadata.etag)
  return _internal_etag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HmacKeyMetadata::set_etag(ArgT0&& arg0, ArgT... args) {
 
 _impl_.etag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.HmacKeyMetadata.etag)
}
inline std::string* HmacKeyMetadata::mutable_etag() {
  std::string* _s = _internal_mutable_etag();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.HmacKeyMetadata.etag)
  return _s;
}
inline const std::string& HmacKeyMetadata::_internal_etag() const {
  return _impl_.etag_.Get();
}
inline void HmacKeyMetadata::_internal_set_etag(const std::string& value) {
  
  _impl_.etag_.Set(value, GetArenaForAllocation());
}
inline std::string* HmacKeyMetadata::_internal_mutable_etag() {
  
  return _impl_.etag_.Mutable(GetArenaForAllocation());
}
inline std::string* HmacKeyMetadata::release_etag() {
  // @@protoc_insertion_point(field_release:google.storage.v2.HmacKeyMetadata.etag)
  return _impl_.etag_.Release();
}
inline void HmacKeyMetadata::set_allocated_etag(std::string* etag) {
  if (etag != nullptr) {
    
  } else {
    
  }
  _impl_.etag_.SetAllocated(etag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.etag_.IsDefault()) {
    _impl_.etag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.HmacKeyMetadata.etag)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Notification

// string name = 1 [(.google.api.field_behavior) = REQUIRED];
inline void Notification::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Notification::name() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Notification.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Notification::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.Notification.name)
}
inline std::string* Notification::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Notification.name)
  return _s;
}
inline const std::string& Notification::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Notification::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Notification::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Notification::release_name() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Notification.name)
  return _impl_.name_.Release();
}
inline void Notification::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Notification.name)
}

// string topic = 2 [(.google.api.field_behavior) = REQUIRED];
inline void Notification::clear_topic() {
  _impl_.topic_.ClearToEmpty();
}
inline const std::string& Notification::topic() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Notification.topic)
  return _internal_topic();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Notification::set_topic(ArgT0&& arg0, ArgT... args) {
 
 _impl_.topic_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.Notification.topic)
}
inline std::string* Notification::mutable_topic() {
  std::string* _s = _internal_mutable_topic();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Notification.topic)
  return _s;
}
inline const std::string& Notification::_internal_topic() const {
  return _impl_.topic_.Get();
}
inline void Notification::_internal_set_topic(const std::string& value) {
  
  _impl_.topic_.Set(value, GetArenaForAllocation());
}
inline std::string* Notification::_internal_mutable_topic() {
  
  return _impl_.topic_.Mutable(GetArenaForAllocation());
}
inline std::string* Notification::release_topic() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Notification.topic)
  return _impl_.topic_.Release();
}
inline void Notification::set_allocated_topic(std::string* topic) {
  if (topic != nullptr) {
    
  } else {
    
  }
  _impl_.topic_.SetAllocated(topic, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.topic_.IsDefault()) {
    _impl_.topic_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Notification.topic)
}

// string etag = 7;
inline void Notification::clear_etag() {
  _impl_.etag_.ClearToEmpty();
}
inline const std::string& Notification::etag() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Notification.etag)
  return _internal_etag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Notification::set_etag(ArgT0&& arg0, ArgT... args) {
 
 _impl_.etag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.Notification.etag)
}
inline std::string* Notification::mutable_etag() {
  std::string* _s = _internal_mutable_etag();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Notification.etag)
  return _s;
}
inline const std::string& Notification::_internal_etag() const {
  return _impl_.etag_.Get();
}
inline void Notification::_internal_set_etag(const std::string& value) {
  
  _impl_.etag_.Set(value, GetArenaForAllocation());
}
inline std::string* Notification::_internal_mutable_etag() {
  
  return _impl_.etag_.Mutable(GetArenaForAllocation());
}
inline std::string* Notification::release_etag() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Notification.etag)
  return _impl_.etag_.Release();
}
inline void Notification::set_allocated_etag(std::string* etag) {
  if (etag != nullptr) {
    
  } else {
    
  }
  _impl_.etag_.SetAllocated(etag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.etag_.IsDefault()) {
    _impl_.etag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Notification.etag)
}

// repeated string event_types = 3 [(.google.api.field_behavior) = OPTIONAL];
inline int Notification::_internal_event_types_size() const {
  return _impl_.event_types_.size();
}
inline int Notification::event_types_size() const {
  return _internal_event_types_size();
}
inline void Notification::clear_event_types() {
  _impl_.event_types_.Clear();
}
inline std::string* Notification::add_event_types() {
  std::string* _s = _internal_add_event_types();
  // @@protoc_insertion_point(field_add_mutable:google.storage.v2.Notification.event_types)
  return _s;
}
inline const std::string& Notification::_internal_event_types(int index) const {
  return _impl_.event_types_.Get(index);
}
inline const std::string& Notification::event_types(int index) const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Notification.event_types)
  return _internal_event_types(index);
}
inline std::string* Notification::mutable_event_types(int index) {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Notification.event_types)
  return _impl_.event_types_.Mutable(index);
}
inline void Notification::set_event_types(int index, const std::string& value) {
  _impl_.event_types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.Notification.event_types)
}
inline void Notification::set_event_types(int index, std::string&& value) {
  _impl_.event_types_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.storage.v2.Notification.event_types)
}
inline void Notification::set_event_types(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.event_types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.storage.v2.Notification.event_types)
}
inline void Notification::set_event_types(int index, const char* value, size_t size) {
  _impl_.event_types_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.storage.v2.Notification.event_types)
}
inline std::string* Notification::_internal_add_event_types() {
  return _impl_.event_types_.Add();
}
inline void Notification::add_event_types(const std::string& value) {
  _impl_.event_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.storage.v2.Notification.event_types)
}
inline void Notification::add_event_types(std::string&& value) {
  _impl_.event_types_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.storage.v2.Notification.event_types)
}
inline void Notification::add_event_types(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.event_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.storage.v2.Notification.event_types)
}
inline void Notification::add_event_types(const char* value, size_t size) {
  _impl_.event_types_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.storage.v2.Notification.event_types)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Notification::event_types() const {
  // @@protoc_insertion_point(field_list:google.storage.v2.Notification.event_types)
  return _impl_.event_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Notification::mutable_event_types() {
  // @@protoc_insertion_point(field_mutable_list:google.storage.v2.Notification.event_types)
  return &_impl_.event_types_;
}

// map<string, string> custom_attributes = 4 [(.google.api.field_behavior) = OPTIONAL];
inline int Notification::_internal_custom_attributes_size() const {
  return _impl_.custom_attributes_.size();
}
inline int Notification::custom_attributes_size() const {
  return _internal_custom_attributes_size();
}
inline void Notification::clear_custom_attributes() {
  _impl_.custom_attributes_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Notification::_internal_custom_attributes() const {
  return _impl_.custom_attributes_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Notification::custom_attributes() const {
  // @@protoc_insertion_point(field_map:google.storage.v2.Notification.custom_attributes)
  return _internal_custom_attributes();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Notification::_internal_mutable_custom_attributes() {
  return _impl_.custom_attributes_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Notification::mutable_custom_attributes() {
  // @@protoc_insertion_point(field_mutable_map:google.storage.v2.Notification.custom_attributes)
  return _internal_mutable_custom_attributes();
}

// string object_name_prefix = 5 [(.google.api.field_behavior) = OPTIONAL];
inline void Notification::clear_object_name_prefix() {
  _impl_.object_name_prefix_.ClearToEmpty();
}
inline const std::string& Notification::object_name_prefix() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Notification.object_name_prefix)
  return _internal_object_name_prefix();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Notification::set_object_name_prefix(ArgT0&& arg0, ArgT... args) {
 
 _impl_.object_name_prefix_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.Notification.object_name_prefix)
}
inline std::string* Notification::mutable_object_name_prefix() {
  std::string* _s = _internal_mutable_object_name_prefix();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Notification.object_name_prefix)
  return _s;
}
inline const std::string& Notification::_internal_object_name_prefix() const {
  return _impl_.object_name_prefix_.Get();
}
inline void Notification::_internal_set_object_name_prefix(const std::string& value) {
  
  _impl_.object_name_prefix_.Set(value, GetArenaForAllocation());
}
inline std::string* Notification::_internal_mutable_object_name_prefix() {
  
  return _impl_.object_name_prefix_.Mutable(GetArenaForAllocation());
}
inline std::string* Notification::release_object_name_prefix() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Notification.object_name_prefix)
  return _impl_.object_name_prefix_.Release();
}
inline void Notification::set_allocated_object_name_prefix(std::string* object_name_prefix) {
  if (object_name_prefix != nullptr) {
    
  } else {
    
  }
  _impl_.object_name_prefix_.SetAllocated(object_name_prefix, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.object_name_prefix_.IsDefault()) {
    _impl_.object_name_prefix_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Notification.object_name_prefix)
}

// string payload_format = 6 [(.google.api.field_behavior) = REQUIRED];
inline void Notification::clear_payload_format() {
  _impl_.payload_format_.ClearToEmpty();
}
inline const std::string& Notification::payload_format() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Notification.payload_format)
  return _internal_payload_format();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Notification::set_payload_format(ArgT0&& arg0, ArgT... args) {
 
 _impl_.payload_format_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.Notification.payload_format)
}
inline std::string* Notification::mutable_payload_format() {
  std::string* _s = _internal_mutable_payload_format();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Notification.payload_format)
  return _s;
}
inline const std::string& Notification::_internal_payload_format() const {
  return _impl_.payload_format_.Get();
}
inline void Notification::_internal_set_payload_format(const std::string& value) {
  
  _impl_.payload_format_.Set(value, GetArenaForAllocation());
}
inline std::string* Notification::_internal_mutable_payload_format() {
  
  return _impl_.payload_format_.Mutable(GetArenaForAllocation());
}
inline std::string* Notification::release_payload_format() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Notification.payload_format)
  return _impl_.payload_format_.Release();
}
inline void Notification::set_allocated_payload_format(std::string* payload_format) {
  if (payload_format != nullptr) {
    
  } else {
    
  }
  _impl_.payload_format_.SetAllocated(payload_format, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.payload_format_.IsDefault()) {
    _impl_.payload_format_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Notification.payload_format)
}

// -------------------------------------------------------------------

// CustomerEncryption

// string encryption_algorithm = 1;
inline void CustomerEncryption::clear_encryption_algorithm() {
  _impl_.encryption_algorithm_.ClearToEmpty();
}
inline const std::string& CustomerEncryption::encryption_algorithm() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.CustomerEncryption.encryption_algorithm)
  return _internal_encryption_algorithm();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CustomerEncryption::set_encryption_algorithm(ArgT0&& arg0, ArgT... args) {
 
 _impl_.encryption_algorithm_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.CustomerEncryption.encryption_algorithm)
}
inline std::string* CustomerEncryption::mutable_encryption_algorithm() {
  std::string* _s = _internal_mutable_encryption_algorithm();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.CustomerEncryption.encryption_algorithm)
  return _s;
}
inline const std::string& CustomerEncryption::_internal_encryption_algorithm() const {
  return _impl_.encryption_algorithm_.Get();
}
inline void CustomerEncryption::_internal_set_encryption_algorithm(const std::string& value) {
  
  _impl_.encryption_algorithm_.Set(value, GetArenaForAllocation());
}
inline std::string* CustomerEncryption::_internal_mutable_encryption_algorithm() {
  
  return _impl_.encryption_algorithm_.Mutable(GetArenaForAllocation());
}
inline std::string* CustomerEncryption::release_encryption_algorithm() {
  // @@protoc_insertion_point(field_release:google.storage.v2.CustomerEncryption.encryption_algorithm)
  return _impl_.encryption_algorithm_.Release();
}
inline void CustomerEncryption::set_allocated_encryption_algorithm(std::string* encryption_algorithm) {
  if (encryption_algorithm != nullptr) {
    
  } else {
    
  }
  _impl_.encryption_algorithm_.SetAllocated(encryption_algorithm, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.encryption_algorithm_.IsDefault()) {
    _impl_.encryption_algorithm_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.CustomerEncryption.encryption_algorithm)
}

// bytes key_sha256_bytes = 3;
inline void CustomerEncryption::clear_key_sha256_bytes() {
  _impl_.key_sha256_bytes_.ClearToEmpty();
}
inline const std::string& CustomerEncryption::key_sha256_bytes() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.CustomerEncryption.key_sha256_bytes)
  return _internal_key_sha256_bytes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CustomerEncryption::set_key_sha256_bytes(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_sha256_bytes_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.CustomerEncryption.key_sha256_bytes)
}
inline std::string* CustomerEncryption::mutable_key_sha256_bytes() {
  std::string* _s = _internal_mutable_key_sha256_bytes();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.CustomerEncryption.key_sha256_bytes)
  return _s;
}
inline const std::string& CustomerEncryption::_internal_key_sha256_bytes() const {
  return _impl_.key_sha256_bytes_.Get();
}
inline void CustomerEncryption::_internal_set_key_sha256_bytes(const std::string& value) {
  
  _impl_.key_sha256_bytes_.Set(value, GetArenaForAllocation());
}
inline std::string* CustomerEncryption::_internal_mutable_key_sha256_bytes() {
  
  return _impl_.key_sha256_bytes_.Mutable(GetArenaForAllocation());
}
inline std::string* CustomerEncryption::release_key_sha256_bytes() {
  // @@protoc_insertion_point(field_release:google.storage.v2.CustomerEncryption.key_sha256_bytes)
  return _impl_.key_sha256_bytes_.Release();
}
inline void CustomerEncryption::set_allocated_key_sha256_bytes(std::string* key_sha256_bytes) {
  if (key_sha256_bytes != nullptr) {
    
  } else {
    
  }
  _impl_.key_sha256_bytes_.SetAllocated(key_sha256_bytes, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_sha256_bytes_.IsDefault()) {
    _impl_.key_sha256_bytes_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.CustomerEncryption.key_sha256_bytes)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Object

// string name = 1 [(.google.api.field_behavior) = IMMUTABLE];
inline void Object::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Object::name() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Object.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Object::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.Object.name)
}
inline std::string* Object::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Object.name)
  return _s;
}
inline const std::string& Object::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Object::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Object::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Object::release_name() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Object.name)
  return _impl_.name_.Release();
}
inline void Object::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Object.name)
}

// string bucket = 2 [(.google.api.field_behavior) = IMMUTABLE, (.google.api.resource_reference) = {
inline void Object::clear_bucket() {
  _impl_.bucket_.ClearToEmpty();
}
inline const std::string& Object::bucket() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Object.bucket)
  return _internal_bucket();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Object::set_bucket(ArgT0&& arg0, ArgT... args) {
 
 _impl_.bucket_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.Object.bucket)
}
inline std::string* Object::mutable_bucket() {
  std::string* _s = _internal_mutable_bucket();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Object.bucket)
  return _s;
}
inline const std::string& Object::_internal_bucket() const {
  return _impl_.bucket_.Get();
}
inline void Object::_internal_set_bucket(const std::string& value) {
  
  _impl_.bucket_.Set(value, GetArenaForAllocation());
}
inline std::string* Object::_internal_mutable_bucket() {
  
  return _impl_.bucket_.Mutable(GetArenaForAllocation());
}
inline std::string* Object::release_bucket() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Object.bucket)
  return _impl_.bucket_.Release();
}
inline void Object::set_allocated_bucket(std::string* bucket) {
  if (bucket != nullptr) {
    
  } else {
    
  }
  _impl_.bucket_.SetAllocated(bucket, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bucket_.IsDefault()) {
    _impl_.bucket_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Object.bucket)
}

// string etag = 27;
inline void Object::clear_etag() {
  _impl_.etag_.ClearToEmpty();
}
inline const std::string& Object::etag() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Object.etag)
  return _internal_etag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Object::set_etag(ArgT0&& arg0, ArgT... args) {
 
 _impl_.etag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.Object.etag)
}
inline std::string* Object::mutable_etag() {
  std::string* _s = _internal_mutable_etag();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Object.etag)
  return _s;
}
inline const std::string& Object::_internal_etag() const {
  return _impl_.etag_.Get();
}
inline void Object::_internal_set_etag(const std::string& value) {
  
  _impl_.etag_.Set(value, GetArenaForAllocation());
}
inline std::string* Object::_internal_mutable_etag() {
  
  return _impl_.etag_.Mutable(GetArenaForAllocation());
}
inline std::string* Object::release_etag() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Object.etag)
  return _impl_.etag_.Release();
}
inline void Object::set_allocated_etag(std::string* etag) {
  if (etag != nullptr) {
    
  } else {
    
  }
  _impl_.etag_.SetAllocated(etag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.etag_.IsDefault()) {
    _impl_.etag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Object.etag)
}

// int64 generation = 3 [(.google.api.field_behavior) = IMMUTABLE];
inline void Object::clear_generation() {
  _impl_.generation_ = int64_t{0};
}
inline int64_t Object::_internal_generation() const {
  return _impl_.generation_;
}
inline int64_t Object::generation() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Object.generation)
  return _internal_generation();
}
inline void Object::_internal_set_generation(int64_t value) {
  
  _impl_.generation_ = value;
}
inline void Object::set_generation(int64_t value) {
  _internal_set_generation(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.Object.generation)
}

// int64 metageneration = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void Object::clear_metageneration() {
  _impl_.metageneration_ = int64_t{0};
}
inline int64_t Object::_internal_metageneration() const {
  return _impl_.metageneration_;
}
inline int64_t Object::metageneration() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Object.metageneration)
  return _internal_metageneration();
}
inline void Object::_internal_set_metageneration(int64_t value) {
  
  _impl_.metageneration_ = value;
}
inline void Object::set_metageneration(int64_t value) {
  _internal_set_metageneration(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.Object.metageneration)
}

// string storage_class = 5;
inline void Object::clear_storage_class() {
  _impl_.storage_class_.ClearToEmpty();
}
inline const std::string& Object::storage_class() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Object.storage_class)
  return _internal_storage_class();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Object::set_storage_class(ArgT0&& arg0, ArgT... args) {
 
 _impl_.storage_class_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.Object.storage_class)
}
inline std::string* Object::mutable_storage_class() {
  std::string* _s = _internal_mutable_storage_class();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Object.storage_class)
  return _s;
}
inline const std::string& Object::_internal_storage_class() const {
  return _impl_.storage_class_.Get();
}
inline void Object::_internal_set_storage_class(const std::string& value) {
  
  _impl_.storage_class_.Set(value, GetArenaForAllocation());
}
inline std::string* Object::_internal_mutable_storage_class() {
  
  return _impl_.storage_class_.Mutable(GetArenaForAllocation());
}
inline std::string* Object::release_storage_class() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Object.storage_class)
  return _impl_.storage_class_.Release();
}
inline void Object::set_allocated_storage_class(std::string* storage_class) {
  if (storage_class != nullptr) {
    
  } else {
    
  }
  _impl_.storage_class_.SetAllocated(storage_class, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.storage_class_.IsDefault()) {
    _impl_.storage_class_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Object.storage_class)
}

// int64 size = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void Object::clear_size() {
  _impl_.size_ = int64_t{0};
}
inline int64_t Object::_internal_size() const {
  return _impl_.size_;
}
inline int64_t Object::size() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Object.size)
  return _internal_size();
}
inline void Object::_internal_set_size(int64_t value) {
  
  _impl_.size_ = value;
}
inline void Object::set_size(int64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.Object.size)
}

// string content_encoding = 7;
inline void Object::clear_content_encoding() {
  _impl_.content_encoding_.ClearToEmpty();
}
inline const std::string& Object::content_encoding() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Object.content_encoding)
  return _internal_content_encoding();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Object::set_content_encoding(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_encoding_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.Object.content_encoding)
}
inline std::string* Object::mutable_content_encoding() {
  std::string* _s = _internal_mutable_content_encoding();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Object.content_encoding)
  return _s;
}
inline const std::string& Object::_internal_content_encoding() const {
  return _impl_.content_encoding_.Get();
}
inline void Object::_internal_set_content_encoding(const std::string& value) {
  
  _impl_.content_encoding_.Set(value, GetArenaForAllocation());
}
inline std::string* Object::_internal_mutable_content_encoding() {
  
  return _impl_.content_encoding_.Mutable(GetArenaForAllocation());
}
inline std::string* Object::release_content_encoding() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Object.content_encoding)
  return _impl_.content_encoding_.Release();
}
inline void Object::set_allocated_content_encoding(std::string* content_encoding) {
  if (content_encoding != nullptr) {
    
  } else {
    
  }
  _impl_.content_encoding_.SetAllocated(content_encoding, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_encoding_.IsDefault()) {
    _impl_.content_encoding_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Object.content_encoding)
}

// string content_disposition = 8;
inline void Object::clear_content_disposition() {
  _impl_.content_disposition_.ClearToEmpty();
}
inline const std::string& Object::content_disposition() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Object.content_disposition)
  return _internal_content_disposition();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Object::set_content_disposition(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_disposition_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.Object.content_disposition)
}
inline std::string* Object::mutable_content_disposition() {
  std::string* _s = _internal_mutable_content_disposition();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Object.content_disposition)
  return _s;
}
inline const std::string& Object::_internal_content_disposition() const {
  return _impl_.content_disposition_.Get();
}
inline void Object::_internal_set_content_disposition(const std::string& value) {
  
  _impl_.content_disposition_.Set(value, GetArenaForAllocation());
}
inline std::string* Object::_internal_mutable_content_disposition() {
  
  return _impl_.content_disposition_.Mutable(GetArenaForAllocation());
}
inline std::string* Object::release_content_disposition() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Object.content_disposition)
  return _impl_.content_disposition_.Release();
}
inline void Object::set_allocated_content_disposition(std::string* content_disposition) {
  if (content_disposition != nullptr) {
    
  } else {
    
  }
  _impl_.content_disposition_.SetAllocated(content_disposition, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_disposition_.IsDefault()) {
    _impl_.content_disposition_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Object.content_disposition)
}

// string cache_control = 9;
inline void Object::clear_cache_control() {
  _impl_.cache_control_.ClearToEmpty();
}
inline const std::string& Object::cache_control() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Object.cache_control)
  return _internal_cache_control();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Object::set_cache_control(ArgT0&& arg0, ArgT... args) {
 
 _impl_.cache_control_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.Object.cache_control)
}
inline std::string* Object::mutable_cache_control() {
  std::string* _s = _internal_mutable_cache_control();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Object.cache_control)
  return _s;
}
inline const std::string& Object::_internal_cache_control() const {
  return _impl_.cache_control_.Get();
}
inline void Object::_internal_set_cache_control(const std::string& value) {
  
  _impl_.cache_control_.Set(value, GetArenaForAllocation());
}
inline std::string* Object::_internal_mutable_cache_control() {
  
  return _impl_.cache_control_.Mutable(GetArenaForAllocation());
}
inline std::string* Object::release_cache_control() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Object.cache_control)
  return _impl_.cache_control_.Release();
}
inline void Object::set_allocated_cache_control(std::string* cache_control) {
  if (cache_control != nullptr) {
    
  } else {
    
  }
  _impl_.cache_control_.SetAllocated(cache_control, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cache_control_.IsDefault()) {
    _impl_.cache_control_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Object.cache_control)
}

// repeated .google.storage.v2.ObjectAccessControl acl = 10;
inline int Object::_internal_acl_size() const {
  return _impl_.acl_.size();
}
inline int Object::acl_size() const {
  return _internal_acl_size();
}
inline void Object::clear_acl() {
  _impl_.acl_.Clear();
}
inline ::google::storage::v2::ObjectAccessControl* Object::mutable_acl(int index) {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Object.acl)
  return _impl_.acl_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::storage::v2::ObjectAccessControl >*
Object::mutable_acl() {
  // @@protoc_insertion_point(field_mutable_list:google.storage.v2.Object.acl)
  return &_impl_.acl_;
}
inline const ::google::storage::v2::ObjectAccessControl& Object::_internal_acl(int index) const {
  return _impl_.acl_.Get(index);
}
inline const ::google::storage::v2::ObjectAccessControl& Object::acl(int index) const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Object.acl)
  return _internal_acl(index);
}
inline ::google::storage::v2::ObjectAccessControl* Object::_internal_add_acl() {
  return _impl_.acl_.Add();
}
inline ::google::storage::v2::ObjectAccessControl* Object::add_acl() {
  ::google::storage::v2::ObjectAccessControl* _add = _internal_add_acl();
  // @@protoc_insertion_point(field_add:google.storage.v2.Object.acl)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::storage::v2::ObjectAccessControl >&
Object::acl() const {
  // @@protoc_insertion_point(field_list:google.storage.v2.Object.acl)
  return _impl_.acl_;
}

// string content_language = 11;
inline void Object::clear_content_language() {
  _impl_.content_language_.ClearToEmpty();
}
inline const std::string& Object::content_language() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Object.content_language)
  return _internal_content_language();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Object::set_content_language(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_language_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.Object.content_language)
}
inline std::string* Object::mutable_content_language() {
  std::string* _s = _internal_mutable_content_language();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Object.content_language)
  return _s;
}
inline const std::string& Object::_internal_content_language() const {
  return _impl_.content_language_.Get();
}
inline void Object::_internal_set_content_language(const std::string& value) {
  
  _impl_.content_language_.Set(value, GetArenaForAllocation());
}
inline std::string* Object::_internal_mutable_content_language() {
  
  return _impl_.content_language_.Mutable(GetArenaForAllocation());
}
inline std::string* Object::release_content_language() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Object.content_language)
  return _impl_.content_language_.Release();
}
inline void Object::set_allocated_content_language(std::string* content_language) {
  if (content_language != nullptr) {
    
  } else {
    
  }
  _impl_.content_language_.SetAllocated(content_language, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_language_.IsDefault()) {
    _impl_.content_language_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Object.content_language)
}

// .google.protobuf.Timestamp delete_time = 12 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool Object::_internal_has_delete_time() const {
  return this != internal_default_instance() && _impl_.delete_time_ != nullptr;
}
inline bool Object::has_delete_time() const {
  return _internal_has_delete_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Object::_internal_delete_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.delete_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Object::delete_time() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Object.delete_time)
  return _internal_delete_time();
}
inline void Object::unsafe_arena_set_allocated_delete_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* delete_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.delete_time_);
  }
  _impl_.delete_time_ = delete_time;
  if (delete_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.Object.delete_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Object::release_delete_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.delete_time_;
  _impl_.delete_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Object::unsafe_arena_release_delete_time() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Object.delete_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.delete_time_;
  _impl_.delete_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Object::_internal_mutable_delete_time() {
  
  if (_impl_.delete_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.delete_time_ = p;
  }
  return _impl_.delete_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Object::mutable_delete_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_delete_time();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Object.delete_time)
  return _msg;
}
inline void Object::set_allocated_delete_time(::PROTOBUF_NAMESPACE_ID::Timestamp* delete_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.delete_time_);
  }
  if (delete_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(delete_time));
    if (message_arena != submessage_arena) {
      delete_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delete_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.delete_time_ = delete_time;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Object.delete_time)
}

// string content_type = 13;
inline void Object::clear_content_type() {
  _impl_.content_type_.ClearToEmpty();
}
inline const std::string& Object::content_type() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Object.content_type)
  return _internal_content_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Object::set_content_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.Object.content_type)
}
inline std::string* Object::mutable_content_type() {
  std::string* _s = _internal_mutable_content_type();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Object.content_type)
  return _s;
}
inline const std::string& Object::_internal_content_type() const {
  return _impl_.content_type_.Get();
}
inline void Object::_internal_set_content_type(const std::string& value) {
  
  _impl_.content_type_.Set(value, GetArenaForAllocation());
}
inline std::string* Object::_internal_mutable_content_type() {
  
  return _impl_.content_type_.Mutable(GetArenaForAllocation());
}
inline std::string* Object::release_content_type() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Object.content_type)
  return _impl_.content_type_.Release();
}
inline void Object::set_allocated_content_type(std::string* content_type) {
  if (content_type != nullptr) {
    
  } else {
    
  }
  _impl_.content_type_.SetAllocated(content_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_type_.IsDefault()) {
    _impl_.content_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Object.content_type)
}

// .google.protobuf.Timestamp create_time = 14 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool Object::_internal_has_create_time() const {
  return this != internal_default_instance() && _impl_.create_time_ != nullptr;
}
inline bool Object::has_create_time() const {
  return _internal_has_create_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Object::_internal_create_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.create_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Object::create_time() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Object.create_time)
  return _internal_create_time();
}
inline void Object::unsafe_arena_set_allocated_create_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.create_time_);
  }
  _impl_.create_time_ = create_time;
  if (create_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.Object.create_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Object::release_create_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.create_time_;
  _impl_.create_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Object::unsafe_arena_release_create_time() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Object.create_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.create_time_;
  _impl_.create_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Object::_internal_mutable_create_time() {
  
  if (_impl_.create_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.create_time_ = p;
  }
  return _impl_.create_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Object::mutable_create_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_create_time();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Object.create_time)
  return _msg;
}
inline void Object::set_allocated_create_time(::PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.create_time_);
  }
  if (create_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time));
    if (message_arena != submessage_arena) {
      create_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Object.create_time)
}

// int32 component_count = 15 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void Object::clear_component_count() {
  _impl_.component_count_ = 0;
}
inline int32_t Object::_internal_component_count() const {
  return _impl_.component_count_;
}
inline int32_t Object::component_count() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Object.component_count)
  return _internal_component_count();
}
inline void Object::_internal_set_component_count(int32_t value) {
  
  _impl_.component_count_ = value;
}
inline void Object::set_component_count(int32_t value) {
  _internal_set_component_count(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.Object.component_count)
}

// .google.storage.v2.ObjectChecksums checksums = 16 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool Object::_internal_has_checksums() const {
  return this != internal_default_instance() && _impl_.checksums_ != nullptr;
}
inline bool Object::has_checksums() const {
  return _internal_has_checksums();
}
inline void Object::clear_checksums() {
  if (GetArenaForAllocation() == nullptr && _impl_.checksums_ != nullptr) {
    delete _impl_.checksums_;
  }
  _impl_.checksums_ = nullptr;
}
inline const ::google::storage::v2::ObjectChecksums& Object::_internal_checksums() const {
  const ::google::storage::v2::ObjectChecksums* p = _impl_.checksums_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::storage::v2::ObjectChecksums&>(
      ::google::storage::v2::_ObjectChecksums_default_instance_);
}
inline const ::google::storage::v2::ObjectChecksums& Object::checksums() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Object.checksums)
  return _internal_checksums();
}
inline void Object::unsafe_arena_set_allocated_checksums(
    ::google::storage::v2::ObjectChecksums* checksums) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.checksums_);
  }
  _impl_.checksums_ = checksums;
  if (checksums) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.Object.checksums)
}
inline ::google::storage::v2::ObjectChecksums* Object::release_checksums() {
  
  ::google::storage::v2::ObjectChecksums* temp = _impl_.checksums_;
  _impl_.checksums_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::storage::v2::ObjectChecksums* Object::unsafe_arena_release_checksums() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Object.checksums)
  
  ::google::storage::v2::ObjectChecksums* temp = _impl_.checksums_;
  _impl_.checksums_ = nullptr;
  return temp;
}
inline ::google::storage::v2::ObjectChecksums* Object::_internal_mutable_checksums() {
  
  if (_impl_.checksums_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::storage::v2::ObjectChecksums>(GetArenaForAllocation());
    _impl_.checksums_ = p;
  }
  return _impl_.checksums_;
}
inline ::google::storage::v2::ObjectChecksums* Object::mutable_checksums() {
  ::google::storage::v2::ObjectChecksums* _msg = _internal_mutable_checksums();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Object.checksums)
  return _msg;
}
inline void Object::set_allocated_checksums(::google::storage::v2::ObjectChecksums* checksums) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.checksums_;
  }
  if (checksums) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(checksums);
    if (message_arena != submessage_arena) {
      checksums = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, checksums, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.checksums_ = checksums;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Object.checksums)
}

// .google.protobuf.Timestamp update_time = 17 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool Object::_internal_has_update_time() const {
  return this != internal_default_instance() && _impl_.update_time_ != nullptr;
}
inline bool Object::has_update_time() const {
  return _internal_has_update_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Object::_internal_update_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.update_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Object::update_time() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Object.update_time)
  return _internal_update_time();
}
inline void Object::unsafe_arena_set_allocated_update_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* update_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_time_);
  }
  _impl_.update_time_ = update_time;
  if (update_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.Object.update_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Object::release_update_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.update_time_;
  _impl_.update_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Object::unsafe_arena_release_update_time() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Object.update_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.update_time_;
  _impl_.update_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Object::_internal_mutable_update_time() {
  
  if (_impl_.update_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.update_time_ = p;
  }
  return _impl_.update_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Object::mutable_update_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_update_time();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Object.update_time)
  return _msg;
}
inline void Object::set_allocated_update_time(::PROTOBUF_NAMESPACE_ID::Timestamp* update_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_time_);
  }
  if (update_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_time));
    if (message_arena != submessage_arena) {
      update_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.update_time_ = update_time;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Object.update_time)
}

// string kms_key = 18 [(.google.api.resource_reference) = {
inline void Object::clear_kms_key() {
  _impl_.kms_key_.ClearToEmpty();
}
inline const std::string& Object::kms_key() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Object.kms_key)
  return _internal_kms_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Object::set_kms_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.kms_key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.Object.kms_key)
}
inline std::string* Object::mutable_kms_key() {
  std::string* _s = _internal_mutable_kms_key();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Object.kms_key)
  return _s;
}
inline const std::string& Object::_internal_kms_key() const {
  return _impl_.kms_key_.Get();
}
inline void Object::_internal_set_kms_key(const std::string& value) {
  
  _impl_.kms_key_.Set(value, GetArenaForAllocation());
}
inline std::string* Object::_internal_mutable_kms_key() {
  
  return _impl_.kms_key_.Mutable(GetArenaForAllocation());
}
inline std::string* Object::release_kms_key() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Object.kms_key)
  return _impl_.kms_key_.Release();
}
inline void Object::set_allocated_kms_key(std::string* kms_key) {
  if (kms_key != nullptr) {
    
  } else {
    
  }
  _impl_.kms_key_.SetAllocated(kms_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.kms_key_.IsDefault()) {
    _impl_.kms_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Object.kms_key)
}

// .google.protobuf.Timestamp update_storage_class_time = 19 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool Object::_internal_has_update_storage_class_time() const {
  return this != internal_default_instance() && _impl_.update_storage_class_time_ != nullptr;
}
inline bool Object::has_update_storage_class_time() const {
  return _internal_has_update_storage_class_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Object::_internal_update_storage_class_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.update_storage_class_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Object::update_storage_class_time() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Object.update_storage_class_time)
  return _internal_update_storage_class_time();
}
inline void Object::unsafe_arena_set_allocated_update_storage_class_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* update_storage_class_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_storage_class_time_);
  }
  _impl_.update_storage_class_time_ = update_storage_class_time;
  if (update_storage_class_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.Object.update_storage_class_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Object::release_update_storage_class_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.update_storage_class_time_;
  _impl_.update_storage_class_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Object::unsafe_arena_release_update_storage_class_time() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Object.update_storage_class_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.update_storage_class_time_;
  _impl_.update_storage_class_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Object::_internal_mutable_update_storage_class_time() {
  
  if (_impl_.update_storage_class_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.update_storage_class_time_ = p;
  }
  return _impl_.update_storage_class_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Object::mutable_update_storage_class_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_update_storage_class_time();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Object.update_storage_class_time)
  return _msg;
}
inline void Object::set_allocated_update_storage_class_time(::PROTOBUF_NAMESPACE_ID::Timestamp* update_storage_class_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_storage_class_time_);
  }
  if (update_storage_class_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_storage_class_time));
    if (message_arena != submessage_arena) {
      update_storage_class_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_storage_class_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.update_storage_class_time_ = update_storage_class_time;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Object.update_storage_class_time)
}

// bool temporary_hold = 20;
inline void Object::clear_temporary_hold() {
  _impl_.temporary_hold_ = false;
}
inline bool Object::_internal_temporary_hold() const {
  return _impl_.temporary_hold_;
}
inline bool Object::temporary_hold() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Object.temporary_hold)
  return _internal_temporary_hold();
}
inline void Object::_internal_set_temporary_hold(bool value) {
  
  _impl_.temporary_hold_ = value;
}
inline void Object::set_temporary_hold(bool value) {
  _internal_set_temporary_hold(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.Object.temporary_hold)
}

// .google.protobuf.Timestamp retention_expire_time = 21;
inline bool Object::_internal_has_retention_expire_time() const {
  return this != internal_default_instance() && _impl_.retention_expire_time_ != nullptr;
}
inline bool Object::has_retention_expire_time() const {
  return _internal_has_retention_expire_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Object::_internal_retention_expire_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.retention_expire_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Object::retention_expire_time() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Object.retention_expire_time)
  return _internal_retention_expire_time();
}
inline void Object::unsafe_arena_set_allocated_retention_expire_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* retention_expire_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.retention_expire_time_);
  }
  _impl_.retention_expire_time_ = retention_expire_time;
  if (retention_expire_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.Object.retention_expire_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Object::release_retention_expire_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.retention_expire_time_;
  _impl_.retention_expire_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Object::unsafe_arena_release_retention_expire_time() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Object.retention_expire_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.retention_expire_time_;
  _impl_.retention_expire_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Object::_internal_mutable_retention_expire_time() {
  
  if (_impl_.retention_expire_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.retention_expire_time_ = p;
  }
  return _impl_.retention_expire_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Object::mutable_retention_expire_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_retention_expire_time();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Object.retention_expire_time)
  return _msg;
}
inline void Object::set_allocated_retention_expire_time(::PROTOBUF_NAMESPACE_ID::Timestamp* retention_expire_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.retention_expire_time_);
  }
  if (retention_expire_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(retention_expire_time));
    if (message_arena != submessage_arena) {
      retention_expire_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, retention_expire_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.retention_expire_time_ = retention_expire_time;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Object.retention_expire_time)
}

// map<string, string> metadata = 22;
inline int Object::_internal_metadata_size() const {
  return _impl_.metadata_.size();
}
inline int Object::metadata_size() const {
  return _internal_metadata_size();
}
inline void Object::clear_metadata() {
  _impl_.metadata_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Object::_internal_metadata() const {
  return _impl_.metadata_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Object::metadata() const {
  // @@protoc_insertion_point(field_map:google.storage.v2.Object.metadata)
  return _internal_metadata();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Object::_internal_mutable_metadata() {
  return _impl_.metadata_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Object::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:google.storage.v2.Object.metadata)
  return _internal_mutable_metadata();
}

// optional bool event_based_hold = 23;
inline bool Object::_internal_has_event_based_hold() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Object::has_event_based_hold() const {
  return _internal_has_event_based_hold();
}
inline void Object::clear_event_based_hold() {
  _impl_.event_based_hold_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool Object::_internal_event_based_hold() const {
  return _impl_.event_based_hold_;
}
inline bool Object::event_based_hold() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Object.event_based_hold)
  return _internal_event_based_hold();
}
inline void Object::_internal_set_event_based_hold(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.event_based_hold_ = value;
}
inline void Object::set_event_based_hold(bool value) {
  _internal_set_event_based_hold(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.Object.event_based_hold)
}

// .google.storage.v2.Owner owner = 24 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool Object::_internal_has_owner() const {
  return this != internal_default_instance() && _impl_.owner_ != nullptr;
}
inline bool Object::has_owner() const {
  return _internal_has_owner();
}
inline void Object::clear_owner() {
  if (GetArenaForAllocation() == nullptr && _impl_.owner_ != nullptr) {
    delete _impl_.owner_;
  }
  _impl_.owner_ = nullptr;
}
inline const ::google::storage::v2::Owner& Object::_internal_owner() const {
  const ::google::storage::v2::Owner* p = _impl_.owner_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::storage::v2::Owner&>(
      ::google::storage::v2::_Owner_default_instance_);
}
inline const ::google::storage::v2::Owner& Object::owner() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Object.owner)
  return _internal_owner();
}
inline void Object::unsafe_arena_set_allocated_owner(
    ::google::storage::v2::Owner* owner) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.owner_);
  }
  _impl_.owner_ = owner;
  if (owner) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.Object.owner)
}
inline ::google::storage::v2::Owner* Object::release_owner() {
  
  ::google::storage::v2::Owner* temp = _impl_.owner_;
  _impl_.owner_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::storage::v2::Owner* Object::unsafe_arena_release_owner() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Object.owner)
  
  ::google::storage::v2::Owner* temp = _impl_.owner_;
  _impl_.owner_ = nullptr;
  return temp;
}
inline ::google::storage::v2::Owner* Object::_internal_mutable_owner() {
  
  if (_impl_.owner_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::storage::v2::Owner>(GetArenaForAllocation());
    _impl_.owner_ = p;
  }
  return _impl_.owner_;
}
inline ::google::storage::v2::Owner* Object::mutable_owner() {
  ::google::storage::v2::Owner* _msg = _internal_mutable_owner();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Object.owner)
  return _msg;
}
inline void Object::set_allocated_owner(::google::storage::v2::Owner* owner) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.owner_;
  }
  if (owner) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(owner);
    if (message_arena != submessage_arena) {
      owner = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, owner, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.owner_ = owner;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Object.owner)
}

// .google.storage.v2.CustomerEncryption customer_encryption = 25;
inline bool Object::_internal_has_customer_encryption() const {
  return this != internal_default_instance() && _impl_.customer_encryption_ != nullptr;
}
inline bool Object::has_customer_encryption() const {
  return _internal_has_customer_encryption();
}
inline void Object::clear_customer_encryption() {
  if (GetArenaForAllocation() == nullptr && _impl_.customer_encryption_ != nullptr) {
    delete _impl_.customer_encryption_;
  }
  _impl_.customer_encryption_ = nullptr;
}
inline const ::google::storage::v2::CustomerEncryption& Object::_internal_customer_encryption() const {
  const ::google::storage::v2::CustomerEncryption* p = _impl_.customer_encryption_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::storage::v2::CustomerEncryption&>(
      ::google::storage::v2::_CustomerEncryption_default_instance_);
}
inline const ::google::storage::v2::CustomerEncryption& Object::customer_encryption() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Object.customer_encryption)
  return _internal_customer_encryption();
}
inline void Object::unsafe_arena_set_allocated_customer_encryption(
    ::google::storage::v2::CustomerEncryption* customer_encryption) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.customer_encryption_);
  }
  _impl_.customer_encryption_ = customer_encryption;
  if (customer_encryption) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.Object.customer_encryption)
}
inline ::google::storage::v2::CustomerEncryption* Object::release_customer_encryption() {
  
  ::google::storage::v2::CustomerEncryption* temp = _impl_.customer_encryption_;
  _impl_.customer_encryption_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::storage::v2::CustomerEncryption* Object::unsafe_arena_release_customer_encryption() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Object.customer_encryption)
  
  ::google::storage::v2::CustomerEncryption* temp = _impl_.customer_encryption_;
  _impl_.customer_encryption_ = nullptr;
  return temp;
}
inline ::google::storage::v2::CustomerEncryption* Object::_internal_mutable_customer_encryption() {
  
  if (_impl_.customer_encryption_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::storage::v2::CustomerEncryption>(GetArenaForAllocation());
    _impl_.customer_encryption_ = p;
  }
  return _impl_.customer_encryption_;
}
inline ::google::storage::v2::CustomerEncryption* Object::mutable_customer_encryption() {
  ::google::storage::v2::CustomerEncryption* _msg = _internal_mutable_customer_encryption();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Object.customer_encryption)
  return _msg;
}
inline void Object::set_allocated_customer_encryption(::google::storage::v2::CustomerEncryption* customer_encryption) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.customer_encryption_;
  }
  if (customer_encryption) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(customer_encryption);
    if (message_arena != submessage_arena) {
      customer_encryption = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, customer_encryption, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.customer_encryption_ = customer_encryption;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Object.customer_encryption)
}

// .google.protobuf.Timestamp custom_time = 26;
inline bool Object::_internal_has_custom_time() const {
  return this != internal_default_instance() && _impl_.custom_time_ != nullptr;
}
inline bool Object::has_custom_time() const {
  return _internal_has_custom_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Object::_internal_custom_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.custom_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Object::custom_time() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Object.custom_time)
  return _internal_custom_time();
}
inline void Object::unsafe_arena_set_allocated_custom_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* custom_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.custom_time_);
  }
  _impl_.custom_time_ = custom_time;
  if (custom_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.Object.custom_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Object::release_custom_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.custom_time_;
  _impl_.custom_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Object::unsafe_arena_release_custom_time() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Object.custom_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.custom_time_;
  _impl_.custom_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Object::_internal_mutable_custom_time() {
  
  if (_impl_.custom_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.custom_time_ = p;
  }
  return _impl_.custom_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Object::mutable_custom_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_custom_time();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Object.custom_time)
  return _msg;
}
inline void Object::set_allocated_custom_time(::PROTOBUF_NAMESPACE_ID::Timestamp* custom_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.custom_time_);
  }
  if (custom_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(custom_time));
    if (message_arena != submessage_arena) {
      custom_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custom_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.custom_time_ = custom_time;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Object.custom_time)
}

// -------------------------------------------------------------------

// ObjectAccessControl

// string role = 1;
inline void ObjectAccessControl::clear_role() {
  _impl_.role_.ClearToEmpty();
}
inline const std::string& ObjectAccessControl::role() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ObjectAccessControl.role)
  return _internal_role();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObjectAccessControl::set_role(ArgT0&& arg0, ArgT... args) {
 
 _impl_.role_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.ObjectAccessControl.role)
}
inline std::string* ObjectAccessControl::mutable_role() {
  std::string* _s = _internal_mutable_role();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.ObjectAccessControl.role)
  return _s;
}
inline const std::string& ObjectAccessControl::_internal_role() const {
  return _impl_.role_.Get();
}
inline void ObjectAccessControl::_internal_set_role(const std::string& value) {
  
  _impl_.role_.Set(value, GetArenaForAllocation());
}
inline std::string* ObjectAccessControl::_internal_mutable_role() {
  
  return _impl_.role_.Mutable(GetArenaForAllocation());
}
inline std::string* ObjectAccessControl::release_role() {
  // @@protoc_insertion_point(field_release:google.storage.v2.ObjectAccessControl.role)
  return _impl_.role_.Release();
}
inline void ObjectAccessControl::set_allocated_role(std::string* role) {
  if (role != nullptr) {
    
  } else {
    
  }
  _impl_.role_.SetAllocated(role, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.role_.IsDefault()) {
    _impl_.role_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.ObjectAccessControl.role)
}

// string id = 2;
inline void ObjectAccessControl::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& ObjectAccessControl::id() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ObjectAccessControl.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObjectAccessControl::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.ObjectAccessControl.id)
}
inline std::string* ObjectAccessControl::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.ObjectAccessControl.id)
  return _s;
}
inline const std::string& ObjectAccessControl::_internal_id() const {
  return _impl_.id_.Get();
}
inline void ObjectAccessControl::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* ObjectAccessControl::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* ObjectAccessControl::release_id() {
  // @@protoc_insertion_point(field_release:google.storage.v2.ObjectAccessControl.id)
  return _impl_.id_.Release();
}
inline void ObjectAccessControl::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.ObjectAccessControl.id)
}

// string entity = 3;
inline void ObjectAccessControl::clear_entity() {
  _impl_.entity_.ClearToEmpty();
}
inline const std::string& ObjectAccessControl::entity() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ObjectAccessControl.entity)
  return _internal_entity();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObjectAccessControl::set_entity(ArgT0&& arg0, ArgT... args) {
 
 _impl_.entity_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.ObjectAccessControl.entity)
}
inline std::string* ObjectAccessControl::mutable_entity() {
  std::string* _s = _internal_mutable_entity();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.ObjectAccessControl.entity)
  return _s;
}
inline const std::string& ObjectAccessControl::_internal_entity() const {
  return _impl_.entity_.Get();
}
inline void ObjectAccessControl::_internal_set_entity(const std::string& value) {
  
  _impl_.entity_.Set(value, GetArenaForAllocation());
}
inline std::string* ObjectAccessControl::_internal_mutable_entity() {
  
  return _impl_.entity_.Mutable(GetArenaForAllocation());
}
inline std::string* ObjectAccessControl::release_entity() {
  // @@protoc_insertion_point(field_release:google.storage.v2.ObjectAccessControl.entity)
  return _impl_.entity_.Release();
}
inline void ObjectAccessControl::set_allocated_entity(std::string* entity) {
  if (entity != nullptr) {
    
  } else {
    
  }
  _impl_.entity_.SetAllocated(entity, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.entity_.IsDefault()) {
    _impl_.entity_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.ObjectAccessControl.entity)
}

// string entity_id = 4;
inline void ObjectAccessControl::clear_entity_id() {
  _impl_.entity_id_.ClearToEmpty();
}
inline const std::string& ObjectAccessControl::entity_id() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ObjectAccessControl.entity_id)
  return _internal_entity_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObjectAccessControl::set_entity_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.entity_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.ObjectAccessControl.entity_id)
}
inline std::string* ObjectAccessControl::mutable_entity_id() {
  std::string* _s = _internal_mutable_entity_id();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.ObjectAccessControl.entity_id)
  return _s;
}
inline const std::string& ObjectAccessControl::_internal_entity_id() const {
  return _impl_.entity_id_.Get();
}
inline void ObjectAccessControl::_internal_set_entity_id(const std::string& value) {
  
  _impl_.entity_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ObjectAccessControl::_internal_mutable_entity_id() {
  
  return _impl_.entity_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ObjectAccessControl::release_entity_id() {
  // @@protoc_insertion_point(field_release:google.storage.v2.ObjectAccessControl.entity_id)
  return _impl_.entity_id_.Release();
}
inline void ObjectAccessControl::set_allocated_entity_id(std::string* entity_id) {
  if (entity_id != nullptr) {
    
  } else {
    
  }
  _impl_.entity_id_.SetAllocated(entity_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.entity_id_.IsDefault()) {
    _impl_.entity_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.ObjectAccessControl.entity_id)
}

// string etag = 8;
inline void ObjectAccessControl::clear_etag() {
  _impl_.etag_.ClearToEmpty();
}
inline const std::string& ObjectAccessControl::etag() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ObjectAccessControl.etag)
  return _internal_etag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObjectAccessControl::set_etag(ArgT0&& arg0, ArgT... args) {
 
 _impl_.etag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.ObjectAccessControl.etag)
}
inline std::string* ObjectAccessControl::mutable_etag() {
  std::string* _s = _internal_mutable_etag();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.ObjectAccessControl.etag)
  return _s;
}
inline const std::string& ObjectAccessControl::_internal_etag() const {
  return _impl_.etag_.Get();
}
inline void ObjectAccessControl::_internal_set_etag(const std::string& value) {
  
  _impl_.etag_.Set(value, GetArenaForAllocation());
}
inline std::string* ObjectAccessControl::_internal_mutable_etag() {
  
  return _impl_.etag_.Mutable(GetArenaForAllocation());
}
inline std::string* ObjectAccessControl::release_etag() {
  // @@protoc_insertion_point(field_release:google.storage.v2.ObjectAccessControl.etag)
  return _impl_.etag_.Release();
}
inline void ObjectAccessControl::set_allocated_etag(std::string* etag) {
  if (etag != nullptr) {
    
  } else {
    
  }
  _impl_.etag_.SetAllocated(etag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.etag_.IsDefault()) {
    _impl_.etag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.ObjectAccessControl.etag)
}

// string email = 5;
inline void ObjectAccessControl::clear_email() {
  _impl_.email_.ClearToEmpty();
}
inline const std::string& ObjectAccessControl::email() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ObjectAccessControl.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObjectAccessControl::set_email(ArgT0&& arg0, ArgT... args) {
 
 _impl_.email_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.ObjectAccessControl.email)
}
inline std::string* ObjectAccessControl::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.ObjectAccessControl.email)
  return _s;
}
inline const std::string& ObjectAccessControl::_internal_email() const {
  return _impl_.email_.Get();
}
inline void ObjectAccessControl::_internal_set_email(const std::string& value) {
  
  _impl_.email_.Set(value, GetArenaForAllocation());
}
inline std::string* ObjectAccessControl::_internal_mutable_email() {
  
  return _impl_.email_.Mutable(GetArenaForAllocation());
}
inline std::string* ObjectAccessControl::release_email() {
  // @@protoc_insertion_point(field_release:google.storage.v2.ObjectAccessControl.email)
  return _impl_.email_.Release();
}
inline void ObjectAccessControl::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  _impl_.email_.SetAllocated(email, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.email_.IsDefault()) {
    _impl_.email_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.ObjectAccessControl.email)
}

// string domain = 6;
inline void ObjectAccessControl::clear_domain() {
  _impl_.domain_.ClearToEmpty();
}
inline const std::string& ObjectAccessControl::domain() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ObjectAccessControl.domain)
  return _internal_domain();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObjectAccessControl::set_domain(ArgT0&& arg0, ArgT... args) {
 
 _impl_.domain_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.ObjectAccessControl.domain)
}
inline std::string* ObjectAccessControl::mutable_domain() {
  std::string* _s = _internal_mutable_domain();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.ObjectAccessControl.domain)
  return _s;
}
inline const std::string& ObjectAccessControl::_internal_domain() const {
  return _impl_.domain_.Get();
}
inline void ObjectAccessControl::_internal_set_domain(const std::string& value) {
  
  _impl_.domain_.Set(value, GetArenaForAllocation());
}
inline std::string* ObjectAccessControl::_internal_mutable_domain() {
  
  return _impl_.domain_.Mutable(GetArenaForAllocation());
}
inline std::string* ObjectAccessControl::release_domain() {
  // @@protoc_insertion_point(field_release:google.storage.v2.ObjectAccessControl.domain)
  return _impl_.domain_.Release();
}
inline void ObjectAccessControl::set_allocated_domain(std::string* domain) {
  if (domain != nullptr) {
    
  } else {
    
  }
  _impl_.domain_.SetAllocated(domain, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.domain_.IsDefault()) {
    _impl_.domain_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.ObjectAccessControl.domain)
}

// .google.storage.v2.ProjectTeam project_team = 7;
inline bool ObjectAccessControl::_internal_has_project_team() const {
  return this != internal_default_instance() && _impl_.project_team_ != nullptr;
}
inline bool ObjectAccessControl::has_project_team() const {
  return _internal_has_project_team();
}
inline void ObjectAccessControl::clear_project_team() {
  if (GetArenaForAllocation() == nullptr && _impl_.project_team_ != nullptr) {
    delete _impl_.project_team_;
  }
  _impl_.project_team_ = nullptr;
}
inline const ::google::storage::v2::ProjectTeam& ObjectAccessControl::_internal_project_team() const {
  const ::google::storage::v2::ProjectTeam* p = _impl_.project_team_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::storage::v2::ProjectTeam&>(
      ::google::storage::v2::_ProjectTeam_default_instance_);
}
inline const ::google::storage::v2::ProjectTeam& ObjectAccessControl::project_team() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ObjectAccessControl.project_team)
  return _internal_project_team();
}
inline void ObjectAccessControl::unsafe_arena_set_allocated_project_team(
    ::google::storage::v2::ProjectTeam* project_team) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.project_team_);
  }
  _impl_.project_team_ = project_team;
  if (project_team) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.ObjectAccessControl.project_team)
}
inline ::google::storage::v2::ProjectTeam* ObjectAccessControl::release_project_team() {
  
  ::google::storage::v2::ProjectTeam* temp = _impl_.project_team_;
  _impl_.project_team_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::storage::v2::ProjectTeam* ObjectAccessControl::unsafe_arena_release_project_team() {
  // @@protoc_insertion_point(field_release:google.storage.v2.ObjectAccessControl.project_team)
  
  ::google::storage::v2::ProjectTeam* temp = _impl_.project_team_;
  _impl_.project_team_ = nullptr;
  return temp;
}
inline ::google::storage::v2::ProjectTeam* ObjectAccessControl::_internal_mutable_project_team() {
  
  if (_impl_.project_team_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::storage::v2::ProjectTeam>(GetArenaForAllocation());
    _impl_.project_team_ = p;
  }
  return _impl_.project_team_;
}
inline ::google::storage::v2::ProjectTeam* ObjectAccessControl::mutable_project_team() {
  ::google::storage::v2::ProjectTeam* _msg = _internal_mutable_project_team();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.ObjectAccessControl.project_team)
  return _msg;
}
inline void ObjectAccessControl::set_allocated_project_team(::google::storage::v2::ProjectTeam* project_team) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.project_team_;
  }
  if (project_team) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(project_team);
    if (message_arena != submessage_arena) {
      project_team = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, project_team, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.project_team_ = project_team;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.ObjectAccessControl.project_team)
}

// -------------------------------------------------------------------

// ListObjectsResponse

// repeated .google.storage.v2.Object objects = 1;
inline int ListObjectsResponse::_internal_objects_size() const {
  return _impl_.objects_.size();
}
inline int ListObjectsResponse::objects_size() const {
  return _internal_objects_size();
}
inline void ListObjectsResponse::clear_objects() {
  _impl_.objects_.Clear();
}
inline ::google::storage::v2::Object* ListObjectsResponse::mutable_objects(int index) {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.ListObjectsResponse.objects)
  return _impl_.objects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::storage::v2::Object >*
ListObjectsResponse::mutable_objects() {
  // @@protoc_insertion_point(field_mutable_list:google.storage.v2.ListObjectsResponse.objects)
  return &_impl_.objects_;
}
inline const ::google::storage::v2::Object& ListObjectsResponse::_internal_objects(int index) const {
  return _impl_.objects_.Get(index);
}
inline const ::google::storage::v2::Object& ListObjectsResponse::objects(int index) const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ListObjectsResponse.objects)
  return _internal_objects(index);
}
inline ::google::storage::v2::Object* ListObjectsResponse::_internal_add_objects() {
  return _impl_.objects_.Add();
}
inline ::google::storage::v2::Object* ListObjectsResponse::add_objects() {
  ::google::storage::v2::Object* _add = _internal_add_objects();
  // @@protoc_insertion_point(field_add:google.storage.v2.ListObjectsResponse.objects)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::storage::v2::Object >&
ListObjectsResponse::objects() const {
  // @@protoc_insertion_point(field_list:google.storage.v2.ListObjectsResponse.objects)
  return _impl_.objects_;
}

// repeated string prefixes = 2;
inline int ListObjectsResponse::_internal_prefixes_size() const {
  return _impl_.prefixes_.size();
}
inline int ListObjectsResponse::prefixes_size() const {
  return _internal_prefixes_size();
}
inline void ListObjectsResponse::clear_prefixes() {
  _impl_.prefixes_.Clear();
}
inline std::string* ListObjectsResponse::add_prefixes() {
  std::string* _s = _internal_add_prefixes();
  // @@protoc_insertion_point(field_add_mutable:google.storage.v2.ListObjectsResponse.prefixes)
  return _s;
}
inline const std::string& ListObjectsResponse::_internal_prefixes(int index) const {
  return _impl_.prefixes_.Get(index);
}
inline const std::string& ListObjectsResponse::prefixes(int index) const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ListObjectsResponse.prefixes)
  return _internal_prefixes(index);
}
inline std::string* ListObjectsResponse::mutable_prefixes(int index) {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.ListObjectsResponse.prefixes)
  return _impl_.prefixes_.Mutable(index);
}
inline void ListObjectsResponse::set_prefixes(int index, const std::string& value) {
  _impl_.prefixes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.ListObjectsResponse.prefixes)
}
inline void ListObjectsResponse::set_prefixes(int index, std::string&& value) {
  _impl_.prefixes_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.storage.v2.ListObjectsResponse.prefixes)
}
inline void ListObjectsResponse::set_prefixes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.prefixes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.storage.v2.ListObjectsResponse.prefixes)
}
inline void ListObjectsResponse::set_prefixes(int index, const char* value, size_t size) {
  _impl_.prefixes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.storage.v2.ListObjectsResponse.prefixes)
}
inline std::string* ListObjectsResponse::_internal_add_prefixes() {
  return _impl_.prefixes_.Add();
}
inline void ListObjectsResponse::add_prefixes(const std::string& value) {
  _impl_.prefixes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.storage.v2.ListObjectsResponse.prefixes)
}
inline void ListObjectsResponse::add_prefixes(std::string&& value) {
  _impl_.prefixes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.storage.v2.ListObjectsResponse.prefixes)
}
inline void ListObjectsResponse::add_prefixes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.prefixes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.storage.v2.ListObjectsResponse.prefixes)
}
inline void ListObjectsResponse::add_prefixes(const char* value, size_t size) {
  _impl_.prefixes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.storage.v2.ListObjectsResponse.prefixes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListObjectsResponse::prefixes() const {
  // @@protoc_insertion_point(field_list:google.storage.v2.ListObjectsResponse.prefixes)
  return _impl_.prefixes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListObjectsResponse::mutable_prefixes() {
  // @@protoc_insertion_point(field_mutable_list:google.storage.v2.ListObjectsResponse.prefixes)
  return &_impl_.prefixes_;
}

// string next_page_token = 3;
inline void ListObjectsResponse::clear_next_page_token() {
  _impl_.next_page_token_.ClearToEmpty();
}
inline const std::string& ListObjectsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ListObjectsResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListObjectsResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.next_page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.ListObjectsResponse.next_page_token)
}
inline std::string* ListObjectsResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.ListObjectsResponse.next_page_token)
  return _s;
}
inline const std::string& ListObjectsResponse::_internal_next_page_token() const {
  return _impl_.next_page_token_.Get();
}
inline void ListObjectsResponse::_internal_set_next_page_token(const std::string& value) {
  
  _impl_.next_page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListObjectsResponse::_internal_mutable_next_page_token() {
  
  return _impl_.next_page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListObjectsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.storage.v2.ListObjectsResponse.next_page_token)
  return _impl_.next_page_token_.Release();
}
inline void ListObjectsResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  _impl_.next_page_token_.SetAllocated(next_page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.next_page_token_.IsDefault()) {
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.ListObjectsResponse.next_page_token)
}

// -------------------------------------------------------------------

// ProjectTeam

// string project_number = 1;
inline void ProjectTeam::clear_project_number() {
  _impl_.project_number_.ClearToEmpty();
}
inline const std::string& ProjectTeam::project_number() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ProjectTeam.project_number)
  return _internal_project_number();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProjectTeam::set_project_number(ArgT0&& arg0, ArgT... args) {
 
 _impl_.project_number_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.ProjectTeam.project_number)
}
inline std::string* ProjectTeam::mutable_project_number() {
  std::string* _s = _internal_mutable_project_number();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.ProjectTeam.project_number)
  return _s;
}
inline const std::string& ProjectTeam::_internal_project_number() const {
  return _impl_.project_number_.Get();
}
inline void ProjectTeam::_internal_set_project_number(const std::string& value) {
  
  _impl_.project_number_.Set(value, GetArenaForAllocation());
}
inline std::string* ProjectTeam::_internal_mutable_project_number() {
  
  return _impl_.project_number_.Mutable(GetArenaForAllocation());
}
inline std::string* ProjectTeam::release_project_number() {
  // @@protoc_insertion_point(field_release:google.storage.v2.ProjectTeam.project_number)
  return _impl_.project_number_.Release();
}
inline void ProjectTeam::set_allocated_project_number(std::string* project_number) {
  if (project_number != nullptr) {
    
  } else {
    
  }
  _impl_.project_number_.SetAllocated(project_number, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.project_number_.IsDefault()) {
    _impl_.project_number_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.ProjectTeam.project_number)
}

// string team = 2;
inline void ProjectTeam::clear_team() {
  _impl_.team_.ClearToEmpty();
}
inline const std::string& ProjectTeam::team() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ProjectTeam.team)
  return _internal_team();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProjectTeam::set_team(ArgT0&& arg0, ArgT... args) {
 
 _impl_.team_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.ProjectTeam.team)
}
inline std::string* ProjectTeam::mutable_team() {
  std::string* _s = _internal_mutable_team();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.ProjectTeam.team)
  return _s;
}
inline const std::string& ProjectTeam::_internal_team() const {
  return _impl_.team_.Get();
}
inline void ProjectTeam::_internal_set_team(const std::string& value) {
  
  _impl_.team_.Set(value, GetArenaForAllocation());
}
inline std::string* ProjectTeam::_internal_mutable_team() {
  
  return _impl_.team_.Mutable(GetArenaForAllocation());
}
inline std::string* ProjectTeam::release_team() {
  // @@protoc_insertion_point(field_release:google.storage.v2.ProjectTeam.team)
  return _impl_.team_.Release();
}
inline void ProjectTeam::set_allocated_team(std::string* team) {
  if (team != nullptr) {
    
  } else {
    
  }
  _impl_.team_.SetAllocated(team, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.team_.IsDefault()) {
    _impl_.team_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.ProjectTeam.team)
}

// -------------------------------------------------------------------

// ServiceAccount

// string email_address = 1;
inline void ServiceAccount::clear_email_address() {
  _impl_.email_address_.ClearToEmpty();
}
inline const std::string& ServiceAccount::email_address() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ServiceAccount.email_address)
  return _internal_email_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServiceAccount::set_email_address(ArgT0&& arg0, ArgT... args) {
 
 _impl_.email_address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.ServiceAccount.email_address)
}
inline std::string* ServiceAccount::mutable_email_address() {
  std::string* _s = _internal_mutable_email_address();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.ServiceAccount.email_address)
  return _s;
}
inline const std::string& ServiceAccount::_internal_email_address() const {
  return _impl_.email_address_.Get();
}
inline void ServiceAccount::_internal_set_email_address(const std::string& value) {
  
  _impl_.email_address_.Set(value, GetArenaForAllocation());
}
inline std::string* ServiceAccount::_internal_mutable_email_address() {
  
  return _impl_.email_address_.Mutable(GetArenaForAllocation());
}
inline std::string* ServiceAccount::release_email_address() {
  // @@protoc_insertion_point(field_release:google.storage.v2.ServiceAccount.email_address)
  return _impl_.email_address_.Release();
}
inline void ServiceAccount::set_allocated_email_address(std::string* email_address) {
  if (email_address != nullptr) {
    
  } else {
    
  }
  _impl_.email_address_.SetAllocated(email_address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.email_address_.IsDefault()) {
    _impl_.email_address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.ServiceAccount.email_address)
}

// -------------------------------------------------------------------

// Owner

// string entity = 1;
inline void Owner::clear_entity() {
  _impl_.entity_.ClearToEmpty();
}
inline const std::string& Owner::entity() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Owner.entity)
  return _internal_entity();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Owner::set_entity(ArgT0&& arg0, ArgT... args) {
 
 _impl_.entity_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.Owner.entity)
}
inline std::string* Owner::mutable_entity() {
  std::string* _s = _internal_mutable_entity();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Owner.entity)
  return _s;
}
inline const std::string& Owner::_internal_entity() const {
  return _impl_.entity_.Get();
}
inline void Owner::_internal_set_entity(const std::string& value) {
  
  _impl_.entity_.Set(value, GetArenaForAllocation());
}
inline std::string* Owner::_internal_mutable_entity() {
  
  return _impl_.entity_.Mutable(GetArenaForAllocation());
}
inline std::string* Owner::release_entity() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Owner.entity)
  return _impl_.entity_.Release();
}
inline void Owner::set_allocated_entity(std::string* entity) {
  if (entity != nullptr) {
    
  } else {
    
  }
  _impl_.entity_.SetAllocated(entity, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.entity_.IsDefault()) {
    _impl_.entity_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Owner.entity)
}

// string entity_id = 2;
inline void Owner::clear_entity_id() {
  _impl_.entity_id_.ClearToEmpty();
}
inline const std::string& Owner::entity_id() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Owner.entity_id)
  return _internal_entity_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Owner::set_entity_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.entity_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.storage.v2.Owner.entity_id)
}
inline std::string* Owner::mutable_entity_id() {
  std::string* _s = _internal_mutable_entity_id();
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Owner.entity_id)
  return _s;
}
inline const std::string& Owner::_internal_entity_id() const {
  return _impl_.entity_id_.Get();
}
inline void Owner::_internal_set_entity_id(const std::string& value) {
  
  _impl_.entity_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Owner::_internal_mutable_entity_id() {
  
  return _impl_.entity_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Owner::release_entity_id() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Owner.entity_id)
  return _impl_.entity_id_.Release();
}
inline void Owner::set_allocated_entity_id(std::string* entity_id) {
  if (entity_id != nullptr) {
    
  } else {
    
  }
  _impl_.entity_id_.SetAllocated(entity_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.entity_id_.IsDefault()) {
    _impl_.entity_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Owner.entity_id)
}

// -------------------------------------------------------------------

// ContentRange

// int64 start = 1;
inline void ContentRange::clear_start() {
  _impl_.start_ = int64_t{0};
}
inline int64_t ContentRange::_internal_start() const {
  return _impl_.start_;
}
inline int64_t ContentRange::start() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ContentRange.start)
  return _internal_start();
}
inline void ContentRange::_internal_set_start(int64_t value) {
  
  _impl_.start_ = value;
}
inline void ContentRange::set_start(int64_t value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.ContentRange.start)
}

// int64 end = 2;
inline void ContentRange::clear_end() {
  _impl_.end_ = int64_t{0};
}
inline int64_t ContentRange::_internal_end() const {
  return _impl_.end_;
}
inline int64_t ContentRange::end() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ContentRange.end)
  return _internal_end();
}
inline void ContentRange::_internal_set_end(int64_t value) {
  
  _impl_.end_ = value;
}
inline void ContentRange::set_end(int64_t value) {
  _internal_set_end(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.ContentRange.end)
}

// int64 complete_length = 3;
inline void ContentRange::clear_complete_length() {
  _impl_.complete_length_ = int64_t{0};
}
inline int64_t ContentRange::_internal_complete_length() const {
  return _impl_.complete_length_;
}
inline int64_t ContentRange::complete_length() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ContentRange.complete_length)
  return _internal_complete_length();
}
inline void ContentRange::_internal_set_complete_length(int64_t value) {
  
  _impl_.complete_length_ = value;
}
inline void ContentRange::set_complete_length(int64_t value) {
  _internal_set_complete_length(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.ContentRange.complete_length)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace storage
}  // namespace google

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::google::storage::v2::ServiceConstants_Values> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::storage::v2::ServiceConstants_Values>() {
  return ::google::storage::v2::ServiceConstants_Values_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fstorage_2fv2_2fstorage_2eproto
